
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b430  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b430  0040b430  0001b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040b438  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004ac  204009d8  0040be10  000209d8  2**2
                  ALLOC
  4 .stack        00002004  20400e84  0040c2bc  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20402e88  0040e2c0  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029b0a  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005a18  00000000  00000000  0004a569  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c75d  00000000  00000000  0004ff81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001280  00000000  00000000  0005c6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c8  00000000  00000000  0005d95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027718  00000000  00000000  0005ed26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000196d3  00000000  00000000  0008643e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096c45  00000000  00000000  0009fb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000040f4  00000000  00000000  00136758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 2e 40 20 01 14 40 00 ff 13 40 00 ff 13 40 00     ..@ ..@...@...@.
  400010:	ff 13 40 00 ff 13 40 00 ff 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 17 40 00 ff 13 40 00 00 00 00 00 79 18 40 00     ..@...@.....y.@.
  40003c:	e1 18 40 00 ff 13 40 00 ff 13 40 00 35 38 40 00     ..@...@...@.58@.
  40004c:	89 37 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     .7@...@...@...@.
  40005c:	ff 13 40 00 ff 13 40 00 00 00 00 00 dd 10 40 00     ..@...@.......@.
  40006c:	f1 10 40 00 05 11 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40007c:	ff 13 40 00 19 11 40 00 2d 11 40 00 ff 13 40 00     ..@...@.-.@...@.
  40008c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40009c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000ac:	01 38 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     .8@...@...@...@.
  4000bc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000cc:	ff 13 40 00 00 00 00 00 ff 13 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000ec:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000fc:	ff 13 40 00 cd 37 40 00 ff 13 40 00 ff 13 40 00     ..@..7@...@...@.
  40010c:	ff 13 40 00 ff 13 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ......@...@...@.
  40012c:	ff 13 40 00 ff 13 40 00 00 00 00 00 ff 13 40 00     ..@...@.......@.
  40013c:	ff 13 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	0040b438 	.word	0x0040b438

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040b438 	.word	0x0040b438
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040b438 	.word	0x0040b438
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002b2:	4d2a      	ldr	r5, [pc, #168]	; (40035c <rtc_set_date+0xac>)
  4002b4:	fba5 4603 	umull	r4, r6, r5, r3
  4002b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002ba:	9c03      	ldr	r4, [sp, #12]
  4002bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4002c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4002ce:	fba5 6402 	umull	r6, r4, r5, r2
  4002d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4002d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4002dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4002e4:	4b1e      	ldr	r3, [pc, #120]	; (400360 <rtc_set_date+0xb0>)
  4002e6:	fba3 4301 	umull	r4, r3, r3, r1
  4002ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4002f0:	4b1c      	ldr	r3, [pc, #112]	; (400364 <rtc_set_date+0xb4>)
  4002f2:	fba3 4301 	umull	r4, r3, r3, r1
  4002f6:	095b      	lsrs	r3, r3, #5
  4002f8:	fba5 6403 	umull	r6, r4, r5, r3
  4002fc:	08e4      	lsrs	r4, r4, #3
  4002fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400302:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400308:	fba5 4301 	umull	r4, r3, r5, r1
  40030c:	08db      	lsrs	r3, r3, #3
  40030e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400312:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40031a:	fba5 1503 	umull	r1, r5, r5, r3
  40031e:	08ed      	lsrs	r5, r5, #3
  400320:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400324:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40032c:	6983      	ldr	r3, [r0, #24]
  40032e:	f013 0f04 	tst.w	r3, #4
  400332:	d0fb      	beq.n	40032c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400334:	6803      	ldr	r3, [r0, #0]
  400336:	f043 0302 	orr.w	r3, r3, #2
  40033a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40033c:	6983      	ldr	r3, [r0, #24]
  40033e:	f013 0f01 	tst.w	r3, #1
  400342:	d0fb      	beq.n	40033c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400344:	2301      	movs	r3, #1
  400346:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400348:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40034a:	6803      	ldr	r3, [r0, #0]
  40034c:	f023 0302 	bic.w	r3, r3, #2
  400350:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400352:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400354:	f000 0002 	and.w	r0, r0, #2
  400358:	bc70      	pop	{r4, r5, r6}
  40035a:	4770      	bx	lr
  40035c:	cccccccd 	.word	0xcccccccd
  400360:	10624dd3 	.word	0x10624dd3
  400364:	51eb851f 	.word	0x51eb851f

00400368 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400368:	6980      	ldr	r0, [r0, #24]
}
  40036a:	4770      	bx	lr

0040036c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40036c:	61c1      	str	r1, [r0, #28]
  40036e:	4770      	bx	lr

00400370 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400370:	4b03      	ldr	r3, [pc, #12]	; (400380 <rtt_init+0x10>)
  400372:	681b      	ldr	r3, [r3, #0]
  400374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400378:	4319      	orrs	r1, r3
  40037a:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  40037c:	2000      	movs	r0, #0
  40037e:	4770      	bx	lr
  400380:	204009f4 	.word	0x204009f4

00400384 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400384:	b941      	cbnz	r1, 400398 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400386:	4a09      	ldr	r2, [pc, #36]	; (4003ac <rtt_sel_source+0x28>)
  400388:	6813      	ldr	r3, [r2, #0]
  40038a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40038e:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400390:	6802      	ldr	r2, [r0, #0]
  400392:	4313      	orrs	r3, r2
  400394:	6003      	str	r3, [r0, #0]
  400396:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400398:	4a04      	ldr	r2, [pc, #16]	; (4003ac <rtt_sel_source+0x28>)
  40039a:	6813      	ldr	r3, [r2, #0]
  40039c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4003a0:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4003a2:	6802      	ldr	r2, [r0, #0]
  4003a4:	4313      	orrs	r3, r2
  4003a6:	6003      	str	r3, [r0, #0]
  4003a8:	4770      	bx	lr
  4003aa:	bf00      	nop
  4003ac:	204009f4 	.word	0x204009f4

004003b0 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4003b0:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003b2:	4b03      	ldr	r3, [pc, #12]	; (4003c0 <rtt_enable_interrupt+0x10>)
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	4319      	orrs	r1, r3
  4003b8:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4003ba:	6001      	str	r1, [r0, #0]
  4003bc:	4770      	bx	lr
  4003be:	bf00      	nop
  4003c0:	204009f4 	.word	0x204009f4

004003c4 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4003c4:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4003c6:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003ca:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <rtt_disable_interrupt+0x10>)
  4003cc:	681b      	ldr	r3, [r3, #0]
  4003ce:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4003d0:	6001      	str	r1, [r0, #0]
  4003d2:	4770      	bx	lr
  4003d4:	204009f4 	.word	0x204009f4

004003d8 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4003d8:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4003da:	6883      	ldr	r3, [r0, #8]
  4003dc:	429a      	cmp	r2, r3
  4003de:	d003      	beq.n	4003e8 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4003e0:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4003e2:	6883      	ldr	r3, [r0, #8]
  4003e4:	4293      	cmp	r3, r2
  4003e6:	d1fb      	bne.n	4003e0 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	4770      	bx	lr

004003ec <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4003ec:	68c0      	ldr	r0, [r0, #12]
}
  4003ee:	4770      	bx	lr

004003f0 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4606      	mov	r6, r0
  4003f4:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4003f6:	6804      	ldr	r4, [r0, #0]
  4003f8:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4003fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400400:	4809      	ldr	r0, [pc, #36]	; (400428 <rtt_write_alarm_time+0x38>)
  400402:	4b0a      	ldr	r3, [pc, #40]	; (40042c <rtt_write_alarm_time+0x3c>)
  400404:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400406:	b92d      	cbnz	r5, 400414 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400408:	f04f 33ff 	mov.w	r3, #4294967295
  40040c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40040e:	b924      	cbnz	r4, 40041a <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400410:	2000      	movs	r0, #0
  400412:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400414:	3d01      	subs	r5, #1
  400416:	6075      	str	r5, [r6, #4]
  400418:	e7f9      	b.n	40040e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40041a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40041e:	4802      	ldr	r0, [pc, #8]	; (400428 <rtt_write_alarm_time+0x38>)
  400420:	4b03      	ldr	r3, [pc, #12]	; (400430 <rtt_write_alarm_time+0x40>)
  400422:	4798      	blx	r3
  400424:	e7f4      	b.n	400410 <rtt_write_alarm_time+0x20>
  400426:	bf00      	nop
  400428:	400e1830 	.word	0x400e1830
  40042c:	004003c5 	.word	0x004003c5
  400430:	004003b1 	.word	0x004003b1

00400434 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400434:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <spi_enable_clock+0x20>)
  400438:	4298      	cmp	r0, r3
  40043a:	d003      	beq.n	400444 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40043c:	4b06      	ldr	r3, [pc, #24]	; (400458 <spi_enable_clock+0x24>)
  40043e:	4298      	cmp	r0, r3
  400440:	d004      	beq.n	40044c <spi_enable_clock+0x18>
  400442:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400444:	2015      	movs	r0, #21
  400446:	4b05      	ldr	r3, [pc, #20]	; (40045c <spi_enable_clock+0x28>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	202a      	movs	r0, #42	; 0x2a
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <spi_enable_clock+0x28>)
  400450:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400452:	e7f6      	b.n	400442 <spi_enable_clock+0xe>
  400454:	40008000 	.word	0x40008000
  400458:	40058000 	.word	0x40058000
  40045c:	00401261 	.word	0x00401261

00400460 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400460:	6843      	ldr	r3, [r0, #4]
  400462:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400466:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400468:	6843      	ldr	r3, [r0, #4]
  40046a:	0409      	lsls	r1, r1, #16
  40046c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400470:	4319      	orrs	r1, r3
  400472:	6041      	str	r1, [r0, #4]
  400474:	4770      	bx	lr

00400476 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400476:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400478:	f643 2499 	movw	r4, #15001	; 0x3a99
  40047c:	6905      	ldr	r5, [r0, #16]
  40047e:	f015 0f02 	tst.w	r5, #2
  400482:	d103      	bne.n	40048c <spi_write+0x16>
		if (!timeout--) {
  400484:	3c01      	subs	r4, #1
  400486:	d1f9      	bne.n	40047c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400488:	2001      	movs	r0, #1
  40048a:	e00c      	b.n	4004a6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40048c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40048e:	f014 0f02 	tst.w	r4, #2
  400492:	d006      	beq.n	4004a2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400494:	0412      	lsls	r2, r2, #16
  400496:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40049a:	4311      	orrs	r1, r2
		if (uc_last) {
  40049c:	b10b      	cbz	r3, 4004a2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40049e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4004a2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	bc30      	pop	{r4, r5}
  4004a8:	4770      	bx	lr

004004aa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4004aa:	b932      	cbnz	r2, 4004ba <spi_set_clock_polarity+0x10>
  4004ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b2:	f023 0301 	bic.w	r3, r3, #1
  4004b6:	6303      	str	r3, [r0, #48]	; 0x30
  4004b8:	4770      	bx	lr
  4004ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4004be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004c0:	f043 0301 	orr.w	r3, r3, #1
  4004c4:	6303      	str	r3, [r0, #48]	; 0x30
  4004c6:	4770      	bx	lr

004004c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4004c8:	b932      	cbnz	r2, 4004d8 <spi_set_clock_phase+0x10>
  4004ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4004ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004d0:	f023 0302 	bic.w	r3, r3, #2
  4004d4:	6303      	str	r3, [r0, #48]	; 0x30
  4004d6:	4770      	bx	lr
  4004d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004de:	f043 0302 	orr.w	r3, r3, #2
  4004e2:	6303      	str	r3, [r0, #48]	; 0x30
  4004e4:	4770      	bx	lr

004004e6 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4004e6:	2a04      	cmp	r2, #4
  4004e8:	d003      	beq.n	4004f2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4004ea:	b16a      	cbz	r2, 400508 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4004ec:	2a08      	cmp	r2, #8
  4004ee:	d016      	beq.n	40051e <spi_configure_cs_behavior+0x38>
  4004f0:	4770      	bx	lr
  4004f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004f8:	f023 0308 	bic.w	r3, r3, #8
  4004fc:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400500:	f043 0304 	orr.w	r3, r3, #4
  400504:	6303      	str	r3, [r0, #48]	; 0x30
  400506:	4770      	bx	lr
  400508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40050c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40050e:	f023 0308 	bic.w	r3, r3, #8
  400512:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400514:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400516:	f023 0304 	bic.w	r3, r3, #4
  40051a:	6303      	str	r3, [r0, #48]	; 0x30
  40051c:	4770      	bx	lr
  40051e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400522:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400524:	f043 0308 	orr.w	r3, r3, #8
  400528:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40052a:	e7e1      	b.n	4004f0 <spi_configure_cs_behavior+0xa>

0040052c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40052c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400530:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400536:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400538:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40053a:	431a      	orrs	r2, r3
  40053c:	630a      	str	r2, [r1, #48]	; 0x30
  40053e:	4770      	bx	lr

00400540 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400540:	1e43      	subs	r3, r0, #1
  400542:	4419      	add	r1, r3
  400544:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400548:	1e43      	subs	r3, r0, #1
  40054a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40054c:	bf94      	ite	ls
  40054e:	b200      	sxthls	r0, r0
		return -1;
  400550:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400554:	4770      	bx	lr

00400556 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400556:	b17a      	cbz	r2, 400578 <spi_set_baudrate_div+0x22>
{
  400558:	b410      	push	{r4}
  40055a:	4614      	mov	r4, r2
  40055c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400560:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400566:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400568:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40056a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40056e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400570:	2000      	movs	r0, #0
}
  400572:	f85d 4b04 	ldr.w	r4, [sp], #4
  400576:	4770      	bx	lr
        return -1;
  400578:	f04f 30ff 	mov.w	r0, #4294967295
  40057c:	4770      	bx	lr

0040057e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40057e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400580:	0189      	lsls	r1, r1, #6
  400582:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400584:	2402      	movs	r4, #2
  400586:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400588:	f04f 31ff 	mov.w	r1, #4294967295
  40058c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40058e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400590:	605a      	str	r2, [r3, #4]
}
  400592:	f85d 4b04 	ldr.w	r4, [sp], #4
  400596:	4770      	bx	lr

00400598 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400598:	0189      	lsls	r1, r1, #6
  40059a:	2305      	movs	r3, #5
  40059c:	5043      	str	r3, [r0, r1]
  40059e:	4770      	bx	lr

004005a0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4005a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4005a4:	61ca      	str	r2, [r1, #28]
  4005a6:	4770      	bx	lr

004005a8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4005ac:	624a      	str	r2, [r1, #36]	; 0x24
  4005ae:	4770      	bx	lr

004005b0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4005b4:	6a08      	ldr	r0, [r1, #32]
}
  4005b6:	4770      	bx	lr

004005b8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4005b8:	b4f0      	push	{r4, r5, r6, r7}
  4005ba:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005bc:	2402      	movs	r4, #2
  4005be:	9401      	str	r4, [sp, #4]
  4005c0:	2408      	movs	r4, #8
  4005c2:	9402      	str	r4, [sp, #8]
  4005c4:	2420      	movs	r4, #32
  4005c6:	9403      	str	r4, [sp, #12]
  4005c8:	2480      	movs	r4, #128	; 0x80
  4005ca:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4005cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4005ce:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005d0:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4005d2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4005d6:	d814      	bhi.n	400602 <tc_find_mck_divisor+0x4a>
  4005d8:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4005da:	42a0      	cmp	r0, r4
  4005dc:	d217      	bcs.n	40060e <tc_find_mck_divisor+0x56>
  4005de:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4005e0:	af01      	add	r7, sp, #4
  4005e2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4005e6:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4005ea:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4005ec:	4284      	cmp	r4, r0
  4005ee:	d30a      	bcc.n	400606 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4005f0:	4286      	cmp	r6, r0
  4005f2:	d90d      	bls.n	400610 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4005f4:	3501      	adds	r5, #1
	for (ul_index = 0;
  4005f6:	2d05      	cmp	r5, #5
  4005f8:	d1f3      	bne.n	4005e2 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005fa:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005fc:	b006      	add	sp, #24
  4005fe:	bcf0      	pop	{r4, r5, r6, r7}
  400600:	4770      	bx	lr
			return 0;
  400602:	2000      	movs	r0, #0
  400604:	e7fa      	b.n	4005fc <tc_find_mck_divisor+0x44>
  400606:	2000      	movs	r0, #0
  400608:	e7f8      	b.n	4005fc <tc_find_mck_divisor+0x44>
	return 1;
  40060a:	2001      	movs	r0, #1
  40060c:	e7f6      	b.n	4005fc <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40060e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400610:	b12a      	cbz	r2, 40061e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400612:	a906      	add	r1, sp, #24
  400614:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400618:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40061c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40061e:	2b00      	cmp	r3, #0
  400620:	d0f3      	beq.n	40060a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400622:	601d      	str	r5, [r3, #0]
	return 1;
  400624:	2001      	movs	r0, #1
  400626:	e7e9      	b.n	4005fc <tc_find_mck_divisor+0x44>

00400628 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400628:	4b01      	ldr	r3, [pc, #4]	; (400630 <gfx_mono_set_framebuffer+0x8>)
  40062a:	6018      	str	r0, [r3, #0]
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009f8 	.word	0x204009f8

00400634 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <gfx_mono_framebuffer_put_byte+0xc>)
  400636:	681b      	ldr	r3, [r3, #0]
  400638:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40063c:	5442      	strb	r2, [r0, r1]
  40063e:	4770      	bx	lr
  400640:	204009f8 	.word	0x204009f8

00400644 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <gfx_mono_framebuffer_get_byte+0xc>)
  400646:	681b      	ldr	r3, [r3, #0]
  400648:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40064c:	5c40      	ldrb	r0, [r0, r1]
  40064e:	4770      	bx	lr
  400650:	204009f8 	.word	0x204009f8

00400654 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400658:	1884      	adds	r4, r0, r2
  40065a:	2c80      	cmp	r4, #128	; 0x80
  40065c:	dd02      	ble.n	400664 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40065e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400662:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400664:	b322      	cbz	r2, 4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400666:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400668:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40066c:	2601      	movs	r6, #1
  40066e:	fa06 f101 	lsl.w	r1, r6, r1
  400672:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400674:	2b01      	cmp	r3, #1
  400676:	d01d      	beq.n	4006b4 <gfx_mono_generic_draw_horizontal_line+0x60>
  400678:	2b00      	cmp	r3, #0
  40067a:	d035      	beq.n	4006e8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40067c:	2b02      	cmp	r3, #2
  40067e:	d117      	bne.n	4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400680:	3801      	subs	r0, #1
  400682:	b2c7      	uxtb	r7, r0
  400684:	19d4      	adds	r4, r2, r7
  400686:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400688:	f8df a090 	ldr.w	sl, [pc, #144]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40068c:	f04f 0900 	mov.w	r9, #0
  400690:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400694:	4621      	mov	r1, r4
  400696:	4628      	mov	r0, r5
  400698:	47d0      	blx	sl
			temp ^= pixelmask;
  40069a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40069e:	464b      	mov	r3, r9
  4006a0:	b2d2      	uxtb	r2, r2
  4006a2:	4621      	mov	r1, r4
  4006a4:	4628      	mov	r0, r5
  4006a6:	47c0      	blx	r8
  4006a8:	3c01      	subs	r4, #1
  4006aa:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ac:	42bc      	cmp	r4, r7
  4006ae:	d1f1      	bne.n	400694 <gfx_mono_generic_draw_horizontal_line+0x40>
  4006b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006b4:	3801      	subs	r0, #1
  4006b6:	b2c7      	uxtb	r7, r0
  4006b8:	19d4      	adds	r4, r2, r7
  4006ba:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006bc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4006c0:	f04f 0900 	mov.w	r9, #0
  4006c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006c8:	4621      	mov	r1, r4
  4006ca:	4628      	mov	r0, r5
  4006cc:	47d0      	blx	sl
			temp |= pixelmask;
  4006ce:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006d2:	464b      	mov	r3, r9
  4006d4:	b2d2      	uxtb	r2, r2
  4006d6:	4621      	mov	r1, r4
  4006d8:	4628      	mov	r0, r5
  4006da:	47c0      	blx	r8
  4006dc:	3c01      	subs	r4, #1
  4006de:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006e0:	42bc      	cmp	r4, r7
  4006e2:	d1f1      	bne.n	4006c8 <gfx_mono_generic_draw_horizontal_line+0x74>
  4006e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006e8:	3801      	subs	r0, #1
  4006ea:	b2c7      	uxtb	r7, r0
  4006ec:	19d4      	adds	r4, r2, r7
  4006ee:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006f0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4006f4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4006f6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006fa:	4621      	mov	r1, r4
  4006fc:	4628      	mov	r0, r5
  4006fe:	47c0      	blx	r8
			temp &= ~pixelmask;
  400700:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400704:	2300      	movs	r3, #0
  400706:	b2d2      	uxtb	r2, r2
  400708:	4621      	mov	r1, r4
  40070a:	4628      	mov	r0, r5
  40070c:	47c8      	blx	r9
  40070e:	3c01      	subs	r4, #1
  400710:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400712:	42bc      	cmp	r4, r7
  400714:	d1f1      	bne.n	4006fa <gfx_mono_generic_draw_horizontal_line+0xa6>
  400716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40071a:	bf00      	nop
  40071c:	00400955 	.word	0x00400955
  400720:	00400851 	.word	0x00400851

00400724 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400728:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40072c:	b18b      	cbz	r3, 400752 <gfx_mono_generic_draw_filled_rect+0x2e>
  40072e:	461c      	mov	r4, r3
  400730:	4690      	mov	r8, r2
  400732:	4606      	mov	r6, r0
  400734:	1e4d      	subs	r5, r1, #1
  400736:	b2ed      	uxtb	r5, r5
  400738:	442c      	add	r4, r5
  40073a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40073c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400758 <gfx_mono_generic_draw_filled_rect+0x34>
  400740:	463b      	mov	r3, r7
  400742:	4642      	mov	r2, r8
  400744:	4621      	mov	r1, r4
  400746:	4630      	mov	r0, r6
  400748:	47c8      	blx	r9
  40074a:	3c01      	subs	r4, #1
  40074c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40074e:	42ac      	cmp	r4, r5
  400750:	d1f6      	bne.n	400740 <gfx_mono_generic_draw_filled_rect+0x1c>
  400752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400756:	bf00      	nop
  400758:	00400655 	.word	0x00400655

0040075c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400760:	b083      	sub	sp, #12
  400762:	4604      	mov	r4, r0
  400764:	4688      	mov	r8, r1
  400766:	4691      	mov	r9, r2
  400768:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40076a:	7a5b      	ldrb	r3, [r3, #9]
  40076c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400770:	2100      	movs	r1, #0
  400772:	9100      	str	r1, [sp, #0]
  400774:	4649      	mov	r1, r9
  400776:	4640      	mov	r0, r8
  400778:	4d21      	ldr	r5, [pc, #132]	; (400800 <gfx_mono_draw_char+0xa4>)
  40077a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  40077c:	f89b 3000 	ldrb.w	r3, [fp]
  400780:	b113      	cbz	r3, 400788 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400782:	b003      	add	sp, #12
  400784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400788:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40078c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40078e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400792:	bf18      	it	ne
  400794:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400796:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40079a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40079e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4007a0:	fb17 f70a 	smulbb	r7, r7, sl
  4007a4:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4007a8:	f8db 3004 	ldr.w	r3, [fp, #4]
  4007ac:	fa13 f787 	uxtah	r7, r3, r7
  4007b0:	e01f      	b.n	4007f2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4007b2:	0064      	lsls	r4, r4, #1
  4007b4:	b2e4      	uxtb	r4, r4
  4007b6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4007b8:	b2eb      	uxtb	r3, r5
  4007ba:	429e      	cmp	r6, r3
  4007bc:	d910      	bls.n	4007e0 <gfx_mono_draw_char+0x84>
  4007be:	b2eb      	uxtb	r3, r5
  4007c0:	eb08 0003 	add.w	r0, r8, r3
  4007c4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4007c6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4007ca:	bf08      	it	eq
  4007cc:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4007d0:	f014 0f80 	tst.w	r4, #128	; 0x80
  4007d4:	d0ed      	beq.n	4007b2 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007d6:	2201      	movs	r2, #1
  4007d8:	4649      	mov	r1, r9
  4007da:	4b0a      	ldr	r3, [pc, #40]	; (400804 <gfx_mono_draw_char+0xa8>)
  4007dc:	4798      	blx	r3
  4007de:	e7e8      	b.n	4007b2 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4007e0:	f109 0901 	add.w	r9, r9, #1
  4007e4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007e8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007ec:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007f0:	d0c7      	beq.n	400782 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007f2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007f6:	2e00      	cmp	r6, #0
  4007f8:	d0f2      	beq.n	4007e0 <gfx_mono_draw_char+0x84>
  4007fa:	2500      	movs	r5, #0
  4007fc:	462c      	mov	r4, r5
  4007fe:	e7de      	b.n	4007be <gfx_mono_draw_char+0x62>
  400800:	00400725 	.word	0x00400725
  400804:	004008f1 	.word	0x004008f1

00400808 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40080c:	4604      	mov	r4, r0
  40080e:	4690      	mov	r8, r2
  400810:	461d      	mov	r5, r3
  400812:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400814:	4f0d      	ldr	r7, [pc, #52]	; (40084c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400816:	460e      	mov	r6, r1
  400818:	e008      	b.n	40082c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40081a:	7a6a      	ldrb	r2, [r5, #9]
  40081c:	3201      	adds	r2, #1
  40081e:	4442      	add	r2, r8
  400820:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400824:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400826:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40082a:	b16b      	cbz	r3, 400848 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  40082c:	7820      	ldrb	r0, [r4, #0]
  40082e:	280a      	cmp	r0, #10
  400830:	d0f3      	beq.n	40081a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400832:	280d      	cmp	r0, #13
  400834:	d0f7      	beq.n	400826 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400836:	462b      	mov	r3, r5
  400838:	4642      	mov	r2, r8
  40083a:	4649      	mov	r1, r9
  40083c:	47b8      	blx	r7
			x += font->width;
  40083e:	7a2b      	ldrb	r3, [r5, #8]
  400840:	4499      	add	r9, r3
  400842:	fa5f f989 	uxtb.w	r9, r9
  400846:	e7ee      	b.n	400826 <gfx_mono_draw_string+0x1e>
}
  400848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40084c:	0040075d 	.word	0x0040075d

00400850 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400850:	b570      	push	{r4, r5, r6, lr}
  400852:	4604      	mov	r4, r0
  400854:	460d      	mov	r5, r1
  400856:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400858:	b91b      	cbnz	r3, 400862 <gfx_mono_ssd1306_put_byte+0x12>
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <gfx_mono_ssd1306_put_byte+0x40>)
  40085c:	4798      	blx	r3
  40085e:	42b0      	cmp	r0, r6
  400860:	d015      	beq.n	40088e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400862:	4632      	mov	r2, r6
  400864:	4629      	mov	r1, r5
  400866:	4620      	mov	r0, r4
  400868:	4b0a      	ldr	r3, [pc, #40]	; (400894 <gfx_mono_ssd1306_put_byte+0x44>)
  40086a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40086c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400870:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400874:	4c08      	ldr	r4, [pc, #32]	; (400898 <gfx_mono_ssd1306_put_byte+0x48>)
  400876:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400878:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40087c:	f040 0010 	orr.w	r0, r0, #16
  400880:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400882:	f005 000f 	and.w	r0, r5, #15
  400886:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400888:	4630      	mov	r0, r6
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <gfx_mono_ssd1306_put_byte+0x4c>)
  40088c:	4798      	blx	r3
  40088e:	bd70      	pop	{r4, r5, r6, pc}
  400890:	00400645 	.word	0x00400645
  400894:	00400635 	.word	0x00400635
  400898:	00400961 	.word	0x00400961
  40089c:	00400b81 	.word	0x00400b81

004008a0 <gfx_mono_ssd1306_init>:
{
  4008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4008a4:	480d      	ldr	r0, [pc, #52]	; (4008dc <gfx_mono_ssd1306_init+0x3c>)
  4008a6:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <gfx_mono_ssd1306_init+0x40>)
  4008a8:	4798      	blx	r3
	ssd1306_init();
  4008aa:	4b0e      	ldr	r3, [pc, #56]	; (4008e4 <gfx_mono_ssd1306_init+0x44>)
  4008ac:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4008ae:	2040      	movs	r0, #64	; 0x40
  4008b0:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <gfx_mono_ssd1306_init+0x48>)
  4008b2:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008b4:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008b6:	f04f 0801 	mov.w	r8, #1
  4008ba:	462f      	mov	r7, r5
  4008bc:	4e0b      	ldr	r6, [pc, #44]	; (4008ec <gfx_mono_ssd1306_init+0x4c>)
{
  4008be:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008c0:	4643      	mov	r3, r8
  4008c2:	463a      	mov	r2, r7
  4008c4:	b2e1      	uxtb	r1, r4
  4008c6:	4628      	mov	r0, r5
  4008c8:	47b0      	blx	r6
  4008ca:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4008cc:	2c80      	cmp	r4, #128	; 0x80
  4008ce:	d1f7      	bne.n	4008c0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008d0:	3501      	adds	r5, #1
  4008d2:	b2ed      	uxtb	r5, r5
  4008d4:	2d04      	cmp	r5, #4
  4008d6:	d1f2      	bne.n	4008be <gfx_mono_ssd1306_init+0x1e>
  4008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008dc:	204009fc 	.word	0x204009fc
  4008e0:	00400629 	.word	0x00400629
  4008e4:	004009a1 	.word	0x004009a1
  4008e8:	00400961 	.word	0x00400961
  4008ec:	00400851 	.word	0x00400851

004008f0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008f0:	09c3      	lsrs	r3, r0, #7
  4008f2:	d12a      	bne.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008f4:	291f      	cmp	r1, #31
  4008f6:	d828      	bhi.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008fc:	4614      	mov	r4, r2
  4008fe:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400900:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400902:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400906:	2201      	movs	r2, #1
  400908:	fa02 f701 	lsl.w	r7, r2, r1
  40090c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400910:	4601      	mov	r1, r0
  400912:	4630      	mov	r0, r6
  400914:	4b0d      	ldr	r3, [pc, #52]	; (40094c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400916:	4798      	blx	r3
  400918:	4602      	mov	r2, r0
	switch (color) {
  40091a:	2c01      	cmp	r4, #1
  40091c:	d009      	beq.n	400932 <gfx_mono_ssd1306_draw_pixel+0x42>
  40091e:	b164      	cbz	r4, 40093a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400920:	2c02      	cmp	r4, #2
  400922:	d00e      	beq.n	400942 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400924:	2300      	movs	r3, #0
  400926:	4629      	mov	r1, r5
  400928:	4630      	mov	r0, r6
  40092a:	4c09      	ldr	r4, [pc, #36]	; (400950 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40092c:	47a0      	blx	r4
  40092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400932:	ea48 0200 	orr.w	r2, r8, r0
  400936:	b2d2      	uxtb	r2, r2
		break;
  400938:	e7f4      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40093a:	ea20 0207 	bic.w	r2, r0, r7
  40093e:	b2d2      	uxtb	r2, r2
		break;
  400940:	e7f0      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400942:	ea88 0200 	eor.w	r2, r8, r0
  400946:	b2d2      	uxtb	r2, r2
		break;
  400948:	e7ec      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
  40094a:	4770      	bx	lr
  40094c:	00400645 	.word	0x00400645
  400950:	00400851 	.word	0x00400851

00400954 <gfx_mono_ssd1306_get_byte>:
{
  400954:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400956:	4b01      	ldr	r3, [pc, #4]	; (40095c <gfx_mono_ssd1306_get_byte+0x8>)
  400958:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40095a:	bd08      	pop	{r3, pc}
  40095c:	00400645 	.word	0x00400645

00400960 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400960:	b538      	push	{r3, r4, r5, lr}
  400962:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400964:	2208      	movs	r2, #8
  400966:	4b09      	ldr	r3, [pc, #36]	; (40098c <ssd1306_write_command+0x2c>)
  400968:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40096a:	4c09      	ldr	r4, [pc, #36]	; (400990 <ssd1306_write_command+0x30>)
  40096c:	2101      	movs	r1, #1
  40096e:	4620      	mov	r0, r4
  400970:	4b08      	ldr	r3, [pc, #32]	; (400994 <ssd1306_write_command+0x34>)
  400972:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400974:	2301      	movs	r3, #1
  400976:	461a      	mov	r2, r3
  400978:	4629      	mov	r1, r5
  40097a:	4620      	mov	r0, r4
  40097c:	4c06      	ldr	r4, [pc, #24]	; (400998 <ssd1306_write_command+0x38>)
  40097e:	47a0      	blx	r4
	delay_us(10);
  400980:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <ssd1306_write_command+0x3c>)
  400986:	4798      	blx	r3
  400988:	bd38      	pop	{r3, r4, r5, pc}
  40098a:	bf00      	nop
  40098c:	400e1000 	.word	0x400e1000
  400990:	40008000 	.word	0x40008000
  400994:	00400461 	.word	0x00400461
  400998:	00400477 	.word	0x00400477
  40099c:	20400001 	.word	0x20400001

004009a0 <ssd1306_init>:
{
  4009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009a4:	4d66      	ldr	r5, [pc, #408]	; (400b40 <ssd1306_init+0x1a0>)
  4009a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4009aa:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009ac:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009b0:	4b64      	ldr	r3, [pc, #400]	; (400b44 <ssd1306_init+0x1a4>)
  4009b2:	2708      	movs	r7, #8
  4009b4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009ba:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009bc:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009c4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009c8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4009ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009ce:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4009d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009d6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4009d8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009da:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009de:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009e0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009e2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009e8:	f022 0208 	bic.w	r2, r2, #8
  4009ec:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009f0:	f022 0208 	bic.w	r2, r2, #8
  4009f4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009f6:	601f      	str	r7, [r3, #0]
  4009f8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009fa:	631f      	str	r7, [r3, #48]	; 0x30
  4009fc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009fe:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b7c <ssd1306_init+0x1dc>
  400a02:	2300      	movs	r3, #0
  400a04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a0c:	4640      	mov	r0, r8
  400a0e:	4c4e      	ldr	r4, [pc, #312]	; (400b48 <ssd1306_init+0x1a8>)
  400a10:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a12:	2300      	movs	r3, #0
  400a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a1c:	4640      	mov	r0, r8
  400a1e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a20:	2300      	movs	r3, #0
  400a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a2a:	4640      	mov	r0, r8
  400a2c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a2e:	2300      	movs	r3, #0
  400a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a38:	4640      	mov	r0, r8
  400a3a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a3c:	2300      	movs	r3, #0
  400a3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a46:	4640      	mov	r0, r8
  400a48:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a4a:	2300      	movs	r3, #0
  400a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a54:	4640      	mov	r0, r8
  400a56:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a58:	4c3c      	ldr	r4, [pc, #240]	; (400b4c <ssd1306_init+0x1ac>)
  400a5a:	f04f 0902 	mov.w	r9, #2
  400a5e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a62:	f04f 0880 	mov.w	r8, #128	; 0x80
  400a66:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a6a:	6863      	ldr	r3, [r4, #4]
  400a6c:	f043 0301 	orr.w	r3, r3, #1
  400a70:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400a72:	463a      	mov	r2, r7
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b35      	ldr	r3, [pc, #212]	; (400b50 <ssd1306_init+0x1b0>)
  400a7a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a7c:	2200      	movs	r2, #0
  400a7e:	2101      	movs	r1, #1
  400a80:	4620      	mov	r0, r4
  400a82:	4b34      	ldr	r3, [pc, #208]	; (400b54 <ssd1306_init+0x1b4>)
  400a84:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a86:	2200      	movs	r2, #0
  400a88:	2101      	movs	r1, #1
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b32      	ldr	r3, [pc, #200]	; (400b58 <ssd1306_init+0x1b8>)
  400a8e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a90:	6863      	ldr	r3, [r4, #4]
  400a92:	f023 0302 	bic.w	r3, r3, #2
  400a96:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a98:	2200      	movs	r2, #0
  400a9a:	2101      	movs	r1, #1
  400a9c:	4620      	mov	r0, r4
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <ssd1306_init+0x1bc>)
  400aa0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400aa8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400aaa:	6863      	ldr	r3, [r4, #4]
  400aac:	f043 0310 	orr.w	r3, r3, #16
  400ab0:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400ab2:	492b      	ldr	r1, [pc, #172]	; (400b60 <ssd1306_init+0x1c0>)
  400ab4:	482b      	ldr	r0, [pc, #172]	; (400b64 <ssd1306_init+0x1c4>)
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ssd1306_init+0x1c8>)
  400ab8:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400aba:	b2c2      	uxtb	r2, r0
  400abc:	2101      	movs	r1, #1
  400abe:	4620      	mov	r0, r4
  400ac0:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <ssd1306_init+0x1cc>)
  400ac2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ssd1306_init+0x1d0>)
  400ac8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400aca:	2301      	movs	r3, #1
  400acc:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400ace:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ad4:	4c27      	ldr	r4, [pc, #156]	; (400b74 <ssd1306_init+0x1d4>)
  400ad6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ad8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ade:	47a0      	blx	r4
  400ae0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400ae2:	20a8      	movs	r0, #168	; 0xa8
  400ae4:	4c24      	ldr	r4, [pc, #144]	; (400b78 <ssd1306_init+0x1d8>)
  400ae6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ae8:	201f      	movs	r0, #31
  400aea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400aec:	20d3      	movs	r0, #211	; 0xd3
  400aee:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400af0:	2000      	movs	r0, #0
  400af2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400af4:	2040      	movs	r0, #64	; 0x40
  400af6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400af8:	20a1      	movs	r0, #161	; 0xa1
  400afa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400afc:	20c8      	movs	r0, #200	; 0xc8
  400afe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b00:	20da      	movs	r0, #218	; 0xda
  400b02:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b04:	4648      	mov	r0, r9
  400b06:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b08:	2081      	movs	r0, #129	; 0x81
  400b0a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b0c:	208f      	movs	r0, #143	; 0x8f
  400b0e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b10:	20a4      	movs	r0, #164	; 0xa4
  400b12:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b14:	20a6      	movs	r0, #166	; 0xa6
  400b16:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b18:	20d5      	movs	r0, #213	; 0xd5
  400b1a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b1c:	4640      	mov	r0, r8
  400b1e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b20:	208d      	movs	r0, #141	; 0x8d
  400b22:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b24:	2014      	movs	r0, #20
  400b26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b28:	20db      	movs	r0, #219	; 0xdb
  400b2a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b2c:	2040      	movs	r0, #64	; 0x40
  400b2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b30:	20d9      	movs	r0, #217	; 0xd9
  400b32:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b34:	20f1      	movs	r0, #241	; 0xf1
  400b36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400b38:	20af      	movs	r0, #175	; 0xaf
  400b3a:	47a0      	blx	r4
  400b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b40:	400e1200 	.word	0x400e1200
  400b44:	400e1000 	.word	0x400e1000
  400b48:	00400f4d 	.word	0x00400f4d
  400b4c:	40008000 	.word	0x40008000
  400b50:	004004e7 	.word	0x004004e7
  400b54:	004004ab 	.word	0x004004ab
  400b58:	004004c9 	.word	0x004004c9
  400b5c:	0040052d 	.word	0x0040052d
  400b60:	08f0d180 	.word	0x08f0d180
  400b64:	001e8480 	.word	0x001e8480
  400b68:	00400541 	.word	0x00400541
  400b6c:	00400557 	.word	0x00400557
  400b70:	00400435 	.word	0x00400435
  400b74:	20400001 	.word	0x20400001
  400b78:	00400961 	.word	0x00400961
  400b7c:	400e1400 	.word	0x400e1400

00400b80 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b80:	b538      	push	{r3, r4, r5, lr}
  400b82:	4605      	mov	r5, r0
  400b84:	2208      	movs	r2, #8
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <ssd1306_write_data+0x2c>)
  400b88:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b8a:	4c09      	ldr	r4, [pc, #36]	; (400bb0 <ssd1306_write_data+0x30>)
  400b8c:	2101      	movs	r1, #1
  400b8e:	4620      	mov	r0, r4
  400b90:	4b08      	ldr	r3, [pc, #32]	; (400bb4 <ssd1306_write_data+0x34>)
  400b92:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b94:	2301      	movs	r3, #1
  400b96:	461a      	mov	r2, r3
  400b98:	4629      	mov	r1, r5
  400b9a:	4620      	mov	r0, r4
  400b9c:	4c06      	ldr	r4, [pc, #24]	; (400bb8 <ssd1306_write_data+0x38>)
  400b9e:	47a0      	blx	r4
	delay_us(10);
  400ba0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <ssd1306_write_data+0x3c>)
  400ba6:	4798      	blx	r3
  400ba8:	bd38      	pop	{r3, r4, r5, pc}
  400baa:	bf00      	nop
  400bac:	400e1000 	.word	0x400e1000
  400bb0:	40008000 	.word	0x40008000
  400bb4:	00400461 	.word	0x00400461
  400bb8:	00400477 	.word	0x00400477
  400bbc:	20400001 	.word	0x20400001

00400bc0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bc0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bc2:	4810      	ldr	r0, [pc, #64]	; (400c04 <sysclk_init+0x44>)
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <sysclk_init+0x48>)
  400bc6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bc8:	213e      	movs	r1, #62	; 0x3e
  400bca:	2000      	movs	r0, #0
  400bcc:	4b0f      	ldr	r3, [pc, #60]	; (400c0c <sysclk_init+0x4c>)
  400bce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400bd0:	4c0f      	ldr	r4, [pc, #60]	; (400c10 <sysclk_init+0x50>)
  400bd2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d0fc      	beq.n	400bd2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400bd8:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <sysclk_init+0x54>)
  400bda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <sysclk_init+0x58>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <sysclk_init+0x5c>)
  400be0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400be2:	4c0f      	ldr	r4, [pc, #60]	; (400c20 <sysclk_init+0x60>)
  400be4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400be6:	2800      	cmp	r0, #0
  400be8:	d0fc      	beq.n	400be4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400bea:	2002      	movs	r0, #2
  400bec:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <sysclk_init+0x64>)
  400bee:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400bf0:	2000      	movs	r0, #0
  400bf2:	4b0d      	ldr	r3, [pc, #52]	; (400c28 <sysclk_init+0x68>)
  400bf4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bf6:	4b0d      	ldr	r3, [pc, #52]	; (400c2c <sysclk_init+0x6c>)
  400bf8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bfa:	4802      	ldr	r0, [pc, #8]	; (400c04 <sysclk_init+0x44>)
  400bfc:	4b02      	ldr	r3, [pc, #8]	; (400c08 <sysclk_init+0x48>)
  400bfe:	4798      	blx	r3
  400c00:	bd10      	pop	{r4, pc}
  400c02:	bf00      	nop
  400c04:	11e1a300 	.word	0x11e1a300
  400c08:	004015d5 	.word	0x004015d5
  400c0c:	004011dd 	.word	0x004011dd
  400c10:	00401231 	.word	0x00401231
  400c14:	00401241 	.word	0x00401241
  400c18:	20183f01 	.word	0x20183f01
  400c1c:	400e0600 	.word	0x400e0600
  400c20:	00401251 	.word	0x00401251
  400c24:	00401141 	.word	0x00401141
  400c28:	00401179 	.word	0x00401179
  400c2c:	004014c9 	.word	0x004014c9

00400c30 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400c34:	b980      	cbnz	r0, 400c58 <_read+0x28>
  400c36:	460c      	mov	r4, r1
  400c38:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400c3a:	2a00      	cmp	r2, #0
  400c3c:	dd0f      	ble.n	400c5e <_read+0x2e>
  400c3e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400c40:	4e08      	ldr	r6, [pc, #32]	; (400c64 <_read+0x34>)
  400c42:	4d09      	ldr	r5, [pc, #36]	; (400c68 <_read+0x38>)
  400c44:	6830      	ldr	r0, [r6, #0]
  400c46:	4621      	mov	r1, r4
  400c48:	682b      	ldr	r3, [r5, #0]
  400c4a:	4798      	blx	r3
		ptr++;
  400c4c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400c4e:	42bc      	cmp	r4, r7
  400c50:	d1f8      	bne.n	400c44 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400c52:	4640      	mov	r0, r8
  400c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c58:	f04f 38ff 	mov.w	r8, #4294967295
  400c5c:	e7f9      	b.n	400c52 <_read+0x22>
	for (; len > 0; --len) {
  400c5e:	4680      	mov	r8, r0
  400c60:	e7f7      	b.n	400c52 <_read+0x22>
  400c62:	bf00      	nop
  400c64:	20400df4 	.word	0x20400df4
  400c68:	20400dec 	.word	0x20400dec

00400c6c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400c6c:	3801      	subs	r0, #1
  400c6e:	2802      	cmp	r0, #2
  400c70:	d815      	bhi.n	400c9e <_write+0x32>
{
  400c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c76:	460e      	mov	r6, r1
  400c78:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400c7a:	b19a      	cbz	r2, 400ca4 <_write+0x38>
  400c7c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400c7e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400cb8 <_write+0x4c>
  400c82:	4f0c      	ldr	r7, [pc, #48]	; (400cb4 <_write+0x48>)
  400c84:	f8d8 0000 	ldr.w	r0, [r8]
  400c88:	f815 1b01 	ldrb.w	r1, [r5], #1
  400c8c:	683b      	ldr	r3, [r7, #0]
  400c8e:	4798      	blx	r3
  400c90:	2800      	cmp	r0, #0
  400c92:	db0a      	blt.n	400caa <_write+0x3e>
  400c94:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400c96:	3c01      	subs	r4, #1
  400c98:	d1f4      	bne.n	400c84 <_write+0x18>
  400c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c9e:	f04f 30ff 	mov.w	r0, #4294967295
  400ca2:	4770      	bx	lr
	for (; len != 0; --len) {
  400ca4:	4610      	mov	r0, r2
  400ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400caa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cb2:	bf00      	nop
  400cb4:	20400df0 	.word	0x20400df0
  400cb8:	20400df4 	.word	0x20400df4

00400cbc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400cbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cc2:	4b5c      	ldr	r3, [pc, #368]	; (400e34 <board_init+0x178>)
  400cc4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cca:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400cce:	4b5a      	ldr	r3, [pc, #360]	; (400e38 <board_init+0x17c>)
  400cd0:	2200      	movs	r2, #0
  400cd2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400cd6:	695a      	ldr	r2, [r3, #20]
  400cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400cdc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ce2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ce6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400cea:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400cee:	f007 0007 	and.w	r0, r7, #7
  400cf2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400cf4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400cf8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400cfc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d00:	f3bf 8f4f 	dsb	sy
  400d04:	f04f 34ff 	mov.w	r4, #4294967295
  400d08:	fa04 fc00 	lsl.w	ip, r4, r0
  400d0c:	fa06 f000 	lsl.w	r0, r6, r0
  400d10:	fa04 f40e 	lsl.w	r4, r4, lr
  400d14:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d18:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d1a:	463a      	mov	r2, r7
  400d1c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d1e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400d22:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400d26:	3a01      	subs	r2, #1
  400d28:	4423      	add	r3, r4
  400d2a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400d2e:	d1f6      	bne.n	400d1e <board_init+0x62>
        } while(sets--);
  400d30:	3e01      	subs	r6, #1
  400d32:	4460      	add	r0, ip
  400d34:	f1b6 3fff 	cmp.w	r6, #4294967295
  400d38:	d1ef      	bne.n	400d1a <board_init+0x5e>
  400d3a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400d3e:	4b3e      	ldr	r3, [pc, #248]	; (400e38 <board_init+0x17c>)
  400d40:	695a      	ldr	r2, [r3, #20]
  400d42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400d46:	615a      	str	r2, [r3, #20]
  400d48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d4c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d50:	4a3a      	ldr	r2, [pc, #232]	; (400e3c <board_init+0x180>)
  400d52:	493b      	ldr	r1, [pc, #236]	; (400e40 <board_init+0x184>)
  400d54:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d56:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400d5a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d60:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d64:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d68:	f022 0201 	bic.w	r2, r2, #1
  400d6c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d70:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d74:	f022 0201 	bic.w	r2, r2, #1
  400d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d80:	f3bf 8f6f 	isb	sy
  400d84:	200a      	movs	r0, #10
  400d86:	4c2f      	ldr	r4, [pc, #188]	; (400e44 <board_init+0x188>)
  400d88:	47a0      	blx	r4
  400d8a:	200b      	movs	r0, #11
  400d8c:	47a0      	blx	r4
  400d8e:	200c      	movs	r0, #12
  400d90:	47a0      	blx	r4
  400d92:	2010      	movs	r0, #16
  400d94:	47a0      	blx	r4
  400d96:	2011      	movs	r0, #17
  400d98:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d9a:	4b2b      	ldr	r3, [pc, #172]	; (400e48 <board_init+0x18c>)
  400d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400da0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400da2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400da6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400da8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400db0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400db6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dbc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400dbe:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400dc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400dc6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dca:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dcc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dd2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400dd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400dd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400de0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400de4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dea:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dec:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400df2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400df4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400df8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dfa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dfc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400e00:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e02:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e04:	4a11      	ldr	r2, [pc, #68]	; (400e4c <board_init+0x190>)
  400e06:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400e0a:	f043 0310 	orr.w	r3, r3, #16
  400e0e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e12:	4b0f      	ldr	r3, [pc, #60]	; (400e50 <board_init+0x194>)
  400e14:	2210      	movs	r2, #16
  400e16:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e1c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e1e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e24:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e26:	4311      	orrs	r1, r2
  400e28:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e2a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e2c:	4311      	orrs	r1, r2
  400e2e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e30:	605a      	str	r2, [r3, #4]
  400e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e34:	400e1850 	.word	0x400e1850
  400e38:	e000ed00 	.word	0xe000ed00
  400e3c:	400e0c00 	.word	0x400e0c00
  400e40:	5a00080c 	.word	0x5a00080c
  400e44:	00401261 	.word	0x00401261
  400e48:	400e1200 	.word	0x400e1200
  400e4c:	40088000 	.word	0x40088000
  400e50:	400e1000 	.word	0x400e1000

00400e54 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400e54:	6301      	str	r1, [r0, #48]	; 0x30
  400e56:	4770      	bx	lr

00400e58 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400e58:	6341      	str	r1, [r0, #52]	; 0x34
  400e5a:	4770      	bx	lr

00400e5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e5c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e5e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e62:	d03a      	beq.n	400eda <pio_set_peripheral+0x7e>
  400e64:	d813      	bhi.n	400e8e <pio_set_peripheral+0x32>
  400e66:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e6a:	d025      	beq.n	400eb8 <pio_set_peripheral+0x5c>
  400e6c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e70:	d10a      	bne.n	400e88 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e72:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e74:	4313      	orrs	r3, r2
  400e76:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e78:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e7a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e7c:	400b      	ands	r3, r1
  400e7e:	ea23 0302 	bic.w	r3, r3, r2
  400e82:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e84:	6042      	str	r2, [r0, #4]
  400e86:	4770      	bx	lr
	switch (ul_type) {
  400e88:	2900      	cmp	r1, #0
  400e8a:	d1fb      	bne.n	400e84 <pio_set_peripheral+0x28>
  400e8c:	4770      	bx	lr
  400e8e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e92:	d021      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400e94:	d809      	bhi.n	400eaa <pio_set_peripheral+0x4e>
  400e96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e9a:	d1f3      	bne.n	400e84 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e9e:	4313      	orrs	r3, r2
  400ea0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ea2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ea4:	4313      	orrs	r3, r2
  400ea6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ea8:	e7ec      	b.n	400e84 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400eaa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400eae:	d013      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400eb0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400eb4:	d010      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400eb6:	e7e5      	b.n	400e84 <pio_set_peripheral+0x28>
{
  400eb8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eba:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ebc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ebe:	43d3      	mvns	r3, r2
  400ec0:	4021      	ands	r1, r4
  400ec2:	461c      	mov	r4, r3
  400ec4:	4019      	ands	r1, r3
  400ec6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ec8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400eca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ecc:	400b      	ands	r3, r1
  400ece:	4023      	ands	r3, r4
  400ed0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400ed2:	6042      	str	r2, [r0, #4]
}
  400ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ed8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eda:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400edc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400ede:	400b      	ands	r3, r1
  400ee0:	ea23 0302 	bic.w	r3, r3, r2
  400ee4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ee6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ee8:	4313      	orrs	r3, r2
  400eea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400eec:	e7ca      	b.n	400e84 <pio_set_peripheral+0x28>

00400eee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400eee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ef0:	f012 0f01 	tst.w	r2, #1
  400ef4:	d10d      	bne.n	400f12 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400ef6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ef8:	f012 0f0a 	tst.w	r2, #10
  400efc:	d00b      	beq.n	400f16 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400efe:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400f00:	f012 0f02 	tst.w	r2, #2
  400f04:	d109      	bne.n	400f1a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400f06:	f012 0f08 	tst.w	r2, #8
  400f0a:	d008      	beq.n	400f1e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400f0c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400f10:	e005      	b.n	400f1e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400f12:	6641      	str	r1, [r0, #100]	; 0x64
  400f14:	e7f0      	b.n	400ef8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400f16:	6241      	str	r1, [r0, #36]	; 0x24
  400f18:	e7f2      	b.n	400f00 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400f1a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400f1e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400f20:	6001      	str	r1, [r0, #0]
  400f22:	4770      	bx	lr

00400f24 <pio_set_output>:
{
  400f24:	b410      	push	{r4}
  400f26:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400f28:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f2a:	b94c      	cbnz	r4, 400f40 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400f2c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400f2e:	b14b      	cbz	r3, 400f44 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400f30:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400f32:	b94a      	cbnz	r2, 400f48 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400f34:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400f36:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400f38:	6001      	str	r1, [r0, #0]
}
  400f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f3e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400f40:	6641      	str	r1, [r0, #100]	; 0x64
  400f42:	e7f4      	b.n	400f2e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400f44:	6541      	str	r1, [r0, #84]	; 0x54
  400f46:	e7f4      	b.n	400f32 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400f48:	6301      	str	r1, [r0, #48]	; 0x30
  400f4a:	e7f4      	b.n	400f36 <pio_set_output+0x12>

00400f4c <pio_configure>:
{
  400f4c:	b570      	push	{r4, r5, r6, lr}
  400f4e:	b082      	sub	sp, #8
  400f50:	4605      	mov	r5, r0
  400f52:	4616      	mov	r6, r2
  400f54:	461c      	mov	r4, r3
	switch (ul_type) {
  400f56:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f5a:	d014      	beq.n	400f86 <pio_configure+0x3a>
  400f5c:	d90a      	bls.n	400f74 <pio_configure+0x28>
  400f5e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f62:	d024      	beq.n	400fae <pio_configure+0x62>
  400f64:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f68:	d021      	beq.n	400fae <pio_configure+0x62>
  400f6a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f6e:	d017      	beq.n	400fa0 <pio_configure+0x54>
		return 0;
  400f70:	2000      	movs	r0, #0
  400f72:	e01a      	b.n	400faa <pio_configure+0x5e>
	switch (ul_type) {
  400f74:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f78:	d005      	beq.n	400f86 <pio_configure+0x3a>
  400f7a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f7e:	d002      	beq.n	400f86 <pio_configure+0x3a>
  400f80:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f84:	d1f4      	bne.n	400f70 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400f86:	4632      	mov	r2, r6
  400f88:	4628      	mov	r0, r5
  400f8a:	4b11      	ldr	r3, [pc, #68]	; (400fd0 <pio_configure+0x84>)
  400f8c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f8e:	f014 0f01 	tst.w	r4, #1
  400f92:	d102      	bne.n	400f9a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400f94:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400f96:	2001      	movs	r0, #1
  400f98:	e007      	b.n	400faa <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400f9a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400f9c:	2001      	movs	r0, #1
  400f9e:	e004      	b.n	400faa <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400fa0:	461a      	mov	r2, r3
  400fa2:	4631      	mov	r1, r6
  400fa4:	4b0b      	ldr	r3, [pc, #44]	; (400fd4 <pio_configure+0x88>)
  400fa6:	4798      	blx	r3
	return 1;
  400fa8:	2001      	movs	r0, #1
}
  400faa:	b002      	add	sp, #8
  400fac:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400fae:	f004 0301 	and.w	r3, r4, #1
  400fb2:	9300      	str	r3, [sp, #0]
  400fb4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400fb8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fbc:	bf14      	ite	ne
  400fbe:	2200      	movne	r2, #0
  400fc0:	2201      	moveq	r2, #1
  400fc2:	4631      	mov	r1, r6
  400fc4:	4628      	mov	r0, r5
  400fc6:	4c04      	ldr	r4, [pc, #16]	; (400fd8 <pio_configure+0x8c>)
  400fc8:	47a0      	blx	r4
	return 1;
  400fca:	2001      	movs	r0, #1
		break;
  400fcc:	e7ed      	b.n	400faa <pio_configure+0x5e>
  400fce:	bf00      	nop
  400fd0:	00400e5d 	.word	0x00400e5d
  400fd4:	00400eef 	.word	0x00400eef
  400fd8:	00400f25 	.word	0x00400f25

00400fdc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400fdc:	f012 0f10 	tst.w	r2, #16
  400fe0:	d012      	beq.n	401008 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400fe2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400fe6:	f012 0f20 	tst.w	r2, #32
  400fea:	d007      	beq.n	400ffc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400fec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400ff0:	f012 0f40 	tst.w	r2, #64	; 0x40
  400ff4:	d005      	beq.n	401002 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400ff6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400ffa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400ffc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401000:	e7f6      	b.n	400ff0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401002:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401006:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401008:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40100c:	4770      	bx	lr

0040100e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40100e:	6401      	str	r1, [r0, #64]	; 0x40
  401010:	4770      	bx	lr

00401012 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401012:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401014:	4770      	bx	lr

00401016 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401016:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401018:	4770      	bx	lr
	...

0040101c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401020:	4604      	mov	r4, r0
  401022:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401024:	4b0e      	ldr	r3, [pc, #56]	; (401060 <pio_handler_process+0x44>)
  401026:	4798      	blx	r3
  401028:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40102a:	4620      	mov	r0, r4
  40102c:	4b0d      	ldr	r3, [pc, #52]	; (401064 <pio_handler_process+0x48>)
  40102e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401030:	4005      	ands	r5, r0
  401032:	d013      	beq.n	40105c <pio_handler_process+0x40>
  401034:	4c0c      	ldr	r4, [pc, #48]	; (401068 <pio_handler_process+0x4c>)
  401036:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40103a:	e003      	b.n	401044 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40103c:	42b4      	cmp	r4, r6
  40103e:	d00d      	beq.n	40105c <pio_handler_process+0x40>
  401040:	3410      	adds	r4, #16
		while (status != 0) {
  401042:	b15d      	cbz	r5, 40105c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401044:	6820      	ldr	r0, [r4, #0]
  401046:	4540      	cmp	r0, r8
  401048:	d1f8      	bne.n	40103c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40104a:	6861      	ldr	r1, [r4, #4]
  40104c:	4229      	tst	r1, r5
  40104e:	d0f5      	beq.n	40103c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401050:	68e3      	ldr	r3, [r4, #12]
  401052:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401054:	6863      	ldr	r3, [r4, #4]
  401056:	ea25 0503 	bic.w	r5, r5, r3
  40105a:	e7ef      	b.n	40103c <pio_handler_process+0x20>
  40105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401060:	00401013 	.word	0x00401013
  401064:	00401017 	.word	0x00401017
  401068:	20400bfc 	.word	0x20400bfc

0040106c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40106e:	4c18      	ldr	r4, [pc, #96]	; (4010d0 <pio_handler_set+0x64>)
  401070:	6826      	ldr	r6, [r4, #0]
  401072:	2e06      	cmp	r6, #6
  401074:	d82a      	bhi.n	4010cc <pio_handler_set+0x60>
  401076:	f04f 0c00 	mov.w	ip, #0
  40107a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40107c:	4f15      	ldr	r7, [pc, #84]	; (4010d4 <pio_handler_set+0x68>)
  40107e:	e004      	b.n	40108a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401080:	3401      	adds	r4, #1
  401082:	b2e4      	uxtb	r4, r4
  401084:	46a4      	mov	ip, r4
  401086:	42a6      	cmp	r6, r4
  401088:	d309      	bcc.n	40109e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40108a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40108c:	0125      	lsls	r5, r4, #4
  40108e:	597d      	ldr	r5, [r7, r5]
  401090:	428d      	cmp	r5, r1
  401092:	d1f5      	bne.n	401080 <pio_handler_set+0x14>
  401094:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401098:	686d      	ldr	r5, [r5, #4]
  40109a:	4295      	cmp	r5, r2
  40109c:	d1f0      	bne.n	401080 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40109e:	4d0d      	ldr	r5, [pc, #52]	; (4010d4 <pio_handler_set+0x68>)
  4010a0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4010a4:	eb05 040e 	add.w	r4, r5, lr
  4010a8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4010ac:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4010ae:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4010b0:	9906      	ldr	r1, [sp, #24]
  4010b2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4010b4:	3601      	adds	r6, #1
  4010b6:	4566      	cmp	r6, ip
  4010b8:	d005      	beq.n	4010c6 <pio_handler_set+0x5a>
  4010ba:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4010bc:	461a      	mov	r2, r3
  4010be:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <pio_handler_set+0x6c>)
  4010c0:	4798      	blx	r3

	return 0;
  4010c2:	2000      	movs	r0, #0
  4010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4010c6:	4902      	ldr	r1, [pc, #8]	; (4010d0 <pio_handler_set+0x64>)
  4010c8:	600e      	str	r6, [r1, #0]
  4010ca:	e7f6      	b.n	4010ba <pio_handler_set+0x4e>
		return 1;
  4010cc:	2001      	movs	r0, #1
}
  4010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010d0:	20400c6c 	.word	0x20400c6c
  4010d4:	20400bfc 	.word	0x20400bfc
  4010d8:	00400fdd 	.word	0x00400fdd

004010dc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010de:	210a      	movs	r1, #10
  4010e0:	4801      	ldr	r0, [pc, #4]	; (4010e8 <PIOA_Handler+0xc>)
  4010e2:	4b02      	ldr	r3, [pc, #8]	; (4010ec <PIOA_Handler+0x10>)
  4010e4:	4798      	blx	r3
  4010e6:	bd08      	pop	{r3, pc}
  4010e8:	400e0e00 	.word	0x400e0e00
  4010ec:	0040101d 	.word	0x0040101d

004010f0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010f0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010f2:	210b      	movs	r1, #11
  4010f4:	4801      	ldr	r0, [pc, #4]	; (4010fc <PIOB_Handler+0xc>)
  4010f6:	4b02      	ldr	r3, [pc, #8]	; (401100 <PIOB_Handler+0x10>)
  4010f8:	4798      	blx	r3
  4010fa:	bd08      	pop	{r3, pc}
  4010fc:	400e1000 	.word	0x400e1000
  401100:	0040101d 	.word	0x0040101d

00401104 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401104:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401106:	210c      	movs	r1, #12
  401108:	4801      	ldr	r0, [pc, #4]	; (401110 <PIOC_Handler+0xc>)
  40110a:	4b02      	ldr	r3, [pc, #8]	; (401114 <PIOC_Handler+0x10>)
  40110c:	4798      	blx	r3
  40110e:	bd08      	pop	{r3, pc}
  401110:	400e1200 	.word	0x400e1200
  401114:	0040101d 	.word	0x0040101d

00401118 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401118:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40111a:	2110      	movs	r1, #16
  40111c:	4801      	ldr	r0, [pc, #4]	; (401124 <PIOD_Handler+0xc>)
  40111e:	4b02      	ldr	r3, [pc, #8]	; (401128 <PIOD_Handler+0x10>)
  401120:	4798      	blx	r3
  401122:	bd08      	pop	{r3, pc}
  401124:	400e1400 	.word	0x400e1400
  401128:	0040101d 	.word	0x0040101d

0040112c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40112c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40112e:	2111      	movs	r1, #17
  401130:	4801      	ldr	r0, [pc, #4]	; (401138 <PIOE_Handler+0xc>)
  401132:	4b02      	ldr	r3, [pc, #8]	; (40113c <PIOE_Handler+0x10>)
  401134:	4798      	blx	r3
  401136:	bd08      	pop	{r3, pc}
  401138:	400e1600 	.word	0x400e1600
  40113c:	0040101d 	.word	0x0040101d

00401140 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401140:	2803      	cmp	r0, #3
  401142:	d011      	beq.n	401168 <pmc_mck_set_division+0x28>
  401144:	2804      	cmp	r0, #4
  401146:	d012      	beq.n	40116e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401148:	2802      	cmp	r0, #2
  40114a:	bf0c      	ite	eq
  40114c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401150:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401152:	4a08      	ldr	r2, [pc, #32]	; (401174 <pmc_mck_set_division+0x34>)
  401154:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40115a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40115c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40115e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401160:	f013 0f08 	tst.w	r3, #8
  401164:	d0fb      	beq.n	40115e <pmc_mck_set_division+0x1e>
}
  401166:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401168:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40116c:	e7f1      	b.n	401152 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40116e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401172:	e7ee      	b.n	401152 <pmc_mck_set_division+0x12>
  401174:	400e0600 	.word	0x400e0600

00401178 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401178:	4a17      	ldr	r2, [pc, #92]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  40117a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40117c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401180:	4318      	orrs	r0, r3
  401182:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401184:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401186:	f013 0f08 	tst.w	r3, #8
  40118a:	d10a      	bne.n	4011a2 <pmc_switch_mck_to_pllack+0x2a>
  40118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401190:	4911      	ldr	r1, [pc, #68]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  401192:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401194:	f012 0f08 	tst.w	r2, #8
  401198:	d103      	bne.n	4011a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40119a:	3b01      	subs	r3, #1
  40119c:	d1f9      	bne.n	401192 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40119e:	2001      	movs	r0, #1
  4011a0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011a2:	4a0d      	ldr	r2, [pc, #52]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  4011a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011a6:	f023 0303 	bic.w	r3, r3, #3
  4011aa:	f043 0302 	orr.w	r3, r3, #2
  4011ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011b2:	f013 0f08 	tst.w	r3, #8
  4011b6:	d10a      	bne.n	4011ce <pmc_switch_mck_to_pllack+0x56>
  4011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011bc:	4906      	ldr	r1, [pc, #24]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  4011be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011c0:	f012 0f08 	tst.w	r2, #8
  4011c4:	d105      	bne.n	4011d2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011c6:	3b01      	subs	r3, #1
  4011c8:	d1f9      	bne.n	4011be <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011cc:	4770      	bx	lr
	return 0;
  4011ce:	2000      	movs	r0, #0
  4011d0:	4770      	bx	lr
  4011d2:	2000      	movs	r0, #0
  4011d4:	4770      	bx	lr
  4011d6:	bf00      	nop
  4011d8:	400e0600 	.word	0x400e0600

004011dc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011dc:	b9a0      	cbnz	r0, 401208 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011de:	480e      	ldr	r0, [pc, #56]	; (401218 <pmc_switch_mainck_to_xtal+0x3c>)
  4011e0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011e2:	0209      	lsls	r1, r1, #8
  4011e4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011e6:	4a0d      	ldr	r2, [pc, #52]	; (40121c <pmc_switch_mainck_to_xtal+0x40>)
  4011e8:	401a      	ands	r2, r3
  4011ea:	4b0d      	ldr	r3, [pc, #52]	; (401220 <pmc_switch_mainck_to_xtal+0x44>)
  4011ec:	4313      	orrs	r3, r2
  4011ee:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011f0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011f2:	4602      	mov	r2, r0
  4011f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011f6:	f013 0f01 	tst.w	r3, #1
  4011fa:	d0fb      	beq.n	4011f4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011fc:	4a06      	ldr	r2, [pc, #24]	; (401218 <pmc_switch_mainck_to_xtal+0x3c>)
  4011fe:	6a11      	ldr	r1, [r2, #32]
  401200:	4b08      	ldr	r3, [pc, #32]	; (401224 <pmc_switch_mainck_to_xtal+0x48>)
  401202:	430b      	orrs	r3, r1
  401204:	6213      	str	r3, [r2, #32]
  401206:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401208:	4903      	ldr	r1, [pc, #12]	; (401218 <pmc_switch_mainck_to_xtal+0x3c>)
  40120a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40120c:	4a06      	ldr	r2, [pc, #24]	; (401228 <pmc_switch_mainck_to_xtal+0x4c>)
  40120e:	401a      	ands	r2, r3
  401210:	4b06      	ldr	r3, [pc, #24]	; (40122c <pmc_switch_mainck_to_xtal+0x50>)
  401212:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401214:	620b      	str	r3, [r1, #32]
  401216:	4770      	bx	lr
  401218:	400e0600 	.word	0x400e0600
  40121c:	ffc8fffc 	.word	0xffc8fffc
  401220:	00370001 	.word	0x00370001
  401224:	01370000 	.word	0x01370000
  401228:	fec8fffc 	.word	0xfec8fffc
  40122c:	01370002 	.word	0x01370002

00401230 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401230:	4b02      	ldr	r3, [pc, #8]	; (40123c <pmc_osc_is_ready_mainck+0xc>)
  401232:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401234:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	400e0600 	.word	0x400e0600

00401240 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401240:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401244:	4b01      	ldr	r3, [pc, #4]	; (40124c <pmc_disable_pllack+0xc>)
  401246:	629a      	str	r2, [r3, #40]	; 0x28
  401248:	4770      	bx	lr
  40124a:	bf00      	nop
  40124c:	400e0600 	.word	0x400e0600

00401250 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401250:	4b02      	ldr	r3, [pc, #8]	; (40125c <pmc_is_locked_pllack+0xc>)
  401252:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401254:	f000 0002 	and.w	r0, r0, #2
  401258:	4770      	bx	lr
  40125a:	bf00      	nop
  40125c:	400e0600 	.word	0x400e0600

00401260 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401260:	283f      	cmp	r0, #63	; 0x3f
  401262:	d81e      	bhi.n	4012a2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401264:	281f      	cmp	r0, #31
  401266:	d80c      	bhi.n	401282 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401268:	4b11      	ldr	r3, [pc, #68]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  40126a:	699a      	ldr	r2, [r3, #24]
  40126c:	2301      	movs	r3, #1
  40126e:	4083      	lsls	r3, r0
  401270:	4393      	bics	r3, r2
  401272:	d018      	beq.n	4012a6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401274:	2301      	movs	r3, #1
  401276:	fa03 f000 	lsl.w	r0, r3, r0
  40127a:	4b0d      	ldr	r3, [pc, #52]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  40127c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40127e:	2000      	movs	r0, #0
  401280:	4770      	bx	lr
		ul_id -= 32;
  401282:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401284:	4b0a      	ldr	r3, [pc, #40]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  401286:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40128a:	2301      	movs	r3, #1
  40128c:	4083      	lsls	r3, r0
  40128e:	4393      	bics	r3, r2
  401290:	d00b      	beq.n	4012aa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401292:	2301      	movs	r3, #1
  401294:	fa03 f000 	lsl.w	r0, r3, r0
  401298:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  40129a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40129e:	2000      	movs	r0, #0
  4012a0:	4770      	bx	lr
		return 1;
  4012a2:	2001      	movs	r0, #1
  4012a4:	4770      	bx	lr
	return 0;
  4012a6:	2000      	movs	r0, #0
  4012a8:	4770      	bx	lr
  4012aa:	2000      	movs	r0, #0
}
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop
  4012b0:	400e0600 	.word	0x400e0600

004012b4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012b8:	fa03 f000 	lsl.w	r0, r3, r0
  4012bc:	4b01      	ldr	r3, [pc, #4]	; (4012c4 <pmc_enable_pck+0x10>)
  4012be:	6018      	str	r0, [r3, #0]
  4012c0:	4770      	bx	lr
  4012c2:	bf00      	nop
  4012c4:	400e0600 	.word	0x400e0600

004012c8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4012c8:	6943      	ldr	r3, [r0, #20]
  4012ca:	f013 0f02 	tst.w	r3, #2
  4012ce:	d002      	beq.n	4012d6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4012d0:	61c1      	str	r1, [r0, #28]
	return 0;
  4012d2:	2000      	movs	r0, #0
  4012d4:	4770      	bx	lr
		return 1;
  4012d6:	2001      	movs	r0, #1
}
  4012d8:	4770      	bx	lr

004012da <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4012da:	6943      	ldr	r3, [r0, #20]
  4012dc:	f013 0f01 	tst.w	r3, #1
  4012e0:	d003      	beq.n	4012ea <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4012e2:	6983      	ldr	r3, [r0, #24]
  4012e4:	700b      	strb	r3, [r1, #0]
	return 0;
  4012e6:	2000      	movs	r0, #0
  4012e8:	4770      	bx	lr
		return 1;
  4012ea:	2001      	movs	r0, #1
}
  4012ec:	4770      	bx	lr

004012ee <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4012ee:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4012f0:	010b      	lsls	r3, r1, #4
  4012f2:	4293      	cmp	r3, r2
  4012f4:	d914      	bls.n	401320 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4012f6:	00c9      	lsls	r1, r1, #3
  4012f8:	084b      	lsrs	r3, r1, #1
  4012fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4012fe:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401302:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401304:	1e5c      	subs	r4, r3, #1
  401306:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40130a:	428c      	cmp	r4, r1
  40130c:	d901      	bls.n	401312 <usart_set_async_baudrate+0x24>
		return 1;
  40130e:	2001      	movs	r0, #1
  401310:	e017      	b.n	401342 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401312:	6841      	ldr	r1, [r0, #4]
  401314:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401318:	6041      	str	r1, [r0, #4]
  40131a:	e00c      	b.n	401336 <usart_set_async_baudrate+0x48>
		return 1;
  40131c:	2001      	movs	r0, #1
  40131e:	e010      	b.n	401342 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401320:	0859      	lsrs	r1, r3, #1
  401322:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401326:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40132a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40132c:	1e5c      	subs	r4, r3, #1
  40132e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401332:	428c      	cmp	r4, r1
  401334:	d8f2      	bhi.n	40131c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401336:	0412      	lsls	r2, r2, #16
  401338:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40133c:	431a      	orrs	r2, r3
  40133e:	6202      	str	r2, [r0, #32]

	return 0;
  401340:	2000      	movs	r0, #0
}
  401342:	f85d 4b04 	ldr.w	r4, [sp], #4
  401346:	4770      	bx	lr

00401348 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401348:	4b08      	ldr	r3, [pc, #32]	; (40136c <usart_reset+0x24>)
  40134a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40134e:	2300      	movs	r3, #0
  401350:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401352:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401354:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401356:	2388      	movs	r3, #136	; 0x88
  401358:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40135a:	2324      	movs	r3, #36	; 0x24
  40135c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40135e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401362:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401364:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401368:	6003      	str	r3, [r0, #0]
  40136a:	4770      	bx	lr
  40136c:	55534100 	.word	0x55534100

00401370 <usart_init_rs232>:
{
  401370:	b570      	push	{r4, r5, r6, lr}
  401372:	4605      	mov	r5, r0
  401374:	460c      	mov	r4, r1
  401376:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401378:	4b0f      	ldr	r3, [pc, #60]	; (4013b8 <usart_init_rs232+0x48>)
  40137a:	4798      	blx	r3
	ul_reg_val = 0;
  40137c:	2200      	movs	r2, #0
  40137e:	4b0f      	ldr	r3, [pc, #60]	; (4013bc <usart_init_rs232+0x4c>)
  401380:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401382:	b1a4      	cbz	r4, 4013ae <usart_init_rs232+0x3e>
  401384:	4632      	mov	r2, r6
  401386:	6821      	ldr	r1, [r4, #0]
  401388:	4628      	mov	r0, r5
  40138a:	4b0d      	ldr	r3, [pc, #52]	; (4013c0 <usart_init_rs232+0x50>)
  40138c:	4798      	blx	r3
  40138e:	4602      	mov	r2, r0
  401390:	b978      	cbnz	r0, 4013b2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401392:	6863      	ldr	r3, [r4, #4]
  401394:	68a1      	ldr	r1, [r4, #8]
  401396:	430b      	orrs	r3, r1
  401398:	6921      	ldr	r1, [r4, #16]
  40139a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40139c:	68e1      	ldr	r1, [r4, #12]
  40139e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4013a0:	4906      	ldr	r1, [pc, #24]	; (4013bc <usart_init_rs232+0x4c>)
  4013a2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4013a4:	6869      	ldr	r1, [r5, #4]
  4013a6:	430b      	orrs	r3, r1
  4013a8:	606b      	str	r3, [r5, #4]
}
  4013aa:	4610      	mov	r0, r2
  4013ac:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4013ae:	2201      	movs	r2, #1
  4013b0:	e7fb      	b.n	4013aa <usart_init_rs232+0x3a>
  4013b2:	2201      	movs	r2, #1
  4013b4:	e7f9      	b.n	4013aa <usart_init_rs232+0x3a>
  4013b6:	bf00      	nop
  4013b8:	00401349 	.word	0x00401349
  4013bc:	20400c70 	.word	0x20400c70
  4013c0:	004012ef 	.word	0x004012ef

004013c4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4013c4:	2340      	movs	r3, #64	; 0x40
  4013c6:	6003      	str	r3, [r0, #0]
  4013c8:	4770      	bx	lr

004013ca <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4013ca:	2310      	movs	r3, #16
  4013cc:	6003      	str	r3, [r0, #0]
  4013ce:	4770      	bx	lr

004013d0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4013d0:	6943      	ldr	r3, [r0, #20]
  4013d2:	f013 0f02 	tst.w	r3, #2
  4013d6:	d004      	beq.n	4013e2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4013d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4013dc:	61c1      	str	r1, [r0, #28]
	return 0;
  4013de:	2000      	movs	r0, #0
  4013e0:	4770      	bx	lr
		return 1;
  4013e2:	2001      	movs	r0, #1
}
  4013e4:	4770      	bx	lr

004013e6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4013e6:	6943      	ldr	r3, [r0, #20]
  4013e8:	f013 0f01 	tst.w	r3, #1
  4013ec:	d005      	beq.n	4013fa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4013ee:	6983      	ldr	r3, [r0, #24]
  4013f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4013f4:	600b      	str	r3, [r1, #0]
	return 0;
  4013f6:	2000      	movs	r0, #0
  4013f8:	4770      	bx	lr
		return 1;
  4013fa:	2001      	movs	r0, #1
}
  4013fc:	4770      	bx	lr

004013fe <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4013fe:	e7fe      	b.n	4013fe <Dummy_Handler>

00401400 <Reset_Handler>:
{
  401400:	b500      	push	{lr}
  401402:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401404:	4b25      	ldr	r3, [pc, #148]	; (40149c <Reset_Handler+0x9c>)
  401406:	4a26      	ldr	r2, [pc, #152]	; (4014a0 <Reset_Handler+0xa0>)
  401408:	429a      	cmp	r2, r3
  40140a:	d010      	beq.n	40142e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40140c:	4b25      	ldr	r3, [pc, #148]	; (4014a4 <Reset_Handler+0xa4>)
  40140e:	4a23      	ldr	r2, [pc, #140]	; (40149c <Reset_Handler+0x9c>)
  401410:	429a      	cmp	r2, r3
  401412:	d20c      	bcs.n	40142e <Reset_Handler+0x2e>
  401414:	3b01      	subs	r3, #1
  401416:	1a9b      	subs	r3, r3, r2
  401418:	f023 0303 	bic.w	r3, r3, #3
  40141c:	3304      	adds	r3, #4
  40141e:	4413      	add	r3, r2
  401420:	491f      	ldr	r1, [pc, #124]	; (4014a0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401422:	f851 0b04 	ldr.w	r0, [r1], #4
  401426:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40142a:	429a      	cmp	r2, r3
  40142c:	d1f9      	bne.n	401422 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40142e:	4b1e      	ldr	r3, [pc, #120]	; (4014a8 <Reset_Handler+0xa8>)
  401430:	4a1e      	ldr	r2, [pc, #120]	; (4014ac <Reset_Handler+0xac>)
  401432:	429a      	cmp	r2, r3
  401434:	d20a      	bcs.n	40144c <Reset_Handler+0x4c>
  401436:	3b01      	subs	r3, #1
  401438:	1a9b      	subs	r3, r3, r2
  40143a:	f023 0303 	bic.w	r3, r3, #3
  40143e:	3304      	adds	r3, #4
  401440:	4413      	add	r3, r2
                *pDest++ = 0;
  401442:	2100      	movs	r1, #0
  401444:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401448:	4293      	cmp	r3, r2
  40144a:	d1fb      	bne.n	401444 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40144c:	4a18      	ldr	r2, [pc, #96]	; (4014b0 <Reset_Handler+0xb0>)
  40144e:	4b19      	ldr	r3, [pc, #100]	; (4014b4 <Reset_Handler+0xb4>)
  401450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401454:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401456:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40145a:	fab3 f383 	clz	r3, r3
  40145e:	095b      	lsrs	r3, r3, #5
  401460:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401462:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401464:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401468:	2200      	movs	r2, #0
  40146a:	4b13      	ldr	r3, [pc, #76]	; (4014b8 <Reset_Handler+0xb8>)
  40146c:	701a      	strb	r2, [r3, #0]
	return flags;
  40146e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401470:	4a12      	ldr	r2, [pc, #72]	; (4014bc <Reset_Handler+0xbc>)
  401472:	6813      	ldr	r3, [r2, #0]
  401474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401478:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40147a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40147e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401482:	b129      	cbz	r1, 401490 <Reset_Handler+0x90>
		cpu_irq_enable();
  401484:	2201      	movs	r2, #1
  401486:	4b0c      	ldr	r3, [pc, #48]	; (4014b8 <Reset_Handler+0xb8>)
  401488:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40148a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40148e:	b662      	cpsie	i
        __libc_init_array();
  401490:	4b0b      	ldr	r3, [pc, #44]	; (4014c0 <Reset_Handler+0xc0>)
  401492:	4798      	blx	r3
        main();
  401494:	4b0b      	ldr	r3, [pc, #44]	; (4014c4 <Reset_Handler+0xc4>)
  401496:	4798      	blx	r3
  401498:	e7fe      	b.n	401498 <Reset_Handler+0x98>
  40149a:	bf00      	nop
  40149c:	20400000 	.word	0x20400000
  4014a0:	0040b438 	.word	0x0040b438
  4014a4:	204009d8 	.word	0x204009d8
  4014a8:	20400e84 	.word	0x20400e84
  4014ac:	204009d8 	.word	0x204009d8
  4014b0:	e000ed00 	.word	0xe000ed00
  4014b4:	00400000 	.word	0x00400000
  4014b8:	20400018 	.word	0x20400018
  4014bc:	e000ed88 	.word	0xe000ed88
  4014c0:	00403ea9 	.word	0x00403ea9
  4014c4:	00403c01 	.word	0x00403c01

004014c8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4014c8:	4b3b      	ldr	r3, [pc, #236]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  4014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014cc:	f003 0303 	and.w	r3, r3, #3
  4014d0:	2b01      	cmp	r3, #1
  4014d2:	d01d      	beq.n	401510 <SystemCoreClockUpdate+0x48>
  4014d4:	b183      	cbz	r3, 4014f8 <SystemCoreClockUpdate+0x30>
  4014d6:	2b02      	cmp	r3, #2
  4014d8:	d036      	beq.n	401548 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4014da:	4b37      	ldr	r3, [pc, #220]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  4014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014e2:	2b70      	cmp	r3, #112	; 0x70
  4014e4:	d05f      	beq.n	4015a6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4014e6:	4b34      	ldr	r3, [pc, #208]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  4014e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014ea:	4934      	ldr	r1, [pc, #208]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  4014ec:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4014f0:	680b      	ldr	r3, [r1, #0]
  4014f2:	40d3      	lsrs	r3, r2
  4014f4:	600b      	str	r3, [r1, #0]
  4014f6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4014f8:	4b31      	ldr	r3, [pc, #196]	; (4015c0 <SystemCoreClockUpdate+0xf8>)
  4014fa:	695b      	ldr	r3, [r3, #20]
  4014fc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401500:	bf14      	ite	ne
  401502:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401506:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40150a:	4b2c      	ldr	r3, [pc, #176]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40150c:	601a      	str	r2, [r3, #0]
  40150e:	e7e4      	b.n	4014da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401510:	4b29      	ldr	r3, [pc, #164]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  401512:	6a1b      	ldr	r3, [r3, #32]
  401514:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401518:	d003      	beq.n	401522 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40151a:	4a2a      	ldr	r2, [pc, #168]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  40151c:	4b27      	ldr	r3, [pc, #156]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40151e:	601a      	str	r2, [r3, #0]
  401520:	e7db      	b.n	4014da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401522:	4a29      	ldr	r2, [pc, #164]	; (4015c8 <SystemCoreClockUpdate+0x100>)
  401524:	4b25      	ldr	r3, [pc, #148]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401526:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401528:	4b23      	ldr	r3, [pc, #140]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  40152a:	6a1b      	ldr	r3, [r3, #32]
  40152c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401530:	2b10      	cmp	r3, #16
  401532:	d005      	beq.n	401540 <SystemCoreClockUpdate+0x78>
  401534:	2b20      	cmp	r3, #32
  401536:	d1d0      	bne.n	4014da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401538:	4a22      	ldr	r2, [pc, #136]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  40153a:	4b20      	ldr	r3, [pc, #128]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40153c:	601a      	str	r2, [r3, #0]
          break;
  40153e:	e7cc      	b.n	4014da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401540:	4a22      	ldr	r2, [pc, #136]	; (4015cc <SystemCoreClockUpdate+0x104>)
  401542:	4b1e      	ldr	r3, [pc, #120]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401544:	601a      	str	r2, [r3, #0]
          break;
  401546:	e7c8      	b.n	4014da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401548:	4b1b      	ldr	r3, [pc, #108]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  40154a:	6a1b      	ldr	r3, [r3, #32]
  40154c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401550:	d016      	beq.n	401580 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401552:	4a1c      	ldr	r2, [pc, #112]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  401554:	4b19      	ldr	r3, [pc, #100]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401556:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401558:	4b17      	ldr	r3, [pc, #92]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  40155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40155c:	f003 0303 	and.w	r3, r3, #3
  401560:	2b02      	cmp	r3, #2
  401562:	d1ba      	bne.n	4014da <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401564:	4a14      	ldr	r2, [pc, #80]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  401566:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401568:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40156a:	4814      	ldr	r0, [pc, #80]	; (4015bc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40156c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401570:	6803      	ldr	r3, [r0, #0]
  401572:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401576:	b2d2      	uxtb	r2, r2
  401578:	fbb3 f3f2 	udiv	r3, r3, r2
  40157c:	6003      	str	r3, [r0, #0]
  40157e:	e7ac      	b.n	4014da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401580:	4a11      	ldr	r2, [pc, #68]	; (4015c8 <SystemCoreClockUpdate+0x100>)
  401582:	4b0e      	ldr	r3, [pc, #56]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  401584:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401586:	4b0c      	ldr	r3, [pc, #48]	; (4015b8 <SystemCoreClockUpdate+0xf0>)
  401588:	6a1b      	ldr	r3, [r3, #32]
  40158a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40158e:	2b10      	cmp	r3, #16
  401590:	d005      	beq.n	40159e <SystemCoreClockUpdate+0xd6>
  401592:	2b20      	cmp	r3, #32
  401594:	d1e0      	bne.n	401558 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401596:	4a0b      	ldr	r2, [pc, #44]	; (4015c4 <SystemCoreClockUpdate+0xfc>)
  401598:	4b08      	ldr	r3, [pc, #32]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  40159a:	601a      	str	r2, [r3, #0]
          break;
  40159c:	e7dc      	b.n	401558 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40159e:	4a0b      	ldr	r2, [pc, #44]	; (4015cc <SystemCoreClockUpdate+0x104>)
  4015a0:	4b06      	ldr	r3, [pc, #24]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  4015a2:	601a      	str	r2, [r3, #0]
          break;
  4015a4:	e7d8      	b.n	401558 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4015a6:	4a05      	ldr	r2, [pc, #20]	; (4015bc <SystemCoreClockUpdate+0xf4>)
  4015a8:	6813      	ldr	r3, [r2, #0]
  4015aa:	4909      	ldr	r1, [pc, #36]	; (4015d0 <SystemCoreClockUpdate+0x108>)
  4015ac:	fba1 1303 	umull	r1, r3, r1, r3
  4015b0:	085b      	lsrs	r3, r3, #1
  4015b2:	6013      	str	r3, [r2, #0]
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop
  4015b8:	400e0600 	.word	0x400e0600
  4015bc:	2040001c 	.word	0x2040001c
  4015c0:	400e1810 	.word	0x400e1810
  4015c4:	00b71b00 	.word	0x00b71b00
  4015c8:	003d0900 	.word	0x003d0900
  4015cc:	007a1200 	.word	0x007a1200
  4015d0:	aaaaaaab 	.word	0xaaaaaaab

004015d4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4015d4:	4b16      	ldr	r3, [pc, #88]	; (401630 <system_init_flash+0x5c>)
  4015d6:	4298      	cmp	r0, r3
  4015d8:	d913      	bls.n	401602 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4015da:	4b16      	ldr	r3, [pc, #88]	; (401634 <system_init_flash+0x60>)
  4015dc:	4298      	cmp	r0, r3
  4015de:	d915      	bls.n	40160c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4015e0:	4b15      	ldr	r3, [pc, #84]	; (401638 <system_init_flash+0x64>)
  4015e2:	4298      	cmp	r0, r3
  4015e4:	d916      	bls.n	401614 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4015e6:	4b15      	ldr	r3, [pc, #84]	; (40163c <system_init_flash+0x68>)
  4015e8:	4298      	cmp	r0, r3
  4015ea:	d917      	bls.n	40161c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4015ec:	4b14      	ldr	r3, [pc, #80]	; (401640 <system_init_flash+0x6c>)
  4015ee:	4298      	cmp	r0, r3
  4015f0:	d918      	bls.n	401624 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4015f2:	4b14      	ldr	r3, [pc, #80]	; (401644 <system_init_flash+0x70>)
  4015f4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4015f6:	bf94      	ite	ls
  4015f8:	4a13      	ldrls	r2, [pc, #76]	; (401648 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4015fa:	4a14      	ldrhi	r2, [pc, #80]	; (40164c <system_init_flash+0x78>)
  4015fc:	4b14      	ldr	r3, [pc, #80]	; (401650 <system_init_flash+0x7c>)
  4015fe:	601a      	str	r2, [r3, #0]
  401600:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401602:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401606:	4b12      	ldr	r3, [pc, #72]	; (401650 <system_init_flash+0x7c>)
  401608:	601a      	str	r2, [r3, #0]
  40160a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40160c:	4a11      	ldr	r2, [pc, #68]	; (401654 <system_init_flash+0x80>)
  40160e:	4b10      	ldr	r3, [pc, #64]	; (401650 <system_init_flash+0x7c>)
  401610:	601a      	str	r2, [r3, #0]
  401612:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401614:	4a10      	ldr	r2, [pc, #64]	; (401658 <system_init_flash+0x84>)
  401616:	4b0e      	ldr	r3, [pc, #56]	; (401650 <system_init_flash+0x7c>)
  401618:	601a      	str	r2, [r3, #0]
  40161a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40161c:	4a0f      	ldr	r2, [pc, #60]	; (40165c <system_init_flash+0x88>)
  40161e:	4b0c      	ldr	r3, [pc, #48]	; (401650 <system_init_flash+0x7c>)
  401620:	601a      	str	r2, [r3, #0]
  401622:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401624:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401628:	4b09      	ldr	r3, [pc, #36]	; (401650 <system_init_flash+0x7c>)
  40162a:	601a      	str	r2, [r3, #0]
  40162c:	4770      	bx	lr
  40162e:	bf00      	nop
  401630:	015ef3bf 	.word	0x015ef3bf
  401634:	02bde77f 	.word	0x02bde77f
  401638:	041cdb3f 	.word	0x041cdb3f
  40163c:	057bceff 	.word	0x057bceff
  401640:	06dac2bf 	.word	0x06dac2bf
  401644:	0839b67f 	.word	0x0839b67f
  401648:	04000500 	.word	0x04000500
  40164c:	04000600 	.word	0x04000600
  401650:	400e0c00 	.word	0x400e0c00
  401654:	04000100 	.word	0x04000100
  401658:	04000200 	.word	0x04000200
  40165c:	04000300 	.word	0x04000300

00401660 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401660:	4b0a      	ldr	r3, [pc, #40]	; (40168c <_sbrk+0x2c>)
  401662:	681b      	ldr	r3, [r3, #0]
  401664:	b153      	cbz	r3, 40167c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401666:	4b09      	ldr	r3, [pc, #36]	; (40168c <_sbrk+0x2c>)
  401668:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40166a:	181a      	adds	r2, r3, r0
  40166c:	4908      	ldr	r1, [pc, #32]	; (401690 <_sbrk+0x30>)
  40166e:	4291      	cmp	r1, r2
  401670:	db08      	blt.n	401684 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401672:	4610      	mov	r0, r2
  401674:	4a05      	ldr	r2, [pc, #20]	; (40168c <_sbrk+0x2c>)
  401676:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401678:	4618      	mov	r0, r3
  40167a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40167c:	4a05      	ldr	r2, [pc, #20]	; (401694 <_sbrk+0x34>)
  40167e:	4b03      	ldr	r3, [pc, #12]	; (40168c <_sbrk+0x2c>)
  401680:	601a      	str	r2, [r3, #0]
  401682:	e7f0      	b.n	401666 <_sbrk+0x6>
		return (caddr_t) -1;	
  401684:	f04f 30ff 	mov.w	r0, #4294967295
}
  401688:	4770      	bx	lr
  40168a:	bf00      	nop
  40168c:	20400c74 	.word	0x20400c74
  401690:	2045fffc 	.word	0x2045fffc
  401694:	20403088 	.word	0x20403088

00401698 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401698:	f04f 30ff 	mov.w	r0, #4294967295
  40169c:	4770      	bx	lr

0040169e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40169e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4016a2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4016a4:	2000      	movs	r0, #0
  4016a6:	4770      	bx	lr

004016a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4016a8:	2001      	movs	r0, #1
  4016aa:	4770      	bx	lr

004016ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4016ac:	2000      	movs	r0, #0
  4016ae:	4770      	bx	lr

004016b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016b0:	f100 0308 	add.w	r3, r0, #8
  4016b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4016b6:	f04f 32ff 	mov.w	r2, #4294967295
  4016ba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4016c0:	2300      	movs	r3, #0
  4016c2:	6003      	str	r3, [r0, #0]
  4016c4:	4770      	bx	lr

004016c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4016c6:	2300      	movs	r3, #0
  4016c8:	6103      	str	r3, [r0, #16]
  4016ca:	4770      	bx	lr

004016cc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4016cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4016ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4016d0:	689a      	ldr	r2, [r3, #8]
  4016d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4016d4:	689a      	ldr	r2, [r3, #8]
  4016d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4016d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4016da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4016dc:	6803      	ldr	r3, [r0, #0]
  4016de:	3301      	adds	r3, #1
  4016e0:	6003      	str	r3, [r0, #0]
  4016e2:	4770      	bx	lr

004016e4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4016e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4016e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4016e8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4016ec:	d002      	beq.n	4016f4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016ee:	f100 0208 	add.w	r2, r0, #8
  4016f2:	e002      	b.n	4016fa <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4016f4:	6902      	ldr	r2, [r0, #16]
  4016f6:	e004      	b.n	401702 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4016f8:	461a      	mov	r2, r3
  4016fa:	6853      	ldr	r3, [r2, #4]
  4016fc:	681c      	ldr	r4, [r3, #0]
  4016fe:	42a5      	cmp	r5, r4
  401700:	d2fa      	bcs.n	4016f8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401702:	6853      	ldr	r3, [r2, #4]
  401704:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401706:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401708:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40170a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40170c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40170e:	6803      	ldr	r3, [r0, #0]
  401710:	3301      	adds	r3, #1
  401712:	6003      	str	r3, [r0, #0]
}
  401714:	bc30      	pop	{r4, r5}
  401716:	4770      	bx	lr

00401718 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401718:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40171a:	6842      	ldr	r2, [r0, #4]
  40171c:	6881      	ldr	r1, [r0, #8]
  40171e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401720:	6882      	ldr	r2, [r0, #8]
  401722:	6841      	ldr	r1, [r0, #4]
  401724:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401726:	685a      	ldr	r2, [r3, #4]
  401728:	4290      	cmp	r0, r2
  40172a:	d005      	beq.n	401738 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40172c:	2200      	movs	r2, #0
  40172e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401730:	6818      	ldr	r0, [r3, #0]
  401732:	3801      	subs	r0, #1
  401734:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401736:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401738:	6882      	ldr	r2, [r0, #8]
  40173a:	605a      	str	r2, [r3, #4]
  40173c:	e7f6      	b.n	40172c <uxListRemove+0x14>
	...

00401740 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401740:	4b0d      	ldr	r3, [pc, #52]	; (401778 <prvTaskExitError+0x38>)
  401742:	681b      	ldr	r3, [r3, #0]
  401744:	f1b3 3fff 	cmp.w	r3, #4294967295
  401748:	d00a      	beq.n	401760 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40174a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40174e:	b672      	cpsid	i
  401750:	f383 8811 	msr	BASEPRI, r3
  401754:	f3bf 8f6f 	isb	sy
  401758:	f3bf 8f4f 	dsb	sy
  40175c:	b662      	cpsie	i
  40175e:	e7fe      	b.n	40175e <prvTaskExitError+0x1e>
  401760:	f04f 0380 	mov.w	r3, #128	; 0x80
  401764:	b672      	cpsid	i
  401766:	f383 8811 	msr	BASEPRI, r3
  40176a:	f3bf 8f6f 	isb	sy
  40176e:	f3bf 8f4f 	dsb	sy
  401772:	b662      	cpsie	i
  401774:	e7fe      	b.n	401774 <prvTaskExitError+0x34>
  401776:	bf00      	nop
  401778:	20400020 	.word	0x20400020

0040177c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40177c:	4806      	ldr	r0, [pc, #24]	; (401798 <prvPortStartFirstTask+0x1c>)
  40177e:	6800      	ldr	r0, [r0, #0]
  401780:	6800      	ldr	r0, [r0, #0]
  401782:	f380 8808 	msr	MSP, r0
  401786:	b662      	cpsie	i
  401788:	b661      	cpsie	f
  40178a:	f3bf 8f4f 	dsb	sy
  40178e:	f3bf 8f6f 	isb	sy
  401792:	df00      	svc	0
  401794:	bf00      	nop
  401796:	0000      	.short	0x0000
  401798:	e000ed08 	.word	0xe000ed08

0040179c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40179c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4017ac <vPortEnableVFP+0x10>
  4017a0:	6801      	ldr	r1, [r0, #0]
  4017a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4017a6:	6001      	str	r1, [r0, #0]
  4017a8:	4770      	bx	lr
  4017aa:	0000      	.short	0x0000
  4017ac:	e000ed88 	.word	0xe000ed88

004017b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4017b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4017b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4017b8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4017bc:	4b05      	ldr	r3, [pc, #20]	; (4017d4 <pxPortInitialiseStack+0x24>)
  4017be:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4017c2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4017c6:	f06f 0302 	mvn.w	r3, #2
  4017ca:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4017ce:	3844      	subs	r0, #68	; 0x44
  4017d0:	4770      	bx	lr
  4017d2:	bf00      	nop
  4017d4:	00401741 	.word	0x00401741

004017d8 <SVC_Handler>:
	__asm volatile (
  4017d8:	4b06      	ldr	r3, [pc, #24]	; (4017f4 <pxCurrentTCBConst2>)
  4017da:	6819      	ldr	r1, [r3, #0]
  4017dc:	6808      	ldr	r0, [r1, #0]
  4017de:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017e2:	f380 8809 	msr	PSP, r0
  4017e6:	f3bf 8f6f 	isb	sy
  4017ea:	f04f 0000 	mov.w	r0, #0
  4017ee:	f380 8811 	msr	BASEPRI, r0
  4017f2:	4770      	bx	lr

004017f4 <pxCurrentTCBConst2>:
  4017f4:	20400c80 	.word	0x20400c80
  4017f8:	4770      	bx	lr
  4017fa:	bf00      	nop

004017fc <vPortEnterCritical>:
  4017fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401800:	b672      	cpsid	i
  401802:	f383 8811 	msr	BASEPRI, r3
  401806:	f3bf 8f6f 	isb	sy
  40180a:	f3bf 8f4f 	dsb	sy
  40180e:	b662      	cpsie	i
	uxCriticalNesting++;
  401810:	4a0b      	ldr	r2, [pc, #44]	; (401840 <vPortEnterCritical+0x44>)
  401812:	6813      	ldr	r3, [r2, #0]
  401814:	3301      	adds	r3, #1
  401816:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401818:	2b01      	cmp	r3, #1
  40181a:	d10f      	bne.n	40183c <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40181c:	4b09      	ldr	r3, [pc, #36]	; (401844 <vPortEnterCritical+0x48>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	f013 0fff 	tst.w	r3, #255	; 0xff
  401824:	d00a      	beq.n	40183c <vPortEnterCritical+0x40>
  401826:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182a:	b672      	cpsid	i
  40182c:	f383 8811 	msr	BASEPRI, r3
  401830:	f3bf 8f6f 	isb	sy
  401834:	f3bf 8f4f 	dsb	sy
  401838:	b662      	cpsie	i
  40183a:	e7fe      	b.n	40183a <vPortEnterCritical+0x3e>
  40183c:	4770      	bx	lr
  40183e:	bf00      	nop
  401840:	20400020 	.word	0x20400020
  401844:	e000ed04 	.word	0xe000ed04

00401848 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401848:	4b0a      	ldr	r3, [pc, #40]	; (401874 <vPortExitCritical+0x2c>)
  40184a:	681b      	ldr	r3, [r3, #0]
  40184c:	b953      	cbnz	r3, 401864 <vPortExitCritical+0x1c>
  40184e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401852:	b672      	cpsid	i
  401854:	f383 8811 	msr	BASEPRI, r3
  401858:	f3bf 8f6f 	isb	sy
  40185c:	f3bf 8f4f 	dsb	sy
  401860:	b662      	cpsie	i
  401862:	e7fe      	b.n	401862 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401864:	3b01      	subs	r3, #1
  401866:	4a03      	ldr	r2, [pc, #12]	; (401874 <vPortExitCritical+0x2c>)
  401868:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40186a:	b90b      	cbnz	r3, 401870 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40186c:	f383 8811 	msr	BASEPRI, r3
  401870:	4770      	bx	lr
  401872:	bf00      	nop
  401874:	20400020 	.word	0x20400020

00401878 <PendSV_Handler>:
	__asm volatile
  401878:	f3ef 8009 	mrs	r0, PSP
  40187c:	f3bf 8f6f 	isb	sy
  401880:	4b15      	ldr	r3, [pc, #84]	; (4018d8 <pxCurrentTCBConst>)
  401882:	681a      	ldr	r2, [r3, #0]
  401884:	f01e 0f10 	tst.w	lr, #16
  401888:	bf08      	it	eq
  40188a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40188e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401892:	6010      	str	r0, [r2, #0]
  401894:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401898:	f04f 0080 	mov.w	r0, #128	; 0x80
  40189c:	b672      	cpsid	i
  40189e:	f380 8811 	msr	BASEPRI, r0
  4018a2:	f3bf 8f4f 	dsb	sy
  4018a6:	f3bf 8f6f 	isb	sy
  4018aa:	b662      	cpsie	i
  4018ac:	f001 f900 	bl	402ab0 <vTaskSwitchContext>
  4018b0:	f04f 0000 	mov.w	r0, #0
  4018b4:	f380 8811 	msr	BASEPRI, r0
  4018b8:	bc08      	pop	{r3}
  4018ba:	6819      	ldr	r1, [r3, #0]
  4018bc:	6808      	ldr	r0, [r1, #0]
  4018be:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018c2:	f01e 0f10 	tst.w	lr, #16
  4018c6:	bf08      	it	eq
  4018c8:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4018cc:	f380 8809 	msr	PSP, r0
  4018d0:	f3bf 8f6f 	isb	sy
  4018d4:	4770      	bx	lr
  4018d6:	bf00      	nop

004018d8 <pxCurrentTCBConst>:
  4018d8:	20400c80 	.word	0x20400c80
  4018dc:	4770      	bx	lr
  4018de:	bf00      	nop

004018e0 <SysTick_Handler>:
{
  4018e0:	b508      	push	{r3, lr}
	__asm volatile
  4018e2:	f3ef 8311 	mrs	r3, BASEPRI
  4018e6:	f04f 0280 	mov.w	r2, #128	; 0x80
  4018ea:	b672      	cpsid	i
  4018ec:	f382 8811 	msr	BASEPRI, r2
  4018f0:	f3bf 8f6f 	isb	sy
  4018f4:	f3bf 8f4f 	dsb	sy
  4018f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4018fa:	4b05      	ldr	r3, [pc, #20]	; (401910 <SysTick_Handler+0x30>)
  4018fc:	4798      	blx	r3
  4018fe:	b118      	cbz	r0, 401908 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401904:	4b03      	ldr	r3, [pc, #12]	; (401914 <SysTick_Handler+0x34>)
  401906:	601a      	str	r2, [r3, #0]
	__asm volatile
  401908:	2300      	movs	r3, #0
  40190a:	f383 8811 	msr	BASEPRI, r3
  40190e:	bd08      	pop	{r3, pc}
  401910:	0040271d 	.word	0x0040271d
  401914:	e000ed04 	.word	0xe000ed04

00401918 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401918:	4a03      	ldr	r2, [pc, #12]	; (401928 <vPortSetupTimerInterrupt+0x10>)
  40191a:	4b04      	ldr	r3, [pc, #16]	; (40192c <vPortSetupTimerInterrupt+0x14>)
  40191c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40191e:	2207      	movs	r2, #7
  401920:	3b04      	subs	r3, #4
  401922:	601a      	str	r2, [r3, #0]
  401924:	4770      	bx	lr
  401926:	bf00      	nop
  401928:	000927bf 	.word	0x000927bf
  40192c:	e000e014 	.word	0xe000e014

00401930 <xPortStartScheduler>:
{
  401930:	b500      	push	{lr}
  401932:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401934:	4b25      	ldr	r3, [pc, #148]	; (4019cc <xPortStartScheduler+0x9c>)
  401936:	781a      	ldrb	r2, [r3, #0]
  401938:	b2d2      	uxtb	r2, r2
  40193a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40193c:	22ff      	movs	r2, #255	; 0xff
  40193e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401940:	781b      	ldrb	r3, [r3, #0]
  401942:	b2db      	uxtb	r3, r3
  401944:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401948:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401950:	4a1f      	ldr	r2, [pc, #124]	; (4019d0 <xPortStartScheduler+0xa0>)
  401952:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401954:	2207      	movs	r2, #7
  401956:	4b1f      	ldr	r3, [pc, #124]	; (4019d4 <xPortStartScheduler+0xa4>)
  401958:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40195a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40195e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401962:	d010      	beq.n	401986 <xPortStartScheduler+0x56>
  401964:	2206      	movs	r2, #6
  401966:	e000      	b.n	40196a <xPortStartScheduler+0x3a>
  401968:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40196a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40196e:	005b      	lsls	r3, r3, #1
  401970:	b2db      	uxtb	r3, r3
  401972:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401976:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40197a:	1e51      	subs	r1, r2, #1
  40197c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401980:	d1f2      	bne.n	401968 <xPortStartScheduler+0x38>
  401982:	4b14      	ldr	r3, [pc, #80]	; (4019d4 <xPortStartScheduler+0xa4>)
  401984:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401986:	4a13      	ldr	r2, [pc, #76]	; (4019d4 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401988:	6813      	ldr	r3, [r2, #0]
  40198a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40198c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401990:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401992:	9b01      	ldr	r3, [sp, #4]
  401994:	b2db      	uxtb	r3, r3
  401996:	4a0d      	ldr	r2, [pc, #52]	; (4019cc <xPortStartScheduler+0x9c>)
  401998:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40199a:	4b0f      	ldr	r3, [pc, #60]	; (4019d8 <xPortStartScheduler+0xa8>)
  40199c:	681a      	ldr	r2, [r3, #0]
  40199e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4019a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4019a4:	681a      	ldr	r2, [r3, #0]
  4019a6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4019aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4019ac:	4b0b      	ldr	r3, [pc, #44]	; (4019dc <xPortStartScheduler+0xac>)
  4019ae:	4798      	blx	r3
	uxCriticalNesting = 0;
  4019b0:	2200      	movs	r2, #0
  4019b2:	4b0b      	ldr	r3, [pc, #44]	; (4019e0 <xPortStartScheduler+0xb0>)
  4019b4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4019b6:	4b0b      	ldr	r3, [pc, #44]	; (4019e4 <xPortStartScheduler+0xb4>)
  4019b8:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4019ba:	4a0b      	ldr	r2, [pc, #44]	; (4019e8 <xPortStartScheduler+0xb8>)
  4019bc:	6813      	ldr	r3, [r2, #0]
  4019be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4019c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4019c4:	4b09      	ldr	r3, [pc, #36]	; (4019ec <xPortStartScheduler+0xbc>)
  4019c6:	4798      	blx	r3
	prvTaskExitError();
  4019c8:	4b09      	ldr	r3, [pc, #36]	; (4019f0 <xPortStartScheduler+0xc0>)
  4019ca:	4798      	blx	r3
  4019cc:	e000e400 	.word	0xe000e400
  4019d0:	20400c78 	.word	0x20400c78
  4019d4:	20400c7c 	.word	0x20400c7c
  4019d8:	e000ed20 	.word	0xe000ed20
  4019dc:	00401919 	.word	0x00401919
  4019e0:	20400020 	.word	0x20400020
  4019e4:	0040179d 	.word	0x0040179d
  4019e8:	e000ef34 	.word	0xe000ef34
  4019ec:	0040177d 	.word	0x0040177d
  4019f0:	00401741 	.word	0x00401741

004019f4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4019f4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4019f8:	2b0f      	cmp	r3, #15
  4019fa:	d911      	bls.n	401a20 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4019fc:	4a12      	ldr	r2, [pc, #72]	; (401a48 <vPortValidateInterruptPriority+0x54>)
  4019fe:	5c9b      	ldrb	r3, [r3, r2]
  401a00:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401a02:	4a12      	ldr	r2, [pc, #72]	; (401a4c <vPortValidateInterruptPriority+0x58>)
  401a04:	7812      	ldrb	r2, [r2, #0]
  401a06:	429a      	cmp	r2, r3
  401a08:	d90a      	bls.n	401a20 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a0e:	b672      	cpsid	i
  401a10:	f383 8811 	msr	BASEPRI, r3
  401a14:	f3bf 8f6f 	isb	sy
  401a18:	f3bf 8f4f 	dsb	sy
  401a1c:	b662      	cpsie	i
  401a1e:	e7fe      	b.n	401a1e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401a20:	4b0b      	ldr	r3, [pc, #44]	; (401a50 <vPortValidateInterruptPriority+0x5c>)
  401a22:	681b      	ldr	r3, [r3, #0]
  401a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a28:	4a0a      	ldr	r2, [pc, #40]	; (401a54 <vPortValidateInterruptPriority+0x60>)
  401a2a:	6812      	ldr	r2, [r2, #0]
  401a2c:	4293      	cmp	r3, r2
  401a2e:	d90a      	bls.n	401a46 <vPortValidateInterruptPriority+0x52>
  401a30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a34:	b672      	cpsid	i
  401a36:	f383 8811 	msr	BASEPRI, r3
  401a3a:	f3bf 8f6f 	isb	sy
  401a3e:	f3bf 8f4f 	dsb	sy
  401a42:	b662      	cpsie	i
  401a44:	e7fe      	b.n	401a44 <vPortValidateInterruptPriority+0x50>
  401a46:	4770      	bx	lr
  401a48:	e000e3f0 	.word	0xe000e3f0
  401a4c:	20400c78 	.word	0x20400c78
  401a50:	e000ed0c 	.word	0xe000ed0c
  401a54:	20400c7c 	.word	0x20400c7c

00401a58 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401a58:	b510      	push	{r4, lr}
  401a5a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401a5c:	4b06      	ldr	r3, [pc, #24]	; (401a78 <pvPortMalloc+0x20>)
  401a5e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401a60:	4620      	mov	r0, r4
  401a62:	4b06      	ldr	r3, [pc, #24]	; (401a7c <pvPortMalloc+0x24>)
  401a64:	4798      	blx	r3
  401a66:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401a68:	4b05      	ldr	r3, [pc, #20]	; (401a80 <pvPortMalloc+0x28>)
  401a6a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401a6c:	b10c      	cbz	r4, 401a72 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401a6e:	4620      	mov	r0, r4
  401a70:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401a72:	4b04      	ldr	r3, [pc, #16]	; (401a84 <pvPortMalloc+0x2c>)
  401a74:	4798      	blx	r3
	return pvReturn;
  401a76:	e7fa      	b.n	401a6e <pvPortMalloc+0x16>
  401a78:	00402701 	.word	0x00402701
  401a7c:	00403ef9 	.word	0x00403ef9
  401a80:	00402869 	.word	0x00402869
  401a84:	00403773 	.word	0x00403773

00401a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401a88:	b148      	cbz	r0, 401a9e <vPortFree+0x16>
{
  401a8a:	b510      	push	{r4, lr}
  401a8c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401a8e:	4b04      	ldr	r3, [pc, #16]	; (401aa0 <vPortFree+0x18>)
  401a90:	4798      	blx	r3
		{
			free( pv );
  401a92:	4620      	mov	r0, r4
  401a94:	4b03      	ldr	r3, [pc, #12]	; (401aa4 <vPortFree+0x1c>)
  401a96:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401a98:	4b03      	ldr	r3, [pc, #12]	; (401aa8 <vPortFree+0x20>)
  401a9a:	4798      	blx	r3
  401a9c:	bd10      	pop	{r4, pc}
  401a9e:	4770      	bx	lr
  401aa0:	00402701 	.word	0x00402701
  401aa4:	00403f09 	.word	0x00403f09
  401aa8:	00402869 	.word	0x00402869

00401aac <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401aac:	b538      	push	{r3, r4, r5, lr}
  401aae:	4604      	mov	r4, r0
  401ab0:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401ab2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401ab4:	b95a      	cbnz	r2, 401ace <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ab6:	6803      	ldr	r3, [r0, #0]
  401ab8:	2b00      	cmp	r3, #0
  401aba:	d12e      	bne.n	401b1a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401abc:	6840      	ldr	r0, [r0, #4]
  401abe:	4b1b      	ldr	r3, [pc, #108]	; (401b2c <prvCopyDataToQueue+0x80>)
  401ac0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401ac2:	2300      	movs	r3, #0
  401ac4:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ac8:	3301      	adds	r3, #1
  401aca:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401acc:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401ace:	b96d      	cbnz	r5, 401aec <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401ad0:	6880      	ldr	r0, [r0, #8]
  401ad2:	4b17      	ldr	r3, [pc, #92]	; (401b30 <prvCopyDataToQueue+0x84>)
  401ad4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401ad6:	68a3      	ldr	r3, [r4, #8]
  401ad8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401ada:	4413      	add	r3, r2
  401adc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401ade:	6862      	ldr	r2, [r4, #4]
  401ae0:	4293      	cmp	r3, r2
  401ae2:	d31c      	bcc.n	401b1e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401ae4:	6823      	ldr	r3, [r4, #0]
  401ae6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401ae8:	2000      	movs	r0, #0
  401aea:	e7ec      	b.n	401ac6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401aec:	68c0      	ldr	r0, [r0, #12]
  401aee:	4b10      	ldr	r3, [pc, #64]	; (401b30 <prvCopyDataToQueue+0x84>)
  401af0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401af4:	425b      	negs	r3, r3
  401af6:	68e2      	ldr	r2, [r4, #12]
  401af8:	441a      	add	r2, r3
  401afa:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401afc:	6821      	ldr	r1, [r4, #0]
  401afe:	428a      	cmp	r2, r1
  401b00:	d202      	bcs.n	401b08 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401b02:	6862      	ldr	r2, [r4, #4]
  401b04:	4413      	add	r3, r2
  401b06:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401b08:	2d02      	cmp	r5, #2
  401b0a:	d10a      	bne.n	401b22 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b0e:	b153      	cbz	r3, 401b26 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401b10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b12:	3b01      	subs	r3, #1
  401b14:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401b16:	2000      	movs	r0, #0
  401b18:	e7d5      	b.n	401ac6 <prvCopyDataToQueue+0x1a>
  401b1a:	2000      	movs	r0, #0
  401b1c:	e7d3      	b.n	401ac6 <prvCopyDataToQueue+0x1a>
  401b1e:	2000      	movs	r0, #0
  401b20:	e7d1      	b.n	401ac6 <prvCopyDataToQueue+0x1a>
  401b22:	2000      	movs	r0, #0
  401b24:	e7cf      	b.n	401ac6 <prvCopyDataToQueue+0x1a>
  401b26:	2000      	movs	r0, #0
  401b28:	e7cd      	b.n	401ac6 <prvCopyDataToQueue+0x1a>
  401b2a:	bf00      	nop
  401b2c:	00402eb1 	.word	0x00402eb1
  401b30:	00404479 	.word	0x00404479

00401b34 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401b34:	b530      	push	{r4, r5, lr}
  401b36:	b083      	sub	sp, #12
  401b38:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401b3a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401b3c:	b174      	cbz	r4, 401b5c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401b3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b42:	429a      	cmp	r2, r3
  401b44:	d315      	bcc.n	401b72 <prvNotifyQueueSetContainer+0x3e>
  401b46:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b4a:	b672      	cpsid	i
  401b4c:	f383 8811 	msr	BASEPRI, r3
  401b50:	f3bf 8f6f 	isb	sy
  401b54:	f3bf 8f4f 	dsb	sy
  401b58:	b662      	cpsie	i
  401b5a:	e7fe      	b.n	401b5a <prvNotifyQueueSetContainer+0x26>
  401b5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b60:	b672      	cpsid	i
  401b62:	f383 8811 	msr	BASEPRI, r3
  401b66:	f3bf 8f6f 	isb	sy
  401b6a:	f3bf 8f4f 	dsb	sy
  401b6e:	b662      	cpsie	i
  401b70:	e7fe      	b.n	401b70 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b74:	4293      	cmp	r3, r2
  401b76:	d803      	bhi.n	401b80 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401b78:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401b7a:	4628      	mov	r0, r5
  401b7c:	b003      	add	sp, #12
  401b7e:	bd30      	pop	{r4, r5, pc}
  401b80:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401b82:	a901      	add	r1, sp, #4
  401b84:	4620      	mov	r0, r4
  401b86:	4b0b      	ldr	r3, [pc, #44]	; (401bb4 <prvNotifyQueueSetContainer+0x80>)
  401b88:	4798      	blx	r3
  401b8a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401b8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b92:	d10a      	bne.n	401baa <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b96:	2b00      	cmp	r3, #0
  401b98:	d0ef      	beq.n	401b7a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401b9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b9e:	4b06      	ldr	r3, [pc, #24]	; (401bb8 <prvNotifyQueueSetContainer+0x84>)
  401ba0:	4798      	blx	r3
  401ba2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401ba4:	bf18      	it	ne
  401ba6:	2501      	movne	r5, #1
  401ba8:	e7e7      	b.n	401b7a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401baa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bac:	3301      	adds	r3, #1
  401bae:	64a3      	str	r3, [r4, #72]	; 0x48
  401bb0:	e7e3      	b.n	401b7a <prvNotifyQueueSetContainer+0x46>
  401bb2:	bf00      	nop
  401bb4:	00401aad 	.word	0x00401aad
  401bb8:	00402c85 	.word	0x00402c85

00401bbc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401bbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401bbe:	b172      	cbz	r2, 401bde <prvCopyDataFromQueue+0x22>
{
  401bc0:	b510      	push	{r4, lr}
  401bc2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401bc4:	68c4      	ldr	r4, [r0, #12]
  401bc6:	4414      	add	r4, r2
  401bc8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401bca:	6840      	ldr	r0, [r0, #4]
  401bcc:	4284      	cmp	r4, r0
  401bce:	d301      	bcc.n	401bd4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401bd0:	6818      	ldr	r0, [r3, #0]
  401bd2:	60d8      	str	r0, [r3, #12]
  401bd4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401bd6:	68d9      	ldr	r1, [r3, #12]
  401bd8:	4b01      	ldr	r3, [pc, #4]	; (401be0 <prvCopyDataFromQueue+0x24>)
  401bda:	4798      	blx	r3
  401bdc:	bd10      	pop	{r4, pc}
  401bde:	4770      	bx	lr
  401be0:	00404479 	.word	0x00404479

00401be4 <prvUnlockQueue>:
{
  401be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401be6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401be8:	4b22      	ldr	r3, [pc, #136]	; (401c74 <prvUnlockQueue+0x90>)
  401bea:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401bec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bee:	2b00      	cmp	r3, #0
  401bf0:	dd1b      	ble.n	401c2a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401bf2:	4d21      	ldr	r5, [pc, #132]	; (401c78 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401bf4:	4f21      	ldr	r7, [pc, #132]	; (401c7c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bf6:	4e22      	ldr	r6, [pc, #136]	; (401c80 <prvUnlockQueue+0x9c>)
  401bf8:	e00b      	b.n	401c12 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bfc:	b1ab      	cbz	r3, 401c2a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c02:	47b0      	blx	r6
  401c04:	b978      	cbnz	r0, 401c26 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401c06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c08:	3b01      	subs	r3, #1
  401c0a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401c0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c0e:	2b00      	cmp	r3, #0
  401c10:	dd0b      	ble.n	401c2a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401c12:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c14:	2b00      	cmp	r3, #0
  401c16:	d0f0      	beq.n	401bfa <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401c18:	2100      	movs	r1, #0
  401c1a:	4620      	mov	r0, r4
  401c1c:	47a8      	blx	r5
  401c1e:	2801      	cmp	r0, #1
  401c20:	d1f1      	bne.n	401c06 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401c22:	47b8      	blx	r7
  401c24:	e7ef      	b.n	401c06 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401c26:	47b8      	blx	r7
  401c28:	e7ed      	b.n	401c06 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401c2a:	f04f 33ff 	mov.w	r3, #4294967295
  401c2e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401c30:	4b14      	ldr	r3, [pc, #80]	; (401c84 <prvUnlockQueue+0xa0>)
  401c32:	4798      	blx	r3
	taskENTER_CRITICAL();
  401c34:	4b0f      	ldr	r3, [pc, #60]	; (401c74 <prvUnlockQueue+0x90>)
  401c36:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401c38:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c3a:	2b00      	cmp	r3, #0
  401c3c:	dd14      	ble.n	401c68 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c3e:	6923      	ldr	r3, [r4, #16]
  401c40:	b193      	cbz	r3, 401c68 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c42:	f104 0610 	add.w	r6, r4, #16
  401c46:	4d0e      	ldr	r5, [pc, #56]	; (401c80 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401c48:	4f0c      	ldr	r7, [pc, #48]	; (401c7c <prvUnlockQueue+0x98>)
  401c4a:	e007      	b.n	401c5c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401c4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c4e:	3b01      	subs	r3, #1
  401c50:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401c52:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c54:	2b00      	cmp	r3, #0
  401c56:	dd07      	ble.n	401c68 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c58:	6923      	ldr	r3, [r4, #16]
  401c5a:	b12b      	cbz	r3, 401c68 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c5c:	4630      	mov	r0, r6
  401c5e:	47a8      	blx	r5
  401c60:	2800      	cmp	r0, #0
  401c62:	d0f3      	beq.n	401c4c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401c64:	47b8      	blx	r7
  401c66:	e7f1      	b.n	401c4c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401c68:	f04f 33ff 	mov.w	r3, #4294967295
  401c6c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401c6e:	4b05      	ldr	r3, [pc, #20]	; (401c84 <prvUnlockQueue+0xa0>)
  401c70:	4798      	blx	r3
  401c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c74:	004017fd 	.word	0x004017fd
  401c78:	00401b35 	.word	0x00401b35
  401c7c:	00402de1 	.word	0x00402de1
  401c80:	00402c85 	.word	0x00402c85
  401c84:	00401849 	.word	0x00401849

00401c88 <xQueueGenericReset>:
{
  401c88:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401c8a:	b308      	cbz	r0, 401cd0 <xQueueGenericReset+0x48>
  401c8c:	4604      	mov	r4, r0
  401c8e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401c90:	4b1d      	ldr	r3, [pc, #116]	; (401d08 <xQueueGenericReset+0x80>)
  401c92:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401c94:	6822      	ldr	r2, [r4, #0]
  401c96:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c9a:	fb03 f301 	mul.w	r3, r3, r1
  401c9e:	18d0      	adds	r0, r2, r3
  401ca0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401ca2:	2000      	movs	r0, #0
  401ca4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401ca6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401ca8:	1a5b      	subs	r3, r3, r1
  401caa:	4413      	add	r3, r2
  401cac:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401cae:	f04f 33ff 	mov.w	r3, #4294967295
  401cb2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401cb4:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401cb6:	b9fd      	cbnz	r5, 401cf8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401cb8:	6923      	ldr	r3, [r4, #16]
  401cba:	b12b      	cbz	r3, 401cc8 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401cbc:	f104 0010 	add.w	r0, r4, #16
  401cc0:	4b12      	ldr	r3, [pc, #72]	; (401d0c <xQueueGenericReset+0x84>)
  401cc2:	4798      	blx	r3
  401cc4:	2801      	cmp	r0, #1
  401cc6:	d00e      	beq.n	401ce6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401cc8:	4b11      	ldr	r3, [pc, #68]	; (401d10 <xQueueGenericReset+0x88>)
  401cca:	4798      	blx	r3
}
  401ccc:	2001      	movs	r0, #1
  401cce:	bd38      	pop	{r3, r4, r5, pc}
  401cd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd4:	b672      	cpsid	i
  401cd6:	f383 8811 	msr	BASEPRI, r3
  401cda:	f3bf 8f6f 	isb	sy
  401cde:	f3bf 8f4f 	dsb	sy
  401ce2:	b662      	cpsie	i
  401ce4:	e7fe      	b.n	401ce4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401cea:	4b0a      	ldr	r3, [pc, #40]	; (401d14 <xQueueGenericReset+0x8c>)
  401cec:	601a      	str	r2, [r3, #0]
  401cee:	f3bf 8f4f 	dsb	sy
  401cf2:	f3bf 8f6f 	isb	sy
  401cf6:	e7e7      	b.n	401cc8 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401cf8:	f104 0010 	add.w	r0, r4, #16
  401cfc:	4d06      	ldr	r5, [pc, #24]	; (401d18 <xQueueGenericReset+0x90>)
  401cfe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401d00:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d04:	47a8      	blx	r5
  401d06:	e7df      	b.n	401cc8 <xQueueGenericReset+0x40>
  401d08:	004017fd 	.word	0x004017fd
  401d0c:	00402c85 	.word	0x00402c85
  401d10:	00401849 	.word	0x00401849
  401d14:	e000ed04 	.word	0xe000ed04
  401d18:	004016b1 	.word	0x004016b1

00401d1c <xQueueGenericCreate>:
{
  401d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401d1e:	b950      	cbnz	r0, 401d36 <xQueueGenericCreate+0x1a>
  401d20:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d24:	b672      	cpsid	i
  401d26:	f383 8811 	msr	BASEPRI, r3
  401d2a:	f3bf 8f6f 	isb	sy
  401d2e:	f3bf 8f4f 	dsb	sy
  401d32:	b662      	cpsie	i
  401d34:	e7fe      	b.n	401d34 <xQueueGenericCreate+0x18>
  401d36:	4606      	mov	r6, r0
  401d38:	4617      	mov	r7, r2
  401d3a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401d3c:	b189      	cbz	r1, 401d62 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d3e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401d42:	3059      	adds	r0, #89	; 0x59
  401d44:	4b12      	ldr	r3, [pc, #72]	; (401d90 <xQueueGenericCreate+0x74>)
  401d46:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401d48:	4604      	mov	r4, r0
  401d4a:	b9e8      	cbnz	r0, 401d88 <xQueueGenericCreate+0x6c>
  401d4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d50:	b672      	cpsid	i
  401d52:	f383 8811 	msr	BASEPRI, r3
  401d56:	f3bf 8f6f 	isb	sy
  401d5a:	f3bf 8f4f 	dsb	sy
  401d5e:	b662      	cpsie	i
  401d60:	e7fe      	b.n	401d60 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401d62:	2058      	movs	r0, #88	; 0x58
  401d64:	4b0a      	ldr	r3, [pc, #40]	; (401d90 <xQueueGenericCreate+0x74>)
  401d66:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401d68:	4604      	mov	r4, r0
  401d6a:	2800      	cmp	r0, #0
  401d6c:	d0ee      	beq.n	401d4c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401d6e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401d70:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401d72:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401d74:	2101      	movs	r1, #1
  401d76:	4620      	mov	r0, r4
  401d78:	4b06      	ldr	r3, [pc, #24]	; (401d94 <xQueueGenericCreate+0x78>)
  401d7a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401d7c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401d80:	2300      	movs	r3, #0
  401d82:	6563      	str	r3, [r4, #84]	; 0x54
}
  401d84:	4620      	mov	r0, r4
  401d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401d88:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401d8c:	6003      	str	r3, [r0, #0]
  401d8e:	e7ef      	b.n	401d70 <xQueueGenericCreate+0x54>
  401d90:	00401a59 	.word	0x00401a59
  401d94:	00401c89 	.word	0x00401c89

00401d98 <xQueueGenericSend>:
{
  401d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d9c:	b085      	sub	sp, #20
  401d9e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401da0:	b1b8      	cbz	r0, 401dd2 <xQueueGenericSend+0x3a>
  401da2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401da4:	b301      	cbz	r1, 401de8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401da6:	2b02      	cmp	r3, #2
  401da8:	d02c      	beq.n	401e04 <xQueueGenericSend+0x6c>
  401daa:	461d      	mov	r5, r3
  401dac:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401dae:	4b66      	ldr	r3, [pc, #408]	; (401f48 <xQueueGenericSend+0x1b0>)
  401db0:	4798      	blx	r3
  401db2:	2800      	cmp	r0, #0
  401db4:	d134      	bne.n	401e20 <xQueueGenericSend+0x88>
  401db6:	9b01      	ldr	r3, [sp, #4]
  401db8:	2b00      	cmp	r3, #0
  401dba:	d038      	beq.n	401e2e <xQueueGenericSend+0x96>
  401dbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc0:	b672      	cpsid	i
  401dc2:	f383 8811 	msr	BASEPRI, r3
  401dc6:	f3bf 8f6f 	isb	sy
  401dca:	f3bf 8f4f 	dsb	sy
  401dce:	b662      	cpsie	i
  401dd0:	e7fe      	b.n	401dd0 <xQueueGenericSend+0x38>
  401dd2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dd6:	b672      	cpsid	i
  401dd8:	f383 8811 	msr	BASEPRI, r3
  401ddc:	f3bf 8f6f 	isb	sy
  401de0:	f3bf 8f4f 	dsb	sy
  401de4:	b662      	cpsie	i
  401de6:	e7fe      	b.n	401de6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401de8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401dea:	2a00      	cmp	r2, #0
  401dec:	d0db      	beq.n	401da6 <xQueueGenericSend+0xe>
  401dee:	f04f 0380 	mov.w	r3, #128	; 0x80
  401df2:	b672      	cpsid	i
  401df4:	f383 8811 	msr	BASEPRI, r3
  401df8:	f3bf 8f6f 	isb	sy
  401dfc:	f3bf 8f4f 	dsb	sy
  401e00:	b662      	cpsie	i
  401e02:	e7fe      	b.n	401e02 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401e04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401e06:	2a01      	cmp	r2, #1
  401e08:	d0cf      	beq.n	401daa <xQueueGenericSend+0x12>
  401e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e0e:	b672      	cpsid	i
  401e10:	f383 8811 	msr	BASEPRI, r3
  401e14:	f3bf 8f6f 	isb	sy
  401e18:	f3bf 8f4f 	dsb	sy
  401e1c:	b662      	cpsie	i
  401e1e:	e7fe      	b.n	401e1e <xQueueGenericSend+0x86>
  401e20:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401e22:	4e4a      	ldr	r6, [pc, #296]	; (401f4c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401e24:	f8df a150 	ldr.w	sl, [pc, #336]	; 401f78 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401e28:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401f58 <xQueueGenericSend+0x1c0>
  401e2c:	e042      	b.n	401eb4 <xQueueGenericSend+0x11c>
  401e2e:	2700      	movs	r7, #0
  401e30:	e7f7      	b.n	401e22 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401e32:	462a      	mov	r2, r5
  401e34:	4641      	mov	r1, r8
  401e36:	4620      	mov	r0, r4
  401e38:	4b45      	ldr	r3, [pc, #276]	; (401f50 <xQueueGenericSend+0x1b8>)
  401e3a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e3e:	b19b      	cbz	r3, 401e68 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401e40:	4629      	mov	r1, r5
  401e42:	4620      	mov	r0, r4
  401e44:	4b43      	ldr	r3, [pc, #268]	; (401f54 <xQueueGenericSend+0x1bc>)
  401e46:	4798      	blx	r3
  401e48:	2801      	cmp	r0, #1
  401e4a:	d107      	bne.n	401e5c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e50:	4b41      	ldr	r3, [pc, #260]	; (401f58 <xQueueGenericSend+0x1c0>)
  401e52:	601a      	str	r2, [r3, #0]
  401e54:	f3bf 8f4f 	dsb	sy
  401e58:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401e5c:	4b3f      	ldr	r3, [pc, #252]	; (401f5c <xQueueGenericSend+0x1c4>)
  401e5e:	4798      	blx	r3
				return pdPASS;
  401e60:	2001      	movs	r0, #1
}
  401e62:	b005      	add	sp, #20
  401e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e6a:	b173      	cbz	r3, 401e8a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e70:	4b3b      	ldr	r3, [pc, #236]	; (401f60 <xQueueGenericSend+0x1c8>)
  401e72:	4798      	blx	r3
  401e74:	2801      	cmp	r0, #1
  401e76:	d1f1      	bne.n	401e5c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e7c:	4b36      	ldr	r3, [pc, #216]	; (401f58 <xQueueGenericSend+0x1c0>)
  401e7e:	601a      	str	r2, [r3, #0]
  401e80:	f3bf 8f4f 	dsb	sy
  401e84:	f3bf 8f6f 	isb	sy
  401e88:	e7e8      	b.n	401e5c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401e8a:	2800      	cmp	r0, #0
  401e8c:	d0e6      	beq.n	401e5c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e92:	4b31      	ldr	r3, [pc, #196]	; (401f58 <xQueueGenericSend+0x1c0>)
  401e94:	601a      	str	r2, [r3, #0]
  401e96:	f3bf 8f4f 	dsb	sy
  401e9a:	f3bf 8f6f 	isb	sy
  401e9e:	e7dd      	b.n	401e5c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401ea0:	4b2e      	ldr	r3, [pc, #184]	; (401f5c <xQueueGenericSend+0x1c4>)
  401ea2:	4798      	blx	r3
					return errQUEUE_FULL;
  401ea4:	2000      	movs	r0, #0
  401ea6:	e7dc      	b.n	401e62 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401ea8:	4620      	mov	r0, r4
  401eaa:	4b2e      	ldr	r3, [pc, #184]	; (401f64 <xQueueGenericSend+0x1cc>)
  401eac:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401eae:	4b2e      	ldr	r3, [pc, #184]	; (401f68 <xQueueGenericSend+0x1d0>)
  401eb0:	4798      	blx	r3
  401eb2:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401eb4:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401eb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401eb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401eba:	429a      	cmp	r2, r3
  401ebc:	d3b9      	bcc.n	401e32 <xQueueGenericSend+0x9a>
  401ebe:	2d02      	cmp	r5, #2
  401ec0:	d0b7      	beq.n	401e32 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401ec2:	9b01      	ldr	r3, [sp, #4]
  401ec4:	2b00      	cmp	r3, #0
  401ec6:	d0eb      	beq.n	401ea0 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401ec8:	b90f      	cbnz	r7, 401ece <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401eca:	a802      	add	r0, sp, #8
  401ecc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401ece:	4b23      	ldr	r3, [pc, #140]	; (401f5c <xQueueGenericSend+0x1c4>)
  401ed0:	4798      	blx	r3
		vTaskSuspendAll();
  401ed2:	4b26      	ldr	r3, [pc, #152]	; (401f6c <xQueueGenericSend+0x1d4>)
  401ed4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401ed6:	47b0      	blx	r6
  401ed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401eda:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ede:	d101      	bne.n	401ee4 <xQueueGenericSend+0x14c>
  401ee0:	2300      	movs	r3, #0
  401ee2:	6463      	str	r3, [r4, #68]	; 0x44
  401ee4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401eea:	d101      	bne.n	401ef0 <xQueueGenericSend+0x158>
  401eec:	2300      	movs	r3, #0
  401eee:	64a3      	str	r3, [r4, #72]	; 0x48
  401ef0:	4b1a      	ldr	r3, [pc, #104]	; (401f5c <xQueueGenericSend+0x1c4>)
  401ef2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401ef4:	a901      	add	r1, sp, #4
  401ef6:	a802      	add	r0, sp, #8
  401ef8:	4b1d      	ldr	r3, [pc, #116]	; (401f70 <xQueueGenericSend+0x1d8>)
  401efa:	4798      	blx	r3
  401efc:	b9e0      	cbnz	r0, 401f38 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401efe:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401f00:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401f04:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401f06:	4b15      	ldr	r3, [pc, #84]	; (401f5c <xQueueGenericSend+0x1c4>)
  401f08:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401f0a:	45bb      	cmp	fp, r7
  401f0c:	d1cc      	bne.n	401ea8 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401f0e:	9901      	ldr	r1, [sp, #4]
  401f10:	f104 0010 	add.w	r0, r4, #16
  401f14:	4b17      	ldr	r3, [pc, #92]	; (401f74 <xQueueGenericSend+0x1dc>)
  401f16:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401f18:	4620      	mov	r0, r4
  401f1a:	4b12      	ldr	r3, [pc, #72]	; (401f64 <xQueueGenericSend+0x1cc>)
  401f1c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401f1e:	4b12      	ldr	r3, [pc, #72]	; (401f68 <xQueueGenericSend+0x1d0>)
  401f20:	4798      	blx	r3
  401f22:	2800      	cmp	r0, #0
  401f24:	d1c5      	bne.n	401eb2 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401f26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f2a:	f8c9 3000 	str.w	r3, [r9]
  401f2e:	f3bf 8f4f 	dsb	sy
  401f32:	f3bf 8f6f 	isb	sy
  401f36:	e7bc      	b.n	401eb2 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401f38:	4620      	mov	r0, r4
  401f3a:	4b0a      	ldr	r3, [pc, #40]	; (401f64 <xQueueGenericSend+0x1cc>)
  401f3c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401f3e:	4b0a      	ldr	r3, [pc, #40]	; (401f68 <xQueueGenericSend+0x1d0>)
  401f40:	4798      	blx	r3
			return errQUEUE_FULL;
  401f42:	2000      	movs	r0, #0
  401f44:	e78d      	b.n	401e62 <xQueueGenericSend+0xca>
  401f46:	bf00      	nop
  401f48:	00402ded 	.word	0x00402ded
  401f4c:	004017fd 	.word	0x004017fd
  401f50:	00401aad 	.word	0x00401aad
  401f54:	00401b35 	.word	0x00401b35
  401f58:	e000ed04 	.word	0xe000ed04
  401f5c:	00401849 	.word	0x00401849
  401f60:	00402c85 	.word	0x00402c85
  401f64:	00401be5 	.word	0x00401be5
  401f68:	00402869 	.word	0x00402869
  401f6c:	00402701 	.word	0x00402701
  401f70:	00402d4d 	.word	0x00402d4d
  401f74:	00402b81 	.word	0x00402b81
  401f78:	00402d1d 	.word	0x00402d1d

00401f7c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401f7c:	2800      	cmp	r0, #0
  401f7e:	d036      	beq.n	401fee <xQueueGenericSendFromISR+0x72>
{
  401f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f84:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f86:	2900      	cmp	r1, #0
  401f88:	d03c      	beq.n	402004 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401f8a:	2b02      	cmp	r3, #2
  401f8c:	d048      	beq.n	402020 <xQueueGenericSendFromISR+0xa4>
  401f8e:	461e      	mov	r6, r3
  401f90:	4615      	mov	r5, r2
  401f92:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401f94:	4b35      	ldr	r3, [pc, #212]	; (40206c <xQueueGenericSendFromISR+0xf0>)
  401f96:	4798      	blx	r3
	__asm volatile
  401f98:	f3ef 8711 	mrs	r7, BASEPRI
  401f9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fa0:	b672      	cpsid	i
  401fa2:	f383 8811 	msr	BASEPRI, r3
  401fa6:	f3bf 8f6f 	isb	sy
  401faa:	f3bf 8f4f 	dsb	sy
  401fae:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401fb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401fb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401fb4:	429a      	cmp	r2, r3
  401fb6:	d301      	bcc.n	401fbc <xQueueGenericSendFromISR+0x40>
  401fb8:	2e02      	cmp	r6, #2
  401fba:	d14f      	bne.n	40205c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401fbc:	4632      	mov	r2, r6
  401fbe:	4641      	mov	r1, r8
  401fc0:	4620      	mov	r0, r4
  401fc2:	4b2b      	ldr	r3, [pc, #172]	; (402070 <xQueueGenericSendFromISR+0xf4>)
  401fc4:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401fc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fcc:	d141      	bne.n	402052 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401fce:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401fd0:	2b00      	cmp	r3, #0
  401fd2:	d033      	beq.n	40203c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401fd4:	4631      	mov	r1, r6
  401fd6:	4620      	mov	r0, r4
  401fd8:	4b26      	ldr	r3, [pc, #152]	; (402074 <xQueueGenericSendFromISR+0xf8>)
  401fda:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401fdc:	2d00      	cmp	r5, #0
  401fde:	d03f      	beq.n	402060 <xQueueGenericSendFromISR+0xe4>
  401fe0:	2801      	cmp	r0, #1
  401fe2:	d13d      	bne.n	402060 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401fe4:	6028      	str	r0, [r5, #0]
	__asm volatile
  401fe6:	f387 8811 	msr	BASEPRI, r7
}
  401fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401fee:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ff2:	b672      	cpsid	i
  401ff4:	f383 8811 	msr	BASEPRI, r3
  401ff8:	f3bf 8f6f 	isb	sy
  401ffc:	f3bf 8f4f 	dsb	sy
  402000:	b662      	cpsie	i
  402002:	e7fe      	b.n	402002 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402004:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402006:	2800      	cmp	r0, #0
  402008:	d0bf      	beq.n	401f8a <xQueueGenericSendFromISR+0xe>
  40200a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40200e:	b672      	cpsid	i
  402010:	f383 8811 	msr	BASEPRI, r3
  402014:	f3bf 8f6f 	isb	sy
  402018:	f3bf 8f4f 	dsb	sy
  40201c:	b662      	cpsie	i
  40201e:	e7fe      	b.n	40201e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402020:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402022:	2801      	cmp	r0, #1
  402024:	d0b3      	beq.n	401f8e <xQueueGenericSendFromISR+0x12>
  402026:	f04f 0380 	mov.w	r3, #128	; 0x80
  40202a:	b672      	cpsid	i
  40202c:	f383 8811 	msr	BASEPRI, r3
  402030:	f3bf 8f6f 	isb	sy
  402034:	f3bf 8f4f 	dsb	sy
  402038:	b662      	cpsie	i
  40203a:	e7fe      	b.n	40203a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40203c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40203e:	b18b      	cbz	r3, 402064 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402040:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402044:	4b0c      	ldr	r3, [pc, #48]	; (402078 <xQueueGenericSendFromISR+0xfc>)
  402046:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402048:	b175      	cbz	r5, 402068 <xQueueGenericSendFromISR+0xec>
  40204a:	b168      	cbz	r0, 402068 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40204c:	2001      	movs	r0, #1
  40204e:	6028      	str	r0, [r5, #0]
  402050:	e7c9      	b.n	401fe6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402052:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402054:	3301      	adds	r3, #1
  402056:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402058:	2001      	movs	r0, #1
  40205a:	e7c4      	b.n	401fe6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  40205c:	2000      	movs	r0, #0
  40205e:	e7c2      	b.n	401fe6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402060:	2001      	movs	r0, #1
  402062:	e7c0      	b.n	401fe6 <xQueueGenericSendFromISR+0x6a>
  402064:	2001      	movs	r0, #1
  402066:	e7be      	b.n	401fe6 <xQueueGenericSendFromISR+0x6a>
  402068:	2001      	movs	r0, #1
  40206a:	e7bc      	b.n	401fe6 <xQueueGenericSendFromISR+0x6a>
  40206c:	004019f5 	.word	0x004019f5
  402070:	00401aad 	.word	0x00401aad
  402074:	00401b35 	.word	0x00401b35
  402078:	00402c85 	.word	0x00402c85

0040207c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  40207c:	b170      	cbz	r0, 40209c <xQueueGiveFromISR+0x20>
{
  40207e:	b570      	push	{r4, r5, r6, lr}
  402080:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402082:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402084:	b1ab      	cbz	r3, 4020b2 <xQueueGiveFromISR+0x36>
  402086:	f04f 0380 	mov.w	r3, #128	; 0x80
  40208a:	b672      	cpsid	i
  40208c:	f383 8811 	msr	BASEPRI, r3
  402090:	f3bf 8f6f 	isb	sy
  402094:	f3bf 8f4f 	dsb	sy
  402098:	b662      	cpsie	i
  40209a:	e7fe      	b.n	40209a <xQueueGiveFromISR+0x1e>
  40209c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a0:	b672      	cpsid	i
  4020a2:	f383 8811 	msr	BASEPRI, r3
  4020a6:	f3bf 8f6f 	isb	sy
  4020aa:	f3bf 8f4f 	dsb	sy
  4020ae:	b662      	cpsie	i
  4020b0:	e7fe      	b.n	4020b0 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4020b2:	6803      	ldr	r3, [r0, #0]
  4020b4:	b333      	cbz	r3, 402104 <xQueueGiveFromISR+0x88>
  4020b6:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4020b8:	4b25      	ldr	r3, [pc, #148]	; (402150 <xQueueGiveFromISR+0xd4>)
  4020ba:	4798      	blx	r3
	__asm volatile
  4020bc:	f3ef 8611 	mrs	r6, BASEPRI
  4020c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c4:	b672      	cpsid	i
  4020c6:	f383 8811 	msr	BASEPRI, r3
  4020ca:	f3bf 8f6f 	isb	sy
  4020ce:	f3bf 8f4f 	dsb	sy
  4020d2:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4020d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4020d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4020d8:	429a      	cmp	r2, r3
  4020da:	d231      	bcs.n	402140 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4020dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4020de:	3301      	adds	r3, #1
  4020e0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4020e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020e8:	d125      	bne.n	402136 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4020ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4020ec:	b1c3      	cbz	r3, 402120 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4020ee:	2100      	movs	r1, #0
  4020f0:	4620      	mov	r0, r4
  4020f2:	4b18      	ldr	r3, [pc, #96]	; (402154 <xQueueGiveFromISR+0xd8>)
  4020f4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4020f6:	b32d      	cbz	r5, 402144 <xQueueGiveFromISR+0xc8>
  4020f8:	2801      	cmp	r0, #1
  4020fa:	d123      	bne.n	402144 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4020fc:	6028      	str	r0, [r5, #0]
	__asm volatile
  4020fe:	f386 8811 	msr	BASEPRI, r6
}
  402102:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402104:	6843      	ldr	r3, [r0, #4]
  402106:	2b00      	cmp	r3, #0
  402108:	d0d5      	beq.n	4020b6 <xQueueGiveFromISR+0x3a>
	__asm volatile
  40210a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40210e:	b672      	cpsid	i
  402110:	f383 8811 	msr	BASEPRI, r3
  402114:	f3bf 8f6f 	isb	sy
  402118:	f3bf 8f4f 	dsb	sy
  40211c:	b662      	cpsie	i
  40211e:	e7fe      	b.n	40211e <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402120:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402122:	b18b      	cbz	r3, 402148 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402124:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402128:	4b0b      	ldr	r3, [pc, #44]	; (402158 <xQueueGiveFromISR+0xdc>)
  40212a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40212c:	b175      	cbz	r5, 40214c <xQueueGiveFromISR+0xd0>
  40212e:	b168      	cbz	r0, 40214c <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402130:	2001      	movs	r0, #1
  402132:	6028      	str	r0, [r5, #0]
  402134:	e7e3      	b.n	4020fe <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  402136:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402138:	3301      	adds	r3, #1
  40213a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40213c:	2001      	movs	r0, #1
  40213e:	e7de      	b.n	4020fe <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402140:	2000      	movs	r0, #0
  402142:	e7dc      	b.n	4020fe <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402144:	2001      	movs	r0, #1
  402146:	e7da      	b.n	4020fe <xQueueGiveFromISR+0x82>
  402148:	2001      	movs	r0, #1
  40214a:	e7d8      	b.n	4020fe <xQueueGiveFromISR+0x82>
  40214c:	2001      	movs	r0, #1
  40214e:	e7d6      	b.n	4020fe <xQueueGiveFromISR+0x82>
  402150:	004019f5 	.word	0x004019f5
  402154:	00401b35 	.word	0x00401b35
  402158:	00402c85 	.word	0x00402c85

0040215c <xQueueGenericReceive>:
{
  40215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402160:	b084      	sub	sp, #16
  402162:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402164:	b198      	cbz	r0, 40218e <xQueueGenericReceive+0x32>
  402166:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402168:	b1e1      	cbz	r1, 4021a4 <xQueueGenericReceive+0x48>
  40216a:	4698      	mov	r8, r3
  40216c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40216e:	4b61      	ldr	r3, [pc, #388]	; (4022f4 <xQueueGenericReceive+0x198>)
  402170:	4798      	blx	r3
  402172:	bb28      	cbnz	r0, 4021c0 <xQueueGenericReceive+0x64>
  402174:	9b01      	ldr	r3, [sp, #4]
  402176:	b353      	cbz	r3, 4021ce <xQueueGenericReceive+0x72>
  402178:	f04f 0380 	mov.w	r3, #128	; 0x80
  40217c:	b672      	cpsid	i
  40217e:	f383 8811 	msr	BASEPRI, r3
  402182:	f3bf 8f6f 	isb	sy
  402186:	f3bf 8f4f 	dsb	sy
  40218a:	b662      	cpsie	i
  40218c:	e7fe      	b.n	40218c <xQueueGenericReceive+0x30>
  40218e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402192:	b672      	cpsid	i
  402194:	f383 8811 	msr	BASEPRI, r3
  402198:	f3bf 8f6f 	isb	sy
  40219c:	f3bf 8f4f 	dsb	sy
  4021a0:	b662      	cpsie	i
  4021a2:	e7fe      	b.n	4021a2 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4021a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4021a6:	2a00      	cmp	r2, #0
  4021a8:	d0df      	beq.n	40216a <xQueueGenericReceive+0xe>
  4021aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ae:	b672      	cpsid	i
  4021b0:	f383 8811 	msr	BASEPRI, r3
  4021b4:	f3bf 8f6f 	isb	sy
  4021b8:	f3bf 8f4f 	dsb	sy
  4021bc:	b662      	cpsie	i
  4021be:	e7fe      	b.n	4021be <xQueueGenericReceive+0x62>
  4021c0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4021c2:	4d4d      	ldr	r5, [pc, #308]	; (4022f8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  4021c4:	f8df a160 	ldr.w	sl, [pc, #352]	; 402328 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4021c8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402308 <xQueueGenericReceive+0x1ac>
  4021cc:	e04b      	b.n	402266 <xQueueGenericReceive+0x10a>
  4021ce:	2600      	movs	r6, #0
  4021d0:	e7f7      	b.n	4021c2 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4021d2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4021d4:	4639      	mov	r1, r7
  4021d6:	4620      	mov	r0, r4
  4021d8:	4b48      	ldr	r3, [pc, #288]	; (4022fc <xQueueGenericReceive+0x1a0>)
  4021da:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4021dc:	f1b8 0f00 	cmp.w	r8, #0
  4021e0:	d11d      	bne.n	40221e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4021e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4021e4:	3b01      	subs	r3, #1
  4021e6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4021e8:	6823      	ldr	r3, [r4, #0]
  4021ea:	b913      	cbnz	r3, 4021f2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4021ec:	4b44      	ldr	r3, [pc, #272]	; (402300 <xQueueGenericReceive+0x1a4>)
  4021ee:	4798      	blx	r3
  4021f0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4021f2:	6923      	ldr	r3, [r4, #16]
  4021f4:	b16b      	cbz	r3, 402212 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4021f6:	f104 0010 	add.w	r0, r4, #16
  4021fa:	4b42      	ldr	r3, [pc, #264]	; (402304 <xQueueGenericReceive+0x1a8>)
  4021fc:	4798      	blx	r3
  4021fe:	2801      	cmp	r0, #1
  402200:	d107      	bne.n	402212 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402206:	4b40      	ldr	r3, [pc, #256]	; (402308 <xQueueGenericReceive+0x1ac>)
  402208:	601a      	str	r2, [r3, #0]
  40220a:	f3bf 8f4f 	dsb	sy
  40220e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402212:	4b3e      	ldr	r3, [pc, #248]	; (40230c <xQueueGenericReceive+0x1b0>)
  402214:	4798      	blx	r3
				return pdPASS;
  402216:	2001      	movs	r0, #1
}
  402218:	b004      	add	sp, #16
  40221a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40221e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402220:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402222:	2b00      	cmp	r3, #0
  402224:	d0f5      	beq.n	402212 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402226:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40222a:	4b36      	ldr	r3, [pc, #216]	; (402304 <xQueueGenericReceive+0x1a8>)
  40222c:	4798      	blx	r3
  40222e:	2800      	cmp	r0, #0
  402230:	d0ef      	beq.n	402212 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402236:	4b34      	ldr	r3, [pc, #208]	; (402308 <xQueueGenericReceive+0x1ac>)
  402238:	601a      	str	r2, [r3, #0]
  40223a:	f3bf 8f4f 	dsb	sy
  40223e:	f3bf 8f6f 	isb	sy
  402242:	e7e6      	b.n	402212 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402244:	4b31      	ldr	r3, [pc, #196]	; (40230c <xQueueGenericReceive+0x1b0>)
  402246:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402248:	2000      	movs	r0, #0
  40224a:	e7e5      	b.n	402218 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  40224c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40224e:	6860      	ldr	r0, [r4, #4]
  402250:	4b2f      	ldr	r3, [pc, #188]	; (402310 <xQueueGenericReceive+0x1b4>)
  402252:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402254:	4b2d      	ldr	r3, [pc, #180]	; (40230c <xQueueGenericReceive+0x1b0>)
  402256:	4798      	blx	r3
  402258:	e030      	b.n	4022bc <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40225a:	4620      	mov	r0, r4
  40225c:	4b2d      	ldr	r3, [pc, #180]	; (402314 <xQueueGenericReceive+0x1b8>)
  40225e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402260:	4b2d      	ldr	r3, [pc, #180]	; (402318 <xQueueGenericReceive+0x1bc>)
  402262:	4798      	blx	r3
  402264:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402266:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40226a:	2b00      	cmp	r3, #0
  40226c:	d1b1      	bne.n	4021d2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40226e:	9b01      	ldr	r3, [sp, #4]
  402270:	2b00      	cmp	r3, #0
  402272:	d0e7      	beq.n	402244 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402274:	b90e      	cbnz	r6, 40227a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402276:	a802      	add	r0, sp, #8
  402278:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40227a:	4b24      	ldr	r3, [pc, #144]	; (40230c <xQueueGenericReceive+0x1b0>)
  40227c:	4798      	blx	r3
		vTaskSuspendAll();
  40227e:	4b27      	ldr	r3, [pc, #156]	; (40231c <xQueueGenericReceive+0x1c0>)
  402280:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402282:	47a8      	blx	r5
  402284:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402286:	f1b3 3fff 	cmp.w	r3, #4294967295
  40228a:	d101      	bne.n	402290 <xQueueGenericReceive+0x134>
  40228c:	2300      	movs	r3, #0
  40228e:	6463      	str	r3, [r4, #68]	; 0x44
  402290:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402292:	f1b3 3fff 	cmp.w	r3, #4294967295
  402296:	d101      	bne.n	40229c <xQueueGenericReceive+0x140>
  402298:	2300      	movs	r3, #0
  40229a:	64a3      	str	r3, [r4, #72]	; 0x48
  40229c:	4b1b      	ldr	r3, [pc, #108]	; (40230c <xQueueGenericReceive+0x1b0>)
  40229e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4022a0:	a901      	add	r1, sp, #4
  4022a2:	a802      	add	r0, sp, #8
  4022a4:	4b1e      	ldr	r3, [pc, #120]	; (402320 <xQueueGenericReceive+0x1c4>)
  4022a6:	4798      	blx	r3
  4022a8:	b9e8      	cbnz	r0, 4022e6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4022aa:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4022ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4022ae:	4b17      	ldr	r3, [pc, #92]	; (40230c <xQueueGenericReceive+0x1b0>)
  4022b0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4022b2:	2e00      	cmp	r6, #0
  4022b4:	d1d1      	bne.n	40225a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4022b6:	6823      	ldr	r3, [r4, #0]
  4022b8:	2b00      	cmp	r3, #0
  4022ba:	d0c7      	beq.n	40224c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4022bc:	9901      	ldr	r1, [sp, #4]
  4022be:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4022c2:	4b18      	ldr	r3, [pc, #96]	; (402324 <xQueueGenericReceive+0x1c8>)
  4022c4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4022c6:	4620      	mov	r0, r4
  4022c8:	4b12      	ldr	r3, [pc, #72]	; (402314 <xQueueGenericReceive+0x1b8>)
  4022ca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4022cc:	4b12      	ldr	r3, [pc, #72]	; (402318 <xQueueGenericReceive+0x1bc>)
  4022ce:	4798      	blx	r3
  4022d0:	2800      	cmp	r0, #0
  4022d2:	d1c7      	bne.n	402264 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4022d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4022d8:	f8c9 3000 	str.w	r3, [r9]
  4022dc:	f3bf 8f4f 	dsb	sy
  4022e0:	f3bf 8f6f 	isb	sy
  4022e4:	e7be      	b.n	402264 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4022e6:	4620      	mov	r0, r4
  4022e8:	4b0a      	ldr	r3, [pc, #40]	; (402314 <xQueueGenericReceive+0x1b8>)
  4022ea:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4022ec:	4b0a      	ldr	r3, [pc, #40]	; (402318 <xQueueGenericReceive+0x1bc>)
  4022ee:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4022f0:	2000      	movs	r0, #0
  4022f2:	e791      	b.n	402218 <xQueueGenericReceive+0xbc>
  4022f4:	00402ded 	.word	0x00402ded
  4022f8:	004017fd 	.word	0x004017fd
  4022fc:	00401bbd 	.word	0x00401bbd
  402300:	00402f6d 	.word	0x00402f6d
  402304:	00402c85 	.word	0x00402c85
  402308:	e000ed04 	.word	0xe000ed04
  40230c:	00401849 	.word	0x00401849
  402310:	00402e0d 	.word	0x00402e0d
  402314:	00401be5 	.word	0x00401be5
  402318:	00402869 	.word	0x00402869
  40231c:	00402701 	.word	0x00402701
  402320:	00402d4d 	.word	0x00402d4d
  402324:	00402b81 	.word	0x00402b81
  402328:	00402d1d 	.word	0x00402d1d

0040232c <vQueueAddToRegistry>:
	{
  40232c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40232e:	4b0b      	ldr	r3, [pc, #44]	; (40235c <vQueueAddToRegistry+0x30>)
  402330:	681b      	ldr	r3, [r3, #0]
  402332:	b153      	cbz	r3, 40234a <vQueueAddToRegistry+0x1e>
  402334:	2301      	movs	r3, #1
  402336:	4c09      	ldr	r4, [pc, #36]	; (40235c <vQueueAddToRegistry+0x30>)
  402338:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  40233c:	b132      	cbz	r2, 40234c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40233e:	3301      	adds	r3, #1
  402340:	2b08      	cmp	r3, #8
  402342:	d1f9      	bne.n	402338 <vQueueAddToRegistry+0xc>
	}
  402344:	f85d 4b04 	ldr.w	r4, [sp], #4
  402348:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40234a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40234c:	4a03      	ldr	r2, [pc, #12]	; (40235c <vQueueAddToRegistry+0x30>)
  40234e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402352:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402356:	6058      	str	r0, [r3, #4]
				break;
  402358:	e7f4      	b.n	402344 <vQueueAddToRegistry+0x18>
  40235a:	bf00      	nop
  40235c:	20400df8 	.word	0x20400df8

00402360 <vQueueWaitForMessageRestricted>:
	{
  402360:	b570      	push	{r4, r5, r6, lr}
  402362:	4604      	mov	r4, r0
  402364:	460d      	mov	r5, r1
  402366:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402368:	4b0f      	ldr	r3, [pc, #60]	; (4023a8 <vQueueWaitForMessageRestricted+0x48>)
  40236a:	4798      	blx	r3
  40236c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40236e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402372:	d00b      	beq.n	40238c <vQueueWaitForMessageRestricted+0x2c>
  402374:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402376:	f1b3 3fff 	cmp.w	r3, #4294967295
  40237a:	d00a      	beq.n	402392 <vQueueWaitForMessageRestricted+0x32>
  40237c:	4b0b      	ldr	r3, [pc, #44]	; (4023ac <vQueueWaitForMessageRestricted+0x4c>)
  40237e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402382:	b14b      	cbz	r3, 402398 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402384:	4620      	mov	r0, r4
  402386:	4b0a      	ldr	r3, [pc, #40]	; (4023b0 <vQueueWaitForMessageRestricted+0x50>)
  402388:	4798      	blx	r3
  40238a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40238c:	2300      	movs	r3, #0
  40238e:	6463      	str	r3, [r4, #68]	; 0x44
  402390:	e7f0      	b.n	402374 <vQueueWaitForMessageRestricted+0x14>
  402392:	2300      	movs	r3, #0
  402394:	64a3      	str	r3, [r4, #72]	; 0x48
  402396:	e7f1      	b.n	40237c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402398:	4632      	mov	r2, r6
  40239a:	4629      	mov	r1, r5
  40239c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4023a0:	4b04      	ldr	r3, [pc, #16]	; (4023b4 <vQueueWaitForMessageRestricted+0x54>)
  4023a2:	4798      	blx	r3
  4023a4:	e7ee      	b.n	402384 <vQueueWaitForMessageRestricted+0x24>
  4023a6:	bf00      	nop
  4023a8:	004017fd 	.word	0x004017fd
  4023ac:	00401849 	.word	0x00401849
  4023b0:	00401be5 	.word	0x00401be5
  4023b4:	00402c05 	.word	0x00402c05

004023b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023b8:	4b08      	ldr	r3, [pc, #32]	; (4023dc <prvResetNextTaskUnblockTime+0x24>)
  4023ba:	681b      	ldr	r3, [r3, #0]
  4023bc:	681b      	ldr	r3, [r3, #0]
  4023be:	b13b      	cbz	r3, 4023d0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4023c0:	4b06      	ldr	r3, [pc, #24]	; (4023dc <prvResetNextTaskUnblockTime+0x24>)
  4023c2:	681b      	ldr	r3, [r3, #0]
  4023c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4023c6:	68db      	ldr	r3, [r3, #12]
  4023c8:	685a      	ldr	r2, [r3, #4]
  4023ca:	4b05      	ldr	r3, [pc, #20]	; (4023e0 <prvResetNextTaskUnblockTime+0x28>)
  4023cc:	601a      	str	r2, [r3, #0]
  4023ce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4023d0:	f04f 32ff 	mov.w	r2, #4294967295
  4023d4:	4b02      	ldr	r3, [pc, #8]	; (4023e0 <prvResetNextTaskUnblockTime+0x28>)
  4023d6:	601a      	str	r2, [r3, #0]
  4023d8:	4770      	bx	lr
  4023da:	bf00      	nop
  4023dc:	20400c84 	.word	0x20400c84
  4023e0:	20400d30 	.word	0x20400d30

004023e4 <prvAddCurrentTaskToDelayedList>:
{
  4023e4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4023e6:	4b0f      	ldr	r3, [pc, #60]	; (402424 <prvAddCurrentTaskToDelayedList+0x40>)
  4023e8:	681b      	ldr	r3, [r3, #0]
  4023ea:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4023ec:	4b0e      	ldr	r3, [pc, #56]	; (402428 <prvAddCurrentTaskToDelayedList+0x44>)
  4023ee:	681b      	ldr	r3, [r3, #0]
  4023f0:	4298      	cmp	r0, r3
  4023f2:	d30e      	bcc.n	402412 <prvAddCurrentTaskToDelayedList+0x2e>
  4023f4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4023f6:	4b0d      	ldr	r3, [pc, #52]	; (40242c <prvAddCurrentTaskToDelayedList+0x48>)
  4023f8:	6818      	ldr	r0, [r3, #0]
  4023fa:	4b0a      	ldr	r3, [pc, #40]	; (402424 <prvAddCurrentTaskToDelayedList+0x40>)
  4023fc:	6819      	ldr	r1, [r3, #0]
  4023fe:	3104      	adds	r1, #4
  402400:	4b0b      	ldr	r3, [pc, #44]	; (402430 <prvAddCurrentTaskToDelayedList+0x4c>)
  402402:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402404:	4b0b      	ldr	r3, [pc, #44]	; (402434 <prvAddCurrentTaskToDelayedList+0x50>)
  402406:	681b      	ldr	r3, [r3, #0]
  402408:	429c      	cmp	r4, r3
  40240a:	d201      	bcs.n	402410 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40240c:	4b09      	ldr	r3, [pc, #36]	; (402434 <prvAddCurrentTaskToDelayedList+0x50>)
  40240e:	601c      	str	r4, [r3, #0]
  402410:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402412:	4b09      	ldr	r3, [pc, #36]	; (402438 <prvAddCurrentTaskToDelayedList+0x54>)
  402414:	6818      	ldr	r0, [r3, #0]
  402416:	4b03      	ldr	r3, [pc, #12]	; (402424 <prvAddCurrentTaskToDelayedList+0x40>)
  402418:	6819      	ldr	r1, [r3, #0]
  40241a:	3104      	adds	r1, #4
  40241c:	4b04      	ldr	r3, [pc, #16]	; (402430 <prvAddCurrentTaskToDelayedList+0x4c>)
  40241e:	4798      	blx	r3
  402420:	bd10      	pop	{r4, pc}
  402422:	bf00      	nop
  402424:	20400c80 	.word	0x20400c80
  402428:	20400d78 	.word	0x20400d78
  40242c:	20400c84 	.word	0x20400c84
  402430:	004016e5 	.word	0x004016e5
  402434:	20400d30 	.word	0x20400d30
  402438:	20400c88 	.word	0x20400c88

0040243c <xTaskGenericCreate>:
{
  40243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402440:	b083      	sub	sp, #12
  402442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402444:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402448:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40244a:	b160      	cbz	r0, 402466 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40244c:	2d04      	cmp	r5, #4
  40244e:	d915      	bls.n	40247c <xTaskGenericCreate+0x40>
  402450:	f04f 0380 	mov.w	r3, #128	; 0x80
  402454:	b672      	cpsid	i
  402456:	f383 8811 	msr	BASEPRI, r3
  40245a:	f3bf 8f6f 	isb	sy
  40245e:	f3bf 8f4f 	dsb	sy
  402462:	b662      	cpsie	i
  402464:	e7fe      	b.n	402464 <xTaskGenericCreate+0x28>
  402466:	f04f 0380 	mov.w	r3, #128	; 0x80
  40246a:	b672      	cpsid	i
  40246c:	f383 8811 	msr	BASEPRI, r3
  402470:	f3bf 8f6f 	isb	sy
  402474:	f3bf 8f4f 	dsb	sy
  402478:	b662      	cpsie	i
  40247a:	e7fe      	b.n	40247a <xTaskGenericCreate+0x3e>
  40247c:	9001      	str	r0, [sp, #4]
  40247e:	4698      	mov	r8, r3
  402480:	4691      	mov	r9, r2
  402482:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402484:	b936      	cbnz	r6, 402494 <xTaskGenericCreate+0x58>
  402486:	0090      	lsls	r0, r2, #2
  402488:	4b62      	ldr	r3, [pc, #392]	; (402614 <xTaskGenericCreate+0x1d8>)
  40248a:	4798      	blx	r3
		if( pxStack != NULL )
  40248c:	4606      	mov	r6, r0
  40248e:	2800      	cmp	r0, #0
  402490:	f000 809e 	beq.w	4025d0 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402494:	2058      	movs	r0, #88	; 0x58
  402496:	4b5f      	ldr	r3, [pc, #380]	; (402614 <xTaskGenericCreate+0x1d8>)
  402498:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40249a:	4604      	mov	r4, r0
  40249c:	2800      	cmp	r0, #0
  40249e:	f000 8094 	beq.w	4025ca <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4024a2:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4024a4:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4024a8:	21a5      	movs	r1, #165	; 0xa5
  4024aa:	4630      	mov	r0, r6
  4024ac:	4b5a      	ldr	r3, [pc, #360]	; (402618 <xTaskGenericCreate+0x1dc>)
  4024ae:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4024b0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4024b4:	444e      	add	r6, r9
  4024b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4024b8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4024bc:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4024c0:	783b      	ldrb	r3, [r7, #0]
  4024c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4024c6:	783b      	ldrb	r3, [r7, #0]
  4024c8:	2b00      	cmp	r3, #0
  4024ca:	f040 8084 	bne.w	4025d6 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4024ce:	2700      	movs	r7, #0
  4024d0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4024d4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4024d6:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4024d8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4024da:	f104 0904 	add.w	r9, r4, #4
  4024de:	4648      	mov	r0, r9
  4024e0:	f8df b184 	ldr.w	fp, [pc, #388]	; 402668 <xTaskGenericCreate+0x22c>
  4024e4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4024e6:	f104 0018 	add.w	r0, r4, #24
  4024ea:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4024ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024ee:	f1c5 0305 	rsb	r3, r5, #5
  4024f2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4024f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4024f6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4024f8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4024fc:	4642      	mov	r2, r8
  4024fe:	9901      	ldr	r1, [sp, #4]
  402500:	4630      	mov	r0, r6
  402502:	4b46      	ldr	r3, [pc, #280]	; (40261c <xTaskGenericCreate+0x1e0>)
  402504:	4798      	blx	r3
  402506:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402508:	f1ba 0f00 	cmp.w	sl, #0
  40250c:	d001      	beq.n	402512 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40250e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402512:	4b43      	ldr	r3, [pc, #268]	; (402620 <xTaskGenericCreate+0x1e4>)
  402514:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402516:	4a43      	ldr	r2, [pc, #268]	; (402624 <xTaskGenericCreate+0x1e8>)
  402518:	6813      	ldr	r3, [r2, #0]
  40251a:	3301      	adds	r3, #1
  40251c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40251e:	4b42      	ldr	r3, [pc, #264]	; (402628 <xTaskGenericCreate+0x1ec>)
  402520:	681b      	ldr	r3, [r3, #0]
  402522:	2b00      	cmp	r3, #0
  402524:	d166      	bne.n	4025f4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402526:	4b40      	ldr	r3, [pc, #256]	; (402628 <xTaskGenericCreate+0x1ec>)
  402528:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40252a:	6813      	ldr	r3, [r2, #0]
  40252c:	2b01      	cmp	r3, #1
  40252e:	d121      	bne.n	402574 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402530:	4f3e      	ldr	r7, [pc, #248]	; (40262c <xTaskGenericCreate+0x1f0>)
  402532:	4638      	mov	r0, r7
  402534:	4e3e      	ldr	r6, [pc, #248]	; (402630 <xTaskGenericCreate+0x1f4>)
  402536:	47b0      	blx	r6
  402538:	f107 0014 	add.w	r0, r7, #20
  40253c:	47b0      	blx	r6
  40253e:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402542:	47b0      	blx	r6
  402544:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402548:	47b0      	blx	r6
  40254a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  40254e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402550:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40266c <xTaskGenericCreate+0x230>
  402554:	4640      	mov	r0, r8
  402556:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402558:	4f36      	ldr	r7, [pc, #216]	; (402634 <xTaskGenericCreate+0x1f8>)
  40255a:	4638      	mov	r0, r7
  40255c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  40255e:	4836      	ldr	r0, [pc, #216]	; (402638 <xTaskGenericCreate+0x1fc>)
  402560:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402562:	4836      	ldr	r0, [pc, #216]	; (40263c <xTaskGenericCreate+0x200>)
  402564:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402566:	4836      	ldr	r0, [pc, #216]	; (402640 <xTaskGenericCreate+0x204>)
  402568:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40256a:	4b36      	ldr	r3, [pc, #216]	; (402644 <xTaskGenericCreate+0x208>)
  40256c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402570:	4b35      	ldr	r3, [pc, #212]	; (402648 <xTaskGenericCreate+0x20c>)
  402572:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402574:	4a35      	ldr	r2, [pc, #212]	; (40264c <xTaskGenericCreate+0x210>)
  402576:	6813      	ldr	r3, [r2, #0]
  402578:	3301      	adds	r3, #1
  40257a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40257c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40257e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402580:	4a33      	ldr	r2, [pc, #204]	; (402650 <xTaskGenericCreate+0x214>)
  402582:	6811      	ldr	r1, [r2, #0]
  402584:	2301      	movs	r3, #1
  402586:	4083      	lsls	r3, r0
  402588:	430b      	orrs	r3, r1
  40258a:	6013      	str	r3, [r2, #0]
  40258c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402590:	4649      	mov	r1, r9
  402592:	4b26      	ldr	r3, [pc, #152]	; (40262c <xTaskGenericCreate+0x1f0>)
  402594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402598:	4b2e      	ldr	r3, [pc, #184]	; (402654 <xTaskGenericCreate+0x218>)
  40259a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40259c:	4b2e      	ldr	r3, [pc, #184]	; (402658 <xTaskGenericCreate+0x21c>)
  40259e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4025a0:	4b2e      	ldr	r3, [pc, #184]	; (40265c <xTaskGenericCreate+0x220>)
  4025a2:	681b      	ldr	r3, [r3, #0]
  4025a4:	2b00      	cmp	r3, #0
  4025a6:	d031      	beq.n	40260c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4025a8:	4b1f      	ldr	r3, [pc, #124]	; (402628 <xTaskGenericCreate+0x1ec>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025ae:	429d      	cmp	r5, r3
  4025b0:	d92e      	bls.n	402610 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4025b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025b6:	4b2a      	ldr	r3, [pc, #168]	; (402660 <xTaskGenericCreate+0x224>)
  4025b8:	601a      	str	r2, [r3, #0]
  4025ba:	f3bf 8f4f 	dsb	sy
  4025be:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4025c2:	2001      	movs	r0, #1
}
  4025c4:	b003      	add	sp, #12
  4025c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4025ca:	4630      	mov	r0, r6
  4025cc:	4b25      	ldr	r3, [pc, #148]	; (402664 <xTaskGenericCreate+0x228>)
  4025ce:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4025d0:	f04f 30ff 	mov.w	r0, #4294967295
  4025d4:	e7f6      	b.n	4025c4 <xTaskGenericCreate+0x188>
  4025d6:	463b      	mov	r3, r7
  4025d8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4025dc:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4025de:	7859      	ldrb	r1, [r3, #1]
  4025e0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4025e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4025e8:	2900      	cmp	r1, #0
  4025ea:	f43f af70 	beq.w	4024ce <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4025ee:	42bb      	cmp	r3, r7
  4025f0:	d1f5      	bne.n	4025de <xTaskGenericCreate+0x1a2>
  4025f2:	e76c      	b.n	4024ce <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4025f4:	4b19      	ldr	r3, [pc, #100]	; (40265c <xTaskGenericCreate+0x220>)
  4025f6:	681b      	ldr	r3, [r3, #0]
  4025f8:	2b00      	cmp	r3, #0
  4025fa:	d1bb      	bne.n	402574 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4025fc:	4b0a      	ldr	r3, [pc, #40]	; (402628 <xTaskGenericCreate+0x1ec>)
  4025fe:	681b      	ldr	r3, [r3, #0]
  402600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402602:	429d      	cmp	r5, r3
  402604:	d3b6      	bcc.n	402574 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402606:	4b08      	ldr	r3, [pc, #32]	; (402628 <xTaskGenericCreate+0x1ec>)
  402608:	601c      	str	r4, [r3, #0]
  40260a:	e7b3      	b.n	402574 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40260c:	2001      	movs	r0, #1
  40260e:	e7d9      	b.n	4025c4 <xTaskGenericCreate+0x188>
  402610:	2001      	movs	r0, #1
	return xReturn;
  402612:	e7d7      	b.n	4025c4 <xTaskGenericCreate+0x188>
  402614:	00401a59 	.word	0x00401a59
  402618:	004045ad 	.word	0x004045ad
  40261c:	004017b1 	.word	0x004017b1
  402620:	004017fd 	.word	0x004017fd
  402624:	20400cf0 	.word	0x20400cf0
  402628:	20400c80 	.word	0x20400c80
  40262c:	20400c8c 	.word	0x20400c8c
  402630:	004016b1 	.word	0x004016b1
  402634:	20400d1c 	.word	0x20400d1c
  402638:	20400d38 	.word	0x20400d38
  40263c:	20400d64 	.word	0x20400d64
  402640:	20400d50 	.word	0x20400d50
  402644:	20400c84 	.word	0x20400c84
  402648:	20400c88 	.word	0x20400c88
  40264c:	20400cfc 	.word	0x20400cfc
  402650:	20400d04 	.word	0x20400d04
  402654:	004016cd 	.word	0x004016cd
  402658:	00401849 	.word	0x00401849
  40265c:	20400d4c 	.word	0x20400d4c
  402660:	e000ed04 	.word	0xe000ed04
  402664:	00401a89 	.word	0x00401a89
  402668:	004016c7 	.word	0x004016c7
  40266c:	20400d08 	.word	0x20400d08

00402670 <vTaskStartScheduler>:
{
  402670:	b510      	push	{r4, lr}
  402672:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402674:	2300      	movs	r3, #0
  402676:	9303      	str	r3, [sp, #12]
  402678:	9302      	str	r3, [sp, #8]
  40267a:	9301      	str	r3, [sp, #4]
  40267c:	9300      	str	r3, [sp, #0]
  40267e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402682:	4917      	ldr	r1, [pc, #92]	; (4026e0 <vTaskStartScheduler+0x70>)
  402684:	4817      	ldr	r0, [pc, #92]	; (4026e4 <vTaskStartScheduler+0x74>)
  402686:	4c18      	ldr	r4, [pc, #96]	; (4026e8 <vTaskStartScheduler+0x78>)
  402688:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40268a:	2801      	cmp	r0, #1
  40268c:	d00b      	beq.n	4026a6 <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  40268e:	bb20      	cbnz	r0, 4026da <vTaskStartScheduler+0x6a>
  402690:	f04f 0380 	mov.w	r3, #128	; 0x80
  402694:	b672      	cpsid	i
  402696:	f383 8811 	msr	BASEPRI, r3
  40269a:	f3bf 8f6f 	isb	sy
  40269e:	f3bf 8f4f 	dsb	sy
  4026a2:	b662      	cpsie	i
  4026a4:	e7fe      	b.n	4026a4 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  4026a6:	4b11      	ldr	r3, [pc, #68]	; (4026ec <vTaskStartScheduler+0x7c>)
  4026a8:	4798      	blx	r3
	if( xReturn == pdPASS )
  4026aa:	2801      	cmp	r0, #1
  4026ac:	d1ef      	bne.n	40268e <vTaskStartScheduler+0x1e>
  4026ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026b2:	b672      	cpsid	i
  4026b4:	f383 8811 	msr	BASEPRI, r3
  4026b8:	f3bf 8f6f 	isb	sy
  4026bc:	f3bf 8f4f 	dsb	sy
  4026c0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4026c2:	f04f 32ff 	mov.w	r2, #4294967295
  4026c6:	4b0a      	ldr	r3, [pc, #40]	; (4026f0 <vTaskStartScheduler+0x80>)
  4026c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4026ca:	2201      	movs	r2, #1
  4026cc:	4b09      	ldr	r3, [pc, #36]	; (4026f4 <vTaskStartScheduler+0x84>)
  4026ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4026d0:	2200      	movs	r2, #0
  4026d2:	4b09      	ldr	r3, [pc, #36]	; (4026f8 <vTaskStartScheduler+0x88>)
  4026d4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4026d6:	4b09      	ldr	r3, [pc, #36]	; (4026fc <vTaskStartScheduler+0x8c>)
  4026d8:	4798      	blx	r3
}
  4026da:	b004      	add	sp, #16
  4026dc:	bd10      	pop	{r4, pc}
  4026de:	bf00      	nop
  4026e0:	0040aff0 	.word	0x0040aff0
  4026e4:	00402a19 	.word	0x00402a19
  4026e8:	0040243d 	.word	0x0040243d
  4026ec:	00403059 	.word	0x00403059
  4026f0:	20400d30 	.word	0x20400d30
  4026f4:	20400d4c 	.word	0x20400d4c
  4026f8:	20400d78 	.word	0x20400d78
  4026fc:	00401931 	.word	0x00401931

00402700 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402700:	4a02      	ldr	r2, [pc, #8]	; (40270c <vTaskSuspendAll+0xc>)
  402702:	6813      	ldr	r3, [r2, #0]
  402704:	3301      	adds	r3, #1
  402706:	6013      	str	r3, [r2, #0]
  402708:	4770      	bx	lr
  40270a:	bf00      	nop
  40270c:	20400cf8 	.word	0x20400cf8

00402710 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402710:	4b01      	ldr	r3, [pc, #4]	; (402718 <xTaskGetTickCount+0x8>)
  402712:	6818      	ldr	r0, [r3, #0]
}
  402714:	4770      	bx	lr
  402716:	bf00      	nop
  402718:	20400d78 	.word	0x20400d78

0040271c <xTaskIncrementTick>:
{
  40271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402720:	4b42      	ldr	r3, [pc, #264]	; (40282c <xTaskIncrementTick+0x110>)
  402722:	681b      	ldr	r3, [r3, #0]
  402724:	2b00      	cmp	r3, #0
  402726:	d178      	bne.n	40281a <xTaskIncrementTick+0xfe>
		++xTickCount;
  402728:	4b41      	ldr	r3, [pc, #260]	; (402830 <xTaskIncrementTick+0x114>)
  40272a:	681a      	ldr	r2, [r3, #0]
  40272c:	3201      	adds	r2, #1
  40272e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402730:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402732:	b9d6      	cbnz	r6, 40276a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402734:	4b3f      	ldr	r3, [pc, #252]	; (402834 <xTaskIncrementTick+0x118>)
  402736:	681b      	ldr	r3, [r3, #0]
  402738:	681b      	ldr	r3, [r3, #0]
  40273a:	b153      	cbz	r3, 402752 <xTaskIncrementTick+0x36>
  40273c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402740:	b672      	cpsid	i
  402742:	f383 8811 	msr	BASEPRI, r3
  402746:	f3bf 8f6f 	isb	sy
  40274a:	f3bf 8f4f 	dsb	sy
  40274e:	b662      	cpsie	i
  402750:	e7fe      	b.n	402750 <xTaskIncrementTick+0x34>
  402752:	4a38      	ldr	r2, [pc, #224]	; (402834 <xTaskIncrementTick+0x118>)
  402754:	6811      	ldr	r1, [r2, #0]
  402756:	4b38      	ldr	r3, [pc, #224]	; (402838 <xTaskIncrementTick+0x11c>)
  402758:	6818      	ldr	r0, [r3, #0]
  40275a:	6010      	str	r0, [r2, #0]
  40275c:	6019      	str	r1, [r3, #0]
  40275e:	4a37      	ldr	r2, [pc, #220]	; (40283c <xTaskIncrementTick+0x120>)
  402760:	6813      	ldr	r3, [r2, #0]
  402762:	3301      	adds	r3, #1
  402764:	6013      	str	r3, [r2, #0]
  402766:	4b36      	ldr	r3, [pc, #216]	; (402840 <xTaskIncrementTick+0x124>)
  402768:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40276a:	4b36      	ldr	r3, [pc, #216]	; (402844 <xTaskIncrementTick+0x128>)
  40276c:	681b      	ldr	r3, [r3, #0]
  40276e:	429e      	cmp	r6, r3
  402770:	d218      	bcs.n	4027a4 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402772:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402774:	4b34      	ldr	r3, [pc, #208]	; (402848 <xTaskIncrementTick+0x12c>)
  402776:	681b      	ldr	r3, [r3, #0]
  402778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40277e:	4a33      	ldr	r2, [pc, #204]	; (40284c <xTaskIncrementTick+0x130>)
  402780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402784:	2b02      	cmp	r3, #2
  402786:	bf28      	it	cs
  402788:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40278a:	4b31      	ldr	r3, [pc, #196]	; (402850 <xTaskIncrementTick+0x134>)
  40278c:	681b      	ldr	r3, [r3, #0]
  40278e:	b90b      	cbnz	r3, 402794 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402790:	4b30      	ldr	r3, [pc, #192]	; (402854 <xTaskIncrementTick+0x138>)
  402792:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402794:	4b30      	ldr	r3, [pc, #192]	; (402858 <xTaskIncrementTick+0x13c>)
  402796:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402798:	2b00      	cmp	r3, #0
}
  40279a:	bf0c      	ite	eq
  40279c:	4620      	moveq	r0, r4
  40279e:	2001      	movne	r0, #1
  4027a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027a4:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4027a6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402834 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4027aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402864 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4027ae:	4f2b      	ldr	r7, [pc, #172]	; (40285c <xTaskIncrementTick+0x140>)
  4027b0:	e01f      	b.n	4027f2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4027b2:	f04f 32ff 	mov.w	r2, #4294967295
  4027b6:	4b23      	ldr	r3, [pc, #140]	; (402844 <xTaskIncrementTick+0x128>)
  4027b8:	601a      	str	r2, [r3, #0]
						break;
  4027ba:	e7db      	b.n	402774 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4027bc:	4a21      	ldr	r2, [pc, #132]	; (402844 <xTaskIncrementTick+0x128>)
  4027be:	6013      	str	r3, [r2, #0]
							break;
  4027c0:	e7d8      	b.n	402774 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4027c2:	f105 0018 	add.w	r0, r5, #24
  4027c6:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4027c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4027ca:	683a      	ldr	r2, [r7, #0]
  4027cc:	2301      	movs	r3, #1
  4027ce:	4083      	lsls	r3, r0
  4027d0:	4313      	orrs	r3, r2
  4027d2:	603b      	str	r3, [r7, #0]
  4027d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4027d8:	4651      	mov	r1, sl
  4027da:	4b1c      	ldr	r3, [pc, #112]	; (40284c <xTaskIncrementTick+0x130>)
  4027dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4027e0:	4b1f      	ldr	r3, [pc, #124]	; (402860 <xTaskIncrementTick+0x144>)
  4027e2:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4027e4:	4b18      	ldr	r3, [pc, #96]	; (402848 <xTaskIncrementTick+0x12c>)
  4027e6:	681b      	ldr	r3, [r3, #0]
  4027e8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4027ec:	429a      	cmp	r2, r3
  4027ee:	bf28      	it	cs
  4027f0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4027f2:	f8d9 3000 	ldr.w	r3, [r9]
  4027f6:	681b      	ldr	r3, [r3, #0]
  4027f8:	2b00      	cmp	r3, #0
  4027fa:	d0da      	beq.n	4027b2 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4027fc:	f8d9 3000 	ldr.w	r3, [r9]
  402800:	68db      	ldr	r3, [r3, #12]
  402802:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402804:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402806:	429e      	cmp	r6, r3
  402808:	d3d8      	bcc.n	4027bc <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40280a:	f105 0a04 	add.w	sl, r5, #4
  40280e:	4650      	mov	r0, sl
  402810:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402812:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402814:	2b00      	cmp	r3, #0
  402816:	d1d4      	bne.n	4027c2 <xTaskIncrementTick+0xa6>
  402818:	e7d6      	b.n	4027c8 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40281a:	4a0d      	ldr	r2, [pc, #52]	; (402850 <xTaskIncrementTick+0x134>)
  40281c:	6813      	ldr	r3, [r2, #0]
  40281e:	3301      	adds	r3, #1
  402820:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402822:	4b0c      	ldr	r3, [pc, #48]	; (402854 <xTaskIncrementTick+0x138>)
  402824:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402826:	2400      	movs	r4, #0
  402828:	e7b4      	b.n	402794 <xTaskIncrementTick+0x78>
  40282a:	bf00      	nop
  40282c:	20400cf8 	.word	0x20400cf8
  402830:	20400d78 	.word	0x20400d78
  402834:	20400c84 	.word	0x20400c84
  402838:	20400c88 	.word	0x20400c88
  40283c:	20400d34 	.word	0x20400d34
  402840:	004023b9 	.word	0x004023b9
  402844:	20400d30 	.word	0x20400d30
  402848:	20400c80 	.word	0x20400c80
  40284c:	20400c8c 	.word	0x20400c8c
  402850:	20400cf4 	.word	0x20400cf4
  402854:	00403771 	.word	0x00403771
  402858:	20400d7c 	.word	0x20400d7c
  40285c:	20400d04 	.word	0x20400d04
  402860:	004016cd 	.word	0x004016cd
  402864:	00401719 	.word	0x00401719

00402868 <xTaskResumeAll>:
{
  402868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  40286c:	4b38      	ldr	r3, [pc, #224]	; (402950 <xTaskResumeAll+0xe8>)
  40286e:	681b      	ldr	r3, [r3, #0]
  402870:	b953      	cbnz	r3, 402888 <xTaskResumeAll+0x20>
  402872:	f04f 0380 	mov.w	r3, #128	; 0x80
  402876:	b672      	cpsid	i
  402878:	f383 8811 	msr	BASEPRI, r3
  40287c:	f3bf 8f6f 	isb	sy
  402880:	f3bf 8f4f 	dsb	sy
  402884:	b662      	cpsie	i
  402886:	e7fe      	b.n	402886 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402888:	4b32      	ldr	r3, [pc, #200]	; (402954 <xTaskResumeAll+0xec>)
  40288a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40288c:	4b30      	ldr	r3, [pc, #192]	; (402950 <xTaskResumeAll+0xe8>)
  40288e:	681a      	ldr	r2, [r3, #0]
  402890:	3a01      	subs	r2, #1
  402892:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402894:	681b      	ldr	r3, [r3, #0]
  402896:	2b00      	cmp	r3, #0
  402898:	d155      	bne.n	402946 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40289a:	4b2f      	ldr	r3, [pc, #188]	; (402958 <xTaskResumeAll+0xf0>)
  40289c:	681b      	ldr	r3, [r3, #0]
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d132      	bne.n	402908 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4028a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4028a4:	4b2d      	ldr	r3, [pc, #180]	; (40295c <xTaskResumeAll+0xf4>)
  4028a6:	4798      	blx	r3
}
  4028a8:	4620      	mov	r0, r4
  4028aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4028ae:	68fb      	ldr	r3, [r7, #12]
  4028b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4028b2:	f104 0018 	add.w	r0, r4, #24
  4028b6:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4028b8:	f104 0804 	add.w	r8, r4, #4
  4028bc:	4640      	mov	r0, r8
  4028be:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4028c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4028c2:	682a      	ldr	r2, [r5, #0]
  4028c4:	2301      	movs	r3, #1
  4028c6:	4083      	lsls	r3, r0
  4028c8:	4313      	orrs	r3, r2
  4028ca:	602b      	str	r3, [r5, #0]
  4028cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028d0:	4641      	mov	r1, r8
  4028d2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4028d6:	4b22      	ldr	r3, [pc, #136]	; (402960 <xTaskResumeAll+0xf8>)
  4028d8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4028da:	4b22      	ldr	r3, [pc, #136]	; (402964 <xTaskResumeAll+0xfc>)
  4028dc:	681b      	ldr	r3, [r3, #0]
  4028de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4028e2:	429a      	cmp	r2, r3
  4028e4:	d20c      	bcs.n	402900 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4028e6:	683b      	ldr	r3, [r7, #0]
  4028e8:	2b00      	cmp	r3, #0
  4028ea:	d1e0      	bne.n	4028ae <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4028ec:	4b1e      	ldr	r3, [pc, #120]	; (402968 <xTaskResumeAll+0x100>)
  4028ee:	681b      	ldr	r3, [r3, #0]
  4028f0:	b1db      	cbz	r3, 40292a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4028f2:	4b1d      	ldr	r3, [pc, #116]	; (402968 <xTaskResumeAll+0x100>)
  4028f4:	681b      	ldr	r3, [r3, #0]
  4028f6:	b1c3      	cbz	r3, 40292a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4028f8:	4e1c      	ldr	r6, [pc, #112]	; (40296c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4028fa:	4d1d      	ldr	r5, [pc, #116]	; (402970 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4028fc:	4c1a      	ldr	r4, [pc, #104]	; (402968 <xTaskResumeAll+0x100>)
  4028fe:	e00e      	b.n	40291e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402900:	2201      	movs	r2, #1
  402902:	4b1b      	ldr	r3, [pc, #108]	; (402970 <xTaskResumeAll+0x108>)
  402904:	601a      	str	r2, [r3, #0]
  402906:	e7ee      	b.n	4028e6 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402908:	4f1a      	ldr	r7, [pc, #104]	; (402974 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40290a:	4e1b      	ldr	r6, [pc, #108]	; (402978 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40290c:	4d1b      	ldr	r5, [pc, #108]	; (40297c <xTaskResumeAll+0x114>)
  40290e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402984 <xTaskResumeAll+0x11c>
  402912:	e7e8      	b.n	4028e6 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402914:	6823      	ldr	r3, [r4, #0]
  402916:	3b01      	subs	r3, #1
  402918:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40291a:	6823      	ldr	r3, [r4, #0]
  40291c:	b12b      	cbz	r3, 40292a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40291e:	47b0      	blx	r6
  402920:	2800      	cmp	r0, #0
  402922:	d0f7      	beq.n	402914 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402924:	2301      	movs	r3, #1
  402926:	602b      	str	r3, [r5, #0]
  402928:	e7f4      	b.n	402914 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40292a:	4b11      	ldr	r3, [pc, #68]	; (402970 <xTaskResumeAll+0x108>)
  40292c:	681b      	ldr	r3, [r3, #0]
  40292e:	2b01      	cmp	r3, #1
  402930:	d10b      	bne.n	40294a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402936:	4b12      	ldr	r3, [pc, #72]	; (402980 <xTaskResumeAll+0x118>)
  402938:	601a      	str	r2, [r3, #0]
  40293a:	f3bf 8f4f 	dsb	sy
  40293e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402942:	2401      	movs	r4, #1
  402944:	e7ae      	b.n	4028a4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402946:	2400      	movs	r4, #0
  402948:	e7ac      	b.n	4028a4 <xTaskResumeAll+0x3c>
  40294a:	2400      	movs	r4, #0
  40294c:	e7aa      	b.n	4028a4 <xTaskResumeAll+0x3c>
  40294e:	bf00      	nop
  402950:	20400cf8 	.word	0x20400cf8
  402954:	004017fd 	.word	0x004017fd
  402958:	20400cf0 	.word	0x20400cf0
  40295c:	00401849 	.word	0x00401849
  402960:	004016cd 	.word	0x004016cd
  402964:	20400c80 	.word	0x20400c80
  402968:	20400cf4 	.word	0x20400cf4
  40296c:	0040271d 	.word	0x0040271d
  402970:	20400d7c 	.word	0x20400d7c
  402974:	20400d38 	.word	0x20400d38
  402978:	00401719 	.word	0x00401719
  40297c:	20400d04 	.word	0x20400d04
  402980:	e000ed04 	.word	0xe000ed04
  402984:	20400c8c 	.word	0x20400c8c

00402988 <vTaskDelay>:
	{
  402988:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40298a:	2800      	cmp	r0, #0
  40298c:	d029      	beq.n	4029e2 <vTaskDelay+0x5a>
  40298e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402990:	4b18      	ldr	r3, [pc, #96]	; (4029f4 <vTaskDelay+0x6c>)
  402992:	681b      	ldr	r3, [r3, #0]
  402994:	b153      	cbz	r3, 4029ac <vTaskDelay+0x24>
  402996:	f04f 0380 	mov.w	r3, #128	; 0x80
  40299a:	b672      	cpsid	i
  40299c:	f383 8811 	msr	BASEPRI, r3
  4029a0:	f3bf 8f6f 	isb	sy
  4029a4:	f3bf 8f4f 	dsb	sy
  4029a8:	b662      	cpsie	i
  4029aa:	e7fe      	b.n	4029aa <vTaskDelay+0x22>
			vTaskSuspendAll();
  4029ac:	4b12      	ldr	r3, [pc, #72]	; (4029f8 <vTaskDelay+0x70>)
  4029ae:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4029b0:	4b12      	ldr	r3, [pc, #72]	; (4029fc <vTaskDelay+0x74>)
  4029b2:	681b      	ldr	r3, [r3, #0]
  4029b4:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029b6:	4b12      	ldr	r3, [pc, #72]	; (402a00 <vTaskDelay+0x78>)
  4029b8:	6818      	ldr	r0, [r3, #0]
  4029ba:	3004      	adds	r0, #4
  4029bc:	4b11      	ldr	r3, [pc, #68]	; (402a04 <vTaskDelay+0x7c>)
  4029be:	4798      	blx	r3
  4029c0:	b948      	cbnz	r0, 4029d6 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029c2:	4b0f      	ldr	r3, [pc, #60]	; (402a00 <vTaskDelay+0x78>)
  4029c4:	681a      	ldr	r2, [r3, #0]
  4029c6:	4910      	ldr	r1, [pc, #64]	; (402a08 <vTaskDelay+0x80>)
  4029c8:	680b      	ldr	r3, [r1, #0]
  4029ca:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4029cc:	2201      	movs	r2, #1
  4029ce:	4082      	lsls	r2, r0
  4029d0:	ea23 0302 	bic.w	r3, r3, r2
  4029d4:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4029d6:	4620      	mov	r0, r4
  4029d8:	4b0c      	ldr	r3, [pc, #48]	; (402a0c <vTaskDelay+0x84>)
  4029da:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4029dc:	4b0c      	ldr	r3, [pc, #48]	; (402a10 <vTaskDelay+0x88>)
  4029de:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4029e0:	b938      	cbnz	r0, 4029f2 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4029e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029e6:	4b0b      	ldr	r3, [pc, #44]	; (402a14 <vTaskDelay+0x8c>)
  4029e8:	601a      	str	r2, [r3, #0]
  4029ea:	f3bf 8f4f 	dsb	sy
  4029ee:	f3bf 8f6f 	isb	sy
  4029f2:	bd10      	pop	{r4, pc}
  4029f4:	20400cf8 	.word	0x20400cf8
  4029f8:	00402701 	.word	0x00402701
  4029fc:	20400d78 	.word	0x20400d78
  402a00:	20400c80 	.word	0x20400c80
  402a04:	00401719 	.word	0x00401719
  402a08:	20400d04 	.word	0x20400d04
  402a0c:	004023e5 	.word	0x004023e5
  402a10:	00402869 	.word	0x00402869
  402a14:	e000ed04 	.word	0xe000ed04

00402a18 <prvIdleTask>:
{
  402a18:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402a1a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402aa4 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402a1e:	4e19      	ldr	r6, [pc, #100]	; (402a84 <prvIdleTask+0x6c>)
				taskYIELD();
  402a20:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402aa8 <prvIdleTask+0x90>
  402a24:	e02a      	b.n	402a7c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402a26:	4b18      	ldr	r3, [pc, #96]	; (402a88 <prvIdleTask+0x70>)
  402a28:	681b      	ldr	r3, [r3, #0]
  402a2a:	2b01      	cmp	r3, #1
  402a2c:	d81e      	bhi.n	402a6c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402a2e:	682b      	ldr	r3, [r5, #0]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d0f8      	beq.n	402a26 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402a34:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402a36:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402a38:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402a3a:	2c00      	cmp	r4, #0
  402a3c:	d0f7      	beq.n	402a2e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402a3e:	4b13      	ldr	r3, [pc, #76]	; (402a8c <prvIdleTask+0x74>)
  402a40:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402a42:	68f3      	ldr	r3, [r6, #12]
  402a44:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a46:	1d20      	adds	r0, r4, #4
  402a48:	4b11      	ldr	r3, [pc, #68]	; (402a90 <prvIdleTask+0x78>)
  402a4a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402a4c:	4a11      	ldr	r2, [pc, #68]	; (402a94 <prvIdleTask+0x7c>)
  402a4e:	6813      	ldr	r3, [r2, #0]
  402a50:	3b01      	subs	r3, #1
  402a52:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402a54:	682b      	ldr	r3, [r5, #0]
  402a56:	3b01      	subs	r3, #1
  402a58:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402a5a:	4b0f      	ldr	r3, [pc, #60]	; (402a98 <prvIdleTask+0x80>)
  402a5c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402a5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402a60:	f8df a048 	ldr.w	sl, [pc, #72]	; 402aac <prvIdleTask+0x94>
  402a64:	47d0      	blx	sl
		vPortFree( pxTCB );
  402a66:	4620      	mov	r0, r4
  402a68:	47d0      	blx	sl
  402a6a:	e7e0      	b.n	402a2e <prvIdleTask+0x16>
				taskYIELD();
  402a6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402a70:	f8c9 3000 	str.w	r3, [r9]
  402a74:	f3bf 8f4f 	dsb	sy
  402a78:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402a7c:	4d07      	ldr	r5, [pc, #28]	; (402a9c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402a7e:	4f08      	ldr	r7, [pc, #32]	; (402aa0 <prvIdleTask+0x88>)
  402a80:	e7d5      	b.n	402a2e <prvIdleTask+0x16>
  402a82:	bf00      	nop
  402a84:	20400d64 	.word	0x20400d64
  402a88:	20400c8c 	.word	0x20400c8c
  402a8c:	004017fd 	.word	0x004017fd
  402a90:	00401719 	.word	0x00401719
  402a94:	20400cf0 	.word	0x20400cf0
  402a98:	00401849 	.word	0x00401849
  402a9c:	20400d00 	.word	0x20400d00
  402aa0:	00402869 	.word	0x00402869
  402aa4:	00402701 	.word	0x00402701
  402aa8:	e000ed04 	.word	0xe000ed04
  402aac:	00401a89 	.word	0x00401a89

00402ab0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402ab0:	4b2d      	ldr	r3, [pc, #180]	; (402b68 <vTaskSwitchContext+0xb8>)
  402ab2:	681b      	ldr	r3, [r3, #0]
  402ab4:	2b00      	cmp	r3, #0
  402ab6:	d12c      	bne.n	402b12 <vTaskSwitchContext+0x62>
{
  402ab8:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402aba:	2200      	movs	r2, #0
  402abc:	4b2b      	ldr	r3, [pc, #172]	; (402b6c <vTaskSwitchContext+0xbc>)
  402abe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402ac0:	4b2b      	ldr	r3, [pc, #172]	; (402b70 <vTaskSwitchContext+0xc0>)
  402ac2:	681b      	ldr	r3, [r3, #0]
  402ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ac6:	681a      	ldr	r2, [r3, #0]
  402ac8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402acc:	d103      	bne.n	402ad6 <vTaskSwitchContext+0x26>
  402ace:	685a      	ldr	r2, [r3, #4]
  402ad0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ad4:	d021      	beq.n	402b1a <vTaskSwitchContext+0x6a>
  402ad6:	4b26      	ldr	r3, [pc, #152]	; (402b70 <vTaskSwitchContext+0xc0>)
  402ad8:	6818      	ldr	r0, [r3, #0]
  402ada:	6819      	ldr	r1, [r3, #0]
  402adc:	3134      	adds	r1, #52	; 0x34
  402ade:	4b25      	ldr	r3, [pc, #148]	; (402b74 <vTaskSwitchContext+0xc4>)
  402ae0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402ae2:	4b25      	ldr	r3, [pc, #148]	; (402b78 <vTaskSwitchContext+0xc8>)
  402ae4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402ae6:	fab3 f383 	clz	r3, r3
  402aea:	b2db      	uxtb	r3, r3
  402aec:	f1c3 031f 	rsb	r3, r3, #31
  402af0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402af4:	4a21      	ldr	r2, [pc, #132]	; (402b7c <vTaskSwitchContext+0xcc>)
  402af6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402afa:	b9ba      	cbnz	r2, 402b2c <vTaskSwitchContext+0x7c>
	__asm volatile
  402afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b00:	b672      	cpsid	i
  402b02:	f383 8811 	msr	BASEPRI, r3
  402b06:	f3bf 8f6f 	isb	sy
  402b0a:	f3bf 8f4f 	dsb	sy
  402b0e:	b662      	cpsie	i
  402b10:	e7fe      	b.n	402b10 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402b12:	2201      	movs	r2, #1
  402b14:	4b15      	ldr	r3, [pc, #84]	; (402b6c <vTaskSwitchContext+0xbc>)
  402b16:	601a      	str	r2, [r3, #0]
  402b18:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402b1a:	689a      	ldr	r2, [r3, #8]
  402b1c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402b20:	d1d9      	bne.n	402ad6 <vTaskSwitchContext+0x26>
  402b22:	68db      	ldr	r3, [r3, #12]
  402b24:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402b28:	d1d5      	bne.n	402ad6 <vTaskSwitchContext+0x26>
  402b2a:	e7da      	b.n	402ae2 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402b2c:	4a13      	ldr	r2, [pc, #76]	; (402b7c <vTaskSwitchContext+0xcc>)
  402b2e:	0099      	lsls	r1, r3, #2
  402b30:	18c8      	adds	r0, r1, r3
  402b32:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402b36:	6844      	ldr	r4, [r0, #4]
  402b38:	6864      	ldr	r4, [r4, #4]
  402b3a:	6044      	str	r4, [r0, #4]
  402b3c:	4419      	add	r1, r3
  402b3e:	4602      	mov	r2, r0
  402b40:	3208      	adds	r2, #8
  402b42:	4294      	cmp	r4, r2
  402b44:	d009      	beq.n	402b5a <vTaskSwitchContext+0xaa>
  402b46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b4a:	4a0c      	ldr	r2, [pc, #48]	; (402b7c <vTaskSwitchContext+0xcc>)
  402b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402b50:	685b      	ldr	r3, [r3, #4]
  402b52:	68da      	ldr	r2, [r3, #12]
  402b54:	4b06      	ldr	r3, [pc, #24]	; (402b70 <vTaskSwitchContext+0xc0>)
  402b56:	601a      	str	r2, [r3, #0]
  402b58:	bd10      	pop	{r4, pc}
  402b5a:	6860      	ldr	r0, [r4, #4]
  402b5c:	4a07      	ldr	r2, [pc, #28]	; (402b7c <vTaskSwitchContext+0xcc>)
  402b5e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402b62:	6050      	str	r0, [r2, #4]
  402b64:	e7ef      	b.n	402b46 <vTaskSwitchContext+0x96>
  402b66:	bf00      	nop
  402b68:	20400cf8 	.word	0x20400cf8
  402b6c:	20400d7c 	.word	0x20400d7c
  402b70:	20400c80 	.word	0x20400c80
  402b74:	00403759 	.word	0x00403759
  402b78:	20400d04 	.word	0x20400d04
  402b7c:	20400c8c 	.word	0x20400c8c

00402b80 <vTaskPlaceOnEventList>:
{
  402b80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402b82:	b1e0      	cbz	r0, 402bbe <vTaskPlaceOnEventList+0x3e>
  402b84:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402b86:	4d17      	ldr	r5, [pc, #92]	; (402be4 <vTaskPlaceOnEventList+0x64>)
  402b88:	6829      	ldr	r1, [r5, #0]
  402b8a:	3118      	adds	r1, #24
  402b8c:	4b16      	ldr	r3, [pc, #88]	; (402be8 <vTaskPlaceOnEventList+0x68>)
  402b8e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b90:	6828      	ldr	r0, [r5, #0]
  402b92:	3004      	adds	r0, #4
  402b94:	4b15      	ldr	r3, [pc, #84]	; (402bec <vTaskPlaceOnEventList+0x6c>)
  402b96:	4798      	blx	r3
  402b98:	b940      	cbnz	r0, 402bac <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402b9a:	682a      	ldr	r2, [r5, #0]
  402b9c:	4914      	ldr	r1, [pc, #80]	; (402bf0 <vTaskPlaceOnEventList+0x70>)
  402b9e:	680b      	ldr	r3, [r1, #0]
  402ba0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402ba2:	2201      	movs	r2, #1
  402ba4:	4082      	lsls	r2, r0
  402ba6:	ea23 0302 	bic.w	r3, r3, r2
  402baa:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402bac:	f1b4 3fff 	cmp.w	r4, #4294967295
  402bb0:	d010      	beq.n	402bd4 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402bb2:	4b10      	ldr	r3, [pc, #64]	; (402bf4 <vTaskPlaceOnEventList+0x74>)
  402bb4:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402bb6:	4420      	add	r0, r4
  402bb8:	4b0f      	ldr	r3, [pc, #60]	; (402bf8 <vTaskPlaceOnEventList+0x78>)
  402bba:	4798      	blx	r3
  402bbc:	bd38      	pop	{r3, r4, r5, pc}
  402bbe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bc2:	b672      	cpsid	i
  402bc4:	f383 8811 	msr	BASEPRI, r3
  402bc8:	f3bf 8f6f 	isb	sy
  402bcc:	f3bf 8f4f 	dsb	sy
  402bd0:	b662      	cpsie	i
  402bd2:	e7fe      	b.n	402bd2 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402bd4:	4b03      	ldr	r3, [pc, #12]	; (402be4 <vTaskPlaceOnEventList+0x64>)
  402bd6:	6819      	ldr	r1, [r3, #0]
  402bd8:	3104      	adds	r1, #4
  402bda:	4808      	ldr	r0, [pc, #32]	; (402bfc <vTaskPlaceOnEventList+0x7c>)
  402bdc:	4b08      	ldr	r3, [pc, #32]	; (402c00 <vTaskPlaceOnEventList+0x80>)
  402bde:	4798      	blx	r3
  402be0:	bd38      	pop	{r3, r4, r5, pc}
  402be2:	bf00      	nop
  402be4:	20400c80 	.word	0x20400c80
  402be8:	004016e5 	.word	0x004016e5
  402bec:	00401719 	.word	0x00401719
  402bf0:	20400d04 	.word	0x20400d04
  402bf4:	20400d78 	.word	0x20400d78
  402bf8:	004023e5 	.word	0x004023e5
  402bfc:	20400d50 	.word	0x20400d50
  402c00:	004016cd 	.word	0x004016cd

00402c04 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402c04:	b1e8      	cbz	r0, 402c42 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402c06:	b570      	push	{r4, r5, r6, lr}
  402c08:	4615      	mov	r5, r2
  402c0a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402c0c:	4e16      	ldr	r6, [pc, #88]	; (402c68 <vTaskPlaceOnEventListRestricted+0x64>)
  402c0e:	6831      	ldr	r1, [r6, #0]
  402c10:	3118      	adds	r1, #24
  402c12:	4b16      	ldr	r3, [pc, #88]	; (402c6c <vTaskPlaceOnEventListRestricted+0x68>)
  402c14:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c16:	6830      	ldr	r0, [r6, #0]
  402c18:	3004      	adds	r0, #4
  402c1a:	4b15      	ldr	r3, [pc, #84]	; (402c70 <vTaskPlaceOnEventListRestricted+0x6c>)
  402c1c:	4798      	blx	r3
  402c1e:	b940      	cbnz	r0, 402c32 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402c20:	6832      	ldr	r2, [r6, #0]
  402c22:	4914      	ldr	r1, [pc, #80]	; (402c74 <vTaskPlaceOnEventListRestricted+0x70>)
  402c24:	680b      	ldr	r3, [r1, #0]
  402c26:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402c28:	2201      	movs	r2, #1
  402c2a:	4082      	lsls	r2, r0
  402c2c:	ea23 0302 	bic.w	r3, r3, r2
  402c30:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402c32:	2d01      	cmp	r5, #1
  402c34:	d010      	beq.n	402c58 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402c36:	4b10      	ldr	r3, [pc, #64]	; (402c78 <vTaskPlaceOnEventListRestricted+0x74>)
  402c38:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402c3a:	4420      	add	r0, r4
  402c3c:	4b0f      	ldr	r3, [pc, #60]	; (402c7c <vTaskPlaceOnEventListRestricted+0x78>)
  402c3e:	4798      	blx	r3
  402c40:	bd70      	pop	{r4, r5, r6, pc}
  402c42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c46:	b672      	cpsid	i
  402c48:	f383 8811 	msr	BASEPRI, r3
  402c4c:	f3bf 8f6f 	isb	sy
  402c50:	f3bf 8f4f 	dsb	sy
  402c54:	b662      	cpsie	i
  402c56:	e7fe      	b.n	402c56 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402c58:	4b03      	ldr	r3, [pc, #12]	; (402c68 <vTaskPlaceOnEventListRestricted+0x64>)
  402c5a:	6819      	ldr	r1, [r3, #0]
  402c5c:	3104      	adds	r1, #4
  402c5e:	4808      	ldr	r0, [pc, #32]	; (402c80 <vTaskPlaceOnEventListRestricted+0x7c>)
  402c60:	4b02      	ldr	r3, [pc, #8]	; (402c6c <vTaskPlaceOnEventListRestricted+0x68>)
  402c62:	4798      	blx	r3
  402c64:	bd70      	pop	{r4, r5, r6, pc}
  402c66:	bf00      	nop
  402c68:	20400c80 	.word	0x20400c80
  402c6c:	004016cd 	.word	0x004016cd
  402c70:	00401719 	.word	0x00401719
  402c74:	20400d04 	.word	0x20400d04
  402c78:	20400d78 	.word	0x20400d78
  402c7c:	004023e5 	.word	0x004023e5
  402c80:	20400d50 	.word	0x20400d50

00402c84 <xTaskRemoveFromEventList>:
{
  402c84:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402c86:	68c3      	ldr	r3, [r0, #12]
  402c88:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402c8a:	b324      	cbz	r4, 402cd6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402c8c:	f104 0518 	add.w	r5, r4, #24
  402c90:	4628      	mov	r0, r5
  402c92:	4b1a      	ldr	r3, [pc, #104]	; (402cfc <xTaskRemoveFromEventList+0x78>)
  402c94:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402c96:	4b1a      	ldr	r3, [pc, #104]	; (402d00 <xTaskRemoveFromEventList+0x7c>)
  402c98:	681b      	ldr	r3, [r3, #0]
  402c9a:	bb3b      	cbnz	r3, 402cec <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402c9c:	1d25      	adds	r5, r4, #4
  402c9e:	4628      	mov	r0, r5
  402ca0:	4b16      	ldr	r3, [pc, #88]	; (402cfc <xTaskRemoveFromEventList+0x78>)
  402ca2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402ca4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402ca6:	4a17      	ldr	r2, [pc, #92]	; (402d04 <xTaskRemoveFromEventList+0x80>)
  402ca8:	6811      	ldr	r1, [r2, #0]
  402caa:	2301      	movs	r3, #1
  402cac:	4083      	lsls	r3, r0
  402cae:	430b      	orrs	r3, r1
  402cb0:	6013      	str	r3, [r2, #0]
  402cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402cb6:	4629      	mov	r1, r5
  402cb8:	4b13      	ldr	r3, [pc, #76]	; (402d08 <xTaskRemoveFromEventList+0x84>)
  402cba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402cbe:	4b13      	ldr	r3, [pc, #76]	; (402d0c <xTaskRemoveFromEventList+0x88>)
  402cc0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402cc2:	4b13      	ldr	r3, [pc, #76]	; (402d10 <xTaskRemoveFromEventList+0x8c>)
  402cc4:	681b      	ldr	r3, [r3, #0]
  402cc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cca:	429a      	cmp	r2, r3
  402ccc:	d913      	bls.n	402cf6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402cce:	2001      	movs	r0, #1
  402cd0:	4b10      	ldr	r3, [pc, #64]	; (402d14 <xTaskRemoveFromEventList+0x90>)
  402cd2:	6018      	str	r0, [r3, #0]
  402cd4:	bd38      	pop	{r3, r4, r5, pc}
  402cd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cda:	b672      	cpsid	i
  402cdc:	f383 8811 	msr	BASEPRI, r3
  402ce0:	f3bf 8f6f 	isb	sy
  402ce4:	f3bf 8f4f 	dsb	sy
  402ce8:	b662      	cpsie	i
  402cea:	e7fe      	b.n	402cea <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402cec:	4629      	mov	r1, r5
  402cee:	480a      	ldr	r0, [pc, #40]	; (402d18 <xTaskRemoveFromEventList+0x94>)
  402cf0:	4b06      	ldr	r3, [pc, #24]	; (402d0c <xTaskRemoveFromEventList+0x88>)
  402cf2:	4798      	blx	r3
  402cf4:	e7e5      	b.n	402cc2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402cf6:	2000      	movs	r0, #0
}
  402cf8:	bd38      	pop	{r3, r4, r5, pc}
  402cfa:	bf00      	nop
  402cfc:	00401719 	.word	0x00401719
  402d00:	20400cf8 	.word	0x20400cf8
  402d04:	20400d04 	.word	0x20400d04
  402d08:	20400c8c 	.word	0x20400c8c
  402d0c:	004016cd 	.word	0x004016cd
  402d10:	20400c80 	.word	0x20400c80
  402d14:	20400d7c 	.word	0x20400d7c
  402d18:	20400d38 	.word	0x20400d38

00402d1c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402d1c:	b130      	cbz	r0, 402d2c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402d1e:	4a09      	ldr	r2, [pc, #36]	; (402d44 <vTaskSetTimeOutState+0x28>)
  402d20:	6812      	ldr	r2, [r2, #0]
  402d22:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402d24:	4a08      	ldr	r2, [pc, #32]	; (402d48 <vTaskSetTimeOutState+0x2c>)
  402d26:	6812      	ldr	r2, [r2, #0]
  402d28:	6042      	str	r2, [r0, #4]
  402d2a:	4770      	bx	lr
  402d2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d30:	b672      	cpsid	i
  402d32:	f383 8811 	msr	BASEPRI, r3
  402d36:	f3bf 8f6f 	isb	sy
  402d3a:	f3bf 8f4f 	dsb	sy
  402d3e:	b662      	cpsie	i
  402d40:	e7fe      	b.n	402d40 <vTaskSetTimeOutState+0x24>
  402d42:	bf00      	nop
  402d44:	20400d34 	.word	0x20400d34
  402d48:	20400d78 	.word	0x20400d78

00402d4c <xTaskCheckForTimeOut>:
{
  402d4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402d4e:	b1c0      	cbz	r0, 402d82 <xTaskCheckForTimeOut+0x36>
  402d50:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402d52:	b309      	cbz	r1, 402d98 <xTaskCheckForTimeOut+0x4c>
  402d54:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402d56:	4b1d      	ldr	r3, [pc, #116]	; (402dcc <xTaskCheckForTimeOut+0x80>)
  402d58:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402d5a:	4b1d      	ldr	r3, [pc, #116]	; (402dd0 <xTaskCheckForTimeOut+0x84>)
  402d5c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402d5e:	682b      	ldr	r3, [r5, #0]
  402d60:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d64:	d02e      	beq.n	402dc4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402d66:	491b      	ldr	r1, [pc, #108]	; (402dd4 <xTaskCheckForTimeOut+0x88>)
  402d68:	6809      	ldr	r1, [r1, #0]
  402d6a:	6820      	ldr	r0, [r4, #0]
  402d6c:	4288      	cmp	r0, r1
  402d6e:	d002      	beq.n	402d76 <xTaskCheckForTimeOut+0x2a>
  402d70:	6861      	ldr	r1, [r4, #4]
  402d72:	428a      	cmp	r2, r1
  402d74:	d228      	bcs.n	402dc8 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402d76:	6861      	ldr	r1, [r4, #4]
  402d78:	1a50      	subs	r0, r2, r1
  402d7a:	4283      	cmp	r3, r0
  402d7c:	d817      	bhi.n	402dae <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402d7e:	2401      	movs	r4, #1
  402d80:	e01c      	b.n	402dbc <xTaskCheckForTimeOut+0x70>
  402d82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d86:	b672      	cpsid	i
  402d88:	f383 8811 	msr	BASEPRI, r3
  402d8c:	f3bf 8f6f 	isb	sy
  402d90:	f3bf 8f4f 	dsb	sy
  402d94:	b662      	cpsie	i
  402d96:	e7fe      	b.n	402d96 <xTaskCheckForTimeOut+0x4a>
  402d98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d9c:	b672      	cpsid	i
  402d9e:	f383 8811 	msr	BASEPRI, r3
  402da2:	f3bf 8f6f 	isb	sy
  402da6:	f3bf 8f4f 	dsb	sy
  402daa:	b662      	cpsie	i
  402dac:	e7fe      	b.n	402dac <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402dae:	1a9b      	subs	r3, r3, r2
  402db0:	440b      	add	r3, r1
  402db2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402db4:	4620      	mov	r0, r4
  402db6:	4b08      	ldr	r3, [pc, #32]	; (402dd8 <xTaskCheckForTimeOut+0x8c>)
  402db8:	4798      	blx	r3
			xReturn = pdFALSE;
  402dba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402dbc:	4b07      	ldr	r3, [pc, #28]	; (402ddc <xTaskCheckForTimeOut+0x90>)
  402dbe:	4798      	blx	r3
}
  402dc0:	4620      	mov	r0, r4
  402dc2:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402dc4:	2400      	movs	r4, #0
  402dc6:	e7f9      	b.n	402dbc <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402dc8:	2401      	movs	r4, #1
  402dca:	e7f7      	b.n	402dbc <xTaskCheckForTimeOut+0x70>
  402dcc:	004017fd 	.word	0x004017fd
  402dd0:	20400d78 	.word	0x20400d78
  402dd4:	20400d34 	.word	0x20400d34
  402dd8:	00402d1d 	.word	0x00402d1d
  402ddc:	00401849 	.word	0x00401849

00402de0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402de0:	2201      	movs	r2, #1
  402de2:	4b01      	ldr	r3, [pc, #4]	; (402de8 <vTaskMissedYield+0x8>)
  402de4:	601a      	str	r2, [r3, #0]
  402de6:	4770      	bx	lr
  402de8:	20400d7c 	.word	0x20400d7c

00402dec <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402dec:	4b05      	ldr	r3, [pc, #20]	; (402e04 <xTaskGetSchedulerState+0x18>)
  402dee:	681b      	ldr	r3, [r3, #0]
  402df0:	b133      	cbz	r3, 402e00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402df2:	4b05      	ldr	r3, [pc, #20]	; (402e08 <xTaskGetSchedulerState+0x1c>)
  402df4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402df6:	2b00      	cmp	r3, #0
  402df8:	bf0c      	ite	eq
  402dfa:	2002      	moveq	r0, #2
  402dfc:	2000      	movne	r0, #0
  402dfe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402e00:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402e02:	4770      	bx	lr
  402e04:	20400d4c 	.word	0x20400d4c
  402e08:	20400cf8 	.word	0x20400cf8

00402e0c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402e0c:	2800      	cmp	r0, #0
  402e0e:	d044      	beq.n	402e9a <vTaskPriorityInherit+0x8e>
	{
  402e10:	b538      	push	{r3, r4, r5, lr}
  402e12:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402e14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402e16:	4921      	ldr	r1, [pc, #132]	; (402e9c <vTaskPriorityInherit+0x90>)
  402e18:	6809      	ldr	r1, [r1, #0]
  402e1a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e1c:	428a      	cmp	r2, r1
  402e1e:	d214      	bcs.n	402e4a <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402e20:	6981      	ldr	r1, [r0, #24]
  402e22:	2900      	cmp	r1, #0
  402e24:	db05      	blt.n	402e32 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e26:	491d      	ldr	r1, [pc, #116]	; (402e9c <vTaskPriorityInherit+0x90>)
  402e28:	6809      	ldr	r1, [r1, #0]
  402e2a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e2c:	f1c1 0105 	rsb	r1, r1, #5
  402e30:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402e32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402e36:	491a      	ldr	r1, [pc, #104]	; (402ea0 <vTaskPriorityInherit+0x94>)
  402e38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402e3c:	6961      	ldr	r1, [r4, #20]
  402e3e:	4291      	cmp	r1, r2
  402e40:	d004      	beq.n	402e4c <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e42:	4a16      	ldr	r2, [pc, #88]	; (402e9c <vTaskPriorityInherit+0x90>)
  402e44:	6812      	ldr	r2, [r2, #0]
  402e46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402e48:	62e2      	str	r2, [r4, #44]	; 0x2c
  402e4a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e4c:	1d25      	adds	r5, r4, #4
  402e4e:	4628      	mov	r0, r5
  402e50:	4b14      	ldr	r3, [pc, #80]	; (402ea4 <vTaskPriorityInherit+0x98>)
  402e52:	4798      	blx	r3
  402e54:	b970      	cbnz	r0, 402e74 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e58:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402e5c:	4a10      	ldr	r2, [pc, #64]	; (402ea0 <vTaskPriorityInherit+0x94>)
  402e5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402e62:	b93a      	cbnz	r2, 402e74 <vTaskPriorityInherit+0x68>
  402e64:	4810      	ldr	r0, [pc, #64]	; (402ea8 <vTaskPriorityInherit+0x9c>)
  402e66:	6802      	ldr	r2, [r0, #0]
  402e68:	2101      	movs	r1, #1
  402e6a:	fa01 f303 	lsl.w	r3, r1, r3
  402e6e:	ea22 0303 	bic.w	r3, r2, r3
  402e72:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e74:	4b09      	ldr	r3, [pc, #36]	; (402e9c <vTaskPriorityInherit+0x90>)
  402e76:	681b      	ldr	r3, [r3, #0]
  402e78:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402e7a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402e7c:	4a0a      	ldr	r2, [pc, #40]	; (402ea8 <vTaskPriorityInherit+0x9c>)
  402e7e:	6811      	ldr	r1, [r2, #0]
  402e80:	2301      	movs	r3, #1
  402e82:	4083      	lsls	r3, r0
  402e84:	430b      	orrs	r3, r1
  402e86:	6013      	str	r3, [r2, #0]
  402e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e8c:	4629      	mov	r1, r5
  402e8e:	4b04      	ldr	r3, [pc, #16]	; (402ea0 <vTaskPriorityInherit+0x94>)
  402e90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402e94:	4b05      	ldr	r3, [pc, #20]	; (402eac <vTaskPriorityInherit+0xa0>)
  402e96:	4798      	blx	r3
  402e98:	bd38      	pop	{r3, r4, r5, pc}
  402e9a:	4770      	bx	lr
  402e9c:	20400c80 	.word	0x20400c80
  402ea0:	20400c8c 	.word	0x20400c8c
  402ea4:	00401719 	.word	0x00401719
  402ea8:	20400d04 	.word	0x20400d04
  402eac:	004016cd 	.word	0x004016cd

00402eb0 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402eb0:	2800      	cmp	r0, #0
  402eb2:	d04d      	beq.n	402f50 <xTaskPriorityDisinherit+0xa0>
	{
  402eb4:	b538      	push	{r3, r4, r5, lr}
  402eb6:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402eb8:	4a27      	ldr	r2, [pc, #156]	; (402f58 <xTaskPriorityDisinherit+0xa8>)
  402eba:	6812      	ldr	r2, [r2, #0]
  402ebc:	4290      	cmp	r0, r2
  402ebe:	d00a      	beq.n	402ed6 <xTaskPriorityDisinherit+0x26>
  402ec0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ec4:	b672      	cpsid	i
  402ec6:	f383 8811 	msr	BASEPRI, r3
  402eca:	f3bf 8f6f 	isb	sy
  402ece:	f3bf 8f4f 	dsb	sy
  402ed2:	b662      	cpsie	i
  402ed4:	e7fe      	b.n	402ed4 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402ed6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402ed8:	b952      	cbnz	r2, 402ef0 <xTaskPriorityDisinherit+0x40>
  402eda:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ede:	b672      	cpsid	i
  402ee0:	f383 8811 	msr	BASEPRI, r3
  402ee4:	f3bf 8f6f 	isb	sy
  402ee8:	f3bf 8f4f 	dsb	sy
  402eec:	b662      	cpsie	i
  402eee:	e7fe      	b.n	402eee <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402ef0:	3a01      	subs	r2, #1
  402ef2:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402ef4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402ef6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402ef8:	4288      	cmp	r0, r1
  402efa:	d02b      	beq.n	402f54 <xTaskPriorityDisinherit+0xa4>
  402efc:	bb52      	cbnz	r2, 402f54 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402efe:	1d25      	adds	r5, r4, #4
  402f00:	4628      	mov	r0, r5
  402f02:	4b16      	ldr	r3, [pc, #88]	; (402f5c <xTaskPriorityDisinherit+0xac>)
  402f04:	4798      	blx	r3
  402f06:	b968      	cbnz	r0, 402f24 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402f08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402f0a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402f0e:	4b14      	ldr	r3, [pc, #80]	; (402f60 <xTaskPriorityDisinherit+0xb0>)
  402f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402f14:	b933      	cbnz	r3, 402f24 <xTaskPriorityDisinherit+0x74>
  402f16:	4813      	ldr	r0, [pc, #76]	; (402f64 <xTaskPriorityDisinherit+0xb4>)
  402f18:	6803      	ldr	r3, [r0, #0]
  402f1a:	2201      	movs	r2, #1
  402f1c:	408a      	lsls	r2, r1
  402f1e:	ea23 0302 	bic.w	r3, r3, r2
  402f22:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402f24:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402f26:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402f28:	f1c0 0305 	rsb	r3, r0, #5
  402f2c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402f2e:	4a0d      	ldr	r2, [pc, #52]	; (402f64 <xTaskPriorityDisinherit+0xb4>)
  402f30:	6811      	ldr	r1, [r2, #0]
  402f32:	2401      	movs	r4, #1
  402f34:	fa04 f300 	lsl.w	r3, r4, r0
  402f38:	430b      	orrs	r3, r1
  402f3a:	6013      	str	r3, [r2, #0]
  402f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f40:	4629      	mov	r1, r5
  402f42:	4b07      	ldr	r3, [pc, #28]	; (402f60 <xTaskPriorityDisinherit+0xb0>)
  402f44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f48:	4b07      	ldr	r3, [pc, #28]	; (402f68 <xTaskPriorityDisinherit+0xb8>)
  402f4a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402f4c:	4620      	mov	r0, r4
  402f4e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402f50:	2000      	movs	r0, #0
  402f52:	4770      	bx	lr
  402f54:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402f56:	bd38      	pop	{r3, r4, r5, pc}
  402f58:	20400c80 	.word	0x20400c80
  402f5c:	00401719 	.word	0x00401719
  402f60:	20400c8c 	.word	0x20400c8c
  402f64:	20400d04 	.word	0x20400d04
  402f68:	004016cd 	.word	0x004016cd

00402f6c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402f6c:	4b05      	ldr	r3, [pc, #20]	; (402f84 <pvTaskIncrementMutexHeldCount+0x18>)
  402f6e:	681b      	ldr	r3, [r3, #0]
  402f70:	b123      	cbz	r3, 402f7c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402f72:	4b04      	ldr	r3, [pc, #16]	; (402f84 <pvTaskIncrementMutexHeldCount+0x18>)
  402f74:	681a      	ldr	r2, [r3, #0]
  402f76:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402f78:	3301      	adds	r3, #1
  402f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402f7c:	4b01      	ldr	r3, [pc, #4]	; (402f84 <pvTaskIncrementMutexHeldCount+0x18>)
  402f7e:	6818      	ldr	r0, [r3, #0]
	}
  402f80:	4770      	bx	lr
  402f82:	bf00      	nop
  402f84:	20400c80 	.word	0x20400c80

00402f88 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402f88:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402f8a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f8c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402f8e:	4291      	cmp	r1, r2
  402f90:	d80c      	bhi.n	402fac <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402f92:	1ad2      	subs	r2, r2, r3
  402f94:	6983      	ldr	r3, [r0, #24]
  402f96:	429a      	cmp	r2, r3
  402f98:	d301      	bcc.n	402f9e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402f9a:	2001      	movs	r0, #1
  402f9c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402f9e:	1d01      	adds	r1, r0, #4
  402fa0:	4b09      	ldr	r3, [pc, #36]	; (402fc8 <prvInsertTimerInActiveList+0x40>)
  402fa2:	6818      	ldr	r0, [r3, #0]
  402fa4:	4b09      	ldr	r3, [pc, #36]	; (402fcc <prvInsertTimerInActiveList+0x44>)
  402fa6:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402fa8:	2000      	movs	r0, #0
  402faa:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402fac:	429a      	cmp	r2, r3
  402fae:	d203      	bcs.n	402fb8 <prvInsertTimerInActiveList+0x30>
  402fb0:	4299      	cmp	r1, r3
  402fb2:	d301      	bcc.n	402fb8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402fb4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402fb6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402fb8:	1d01      	adds	r1, r0, #4
  402fba:	4b05      	ldr	r3, [pc, #20]	; (402fd0 <prvInsertTimerInActiveList+0x48>)
  402fbc:	6818      	ldr	r0, [r3, #0]
  402fbe:	4b03      	ldr	r3, [pc, #12]	; (402fcc <prvInsertTimerInActiveList+0x44>)
  402fc0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402fc2:	2000      	movs	r0, #0
  402fc4:	bd08      	pop	{r3, pc}
  402fc6:	bf00      	nop
  402fc8:	20400d84 	.word	0x20400d84
  402fcc:	004016e5 	.word	0x004016e5
  402fd0:	20400d80 	.word	0x20400d80

00402fd4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402fd4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402fd6:	4b15      	ldr	r3, [pc, #84]	; (40302c <prvCheckForValidListAndQueue+0x58>)
  402fd8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402fda:	4b15      	ldr	r3, [pc, #84]	; (403030 <prvCheckForValidListAndQueue+0x5c>)
  402fdc:	681b      	ldr	r3, [r3, #0]
  402fde:	b113      	cbz	r3, 402fe6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402fe0:	4b14      	ldr	r3, [pc, #80]	; (403034 <prvCheckForValidListAndQueue+0x60>)
  402fe2:	4798      	blx	r3
  402fe4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402fe6:	4d14      	ldr	r5, [pc, #80]	; (403038 <prvCheckForValidListAndQueue+0x64>)
  402fe8:	4628      	mov	r0, r5
  402fea:	4e14      	ldr	r6, [pc, #80]	; (40303c <prvCheckForValidListAndQueue+0x68>)
  402fec:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402fee:	4c14      	ldr	r4, [pc, #80]	; (403040 <prvCheckForValidListAndQueue+0x6c>)
  402ff0:	4620      	mov	r0, r4
  402ff2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402ff4:	4b13      	ldr	r3, [pc, #76]	; (403044 <prvCheckForValidListAndQueue+0x70>)
  402ff6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402ff8:	4b13      	ldr	r3, [pc, #76]	; (403048 <prvCheckForValidListAndQueue+0x74>)
  402ffa:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402ffc:	2200      	movs	r2, #0
  402ffe:	2110      	movs	r1, #16
  403000:	2005      	movs	r0, #5
  403002:	4b12      	ldr	r3, [pc, #72]	; (40304c <prvCheckForValidListAndQueue+0x78>)
  403004:	4798      	blx	r3
  403006:	4b0a      	ldr	r3, [pc, #40]	; (403030 <prvCheckForValidListAndQueue+0x5c>)
  403008:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40300a:	b118      	cbz	r0, 403014 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40300c:	4910      	ldr	r1, [pc, #64]	; (403050 <prvCheckForValidListAndQueue+0x7c>)
  40300e:	4b11      	ldr	r3, [pc, #68]	; (403054 <prvCheckForValidListAndQueue+0x80>)
  403010:	4798      	blx	r3
  403012:	e7e5      	b.n	402fe0 <prvCheckForValidListAndQueue+0xc>
  403014:	f04f 0380 	mov.w	r3, #128	; 0x80
  403018:	b672      	cpsid	i
  40301a:	f383 8811 	msr	BASEPRI, r3
  40301e:	f3bf 8f6f 	isb	sy
  403022:	f3bf 8f4f 	dsb	sy
  403026:	b662      	cpsie	i
  403028:	e7fe      	b.n	403028 <prvCheckForValidListAndQueue+0x54>
  40302a:	bf00      	nop
  40302c:	004017fd 	.word	0x004017fd
  403030:	20400db4 	.word	0x20400db4
  403034:	00401849 	.word	0x00401849
  403038:	20400d88 	.word	0x20400d88
  40303c:	004016b1 	.word	0x004016b1
  403040:	20400d9c 	.word	0x20400d9c
  403044:	20400d80 	.word	0x20400d80
  403048:	20400d84 	.word	0x20400d84
  40304c:	00401d1d 	.word	0x00401d1d
  403050:	0040aff8 	.word	0x0040aff8
  403054:	0040232d 	.word	0x0040232d

00403058 <xTimerCreateTimerTask>:
{
  403058:	b510      	push	{r4, lr}
  40305a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40305c:	4b0f      	ldr	r3, [pc, #60]	; (40309c <xTimerCreateTimerTask+0x44>)
  40305e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403060:	4b0f      	ldr	r3, [pc, #60]	; (4030a0 <xTimerCreateTimerTask+0x48>)
  403062:	681b      	ldr	r3, [r3, #0]
  403064:	b173      	cbz	r3, 403084 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403066:	2300      	movs	r3, #0
  403068:	9303      	str	r3, [sp, #12]
  40306a:	9302      	str	r3, [sp, #8]
  40306c:	9301      	str	r3, [sp, #4]
  40306e:	2204      	movs	r2, #4
  403070:	9200      	str	r2, [sp, #0]
  403072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403076:	490b      	ldr	r1, [pc, #44]	; (4030a4 <xTimerCreateTimerTask+0x4c>)
  403078:	480b      	ldr	r0, [pc, #44]	; (4030a8 <xTimerCreateTimerTask+0x50>)
  40307a:	4c0c      	ldr	r4, [pc, #48]	; (4030ac <xTimerCreateTimerTask+0x54>)
  40307c:	47a0      	blx	r4
	configASSERT( xReturn );
  40307e:	b108      	cbz	r0, 403084 <xTimerCreateTimerTask+0x2c>
}
  403080:	b004      	add	sp, #16
  403082:	bd10      	pop	{r4, pc}
  403084:	f04f 0380 	mov.w	r3, #128	; 0x80
  403088:	b672      	cpsid	i
  40308a:	f383 8811 	msr	BASEPRI, r3
  40308e:	f3bf 8f6f 	isb	sy
  403092:	f3bf 8f4f 	dsb	sy
  403096:	b662      	cpsie	i
  403098:	e7fe      	b.n	403098 <xTimerCreateTimerTask+0x40>
  40309a:	bf00      	nop
  40309c:	00402fd5 	.word	0x00402fd5
  4030a0:	20400db4 	.word	0x20400db4
  4030a4:	0040b000 	.word	0x0040b000
  4030a8:	004031d9 	.word	0x004031d9
  4030ac:	0040243d 	.word	0x0040243d

004030b0 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4030b0:	b1d8      	cbz	r0, 4030ea <xTimerGenericCommand+0x3a>
{
  4030b2:	b530      	push	{r4, r5, lr}
  4030b4:	b085      	sub	sp, #20
  4030b6:	4615      	mov	r5, r2
  4030b8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4030ba:	4a15      	ldr	r2, [pc, #84]	; (403110 <xTimerGenericCommand+0x60>)
  4030bc:	6810      	ldr	r0, [r2, #0]
  4030be:	b320      	cbz	r0, 40310a <xTimerGenericCommand+0x5a>
  4030c0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4030c2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4030c4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4030c6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4030c8:	2905      	cmp	r1, #5
  4030ca:	dc19      	bgt.n	403100 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4030cc:	4b11      	ldr	r3, [pc, #68]	; (403114 <xTimerGenericCommand+0x64>)
  4030ce:	4798      	blx	r3
  4030d0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4030d2:	f04f 0300 	mov.w	r3, #0
  4030d6:	bf0c      	ite	eq
  4030d8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4030da:	461a      	movne	r2, r3
  4030dc:	4669      	mov	r1, sp
  4030de:	480c      	ldr	r0, [pc, #48]	; (403110 <xTimerGenericCommand+0x60>)
  4030e0:	6800      	ldr	r0, [r0, #0]
  4030e2:	4c0d      	ldr	r4, [pc, #52]	; (403118 <xTimerGenericCommand+0x68>)
  4030e4:	47a0      	blx	r4
}
  4030e6:	b005      	add	sp, #20
  4030e8:	bd30      	pop	{r4, r5, pc}
  4030ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030ee:	b672      	cpsid	i
  4030f0:	f383 8811 	msr	BASEPRI, r3
  4030f4:	f3bf 8f6f 	isb	sy
  4030f8:	f3bf 8f4f 	dsb	sy
  4030fc:	b662      	cpsie	i
  4030fe:	e7fe      	b.n	4030fe <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403100:	2300      	movs	r3, #0
  403102:	4669      	mov	r1, sp
  403104:	4c05      	ldr	r4, [pc, #20]	; (40311c <xTimerGenericCommand+0x6c>)
  403106:	47a0      	blx	r4
  403108:	e7ed      	b.n	4030e6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40310a:	2000      	movs	r0, #0
	return xReturn;
  40310c:	e7eb      	b.n	4030e6 <xTimerGenericCommand+0x36>
  40310e:	bf00      	nop
  403110:	20400db4 	.word	0x20400db4
  403114:	00402ded 	.word	0x00402ded
  403118:	00401d99 	.word	0x00401d99
  40311c:	00401f7d 	.word	0x00401f7d

00403120 <prvSampleTimeNow>:
{
  403120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403124:	b082      	sub	sp, #8
  403126:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403128:	4b24      	ldr	r3, [pc, #144]	; (4031bc <prvSampleTimeNow+0x9c>)
  40312a:	4798      	blx	r3
  40312c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40312e:	4b24      	ldr	r3, [pc, #144]	; (4031c0 <prvSampleTimeNow+0xa0>)
  403130:	681b      	ldr	r3, [r3, #0]
  403132:	4298      	cmp	r0, r3
  403134:	d31b      	bcc.n	40316e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403136:	2300      	movs	r3, #0
  403138:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  40313c:	4b20      	ldr	r3, [pc, #128]	; (4031c0 <prvSampleTimeNow+0xa0>)
  40313e:	601f      	str	r7, [r3, #0]
}
  403140:	4638      	mov	r0, r7
  403142:	b002      	add	sp, #8
  403144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403148:	2100      	movs	r1, #0
  40314a:	9100      	str	r1, [sp, #0]
  40314c:	460b      	mov	r3, r1
  40314e:	4652      	mov	r2, sl
  403150:	4620      	mov	r0, r4
  403152:	4c1c      	ldr	r4, [pc, #112]	; (4031c4 <prvSampleTimeNow+0xa4>)
  403154:	47a0      	blx	r4
				configASSERT( xResult );
  403156:	b960      	cbnz	r0, 403172 <prvSampleTimeNow+0x52>
  403158:	f04f 0380 	mov.w	r3, #128	; 0x80
  40315c:	b672      	cpsid	i
  40315e:	f383 8811 	msr	BASEPRI, r3
  403162:	f3bf 8f6f 	isb	sy
  403166:	f3bf 8f4f 	dsb	sy
  40316a:	b662      	cpsie	i
  40316c:	e7fe      	b.n	40316c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40316e:	4d16      	ldr	r5, [pc, #88]	; (4031c8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403170:	4e16      	ldr	r6, [pc, #88]	; (4031cc <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403172:	682b      	ldr	r3, [r5, #0]
  403174:	681a      	ldr	r2, [r3, #0]
  403176:	b1c2      	cbz	r2, 4031aa <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403178:	68db      	ldr	r3, [r3, #12]
  40317a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40317e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403180:	f104 0904 	add.w	r9, r4, #4
  403184:	4648      	mov	r0, r9
  403186:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403188:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40318a:	4620      	mov	r0, r4
  40318c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40318e:	69e3      	ldr	r3, [r4, #28]
  403190:	2b01      	cmp	r3, #1
  403192:	d1ee      	bne.n	403172 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403194:	69a3      	ldr	r3, [r4, #24]
  403196:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403198:	459a      	cmp	sl, r3
  40319a:	d2d5      	bcs.n	403148 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40319c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40319e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4031a0:	4649      	mov	r1, r9
  4031a2:	6828      	ldr	r0, [r5, #0]
  4031a4:	4b0a      	ldr	r3, [pc, #40]	; (4031d0 <prvSampleTimeNow+0xb0>)
  4031a6:	4798      	blx	r3
  4031a8:	e7e3      	b.n	403172 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  4031aa:	4a0a      	ldr	r2, [pc, #40]	; (4031d4 <prvSampleTimeNow+0xb4>)
  4031ac:	6810      	ldr	r0, [r2, #0]
  4031ae:	4906      	ldr	r1, [pc, #24]	; (4031c8 <prvSampleTimeNow+0xa8>)
  4031b0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4031b2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4031b4:	2301      	movs	r3, #1
  4031b6:	f8c8 3000 	str.w	r3, [r8]
  4031ba:	e7bf      	b.n	40313c <prvSampleTimeNow+0x1c>
  4031bc:	00402711 	.word	0x00402711
  4031c0:	20400db0 	.word	0x20400db0
  4031c4:	004030b1 	.word	0x004030b1
  4031c8:	20400d80 	.word	0x20400d80
  4031cc:	00401719 	.word	0x00401719
  4031d0:	004016e5 	.word	0x004016e5
  4031d4:	20400d84 	.word	0x20400d84

004031d8 <prvTimerTask>:
{
  4031d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4031dc:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4031de:	4e75      	ldr	r6, [pc, #468]	; (4033b4 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4031e0:	4f75      	ldr	r7, [pc, #468]	; (4033b8 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4031e2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4033e0 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4031e6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4033e4 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4031ea:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4031ec:	681a      	ldr	r2, [r3, #0]
  4031ee:	2a00      	cmp	r2, #0
  4031f0:	f000 80ce 	beq.w	403390 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4031f4:	68db      	ldr	r3, [r3, #12]
  4031f6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4031f8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4031fa:	a804      	add	r0, sp, #16
  4031fc:	4b6f      	ldr	r3, [pc, #444]	; (4033bc <prvTimerTask+0x1e4>)
  4031fe:	4798      	blx	r3
  403200:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403202:	9b04      	ldr	r3, [sp, #16]
  403204:	2b00      	cmp	r3, #0
  403206:	d144      	bne.n	403292 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403208:	42a0      	cmp	r0, r4
  40320a:	d212      	bcs.n	403232 <prvTimerTask+0x5a>
  40320c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40320e:	1b61      	subs	r1, r4, r5
  403210:	4b6b      	ldr	r3, [pc, #428]	; (4033c0 <prvTimerTask+0x1e8>)
  403212:	6818      	ldr	r0, [r3, #0]
  403214:	4b6b      	ldr	r3, [pc, #428]	; (4033c4 <prvTimerTask+0x1ec>)
  403216:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403218:	4b6b      	ldr	r3, [pc, #428]	; (4033c8 <prvTimerTask+0x1f0>)
  40321a:	4798      	blx	r3
  40321c:	2800      	cmp	r0, #0
  40321e:	d13a      	bne.n	403296 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403224:	f8c9 3000 	str.w	r3, [r9]
  403228:	f3bf 8f4f 	dsb	sy
  40322c:	f3bf 8f6f 	isb	sy
  403230:	e031      	b.n	403296 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403232:	4b65      	ldr	r3, [pc, #404]	; (4033c8 <prvTimerTask+0x1f0>)
  403234:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403236:	6833      	ldr	r3, [r6, #0]
  403238:	68db      	ldr	r3, [r3, #12]
  40323a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40323e:	f10a 0004 	add.w	r0, sl, #4
  403242:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403244:	f8da 301c 	ldr.w	r3, [sl, #28]
  403248:	2b01      	cmp	r3, #1
  40324a:	d004      	beq.n	403256 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40324c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403250:	4650      	mov	r0, sl
  403252:	4798      	blx	r3
  403254:	e01f      	b.n	403296 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403256:	f8da 1018 	ldr.w	r1, [sl, #24]
  40325a:	4623      	mov	r3, r4
  40325c:	462a      	mov	r2, r5
  40325e:	4421      	add	r1, r4
  403260:	4650      	mov	r0, sl
  403262:	4d5a      	ldr	r5, [pc, #360]	; (4033cc <prvTimerTask+0x1f4>)
  403264:	47a8      	blx	r5
  403266:	2801      	cmp	r0, #1
  403268:	d1f0      	bne.n	40324c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40326a:	2100      	movs	r1, #0
  40326c:	9100      	str	r1, [sp, #0]
  40326e:	460b      	mov	r3, r1
  403270:	4622      	mov	r2, r4
  403272:	4650      	mov	r0, sl
  403274:	4c56      	ldr	r4, [pc, #344]	; (4033d0 <prvTimerTask+0x1f8>)
  403276:	47a0      	blx	r4
			configASSERT( xResult );
  403278:	2800      	cmp	r0, #0
  40327a:	d1e7      	bne.n	40324c <prvTimerTask+0x74>
  40327c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403280:	b672      	cpsid	i
  403282:	f383 8811 	msr	BASEPRI, r3
  403286:	f3bf 8f6f 	isb	sy
  40328a:	f3bf 8f4f 	dsb	sy
  40328e:	b662      	cpsie	i
  403290:	e7fe      	b.n	403290 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403292:	4b4d      	ldr	r3, [pc, #308]	; (4033c8 <prvTimerTask+0x1f0>)
  403294:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403296:	4d4a      	ldr	r5, [pc, #296]	; (4033c0 <prvTimerTask+0x1e8>)
  403298:	4c4e      	ldr	r4, [pc, #312]	; (4033d4 <prvTimerTask+0x1fc>)
  40329a:	e006      	b.n	4032aa <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40329c:	9907      	ldr	r1, [sp, #28]
  40329e:	9806      	ldr	r0, [sp, #24]
  4032a0:	9b05      	ldr	r3, [sp, #20]
  4032a2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4032a4:	9b04      	ldr	r3, [sp, #16]
  4032a6:	2b00      	cmp	r3, #0
  4032a8:	da09      	bge.n	4032be <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4032aa:	2300      	movs	r3, #0
  4032ac:	461a      	mov	r2, r3
  4032ae:	a904      	add	r1, sp, #16
  4032b0:	6828      	ldr	r0, [r5, #0]
  4032b2:	47a0      	blx	r4
  4032b4:	2800      	cmp	r0, #0
  4032b6:	d098      	beq.n	4031ea <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4032b8:	9b04      	ldr	r3, [sp, #16]
  4032ba:	2b00      	cmp	r3, #0
  4032bc:	dbee      	blt.n	40329c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4032be:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4032c2:	f8da 3014 	ldr.w	r3, [sl, #20]
  4032c6:	b113      	cbz	r3, 4032ce <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4032c8:	f10a 0004 	add.w	r0, sl, #4
  4032cc:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4032ce:	a803      	add	r0, sp, #12
  4032d0:	4b3a      	ldr	r3, [pc, #232]	; (4033bc <prvTimerTask+0x1e4>)
  4032d2:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4032d4:	9b04      	ldr	r3, [sp, #16]
  4032d6:	2b09      	cmp	r3, #9
  4032d8:	d8e7      	bhi.n	4032aa <prvTimerTask+0xd2>
  4032da:	a201      	add	r2, pc, #4	; (adr r2, 4032e0 <prvTimerTask+0x108>)
  4032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4032e0:	00403309 	.word	0x00403309
  4032e4:	00403309 	.word	0x00403309
  4032e8:	00403309 	.word	0x00403309
  4032ec:	004032ab 	.word	0x004032ab
  4032f0:	0040335d 	.word	0x0040335d
  4032f4:	00403389 	.word	0x00403389
  4032f8:	00403309 	.word	0x00403309
  4032fc:	00403309 	.word	0x00403309
  403300:	004032ab 	.word	0x004032ab
  403304:	0040335d 	.word	0x0040335d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403308:	9c05      	ldr	r4, [sp, #20]
  40330a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40330e:	4623      	mov	r3, r4
  403310:	4602      	mov	r2, r0
  403312:	4421      	add	r1, r4
  403314:	4650      	mov	r0, sl
  403316:	4c2d      	ldr	r4, [pc, #180]	; (4033cc <prvTimerTask+0x1f4>)
  403318:	47a0      	blx	r4
  40331a:	2801      	cmp	r0, #1
  40331c:	d1bc      	bne.n	403298 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40331e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403322:	4650      	mov	r0, sl
  403324:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403326:	f8da 301c 	ldr.w	r3, [sl, #28]
  40332a:	2b01      	cmp	r3, #1
  40332c:	d1b4      	bne.n	403298 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40332e:	f8da 2018 	ldr.w	r2, [sl, #24]
  403332:	2100      	movs	r1, #0
  403334:	9100      	str	r1, [sp, #0]
  403336:	460b      	mov	r3, r1
  403338:	9805      	ldr	r0, [sp, #20]
  40333a:	4402      	add	r2, r0
  40333c:	4650      	mov	r0, sl
  40333e:	4c24      	ldr	r4, [pc, #144]	; (4033d0 <prvTimerTask+0x1f8>)
  403340:	47a0      	blx	r4
							configASSERT( xResult );
  403342:	2800      	cmp	r0, #0
  403344:	d1a8      	bne.n	403298 <prvTimerTask+0xc0>
  403346:	f04f 0380 	mov.w	r3, #128	; 0x80
  40334a:	b672      	cpsid	i
  40334c:	f383 8811 	msr	BASEPRI, r3
  403350:	f3bf 8f6f 	isb	sy
  403354:	f3bf 8f4f 	dsb	sy
  403358:	b662      	cpsie	i
  40335a:	e7fe      	b.n	40335a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40335c:	9905      	ldr	r1, [sp, #20]
  40335e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403362:	b131      	cbz	r1, 403372 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403364:	4603      	mov	r3, r0
  403366:	4602      	mov	r2, r0
  403368:	4401      	add	r1, r0
  40336a:	4650      	mov	r0, sl
  40336c:	4c17      	ldr	r4, [pc, #92]	; (4033cc <prvTimerTask+0x1f4>)
  40336e:	47a0      	blx	r4
  403370:	e792      	b.n	403298 <prvTimerTask+0xc0>
  403372:	f04f 0380 	mov.w	r3, #128	; 0x80
  403376:	b672      	cpsid	i
  403378:	f383 8811 	msr	BASEPRI, r3
  40337c:	f3bf 8f6f 	isb	sy
  403380:	f3bf 8f4f 	dsb	sy
  403384:	b662      	cpsie	i
  403386:	e7fe      	b.n	403386 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403388:	4650      	mov	r0, sl
  40338a:	4b13      	ldr	r3, [pc, #76]	; (4033d8 <prvTimerTask+0x200>)
  40338c:	4798      	blx	r3
  40338e:	e783      	b.n	403298 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403390:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403392:	a804      	add	r0, sp, #16
  403394:	4b09      	ldr	r3, [pc, #36]	; (4033bc <prvTimerTask+0x1e4>)
  403396:	4798      	blx	r3
  403398:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40339a:	9b04      	ldr	r3, [sp, #16]
  40339c:	2b00      	cmp	r3, #0
  40339e:	f47f af78 	bne.w	403292 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4033a2:	4b0e      	ldr	r3, [pc, #56]	; (4033dc <prvTimerTask+0x204>)
  4033a4:	681b      	ldr	r3, [r3, #0]
  4033a6:	681a      	ldr	r2, [r3, #0]
  4033a8:	fab2 f282 	clz	r2, r2
  4033ac:	0952      	lsrs	r2, r2, #5
  4033ae:	2400      	movs	r4, #0
  4033b0:	e72d      	b.n	40320e <prvTimerTask+0x36>
  4033b2:	bf00      	nop
  4033b4:	20400d80 	.word	0x20400d80
  4033b8:	00402701 	.word	0x00402701
  4033bc:	00403121 	.word	0x00403121
  4033c0:	20400db4 	.word	0x20400db4
  4033c4:	00402361 	.word	0x00402361
  4033c8:	00402869 	.word	0x00402869
  4033cc:	00402f89 	.word	0x00402f89
  4033d0:	004030b1 	.word	0x004030b1
  4033d4:	0040215d 	.word	0x0040215d
  4033d8:	00401a89 	.word	0x00401a89
  4033dc:	20400d84 	.word	0x20400d84
  4033e0:	e000ed04 	.word	0xe000ed04
  4033e4:	00401719 	.word	0x00401719

004033e8 <RTT_init>:

extern void vApplicationMallocFailedHook(void) {
	configASSERT( ( volatile void * ) NULL );
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4033e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4033ec:	ed2d 8b02 	vpush	{d8}
  4033f0:	b082      	sub	sp, #8
  4033f2:	eeb0 8a40 	vmov.f32	s16, s0
  4033f6:	4680      	mov	r8, r0
  4033f8:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
	rtt_sel_source(RTT, false);
  4033fa:	4c20      	ldr	r4, [pc, #128]	; (40347c <RTT_init+0x94>)
  4033fc:	2100      	movs	r1, #0
  4033fe:	4620      	mov	r0, r4
  403400:	4b1f      	ldr	r3, [pc, #124]	; (403480 <RTT_init+0x98>)
  403402:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  403404:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 403484 <RTT_init+0x9c>
  403408:	eec7 7a08 	vdiv.f32	s15, s14, s16
  40340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  403410:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  403414:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  403418:	4620      	mov	r0, r4
  40341a:	4b1b      	ldr	r3, [pc, #108]	; (403488 <RTT_init+0xa0>)
  40341c:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  40341e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  403422:	d116      	bne.n	403452 <RTT_init+0x6a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403424:	4b19      	ldr	r3, [pc, #100]	; (40348c <RTT_init+0xa4>)
  403426:	2208      	movs	r2, #8
  403428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40342c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403430:	2180      	movs	r1, #128	; 0x80
  403432:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403436:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  403438:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  40343c:	d119      	bne.n	403472 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  40343e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  403442:	480e      	ldr	r0, [pc, #56]	; (40347c <RTT_init+0x94>)
  403444:	4b12      	ldr	r3, [pc, #72]	; (403490 <RTT_init+0xa8>)
  403446:	4798      	blx	r3
}
  403448:	b002      	add	sp, #8
  40344a:	ecbd 8b02 	vpop	{d8}
  40344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  403452:	4620      	mov	r0, r4
  403454:	4b0f      	ldr	r3, [pc, #60]	; (403494 <RTT_init+0xac>)
  403456:	4798      	blx	r3
  403458:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  40345a:	4e08      	ldr	r6, [pc, #32]	; (40347c <RTT_init+0x94>)
  40345c:	4d0d      	ldr	r5, [pc, #52]	; (403494 <RTT_init+0xac>)
  40345e:	4630      	mov	r0, r6
  403460:	47a8      	blx	r5
  403462:	4284      	cmp	r4, r0
  403464:	d0fb      	beq.n	40345e <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  403466:	eb04 0108 	add.w	r1, r4, r8
  40346a:	4804      	ldr	r0, [pc, #16]	; (40347c <RTT_init+0x94>)
  40346c:	4b0a      	ldr	r3, [pc, #40]	; (403498 <RTT_init+0xb0>)
  40346e:	4798      	blx	r3
  403470:	e7d8      	b.n	403424 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  403472:	4639      	mov	r1, r7
  403474:	4801      	ldr	r0, [pc, #4]	; (40347c <RTT_init+0x94>)
  403476:	4b09      	ldr	r3, [pc, #36]	; (40349c <RTT_init+0xb4>)
  403478:	4798      	blx	r3
  40347a:	e7e5      	b.n	403448 <RTT_init+0x60>
  40347c:	400e1830 	.word	0x400e1830
  403480:	00400385 	.word	0x00400385
  403484:	47000000 	.word	0x47000000
  403488:	00400371 	.word	0x00400371
  40348c:	e000e100 	.word	0xe000e100
  403490:	004003c5 	.word	0x004003c5
  403494:	004003d9 	.word	0x004003d9
  403498:	004003f1 	.word	0x004003f1
  40349c:	004003b1 	.word	0x004003b1

004034a0 <task_sensor>:
		gfx_mono_draw_string(char_hours, 0, 0, &sysfont);
		vTaskDelay(500);
	}
}

static void task_sensor(void *pvParameters){
  4034a0:	b508      	push	{r3, lr}
	for (;;)  {
		vTaskDelay(1000);
  4034a2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  4034a6:	4c02      	ldr	r4, [pc, #8]	; (4034b0 <task_sensor+0x10>)
  4034a8:	4628      	mov	r0, r5
  4034aa:	47a0      	blx	r4
  4034ac:	e7fc      	b.n	4034a8 <task_sensor+0x8>
  4034ae:	bf00      	nop
  4034b0:	00402989 	.word	0x00402989

004034b4 <but_callback1>:
	pio_set(LED1_PIO, LED1_MASK);
	pio_set(LED2_PIO, LED2_MASK);
	pio_set(LED3_PIO, LED3_MASK);
}

void but_callback1(void){
  4034b4:	b508      	push	{r3, lr}
	printf("Entrou");
  4034b6:	4804      	ldr	r0, [pc, #16]	; (4034c8 <but_callback1+0x14>)
  4034b8:	4b04      	ldr	r3, [pc, #16]	; (4034cc <but_callback1+0x18>)
  4034ba:	4798      	blx	r3
// 	/* configura alarme do RTC para daqui 20 segundos */
// 	rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);
// 	rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 1);
// 	
// 	printf("Inicializou o RTC\n");
	tc_start(TC1, 1);
  4034bc:	2101      	movs	r1, #1
  4034be:	4804      	ldr	r0, [pc, #16]	; (4034d0 <but_callback1+0x1c>)
  4034c0:	4b04      	ldr	r3, [pc, #16]	; (4034d4 <but_callback1+0x20>)
  4034c2:	4798      	blx	r3
  4034c4:	bd08      	pop	{r3, pc}
  4034c6:	bf00      	nop
  4034c8:	0040b028 	.word	0x0040b028
  4034cc:	00404661 	.word	0x00404661
  4034d0:	40010000 	.word	0x40010000
  4034d4:	00400599 	.word	0x00400599

004034d8 <task_oled>:
static void task_oled(void *pvParameters){
  4034d8:	b580      	push	{r7, lr}
  4034da:	b086      	sub	sp, #24
	gfx_mono_ssd1306_init();
  4034dc:	4b23      	ldr	r3, [pc, #140]	; (40356c <task_oled+0x94>)
  4034de:	4798      	blx	r3
	char char_minutes[3] = "";
  4034e0:	4b23      	ldr	r3, [pc, #140]	; (403570 <task_oled+0x98>)
  4034e2:	781a      	ldrb	r2, [r3, #0]
  4034e4:	f88d 2014 	strb.w	r2, [sp, #20]
  4034e8:	2300      	movs	r3, #0
  4034ea:	f8ad 3015 	strh.w	r3, [sp, #21]
	char char_seconds[3] = "";
  4034ee:	f88d 2010 	strb.w	r2, [sp, #16]
  4034f2:	f8ad 3011 	strh.w	r3, [sp, #17]
	char char_hours[12] = "";
  4034f6:	9301      	str	r3, [sp, #4]
  4034f8:	9302      	str	r3, [sp, #8]
  4034fa:	9303      	str	r3, [sp, #12]
		rtc_get_time(RTC, &global_hours, &global_minutes, &global_seconds);
  4034fc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40359c <task_oled+0xc4>
  403500:	4f1c      	ldr	r7, [pc, #112]	; (403574 <task_oled+0x9c>)
  403502:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4035a0 <task_oled+0xc8>
  403506:	4c1c      	ldr	r4, [pc, #112]	; (403578 <task_oled+0xa0>)
  403508:	4643      	mov	r3, r8
  40350a:	463a      	mov	r2, r7
  40350c:	4621      	mov	r1, r4
  40350e:	4648      	mov	r0, r9
  403510:	4d1a      	ldr	r5, [pc, #104]	; (40357c <task_oled+0xa4>)
  403512:	47a8      	blx	r5
		sprintf(char_minutes, "%d", global_minutes);
  403514:	683a      	ldr	r2, [r7, #0]
  403516:	4e1a      	ldr	r6, [pc, #104]	; (403580 <task_oled+0xa8>)
  403518:	4631      	mov	r1, r6
  40351a:	a805      	add	r0, sp, #20
  40351c:	4d19      	ldr	r5, [pc, #100]	; (403584 <task_oled+0xac>)
  40351e:	47a8      	blx	r5
		sprintf(char_seconds, "%d", global_seconds);
  403520:	f8d8 2000 	ldr.w	r2, [r8]
  403524:	4631      	mov	r1, r6
  403526:	a804      	add	r0, sp, #16
  403528:	47a8      	blx	r5
		sprintf(char_hours, "%d", global_hours);
  40352a:	6822      	ldr	r2, [r4, #0]
  40352c:	ac01      	add	r4, sp, #4
  40352e:	4631      	mov	r1, r6
  403530:	4620      	mov	r0, r4
  403532:	47a8      	blx	r5
		strcat(char_hours, ":");
  403534:	4620      	mov	r0, r4
  403536:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4035a4 <task_oled+0xcc>
  40353a:	47d0      	blx	sl
  40353c:	4b12      	ldr	r3, [pc, #72]	; (403588 <task_oled+0xb0>)
  40353e:	881e      	ldrh	r6, [r3, #0]
  403540:	5226      	strh	r6, [r4, r0]
		strcat(char_hours, char_minutes);
  403542:	a905      	add	r1, sp, #20
  403544:	4620      	mov	r0, r4
  403546:	4d11      	ldr	r5, [pc, #68]	; (40358c <task_oled+0xb4>)
  403548:	47a8      	blx	r5
		strcat(char_hours, ":");
  40354a:	4620      	mov	r0, r4
  40354c:	47d0      	blx	sl
  40354e:	5226      	strh	r6, [r4, r0]
		strcat(char_hours, char_seconds);
  403550:	a904      	add	r1, sp, #16
  403552:	4620      	mov	r0, r4
  403554:	47a8      	blx	r5
		gfx_mono_draw_string(char_hours, 0, 0, &sysfont);
  403556:	4b0e      	ldr	r3, [pc, #56]	; (403590 <task_oled+0xb8>)
  403558:	2200      	movs	r2, #0
  40355a:	4611      	mov	r1, r2
  40355c:	4620      	mov	r0, r4
  40355e:	4c0d      	ldr	r4, [pc, #52]	; (403594 <task_oled+0xbc>)
  403560:	47a0      	blx	r4
		vTaskDelay(500);
  403562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403566:	4b0c      	ldr	r3, [pc, #48]	; (403598 <task_oled+0xc0>)
  403568:	4798      	blx	r3
  40356a:	e7cc      	b.n	403506 <task_oled+0x2e>
  40356c:	004008a1 	.word	0x004008a1
  403570:	0040b008 	.word	0x0040b008
  403574:	20400e3c 	.word	0x20400e3c
  403578:	20400e40 	.word	0x20400e40
  40357c:	004001c7 	.word	0x004001c7
  403580:	0040b144 	.word	0x0040b144
  403584:	004048f9 	.word	0x004048f9
  403588:	0040b148 	.word	0x0040b148
  40358c:	00404945 	.word	0x00404945
  403590:	2040000c 	.word	0x2040000c
  403594:	00400809 	.word	0x00400809
  403598:	00402989 	.word	0x00402989
  40359c:	20400e58 	.word	0x20400e58
  4035a0:	400e1860 	.word	0x400e1860
  4035a4:	00404a41 	.word	0x00404a41

004035a8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035aa:	b083      	sub	sp, #12
  4035ac:	4605      	mov	r5, r0
  4035ae:	460c      	mov	r4, r1
	uint32_t val = 0;
  4035b0:	2300      	movs	r3, #0
  4035b2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4035b4:	4b2a      	ldr	r3, [pc, #168]	; (403660 <usart_serial_getchar+0xb8>)
  4035b6:	4298      	cmp	r0, r3
  4035b8:	d013      	beq.n	4035e2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4035ba:	4b2a      	ldr	r3, [pc, #168]	; (403664 <usart_serial_getchar+0xbc>)
  4035bc:	4298      	cmp	r0, r3
  4035be:	d018      	beq.n	4035f2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4035c0:	4b29      	ldr	r3, [pc, #164]	; (403668 <usart_serial_getchar+0xc0>)
  4035c2:	4298      	cmp	r0, r3
  4035c4:	d01d      	beq.n	403602 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4035c6:	4b29      	ldr	r3, [pc, #164]	; (40366c <usart_serial_getchar+0xc4>)
  4035c8:	429d      	cmp	r5, r3
  4035ca:	d022      	beq.n	403612 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4035cc:	4b28      	ldr	r3, [pc, #160]	; (403670 <usart_serial_getchar+0xc8>)
  4035ce:	429d      	cmp	r5, r3
  4035d0:	d027      	beq.n	403622 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4035d2:	4b28      	ldr	r3, [pc, #160]	; (403674 <usart_serial_getchar+0xcc>)
  4035d4:	429d      	cmp	r5, r3
  4035d6:	d02e      	beq.n	403636 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4035d8:	4b27      	ldr	r3, [pc, #156]	; (403678 <usart_serial_getchar+0xd0>)
  4035da:	429d      	cmp	r5, r3
  4035dc:	d035      	beq.n	40364a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4035de:	b003      	add	sp, #12
  4035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4035e2:	461f      	mov	r7, r3
  4035e4:	4e25      	ldr	r6, [pc, #148]	; (40367c <usart_serial_getchar+0xd4>)
  4035e6:	4621      	mov	r1, r4
  4035e8:	4638      	mov	r0, r7
  4035ea:	47b0      	blx	r6
  4035ec:	2800      	cmp	r0, #0
  4035ee:	d1fa      	bne.n	4035e6 <usart_serial_getchar+0x3e>
  4035f0:	e7e9      	b.n	4035c6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4035f2:	461f      	mov	r7, r3
  4035f4:	4e21      	ldr	r6, [pc, #132]	; (40367c <usart_serial_getchar+0xd4>)
  4035f6:	4621      	mov	r1, r4
  4035f8:	4638      	mov	r0, r7
  4035fa:	47b0      	blx	r6
  4035fc:	2800      	cmp	r0, #0
  4035fe:	d1fa      	bne.n	4035f6 <usart_serial_getchar+0x4e>
  403600:	e7e4      	b.n	4035cc <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403602:	461f      	mov	r7, r3
  403604:	4e1d      	ldr	r6, [pc, #116]	; (40367c <usart_serial_getchar+0xd4>)
  403606:	4621      	mov	r1, r4
  403608:	4638      	mov	r0, r7
  40360a:	47b0      	blx	r6
  40360c:	2800      	cmp	r0, #0
  40360e:	d1fa      	bne.n	403606 <usart_serial_getchar+0x5e>
  403610:	e7df      	b.n	4035d2 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403612:	461f      	mov	r7, r3
  403614:	4e19      	ldr	r6, [pc, #100]	; (40367c <usart_serial_getchar+0xd4>)
  403616:	4621      	mov	r1, r4
  403618:	4638      	mov	r0, r7
  40361a:	47b0      	blx	r6
  40361c:	2800      	cmp	r0, #0
  40361e:	d1fa      	bne.n	403616 <usart_serial_getchar+0x6e>
  403620:	e7da      	b.n	4035d8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403622:	461e      	mov	r6, r3
  403624:	4d16      	ldr	r5, [pc, #88]	; (403680 <usart_serial_getchar+0xd8>)
  403626:	a901      	add	r1, sp, #4
  403628:	4630      	mov	r0, r6
  40362a:	47a8      	blx	r5
  40362c:	2800      	cmp	r0, #0
  40362e:	d1fa      	bne.n	403626 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403630:	9b01      	ldr	r3, [sp, #4]
  403632:	7023      	strb	r3, [r4, #0]
  403634:	e7d3      	b.n	4035de <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403636:	461e      	mov	r6, r3
  403638:	4d11      	ldr	r5, [pc, #68]	; (403680 <usart_serial_getchar+0xd8>)
  40363a:	a901      	add	r1, sp, #4
  40363c:	4630      	mov	r0, r6
  40363e:	47a8      	blx	r5
  403640:	2800      	cmp	r0, #0
  403642:	d1fa      	bne.n	40363a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403644:	9b01      	ldr	r3, [sp, #4]
  403646:	7023      	strb	r3, [r4, #0]
  403648:	e7c9      	b.n	4035de <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40364a:	461e      	mov	r6, r3
  40364c:	4d0c      	ldr	r5, [pc, #48]	; (403680 <usart_serial_getchar+0xd8>)
  40364e:	a901      	add	r1, sp, #4
  403650:	4630      	mov	r0, r6
  403652:	47a8      	blx	r5
  403654:	2800      	cmp	r0, #0
  403656:	d1fa      	bne.n	40364e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403658:	9b01      	ldr	r3, [sp, #4]
  40365a:	7023      	strb	r3, [r4, #0]
}
  40365c:	e7bf      	b.n	4035de <usart_serial_getchar+0x36>
  40365e:	bf00      	nop
  403660:	400e0800 	.word	0x400e0800
  403664:	400e0a00 	.word	0x400e0a00
  403668:	400e1a00 	.word	0x400e1a00
  40366c:	400e1c00 	.word	0x400e1c00
  403670:	40024000 	.word	0x40024000
  403674:	40028000 	.word	0x40028000
  403678:	4002c000 	.word	0x4002c000
  40367c:	004012db 	.word	0x004012db
  403680:	004013e7 	.word	0x004013e7

00403684 <usart_serial_putchar>:
{
  403684:	b570      	push	{r4, r5, r6, lr}
  403686:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403688:	4b2a      	ldr	r3, [pc, #168]	; (403734 <usart_serial_putchar+0xb0>)
  40368a:	4298      	cmp	r0, r3
  40368c:	d013      	beq.n	4036b6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40368e:	4b2a      	ldr	r3, [pc, #168]	; (403738 <usart_serial_putchar+0xb4>)
  403690:	4298      	cmp	r0, r3
  403692:	d019      	beq.n	4036c8 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403694:	4b29      	ldr	r3, [pc, #164]	; (40373c <usart_serial_putchar+0xb8>)
  403696:	4298      	cmp	r0, r3
  403698:	d01f      	beq.n	4036da <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40369a:	4b29      	ldr	r3, [pc, #164]	; (403740 <usart_serial_putchar+0xbc>)
  40369c:	4298      	cmp	r0, r3
  40369e:	d025      	beq.n	4036ec <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4036a0:	4b28      	ldr	r3, [pc, #160]	; (403744 <usart_serial_putchar+0xc0>)
  4036a2:	4298      	cmp	r0, r3
  4036a4:	d02b      	beq.n	4036fe <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4036a6:	4b28      	ldr	r3, [pc, #160]	; (403748 <usart_serial_putchar+0xc4>)
  4036a8:	4298      	cmp	r0, r3
  4036aa:	d031      	beq.n	403710 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4036ac:	4b27      	ldr	r3, [pc, #156]	; (40374c <usart_serial_putchar+0xc8>)
  4036ae:	4298      	cmp	r0, r3
  4036b0:	d037      	beq.n	403722 <usart_serial_putchar+0x9e>
	return 0;
  4036b2:	2000      	movs	r0, #0
}
  4036b4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4036b6:	461e      	mov	r6, r3
  4036b8:	4d25      	ldr	r5, [pc, #148]	; (403750 <usart_serial_putchar+0xcc>)
  4036ba:	4621      	mov	r1, r4
  4036bc:	4630      	mov	r0, r6
  4036be:	47a8      	blx	r5
  4036c0:	2800      	cmp	r0, #0
  4036c2:	d1fa      	bne.n	4036ba <usart_serial_putchar+0x36>
		return 1;
  4036c4:	2001      	movs	r0, #1
  4036c6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4036c8:	461e      	mov	r6, r3
  4036ca:	4d21      	ldr	r5, [pc, #132]	; (403750 <usart_serial_putchar+0xcc>)
  4036cc:	4621      	mov	r1, r4
  4036ce:	4630      	mov	r0, r6
  4036d0:	47a8      	blx	r5
  4036d2:	2800      	cmp	r0, #0
  4036d4:	d1fa      	bne.n	4036cc <usart_serial_putchar+0x48>
		return 1;
  4036d6:	2001      	movs	r0, #1
  4036d8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4036da:	461e      	mov	r6, r3
  4036dc:	4d1c      	ldr	r5, [pc, #112]	; (403750 <usart_serial_putchar+0xcc>)
  4036de:	4621      	mov	r1, r4
  4036e0:	4630      	mov	r0, r6
  4036e2:	47a8      	blx	r5
  4036e4:	2800      	cmp	r0, #0
  4036e6:	d1fa      	bne.n	4036de <usart_serial_putchar+0x5a>
		return 1;
  4036e8:	2001      	movs	r0, #1
  4036ea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4036ec:	461e      	mov	r6, r3
  4036ee:	4d18      	ldr	r5, [pc, #96]	; (403750 <usart_serial_putchar+0xcc>)
  4036f0:	4621      	mov	r1, r4
  4036f2:	4630      	mov	r0, r6
  4036f4:	47a8      	blx	r5
  4036f6:	2800      	cmp	r0, #0
  4036f8:	d1fa      	bne.n	4036f0 <usart_serial_putchar+0x6c>
		return 1;
  4036fa:	2001      	movs	r0, #1
  4036fc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4036fe:	461e      	mov	r6, r3
  403700:	4d14      	ldr	r5, [pc, #80]	; (403754 <usart_serial_putchar+0xd0>)
  403702:	4621      	mov	r1, r4
  403704:	4630      	mov	r0, r6
  403706:	47a8      	blx	r5
  403708:	2800      	cmp	r0, #0
  40370a:	d1fa      	bne.n	403702 <usart_serial_putchar+0x7e>
		return 1;
  40370c:	2001      	movs	r0, #1
  40370e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403710:	461e      	mov	r6, r3
  403712:	4d10      	ldr	r5, [pc, #64]	; (403754 <usart_serial_putchar+0xd0>)
  403714:	4621      	mov	r1, r4
  403716:	4630      	mov	r0, r6
  403718:	47a8      	blx	r5
  40371a:	2800      	cmp	r0, #0
  40371c:	d1fa      	bne.n	403714 <usart_serial_putchar+0x90>
		return 1;
  40371e:	2001      	movs	r0, #1
  403720:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403722:	461e      	mov	r6, r3
  403724:	4d0b      	ldr	r5, [pc, #44]	; (403754 <usart_serial_putchar+0xd0>)
  403726:	4621      	mov	r1, r4
  403728:	4630      	mov	r0, r6
  40372a:	47a8      	blx	r5
  40372c:	2800      	cmp	r0, #0
  40372e:	d1fa      	bne.n	403726 <usart_serial_putchar+0xa2>
		return 1;
  403730:	2001      	movs	r0, #1
  403732:	bd70      	pop	{r4, r5, r6, pc}
  403734:	400e0800 	.word	0x400e0800
  403738:	400e0a00 	.word	0x400e0a00
  40373c:	400e1a00 	.word	0x400e1a00
  403740:	400e1c00 	.word	0x400e1c00
  403744:	40024000 	.word	0x40024000
  403748:	40028000 	.word	0x40028000
  40374c:	4002c000 	.word	0x4002c000
  403750:	004012c9 	.word	0x004012c9
  403754:	004013d1 	.word	0x004013d1

00403758 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403758:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40375a:	460a      	mov	r2, r1
  40375c:	4601      	mov	r1, r0
  40375e:	4802      	ldr	r0, [pc, #8]	; (403768 <vApplicationStackOverflowHook+0x10>)
  403760:	4b02      	ldr	r3, [pc, #8]	; (40376c <vApplicationStackOverflowHook+0x14>)
  403762:	4798      	blx	r3
  403764:	e7fe      	b.n	403764 <vApplicationStackOverflowHook+0xc>
  403766:	bf00      	nop
  403768:	0040b14c 	.word	0x0040b14c
  40376c:	00404661 	.word	0x00404661

00403770 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403770:	4770      	bx	lr

00403772 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  403772:	f04f 0380 	mov.w	r3, #128	; 0x80
  403776:	b672      	cpsid	i
  403778:	f383 8811 	msr	BASEPRI, r3
  40377c:	f3bf 8f6f 	isb	sy
  403780:	f3bf 8f4f 	dsb	sy
  403784:	b662      	cpsie	i
  403786:	e7fe      	b.n	403786 <vApplicationMallocFailedHook+0x14>

00403788 <RTT_Handler>:
void RTT_Handler(void){
  403788:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  40378a:	480a      	ldr	r0, [pc, #40]	; (4037b4 <RTT_Handler+0x2c>)
  40378c:	4b0a      	ldr	r3, [pc, #40]	; (4037b8 <RTT_Handler+0x30>)
  40378e:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS){
  403790:	f010 0f01 	tst.w	r0, #1
  403794:	d100      	bne.n	403798 <RTT_Handler+0x10>
  403796:	bd08      	pop	{r3, pc}
		xSemaphoreGiveFromISR(xSemaphoreRTT, &xHigherPriorityTaskWoken);
  403798:	4908      	ldr	r1, [pc, #32]	; (4037bc <RTT_Handler+0x34>)
  40379a:	4b09      	ldr	r3, [pc, #36]	; (4037c0 <RTT_Handler+0x38>)
  40379c:	6818      	ldr	r0, [r3, #0]
  40379e:	4b09      	ldr	r3, [pc, #36]	; (4037c4 <RTT_Handler+0x3c>)
  4037a0:	4798      	blx	r3
		RTT_init(4, 16, RTT_MR_ALMIEN);
  4037a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4037a6:	2010      	movs	r0, #16
  4037a8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  4037ac:	4b06      	ldr	r3, [pc, #24]	; (4037c8 <RTT_Handler+0x40>)
  4037ae:	4798      	blx	r3
}
  4037b0:	e7f1      	b.n	403796 <RTT_Handler+0xe>
  4037b2:	bf00      	nop
  4037b4:	400e1830 	.word	0x400e1830
  4037b8:	004003ed 	.word	0x004003ed
  4037bc:	20400024 	.word	0x20400024
  4037c0:	20400e4c 	.word	0x20400e4c
  4037c4:	0040207d 	.word	0x0040207d
  4037c8:	004033e9 	.word	0x004033e9

004037cc <TC7_Handler>:
void TC7_Handler(void) {
  4037cc:	b500      	push	{lr}
  4037ce:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC2, 1);
  4037d0:	2101      	movs	r1, #1
  4037d2:	4806      	ldr	r0, [pc, #24]	; (4037ec <TC7_Handler+0x20>)
  4037d4:	4b06      	ldr	r3, [pc, #24]	; (4037f0 <TC7_Handler+0x24>)
  4037d6:	4798      	blx	r3
  4037d8:	9001      	str	r0, [sp, #4]
	xSemaphoreGiveFromISR(xSemaphoreTC, &xHigherPriorityTaskWoken);
  4037da:	4906      	ldr	r1, [pc, #24]	; (4037f4 <TC7_Handler+0x28>)
  4037dc:	4b06      	ldr	r3, [pc, #24]	; (4037f8 <TC7_Handler+0x2c>)
  4037de:	6818      	ldr	r0, [r3, #0]
  4037e0:	4b06      	ldr	r3, [pc, #24]	; (4037fc <TC7_Handler+0x30>)
  4037e2:	4798      	blx	r3
}
  4037e4:	b003      	add	sp, #12
  4037e6:	f85d fb04 	ldr.w	pc, [sp], #4
  4037ea:	bf00      	nop
  4037ec:	40014000 	.word	0x40014000
  4037f0:	004005b1 	.word	0x004005b1
  4037f4:	20400024 	.word	0x20400024
  4037f8:	20400e54 	.word	0x20400e54
  4037fc:	0040207d 	.word	0x0040207d

00403800 <TC4_Handler>:
void TC4_Handler(void) {
  403800:	b500      	push	{lr}
  403802:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC1, 1);
  403804:	2101      	movs	r1, #1
  403806:	4806      	ldr	r0, [pc, #24]	; (403820 <TC4_Handler+0x20>)
  403808:	4b06      	ldr	r3, [pc, #24]	; (403824 <TC4_Handler+0x24>)
  40380a:	4798      	blx	r3
  40380c:	9001      	str	r0, [sp, #4]
	xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  40380e:	4906      	ldr	r1, [pc, #24]	; (403828 <TC4_Handler+0x28>)
  403810:	4b06      	ldr	r3, [pc, #24]	; (40382c <TC4_Handler+0x2c>)
  403812:	6818      	ldr	r0, [r3, #0]
  403814:	4b06      	ldr	r3, [pc, #24]	; (403830 <TC4_Handler+0x30>)
  403816:	4798      	blx	r3
}
  403818:	b003      	add	sp, #12
  40381a:	f85d fb04 	ldr.w	pc, [sp], #4
  40381e:	bf00      	nop
  403820:	40010000 	.word	0x40010000
  403824:	004005b1 	.word	0x004005b1
  403828:	20400024 	.word	0x20400024
  40382c:	20400e48 	.word	0x20400e48
  403830:	0040207d 	.word	0x0040207d

00403834 <RTC_Handler>:
void RTC_Handler(void) {
  403834:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  403836:	4810      	ldr	r0, [pc, #64]	; (403878 <RTC_Handler+0x44>)
  403838:	4b10      	ldr	r3, [pc, #64]	; (40387c <RTC_Handler+0x48>)
  40383a:	4798      	blx	r3
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  40383c:	f010 0f02 	tst.w	r0, #2
  403840:	d114      	bne.n	40386c <RTC_Handler+0x38>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403842:	4d0d      	ldr	r5, [pc, #52]	; (403878 <RTC_Handler+0x44>)
  403844:	2104      	movs	r1, #4
  403846:	4628      	mov	r0, r5
  403848:	4c0d      	ldr	r4, [pc, #52]	; (403880 <RTC_Handler+0x4c>)
  40384a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  40384c:	2102      	movs	r1, #2
  40384e:	4628      	mov	r0, r5
  403850:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  403852:	2101      	movs	r1, #1
  403854:	4628      	mov	r0, r5
  403856:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403858:	2108      	movs	r1, #8
  40385a:	4628      	mov	r0, r5
  40385c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  40385e:	2110      	movs	r1, #16
  403860:	4628      	mov	r0, r5
  403862:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  403864:	2120      	movs	r1, #32
  403866:	4628      	mov	r0, r5
  403868:	47a0      	blx	r4
  40386a:	bd38      	pop	{r3, r4, r5, pc}
		xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  40386c:	4905      	ldr	r1, [pc, #20]	; (403884 <RTC_Handler+0x50>)
  40386e:	4b06      	ldr	r3, [pc, #24]	; (403888 <RTC_Handler+0x54>)
  403870:	6818      	ldr	r0, [r3, #0]
  403872:	4b06      	ldr	r3, [pc, #24]	; (40388c <RTC_Handler+0x58>)
  403874:	4798      	blx	r3
  403876:	e7e4      	b.n	403842 <RTC_Handler+0xe>
  403878:	400e1860 	.word	0x400e1860
  40387c:	00400369 	.word	0x00400369
  403880:	0040036d 	.word	0x0040036d
  403884:	20400024 	.word	0x20400024
  403888:	20400e48 	.word	0x20400e48
  40388c:	0040207d 	.word	0x0040207d

00403890 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403894:	b084      	sub	sp, #16
  403896:	4605      	mov	r5, r0
  403898:	460c      	mov	r4, r1
  40389a:	4616      	mov	r6, r2
  40389c:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ID_TC);
  40389e:	4608      	mov	r0, r1
  4038a0:	4b1f      	ldr	r3, [pc, #124]	; (403920 <TC_init+0x90>)
  4038a2:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4038a4:	491f      	ldr	r1, [pc, #124]	; (403924 <TC_init+0x94>)
  4038a6:	9100      	str	r1, [sp, #0]
  4038a8:	ab02      	add	r3, sp, #8
  4038aa:	aa03      	add	r2, sp, #12
  4038ac:	4638      	mov	r0, r7
  4038ae:	f8df 8094 	ldr.w	r8, [pc, #148]	; 403944 <TC_init+0xb4>
  4038b2:	47c0      	blx	r8
	if(ul_tcclks == 0 )
  4038b4:	9b02      	ldr	r3, [sp, #8]
  4038b6:	b33b      	cbz	r3, 403908 <TC_init+0x78>
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4038b8:	9a02      	ldr	r2, [sp, #8]
  4038ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4038be:	4631      	mov	r1, r6
  4038c0:	4628      	mov	r0, r5
  4038c2:	4b19      	ldr	r3, [pc, #100]	; (403928 <TC_init+0x98>)
  4038c4:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4038c6:	9b03      	ldr	r3, [sp, #12]
  4038c8:	4a16      	ldr	r2, [pc, #88]	; (403924 <TC_init+0x94>)
  4038ca:	fbb2 f2f3 	udiv	r2, r2, r3
  4038ce:	fbb2 f2f7 	udiv	r2, r2, r7
  4038d2:	4631      	mov	r1, r6
  4038d4:	4628      	mov	r0, r5
  4038d6:	4b15      	ldr	r3, [pc, #84]	; (40392c <TC_init+0x9c>)
  4038d8:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  4038da:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4038dc:	2b00      	cmp	r3, #0
  4038de:	db17      	blt.n	403910 <TC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4038e0:	4a13      	ldr	r2, [pc, #76]	; (403930 <TC_init+0xa0>)
  4038e2:	2180      	movs	r1, #128	; 0x80
  4038e4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4038e6:	095b      	lsrs	r3, r3, #5
  4038e8:	f004 041f 	and.w	r4, r4, #31
  4038ec:	2201      	movs	r2, #1
  4038ee:	fa02 f404 	lsl.w	r4, r2, r4
  4038f2:	4a10      	ldr	r2, [pc, #64]	; (403934 <TC_init+0xa4>)
  4038f4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4038f8:	2210      	movs	r2, #16
  4038fa:	4631      	mov	r1, r6
  4038fc:	4628      	mov	r0, r5
  4038fe:	4b0e      	ldr	r3, [pc, #56]	; (403938 <TC_init+0xa8>)
  403900:	4798      	blx	r3
}
  403902:	b004      	add	sp, #16
  403904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pmc_enable_pck(PMC_PCK_6);
  403908:	2006      	movs	r0, #6
  40390a:	4b0c      	ldr	r3, [pc, #48]	; (40393c <TC_init+0xac>)
  40390c:	4798      	blx	r3
  40390e:	e7d3      	b.n	4038b8 <TC_init+0x28>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403910:	f004 010f 	and.w	r1, r4, #15
  403914:	4a0a      	ldr	r2, [pc, #40]	; (403940 <TC_init+0xb0>)
  403916:	440a      	add	r2, r1
  403918:	2180      	movs	r1, #128	; 0x80
  40391a:	7611      	strb	r1, [r2, #24]
  40391c:	e7e3      	b.n	4038e6 <TC_init+0x56>
  40391e:	bf00      	nop
  403920:	00401261 	.word	0x00401261
  403924:	11e1a300 	.word	0x11e1a300
  403928:	0040057f 	.word	0x0040057f
  40392c:	004005a1 	.word	0x004005a1
  403930:	e000e400 	.word	0xe000e400
  403934:	e000e100 	.word	0xe000e100
  403938:	004005a9 	.word	0x004005a9
  40393c:	004012b5 	.word	0x004012b5
  403940:	e000ecfc 	.word	0xe000ecfc
  403944:	004005b9 	.word	0x004005b9

00403948 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  403948:	b082      	sub	sp, #8
  40394a:	b570      	push	{r4, r5, r6, lr}
  40394c:	b082      	sub	sp, #8
  40394e:	4605      	mov	r5, r0
  403950:	460c      	mov	r4, r1
  403952:	a906      	add	r1, sp, #24
  403954:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  403958:	2002      	movs	r0, #2
  40395a:	4b1d      	ldr	r3, [pc, #116]	; (4039d0 <RTC_init+0x88>)
  40395c:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  40395e:	2100      	movs	r1, #0
  403960:	4628      	mov	r0, r5
  403962:	4b1c      	ldr	r3, [pc, #112]	; (4039d4 <RTC_init+0x8c>)
  403964:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  403966:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403968:	9300      	str	r3, [sp, #0]
  40396a:	9b08      	ldr	r3, [sp, #32]
  40396c:	9a07      	ldr	r2, [sp, #28]
  40396e:	9906      	ldr	r1, [sp, #24]
  403970:	4628      	mov	r0, r5
  403972:	4e19      	ldr	r6, [pc, #100]	; (4039d8 <RTC_init+0x90>)
  403974:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  403976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40397a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40397c:	4628      	mov	r0, r5
  40397e:	4e17      	ldr	r6, [pc, #92]	; (4039dc <RTC_init+0x94>)
  403980:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  403982:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403984:	b2e4      	uxtb	r4, r4
  403986:	f004 011f 	and.w	r1, r4, #31
  40398a:	2301      	movs	r3, #1
  40398c:	408b      	lsls	r3, r1
  40398e:	0956      	lsrs	r6, r2, #5
  403990:	4813      	ldr	r0, [pc, #76]	; (4039e0 <RTC_init+0x98>)
  403992:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  403996:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40399a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  40399e:	2a00      	cmp	r2, #0
  4039a0:	db0f      	blt.n	4039c2 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4039a2:	490f      	ldr	r1, [pc, #60]	; (4039e0 <RTC_init+0x98>)
  4039a4:	4411      	add	r1, r2
  4039a6:	2280      	movs	r2, #128	; 0x80
  4039a8:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4039ac:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  4039b0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4039b2:	4628      	mov	r0, r5
  4039b4:	4b0b      	ldr	r3, [pc, #44]	; (4039e4 <RTC_init+0x9c>)
  4039b6:	4798      	blx	r3
}
  4039b8:	b002      	add	sp, #8
  4039ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4039be:	b002      	add	sp, #8
  4039c0:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4039c2:	f004 040f 	and.w	r4, r4, #15
  4039c6:	4a08      	ldr	r2, [pc, #32]	; (4039e8 <RTC_init+0xa0>)
  4039c8:	2180      	movs	r1, #128	; 0x80
  4039ca:	5511      	strb	r1, [r2, r4]
  4039cc:	e7ee      	b.n	4039ac <RTC_init+0x64>
  4039ce:	bf00      	nop
  4039d0:	00401261 	.word	0x00401261
  4039d4:	004001ad 	.word	0x004001ad
  4039d8:	004002b1 	.word	0x004002b1
  4039dc:	00400221 	.word	0x00400221
  4039e0:	e000e100 	.word	0xe000e100
  4039e4:	004001c3 	.word	0x004001c3
  4039e8:	e000ed14 	.word	0xe000ed14

004039ec <led_pisca>:
void led_pisca(int led){
  4039ec:	b510      	push	{r4, lr}
	if (led == 1){
  4039ee:	2801      	cmp	r0, #1
  4039f0:	d004      	beq.n	4039fc <led_pisca+0x10>
	if (led == 2){
  4039f2:	2802      	cmp	r0, #2
  4039f4:	d00f      	beq.n	403a16 <led_pisca+0x2a>
	if (led == 3){
  4039f6:	2803      	cmp	r0, #3
  4039f8:	d01c      	beq.n	403a34 <led_pisca+0x48>
  4039fa:	bd10      	pop	{r4, pc}
		pio_clear(LED1_PIO, LED1_MASK);
  4039fc:	4c14      	ldr	r4, [pc, #80]	; (403a50 <led_pisca+0x64>)
  4039fe:	2101      	movs	r1, #1
  403a00:	4620      	mov	r0, r4
  403a02:	4b14      	ldr	r3, [pc, #80]	; (403a54 <led_pisca+0x68>)
  403a04:	4798      	blx	r3
		vTaskDelay(50);
  403a06:	2032      	movs	r0, #50	; 0x32
  403a08:	4b13      	ldr	r3, [pc, #76]	; (403a58 <led_pisca+0x6c>)
  403a0a:	4798      	blx	r3
		pio_set(LED1_PIO, LED1_MASK);
  403a0c:	2101      	movs	r1, #1
  403a0e:	4620      	mov	r0, r4
  403a10:	4b12      	ldr	r3, [pc, #72]	; (403a5c <led_pisca+0x70>)
  403a12:	4798      	blx	r3
  403a14:	bd10      	pop	{r4, pc}
		pio_clear(LED2_PIO, LED2_MASK);
  403a16:	4c12      	ldr	r4, [pc, #72]	; (403a60 <led_pisca+0x74>)
  403a18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403a1c:	4620      	mov	r0, r4
  403a1e:	4b0d      	ldr	r3, [pc, #52]	; (403a54 <led_pisca+0x68>)
  403a20:	4798      	blx	r3
		vTaskDelay(50);
  403a22:	2032      	movs	r0, #50	; 0x32
  403a24:	4b0c      	ldr	r3, [pc, #48]	; (403a58 <led_pisca+0x6c>)
  403a26:	4798      	blx	r3
		pio_set(LED2_PIO, LED2_MASK);
  403a28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403a2c:	4620      	mov	r0, r4
  403a2e:	4b0b      	ldr	r3, [pc, #44]	; (403a5c <led_pisca+0x70>)
  403a30:	4798      	blx	r3
  403a32:	bd10      	pop	{r4, pc}
		pio_clear(LED3_PIO, LED3_MASK);
  403a34:	4c0b      	ldr	r4, [pc, #44]	; (403a64 <led_pisca+0x78>)
  403a36:	2104      	movs	r1, #4
  403a38:	4620      	mov	r0, r4
  403a3a:	4b06      	ldr	r3, [pc, #24]	; (403a54 <led_pisca+0x68>)
  403a3c:	4798      	blx	r3
		vTaskDelay(50);
  403a3e:	2032      	movs	r0, #50	; 0x32
  403a40:	4b05      	ldr	r3, [pc, #20]	; (403a58 <led_pisca+0x6c>)
  403a42:	4798      	blx	r3
		pio_set(LED3_PIO, LED3_MASK);
  403a44:	2104      	movs	r1, #4
  403a46:	4620      	mov	r0, r4
  403a48:	4b04      	ldr	r3, [pc, #16]	; (403a5c <led_pisca+0x70>)
  403a4a:	4798      	blx	r3
}
  403a4c:	e7d5      	b.n	4039fa <led_pisca+0xe>
  403a4e:	bf00      	nop
  403a50:	400e0e00 	.word	0x400e0e00
  403a54:	00400e59 	.word	0x00400e59
  403a58:	00402989 	.word	0x00402989
  403a5c:	00400e55 	.word	0x00400e55
  403a60:	400e1200 	.word	0x400e1200
  403a64:	400e1000 	.word	0x400e1000

00403a68 <task_rtc>:
static void task_rtc(void *pvParameters){
  403a68:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreRTC, 100)){
  403a6a:	4d09      	ldr	r5, [pc, #36]	; (403a90 <task_rtc+0x28>)
  403a6c:	4c09      	ldr	r4, [pc, #36]	; (403a94 <task_rtc+0x2c>)
			led_pisca(3);
  403a6e:	4e0a      	ldr	r6, [pc, #40]	; (403a98 <task_rtc+0x30>)
  403a70:	e003      	b.n	403a7a <task_rtc+0x12>
		vTaskDelay(500);
  403a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403a76:	4b09      	ldr	r3, [pc, #36]	; (403a9c <task_rtc+0x34>)
  403a78:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreRTC, 100)){
  403a7a:	2300      	movs	r3, #0
  403a7c:	2264      	movs	r2, #100	; 0x64
  403a7e:	4619      	mov	r1, r3
  403a80:	6828      	ldr	r0, [r5, #0]
  403a82:	47a0      	blx	r4
  403a84:	2800      	cmp	r0, #0
  403a86:	d0f4      	beq.n	403a72 <task_rtc+0xa>
			led_pisca(3);
  403a88:	2003      	movs	r0, #3
  403a8a:	47b0      	blx	r6
  403a8c:	e7f1      	b.n	403a72 <task_rtc+0xa>
  403a8e:	bf00      	nop
  403a90:	20400e48 	.word	0x20400e48
  403a94:	0040215d 	.word	0x0040215d
  403a98:	004039ed 	.word	0x004039ed
  403a9c:	00402989 	.word	0x00402989

00403aa0 <task_tc>:
static void task_tc(void *pvParameters){
  403aa0:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreTC, 100)){
  403aa2:	4e09      	ldr	r6, [pc, #36]	; (403ac8 <task_tc+0x28>)
  403aa4:	2464      	movs	r4, #100	; 0x64
  403aa6:	4d09      	ldr	r5, [pc, #36]	; (403acc <task_tc+0x2c>)
  403aa8:	e002      	b.n	403ab0 <task_tc+0x10>
		vTaskDelay(100);
  403aaa:	4620      	mov	r0, r4
  403aac:	4b08      	ldr	r3, [pc, #32]	; (403ad0 <task_tc+0x30>)
  403aae:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreTC, 100)){
  403ab0:	2300      	movs	r3, #0
  403ab2:	4622      	mov	r2, r4
  403ab4:	4619      	mov	r1, r3
  403ab6:	6830      	ldr	r0, [r6, #0]
  403ab8:	47a8      	blx	r5
  403aba:	2800      	cmp	r0, #0
  403abc:	d0f5      	beq.n	403aaa <task_tc+0xa>
			led_pisca(1);
  403abe:	2001      	movs	r0, #1
  403ac0:	4b04      	ldr	r3, [pc, #16]	; (403ad4 <task_tc+0x34>)
  403ac2:	4798      	blx	r3
  403ac4:	e7f1      	b.n	403aaa <task_tc+0xa>
  403ac6:	bf00      	nop
  403ac8:	20400e54 	.word	0x20400e54
  403acc:	0040215d 	.word	0x0040215d
  403ad0:	00402989 	.word	0x00402989
  403ad4:	004039ed 	.word	0x004039ed

00403ad8 <task_rtt>:
static void task_rtt(void *pvParameters){
  403ad8:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreRTT, 100)){
  403ada:	4d0c      	ldr	r5, [pc, #48]	; (403b0c <task_rtt+0x34>)
  403adc:	4c0c      	ldr	r4, [pc, #48]	; (403b10 <task_rtt+0x38>)
			led_pisca(2);
  403ade:	4e0d      	ldr	r6, [pc, #52]	; (403b14 <task_rtt+0x3c>)
  403ae0:	e003      	b.n	403aea <task_rtt+0x12>
		vTaskDelay(500);
  403ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403ae6:	4b0c      	ldr	r3, [pc, #48]	; (403b18 <task_rtt+0x40>)
  403ae8:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreRTT, 100)){
  403aea:	2300      	movs	r3, #0
  403aec:	2264      	movs	r2, #100	; 0x64
  403aee:	4619      	mov	r1, r3
  403af0:	6828      	ldr	r0, [r5, #0]
  403af2:	47a0      	blx	r4
  403af4:	2800      	cmp	r0, #0
  403af6:	d0f4      	beq.n	403ae2 <task_rtt+0xa>
			led_pisca(2);
  403af8:	2002      	movs	r0, #2
  403afa:	47b0      	blx	r6
			RTT_init(4, 16, RTT_MR_ALMIEN);
  403afc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403b00:	2010      	movs	r0, #16
  403b02:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  403b06:	4b05      	ldr	r3, [pc, #20]	; (403b1c <task_rtt+0x44>)
  403b08:	4798      	blx	r3
  403b0a:	e7ea      	b.n	403ae2 <task_rtt+0xa>
  403b0c:	20400e4c 	.word	0x20400e4c
  403b10:	0040215d 	.word	0x0040215d
  403b14:	004039ed 	.word	0x004039ed
  403b18:	00402989 	.word	0x00402989
  403b1c:	004033e9 	.word	0x004033e9

00403b20 <led_init>:
void led_init(){
  403b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pmc_enable_periph_clk(LED1_ID);
  403b22:	200a      	movs	r0, #10
  403b24:	4d14      	ldr	r5, [pc, #80]	; (403b78 <led_init+0x58>)
  403b26:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403b28:	4f14      	ldr	r7, [pc, #80]	; (403b7c <led_init+0x5c>)
  403b2a:	2308      	movs	r3, #8
  403b2c:	2201      	movs	r2, #1
  403b2e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403b32:	4638      	mov	r0, r7
  403b34:	4c12      	ldr	r4, [pc, #72]	; (403b80 <led_init+0x60>)
  403b36:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_ID);
  403b38:	200c      	movs	r0, #12
  403b3a:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403b3c:	4e11      	ldr	r6, [pc, #68]	; (403b84 <led_init+0x64>)
  403b3e:	2308      	movs	r3, #8
  403b40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403b44:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403b48:	4630      	mov	r0, r6
  403b4a:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_ID);
  403b4c:	200b      	movs	r0, #11
  403b4e:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403b50:	4d0d      	ldr	r5, [pc, #52]	; (403b88 <led_init+0x68>)
  403b52:	2308      	movs	r3, #8
  403b54:	2204      	movs	r2, #4
  403b56:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403b5a:	4628      	mov	r0, r5
  403b5c:	47a0      	blx	r4
	pio_set(LED1_PIO, LED1_MASK);
  403b5e:	2101      	movs	r1, #1
  403b60:	4638      	mov	r0, r7
  403b62:	4c0a      	ldr	r4, [pc, #40]	; (403b8c <led_init+0x6c>)
  403b64:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_MASK);
  403b66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b6a:	4630      	mov	r0, r6
  403b6c:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_MASK);
  403b6e:	2104      	movs	r1, #4
  403b70:	4628      	mov	r0, r5
  403b72:	47a0      	blx	r4
  403b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b76:	bf00      	nop
  403b78:	00401261 	.word	0x00401261
  403b7c:	400e0e00 	.word	0x400e0e00
  403b80:	00400f4d 	.word	0x00400f4d
  403b84:	400e1200 	.word	0x400e1200
  403b88:	400e1000 	.word	0x400e1000
  403b8c:	00400e55 	.word	0x00400e55

00403b90 <button_init>:
}

void button_init(void){
  403b90:	b530      	push	{r4, r5, lr}
  403b92:	b083      	sub	sp, #12
	pmc_enable_periph_clk(BUT1_ID);					
  403b94:	2010      	movs	r0, #16
  403b96:	4b12      	ldr	r3, [pc, #72]	; (403be0 <button_init+0x50>)
  403b98:	4798      	blx	r3
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403b9a:	4c12      	ldr	r4, [pc, #72]	; (403be4 <button_init+0x54>)
  403b9c:	2309      	movs	r3, #9
  403b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403ba2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403ba6:	4620      	mov	r0, r4
  403ba8:	4d0f      	ldr	r5, [pc, #60]	; (403be8 <button_init+0x58>)
  403baa:	47a8      	blx	r5
	pio_handler_set(BUT1_PIO, BUT1_ID, BUT1_MASK, PIO_IT_FALL_EDGE, &but_callback1);
  403bac:	4b0f      	ldr	r3, [pc, #60]	; (403bec <button_init+0x5c>)
  403bae:	9300      	str	r3, [sp, #0]
  403bb0:	2350      	movs	r3, #80	; 0x50
  403bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403bb6:	2110      	movs	r1, #16
  403bb8:	4620      	mov	r0, r4
  403bba:	4d0d      	ldr	r5, [pc, #52]	; (403bf0 <button_init+0x60>)
  403bbc:	47a8      	blx	r5
	pio_enable_interrupt(BUT1_PIO, BUT1_MASK);
  403bbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403bc2:	4620      	mov	r0, r4
  403bc4:	4b0b      	ldr	r3, [pc, #44]	; (403bf4 <button_init+0x64>)
  403bc6:	4798      	blx	r3
	pio_get_interrupt_status(BUT1_PIO);
  403bc8:	4620      	mov	r0, r4
  403bca:	4b0b      	ldr	r3, [pc, #44]	; (403bf8 <button_init+0x68>)
  403bcc:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403bce:	4b0b      	ldr	r3, [pc, #44]	; (403bfc <button_init+0x6c>)
  403bd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403bd4:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403bd6:	2280      	movs	r2, #128	; 0x80
  403bd8:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ(BUT1_ID);
	NVIC_SetPriority(BUT1_ID, 4);
	
}
  403bdc:	b003      	add	sp, #12
  403bde:	bd30      	pop	{r4, r5, pc}
  403be0:	00401261 	.word	0x00401261
  403be4:	400e1400 	.word	0x400e1400
  403be8:	00400f4d 	.word	0x00400f4d
  403bec:	004034b5 	.word	0x004034b5
  403bf0:	0040106d 	.word	0x0040106d
  403bf4:	0040100f 	.word	0x0040100f
  403bf8:	00401013 	.word	0x00401013
  403bfc:	e000e100 	.word	0xe000e100

00403c00 <main>:

int main(void) {
  403c00:	b500      	push	{lr}
  403c02:	b095      	sub	sp, #84	; 0x54
	/* Initialize the SAM system */
	sysclk_init();
  403c04:	4b74      	ldr	r3, [pc, #464]	; (403dd8 <main+0x1d8>)
  403c06:	4798      	blx	r3
	board_init();
  403c08:	4b74      	ldr	r3, [pc, #464]	; (403ddc <main+0x1dc>)
  403c0a:	4798      	blx	r3
	led_init();
  403c0c:	4b74      	ldr	r3, [pc, #464]	; (403de0 <main+0x1e0>)
  403c0e:	4798      	blx	r3
	button_init();
  403c10:	4b74      	ldr	r3, [pc, #464]	; (403de4 <main+0x1e4>)
  403c12:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403c14:	4d74      	ldr	r5, [pc, #464]	; (403de8 <main+0x1e8>)
  403c16:	4b75      	ldr	r3, [pc, #468]	; (403dec <main+0x1ec>)
  403c18:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403c1a:	4a75      	ldr	r2, [pc, #468]	; (403df0 <main+0x1f0>)
  403c1c:	4b75      	ldr	r3, [pc, #468]	; (403df4 <main+0x1f4>)
  403c1e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403c20:	4a75      	ldr	r2, [pc, #468]	; (403df8 <main+0x1f8>)
  403c22:	4b76      	ldr	r3, [pc, #472]	; (403dfc <main+0x1fc>)
  403c24:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403c26:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403c2a:	9307      	str	r3, [sp, #28]
	usart_settings.char_length = opt->charlength;
  403c2c:	23c0      	movs	r3, #192	; 0xc0
  403c2e:	9308      	str	r3, [sp, #32]
	usart_settings.parity_type = opt->paritytype;
  403c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403c34:	9309      	str	r3, [sp, #36]	; 0x24
	usart_settings.stop_bits= opt->stopbits;
  403c36:	2400      	movs	r4, #0
  403c38:	940a      	str	r4, [sp, #40]	; 0x28
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403c3a:	940b      	str	r4, [sp, #44]	; 0x2c
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403c3c:	200e      	movs	r0, #14
  403c3e:	4b70      	ldr	r3, [pc, #448]	; (403e00 <main+0x200>)
  403c40:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403c42:	4a70      	ldr	r2, [pc, #448]	; (403e04 <main+0x204>)
  403c44:	a907      	add	r1, sp, #28
  403c46:	4628      	mov	r0, r5
  403c48:	4b6f      	ldr	r3, [pc, #444]	; (403e08 <main+0x208>)
  403c4a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403c4c:	4628      	mov	r0, r5
  403c4e:	4b6f      	ldr	r3, [pc, #444]	; (403e0c <main+0x20c>)
  403c50:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403c52:	4628      	mov	r0, r5
  403c54:	4b6e      	ldr	r3, [pc, #440]	; (403e10 <main+0x210>)
  403c56:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403c58:	4e6e      	ldr	r6, [pc, #440]	; (403e14 <main+0x214>)
  403c5a:	6833      	ldr	r3, [r6, #0]
  403c5c:	4621      	mov	r1, r4
  403c5e:	6898      	ldr	r0, [r3, #8]
  403c60:	4d6d      	ldr	r5, [pc, #436]	; (403e18 <main+0x218>)
  403c62:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403c64:	6833      	ldr	r3, [r6, #0]
  403c66:	4621      	mov	r1, r4
  403c68:	6858      	ldr	r0, [r3, #4]
  403c6a:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403c6c:	6833      	ldr	r3, [r6, #0]
  403c6e:	4621      	mov	r1, r4
  403c70:	6898      	ldr	r0, [r3, #8]
  403c72:	47a8      	blx	r5
	/* Initialize the console uart */
	configure_console();
	printf("Comecou\n");
  403c74:	4869      	ldr	r0, [pc, #420]	; (403e1c <main+0x21c>)
  403c76:	4b6a      	ldr	r3, [pc, #424]	; (403e20 <main+0x220>)
  403c78:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS;  
  403c7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403c7e:	4b69      	ldr	r3, [pc, #420]	; (403e24 <main+0x224>)
  403c80:	605a      	str	r2, [r3, #4]
	
	xSemaphoreRTT = xSemaphoreCreateBinary();
  403c82:	2203      	movs	r2, #3
  403c84:	4621      	mov	r1, r4
  403c86:	2001      	movs	r0, #1
  403c88:	4d67      	ldr	r5, [pc, #412]	; (403e28 <main+0x228>)
  403c8a:	47a8      	blx	r5
  403c8c:	4b67      	ldr	r3, [pc, #412]	; (403e2c <main+0x22c>)
  403c8e:	6018      	str	r0, [r3, #0]
	xSemaphoreRTC = xSemaphoreCreateBinary();
  403c90:	2203      	movs	r2, #3
  403c92:	4621      	mov	r1, r4
  403c94:	2001      	movs	r0, #1
  403c96:	47a8      	blx	r5
  403c98:	4b65      	ldr	r3, [pc, #404]	; (403e30 <main+0x230>)
  403c9a:	6018      	str	r0, [r3, #0]
	xSemaphoreTC = xSemaphoreCreateBinary();
  403c9c:	2203      	movs	r2, #3
  403c9e:	4621      	mov	r1, r4
  403ca0:	2001      	movs	r0, #1
  403ca2:	47a8      	blx	r5
  403ca4:	4b63      	ldr	r3, [pc, #396]	; (403e34 <main+0x234>)
  403ca6:	6018      	str	r0, [r3, #0]
	
	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403ca8:	9403      	str	r4, [sp, #12]
  403caa:	9402      	str	r4, [sp, #8]
  403cac:	9401      	str	r4, [sp, #4]
  403cae:	9400      	str	r4, [sp, #0]
  403cb0:	4623      	mov	r3, r4
  403cb2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403cb6:	4960      	ldr	r1, [pc, #384]	; (403e38 <main+0x238>)
  403cb8:	4860      	ldr	r0, [pc, #384]	; (403e3c <main+0x23c>)
  403cba:	4c61      	ldr	r4, [pc, #388]	; (403e40 <main+0x240>)
  403cbc:	47a0      	blx	r4
  403cbe:	2801      	cmp	r0, #1
  403cc0:	d002      	beq.n	403cc8 <main+0xc8>
		printf("Failed to create oled task\r\n");
  403cc2:	4860      	ldr	r0, [pc, #384]	; (403e44 <main+0x244>)
  403cc4:	4b56      	ldr	r3, [pc, #344]	; (403e20 <main+0x220>)
  403cc6:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_sensor, "sensor", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403cc8:	2300      	movs	r3, #0
  403cca:	9303      	str	r3, [sp, #12]
  403ccc:	9302      	str	r3, [sp, #8]
  403cce:	9301      	str	r3, [sp, #4]
  403cd0:	9300      	str	r3, [sp, #0]
  403cd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403cd6:	495c      	ldr	r1, [pc, #368]	; (403e48 <main+0x248>)
  403cd8:	485c      	ldr	r0, [pc, #368]	; (403e4c <main+0x24c>)
  403cda:	4c59      	ldr	r4, [pc, #356]	; (403e40 <main+0x240>)
  403cdc:	47a0      	blx	r4
  403cde:	2801      	cmp	r0, #1
  403ce0:	d002      	beq.n	403ce8 <main+0xe8>
		printf("Failed to create sensor task\r\n");
  403ce2:	485b      	ldr	r0, [pc, #364]	; (403e50 <main+0x250>)
  403ce4:	4b4e      	ldr	r3, [pc, #312]	; (403e20 <main+0x220>)
  403ce6:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_rtt, "rtt", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403ce8:	2300      	movs	r3, #0
  403cea:	9303      	str	r3, [sp, #12]
  403cec:	9302      	str	r3, [sp, #8]
  403cee:	9301      	str	r3, [sp, #4]
  403cf0:	9300      	str	r3, [sp, #0]
  403cf2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403cf6:	4957      	ldr	r1, [pc, #348]	; (403e54 <main+0x254>)
  403cf8:	4857      	ldr	r0, [pc, #348]	; (403e58 <main+0x258>)
  403cfa:	4c51      	ldr	r4, [pc, #324]	; (403e40 <main+0x240>)
  403cfc:	47a0      	blx	r4
  403cfe:	2801      	cmp	r0, #1
  403d00:	d002      	beq.n	403d08 <main+0x108>
		printf("Failed to create rtt task\r\n");
  403d02:	4856      	ldr	r0, [pc, #344]	; (403e5c <main+0x25c>)
  403d04:	4b46      	ldr	r3, [pc, #280]	; (403e20 <main+0x220>)
  403d06:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_tc, "tc", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403d08:	2300      	movs	r3, #0
  403d0a:	9303      	str	r3, [sp, #12]
  403d0c:	9302      	str	r3, [sp, #8]
  403d0e:	9301      	str	r3, [sp, #4]
  403d10:	9300      	str	r3, [sp, #0]
  403d12:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403d16:	4952      	ldr	r1, [pc, #328]	; (403e60 <main+0x260>)
  403d18:	4852      	ldr	r0, [pc, #328]	; (403e64 <main+0x264>)
  403d1a:	4c49      	ldr	r4, [pc, #292]	; (403e40 <main+0x240>)
  403d1c:	47a0      	blx	r4
  403d1e:	2801      	cmp	r0, #1
  403d20:	d002      	beq.n	403d28 <main+0x128>
		printf("Failed to create tc task\r\n");
  403d22:	4851      	ldr	r0, [pc, #324]	; (403e68 <main+0x268>)
  403d24:	4b3e      	ldr	r3, [pc, #248]	; (403e20 <main+0x220>)
  403d26:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_rtc, "rtc", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403d28:	2300      	movs	r3, #0
  403d2a:	9303      	str	r3, [sp, #12]
  403d2c:	9302      	str	r3, [sp, #8]
  403d2e:	9301      	str	r3, [sp, #4]
  403d30:	9300      	str	r3, [sp, #0]
  403d32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403d36:	494d      	ldr	r1, [pc, #308]	; (403e6c <main+0x26c>)
  403d38:	484d      	ldr	r0, [pc, #308]	; (403e70 <main+0x270>)
  403d3a:	4c41      	ldr	r4, [pc, #260]	; (403e40 <main+0x240>)
  403d3c:	47a0      	blx	r4
  403d3e:	2801      	cmp	r0, #1
  403d40:	d002      	beq.n	403d48 <main+0x148>
		printf("Failed to create rtc task\r\n");
  403d42:	484c      	ldr	r0, [pc, #304]	; (403e74 <main+0x274>)
  403d44:	4b36      	ldr	r3, [pc, #216]	; (403e20 <main+0x220>)
  403d46:	4798      	blx	r3
	}
	
	if (xSemaphoreRTT == NULL){
  403d48:	4b38      	ldr	r3, [pc, #224]	; (403e2c <main+0x22c>)
  403d4a:	681b      	ldr	r3, [r3, #0]
  403d4c:	2b00      	cmp	r3, #0
  403d4e:	d037      	beq.n	403dc0 <main+0x1c0>
		printf("Failed to create semaphore RTT\n");
	}
	if (xSemaphoreTC == NULL){
  403d50:	4b38      	ldr	r3, [pc, #224]	; (403e34 <main+0x234>)
  403d52:	681b      	ldr	r3, [r3, #0]
  403d54:	2b00      	cmp	r3, #0
  403d56:	d037      	beq.n	403dc8 <main+0x1c8>
		printf("Failed to create semaphore TC\n");
	}
	if (xSemaphoreRTC == NULL){
  403d58:	4b35      	ldr	r3, [pc, #212]	; (403e30 <main+0x230>)
  403d5a:	681b      	ldr	r3, [r3, #0]
  403d5c:	2b00      	cmp	r3, #0
  403d5e:	d037      	beq.n	403dd0 <main+0x1d0>

		printf("Failed to create semaphore RTC\n");
	}

	TC_init(TC2, ID_TC7, 1, 4);
  403d60:	4d45      	ldr	r5, [pc, #276]	; (403e78 <main+0x278>)
  403d62:	2304      	movs	r3, #4
  403d64:	2201      	movs	r2, #1
  403d66:	2130      	movs	r1, #48	; 0x30
  403d68:	4628      	mov	r0, r5
  403d6a:	4c44      	ldr	r4, [pc, #272]	; (403e7c <main+0x27c>)
  403d6c:	47a0      	blx	r4
	tc_start(TC2, 1);
  403d6e:	2101      	movs	r1, #1
  403d70:	4628      	mov	r0, r5
  403d72:	4b43      	ldr	r3, [pc, #268]	; (403e80 <main+0x280>)
  403d74:	4798      	blx	r3
	
	TC_init(TC1, ID_TC4, 1, 4);
  403d76:	2304      	movs	r3, #4
  403d78:	2201      	movs	r2, #1
  403d7a:	211b      	movs	r1, #27
  403d7c:	4841      	ldr	r0, [pc, #260]	; (403e84 <main+0x284>)
  403d7e:	47a0      	blx	r4
	
	
	RTT_init(4, 16, RTT_MR_ALMIEN);
  403d80:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403d84:	2010      	movs	r0, #16
  403d86:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  403d8a:	4b3f      	ldr	r3, [pc, #252]	; (403e88 <main+0x288>)
  403d8c:	4798      	blx	r3
	calendar rtc_initial = {2023, 4, 24, 17, 8, 55 ,1};
  403d8e:	ac0d      	add	r4, sp, #52	; 0x34
  403d90:	4d3e      	ldr	r5, [pc, #248]	; (403e8c <main+0x28c>)
  403d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403d96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_SECEN);
  403d9e:	2304      	movs	r3, #4
  403da0:	9305      	str	r3, [sp, #20]
  403da2:	466c      	mov	r4, sp
  403da4:	ad0f      	add	r5, sp, #60	; 0x3c
  403da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403daa:	682b      	ldr	r3, [r5, #0]
  403dac:	6023      	str	r3, [r4, #0]
  403dae:	ab0d      	add	r3, sp, #52	; 0x34
  403db0:	cb0c      	ldmia	r3, {r2, r3}
  403db2:	2102      	movs	r1, #2
  403db4:	4836      	ldr	r0, [pc, #216]	; (403e90 <main+0x290>)
  403db6:	4c37      	ldr	r4, [pc, #220]	; (403e94 <main+0x294>)
  403db8:	47a0      	blx	r4
	/* Start the scheduler. */
	vTaskStartScheduler();
  403dba:	4b37      	ldr	r3, [pc, #220]	; (403e98 <main+0x298>)
  403dbc:	4798      	blx	r3
  403dbe:	e7fe      	b.n	403dbe <main+0x1be>
		printf("Failed to create semaphore RTT\n");
  403dc0:	4836      	ldr	r0, [pc, #216]	; (403e9c <main+0x29c>)
  403dc2:	4b17      	ldr	r3, [pc, #92]	; (403e20 <main+0x220>)
  403dc4:	4798      	blx	r3
  403dc6:	e7c3      	b.n	403d50 <main+0x150>
		printf("Failed to create semaphore TC\n");
  403dc8:	4835      	ldr	r0, [pc, #212]	; (403ea0 <main+0x2a0>)
  403dca:	4b15      	ldr	r3, [pc, #84]	; (403e20 <main+0x220>)
  403dcc:	4798      	blx	r3
  403dce:	e7c3      	b.n	403d58 <main+0x158>
		printf("Failed to create semaphore RTC\n");
  403dd0:	4834      	ldr	r0, [pc, #208]	; (403ea4 <main+0x2a4>)
  403dd2:	4b13      	ldr	r3, [pc, #76]	; (403e20 <main+0x220>)
  403dd4:	4798      	blx	r3
  403dd6:	e7c3      	b.n	403d60 <main+0x160>
  403dd8:	00400bc1 	.word	0x00400bc1
  403ddc:	00400cbd 	.word	0x00400cbd
  403de0:	00403b21 	.word	0x00403b21
  403de4:	00403b91 	.word	0x00403b91
  403de8:	40028000 	.word	0x40028000
  403dec:	20400df4 	.word	0x20400df4
  403df0:	00403685 	.word	0x00403685
  403df4:	20400df0 	.word	0x20400df0
  403df8:	004035a9 	.word	0x004035a9
  403dfc:	20400dec 	.word	0x20400dec
  403e00:	00401261 	.word	0x00401261
  403e04:	08f0d180 	.word	0x08f0d180
  403e08:	00401371 	.word	0x00401371
  403e0c:	004013c5 	.word	0x004013c5
  403e10:	004013cb 	.word	0x004013cb
  403e14:	20400028 	.word	0x20400028
  403e18:	00404759 	.word	0x00404759
  403e1c:	0040b030 	.word	0x0040b030
  403e20:	00404725 	.word	0x00404725
  403e24:	400e1850 	.word	0x400e1850
  403e28:	00401d1d 	.word	0x00401d1d
  403e2c:	20400e4c 	.word	0x20400e4c
  403e30:	20400e48 	.word	0x20400e48
  403e34:	20400e54 	.word	0x20400e54
  403e38:	0040b038 	.word	0x0040b038
  403e3c:	004034d9 	.word	0x004034d9
  403e40:	0040243d 	.word	0x0040243d
  403e44:	0040b040 	.word	0x0040b040
  403e48:	0040b05c 	.word	0x0040b05c
  403e4c:	004034a1 	.word	0x004034a1
  403e50:	0040b064 	.word	0x0040b064
  403e54:	0040b084 	.word	0x0040b084
  403e58:	00403ad9 	.word	0x00403ad9
  403e5c:	0040b088 	.word	0x0040b088
  403e60:	0040b0a4 	.word	0x0040b0a4
  403e64:	00403aa1 	.word	0x00403aa1
  403e68:	0040b0a8 	.word	0x0040b0a8
  403e6c:	0040b0c4 	.word	0x0040b0c4
  403e70:	00403a69 	.word	0x00403a69
  403e74:	0040b0c8 	.word	0x0040b0c8
  403e78:	40014000 	.word	0x40014000
  403e7c:	00403891 	.word	0x00403891
  403e80:	00400599 	.word	0x00400599
  403e84:	40010000 	.word	0x40010000
  403e88:	004033e9 	.word	0x004033e9
  403e8c:	0040b00c 	.word	0x0040b00c
  403e90:	400e1860 	.word	0x400e1860
  403e94:	00403949 	.word	0x00403949
  403e98:	00402671 	.word	0x00402671
  403e9c:	0040b0e4 	.word	0x0040b0e4
  403ea0:	0040b104 	.word	0x0040b104
  403ea4:	0040b124 	.word	0x0040b124

00403ea8 <__libc_init_array>:
  403ea8:	b570      	push	{r4, r5, r6, lr}
  403eaa:	4e0f      	ldr	r6, [pc, #60]	; (403ee8 <__libc_init_array+0x40>)
  403eac:	4d0f      	ldr	r5, [pc, #60]	; (403eec <__libc_init_array+0x44>)
  403eae:	1b76      	subs	r6, r6, r5
  403eb0:	10b6      	asrs	r6, r6, #2
  403eb2:	bf18      	it	ne
  403eb4:	2400      	movne	r4, #0
  403eb6:	d005      	beq.n	403ec4 <__libc_init_array+0x1c>
  403eb8:	3401      	adds	r4, #1
  403eba:	f855 3b04 	ldr.w	r3, [r5], #4
  403ebe:	4798      	blx	r3
  403ec0:	42a6      	cmp	r6, r4
  403ec2:	d1f9      	bne.n	403eb8 <__libc_init_array+0x10>
  403ec4:	4e0a      	ldr	r6, [pc, #40]	; (403ef0 <__libc_init_array+0x48>)
  403ec6:	4d0b      	ldr	r5, [pc, #44]	; (403ef4 <__libc_init_array+0x4c>)
  403ec8:	1b76      	subs	r6, r6, r5
  403eca:	f007 fa9f 	bl	40b40c <_init>
  403ece:	10b6      	asrs	r6, r6, #2
  403ed0:	bf18      	it	ne
  403ed2:	2400      	movne	r4, #0
  403ed4:	d006      	beq.n	403ee4 <__libc_init_array+0x3c>
  403ed6:	3401      	adds	r4, #1
  403ed8:	f855 3b04 	ldr.w	r3, [r5], #4
  403edc:	4798      	blx	r3
  403ede:	42a6      	cmp	r6, r4
  403ee0:	d1f9      	bne.n	403ed6 <__libc_init_array+0x2e>
  403ee2:	bd70      	pop	{r4, r5, r6, pc}
  403ee4:	bd70      	pop	{r4, r5, r6, pc}
  403ee6:	bf00      	nop
  403ee8:	0040b418 	.word	0x0040b418
  403eec:	0040b418 	.word	0x0040b418
  403ef0:	0040b420 	.word	0x0040b420
  403ef4:	0040b418 	.word	0x0040b418

00403ef8 <malloc>:
  403ef8:	4b02      	ldr	r3, [pc, #8]	; (403f04 <malloc+0xc>)
  403efa:	4601      	mov	r1, r0
  403efc:	6818      	ldr	r0, [r3, #0]
  403efe:	f000 b80b 	b.w	403f18 <_malloc_r>
  403f02:	bf00      	nop
  403f04:	20400028 	.word	0x20400028

00403f08 <free>:
  403f08:	4b02      	ldr	r3, [pc, #8]	; (403f14 <free+0xc>)
  403f0a:	4601      	mov	r1, r0
  403f0c:	6818      	ldr	r0, [r3, #0]
  403f0e:	f004 bcef 	b.w	4088f0 <_free_r>
  403f12:	bf00      	nop
  403f14:	20400028 	.word	0x20400028

00403f18 <_malloc_r>:
  403f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f1c:	f101 060b 	add.w	r6, r1, #11
  403f20:	2e16      	cmp	r6, #22
  403f22:	b083      	sub	sp, #12
  403f24:	4605      	mov	r5, r0
  403f26:	f240 809e 	bls.w	404066 <_malloc_r+0x14e>
  403f2a:	f036 0607 	bics.w	r6, r6, #7
  403f2e:	f100 80bd 	bmi.w	4040ac <_malloc_r+0x194>
  403f32:	42b1      	cmp	r1, r6
  403f34:	f200 80ba 	bhi.w	4040ac <_malloc_r+0x194>
  403f38:	f000 fb86 	bl	404648 <__malloc_lock>
  403f3c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403f40:	f0c0 8293 	bcc.w	40446a <_malloc_r+0x552>
  403f44:	0a73      	lsrs	r3, r6, #9
  403f46:	f000 80b8 	beq.w	4040ba <_malloc_r+0x1a2>
  403f4a:	2b04      	cmp	r3, #4
  403f4c:	f200 8179 	bhi.w	404242 <_malloc_r+0x32a>
  403f50:	09b3      	lsrs	r3, r6, #6
  403f52:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403f56:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403f5a:	00c3      	lsls	r3, r0, #3
  403f5c:	4fbf      	ldr	r7, [pc, #764]	; (40425c <_malloc_r+0x344>)
  403f5e:	443b      	add	r3, r7
  403f60:	f1a3 0108 	sub.w	r1, r3, #8
  403f64:	685c      	ldr	r4, [r3, #4]
  403f66:	42a1      	cmp	r1, r4
  403f68:	d106      	bne.n	403f78 <_malloc_r+0x60>
  403f6a:	e00c      	b.n	403f86 <_malloc_r+0x6e>
  403f6c:	2a00      	cmp	r2, #0
  403f6e:	f280 80aa 	bge.w	4040c6 <_malloc_r+0x1ae>
  403f72:	68e4      	ldr	r4, [r4, #12]
  403f74:	42a1      	cmp	r1, r4
  403f76:	d006      	beq.n	403f86 <_malloc_r+0x6e>
  403f78:	6863      	ldr	r3, [r4, #4]
  403f7a:	f023 0303 	bic.w	r3, r3, #3
  403f7e:	1b9a      	subs	r2, r3, r6
  403f80:	2a0f      	cmp	r2, #15
  403f82:	ddf3      	ble.n	403f6c <_malloc_r+0x54>
  403f84:	4670      	mov	r0, lr
  403f86:	693c      	ldr	r4, [r7, #16]
  403f88:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404270 <_malloc_r+0x358>
  403f8c:	4574      	cmp	r4, lr
  403f8e:	f000 81ab 	beq.w	4042e8 <_malloc_r+0x3d0>
  403f92:	6863      	ldr	r3, [r4, #4]
  403f94:	f023 0303 	bic.w	r3, r3, #3
  403f98:	1b9a      	subs	r2, r3, r6
  403f9a:	2a0f      	cmp	r2, #15
  403f9c:	f300 8190 	bgt.w	4042c0 <_malloc_r+0x3a8>
  403fa0:	2a00      	cmp	r2, #0
  403fa2:	f8c7 e014 	str.w	lr, [r7, #20]
  403fa6:	f8c7 e010 	str.w	lr, [r7, #16]
  403faa:	f280 809d 	bge.w	4040e8 <_malloc_r+0x1d0>
  403fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403fb2:	f080 8161 	bcs.w	404278 <_malloc_r+0x360>
  403fb6:	08db      	lsrs	r3, r3, #3
  403fb8:	f103 0c01 	add.w	ip, r3, #1
  403fbc:	1099      	asrs	r1, r3, #2
  403fbe:	687a      	ldr	r2, [r7, #4]
  403fc0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403fc4:	f8c4 8008 	str.w	r8, [r4, #8]
  403fc8:	2301      	movs	r3, #1
  403fca:	408b      	lsls	r3, r1
  403fcc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403fd0:	4313      	orrs	r3, r2
  403fd2:	3908      	subs	r1, #8
  403fd4:	60e1      	str	r1, [r4, #12]
  403fd6:	607b      	str	r3, [r7, #4]
  403fd8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403fdc:	f8c8 400c 	str.w	r4, [r8, #12]
  403fe0:	1082      	asrs	r2, r0, #2
  403fe2:	2401      	movs	r4, #1
  403fe4:	4094      	lsls	r4, r2
  403fe6:	429c      	cmp	r4, r3
  403fe8:	f200 808b 	bhi.w	404102 <_malloc_r+0x1ea>
  403fec:	421c      	tst	r4, r3
  403fee:	d106      	bne.n	403ffe <_malloc_r+0xe6>
  403ff0:	f020 0003 	bic.w	r0, r0, #3
  403ff4:	0064      	lsls	r4, r4, #1
  403ff6:	421c      	tst	r4, r3
  403ff8:	f100 0004 	add.w	r0, r0, #4
  403ffc:	d0fa      	beq.n	403ff4 <_malloc_r+0xdc>
  403ffe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404002:	46cc      	mov	ip, r9
  404004:	4680      	mov	r8, r0
  404006:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40400a:	459c      	cmp	ip, r3
  40400c:	d107      	bne.n	40401e <_malloc_r+0x106>
  40400e:	e16d      	b.n	4042ec <_malloc_r+0x3d4>
  404010:	2a00      	cmp	r2, #0
  404012:	f280 817b 	bge.w	40430c <_malloc_r+0x3f4>
  404016:	68db      	ldr	r3, [r3, #12]
  404018:	459c      	cmp	ip, r3
  40401a:	f000 8167 	beq.w	4042ec <_malloc_r+0x3d4>
  40401e:	6859      	ldr	r1, [r3, #4]
  404020:	f021 0103 	bic.w	r1, r1, #3
  404024:	1b8a      	subs	r2, r1, r6
  404026:	2a0f      	cmp	r2, #15
  404028:	ddf2      	ble.n	404010 <_malloc_r+0xf8>
  40402a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40402e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404032:	9300      	str	r3, [sp, #0]
  404034:	199c      	adds	r4, r3, r6
  404036:	4628      	mov	r0, r5
  404038:	f046 0601 	orr.w	r6, r6, #1
  40403c:	f042 0501 	orr.w	r5, r2, #1
  404040:	605e      	str	r6, [r3, #4]
  404042:	f8c8 c00c 	str.w	ip, [r8, #12]
  404046:	f8cc 8008 	str.w	r8, [ip, #8]
  40404a:	617c      	str	r4, [r7, #20]
  40404c:	613c      	str	r4, [r7, #16]
  40404e:	f8c4 e00c 	str.w	lr, [r4, #12]
  404052:	f8c4 e008 	str.w	lr, [r4, #8]
  404056:	6065      	str	r5, [r4, #4]
  404058:	505a      	str	r2, [r3, r1]
  40405a:	f000 fafb 	bl	404654 <__malloc_unlock>
  40405e:	9b00      	ldr	r3, [sp, #0]
  404060:	f103 0408 	add.w	r4, r3, #8
  404064:	e01e      	b.n	4040a4 <_malloc_r+0x18c>
  404066:	2910      	cmp	r1, #16
  404068:	d820      	bhi.n	4040ac <_malloc_r+0x194>
  40406a:	f000 faed 	bl	404648 <__malloc_lock>
  40406e:	2610      	movs	r6, #16
  404070:	2318      	movs	r3, #24
  404072:	2002      	movs	r0, #2
  404074:	4f79      	ldr	r7, [pc, #484]	; (40425c <_malloc_r+0x344>)
  404076:	443b      	add	r3, r7
  404078:	f1a3 0208 	sub.w	r2, r3, #8
  40407c:	685c      	ldr	r4, [r3, #4]
  40407e:	4294      	cmp	r4, r2
  404080:	f000 813d 	beq.w	4042fe <_malloc_r+0x3e6>
  404084:	6863      	ldr	r3, [r4, #4]
  404086:	68e1      	ldr	r1, [r4, #12]
  404088:	68a6      	ldr	r6, [r4, #8]
  40408a:	f023 0303 	bic.w	r3, r3, #3
  40408e:	4423      	add	r3, r4
  404090:	4628      	mov	r0, r5
  404092:	685a      	ldr	r2, [r3, #4]
  404094:	60f1      	str	r1, [r6, #12]
  404096:	f042 0201 	orr.w	r2, r2, #1
  40409a:	608e      	str	r6, [r1, #8]
  40409c:	605a      	str	r2, [r3, #4]
  40409e:	f000 fad9 	bl	404654 <__malloc_unlock>
  4040a2:	3408      	adds	r4, #8
  4040a4:	4620      	mov	r0, r4
  4040a6:	b003      	add	sp, #12
  4040a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ac:	2400      	movs	r4, #0
  4040ae:	230c      	movs	r3, #12
  4040b0:	4620      	mov	r0, r4
  4040b2:	602b      	str	r3, [r5, #0]
  4040b4:	b003      	add	sp, #12
  4040b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ba:	2040      	movs	r0, #64	; 0x40
  4040bc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4040c0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4040c4:	e74a      	b.n	403f5c <_malloc_r+0x44>
  4040c6:	4423      	add	r3, r4
  4040c8:	68e1      	ldr	r1, [r4, #12]
  4040ca:	685a      	ldr	r2, [r3, #4]
  4040cc:	68a6      	ldr	r6, [r4, #8]
  4040ce:	f042 0201 	orr.w	r2, r2, #1
  4040d2:	60f1      	str	r1, [r6, #12]
  4040d4:	4628      	mov	r0, r5
  4040d6:	608e      	str	r6, [r1, #8]
  4040d8:	605a      	str	r2, [r3, #4]
  4040da:	f000 fabb 	bl	404654 <__malloc_unlock>
  4040de:	3408      	adds	r4, #8
  4040e0:	4620      	mov	r0, r4
  4040e2:	b003      	add	sp, #12
  4040e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040e8:	4423      	add	r3, r4
  4040ea:	4628      	mov	r0, r5
  4040ec:	685a      	ldr	r2, [r3, #4]
  4040ee:	f042 0201 	orr.w	r2, r2, #1
  4040f2:	605a      	str	r2, [r3, #4]
  4040f4:	f000 faae 	bl	404654 <__malloc_unlock>
  4040f8:	3408      	adds	r4, #8
  4040fa:	4620      	mov	r0, r4
  4040fc:	b003      	add	sp, #12
  4040fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404102:	68bc      	ldr	r4, [r7, #8]
  404104:	6863      	ldr	r3, [r4, #4]
  404106:	f023 0803 	bic.w	r8, r3, #3
  40410a:	45b0      	cmp	r8, r6
  40410c:	d304      	bcc.n	404118 <_malloc_r+0x200>
  40410e:	eba8 0306 	sub.w	r3, r8, r6
  404112:	2b0f      	cmp	r3, #15
  404114:	f300 8085 	bgt.w	404222 <_malloc_r+0x30a>
  404118:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404274 <_malloc_r+0x35c>
  40411c:	4b50      	ldr	r3, [pc, #320]	; (404260 <_malloc_r+0x348>)
  40411e:	f8d9 2000 	ldr.w	r2, [r9]
  404122:	681b      	ldr	r3, [r3, #0]
  404124:	3201      	adds	r2, #1
  404126:	4433      	add	r3, r6
  404128:	eb04 0a08 	add.w	sl, r4, r8
  40412c:	f000 8155 	beq.w	4043da <_malloc_r+0x4c2>
  404130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404134:	330f      	adds	r3, #15
  404136:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40413a:	f02b 0b0f 	bic.w	fp, fp, #15
  40413e:	4659      	mov	r1, fp
  404140:	4628      	mov	r0, r5
  404142:	f000 faf7 	bl	404734 <_sbrk_r>
  404146:	1c41      	adds	r1, r0, #1
  404148:	4602      	mov	r2, r0
  40414a:	f000 80fc 	beq.w	404346 <_malloc_r+0x42e>
  40414e:	4582      	cmp	sl, r0
  404150:	f200 80f7 	bhi.w	404342 <_malloc_r+0x42a>
  404154:	4b43      	ldr	r3, [pc, #268]	; (404264 <_malloc_r+0x34c>)
  404156:	6819      	ldr	r1, [r3, #0]
  404158:	4459      	add	r1, fp
  40415a:	6019      	str	r1, [r3, #0]
  40415c:	f000 814d 	beq.w	4043fa <_malloc_r+0x4e2>
  404160:	f8d9 0000 	ldr.w	r0, [r9]
  404164:	3001      	adds	r0, #1
  404166:	bf1b      	ittet	ne
  404168:	eba2 0a0a 	subne.w	sl, r2, sl
  40416c:	4451      	addne	r1, sl
  40416e:	f8c9 2000 	streq.w	r2, [r9]
  404172:	6019      	strne	r1, [r3, #0]
  404174:	f012 0107 	ands.w	r1, r2, #7
  404178:	f000 8115 	beq.w	4043a6 <_malloc_r+0x48e>
  40417c:	f1c1 0008 	rsb	r0, r1, #8
  404180:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404184:	4402      	add	r2, r0
  404186:	3108      	adds	r1, #8
  404188:	eb02 090b 	add.w	r9, r2, fp
  40418c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404190:	eba1 0909 	sub.w	r9, r1, r9
  404194:	4649      	mov	r1, r9
  404196:	4628      	mov	r0, r5
  404198:	9301      	str	r3, [sp, #4]
  40419a:	9200      	str	r2, [sp, #0]
  40419c:	f000 faca 	bl	404734 <_sbrk_r>
  4041a0:	1c43      	adds	r3, r0, #1
  4041a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4041a6:	f000 8143 	beq.w	404430 <_malloc_r+0x518>
  4041aa:	1a80      	subs	r0, r0, r2
  4041ac:	4448      	add	r0, r9
  4041ae:	f040 0001 	orr.w	r0, r0, #1
  4041b2:	6819      	ldr	r1, [r3, #0]
  4041b4:	60ba      	str	r2, [r7, #8]
  4041b6:	4449      	add	r1, r9
  4041b8:	42bc      	cmp	r4, r7
  4041ba:	6050      	str	r0, [r2, #4]
  4041bc:	6019      	str	r1, [r3, #0]
  4041be:	d017      	beq.n	4041f0 <_malloc_r+0x2d8>
  4041c0:	f1b8 0f0f 	cmp.w	r8, #15
  4041c4:	f240 80fb 	bls.w	4043be <_malloc_r+0x4a6>
  4041c8:	6860      	ldr	r0, [r4, #4]
  4041ca:	f1a8 020c 	sub.w	r2, r8, #12
  4041ce:	f022 0207 	bic.w	r2, r2, #7
  4041d2:	eb04 0e02 	add.w	lr, r4, r2
  4041d6:	f000 0001 	and.w	r0, r0, #1
  4041da:	f04f 0c05 	mov.w	ip, #5
  4041de:	4310      	orrs	r0, r2
  4041e0:	2a0f      	cmp	r2, #15
  4041e2:	6060      	str	r0, [r4, #4]
  4041e4:	f8ce c004 	str.w	ip, [lr, #4]
  4041e8:	f8ce c008 	str.w	ip, [lr, #8]
  4041ec:	f200 8117 	bhi.w	40441e <_malloc_r+0x506>
  4041f0:	4b1d      	ldr	r3, [pc, #116]	; (404268 <_malloc_r+0x350>)
  4041f2:	68bc      	ldr	r4, [r7, #8]
  4041f4:	681a      	ldr	r2, [r3, #0]
  4041f6:	4291      	cmp	r1, r2
  4041f8:	bf88      	it	hi
  4041fa:	6019      	strhi	r1, [r3, #0]
  4041fc:	4b1b      	ldr	r3, [pc, #108]	; (40426c <_malloc_r+0x354>)
  4041fe:	681a      	ldr	r2, [r3, #0]
  404200:	4291      	cmp	r1, r2
  404202:	6862      	ldr	r2, [r4, #4]
  404204:	bf88      	it	hi
  404206:	6019      	strhi	r1, [r3, #0]
  404208:	f022 0203 	bic.w	r2, r2, #3
  40420c:	4296      	cmp	r6, r2
  40420e:	eba2 0306 	sub.w	r3, r2, r6
  404212:	d801      	bhi.n	404218 <_malloc_r+0x300>
  404214:	2b0f      	cmp	r3, #15
  404216:	dc04      	bgt.n	404222 <_malloc_r+0x30a>
  404218:	4628      	mov	r0, r5
  40421a:	f000 fa1b 	bl	404654 <__malloc_unlock>
  40421e:	2400      	movs	r4, #0
  404220:	e740      	b.n	4040a4 <_malloc_r+0x18c>
  404222:	19a2      	adds	r2, r4, r6
  404224:	f043 0301 	orr.w	r3, r3, #1
  404228:	f046 0601 	orr.w	r6, r6, #1
  40422c:	6066      	str	r6, [r4, #4]
  40422e:	4628      	mov	r0, r5
  404230:	60ba      	str	r2, [r7, #8]
  404232:	6053      	str	r3, [r2, #4]
  404234:	f000 fa0e 	bl	404654 <__malloc_unlock>
  404238:	3408      	adds	r4, #8
  40423a:	4620      	mov	r0, r4
  40423c:	b003      	add	sp, #12
  40423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404242:	2b14      	cmp	r3, #20
  404244:	d971      	bls.n	40432a <_malloc_r+0x412>
  404246:	2b54      	cmp	r3, #84	; 0x54
  404248:	f200 80a3 	bhi.w	404392 <_malloc_r+0x47a>
  40424c:	0b33      	lsrs	r3, r6, #12
  40424e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404252:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404256:	00c3      	lsls	r3, r0, #3
  404258:	e680      	b.n	403f5c <_malloc_r+0x44>
  40425a:	bf00      	nop
  40425c:	20400458 	.word	0x20400458
  404260:	20400de8 	.word	0x20400de8
  404264:	20400db8 	.word	0x20400db8
  404268:	20400de0 	.word	0x20400de0
  40426c:	20400de4 	.word	0x20400de4
  404270:	20400460 	.word	0x20400460
  404274:	20400860 	.word	0x20400860
  404278:	0a5a      	lsrs	r2, r3, #9
  40427a:	2a04      	cmp	r2, #4
  40427c:	d95b      	bls.n	404336 <_malloc_r+0x41e>
  40427e:	2a14      	cmp	r2, #20
  404280:	f200 80ae 	bhi.w	4043e0 <_malloc_r+0x4c8>
  404284:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404288:	00c9      	lsls	r1, r1, #3
  40428a:	325b      	adds	r2, #91	; 0x5b
  40428c:	eb07 0c01 	add.w	ip, r7, r1
  404290:	5879      	ldr	r1, [r7, r1]
  404292:	f1ac 0c08 	sub.w	ip, ip, #8
  404296:	458c      	cmp	ip, r1
  404298:	f000 8088 	beq.w	4043ac <_malloc_r+0x494>
  40429c:	684a      	ldr	r2, [r1, #4]
  40429e:	f022 0203 	bic.w	r2, r2, #3
  4042a2:	4293      	cmp	r3, r2
  4042a4:	d273      	bcs.n	40438e <_malloc_r+0x476>
  4042a6:	6889      	ldr	r1, [r1, #8]
  4042a8:	458c      	cmp	ip, r1
  4042aa:	d1f7      	bne.n	40429c <_malloc_r+0x384>
  4042ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4042b0:	687b      	ldr	r3, [r7, #4]
  4042b2:	60e2      	str	r2, [r4, #12]
  4042b4:	f8c4 c008 	str.w	ip, [r4, #8]
  4042b8:	6094      	str	r4, [r2, #8]
  4042ba:	f8cc 400c 	str.w	r4, [ip, #12]
  4042be:	e68f      	b.n	403fe0 <_malloc_r+0xc8>
  4042c0:	19a1      	adds	r1, r4, r6
  4042c2:	f046 0c01 	orr.w	ip, r6, #1
  4042c6:	f042 0601 	orr.w	r6, r2, #1
  4042ca:	f8c4 c004 	str.w	ip, [r4, #4]
  4042ce:	4628      	mov	r0, r5
  4042d0:	6179      	str	r1, [r7, #20]
  4042d2:	6139      	str	r1, [r7, #16]
  4042d4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4042d8:	f8c1 e008 	str.w	lr, [r1, #8]
  4042dc:	604e      	str	r6, [r1, #4]
  4042de:	50e2      	str	r2, [r4, r3]
  4042e0:	f000 f9b8 	bl	404654 <__malloc_unlock>
  4042e4:	3408      	adds	r4, #8
  4042e6:	e6dd      	b.n	4040a4 <_malloc_r+0x18c>
  4042e8:	687b      	ldr	r3, [r7, #4]
  4042ea:	e679      	b.n	403fe0 <_malloc_r+0xc8>
  4042ec:	f108 0801 	add.w	r8, r8, #1
  4042f0:	f018 0f03 	tst.w	r8, #3
  4042f4:	f10c 0c08 	add.w	ip, ip, #8
  4042f8:	f47f ae85 	bne.w	404006 <_malloc_r+0xee>
  4042fc:	e02d      	b.n	40435a <_malloc_r+0x442>
  4042fe:	68dc      	ldr	r4, [r3, #12]
  404300:	42a3      	cmp	r3, r4
  404302:	bf08      	it	eq
  404304:	3002      	addeq	r0, #2
  404306:	f43f ae3e 	beq.w	403f86 <_malloc_r+0x6e>
  40430a:	e6bb      	b.n	404084 <_malloc_r+0x16c>
  40430c:	4419      	add	r1, r3
  40430e:	461c      	mov	r4, r3
  404310:	684a      	ldr	r2, [r1, #4]
  404312:	68db      	ldr	r3, [r3, #12]
  404314:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404318:	f042 0201 	orr.w	r2, r2, #1
  40431c:	604a      	str	r2, [r1, #4]
  40431e:	4628      	mov	r0, r5
  404320:	60f3      	str	r3, [r6, #12]
  404322:	609e      	str	r6, [r3, #8]
  404324:	f000 f996 	bl	404654 <__malloc_unlock>
  404328:	e6bc      	b.n	4040a4 <_malloc_r+0x18c>
  40432a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40432e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404332:	00c3      	lsls	r3, r0, #3
  404334:	e612      	b.n	403f5c <_malloc_r+0x44>
  404336:	099a      	lsrs	r2, r3, #6
  404338:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40433c:	00c9      	lsls	r1, r1, #3
  40433e:	3238      	adds	r2, #56	; 0x38
  404340:	e7a4      	b.n	40428c <_malloc_r+0x374>
  404342:	42bc      	cmp	r4, r7
  404344:	d054      	beq.n	4043f0 <_malloc_r+0x4d8>
  404346:	68bc      	ldr	r4, [r7, #8]
  404348:	6862      	ldr	r2, [r4, #4]
  40434a:	f022 0203 	bic.w	r2, r2, #3
  40434e:	e75d      	b.n	40420c <_malloc_r+0x2f4>
  404350:	f859 3908 	ldr.w	r3, [r9], #-8
  404354:	4599      	cmp	r9, r3
  404356:	f040 8086 	bne.w	404466 <_malloc_r+0x54e>
  40435a:	f010 0f03 	tst.w	r0, #3
  40435e:	f100 30ff 	add.w	r0, r0, #4294967295
  404362:	d1f5      	bne.n	404350 <_malloc_r+0x438>
  404364:	687b      	ldr	r3, [r7, #4]
  404366:	ea23 0304 	bic.w	r3, r3, r4
  40436a:	607b      	str	r3, [r7, #4]
  40436c:	0064      	lsls	r4, r4, #1
  40436e:	429c      	cmp	r4, r3
  404370:	f63f aec7 	bhi.w	404102 <_malloc_r+0x1ea>
  404374:	2c00      	cmp	r4, #0
  404376:	f43f aec4 	beq.w	404102 <_malloc_r+0x1ea>
  40437a:	421c      	tst	r4, r3
  40437c:	4640      	mov	r0, r8
  40437e:	f47f ae3e 	bne.w	403ffe <_malloc_r+0xe6>
  404382:	0064      	lsls	r4, r4, #1
  404384:	421c      	tst	r4, r3
  404386:	f100 0004 	add.w	r0, r0, #4
  40438a:	d0fa      	beq.n	404382 <_malloc_r+0x46a>
  40438c:	e637      	b.n	403ffe <_malloc_r+0xe6>
  40438e:	468c      	mov	ip, r1
  404390:	e78c      	b.n	4042ac <_malloc_r+0x394>
  404392:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404396:	d815      	bhi.n	4043c4 <_malloc_r+0x4ac>
  404398:	0bf3      	lsrs	r3, r6, #15
  40439a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40439e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4043a2:	00c3      	lsls	r3, r0, #3
  4043a4:	e5da      	b.n	403f5c <_malloc_r+0x44>
  4043a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4043aa:	e6ed      	b.n	404188 <_malloc_r+0x270>
  4043ac:	687b      	ldr	r3, [r7, #4]
  4043ae:	1092      	asrs	r2, r2, #2
  4043b0:	2101      	movs	r1, #1
  4043b2:	fa01 f202 	lsl.w	r2, r1, r2
  4043b6:	4313      	orrs	r3, r2
  4043b8:	607b      	str	r3, [r7, #4]
  4043ba:	4662      	mov	r2, ip
  4043bc:	e779      	b.n	4042b2 <_malloc_r+0x39a>
  4043be:	2301      	movs	r3, #1
  4043c0:	6053      	str	r3, [r2, #4]
  4043c2:	e729      	b.n	404218 <_malloc_r+0x300>
  4043c4:	f240 5254 	movw	r2, #1364	; 0x554
  4043c8:	4293      	cmp	r3, r2
  4043ca:	d822      	bhi.n	404412 <_malloc_r+0x4fa>
  4043cc:	0cb3      	lsrs	r3, r6, #18
  4043ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4043d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4043d6:	00c3      	lsls	r3, r0, #3
  4043d8:	e5c0      	b.n	403f5c <_malloc_r+0x44>
  4043da:	f103 0b10 	add.w	fp, r3, #16
  4043de:	e6ae      	b.n	40413e <_malloc_r+0x226>
  4043e0:	2a54      	cmp	r2, #84	; 0x54
  4043e2:	d829      	bhi.n	404438 <_malloc_r+0x520>
  4043e4:	0b1a      	lsrs	r2, r3, #12
  4043e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4043ea:	00c9      	lsls	r1, r1, #3
  4043ec:	326e      	adds	r2, #110	; 0x6e
  4043ee:	e74d      	b.n	40428c <_malloc_r+0x374>
  4043f0:	4b20      	ldr	r3, [pc, #128]	; (404474 <_malloc_r+0x55c>)
  4043f2:	6819      	ldr	r1, [r3, #0]
  4043f4:	4459      	add	r1, fp
  4043f6:	6019      	str	r1, [r3, #0]
  4043f8:	e6b2      	b.n	404160 <_malloc_r+0x248>
  4043fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4043fe:	2800      	cmp	r0, #0
  404400:	f47f aeae 	bne.w	404160 <_malloc_r+0x248>
  404404:	eb08 030b 	add.w	r3, r8, fp
  404408:	68ba      	ldr	r2, [r7, #8]
  40440a:	f043 0301 	orr.w	r3, r3, #1
  40440e:	6053      	str	r3, [r2, #4]
  404410:	e6ee      	b.n	4041f0 <_malloc_r+0x2d8>
  404412:	207f      	movs	r0, #127	; 0x7f
  404414:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404418:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40441c:	e59e      	b.n	403f5c <_malloc_r+0x44>
  40441e:	f104 0108 	add.w	r1, r4, #8
  404422:	4628      	mov	r0, r5
  404424:	9300      	str	r3, [sp, #0]
  404426:	f004 fa63 	bl	4088f0 <_free_r>
  40442a:	9b00      	ldr	r3, [sp, #0]
  40442c:	6819      	ldr	r1, [r3, #0]
  40442e:	e6df      	b.n	4041f0 <_malloc_r+0x2d8>
  404430:	2001      	movs	r0, #1
  404432:	f04f 0900 	mov.w	r9, #0
  404436:	e6bc      	b.n	4041b2 <_malloc_r+0x29a>
  404438:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40443c:	d805      	bhi.n	40444a <_malloc_r+0x532>
  40443e:	0bda      	lsrs	r2, r3, #15
  404440:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404444:	00c9      	lsls	r1, r1, #3
  404446:	3277      	adds	r2, #119	; 0x77
  404448:	e720      	b.n	40428c <_malloc_r+0x374>
  40444a:	f240 5154 	movw	r1, #1364	; 0x554
  40444e:	428a      	cmp	r2, r1
  404450:	d805      	bhi.n	40445e <_malloc_r+0x546>
  404452:	0c9a      	lsrs	r2, r3, #18
  404454:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404458:	00c9      	lsls	r1, r1, #3
  40445a:	327c      	adds	r2, #124	; 0x7c
  40445c:	e716      	b.n	40428c <_malloc_r+0x374>
  40445e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404462:	227e      	movs	r2, #126	; 0x7e
  404464:	e712      	b.n	40428c <_malloc_r+0x374>
  404466:	687b      	ldr	r3, [r7, #4]
  404468:	e780      	b.n	40436c <_malloc_r+0x454>
  40446a:	08f0      	lsrs	r0, r6, #3
  40446c:	f106 0308 	add.w	r3, r6, #8
  404470:	e600      	b.n	404074 <_malloc_r+0x15c>
  404472:	bf00      	nop
  404474:	20400db8 	.word	0x20400db8

00404478 <memcpy>:
  404478:	4684      	mov	ip, r0
  40447a:	ea41 0300 	orr.w	r3, r1, r0
  40447e:	f013 0303 	ands.w	r3, r3, #3
  404482:	d16d      	bne.n	404560 <memcpy+0xe8>
  404484:	3a40      	subs	r2, #64	; 0x40
  404486:	d341      	bcc.n	40450c <memcpy+0x94>
  404488:	f851 3b04 	ldr.w	r3, [r1], #4
  40448c:	f840 3b04 	str.w	r3, [r0], #4
  404490:	f851 3b04 	ldr.w	r3, [r1], #4
  404494:	f840 3b04 	str.w	r3, [r0], #4
  404498:	f851 3b04 	ldr.w	r3, [r1], #4
  40449c:	f840 3b04 	str.w	r3, [r0], #4
  4044a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044a4:	f840 3b04 	str.w	r3, [r0], #4
  4044a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ac:	f840 3b04 	str.w	r3, [r0], #4
  4044b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044b4:	f840 3b04 	str.w	r3, [r0], #4
  4044b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044bc:	f840 3b04 	str.w	r3, [r0], #4
  4044c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044c4:	f840 3b04 	str.w	r3, [r0], #4
  4044c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044cc:	f840 3b04 	str.w	r3, [r0], #4
  4044d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044d4:	f840 3b04 	str.w	r3, [r0], #4
  4044d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044dc:	f840 3b04 	str.w	r3, [r0], #4
  4044e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044e4:	f840 3b04 	str.w	r3, [r0], #4
  4044e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ec:	f840 3b04 	str.w	r3, [r0], #4
  4044f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044f4:	f840 3b04 	str.w	r3, [r0], #4
  4044f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044fc:	f840 3b04 	str.w	r3, [r0], #4
  404500:	f851 3b04 	ldr.w	r3, [r1], #4
  404504:	f840 3b04 	str.w	r3, [r0], #4
  404508:	3a40      	subs	r2, #64	; 0x40
  40450a:	d2bd      	bcs.n	404488 <memcpy+0x10>
  40450c:	3230      	adds	r2, #48	; 0x30
  40450e:	d311      	bcc.n	404534 <memcpy+0xbc>
  404510:	f851 3b04 	ldr.w	r3, [r1], #4
  404514:	f840 3b04 	str.w	r3, [r0], #4
  404518:	f851 3b04 	ldr.w	r3, [r1], #4
  40451c:	f840 3b04 	str.w	r3, [r0], #4
  404520:	f851 3b04 	ldr.w	r3, [r1], #4
  404524:	f840 3b04 	str.w	r3, [r0], #4
  404528:	f851 3b04 	ldr.w	r3, [r1], #4
  40452c:	f840 3b04 	str.w	r3, [r0], #4
  404530:	3a10      	subs	r2, #16
  404532:	d2ed      	bcs.n	404510 <memcpy+0x98>
  404534:	320c      	adds	r2, #12
  404536:	d305      	bcc.n	404544 <memcpy+0xcc>
  404538:	f851 3b04 	ldr.w	r3, [r1], #4
  40453c:	f840 3b04 	str.w	r3, [r0], #4
  404540:	3a04      	subs	r2, #4
  404542:	d2f9      	bcs.n	404538 <memcpy+0xc0>
  404544:	3204      	adds	r2, #4
  404546:	d008      	beq.n	40455a <memcpy+0xe2>
  404548:	07d2      	lsls	r2, r2, #31
  40454a:	bf1c      	itt	ne
  40454c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404550:	f800 3b01 	strbne.w	r3, [r0], #1
  404554:	d301      	bcc.n	40455a <memcpy+0xe2>
  404556:	880b      	ldrh	r3, [r1, #0]
  404558:	8003      	strh	r3, [r0, #0]
  40455a:	4660      	mov	r0, ip
  40455c:	4770      	bx	lr
  40455e:	bf00      	nop
  404560:	2a08      	cmp	r2, #8
  404562:	d313      	bcc.n	40458c <memcpy+0x114>
  404564:	078b      	lsls	r3, r1, #30
  404566:	d08d      	beq.n	404484 <memcpy+0xc>
  404568:	f010 0303 	ands.w	r3, r0, #3
  40456c:	d08a      	beq.n	404484 <memcpy+0xc>
  40456e:	f1c3 0304 	rsb	r3, r3, #4
  404572:	1ad2      	subs	r2, r2, r3
  404574:	07db      	lsls	r3, r3, #31
  404576:	bf1c      	itt	ne
  404578:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40457c:	f800 3b01 	strbne.w	r3, [r0], #1
  404580:	d380      	bcc.n	404484 <memcpy+0xc>
  404582:	f831 3b02 	ldrh.w	r3, [r1], #2
  404586:	f820 3b02 	strh.w	r3, [r0], #2
  40458a:	e77b      	b.n	404484 <memcpy+0xc>
  40458c:	3a04      	subs	r2, #4
  40458e:	d3d9      	bcc.n	404544 <memcpy+0xcc>
  404590:	3a01      	subs	r2, #1
  404592:	f811 3b01 	ldrb.w	r3, [r1], #1
  404596:	f800 3b01 	strb.w	r3, [r0], #1
  40459a:	d2f9      	bcs.n	404590 <memcpy+0x118>
  40459c:	780b      	ldrb	r3, [r1, #0]
  40459e:	7003      	strb	r3, [r0, #0]
  4045a0:	784b      	ldrb	r3, [r1, #1]
  4045a2:	7043      	strb	r3, [r0, #1]
  4045a4:	788b      	ldrb	r3, [r1, #2]
  4045a6:	7083      	strb	r3, [r0, #2]
  4045a8:	4660      	mov	r0, ip
  4045aa:	4770      	bx	lr

004045ac <memset>:
  4045ac:	b470      	push	{r4, r5, r6}
  4045ae:	0786      	lsls	r6, r0, #30
  4045b0:	d046      	beq.n	404640 <memset+0x94>
  4045b2:	1e54      	subs	r4, r2, #1
  4045b4:	2a00      	cmp	r2, #0
  4045b6:	d041      	beq.n	40463c <memset+0x90>
  4045b8:	b2ca      	uxtb	r2, r1
  4045ba:	4603      	mov	r3, r0
  4045bc:	e002      	b.n	4045c4 <memset+0x18>
  4045be:	f114 34ff 	adds.w	r4, r4, #4294967295
  4045c2:	d33b      	bcc.n	40463c <memset+0x90>
  4045c4:	f803 2b01 	strb.w	r2, [r3], #1
  4045c8:	079d      	lsls	r5, r3, #30
  4045ca:	d1f8      	bne.n	4045be <memset+0x12>
  4045cc:	2c03      	cmp	r4, #3
  4045ce:	d92e      	bls.n	40462e <memset+0x82>
  4045d0:	b2cd      	uxtb	r5, r1
  4045d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4045d6:	2c0f      	cmp	r4, #15
  4045d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4045dc:	d919      	bls.n	404612 <memset+0x66>
  4045de:	f103 0210 	add.w	r2, r3, #16
  4045e2:	4626      	mov	r6, r4
  4045e4:	3e10      	subs	r6, #16
  4045e6:	2e0f      	cmp	r6, #15
  4045e8:	f842 5c10 	str.w	r5, [r2, #-16]
  4045ec:	f842 5c0c 	str.w	r5, [r2, #-12]
  4045f0:	f842 5c08 	str.w	r5, [r2, #-8]
  4045f4:	f842 5c04 	str.w	r5, [r2, #-4]
  4045f8:	f102 0210 	add.w	r2, r2, #16
  4045fc:	d8f2      	bhi.n	4045e4 <memset+0x38>
  4045fe:	f1a4 0210 	sub.w	r2, r4, #16
  404602:	f022 020f 	bic.w	r2, r2, #15
  404606:	f004 040f 	and.w	r4, r4, #15
  40460a:	3210      	adds	r2, #16
  40460c:	2c03      	cmp	r4, #3
  40460e:	4413      	add	r3, r2
  404610:	d90d      	bls.n	40462e <memset+0x82>
  404612:	461e      	mov	r6, r3
  404614:	4622      	mov	r2, r4
  404616:	3a04      	subs	r2, #4
  404618:	2a03      	cmp	r2, #3
  40461a:	f846 5b04 	str.w	r5, [r6], #4
  40461e:	d8fa      	bhi.n	404616 <memset+0x6a>
  404620:	1f22      	subs	r2, r4, #4
  404622:	f022 0203 	bic.w	r2, r2, #3
  404626:	3204      	adds	r2, #4
  404628:	4413      	add	r3, r2
  40462a:	f004 0403 	and.w	r4, r4, #3
  40462e:	b12c      	cbz	r4, 40463c <memset+0x90>
  404630:	b2c9      	uxtb	r1, r1
  404632:	441c      	add	r4, r3
  404634:	f803 1b01 	strb.w	r1, [r3], #1
  404638:	429c      	cmp	r4, r3
  40463a:	d1fb      	bne.n	404634 <memset+0x88>
  40463c:	bc70      	pop	{r4, r5, r6}
  40463e:	4770      	bx	lr
  404640:	4614      	mov	r4, r2
  404642:	4603      	mov	r3, r0
  404644:	e7c2      	b.n	4045cc <memset+0x20>
  404646:	bf00      	nop

00404648 <__malloc_lock>:
  404648:	4801      	ldr	r0, [pc, #4]	; (404650 <__malloc_lock+0x8>)
  40464a:	f004 bbeb 	b.w	408e24 <__retarget_lock_acquire_recursive>
  40464e:	bf00      	nop
  404650:	20400e6c 	.word	0x20400e6c

00404654 <__malloc_unlock>:
  404654:	4801      	ldr	r0, [pc, #4]	; (40465c <__malloc_unlock+0x8>)
  404656:	f004 bbe7 	b.w	408e28 <__retarget_lock_release_recursive>
  40465a:	bf00      	nop
  40465c:	20400e6c 	.word	0x20400e6c

00404660 <printf>:
  404660:	b40f      	push	{r0, r1, r2, r3}
  404662:	b500      	push	{lr}
  404664:	4907      	ldr	r1, [pc, #28]	; (404684 <printf+0x24>)
  404666:	b083      	sub	sp, #12
  404668:	ab04      	add	r3, sp, #16
  40466a:	6808      	ldr	r0, [r1, #0]
  40466c:	f853 2b04 	ldr.w	r2, [r3], #4
  404670:	6881      	ldr	r1, [r0, #8]
  404672:	9301      	str	r3, [sp, #4]
  404674:	f001 fc80 	bl	405f78 <_vfprintf_r>
  404678:	b003      	add	sp, #12
  40467a:	f85d eb04 	ldr.w	lr, [sp], #4
  40467e:	b004      	add	sp, #16
  404680:	4770      	bx	lr
  404682:	bf00      	nop
  404684:	20400028 	.word	0x20400028

00404688 <_puts_r>:
  404688:	b5f0      	push	{r4, r5, r6, r7, lr}
  40468a:	4605      	mov	r5, r0
  40468c:	b089      	sub	sp, #36	; 0x24
  40468e:	4608      	mov	r0, r1
  404690:	460c      	mov	r4, r1
  404692:	f000 f9d5 	bl	404a40 <strlen>
  404696:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404698:	4f21      	ldr	r7, [pc, #132]	; (404720 <_puts_r+0x98>)
  40469a:	9404      	str	r4, [sp, #16]
  40469c:	2601      	movs	r6, #1
  40469e:	1c44      	adds	r4, r0, #1
  4046a0:	a904      	add	r1, sp, #16
  4046a2:	2202      	movs	r2, #2
  4046a4:	9403      	str	r4, [sp, #12]
  4046a6:	9005      	str	r0, [sp, #20]
  4046a8:	68ac      	ldr	r4, [r5, #8]
  4046aa:	9706      	str	r7, [sp, #24]
  4046ac:	9607      	str	r6, [sp, #28]
  4046ae:	9101      	str	r1, [sp, #4]
  4046b0:	9202      	str	r2, [sp, #8]
  4046b2:	b353      	cbz	r3, 40470a <_puts_r+0x82>
  4046b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4046b6:	f013 0f01 	tst.w	r3, #1
  4046ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046be:	b29a      	uxth	r2, r3
  4046c0:	d101      	bne.n	4046c6 <_puts_r+0x3e>
  4046c2:	0590      	lsls	r0, r2, #22
  4046c4:	d525      	bpl.n	404712 <_puts_r+0x8a>
  4046c6:	0491      	lsls	r1, r2, #18
  4046c8:	d406      	bmi.n	4046d8 <_puts_r+0x50>
  4046ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4046cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4046d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4046d4:	81a3      	strh	r3, [r4, #12]
  4046d6:	6662      	str	r2, [r4, #100]	; 0x64
  4046d8:	4628      	mov	r0, r5
  4046da:	aa01      	add	r2, sp, #4
  4046dc:	4621      	mov	r1, r4
  4046de:	f004 f9ed 	bl	408abc <__sfvwrite_r>
  4046e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4046e4:	2800      	cmp	r0, #0
  4046e6:	bf0c      	ite	eq
  4046e8:	250a      	moveq	r5, #10
  4046ea:	f04f 35ff 	movne.w	r5, #4294967295
  4046ee:	07da      	lsls	r2, r3, #31
  4046f0:	d402      	bmi.n	4046f8 <_puts_r+0x70>
  4046f2:	89a3      	ldrh	r3, [r4, #12]
  4046f4:	059b      	lsls	r3, r3, #22
  4046f6:	d502      	bpl.n	4046fe <_puts_r+0x76>
  4046f8:	4628      	mov	r0, r5
  4046fa:	b009      	add	sp, #36	; 0x24
  4046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4046fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404700:	f004 fb92 	bl	408e28 <__retarget_lock_release_recursive>
  404704:	4628      	mov	r0, r5
  404706:	b009      	add	sp, #36	; 0x24
  404708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40470a:	4628      	mov	r0, r5
  40470c:	f004 f84e 	bl	4087ac <__sinit>
  404710:	e7d0      	b.n	4046b4 <_puts_r+0x2c>
  404712:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404714:	f004 fb86 	bl	408e24 <__retarget_lock_acquire_recursive>
  404718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40471c:	b29a      	uxth	r2, r3
  40471e:	e7d2      	b.n	4046c6 <_puts_r+0x3e>
  404720:	0040b168 	.word	0x0040b168

00404724 <puts>:
  404724:	4b02      	ldr	r3, [pc, #8]	; (404730 <puts+0xc>)
  404726:	4601      	mov	r1, r0
  404728:	6818      	ldr	r0, [r3, #0]
  40472a:	f7ff bfad 	b.w	404688 <_puts_r>
  40472e:	bf00      	nop
  404730:	20400028 	.word	0x20400028

00404734 <_sbrk_r>:
  404734:	b538      	push	{r3, r4, r5, lr}
  404736:	4c07      	ldr	r4, [pc, #28]	; (404754 <_sbrk_r+0x20>)
  404738:	2300      	movs	r3, #0
  40473a:	4605      	mov	r5, r0
  40473c:	4608      	mov	r0, r1
  40473e:	6023      	str	r3, [r4, #0]
  404740:	f7fc ff8e 	bl	401660 <_sbrk>
  404744:	1c43      	adds	r3, r0, #1
  404746:	d000      	beq.n	40474a <_sbrk_r+0x16>
  404748:	bd38      	pop	{r3, r4, r5, pc}
  40474a:	6823      	ldr	r3, [r4, #0]
  40474c:	2b00      	cmp	r3, #0
  40474e:	d0fb      	beq.n	404748 <_sbrk_r+0x14>
  404750:	602b      	str	r3, [r5, #0]
  404752:	bd38      	pop	{r3, r4, r5, pc}
  404754:	20400e80 	.word	0x20400e80

00404758 <setbuf>:
  404758:	2900      	cmp	r1, #0
  40475a:	bf0c      	ite	eq
  40475c:	2202      	moveq	r2, #2
  40475e:	2200      	movne	r2, #0
  404760:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404764:	f000 b800 	b.w	404768 <setvbuf>

00404768 <setvbuf>:
  404768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40476c:	4c61      	ldr	r4, [pc, #388]	; (4048f4 <setvbuf+0x18c>)
  40476e:	6825      	ldr	r5, [r4, #0]
  404770:	b083      	sub	sp, #12
  404772:	4604      	mov	r4, r0
  404774:	460f      	mov	r7, r1
  404776:	4690      	mov	r8, r2
  404778:	461e      	mov	r6, r3
  40477a:	b115      	cbz	r5, 404782 <setvbuf+0x1a>
  40477c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40477e:	2b00      	cmp	r3, #0
  404780:	d064      	beq.n	40484c <setvbuf+0xe4>
  404782:	f1b8 0f02 	cmp.w	r8, #2
  404786:	d006      	beq.n	404796 <setvbuf+0x2e>
  404788:	f1b8 0f01 	cmp.w	r8, #1
  40478c:	f200 809f 	bhi.w	4048ce <setvbuf+0x166>
  404790:	2e00      	cmp	r6, #0
  404792:	f2c0 809c 	blt.w	4048ce <setvbuf+0x166>
  404796:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404798:	07d8      	lsls	r0, r3, #31
  40479a:	d534      	bpl.n	404806 <setvbuf+0x9e>
  40479c:	4621      	mov	r1, r4
  40479e:	4628      	mov	r0, r5
  4047a0:	f003 ffac 	bl	4086fc <_fflush_r>
  4047a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4047a6:	b141      	cbz	r1, 4047ba <setvbuf+0x52>
  4047a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4047ac:	4299      	cmp	r1, r3
  4047ae:	d002      	beq.n	4047b6 <setvbuf+0x4e>
  4047b0:	4628      	mov	r0, r5
  4047b2:	f004 f89d 	bl	4088f0 <_free_r>
  4047b6:	2300      	movs	r3, #0
  4047b8:	6323      	str	r3, [r4, #48]	; 0x30
  4047ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047be:	2200      	movs	r2, #0
  4047c0:	61a2      	str	r2, [r4, #24]
  4047c2:	6062      	str	r2, [r4, #4]
  4047c4:	061a      	lsls	r2, r3, #24
  4047c6:	d43a      	bmi.n	40483e <setvbuf+0xd6>
  4047c8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4047cc:	f023 0303 	bic.w	r3, r3, #3
  4047d0:	f1b8 0f02 	cmp.w	r8, #2
  4047d4:	81a3      	strh	r3, [r4, #12]
  4047d6:	d01d      	beq.n	404814 <setvbuf+0xac>
  4047d8:	ab01      	add	r3, sp, #4
  4047da:	466a      	mov	r2, sp
  4047dc:	4621      	mov	r1, r4
  4047de:	4628      	mov	r0, r5
  4047e0:	f004 fb24 	bl	408e2c <__swhatbuf_r>
  4047e4:	89a3      	ldrh	r3, [r4, #12]
  4047e6:	4318      	orrs	r0, r3
  4047e8:	81a0      	strh	r0, [r4, #12]
  4047ea:	2e00      	cmp	r6, #0
  4047ec:	d132      	bne.n	404854 <setvbuf+0xec>
  4047ee:	9e00      	ldr	r6, [sp, #0]
  4047f0:	4630      	mov	r0, r6
  4047f2:	f7ff fb81 	bl	403ef8 <malloc>
  4047f6:	4607      	mov	r7, r0
  4047f8:	2800      	cmp	r0, #0
  4047fa:	d06b      	beq.n	4048d4 <setvbuf+0x16c>
  4047fc:	89a3      	ldrh	r3, [r4, #12]
  4047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404802:	81a3      	strh	r3, [r4, #12]
  404804:	e028      	b.n	404858 <setvbuf+0xf0>
  404806:	89a3      	ldrh	r3, [r4, #12]
  404808:	0599      	lsls	r1, r3, #22
  40480a:	d4c7      	bmi.n	40479c <setvbuf+0x34>
  40480c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40480e:	f004 fb09 	bl	408e24 <__retarget_lock_acquire_recursive>
  404812:	e7c3      	b.n	40479c <setvbuf+0x34>
  404814:	2500      	movs	r5, #0
  404816:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404818:	2600      	movs	r6, #0
  40481a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40481e:	f043 0302 	orr.w	r3, r3, #2
  404822:	2001      	movs	r0, #1
  404824:	60a6      	str	r6, [r4, #8]
  404826:	07ce      	lsls	r6, r1, #31
  404828:	81a3      	strh	r3, [r4, #12]
  40482a:	6022      	str	r2, [r4, #0]
  40482c:	6122      	str	r2, [r4, #16]
  40482e:	6160      	str	r0, [r4, #20]
  404830:	d401      	bmi.n	404836 <setvbuf+0xce>
  404832:	0598      	lsls	r0, r3, #22
  404834:	d53e      	bpl.n	4048b4 <setvbuf+0x14c>
  404836:	4628      	mov	r0, r5
  404838:	b003      	add	sp, #12
  40483a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40483e:	6921      	ldr	r1, [r4, #16]
  404840:	4628      	mov	r0, r5
  404842:	f004 f855 	bl	4088f0 <_free_r>
  404846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40484a:	e7bd      	b.n	4047c8 <setvbuf+0x60>
  40484c:	4628      	mov	r0, r5
  40484e:	f003 ffad 	bl	4087ac <__sinit>
  404852:	e796      	b.n	404782 <setvbuf+0x1a>
  404854:	2f00      	cmp	r7, #0
  404856:	d0cb      	beq.n	4047f0 <setvbuf+0x88>
  404858:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40485a:	2b00      	cmp	r3, #0
  40485c:	d033      	beq.n	4048c6 <setvbuf+0x15e>
  40485e:	9b00      	ldr	r3, [sp, #0]
  404860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404864:	6027      	str	r7, [r4, #0]
  404866:	429e      	cmp	r6, r3
  404868:	bf1c      	itt	ne
  40486a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40486e:	81a2      	strhne	r2, [r4, #12]
  404870:	f1b8 0f01 	cmp.w	r8, #1
  404874:	bf04      	itt	eq
  404876:	f042 0201 	orreq.w	r2, r2, #1
  40487a:	81a2      	strheq	r2, [r4, #12]
  40487c:	b292      	uxth	r2, r2
  40487e:	f012 0308 	ands.w	r3, r2, #8
  404882:	6127      	str	r7, [r4, #16]
  404884:	6166      	str	r6, [r4, #20]
  404886:	d00e      	beq.n	4048a6 <setvbuf+0x13e>
  404888:	07d1      	lsls	r1, r2, #31
  40488a:	d51a      	bpl.n	4048c2 <setvbuf+0x15a>
  40488c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40488e:	4276      	negs	r6, r6
  404890:	2300      	movs	r3, #0
  404892:	f015 0501 	ands.w	r5, r5, #1
  404896:	61a6      	str	r6, [r4, #24]
  404898:	60a3      	str	r3, [r4, #8]
  40489a:	d009      	beq.n	4048b0 <setvbuf+0x148>
  40489c:	2500      	movs	r5, #0
  40489e:	4628      	mov	r0, r5
  4048a0:	b003      	add	sp, #12
  4048a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4048a6:	60a3      	str	r3, [r4, #8]
  4048a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4048aa:	f015 0501 	ands.w	r5, r5, #1
  4048ae:	d1f5      	bne.n	40489c <setvbuf+0x134>
  4048b0:	0593      	lsls	r3, r2, #22
  4048b2:	d4c0      	bmi.n	404836 <setvbuf+0xce>
  4048b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4048b6:	f004 fab7 	bl	408e28 <__retarget_lock_release_recursive>
  4048ba:	4628      	mov	r0, r5
  4048bc:	b003      	add	sp, #12
  4048be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4048c2:	60a6      	str	r6, [r4, #8]
  4048c4:	e7f0      	b.n	4048a8 <setvbuf+0x140>
  4048c6:	4628      	mov	r0, r5
  4048c8:	f003 ff70 	bl	4087ac <__sinit>
  4048cc:	e7c7      	b.n	40485e <setvbuf+0xf6>
  4048ce:	f04f 35ff 	mov.w	r5, #4294967295
  4048d2:	e7b0      	b.n	404836 <setvbuf+0xce>
  4048d4:	f8dd 9000 	ldr.w	r9, [sp]
  4048d8:	45b1      	cmp	r9, r6
  4048da:	d004      	beq.n	4048e6 <setvbuf+0x17e>
  4048dc:	4648      	mov	r0, r9
  4048de:	f7ff fb0b 	bl	403ef8 <malloc>
  4048e2:	4607      	mov	r7, r0
  4048e4:	b920      	cbnz	r0, 4048f0 <setvbuf+0x188>
  4048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048ea:	f04f 35ff 	mov.w	r5, #4294967295
  4048ee:	e792      	b.n	404816 <setvbuf+0xae>
  4048f0:	464e      	mov	r6, r9
  4048f2:	e783      	b.n	4047fc <setvbuf+0x94>
  4048f4:	20400028 	.word	0x20400028

004048f8 <sprintf>:
  4048f8:	b40e      	push	{r1, r2, r3}
  4048fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4048fc:	b09c      	sub	sp, #112	; 0x70
  4048fe:	ab21      	add	r3, sp, #132	; 0x84
  404900:	490f      	ldr	r1, [pc, #60]	; (404940 <sprintf+0x48>)
  404902:	f853 2b04 	ldr.w	r2, [r3], #4
  404906:	9301      	str	r3, [sp, #4]
  404908:	4605      	mov	r5, r0
  40490a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40490e:	6808      	ldr	r0, [r1, #0]
  404910:	9502      	str	r5, [sp, #8]
  404912:	f44f 7702 	mov.w	r7, #520	; 0x208
  404916:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40491a:	a902      	add	r1, sp, #8
  40491c:	9506      	str	r5, [sp, #24]
  40491e:	f8ad 7014 	strh.w	r7, [sp, #20]
  404922:	9404      	str	r4, [sp, #16]
  404924:	9407      	str	r4, [sp, #28]
  404926:	f8ad 6016 	strh.w	r6, [sp, #22]
  40492a:	f000 f8f7 	bl	404b1c <_svfprintf_r>
  40492e:	9b02      	ldr	r3, [sp, #8]
  404930:	2200      	movs	r2, #0
  404932:	701a      	strb	r2, [r3, #0]
  404934:	b01c      	add	sp, #112	; 0x70
  404936:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40493a:	b003      	add	sp, #12
  40493c:	4770      	bx	lr
  40493e:	bf00      	nop
  404940:	20400028 	.word	0x20400028

00404944 <strcat>:
  404944:	0783      	lsls	r3, r0, #30
  404946:	b510      	push	{r4, lr}
  404948:	4604      	mov	r4, r0
  40494a:	d110      	bne.n	40496e <strcat+0x2a>
  40494c:	6802      	ldr	r2, [r0, #0]
  40494e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404952:	ea23 0302 	bic.w	r3, r3, r2
  404956:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40495a:	d108      	bne.n	40496e <strcat+0x2a>
  40495c:	f850 2f04 	ldr.w	r2, [r0, #4]!
  404960:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404964:	ea23 0302 	bic.w	r3, r3, r2
  404968:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40496c:	d0f6      	beq.n	40495c <strcat+0x18>
  40496e:	7803      	ldrb	r3, [r0, #0]
  404970:	b11b      	cbz	r3, 40497a <strcat+0x36>
  404972:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404976:	2b00      	cmp	r3, #0
  404978:	d1fb      	bne.n	404972 <strcat+0x2e>
  40497a:	f000 f803 	bl	404984 <strcpy>
  40497e:	4620      	mov	r0, r4
  404980:	bd10      	pop	{r4, pc}
  404982:	bf00      	nop

00404984 <strcpy>:
  404984:	ea80 0201 	eor.w	r2, r0, r1
  404988:	4684      	mov	ip, r0
  40498a:	f012 0f03 	tst.w	r2, #3
  40498e:	d14f      	bne.n	404a30 <strcpy+0xac>
  404990:	f011 0f03 	tst.w	r1, #3
  404994:	d132      	bne.n	4049fc <strcpy+0x78>
  404996:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40499a:	f011 0f04 	tst.w	r1, #4
  40499e:	f851 3b04 	ldr.w	r3, [r1], #4
  4049a2:	d00b      	beq.n	4049bc <strcpy+0x38>
  4049a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4049a8:	439a      	bics	r2, r3
  4049aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4049ae:	bf04      	itt	eq
  4049b0:	f84c 3b04 	streq.w	r3, [ip], #4
  4049b4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4049b8:	d116      	bne.n	4049e8 <strcpy+0x64>
  4049ba:	bf00      	nop
  4049bc:	f851 4b04 	ldr.w	r4, [r1], #4
  4049c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4049c4:	439a      	bics	r2, r3
  4049c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4049ca:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4049ce:	d10b      	bne.n	4049e8 <strcpy+0x64>
  4049d0:	f84c 3b04 	str.w	r3, [ip], #4
  4049d4:	43a2      	bics	r2, r4
  4049d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4049da:	bf04      	itt	eq
  4049dc:	f851 3b04 	ldreq.w	r3, [r1], #4
  4049e0:	f84c 4b04 	streq.w	r4, [ip], #4
  4049e4:	d0ea      	beq.n	4049bc <strcpy+0x38>
  4049e6:	4623      	mov	r3, r4
  4049e8:	f80c 3b01 	strb.w	r3, [ip], #1
  4049ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4049f0:	ea4f 2333 	mov.w	r3, r3, ror #8
  4049f4:	d1f8      	bne.n	4049e8 <strcpy+0x64>
  4049f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4049fa:	4770      	bx	lr
  4049fc:	f011 0f01 	tst.w	r1, #1
  404a00:	d006      	beq.n	404a10 <strcpy+0x8c>
  404a02:	f811 2b01 	ldrb.w	r2, [r1], #1
  404a06:	f80c 2b01 	strb.w	r2, [ip], #1
  404a0a:	2a00      	cmp	r2, #0
  404a0c:	bf08      	it	eq
  404a0e:	4770      	bxeq	lr
  404a10:	f011 0f02 	tst.w	r1, #2
  404a14:	d0bf      	beq.n	404996 <strcpy+0x12>
  404a16:	f831 2b02 	ldrh.w	r2, [r1], #2
  404a1a:	f012 0fff 	tst.w	r2, #255	; 0xff
  404a1e:	bf16      	itet	ne
  404a20:	f82c 2b02 	strhne.w	r2, [ip], #2
  404a24:	f88c 2000 	strbeq.w	r2, [ip]
  404a28:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404a2c:	d1b3      	bne.n	404996 <strcpy+0x12>
  404a2e:	4770      	bx	lr
  404a30:	f811 2b01 	ldrb.w	r2, [r1], #1
  404a34:	f80c 2b01 	strb.w	r2, [ip], #1
  404a38:	2a00      	cmp	r2, #0
  404a3a:	d1f9      	bne.n	404a30 <strcpy+0xac>
  404a3c:	4770      	bx	lr
  404a3e:	bf00      	nop

00404a40 <strlen>:
  404a40:	f890 f000 	pld	[r0]
  404a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404a48:	f020 0107 	bic.w	r1, r0, #7
  404a4c:	f06f 0c00 	mvn.w	ip, #0
  404a50:	f010 0407 	ands.w	r4, r0, #7
  404a54:	f891 f020 	pld	[r1, #32]
  404a58:	f040 8049 	bne.w	404aee <strlen+0xae>
  404a5c:	f04f 0400 	mov.w	r4, #0
  404a60:	f06f 0007 	mvn.w	r0, #7
  404a64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404a68:	f891 f040 	pld	[r1, #64]	; 0x40
  404a6c:	f100 0008 	add.w	r0, r0, #8
  404a70:	fa82 f24c 	uadd8	r2, r2, ip
  404a74:	faa4 f28c 	sel	r2, r4, ip
  404a78:	fa83 f34c 	uadd8	r3, r3, ip
  404a7c:	faa2 f38c 	sel	r3, r2, ip
  404a80:	bb4b      	cbnz	r3, 404ad6 <strlen+0x96>
  404a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404a86:	fa82 f24c 	uadd8	r2, r2, ip
  404a8a:	f100 0008 	add.w	r0, r0, #8
  404a8e:	faa4 f28c 	sel	r2, r4, ip
  404a92:	fa83 f34c 	uadd8	r3, r3, ip
  404a96:	faa2 f38c 	sel	r3, r2, ip
  404a9a:	b9e3      	cbnz	r3, 404ad6 <strlen+0x96>
  404a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404aa0:	fa82 f24c 	uadd8	r2, r2, ip
  404aa4:	f100 0008 	add.w	r0, r0, #8
  404aa8:	faa4 f28c 	sel	r2, r4, ip
  404aac:	fa83 f34c 	uadd8	r3, r3, ip
  404ab0:	faa2 f38c 	sel	r3, r2, ip
  404ab4:	b97b      	cbnz	r3, 404ad6 <strlen+0x96>
  404ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404aba:	f101 0120 	add.w	r1, r1, #32
  404abe:	fa82 f24c 	uadd8	r2, r2, ip
  404ac2:	f100 0008 	add.w	r0, r0, #8
  404ac6:	faa4 f28c 	sel	r2, r4, ip
  404aca:	fa83 f34c 	uadd8	r3, r3, ip
  404ace:	faa2 f38c 	sel	r3, r2, ip
  404ad2:	2b00      	cmp	r3, #0
  404ad4:	d0c6      	beq.n	404a64 <strlen+0x24>
  404ad6:	2a00      	cmp	r2, #0
  404ad8:	bf04      	itt	eq
  404ada:	3004      	addeq	r0, #4
  404adc:	461a      	moveq	r2, r3
  404ade:	ba12      	rev	r2, r2
  404ae0:	fab2 f282 	clz	r2, r2
  404ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404aec:	4770      	bx	lr
  404aee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404af2:	f004 0503 	and.w	r5, r4, #3
  404af6:	f1c4 0000 	rsb	r0, r4, #0
  404afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404afe:	f014 0f04 	tst.w	r4, #4
  404b02:	f891 f040 	pld	[r1, #64]	; 0x40
  404b06:	fa0c f505 	lsl.w	r5, ip, r5
  404b0a:	ea62 0205 	orn	r2, r2, r5
  404b0e:	bf1c      	itt	ne
  404b10:	ea63 0305 	ornne	r3, r3, r5
  404b14:	4662      	movne	r2, ip
  404b16:	f04f 0400 	mov.w	r4, #0
  404b1a:	e7a9      	b.n	404a70 <strlen+0x30>

00404b1c <_svfprintf_r>:
  404b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b20:	b0c3      	sub	sp, #268	; 0x10c
  404b22:	460c      	mov	r4, r1
  404b24:	910b      	str	r1, [sp, #44]	; 0x2c
  404b26:	4692      	mov	sl, r2
  404b28:	930f      	str	r3, [sp, #60]	; 0x3c
  404b2a:	900c      	str	r0, [sp, #48]	; 0x30
  404b2c:	f004 f968 	bl	408e00 <_localeconv_r>
  404b30:	6803      	ldr	r3, [r0, #0]
  404b32:	931a      	str	r3, [sp, #104]	; 0x68
  404b34:	4618      	mov	r0, r3
  404b36:	f7ff ff83 	bl	404a40 <strlen>
  404b3a:	89a3      	ldrh	r3, [r4, #12]
  404b3c:	9019      	str	r0, [sp, #100]	; 0x64
  404b3e:	0619      	lsls	r1, r3, #24
  404b40:	d503      	bpl.n	404b4a <_svfprintf_r+0x2e>
  404b42:	6923      	ldr	r3, [r4, #16]
  404b44:	2b00      	cmp	r3, #0
  404b46:	f001 8003 	beq.w	405b50 <_svfprintf_r+0x1034>
  404b4a:	2300      	movs	r3, #0
  404b4c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404b50:	9313      	str	r3, [sp, #76]	; 0x4c
  404b52:	9315      	str	r3, [sp, #84]	; 0x54
  404b54:	9314      	str	r3, [sp, #80]	; 0x50
  404b56:	9327      	str	r3, [sp, #156]	; 0x9c
  404b58:	9326      	str	r3, [sp, #152]	; 0x98
  404b5a:	9318      	str	r3, [sp, #96]	; 0x60
  404b5c:	931b      	str	r3, [sp, #108]	; 0x6c
  404b5e:	9309      	str	r3, [sp, #36]	; 0x24
  404b60:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404b64:	46c8      	mov	r8, r9
  404b66:	9316      	str	r3, [sp, #88]	; 0x58
  404b68:	9317      	str	r3, [sp, #92]	; 0x5c
  404b6a:	f89a 3000 	ldrb.w	r3, [sl]
  404b6e:	4654      	mov	r4, sl
  404b70:	b1e3      	cbz	r3, 404bac <_svfprintf_r+0x90>
  404b72:	2b25      	cmp	r3, #37	; 0x25
  404b74:	d102      	bne.n	404b7c <_svfprintf_r+0x60>
  404b76:	e019      	b.n	404bac <_svfprintf_r+0x90>
  404b78:	2b25      	cmp	r3, #37	; 0x25
  404b7a:	d003      	beq.n	404b84 <_svfprintf_r+0x68>
  404b7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404b80:	2b00      	cmp	r3, #0
  404b82:	d1f9      	bne.n	404b78 <_svfprintf_r+0x5c>
  404b84:	eba4 050a 	sub.w	r5, r4, sl
  404b88:	b185      	cbz	r5, 404bac <_svfprintf_r+0x90>
  404b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404b8e:	f8c8 a000 	str.w	sl, [r8]
  404b92:	3301      	adds	r3, #1
  404b94:	442a      	add	r2, r5
  404b96:	2b07      	cmp	r3, #7
  404b98:	f8c8 5004 	str.w	r5, [r8, #4]
  404b9c:	9227      	str	r2, [sp, #156]	; 0x9c
  404b9e:	9326      	str	r3, [sp, #152]	; 0x98
  404ba0:	dc7f      	bgt.n	404ca2 <_svfprintf_r+0x186>
  404ba2:	f108 0808 	add.w	r8, r8, #8
  404ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ba8:	442b      	add	r3, r5
  404baa:	9309      	str	r3, [sp, #36]	; 0x24
  404bac:	7823      	ldrb	r3, [r4, #0]
  404bae:	2b00      	cmp	r3, #0
  404bb0:	d07f      	beq.n	404cb2 <_svfprintf_r+0x196>
  404bb2:	2300      	movs	r3, #0
  404bb4:	461a      	mov	r2, r3
  404bb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404bba:	4619      	mov	r1, r3
  404bbc:	930d      	str	r3, [sp, #52]	; 0x34
  404bbe:	469b      	mov	fp, r3
  404bc0:	f04f 30ff 	mov.w	r0, #4294967295
  404bc4:	7863      	ldrb	r3, [r4, #1]
  404bc6:	900a      	str	r0, [sp, #40]	; 0x28
  404bc8:	f104 0a01 	add.w	sl, r4, #1
  404bcc:	f10a 0a01 	add.w	sl, sl, #1
  404bd0:	f1a3 0020 	sub.w	r0, r3, #32
  404bd4:	2858      	cmp	r0, #88	; 0x58
  404bd6:	f200 83c1 	bhi.w	40535c <_svfprintf_r+0x840>
  404bda:	e8df f010 	tbh	[pc, r0, lsl #1]
  404bde:	0238      	.short	0x0238
  404be0:	03bf03bf 	.word	0x03bf03bf
  404be4:	03bf0240 	.word	0x03bf0240
  404be8:	03bf03bf 	.word	0x03bf03bf
  404bec:	03bf03bf 	.word	0x03bf03bf
  404bf0:	024503bf 	.word	0x024503bf
  404bf4:	03bf0203 	.word	0x03bf0203
  404bf8:	026b005d 	.word	0x026b005d
  404bfc:	028603bf 	.word	0x028603bf
  404c00:	039d039d 	.word	0x039d039d
  404c04:	039d039d 	.word	0x039d039d
  404c08:	039d039d 	.word	0x039d039d
  404c0c:	039d039d 	.word	0x039d039d
  404c10:	03bf039d 	.word	0x03bf039d
  404c14:	03bf03bf 	.word	0x03bf03bf
  404c18:	03bf03bf 	.word	0x03bf03bf
  404c1c:	03bf03bf 	.word	0x03bf03bf
  404c20:	03bf03bf 	.word	0x03bf03bf
  404c24:	033703bf 	.word	0x033703bf
  404c28:	03bf0357 	.word	0x03bf0357
  404c2c:	03bf0357 	.word	0x03bf0357
  404c30:	03bf03bf 	.word	0x03bf03bf
  404c34:	039803bf 	.word	0x039803bf
  404c38:	03bf03bf 	.word	0x03bf03bf
  404c3c:	03bf03ad 	.word	0x03bf03ad
  404c40:	03bf03bf 	.word	0x03bf03bf
  404c44:	03bf03bf 	.word	0x03bf03bf
  404c48:	03bf0259 	.word	0x03bf0259
  404c4c:	031e03bf 	.word	0x031e03bf
  404c50:	03bf03bf 	.word	0x03bf03bf
  404c54:	03bf03bf 	.word	0x03bf03bf
  404c58:	03bf03bf 	.word	0x03bf03bf
  404c5c:	03bf03bf 	.word	0x03bf03bf
  404c60:	03bf03bf 	.word	0x03bf03bf
  404c64:	02db02c6 	.word	0x02db02c6
  404c68:	03570357 	.word	0x03570357
  404c6c:	028b0357 	.word	0x028b0357
  404c70:	03bf02db 	.word	0x03bf02db
  404c74:	029003bf 	.word	0x029003bf
  404c78:	029d03bf 	.word	0x029d03bf
  404c7c:	02b401cc 	.word	0x02b401cc
  404c80:	03bf0208 	.word	0x03bf0208
  404c84:	03bf01e1 	.word	0x03bf01e1
  404c88:	03bf007e 	.word	0x03bf007e
  404c8c:	020d03bf 	.word	0x020d03bf
  404c90:	980d      	ldr	r0, [sp, #52]	; 0x34
  404c92:	930f      	str	r3, [sp, #60]	; 0x3c
  404c94:	4240      	negs	r0, r0
  404c96:	900d      	str	r0, [sp, #52]	; 0x34
  404c98:	f04b 0b04 	orr.w	fp, fp, #4
  404c9c:	f89a 3000 	ldrb.w	r3, [sl]
  404ca0:	e794      	b.n	404bcc <_svfprintf_r+0xb0>
  404ca2:	aa25      	add	r2, sp, #148	; 0x94
  404ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ca8:	f004 fed2 	bl	409a50 <__ssprint_r>
  404cac:	b940      	cbnz	r0, 404cc0 <_svfprintf_r+0x1a4>
  404cae:	46c8      	mov	r8, r9
  404cb0:	e779      	b.n	404ba6 <_svfprintf_r+0x8a>
  404cb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404cb4:	b123      	cbz	r3, 404cc0 <_svfprintf_r+0x1a4>
  404cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cba:	aa25      	add	r2, sp, #148	; 0x94
  404cbc:	f004 fec8 	bl	409a50 <__ssprint_r>
  404cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404cc2:	899b      	ldrh	r3, [r3, #12]
  404cc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  404cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404cca:	bf18      	it	ne
  404ccc:	f04f 33ff 	movne.w	r3, #4294967295
  404cd0:	9309      	str	r3, [sp, #36]	; 0x24
  404cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
  404cd4:	b043      	add	sp, #268	; 0x10c
  404cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cda:	f01b 0f20 	tst.w	fp, #32
  404cde:	9311      	str	r3, [sp, #68]	; 0x44
  404ce0:	f040 81dd 	bne.w	40509e <_svfprintf_r+0x582>
  404ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ce6:	f01b 0f10 	tst.w	fp, #16
  404cea:	4613      	mov	r3, r2
  404cec:	f040 856e 	bne.w	4057cc <_svfprintf_r+0xcb0>
  404cf0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404cf4:	f000 856a 	beq.w	4057cc <_svfprintf_r+0xcb0>
  404cf8:	8814      	ldrh	r4, [r2, #0]
  404cfa:	3204      	adds	r2, #4
  404cfc:	2500      	movs	r5, #0
  404cfe:	2301      	movs	r3, #1
  404d00:	920f      	str	r2, [sp, #60]	; 0x3c
  404d02:	2700      	movs	r7, #0
  404d04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404d08:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d0a:	1c4a      	adds	r2, r1, #1
  404d0c:	f000 8265 	beq.w	4051da <_svfprintf_r+0x6be>
  404d10:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404d14:	9207      	str	r2, [sp, #28]
  404d16:	ea54 0205 	orrs.w	r2, r4, r5
  404d1a:	f040 8264 	bne.w	4051e6 <_svfprintf_r+0x6ca>
  404d1e:	2900      	cmp	r1, #0
  404d20:	f040 843c 	bne.w	40559c <_svfprintf_r+0xa80>
  404d24:	2b00      	cmp	r3, #0
  404d26:	f040 84d7 	bne.w	4056d8 <_svfprintf_r+0xbbc>
  404d2a:	f01b 0301 	ands.w	r3, fp, #1
  404d2e:	930e      	str	r3, [sp, #56]	; 0x38
  404d30:	f000 8604 	beq.w	40593c <_svfprintf_r+0xe20>
  404d34:	ae42      	add	r6, sp, #264	; 0x108
  404d36:	2330      	movs	r3, #48	; 0x30
  404d38:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404d40:	4293      	cmp	r3, r2
  404d42:	bfb8      	it	lt
  404d44:	4613      	movlt	r3, r2
  404d46:	9308      	str	r3, [sp, #32]
  404d48:	2300      	movs	r3, #0
  404d4a:	9312      	str	r3, [sp, #72]	; 0x48
  404d4c:	b117      	cbz	r7, 404d54 <_svfprintf_r+0x238>
  404d4e:	9b08      	ldr	r3, [sp, #32]
  404d50:	3301      	adds	r3, #1
  404d52:	9308      	str	r3, [sp, #32]
  404d54:	9b07      	ldr	r3, [sp, #28]
  404d56:	f013 0302 	ands.w	r3, r3, #2
  404d5a:	9310      	str	r3, [sp, #64]	; 0x40
  404d5c:	d002      	beq.n	404d64 <_svfprintf_r+0x248>
  404d5e:	9b08      	ldr	r3, [sp, #32]
  404d60:	3302      	adds	r3, #2
  404d62:	9308      	str	r3, [sp, #32]
  404d64:	9b07      	ldr	r3, [sp, #28]
  404d66:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404d6a:	f040 830e 	bne.w	40538a <_svfprintf_r+0x86e>
  404d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404d70:	9a08      	ldr	r2, [sp, #32]
  404d72:	eba3 0b02 	sub.w	fp, r3, r2
  404d76:	f1bb 0f00 	cmp.w	fp, #0
  404d7a:	f340 8306 	ble.w	40538a <_svfprintf_r+0x86e>
  404d7e:	f1bb 0f10 	cmp.w	fp, #16
  404d82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d84:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404d86:	dd29      	ble.n	404ddc <_svfprintf_r+0x2c0>
  404d88:	4643      	mov	r3, r8
  404d8a:	4621      	mov	r1, r4
  404d8c:	46a8      	mov	r8, r5
  404d8e:	2710      	movs	r7, #16
  404d90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404d92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404d94:	e006      	b.n	404da4 <_svfprintf_r+0x288>
  404d96:	f1ab 0b10 	sub.w	fp, fp, #16
  404d9a:	f1bb 0f10 	cmp.w	fp, #16
  404d9e:	f103 0308 	add.w	r3, r3, #8
  404da2:	dd18      	ble.n	404dd6 <_svfprintf_r+0x2ba>
  404da4:	3201      	adds	r2, #1
  404da6:	48b7      	ldr	r0, [pc, #732]	; (405084 <_svfprintf_r+0x568>)
  404da8:	9226      	str	r2, [sp, #152]	; 0x98
  404daa:	3110      	adds	r1, #16
  404dac:	2a07      	cmp	r2, #7
  404dae:	9127      	str	r1, [sp, #156]	; 0x9c
  404db0:	e883 0081 	stmia.w	r3, {r0, r7}
  404db4:	ddef      	ble.n	404d96 <_svfprintf_r+0x27a>
  404db6:	aa25      	add	r2, sp, #148	; 0x94
  404db8:	4629      	mov	r1, r5
  404dba:	4620      	mov	r0, r4
  404dbc:	f004 fe48 	bl	409a50 <__ssprint_r>
  404dc0:	2800      	cmp	r0, #0
  404dc2:	f47f af7d 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  404dc6:	f1ab 0b10 	sub.w	fp, fp, #16
  404dca:	f1bb 0f10 	cmp.w	fp, #16
  404dce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404dd2:	464b      	mov	r3, r9
  404dd4:	dce6      	bgt.n	404da4 <_svfprintf_r+0x288>
  404dd6:	4645      	mov	r5, r8
  404dd8:	460c      	mov	r4, r1
  404dda:	4698      	mov	r8, r3
  404ddc:	3201      	adds	r2, #1
  404dde:	4ba9      	ldr	r3, [pc, #676]	; (405084 <_svfprintf_r+0x568>)
  404de0:	9226      	str	r2, [sp, #152]	; 0x98
  404de2:	445c      	add	r4, fp
  404de4:	2a07      	cmp	r2, #7
  404de6:	9427      	str	r4, [sp, #156]	; 0x9c
  404de8:	e888 0808 	stmia.w	r8, {r3, fp}
  404dec:	f300 8498 	bgt.w	405720 <_svfprintf_r+0xc04>
  404df0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404df4:	f108 0808 	add.w	r8, r8, #8
  404df8:	b177      	cbz	r7, 404e18 <_svfprintf_r+0x2fc>
  404dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404dfc:	3301      	adds	r3, #1
  404dfe:	3401      	adds	r4, #1
  404e00:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404e04:	2201      	movs	r2, #1
  404e06:	2b07      	cmp	r3, #7
  404e08:	9427      	str	r4, [sp, #156]	; 0x9c
  404e0a:	9326      	str	r3, [sp, #152]	; 0x98
  404e0c:	e888 0006 	stmia.w	r8, {r1, r2}
  404e10:	f300 83db 	bgt.w	4055ca <_svfprintf_r+0xaae>
  404e14:	f108 0808 	add.w	r8, r8, #8
  404e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404e1a:	b16b      	cbz	r3, 404e38 <_svfprintf_r+0x31c>
  404e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e1e:	3301      	adds	r3, #1
  404e20:	3402      	adds	r4, #2
  404e22:	a91e      	add	r1, sp, #120	; 0x78
  404e24:	2202      	movs	r2, #2
  404e26:	2b07      	cmp	r3, #7
  404e28:	9427      	str	r4, [sp, #156]	; 0x9c
  404e2a:	9326      	str	r3, [sp, #152]	; 0x98
  404e2c:	e888 0006 	stmia.w	r8, {r1, r2}
  404e30:	f300 83d6 	bgt.w	4055e0 <_svfprintf_r+0xac4>
  404e34:	f108 0808 	add.w	r8, r8, #8
  404e38:	2d80      	cmp	r5, #128	; 0x80
  404e3a:	f000 8315 	beq.w	405468 <_svfprintf_r+0x94c>
  404e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e42:	1a9f      	subs	r7, r3, r2
  404e44:	2f00      	cmp	r7, #0
  404e46:	dd36      	ble.n	404eb6 <_svfprintf_r+0x39a>
  404e48:	2f10      	cmp	r7, #16
  404e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e4c:	4d8e      	ldr	r5, [pc, #568]	; (405088 <_svfprintf_r+0x56c>)
  404e4e:	dd27      	ble.n	404ea0 <_svfprintf_r+0x384>
  404e50:	4642      	mov	r2, r8
  404e52:	4621      	mov	r1, r4
  404e54:	46b0      	mov	r8, r6
  404e56:	f04f 0b10 	mov.w	fp, #16
  404e5a:	462e      	mov	r6, r5
  404e5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404e60:	e004      	b.n	404e6c <_svfprintf_r+0x350>
  404e62:	3f10      	subs	r7, #16
  404e64:	2f10      	cmp	r7, #16
  404e66:	f102 0208 	add.w	r2, r2, #8
  404e6a:	dd15      	ble.n	404e98 <_svfprintf_r+0x37c>
  404e6c:	3301      	adds	r3, #1
  404e6e:	3110      	adds	r1, #16
  404e70:	2b07      	cmp	r3, #7
  404e72:	9127      	str	r1, [sp, #156]	; 0x9c
  404e74:	9326      	str	r3, [sp, #152]	; 0x98
  404e76:	e882 0840 	stmia.w	r2, {r6, fp}
  404e7a:	ddf2      	ble.n	404e62 <_svfprintf_r+0x346>
  404e7c:	aa25      	add	r2, sp, #148	; 0x94
  404e7e:	4629      	mov	r1, r5
  404e80:	4620      	mov	r0, r4
  404e82:	f004 fde5 	bl	409a50 <__ssprint_r>
  404e86:	2800      	cmp	r0, #0
  404e88:	f47f af1a 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  404e8c:	3f10      	subs	r7, #16
  404e8e:	2f10      	cmp	r7, #16
  404e90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e94:	464a      	mov	r2, r9
  404e96:	dce9      	bgt.n	404e6c <_svfprintf_r+0x350>
  404e98:	4635      	mov	r5, r6
  404e9a:	460c      	mov	r4, r1
  404e9c:	4646      	mov	r6, r8
  404e9e:	4690      	mov	r8, r2
  404ea0:	3301      	adds	r3, #1
  404ea2:	443c      	add	r4, r7
  404ea4:	2b07      	cmp	r3, #7
  404ea6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ea8:	9326      	str	r3, [sp, #152]	; 0x98
  404eaa:	e888 00a0 	stmia.w	r8, {r5, r7}
  404eae:	f300 8381 	bgt.w	4055b4 <_svfprintf_r+0xa98>
  404eb2:	f108 0808 	add.w	r8, r8, #8
  404eb6:	9b07      	ldr	r3, [sp, #28]
  404eb8:	05df      	lsls	r7, r3, #23
  404eba:	f100 8268 	bmi.w	40538e <_svfprintf_r+0x872>
  404ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ec0:	990e      	ldr	r1, [sp, #56]	; 0x38
  404ec2:	f8c8 6000 	str.w	r6, [r8]
  404ec6:	3301      	adds	r3, #1
  404ec8:	440c      	add	r4, r1
  404eca:	2b07      	cmp	r3, #7
  404ecc:	9427      	str	r4, [sp, #156]	; 0x9c
  404ece:	f8c8 1004 	str.w	r1, [r8, #4]
  404ed2:	9326      	str	r3, [sp, #152]	; 0x98
  404ed4:	f300 834d 	bgt.w	405572 <_svfprintf_r+0xa56>
  404ed8:	f108 0808 	add.w	r8, r8, #8
  404edc:	9b07      	ldr	r3, [sp, #28]
  404ede:	075b      	lsls	r3, r3, #29
  404ee0:	d53a      	bpl.n	404f58 <_svfprintf_r+0x43c>
  404ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ee4:	9a08      	ldr	r2, [sp, #32]
  404ee6:	1a9d      	subs	r5, r3, r2
  404ee8:	2d00      	cmp	r5, #0
  404eea:	dd35      	ble.n	404f58 <_svfprintf_r+0x43c>
  404eec:	2d10      	cmp	r5, #16
  404eee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ef0:	dd20      	ble.n	404f34 <_svfprintf_r+0x418>
  404ef2:	2610      	movs	r6, #16
  404ef4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404ef6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404efa:	e004      	b.n	404f06 <_svfprintf_r+0x3ea>
  404efc:	3d10      	subs	r5, #16
  404efe:	2d10      	cmp	r5, #16
  404f00:	f108 0808 	add.w	r8, r8, #8
  404f04:	dd16      	ble.n	404f34 <_svfprintf_r+0x418>
  404f06:	3301      	adds	r3, #1
  404f08:	4a5e      	ldr	r2, [pc, #376]	; (405084 <_svfprintf_r+0x568>)
  404f0a:	9326      	str	r3, [sp, #152]	; 0x98
  404f0c:	3410      	adds	r4, #16
  404f0e:	2b07      	cmp	r3, #7
  404f10:	9427      	str	r4, [sp, #156]	; 0x9c
  404f12:	e888 0044 	stmia.w	r8, {r2, r6}
  404f16:	ddf1      	ble.n	404efc <_svfprintf_r+0x3e0>
  404f18:	aa25      	add	r2, sp, #148	; 0x94
  404f1a:	4659      	mov	r1, fp
  404f1c:	4638      	mov	r0, r7
  404f1e:	f004 fd97 	bl	409a50 <__ssprint_r>
  404f22:	2800      	cmp	r0, #0
  404f24:	f47f aecc 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  404f28:	3d10      	subs	r5, #16
  404f2a:	2d10      	cmp	r5, #16
  404f2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f30:	46c8      	mov	r8, r9
  404f32:	dce8      	bgt.n	404f06 <_svfprintf_r+0x3ea>
  404f34:	3301      	adds	r3, #1
  404f36:	4a53      	ldr	r2, [pc, #332]	; (405084 <_svfprintf_r+0x568>)
  404f38:	9326      	str	r3, [sp, #152]	; 0x98
  404f3a:	442c      	add	r4, r5
  404f3c:	2b07      	cmp	r3, #7
  404f3e:	9427      	str	r4, [sp, #156]	; 0x9c
  404f40:	e888 0024 	stmia.w	r8, {r2, r5}
  404f44:	dd08      	ble.n	404f58 <_svfprintf_r+0x43c>
  404f46:	aa25      	add	r2, sp, #148	; 0x94
  404f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f4c:	f004 fd80 	bl	409a50 <__ssprint_r>
  404f50:	2800      	cmp	r0, #0
  404f52:	f47f aeb5 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  404f56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404f5c:	9908      	ldr	r1, [sp, #32]
  404f5e:	428a      	cmp	r2, r1
  404f60:	bfac      	ite	ge
  404f62:	189b      	addge	r3, r3, r2
  404f64:	185b      	addlt	r3, r3, r1
  404f66:	9309      	str	r3, [sp, #36]	; 0x24
  404f68:	2c00      	cmp	r4, #0
  404f6a:	f040 830d 	bne.w	405588 <_svfprintf_r+0xa6c>
  404f6e:	2300      	movs	r3, #0
  404f70:	9326      	str	r3, [sp, #152]	; 0x98
  404f72:	46c8      	mov	r8, r9
  404f74:	e5f9      	b.n	404b6a <_svfprintf_r+0x4e>
  404f76:	9311      	str	r3, [sp, #68]	; 0x44
  404f78:	f01b 0320 	ands.w	r3, fp, #32
  404f7c:	f040 81e3 	bne.w	405346 <_svfprintf_r+0x82a>
  404f80:	f01b 0210 	ands.w	r2, fp, #16
  404f84:	f040 842e 	bne.w	4057e4 <_svfprintf_r+0xcc8>
  404f88:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404f8c:	f000 842a 	beq.w	4057e4 <_svfprintf_r+0xcc8>
  404f90:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404f92:	4613      	mov	r3, r2
  404f94:	460a      	mov	r2, r1
  404f96:	3204      	adds	r2, #4
  404f98:	880c      	ldrh	r4, [r1, #0]
  404f9a:	920f      	str	r2, [sp, #60]	; 0x3c
  404f9c:	2500      	movs	r5, #0
  404f9e:	e6b0      	b.n	404d02 <_svfprintf_r+0x1e6>
  404fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fa2:	9311      	str	r3, [sp, #68]	; 0x44
  404fa4:	6816      	ldr	r6, [r2, #0]
  404fa6:	2400      	movs	r4, #0
  404fa8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404fac:	1d15      	adds	r5, r2, #4
  404fae:	2e00      	cmp	r6, #0
  404fb0:	f000 86a7 	beq.w	405d02 <_svfprintf_r+0x11e6>
  404fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fb6:	1c53      	adds	r3, r2, #1
  404fb8:	f000 8609 	beq.w	405bce <_svfprintf_r+0x10b2>
  404fbc:	4621      	mov	r1, r4
  404fbe:	4630      	mov	r0, r6
  404fc0:	f003 ffae 	bl	408f20 <memchr>
  404fc4:	2800      	cmp	r0, #0
  404fc6:	f000 86e1 	beq.w	405d8c <_svfprintf_r+0x1270>
  404fca:	1b83      	subs	r3, r0, r6
  404fcc:	930e      	str	r3, [sp, #56]	; 0x38
  404fce:	940a      	str	r4, [sp, #40]	; 0x28
  404fd0:	950f      	str	r5, [sp, #60]	; 0x3c
  404fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  404fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404fda:	9308      	str	r3, [sp, #32]
  404fdc:	9412      	str	r4, [sp, #72]	; 0x48
  404fde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404fe2:	e6b3      	b.n	404d4c <_svfprintf_r+0x230>
  404fe4:	f89a 3000 	ldrb.w	r3, [sl]
  404fe8:	2201      	movs	r2, #1
  404fea:	212b      	movs	r1, #43	; 0x2b
  404fec:	e5ee      	b.n	404bcc <_svfprintf_r+0xb0>
  404fee:	f04b 0b20 	orr.w	fp, fp, #32
  404ff2:	f89a 3000 	ldrb.w	r3, [sl]
  404ff6:	e5e9      	b.n	404bcc <_svfprintf_r+0xb0>
  404ff8:	9311      	str	r3, [sp, #68]	; 0x44
  404ffa:	2a00      	cmp	r2, #0
  404ffc:	f040 8795 	bne.w	405f2a <_svfprintf_r+0x140e>
  405000:	4b22      	ldr	r3, [pc, #136]	; (40508c <_svfprintf_r+0x570>)
  405002:	9318      	str	r3, [sp, #96]	; 0x60
  405004:	f01b 0f20 	tst.w	fp, #32
  405008:	f040 8111 	bne.w	40522e <_svfprintf_r+0x712>
  40500c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40500e:	f01b 0f10 	tst.w	fp, #16
  405012:	4613      	mov	r3, r2
  405014:	f040 83e1 	bne.w	4057da <_svfprintf_r+0xcbe>
  405018:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40501c:	f000 83dd 	beq.w	4057da <_svfprintf_r+0xcbe>
  405020:	3304      	adds	r3, #4
  405022:	8814      	ldrh	r4, [r2, #0]
  405024:	930f      	str	r3, [sp, #60]	; 0x3c
  405026:	2500      	movs	r5, #0
  405028:	f01b 0f01 	tst.w	fp, #1
  40502c:	f000 810c 	beq.w	405248 <_svfprintf_r+0x72c>
  405030:	ea54 0305 	orrs.w	r3, r4, r5
  405034:	f000 8108 	beq.w	405248 <_svfprintf_r+0x72c>
  405038:	2330      	movs	r3, #48	; 0x30
  40503a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40503e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  405042:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405046:	f04b 0b02 	orr.w	fp, fp, #2
  40504a:	2302      	movs	r3, #2
  40504c:	e659      	b.n	404d02 <_svfprintf_r+0x1e6>
  40504e:	f89a 3000 	ldrb.w	r3, [sl]
  405052:	2900      	cmp	r1, #0
  405054:	f47f adba 	bne.w	404bcc <_svfprintf_r+0xb0>
  405058:	2201      	movs	r2, #1
  40505a:	2120      	movs	r1, #32
  40505c:	e5b6      	b.n	404bcc <_svfprintf_r+0xb0>
  40505e:	f04b 0b01 	orr.w	fp, fp, #1
  405062:	f89a 3000 	ldrb.w	r3, [sl]
  405066:	e5b1      	b.n	404bcc <_svfprintf_r+0xb0>
  405068:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40506a:	6823      	ldr	r3, [r4, #0]
  40506c:	930d      	str	r3, [sp, #52]	; 0x34
  40506e:	4618      	mov	r0, r3
  405070:	2800      	cmp	r0, #0
  405072:	4623      	mov	r3, r4
  405074:	f103 0304 	add.w	r3, r3, #4
  405078:	f6ff ae0a 	blt.w	404c90 <_svfprintf_r+0x174>
  40507c:	930f      	str	r3, [sp, #60]	; 0x3c
  40507e:	f89a 3000 	ldrb.w	r3, [sl]
  405082:	e5a3      	b.n	404bcc <_svfprintf_r+0xb0>
  405084:	0040b1b0 	.word	0x0040b1b0
  405088:	0040b1c0 	.word	0x0040b1c0
  40508c:	0040b190 	.word	0x0040b190
  405090:	f04b 0b10 	orr.w	fp, fp, #16
  405094:	f01b 0f20 	tst.w	fp, #32
  405098:	9311      	str	r3, [sp, #68]	; 0x44
  40509a:	f43f ae23 	beq.w	404ce4 <_svfprintf_r+0x1c8>
  40509e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4050a0:	3507      	adds	r5, #7
  4050a2:	f025 0307 	bic.w	r3, r5, #7
  4050a6:	f103 0208 	add.w	r2, r3, #8
  4050aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4050ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4050b0:	2301      	movs	r3, #1
  4050b2:	e626      	b.n	404d02 <_svfprintf_r+0x1e6>
  4050b4:	f89a 3000 	ldrb.w	r3, [sl]
  4050b8:	2b2a      	cmp	r3, #42	; 0x2a
  4050ba:	f10a 0401 	add.w	r4, sl, #1
  4050be:	f000 8727 	beq.w	405f10 <_svfprintf_r+0x13f4>
  4050c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4050c6:	2809      	cmp	r0, #9
  4050c8:	46a2      	mov	sl, r4
  4050ca:	f200 86ad 	bhi.w	405e28 <_svfprintf_r+0x130c>
  4050ce:	2300      	movs	r3, #0
  4050d0:	461c      	mov	r4, r3
  4050d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4050d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4050da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4050de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4050e2:	2809      	cmp	r0, #9
  4050e4:	d9f5      	bls.n	4050d2 <_svfprintf_r+0x5b6>
  4050e6:	940a      	str	r4, [sp, #40]	; 0x28
  4050e8:	e572      	b.n	404bd0 <_svfprintf_r+0xb4>
  4050ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4050ee:	f89a 3000 	ldrb.w	r3, [sl]
  4050f2:	e56b      	b.n	404bcc <_svfprintf_r+0xb0>
  4050f4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4050f8:	f89a 3000 	ldrb.w	r3, [sl]
  4050fc:	e566      	b.n	404bcc <_svfprintf_r+0xb0>
  4050fe:	f89a 3000 	ldrb.w	r3, [sl]
  405102:	2b6c      	cmp	r3, #108	; 0x6c
  405104:	bf03      	ittte	eq
  405106:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40510a:	f04b 0b20 	orreq.w	fp, fp, #32
  40510e:	f10a 0a01 	addeq.w	sl, sl, #1
  405112:	f04b 0b10 	orrne.w	fp, fp, #16
  405116:	e559      	b.n	404bcc <_svfprintf_r+0xb0>
  405118:	2a00      	cmp	r2, #0
  40511a:	f040 8711 	bne.w	405f40 <_svfprintf_r+0x1424>
  40511e:	f01b 0f20 	tst.w	fp, #32
  405122:	f040 84f9 	bne.w	405b18 <_svfprintf_r+0xffc>
  405126:	f01b 0f10 	tst.w	fp, #16
  40512a:	f040 84ac 	bne.w	405a86 <_svfprintf_r+0xf6a>
  40512e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405132:	f000 84a8 	beq.w	405a86 <_svfprintf_r+0xf6a>
  405136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405138:	6813      	ldr	r3, [r2, #0]
  40513a:	3204      	adds	r2, #4
  40513c:	920f      	str	r2, [sp, #60]	; 0x3c
  40513e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405142:	801a      	strh	r2, [r3, #0]
  405144:	e511      	b.n	404b6a <_svfprintf_r+0x4e>
  405146:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405148:	4bb3      	ldr	r3, [pc, #716]	; (405418 <_svfprintf_r+0x8fc>)
  40514a:	680c      	ldr	r4, [r1, #0]
  40514c:	9318      	str	r3, [sp, #96]	; 0x60
  40514e:	2230      	movs	r2, #48	; 0x30
  405150:	2378      	movs	r3, #120	; 0x78
  405152:	3104      	adds	r1, #4
  405154:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405158:	9311      	str	r3, [sp, #68]	; 0x44
  40515a:	f04b 0b02 	orr.w	fp, fp, #2
  40515e:	910f      	str	r1, [sp, #60]	; 0x3c
  405160:	2500      	movs	r5, #0
  405162:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405166:	2302      	movs	r3, #2
  405168:	e5cb      	b.n	404d02 <_svfprintf_r+0x1e6>
  40516a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40516c:	9311      	str	r3, [sp, #68]	; 0x44
  40516e:	680a      	ldr	r2, [r1, #0]
  405170:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405174:	2300      	movs	r3, #0
  405176:	460a      	mov	r2, r1
  405178:	461f      	mov	r7, r3
  40517a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40517e:	3204      	adds	r2, #4
  405180:	2301      	movs	r3, #1
  405182:	9308      	str	r3, [sp, #32]
  405184:	f8cd b01c 	str.w	fp, [sp, #28]
  405188:	970a      	str	r7, [sp, #40]	; 0x28
  40518a:	9712      	str	r7, [sp, #72]	; 0x48
  40518c:	920f      	str	r2, [sp, #60]	; 0x3c
  40518e:	930e      	str	r3, [sp, #56]	; 0x38
  405190:	ae28      	add	r6, sp, #160	; 0xa0
  405192:	e5df      	b.n	404d54 <_svfprintf_r+0x238>
  405194:	9311      	str	r3, [sp, #68]	; 0x44
  405196:	2a00      	cmp	r2, #0
  405198:	f040 86ea 	bne.w	405f70 <_svfprintf_r+0x1454>
  40519c:	f01b 0f20 	tst.w	fp, #32
  4051a0:	d15d      	bne.n	40525e <_svfprintf_r+0x742>
  4051a2:	f01b 0f10 	tst.w	fp, #16
  4051a6:	f040 8308 	bne.w	4057ba <_svfprintf_r+0xc9e>
  4051aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4051ae:	f000 8304 	beq.w	4057ba <_svfprintf_r+0xc9e>
  4051b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4051b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4051b8:	3104      	adds	r1, #4
  4051ba:	17e5      	asrs	r5, r4, #31
  4051bc:	4622      	mov	r2, r4
  4051be:	462b      	mov	r3, r5
  4051c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4051c2:	2a00      	cmp	r2, #0
  4051c4:	f173 0300 	sbcs.w	r3, r3, #0
  4051c8:	db58      	blt.n	40527c <_svfprintf_r+0x760>
  4051ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4051d0:	1c4a      	adds	r2, r1, #1
  4051d2:	f04f 0301 	mov.w	r3, #1
  4051d6:	f47f ad9b 	bne.w	404d10 <_svfprintf_r+0x1f4>
  4051da:	ea54 0205 	orrs.w	r2, r4, r5
  4051de:	f000 81df 	beq.w	4055a0 <_svfprintf_r+0xa84>
  4051e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4051e6:	2b01      	cmp	r3, #1
  4051e8:	f000 827b 	beq.w	4056e2 <_svfprintf_r+0xbc6>
  4051ec:	2b02      	cmp	r3, #2
  4051ee:	f040 8206 	bne.w	4055fe <_svfprintf_r+0xae2>
  4051f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4051f4:	464e      	mov	r6, r9
  4051f6:	0923      	lsrs	r3, r4, #4
  4051f8:	f004 010f 	and.w	r1, r4, #15
  4051fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405200:	092a      	lsrs	r2, r5, #4
  405202:	461c      	mov	r4, r3
  405204:	4615      	mov	r5, r2
  405206:	5c43      	ldrb	r3, [r0, r1]
  405208:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40520c:	ea54 0305 	orrs.w	r3, r4, r5
  405210:	d1f1      	bne.n	4051f6 <_svfprintf_r+0x6da>
  405212:	eba9 0306 	sub.w	r3, r9, r6
  405216:	930e      	str	r3, [sp, #56]	; 0x38
  405218:	e590      	b.n	404d3c <_svfprintf_r+0x220>
  40521a:	9311      	str	r3, [sp, #68]	; 0x44
  40521c:	2a00      	cmp	r2, #0
  40521e:	f040 86a3 	bne.w	405f68 <_svfprintf_r+0x144c>
  405222:	4b7e      	ldr	r3, [pc, #504]	; (40541c <_svfprintf_r+0x900>)
  405224:	9318      	str	r3, [sp, #96]	; 0x60
  405226:	f01b 0f20 	tst.w	fp, #32
  40522a:	f43f aeef 	beq.w	40500c <_svfprintf_r+0x4f0>
  40522e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405230:	3507      	adds	r5, #7
  405232:	f025 0307 	bic.w	r3, r5, #7
  405236:	f103 0208 	add.w	r2, r3, #8
  40523a:	f01b 0f01 	tst.w	fp, #1
  40523e:	920f      	str	r2, [sp, #60]	; 0x3c
  405240:	e9d3 4500 	ldrd	r4, r5, [r3]
  405244:	f47f aef4 	bne.w	405030 <_svfprintf_r+0x514>
  405248:	2302      	movs	r3, #2
  40524a:	e55a      	b.n	404d02 <_svfprintf_r+0x1e6>
  40524c:	9311      	str	r3, [sp, #68]	; 0x44
  40524e:	2a00      	cmp	r2, #0
  405250:	f040 8686 	bne.w	405f60 <_svfprintf_r+0x1444>
  405254:	f04b 0b10 	orr.w	fp, fp, #16
  405258:	f01b 0f20 	tst.w	fp, #32
  40525c:	d0a1      	beq.n	4051a2 <_svfprintf_r+0x686>
  40525e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405260:	3507      	adds	r5, #7
  405262:	f025 0507 	bic.w	r5, r5, #7
  405266:	e9d5 2300 	ldrd	r2, r3, [r5]
  40526a:	2a00      	cmp	r2, #0
  40526c:	f105 0108 	add.w	r1, r5, #8
  405270:	461d      	mov	r5, r3
  405272:	f173 0300 	sbcs.w	r3, r3, #0
  405276:	910f      	str	r1, [sp, #60]	; 0x3c
  405278:	4614      	mov	r4, r2
  40527a:	daa6      	bge.n	4051ca <_svfprintf_r+0x6ae>
  40527c:	272d      	movs	r7, #45	; 0x2d
  40527e:	4264      	negs	r4, r4
  405280:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405284:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405288:	2301      	movs	r3, #1
  40528a:	e53d      	b.n	404d08 <_svfprintf_r+0x1ec>
  40528c:	9311      	str	r3, [sp, #68]	; 0x44
  40528e:	2a00      	cmp	r2, #0
  405290:	f040 8662 	bne.w	405f58 <_svfprintf_r+0x143c>
  405294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405296:	3507      	adds	r5, #7
  405298:	f025 0307 	bic.w	r3, r5, #7
  40529c:	f103 0208 	add.w	r2, r3, #8
  4052a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4052a2:	681a      	ldr	r2, [r3, #0]
  4052a4:	9215      	str	r2, [sp, #84]	; 0x54
  4052a6:	685b      	ldr	r3, [r3, #4]
  4052a8:	9314      	str	r3, [sp, #80]	; 0x50
  4052aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4052ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4052ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4052b2:	4628      	mov	r0, r5
  4052b4:	4621      	mov	r1, r4
  4052b6:	f04f 32ff 	mov.w	r2, #4294967295
  4052ba:	4b59      	ldr	r3, [pc, #356]	; (405420 <_svfprintf_r+0x904>)
  4052bc:	f005 fb88 	bl	40a9d0 <__aeabi_dcmpun>
  4052c0:	2800      	cmp	r0, #0
  4052c2:	f040 834a 	bne.w	40595a <_svfprintf_r+0xe3e>
  4052c6:	4628      	mov	r0, r5
  4052c8:	4621      	mov	r1, r4
  4052ca:	f04f 32ff 	mov.w	r2, #4294967295
  4052ce:	4b54      	ldr	r3, [pc, #336]	; (405420 <_svfprintf_r+0x904>)
  4052d0:	f005 fb60 	bl	40a994 <__aeabi_dcmple>
  4052d4:	2800      	cmp	r0, #0
  4052d6:	f040 8340 	bne.w	40595a <_svfprintf_r+0xe3e>
  4052da:	a815      	add	r0, sp, #84	; 0x54
  4052dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4052de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4052e0:	f005 fb4e 	bl	40a980 <__aeabi_dcmplt>
  4052e4:	2800      	cmp	r0, #0
  4052e6:	f040 8530 	bne.w	405d4a <_svfprintf_r+0x122e>
  4052ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4052ee:	4e4d      	ldr	r6, [pc, #308]	; (405424 <_svfprintf_r+0x908>)
  4052f0:	4b4d      	ldr	r3, [pc, #308]	; (405428 <_svfprintf_r+0x90c>)
  4052f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4052f6:	9007      	str	r0, [sp, #28]
  4052f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4052fa:	2203      	movs	r2, #3
  4052fc:	2100      	movs	r1, #0
  4052fe:	9208      	str	r2, [sp, #32]
  405300:	910a      	str	r1, [sp, #40]	; 0x28
  405302:	2847      	cmp	r0, #71	; 0x47
  405304:	bfd8      	it	le
  405306:	461e      	movle	r6, r3
  405308:	920e      	str	r2, [sp, #56]	; 0x38
  40530a:	9112      	str	r1, [sp, #72]	; 0x48
  40530c:	e51e      	b.n	404d4c <_svfprintf_r+0x230>
  40530e:	f04b 0b08 	orr.w	fp, fp, #8
  405312:	f89a 3000 	ldrb.w	r3, [sl]
  405316:	e459      	b.n	404bcc <_svfprintf_r+0xb0>
  405318:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40531c:	2300      	movs	r3, #0
  40531e:	461c      	mov	r4, r3
  405320:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405324:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405328:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40532c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405330:	2809      	cmp	r0, #9
  405332:	d9f5      	bls.n	405320 <_svfprintf_r+0x804>
  405334:	940d      	str	r4, [sp, #52]	; 0x34
  405336:	e44b      	b.n	404bd0 <_svfprintf_r+0xb4>
  405338:	f04b 0b10 	orr.w	fp, fp, #16
  40533c:	9311      	str	r3, [sp, #68]	; 0x44
  40533e:	f01b 0320 	ands.w	r3, fp, #32
  405342:	f43f ae1d 	beq.w	404f80 <_svfprintf_r+0x464>
  405346:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405348:	3507      	adds	r5, #7
  40534a:	f025 0307 	bic.w	r3, r5, #7
  40534e:	f103 0208 	add.w	r2, r3, #8
  405352:	e9d3 4500 	ldrd	r4, r5, [r3]
  405356:	920f      	str	r2, [sp, #60]	; 0x3c
  405358:	2300      	movs	r3, #0
  40535a:	e4d2      	b.n	404d02 <_svfprintf_r+0x1e6>
  40535c:	9311      	str	r3, [sp, #68]	; 0x44
  40535e:	2a00      	cmp	r2, #0
  405360:	f040 85e7 	bne.w	405f32 <_svfprintf_r+0x1416>
  405364:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405366:	2a00      	cmp	r2, #0
  405368:	f43f aca3 	beq.w	404cb2 <_svfprintf_r+0x196>
  40536c:	2300      	movs	r3, #0
  40536e:	2101      	movs	r1, #1
  405370:	461f      	mov	r7, r3
  405372:	9108      	str	r1, [sp, #32]
  405374:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405378:	f8cd b01c 	str.w	fp, [sp, #28]
  40537c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405380:	930a      	str	r3, [sp, #40]	; 0x28
  405382:	9312      	str	r3, [sp, #72]	; 0x48
  405384:	910e      	str	r1, [sp, #56]	; 0x38
  405386:	ae28      	add	r6, sp, #160	; 0xa0
  405388:	e4e4      	b.n	404d54 <_svfprintf_r+0x238>
  40538a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40538c:	e534      	b.n	404df8 <_svfprintf_r+0x2dc>
  40538e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405390:	2b65      	cmp	r3, #101	; 0x65
  405392:	f340 80a7 	ble.w	4054e4 <_svfprintf_r+0x9c8>
  405396:	a815      	add	r0, sp, #84	; 0x54
  405398:	c80d      	ldmia	r0, {r0, r2, r3}
  40539a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40539c:	f005 fae6 	bl	40a96c <__aeabi_dcmpeq>
  4053a0:	2800      	cmp	r0, #0
  4053a2:	f000 8150 	beq.w	405646 <_svfprintf_r+0xb2a>
  4053a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053a8:	4a20      	ldr	r2, [pc, #128]	; (40542c <_svfprintf_r+0x910>)
  4053aa:	f8c8 2000 	str.w	r2, [r8]
  4053ae:	3301      	adds	r3, #1
  4053b0:	3401      	adds	r4, #1
  4053b2:	2201      	movs	r2, #1
  4053b4:	2b07      	cmp	r3, #7
  4053b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4053b8:	9326      	str	r3, [sp, #152]	; 0x98
  4053ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4053be:	f300 836a 	bgt.w	405a96 <_svfprintf_r+0xf7a>
  4053c2:	f108 0808 	add.w	r8, r8, #8
  4053c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4053c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4053ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053cc:	4293      	cmp	r3, r2
  4053ce:	db03      	blt.n	4053d8 <_svfprintf_r+0x8bc>
  4053d0:	9b07      	ldr	r3, [sp, #28]
  4053d2:	07dd      	lsls	r5, r3, #31
  4053d4:	f57f ad82 	bpl.w	404edc <_svfprintf_r+0x3c0>
  4053d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4053dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4053de:	f8c8 2000 	str.w	r2, [r8]
  4053e2:	3301      	adds	r3, #1
  4053e4:	440c      	add	r4, r1
  4053e6:	2b07      	cmp	r3, #7
  4053e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4053ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4053ee:	9326      	str	r3, [sp, #152]	; 0x98
  4053f0:	f300 839e 	bgt.w	405b30 <_svfprintf_r+0x1014>
  4053f4:	f108 0808 	add.w	r8, r8, #8
  4053f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4053fa:	1e5e      	subs	r6, r3, #1
  4053fc:	2e00      	cmp	r6, #0
  4053fe:	f77f ad6d 	ble.w	404edc <_svfprintf_r+0x3c0>
  405402:	2e10      	cmp	r6, #16
  405404:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405406:	4d0a      	ldr	r5, [pc, #40]	; (405430 <_svfprintf_r+0x914>)
  405408:	f340 81f5 	ble.w	4057f6 <_svfprintf_r+0xcda>
  40540c:	4622      	mov	r2, r4
  40540e:	2710      	movs	r7, #16
  405410:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405414:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405416:	e013      	b.n	405440 <_svfprintf_r+0x924>
  405418:	0040b190 	.word	0x0040b190
  40541c:	0040b17c 	.word	0x0040b17c
  405420:	7fefffff 	.word	0x7fefffff
  405424:	0040b170 	.word	0x0040b170
  405428:	0040b16c 	.word	0x0040b16c
  40542c:	0040b1ac 	.word	0x0040b1ac
  405430:	0040b1c0 	.word	0x0040b1c0
  405434:	f108 0808 	add.w	r8, r8, #8
  405438:	3e10      	subs	r6, #16
  40543a:	2e10      	cmp	r6, #16
  40543c:	f340 81da 	ble.w	4057f4 <_svfprintf_r+0xcd8>
  405440:	3301      	adds	r3, #1
  405442:	3210      	adds	r2, #16
  405444:	2b07      	cmp	r3, #7
  405446:	9227      	str	r2, [sp, #156]	; 0x9c
  405448:	9326      	str	r3, [sp, #152]	; 0x98
  40544a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40544e:	ddf1      	ble.n	405434 <_svfprintf_r+0x918>
  405450:	aa25      	add	r2, sp, #148	; 0x94
  405452:	4621      	mov	r1, r4
  405454:	4658      	mov	r0, fp
  405456:	f004 fafb 	bl	409a50 <__ssprint_r>
  40545a:	2800      	cmp	r0, #0
  40545c:	f47f ac30 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405460:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405462:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405464:	46c8      	mov	r8, r9
  405466:	e7e7      	b.n	405438 <_svfprintf_r+0x91c>
  405468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40546a:	9a08      	ldr	r2, [sp, #32]
  40546c:	1a9f      	subs	r7, r3, r2
  40546e:	2f00      	cmp	r7, #0
  405470:	f77f ace5 	ble.w	404e3e <_svfprintf_r+0x322>
  405474:	2f10      	cmp	r7, #16
  405476:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405478:	4db6      	ldr	r5, [pc, #728]	; (405754 <_svfprintf_r+0xc38>)
  40547a:	dd27      	ble.n	4054cc <_svfprintf_r+0x9b0>
  40547c:	4642      	mov	r2, r8
  40547e:	4621      	mov	r1, r4
  405480:	46b0      	mov	r8, r6
  405482:	f04f 0b10 	mov.w	fp, #16
  405486:	462e      	mov	r6, r5
  405488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40548a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40548c:	e004      	b.n	405498 <_svfprintf_r+0x97c>
  40548e:	3f10      	subs	r7, #16
  405490:	2f10      	cmp	r7, #16
  405492:	f102 0208 	add.w	r2, r2, #8
  405496:	dd15      	ble.n	4054c4 <_svfprintf_r+0x9a8>
  405498:	3301      	adds	r3, #1
  40549a:	3110      	adds	r1, #16
  40549c:	2b07      	cmp	r3, #7
  40549e:	9127      	str	r1, [sp, #156]	; 0x9c
  4054a0:	9326      	str	r3, [sp, #152]	; 0x98
  4054a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4054a6:	ddf2      	ble.n	40548e <_svfprintf_r+0x972>
  4054a8:	aa25      	add	r2, sp, #148	; 0x94
  4054aa:	4629      	mov	r1, r5
  4054ac:	4620      	mov	r0, r4
  4054ae:	f004 facf 	bl	409a50 <__ssprint_r>
  4054b2:	2800      	cmp	r0, #0
  4054b4:	f47f ac04 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4054b8:	3f10      	subs	r7, #16
  4054ba:	2f10      	cmp	r7, #16
  4054bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4054be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054c0:	464a      	mov	r2, r9
  4054c2:	dce9      	bgt.n	405498 <_svfprintf_r+0x97c>
  4054c4:	4635      	mov	r5, r6
  4054c6:	460c      	mov	r4, r1
  4054c8:	4646      	mov	r6, r8
  4054ca:	4690      	mov	r8, r2
  4054cc:	3301      	adds	r3, #1
  4054ce:	443c      	add	r4, r7
  4054d0:	2b07      	cmp	r3, #7
  4054d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4054d4:	9326      	str	r3, [sp, #152]	; 0x98
  4054d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4054da:	f300 8232 	bgt.w	405942 <_svfprintf_r+0xe26>
  4054de:	f108 0808 	add.w	r8, r8, #8
  4054e2:	e4ac      	b.n	404e3e <_svfprintf_r+0x322>
  4054e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4054e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4054e8:	2b01      	cmp	r3, #1
  4054ea:	f340 81fe 	ble.w	4058ea <_svfprintf_r+0xdce>
  4054ee:	3701      	adds	r7, #1
  4054f0:	3401      	adds	r4, #1
  4054f2:	2301      	movs	r3, #1
  4054f4:	2f07      	cmp	r7, #7
  4054f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4054f8:	9726      	str	r7, [sp, #152]	; 0x98
  4054fa:	f8c8 6000 	str.w	r6, [r8]
  4054fe:	f8c8 3004 	str.w	r3, [r8, #4]
  405502:	f300 8203 	bgt.w	40590c <_svfprintf_r+0xdf0>
  405506:	f108 0808 	add.w	r8, r8, #8
  40550a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40550c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40550e:	f8c8 3000 	str.w	r3, [r8]
  405512:	3701      	adds	r7, #1
  405514:	4414      	add	r4, r2
  405516:	2f07      	cmp	r7, #7
  405518:	9427      	str	r4, [sp, #156]	; 0x9c
  40551a:	9726      	str	r7, [sp, #152]	; 0x98
  40551c:	f8c8 2004 	str.w	r2, [r8, #4]
  405520:	f300 8200 	bgt.w	405924 <_svfprintf_r+0xe08>
  405524:	f108 0808 	add.w	r8, r8, #8
  405528:	a815      	add	r0, sp, #84	; 0x54
  40552a:	c80d      	ldmia	r0, {r0, r2, r3}
  40552c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40552e:	f005 fa1d 	bl	40a96c <__aeabi_dcmpeq>
  405532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405534:	2800      	cmp	r0, #0
  405536:	f040 8101 	bne.w	40573c <_svfprintf_r+0xc20>
  40553a:	3b01      	subs	r3, #1
  40553c:	3701      	adds	r7, #1
  40553e:	3601      	adds	r6, #1
  405540:	441c      	add	r4, r3
  405542:	2f07      	cmp	r7, #7
  405544:	9726      	str	r7, [sp, #152]	; 0x98
  405546:	9427      	str	r4, [sp, #156]	; 0x9c
  405548:	f8c8 6000 	str.w	r6, [r8]
  40554c:	f8c8 3004 	str.w	r3, [r8, #4]
  405550:	f300 8127 	bgt.w	4057a2 <_svfprintf_r+0xc86>
  405554:	f108 0808 	add.w	r8, r8, #8
  405558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40555a:	f8c8 2004 	str.w	r2, [r8, #4]
  40555e:	3701      	adds	r7, #1
  405560:	4414      	add	r4, r2
  405562:	ab21      	add	r3, sp, #132	; 0x84
  405564:	2f07      	cmp	r7, #7
  405566:	9427      	str	r4, [sp, #156]	; 0x9c
  405568:	9726      	str	r7, [sp, #152]	; 0x98
  40556a:	f8c8 3000 	str.w	r3, [r8]
  40556e:	f77f acb3 	ble.w	404ed8 <_svfprintf_r+0x3bc>
  405572:	aa25      	add	r2, sp, #148	; 0x94
  405574:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405576:	980c      	ldr	r0, [sp, #48]	; 0x30
  405578:	f004 fa6a 	bl	409a50 <__ssprint_r>
  40557c:	2800      	cmp	r0, #0
  40557e:	f47f ab9f 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405582:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405584:	46c8      	mov	r8, r9
  405586:	e4a9      	b.n	404edc <_svfprintf_r+0x3c0>
  405588:	aa25      	add	r2, sp, #148	; 0x94
  40558a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40558c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40558e:	f004 fa5f 	bl	409a50 <__ssprint_r>
  405592:	2800      	cmp	r0, #0
  405594:	f43f aceb 	beq.w	404f6e <_svfprintf_r+0x452>
  405598:	f7ff bb92 	b.w	404cc0 <_svfprintf_r+0x1a4>
  40559c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4055a0:	2b01      	cmp	r3, #1
  4055a2:	f000 8134 	beq.w	40580e <_svfprintf_r+0xcf2>
  4055a6:	2b02      	cmp	r3, #2
  4055a8:	d125      	bne.n	4055f6 <_svfprintf_r+0xada>
  4055aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4055ae:	2400      	movs	r4, #0
  4055b0:	2500      	movs	r5, #0
  4055b2:	e61e      	b.n	4051f2 <_svfprintf_r+0x6d6>
  4055b4:	aa25      	add	r2, sp, #148	; 0x94
  4055b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055ba:	f004 fa49 	bl	409a50 <__ssprint_r>
  4055be:	2800      	cmp	r0, #0
  4055c0:	f47f ab7e 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4055c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055c6:	46c8      	mov	r8, r9
  4055c8:	e475      	b.n	404eb6 <_svfprintf_r+0x39a>
  4055ca:	aa25      	add	r2, sp, #148	; 0x94
  4055cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055d0:	f004 fa3e 	bl	409a50 <__ssprint_r>
  4055d4:	2800      	cmp	r0, #0
  4055d6:	f47f ab73 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4055da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055dc:	46c8      	mov	r8, r9
  4055de:	e41b      	b.n	404e18 <_svfprintf_r+0x2fc>
  4055e0:	aa25      	add	r2, sp, #148	; 0x94
  4055e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055e6:	f004 fa33 	bl	409a50 <__ssprint_r>
  4055ea:	2800      	cmp	r0, #0
  4055ec:	f47f ab68 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4055f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055f2:	46c8      	mov	r8, r9
  4055f4:	e420      	b.n	404e38 <_svfprintf_r+0x31c>
  4055f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4055fa:	2400      	movs	r4, #0
  4055fc:	2500      	movs	r5, #0
  4055fe:	4649      	mov	r1, r9
  405600:	e000      	b.n	405604 <_svfprintf_r+0xae8>
  405602:	4631      	mov	r1, r6
  405604:	08e2      	lsrs	r2, r4, #3
  405606:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40560a:	08e8      	lsrs	r0, r5, #3
  40560c:	f004 0307 	and.w	r3, r4, #7
  405610:	4605      	mov	r5, r0
  405612:	4614      	mov	r4, r2
  405614:	3330      	adds	r3, #48	; 0x30
  405616:	ea54 0205 	orrs.w	r2, r4, r5
  40561a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40561e:	f101 36ff 	add.w	r6, r1, #4294967295
  405622:	d1ee      	bne.n	405602 <_svfprintf_r+0xae6>
  405624:	9a07      	ldr	r2, [sp, #28]
  405626:	07d2      	lsls	r2, r2, #31
  405628:	f57f adf3 	bpl.w	405212 <_svfprintf_r+0x6f6>
  40562c:	2b30      	cmp	r3, #48	; 0x30
  40562e:	f43f adf0 	beq.w	405212 <_svfprintf_r+0x6f6>
  405632:	3902      	subs	r1, #2
  405634:	2330      	movs	r3, #48	; 0x30
  405636:	f806 3c01 	strb.w	r3, [r6, #-1]
  40563a:	eba9 0301 	sub.w	r3, r9, r1
  40563e:	930e      	str	r3, [sp, #56]	; 0x38
  405640:	460e      	mov	r6, r1
  405642:	f7ff bb7b 	b.w	404d3c <_svfprintf_r+0x220>
  405646:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405648:	2900      	cmp	r1, #0
  40564a:	f340 822e 	ble.w	405aaa <_svfprintf_r+0xf8e>
  40564e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405652:	4293      	cmp	r3, r2
  405654:	bfa8      	it	ge
  405656:	4613      	movge	r3, r2
  405658:	2b00      	cmp	r3, #0
  40565a:	461f      	mov	r7, r3
  40565c:	dd0d      	ble.n	40567a <_svfprintf_r+0xb5e>
  40565e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405660:	f8c8 6000 	str.w	r6, [r8]
  405664:	3301      	adds	r3, #1
  405666:	443c      	add	r4, r7
  405668:	2b07      	cmp	r3, #7
  40566a:	9427      	str	r4, [sp, #156]	; 0x9c
  40566c:	f8c8 7004 	str.w	r7, [r8, #4]
  405670:	9326      	str	r3, [sp, #152]	; 0x98
  405672:	f300 831f 	bgt.w	405cb4 <_svfprintf_r+0x1198>
  405676:	f108 0808 	add.w	r8, r8, #8
  40567a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40567c:	2f00      	cmp	r7, #0
  40567e:	bfa8      	it	ge
  405680:	1bdb      	subge	r3, r3, r7
  405682:	2b00      	cmp	r3, #0
  405684:	461f      	mov	r7, r3
  405686:	f340 80d6 	ble.w	405836 <_svfprintf_r+0xd1a>
  40568a:	2f10      	cmp	r7, #16
  40568c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40568e:	4d31      	ldr	r5, [pc, #196]	; (405754 <_svfprintf_r+0xc38>)
  405690:	f340 81ed 	ble.w	405a6e <_svfprintf_r+0xf52>
  405694:	4642      	mov	r2, r8
  405696:	4621      	mov	r1, r4
  405698:	46b0      	mov	r8, r6
  40569a:	f04f 0b10 	mov.w	fp, #16
  40569e:	462e      	mov	r6, r5
  4056a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4056a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4056a4:	e004      	b.n	4056b0 <_svfprintf_r+0xb94>
  4056a6:	3208      	adds	r2, #8
  4056a8:	3f10      	subs	r7, #16
  4056aa:	2f10      	cmp	r7, #16
  4056ac:	f340 81db 	ble.w	405a66 <_svfprintf_r+0xf4a>
  4056b0:	3301      	adds	r3, #1
  4056b2:	3110      	adds	r1, #16
  4056b4:	2b07      	cmp	r3, #7
  4056b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4056b8:	9326      	str	r3, [sp, #152]	; 0x98
  4056ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4056be:	ddf2      	ble.n	4056a6 <_svfprintf_r+0xb8a>
  4056c0:	aa25      	add	r2, sp, #148	; 0x94
  4056c2:	4629      	mov	r1, r5
  4056c4:	4620      	mov	r0, r4
  4056c6:	f004 f9c3 	bl	409a50 <__ssprint_r>
  4056ca:	2800      	cmp	r0, #0
  4056cc:	f47f aaf8 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4056d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4056d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056d4:	464a      	mov	r2, r9
  4056d6:	e7e7      	b.n	4056a8 <_svfprintf_r+0xb8c>
  4056d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056da:	930e      	str	r3, [sp, #56]	; 0x38
  4056dc:	464e      	mov	r6, r9
  4056de:	f7ff bb2d 	b.w	404d3c <_svfprintf_r+0x220>
  4056e2:	2d00      	cmp	r5, #0
  4056e4:	bf08      	it	eq
  4056e6:	2c0a      	cmpeq	r4, #10
  4056e8:	f0c0 808f 	bcc.w	40580a <_svfprintf_r+0xcee>
  4056ec:	464e      	mov	r6, r9
  4056ee:	4620      	mov	r0, r4
  4056f0:	4629      	mov	r1, r5
  4056f2:	220a      	movs	r2, #10
  4056f4:	2300      	movs	r3, #0
  4056f6:	f005 f9a9 	bl	40aa4c <__aeabi_uldivmod>
  4056fa:	3230      	adds	r2, #48	; 0x30
  4056fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405700:	4620      	mov	r0, r4
  405702:	4629      	mov	r1, r5
  405704:	2300      	movs	r3, #0
  405706:	220a      	movs	r2, #10
  405708:	f005 f9a0 	bl	40aa4c <__aeabi_uldivmod>
  40570c:	4604      	mov	r4, r0
  40570e:	460d      	mov	r5, r1
  405710:	ea54 0305 	orrs.w	r3, r4, r5
  405714:	d1eb      	bne.n	4056ee <_svfprintf_r+0xbd2>
  405716:	eba9 0306 	sub.w	r3, r9, r6
  40571a:	930e      	str	r3, [sp, #56]	; 0x38
  40571c:	f7ff bb0e 	b.w	404d3c <_svfprintf_r+0x220>
  405720:	aa25      	add	r2, sp, #148	; 0x94
  405722:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405724:	980c      	ldr	r0, [sp, #48]	; 0x30
  405726:	f004 f993 	bl	409a50 <__ssprint_r>
  40572a:	2800      	cmp	r0, #0
  40572c:	f47f aac8 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405730:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405734:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405736:	46c8      	mov	r8, r9
  405738:	f7ff bb5e 	b.w	404df8 <_svfprintf_r+0x2dc>
  40573c:	1e5e      	subs	r6, r3, #1
  40573e:	2e00      	cmp	r6, #0
  405740:	f77f af0a 	ble.w	405558 <_svfprintf_r+0xa3c>
  405744:	2e10      	cmp	r6, #16
  405746:	4d03      	ldr	r5, [pc, #12]	; (405754 <_svfprintf_r+0xc38>)
  405748:	dd22      	ble.n	405790 <_svfprintf_r+0xc74>
  40574a:	4622      	mov	r2, r4
  40574c:	f04f 0b10 	mov.w	fp, #16
  405750:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405752:	e006      	b.n	405762 <_svfprintf_r+0xc46>
  405754:	0040b1c0 	.word	0x0040b1c0
  405758:	3e10      	subs	r6, #16
  40575a:	2e10      	cmp	r6, #16
  40575c:	f108 0808 	add.w	r8, r8, #8
  405760:	dd15      	ble.n	40578e <_svfprintf_r+0xc72>
  405762:	3701      	adds	r7, #1
  405764:	3210      	adds	r2, #16
  405766:	2f07      	cmp	r7, #7
  405768:	9227      	str	r2, [sp, #156]	; 0x9c
  40576a:	9726      	str	r7, [sp, #152]	; 0x98
  40576c:	e888 0820 	stmia.w	r8, {r5, fp}
  405770:	ddf2      	ble.n	405758 <_svfprintf_r+0xc3c>
  405772:	aa25      	add	r2, sp, #148	; 0x94
  405774:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405776:	4620      	mov	r0, r4
  405778:	f004 f96a 	bl	409a50 <__ssprint_r>
  40577c:	2800      	cmp	r0, #0
  40577e:	f47f aa9f 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405782:	3e10      	subs	r6, #16
  405784:	2e10      	cmp	r6, #16
  405786:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405788:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40578a:	46c8      	mov	r8, r9
  40578c:	dce9      	bgt.n	405762 <_svfprintf_r+0xc46>
  40578e:	4614      	mov	r4, r2
  405790:	3701      	adds	r7, #1
  405792:	4434      	add	r4, r6
  405794:	2f07      	cmp	r7, #7
  405796:	9427      	str	r4, [sp, #156]	; 0x9c
  405798:	9726      	str	r7, [sp, #152]	; 0x98
  40579a:	e888 0060 	stmia.w	r8, {r5, r6}
  40579e:	f77f aed9 	ble.w	405554 <_svfprintf_r+0xa38>
  4057a2:	aa25      	add	r2, sp, #148	; 0x94
  4057a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057a8:	f004 f952 	bl	409a50 <__ssprint_r>
  4057ac:	2800      	cmp	r0, #0
  4057ae:	f47f aa87 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4057b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4057b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4057b6:	46c8      	mov	r8, r9
  4057b8:	e6ce      	b.n	405558 <_svfprintf_r+0xa3c>
  4057ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4057bc:	6814      	ldr	r4, [r2, #0]
  4057be:	4613      	mov	r3, r2
  4057c0:	3304      	adds	r3, #4
  4057c2:	17e5      	asrs	r5, r4, #31
  4057c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4057c6:	4622      	mov	r2, r4
  4057c8:	462b      	mov	r3, r5
  4057ca:	e4fa      	b.n	4051c2 <_svfprintf_r+0x6a6>
  4057cc:	3204      	adds	r2, #4
  4057ce:	681c      	ldr	r4, [r3, #0]
  4057d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4057d2:	2301      	movs	r3, #1
  4057d4:	2500      	movs	r5, #0
  4057d6:	f7ff ba94 	b.w	404d02 <_svfprintf_r+0x1e6>
  4057da:	681c      	ldr	r4, [r3, #0]
  4057dc:	3304      	adds	r3, #4
  4057de:	930f      	str	r3, [sp, #60]	; 0x3c
  4057e0:	2500      	movs	r5, #0
  4057e2:	e421      	b.n	405028 <_svfprintf_r+0x50c>
  4057e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057e6:	460a      	mov	r2, r1
  4057e8:	3204      	adds	r2, #4
  4057ea:	680c      	ldr	r4, [r1, #0]
  4057ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4057ee:	2500      	movs	r5, #0
  4057f0:	f7ff ba87 	b.w	404d02 <_svfprintf_r+0x1e6>
  4057f4:	4614      	mov	r4, r2
  4057f6:	3301      	adds	r3, #1
  4057f8:	4434      	add	r4, r6
  4057fa:	2b07      	cmp	r3, #7
  4057fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4057fe:	9326      	str	r3, [sp, #152]	; 0x98
  405800:	e888 0060 	stmia.w	r8, {r5, r6}
  405804:	f77f ab68 	ble.w	404ed8 <_svfprintf_r+0x3bc>
  405808:	e6b3      	b.n	405572 <_svfprintf_r+0xa56>
  40580a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40580e:	f8cd b01c 	str.w	fp, [sp, #28]
  405812:	ae42      	add	r6, sp, #264	; 0x108
  405814:	3430      	adds	r4, #48	; 0x30
  405816:	2301      	movs	r3, #1
  405818:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40581c:	930e      	str	r3, [sp, #56]	; 0x38
  40581e:	f7ff ba8d 	b.w	404d3c <_svfprintf_r+0x220>
  405822:	aa25      	add	r2, sp, #148	; 0x94
  405824:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405826:	980c      	ldr	r0, [sp, #48]	; 0x30
  405828:	f004 f912 	bl	409a50 <__ssprint_r>
  40582c:	2800      	cmp	r0, #0
  40582e:	f47f aa47 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405832:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405834:	46c8      	mov	r8, r9
  405836:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40583a:	429a      	cmp	r2, r3
  40583c:	db44      	blt.n	4058c8 <_svfprintf_r+0xdac>
  40583e:	9b07      	ldr	r3, [sp, #28]
  405840:	07d9      	lsls	r1, r3, #31
  405842:	d441      	bmi.n	4058c8 <_svfprintf_r+0xdac>
  405844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405846:	9812      	ldr	r0, [sp, #72]	; 0x48
  405848:	1a9a      	subs	r2, r3, r2
  40584a:	1a1d      	subs	r5, r3, r0
  40584c:	4295      	cmp	r5, r2
  40584e:	bfa8      	it	ge
  405850:	4615      	movge	r5, r2
  405852:	2d00      	cmp	r5, #0
  405854:	dd0e      	ble.n	405874 <_svfprintf_r+0xd58>
  405856:	9926      	ldr	r1, [sp, #152]	; 0x98
  405858:	f8c8 5004 	str.w	r5, [r8, #4]
  40585c:	3101      	adds	r1, #1
  40585e:	4406      	add	r6, r0
  405860:	442c      	add	r4, r5
  405862:	2907      	cmp	r1, #7
  405864:	f8c8 6000 	str.w	r6, [r8]
  405868:	9427      	str	r4, [sp, #156]	; 0x9c
  40586a:	9126      	str	r1, [sp, #152]	; 0x98
  40586c:	f300 823b 	bgt.w	405ce6 <_svfprintf_r+0x11ca>
  405870:	f108 0808 	add.w	r8, r8, #8
  405874:	2d00      	cmp	r5, #0
  405876:	bfac      	ite	ge
  405878:	1b56      	subge	r6, r2, r5
  40587a:	4616      	movlt	r6, r2
  40587c:	2e00      	cmp	r6, #0
  40587e:	f77f ab2d 	ble.w	404edc <_svfprintf_r+0x3c0>
  405882:	2e10      	cmp	r6, #16
  405884:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405886:	4db0      	ldr	r5, [pc, #704]	; (405b48 <_svfprintf_r+0x102c>)
  405888:	ddb5      	ble.n	4057f6 <_svfprintf_r+0xcda>
  40588a:	4622      	mov	r2, r4
  40588c:	2710      	movs	r7, #16
  40588e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405894:	e004      	b.n	4058a0 <_svfprintf_r+0xd84>
  405896:	f108 0808 	add.w	r8, r8, #8
  40589a:	3e10      	subs	r6, #16
  40589c:	2e10      	cmp	r6, #16
  40589e:	dda9      	ble.n	4057f4 <_svfprintf_r+0xcd8>
  4058a0:	3301      	adds	r3, #1
  4058a2:	3210      	adds	r2, #16
  4058a4:	2b07      	cmp	r3, #7
  4058a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4058a8:	9326      	str	r3, [sp, #152]	; 0x98
  4058aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4058ae:	ddf2      	ble.n	405896 <_svfprintf_r+0xd7a>
  4058b0:	aa25      	add	r2, sp, #148	; 0x94
  4058b2:	4621      	mov	r1, r4
  4058b4:	4658      	mov	r0, fp
  4058b6:	f004 f8cb 	bl	409a50 <__ssprint_r>
  4058ba:	2800      	cmp	r0, #0
  4058bc:	f47f aa00 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  4058c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4058c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058c4:	46c8      	mov	r8, r9
  4058c6:	e7e8      	b.n	40589a <_svfprintf_r+0xd7e>
  4058c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4058cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4058ce:	f8c8 1000 	str.w	r1, [r8]
  4058d2:	3301      	adds	r3, #1
  4058d4:	4404      	add	r4, r0
  4058d6:	2b07      	cmp	r3, #7
  4058d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4058da:	f8c8 0004 	str.w	r0, [r8, #4]
  4058de:	9326      	str	r3, [sp, #152]	; 0x98
  4058e0:	f300 81f5 	bgt.w	405cce <_svfprintf_r+0x11b2>
  4058e4:	f108 0808 	add.w	r8, r8, #8
  4058e8:	e7ac      	b.n	405844 <_svfprintf_r+0xd28>
  4058ea:	9b07      	ldr	r3, [sp, #28]
  4058ec:	07da      	lsls	r2, r3, #31
  4058ee:	f53f adfe 	bmi.w	4054ee <_svfprintf_r+0x9d2>
  4058f2:	3701      	adds	r7, #1
  4058f4:	3401      	adds	r4, #1
  4058f6:	2301      	movs	r3, #1
  4058f8:	2f07      	cmp	r7, #7
  4058fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4058fc:	9726      	str	r7, [sp, #152]	; 0x98
  4058fe:	f8c8 6000 	str.w	r6, [r8]
  405902:	f8c8 3004 	str.w	r3, [r8, #4]
  405906:	f77f ae25 	ble.w	405554 <_svfprintf_r+0xa38>
  40590a:	e74a      	b.n	4057a2 <_svfprintf_r+0xc86>
  40590c:	aa25      	add	r2, sp, #148	; 0x94
  40590e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405910:	980c      	ldr	r0, [sp, #48]	; 0x30
  405912:	f004 f89d 	bl	409a50 <__ssprint_r>
  405916:	2800      	cmp	r0, #0
  405918:	f47f a9d2 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  40591c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40591e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405920:	46c8      	mov	r8, r9
  405922:	e5f2      	b.n	40550a <_svfprintf_r+0x9ee>
  405924:	aa25      	add	r2, sp, #148	; 0x94
  405926:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405928:	980c      	ldr	r0, [sp, #48]	; 0x30
  40592a:	f004 f891 	bl	409a50 <__ssprint_r>
  40592e:	2800      	cmp	r0, #0
  405930:	f47f a9c6 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405934:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405936:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405938:	46c8      	mov	r8, r9
  40593a:	e5f5      	b.n	405528 <_svfprintf_r+0xa0c>
  40593c:	464e      	mov	r6, r9
  40593e:	f7ff b9fd 	b.w	404d3c <_svfprintf_r+0x220>
  405942:	aa25      	add	r2, sp, #148	; 0x94
  405944:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405946:	980c      	ldr	r0, [sp, #48]	; 0x30
  405948:	f004 f882 	bl	409a50 <__ssprint_r>
  40594c:	2800      	cmp	r0, #0
  40594e:	f47f a9b7 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405952:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405954:	46c8      	mov	r8, r9
  405956:	f7ff ba72 	b.w	404e3e <_svfprintf_r+0x322>
  40595a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40595c:	4622      	mov	r2, r4
  40595e:	4620      	mov	r0, r4
  405960:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405962:	4623      	mov	r3, r4
  405964:	4621      	mov	r1, r4
  405966:	f005 f833 	bl	40a9d0 <__aeabi_dcmpun>
  40596a:	2800      	cmp	r0, #0
  40596c:	f040 8286 	bne.w	405e7c <_svfprintf_r+0x1360>
  405970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405972:	3301      	adds	r3, #1
  405974:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405976:	f023 0320 	bic.w	r3, r3, #32
  40597a:	930e      	str	r3, [sp, #56]	; 0x38
  40597c:	f000 81e2 	beq.w	405d44 <_svfprintf_r+0x1228>
  405980:	2b47      	cmp	r3, #71	; 0x47
  405982:	f000 811e 	beq.w	405bc2 <_svfprintf_r+0x10a6>
  405986:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40598a:	9307      	str	r3, [sp, #28]
  40598c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40598e:	1e1f      	subs	r7, r3, #0
  405990:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405992:	9308      	str	r3, [sp, #32]
  405994:	bfbb      	ittet	lt
  405996:	463b      	movlt	r3, r7
  405998:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40599c:	2300      	movge	r3, #0
  40599e:	232d      	movlt	r3, #45	; 0x2d
  4059a0:	9310      	str	r3, [sp, #64]	; 0x40
  4059a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059a4:	2b66      	cmp	r3, #102	; 0x66
  4059a6:	f000 81bb 	beq.w	405d20 <_svfprintf_r+0x1204>
  4059aa:	2b46      	cmp	r3, #70	; 0x46
  4059ac:	f000 80df 	beq.w	405b6e <_svfprintf_r+0x1052>
  4059b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4059b2:	9a08      	ldr	r2, [sp, #32]
  4059b4:	2b45      	cmp	r3, #69	; 0x45
  4059b6:	bf0c      	ite	eq
  4059b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4059ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4059bc:	a823      	add	r0, sp, #140	; 0x8c
  4059be:	a920      	add	r1, sp, #128	; 0x80
  4059c0:	bf08      	it	eq
  4059c2:	1c5d      	addeq	r5, r3, #1
  4059c4:	9004      	str	r0, [sp, #16]
  4059c6:	9103      	str	r1, [sp, #12]
  4059c8:	a81f      	add	r0, sp, #124	; 0x7c
  4059ca:	2102      	movs	r1, #2
  4059cc:	463b      	mov	r3, r7
  4059ce:	9002      	str	r0, [sp, #8]
  4059d0:	9501      	str	r5, [sp, #4]
  4059d2:	9100      	str	r1, [sp, #0]
  4059d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059d6:	f001 fec7 	bl	407768 <_dtoa_r>
  4059da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059dc:	2b67      	cmp	r3, #103	; 0x67
  4059de:	4606      	mov	r6, r0
  4059e0:	f040 81e0 	bne.w	405da4 <_svfprintf_r+0x1288>
  4059e4:	f01b 0f01 	tst.w	fp, #1
  4059e8:	f000 8246 	beq.w	405e78 <_svfprintf_r+0x135c>
  4059ec:	1974      	adds	r4, r6, r5
  4059ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4059f0:	9808      	ldr	r0, [sp, #32]
  4059f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4059f4:	4639      	mov	r1, r7
  4059f6:	f004 ffb9 	bl	40a96c <__aeabi_dcmpeq>
  4059fa:	2800      	cmp	r0, #0
  4059fc:	f040 8165 	bne.w	405cca <_svfprintf_r+0x11ae>
  405a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405a02:	42a3      	cmp	r3, r4
  405a04:	d206      	bcs.n	405a14 <_svfprintf_r+0xef8>
  405a06:	2130      	movs	r1, #48	; 0x30
  405a08:	1c5a      	adds	r2, r3, #1
  405a0a:	9223      	str	r2, [sp, #140]	; 0x8c
  405a0c:	7019      	strb	r1, [r3, #0]
  405a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405a10:	429c      	cmp	r4, r3
  405a12:	d8f9      	bhi.n	405a08 <_svfprintf_r+0xeec>
  405a14:	1b9b      	subs	r3, r3, r6
  405a16:	9313      	str	r3, [sp, #76]	; 0x4c
  405a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a1a:	2b47      	cmp	r3, #71	; 0x47
  405a1c:	f000 80e9 	beq.w	405bf2 <_svfprintf_r+0x10d6>
  405a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a22:	2b65      	cmp	r3, #101	; 0x65
  405a24:	f340 81cd 	ble.w	405dc2 <_svfprintf_r+0x12a6>
  405a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a2a:	2b66      	cmp	r3, #102	; 0x66
  405a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405a2e:	9312      	str	r3, [sp, #72]	; 0x48
  405a30:	f000 819e 	beq.w	405d70 <_svfprintf_r+0x1254>
  405a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405a36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a38:	4619      	mov	r1, r3
  405a3a:	4291      	cmp	r1, r2
  405a3c:	f300 818a 	bgt.w	405d54 <_svfprintf_r+0x1238>
  405a40:	f01b 0f01 	tst.w	fp, #1
  405a44:	f040 8213 	bne.w	405e6e <_svfprintf_r+0x1352>
  405a48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405a4c:	9308      	str	r3, [sp, #32]
  405a4e:	2367      	movs	r3, #103	; 0x67
  405a50:	920e      	str	r2, [sp, #56]	; 0x38
  405a52:	9311      	str	r3, [sp, #68]	; 0x44
  405a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a56:	2b00      	cmp	r3, #0
  405a58:	f040 80c4 	bne.w	405be4 <_svfprintf_r+0x10c8>
  405a5c:	930a      	str	r3, [sp, #40]	; 0x28
  405a5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405a62:	f7ff b973 	b.w	404d4c <_svfprintf_r+0x230>
  405a66:	4635      	mov	r5, r6
  405a68:	460c      	mov	r4, r1
  405a6a:	4646      	mov	r6, r8
  405a6c:	4690      	mov	r8, r2
  405a6e:	3301      	adds	r3, #1
  405a70:	443c      	add	r4, r7
  405a72:	2b07      	cmp	r3, #7
  405a74:	9427      	str	r4, [sp, #156]	; 0x9c
  405a76:	9326      	str	r3, [sp, #152]	; 0x98
  405a78:	e888 00a0 	stmia.w	r8, {r5, r7}
  405a7c:	f73f aed1 	bgt.w	405822 <_svfprintf_r+0xd06>
  405a80:	f108 0808 	add.w	r8, r8, #8
  405a84:	e6d7      	b.n	405836 <_svfprintf_r+0xd1a>
  405a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405a88:	6813      	ldr	r3, [r2, #0]
  405a8a:	3204      	adds	r2, #4
  405a8c:	920f      	str	r2, [sp, #60]	; 0x3c
  405a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405a90:	601a      	str	r2, [r3, #0]
  405a92:	f7ff b86a 	b.w	404b6a <_svfprintf_r+0x4e>
  405a96:	aa25      	add	r2, sp, #148	; 0x94
  405a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a9c:	f003 ffd8 	bl	409a50 <__ssprint_r>
  405aa0:	2800      	cmp	r0, #0
  405aa2:	f47f a90d 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405aa6:	46c8      	mov	r8, r9
  405aa8:	e48d      	b.n	4053c6 <_svfprintf_r+0x8aa>
  405aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405aac:	4a27      	ldr	r2, [pc, #156]	; (405b4c <_svfprintf_r+0x1030>)
  405aae:	f8c8 2000 	str.w	r2, [r8]
  405ab2:	3301      	adds	r3, #1
  405ab4:	3401      	adds	r4, #1
  405ab6:	2201      	movs	r2, #1
  405ab8:	2b07      	cmp	r3, #7
  405aba:	9427      	str	r4, [sp, #156]	; 0x9c
  405abc:	9326      	str	r3, [sp, #152]	; 0x98
  405abe:	f8c8 2004 	str.w	r2, [r8, #4]
  405ac2:	dc72      	bgt.n	405baa <_svfprintf_r+0x108e>
  405ac4:	f108 0808 	add.w	r8, r8, #8
  405ac8:	b929      	cbnz	r1, 405ad6 <_svfprintf_r+0xfba>
  405aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405acc:	b91b      	cbnz	r3, 405ad6 <_svfprintf_r+0xfba>
  405ace:	9b07      	ldr	r3, [sp, #28]
  405ad0:	07d8      	lsls	r0, r3, #31
  405ad2:	f57f aa03 	bpl.w	404edc <_svfprintf_r+0x3c0>
  405ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ad8:	9819      	ldr	r0, [sp, #100]	; 0x64
  405ada:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405adc:	f8c8 2000 	str.w	r2, [r8]
  405ae0:	3301      	adds	r3, #1
  405ae2:	4602      	mov	r2, r0
  405ae4:	4422      	add	r2, r4
  405ae6:	2b07      	cmp	r3, #7
  405ae8:	9227      	str	r2, [sp, #156]	; 0x9c
  405aea:	f8c8 0004 	str.w	r0, [r8, #4]
  405aee:	9326      	str	r3, [sp, #152]	; 0x98
  405af0:	f300 818d 	bgt.w	405e0e <_svfprintf_r+0x12f2>
  405af4:	f108 0808 	add.w	r8, r8, #8
  405af8:	2900      	cmp	r1, #0
  405afa:	f2c0 8165 	blt.w	405dc8 <_svfprintf_r+0x12ac>
  405afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405b00:	f8c8 6000 	str.w	r6, [r8]
  405b04:	3301      	adds	r3, #1
  405b06:	188c      	adds	r4, r1, r2
  405b08:	2b07      	cmp	r3, #7
  405b0a:	9427      	str	r4, [sp, #156]	; 0x9c
  405b0c:	9326      	str	r3, [sp, #152]	; 0x98
  405b0e:	f8c8 1004 	str.w	r1, [r8, #4]
  405b12:	f77f a9e1 	ble.w	404ed8 <_svfprintf_r+0x3bc>
  405b16:	e52c      	b.n	405572 <_svfprintf_r+0xa56>
  405b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405b1c:	6813      	ldr	r3, [r2, #0]
  405b1e:	17cd      	asrs	r5, r1, #31
  405b20:	4608      	mov	r0, r1
  405b22:	3204      	adds	r2, #4
  405b24:	4629      	mov	r1, r5
  405b26:	920f      	str	r2, [sp, #60]	; 0x3c
  405b28:	e9c3 0100 	strd	r0, r1, [r3]
  405b2c:	f7ff b81d 	b.w	404b6a <_svfprintf_r+0x4e>
  405b30:	aa25      	add	r2, sp, #148	; 0x94
  405b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b34:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b36:	f003 ff8b 	bl	409a50 <__ssprint_r>
  405b3a:	2800      	cmp	r0, #0
  405b3c:	f47f a8c0 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405b40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b42:	46c8      	mov	r8, r9
  405b44:	e458      	b.n	4053f8 <_svfprintf_r+0x8dc>
  405b46:	bf00      	nop
  405b48:	0040b1c0 	.word	0x0040b1c0
  405b4c:	0040b1ac 	.word	0x0040b1ac
  405b50:	2140      	movs	r1, #64	; 0x40
  405b52:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b54:	f7fe f9e0 	bl	403f18 <_malloc_r>
  405b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405b5a:	6010      	str	r0, [r2, #0]
  405b5c:	6110      	str	r0, [r2, #16]
  405b5e:	2800      	cmp	r0, #0
  405b60:	f000 81f2 	beq.w	405f48 <_svfprintf_r+0x142c>
  405b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405b66:	2340      	movs	r3, #64	; 0x40
  405b68:	6153      	str	r3, [r2, #20]
  405b6a:	f7fe bfee 	b.w	404b4a <_svfprintf_r+0x2e>
  405b6e:	a823      	add	r0, sp, #140	; 0x8c
  405b70:	a920      	add	r1, sp, #128	; 0x80
  405b72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405b74:	9004      	str	r0, [sp, #16]
  405b76:	9103      	str	r1, [sp, #12]
  405b78:	a81f      	add	r0, sp, #124	; 0x7c
  405b7a:	2103      	movs	r1, #3
  405b7c:	9002      	str	r0, [sp, #8]
  405b7e:	9a08      	ldr	r2, [sp, #32]
  405b80:	9401      	str	r4, [sp, #4]
  405b82:	463b      	mov	r3, r7
  405b84:	9100      	str	r1, [sp, #0]
  405b86:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b88:	f001 fdee 	bl	407768 <_dtoa_r>
  405b8c:	4625      	mov	r5, r4
  405b8e:	4606      	mov	r6, r0
  405b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405b92:	2b46      	cmp	r3, #70	; 0x46
  405b94:	eb06 0405 	add.w	r4, r6, r5
  405b98:	f47f af29 	bne.w	4059ee <_svfprintf_r+0xed2>
  405b9c:	7833      	ldrb	r3, [r6, #0]
  405b9e:	2b30      	cmp	r3, #48	; 0x30
  405ba0:	f000 8178 	beq.w	405e94 <_svfprintf_r+0x1378>
  405ba4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405ba6:	442c      	add	r4, r5
  405ba8:	e721      	b.n	4059ee <_svfprintf_r+0xed2>
  405baa:	aa25      	add	r2, sp, #148	; 0x94
  405bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405bae:	980c      	ldr	r0, [sp, #48]	; 0x30
  405bb0:	f003 ff4e 	bl	409a50 <__ssprint_r>
  405bb4:	2800      	cmp	r0, #0
  405bb6:	f47f a883 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405bba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405bbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405bbe:	46c8      	mov	r8, r9
  405bc0:	e782      	b.n	405ac8 <_svfprintf_r+0xfac>
  405bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bc4:	2b00      	cmp	r3, #0
  405bc6:	bf08      	it	eq
  405bc8:	2301      	moveq	r3, #1
  405bca:	930a      	str	r3, [sp, #40]	; 0x28
  405bcc:	e6db      	b.n	405986 <_svfprintf_r+0xe6a>
  405bce:	4630      	mov	r0, r6
  405bd0:	940a      	str	r4, [sp, #40]	; 0x28
  405bd2:	f7fe ff35 	bl	404a40 <strlen>
  405bd6:	950f      	str	r5, [sp, #60]	; 0x3c
  405bd8:	900e      	str	r0, [sp, #56]	; 0x38
  405bda:	f8cd b01c 	str.w	fp, [sp, #28]
  405bde:	4603      	mov	r3, r0
  405be0:	f7ff b9f9 	b.w	404fd6 <_svfprintf_r+0x4ba>
  405be4:	272d      	movs	r7, #45	; 0x2d
  405be6:	2300      	movs	r3, #0
  405be8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405bec:	930a      	str	r3, [sp, #40]	; 0x28
  405bee:	f7ff b8ae 	b.w	404d4e <_svfprintf_r+0x232>
  405bf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405bf4:	9312      	str	r3, [sp, #72]	; 0x48
  405bf6:	461a      	mov	r2, r3
  405bf8:	3303      	adds	r3, #3
  405bfa:	db04      	blt.n	405c06 <_svfprintf_r+0x10ea>
  405bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bfe:	4619      	mov	r1, r3
  405c00:	4291      	cmp	r1, r2
  405c02:	f6bf af17 	bge.w	405a34 <_svfprintf_r+0xf18>
  405c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405c08:	3b02      	subs	r3, #2
  405c0a:	9311      	str	r3, [sp, #68]	; 0x44
  405c0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405c10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c16:	3b01      	subs	r3, #1
  405c18:	2b00      	cmp	r3, #0
  405c1a:	931f      	str	r3, [sp, #124]	; 0x7c
  405c1c:	bfbd      	ittte	lt
  405c1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405c20:	f1c3 0301 	rsblt	r3, r3, #1
  405c24:	222d      	movlt	r2, #45	; 0x2d
  405c26:	222b      	movge	r2, #43	; 0x2b
  405c28:	2b09      	cmp	r3, #9
  405c2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405c2e:	f340 8116 	ble.w	405e5e <_svfprintf_r+0x1342>
  405c32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405c36:	4620      	mov	r0, r4
  405c38:	4dab      	ldr	r5, [pc, #684]	; (405ee8 <_svfprintf_r+0x13cc>)
  405c3a:	e000      	b.n	405c3e <_svfprintf_r+0x1122>
  405c3c:	4610      	mov	r0, r2
  405c3e:	fb85 1203 	smull	r1, r2, r5, r3
  405c42:	17d9      	asrs	r1, r3, #31
  405c44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405c48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405c4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405c50:	3230      	adds	r2, #48	; 0x30
  405c52:	2909      	cmp	r1, #9
  405c54:	f800 2c01 	strb.w	r2, [r0, #-1]
  405c58:	460b      	mov	r3, r1
  405c5a:	f100 32ff 	add.w	r2, r0, #4294967295
  405c5e:	dced      	bgt.n	405c3c <_svfprintf_r+0x1120>
  405c60:	3330      	adds	r3, #48	; 0x30
  405c62:	3802      	subs	r0, #2
  405c64:	b2d9      	uxtb	r1, r3
  405c66:	4284      	cmp	r4, r0
  405c68:	f802 1c01 	strb.w	r1, [r2, #-1]
  405c6c:	f240 8165 	bls.w	405f3a <_svfprintf_r+0x141e>
  405c70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405c74:	4613      	mov	r3, r2
  405c76:	e001      	b.n	405c7c <_svfprintf_r+0x1160>
  405c78:	f813 1b01 	ldrb.w	r1, [r3], #1
  405c7c:	f800 1b01 	strb.w	r1, [r0], #1
  405c80:	42a3      	cmp	r3, r4
  405c82:	d1f9      	bne.n	405c78 <_svfprintf_r+0x115c>
  405c84:	3301      	adds	r3, #1
  405c86:	1a9b      	subs	r3, r3, r2
  405c88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405c8c:	4413      	add	r3, r2
  405c8e:	aa21      	add	r2, sp, #132	; 0x84
  405c90:	1a9b      	subs	r3, r3, r2
  405c92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405c94:	931b      	str	r3, [sp, #108]	; 0x6c
  405c96:	2a01      	cmp	r2, #1
  405c98:	4413      	add	r3, r2
  405c9a:	930e      	str	r3, [sp, #56]	; 0x38
  405c9c:	f340 8119 	ble.w	405ed2 <_svfprintf_r+0x13b6>
  405ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405ca2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405ca4:	4413      	add	r3, r2
  405ca6:	930e      	str	r3, [sp, #56]	; 0x38
  405ca8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405cac:	9308      	str	r3, [sp, #32]
  405cae:	2300      	movs	r3, #0
  405cb0:	9312      	str	r3, [sp, #72]	; 0x48
  405cb2:	e6cf      	b.n	405a54 <_svfprintf_r+0xf38>
  405cb4:	aa25      	add	r2, sp, #148	; 0x94
  405cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cba:	f003 fec9 	bl	409a50 <__ssprint_r>
  405cbe:	2800      	cmp	r0, #0
  405cc0:	f47e affe 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405cc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405cc6:	46c8      	mov	r8, r9
  405cc8:	e4d7      	b.n	40567a <_svfprintf_r+0xb5e>
  405cca:	4623      	mov	r3, r4
  405ccc:	e6a2      	b.n	405a14 <_svfprintf_r+0xef8>
  405cce:	aa25      	add	r2, sp, #148	; 0x94
  405cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405cd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cd4:	f003 febc 	bl	409a50 <__ssprint_r>
  405cd8:	2800      	cmp	r0, #0
  405cda:	f47e aff1 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405cde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405ce0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ce2:	46c8      	mov	r8, r9
  405ce4:	e5ae      	b.n	405844 <_svfprintf_r+0xd28>
  405ce6:	aa25      	add	r2, sp, #148	; 0x94
  405ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405cea:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cec:	f003 feb0 	bl	409a50 <__ssprint_r>
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f47e afe5 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405cf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405cfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405cfc:	1a9a      	subs	r2, r3, r2
  405cfe:	46c8      	mov	r8, r9
  405d00:	e5b8      	b.n	405874 <_svfprintf_r+0xd58>
  405d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d04:	9612      	str	r6, [sp, #72]	; 0x48
  405d06:	2b06      	cmp	r3, #6
  405d08:	bf28      	it	cs
  405d0a:	2306      	movcs	r3, #6
  405d0c:	960a      	str	r6, [sp, #40]	; 0x28
  405d0e:	4637      	mov	r7, r6
  405d10:	9308      	str	r3, [sp, #32]
  405d12:	950f      	str	r5, [sp, #60]	; 0x3c
  405d14:	f8cd b01c 	str.w	fp, [sp, #28]
  405d18:	930e      	str	r3, [sp, #56]	; 0x38
  405d1a:	4e74      	ldr	r6, [pc, #464]	; (405eec <_svfprintf_r+0x13d0>)
  405d1c:	f7ff b816 	b.w	404d4c <_svfprintf_r+0x230>
  405d20:	a823      	add	r0, sp, #140	; 0x8c
  405d22:	a920      	add	r1, sp, #128	; 0x80
  405d24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405d26:	9004      	str	r0, [sp, #16]
  405d28:	9103      	str	r1, [sp, #12]
  405d2a:	a81f      	add	r0, sp, #124	; 0x7c
  405d2c:	2103      	movs	r1, #3
  405d2e:	9002      	str	r0, [sp, #8]
  405d30:	9a08      	ldr	r2, [sp, #32]
  405d32:	9501      	str	r5, [sp, #4]
  405d34:	463b      	mov	r3, r7
  405d36:	9100      	str	r1, [sp, #0]
  405d38:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d3a:	f001 fd15 	bl	407768 <_dtoa_r>
  405d3e:	4606      	mov	r6, r0
  405d40:	1944      	adds	r4, r0, r5
  405d42:	e72b      	b.n	405b9c <_svfprintf_r+0x1080>
  405d44:	2306      	movs	r3, #6
  405d46:	930a      	str	r3, [sp, #40]	; 0x28
  405d48:	e61d      	b.n	405986 <_svfprintf_r+0xe6a>
  405d4a:	272d      	movs	r7, #45	; 0x2d
  405d4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405d50:	f7ff bacd 	b.w	4052ee <_svfprintf_r+0x7d2>
  405d54:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405d56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d58:	4413      	add	r3, r2
  405d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d5c:	930e      	str	r3, [sp, #56]	; 0x38
  405d5e:	2a00      	cmp	r2, #0
  405d60:	f340 80b0 	ble.w	405ec4 <_svfprintf_r+0x13a8>
  405d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405d68:	9308      	str	r3, [sp, #32]
  405d6a:	2367      	movs	r3, #103	; 0x67
  405d6c:	9311      	str	r3, [sp, #68]	; 0x44
  405d6e:	e671      	b.n	405a54 <_svfprintf_r+0xf38>
  405d70:	2b00      	cmp	r3, #0
  405d72:	f340 80c3 	ble.w	405efc <_svfprintf_r+0x13e0>
  405d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405d78:	2a00      	cmp	r2, #0
  405d7a:	f040 8099 	bne.w	405eb0 <_svfprintf_r+0x1394>
  405d7e:	f01b 0f01 	tst.w	fp, #1
  405d82:	f040 8095 	bne.w	405eb0 <_svfprintf_r+0x1394>
  405d86:	9308      	str	r3, [sp, #32]
  405d88:	930e      	str	r3, [sp, #56]	; 0x38
  405d8a:	e663      	b.n	405a54 <_svfprintf_r+0xf38>
  405d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d8e:	9308      	str	r3, [sp, #32]
  405d90:	930e      	str	r3, [sp, #56]	; 0x38
  405d92:	900a      	str	r0, [sp, #40]	; 0x28
  405d94:	950f      	str	r5, [sp, #60]	; 0x3c
  405d96:	f8cd b01c 	str.w	fp, [sp, #28]
  405d9a:	9012      	str	r0, [sp, #72]	; 0x48
  405d9c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405da0:	f7fe bfd4 	b.w	404d4c <_svfprintf_r+0x230>
  405da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405da6:	2b47      	cmp	r3, #71	; 0x47
  405da8:	f47f ae20 	bne.w	4059ec <_svfprintf_r+0xed0>
  405dac:	f01b 0f01 	tst.w	fp, #1
  405db0:	f47f aeee 	bne.w	405b90 <_svfprintf_r+0x1074>
  405db4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405db6:	1b9b      	subs	r3, r3, r6
  405db8:	9313      	str	r3, [sp, #76]	; 0x4c
  405dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405dbc:	2b47      	cmp	r3, #71	; 0x47
  405dbe:	f43f af18 	beq.w	405bf2 <_svfprintf_r+0x10d6>
  405dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405dc4:	9312      	str	r3, [sp, #72]	; 0x48
  405dc6:	e721      	b.n	405c0c <_svfprintf_r+0x10f0>
  405dc8:	424f      	negs	r7, r1
  405dca:	3110      	adds	r1, #16
  405dcc:	4d48      	ldr	r5, [pc, #288]	; (405ef0 <_svfprintf_r+0x13d4>)
  405dce:	da2f      	bge.n	405e30 <_svfprintf_r+0x1314>
  405dd0:	2410      	movs	r4, #16
  405dd2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405dd6:	e004      	b.n	405de2 <_svfprintf_r+0x12c6>
  405dd8:	f108 0808 	add.w	r8, r8, #8
  405ddc:	3f10      	subs	r7, #16
  405dde:	2f10      	cmp	r7, #16
  405de0:	dd26      	ble.n	405e30 <_svfprintf_r+0x1314>
  405de2:	3301      	adds	r3, #1
  405de4:	3210      	adds	r2, #16
  405de6:	2b07      	cmp	r3, #7
  405de8:	9227      	str	r2, [sp, #156]	; 0x9c
  405dea:	9326      	str	r3, [sp, #152]	; 0x98
  405dec:	f8c8 5000 	str.w	r5, [r8]
  405df0:	f8c8 4004 	str.w	r4, [r8, #4]
  405df4:	ddf0      	ble.n	405dd8 <_svfprintf_r+0x12bc>
  405df6:	aa25      	add	r2, sp, #148	; 0x94
  405df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405dfa:	4658      	mov	r0, fp
  405dfc:	f003 fe28 	bl	409a50 <__ssprint_r>
  405e00:	2800      	cmp	r0, #0
  405e02:	f47e af5d 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405e06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e0a:	46c8      	mov	r8, r9
  405e0c:	e7e6      	b.n	405ddc <_svfprintf_r+0x12c0>
  405e0e:	aa25      	add	r2, sp, #148	; 0x94
  405e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e12:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e14:	f003 fe1c 	bl	409a50 <__ssprint_r>
  405e18:	2800      	cmp	r0, #0
  405e1a:	f47e af51 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405e1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405e20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e24:	46c8      	mov	r8, r9
  405e26:	e667      	b.n	405af8 <_svfprintf_r+0xfdc>
  405e28:	2000      	movs	r0, #0
  405e2a:	900a      	str	r0, [sp, #40]	; 0x28
  405e2c:	f7fe bed0 	b.w	404bd0 <_svfprintf_r+0xb4>
  405e30:	3301      	adds	r3, #1
  405e32:	443a      	add	r2, r7
  405e34:	2b07      	cmp	r3, #7
  405e36:	e888 00a0 	stmia.w	r8, {r5, r7}
  405e3a:	9227      	str	r2, [sp, #156]	; 0x9c
  405e3c:	9326      	str	r3, [sp, #152]	; 0x98
  405e3e:	f108 0808 	add.w	r8, r8, #8
  405e42:	f77f ae5c 	ble.w	405afe <_svfprintf_r+0xfe2>
  405e46:	aa25      	add	r2, sp, #148	; 0x94
  405e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e4c:	f003 fe00 	bl	409a50 <__ssprint_r>
  405e50:	2800      	cmp	r0, #0
  405e52:	f47e af35 	bne.w	404cc0 <_svfprintf_r+0x1a4>
  405e56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e5a:	46c8      	mov	r8, r9
  405e5c:	e64f      	b.n	405afe <_svfprintf_r+0xfe2>
  405e5e:	3330      	adds	r3, #48	; 0x30
  405e60:	2230      	movs	r2, #48	; 0x30
  405e62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405e66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405e6a:	ab22      	add	r3, sp, #136	; 0x88
  405e6c:	e70f      	b.n	405c8e <_svfprintf_r+0x1172>
  405e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405e72:	4413      	add	r3, r2
  405e74:	930e      	str	r3, [sp, #56]	; 0x38
  405e76:	e775      	b.n	405d64 <_svfprintf_r+0x1248>
  405e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405e7a:	e5cb      	b.n	405a14 <_svfprintf_r+0xef8>
  405e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405e7e:	4e1d      	ldr	r6, [pc, #116]	; (405ef4 <_svfprintf_r+0x13d8>)
  405e80:	2b00      	cmp	r3, #0
  405e82:	bfb6      	itet	lt
  405e84:	272d      	movlt	r7, #45	; 0x2d
  405e86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405e8a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  405e8e:	4b1a      	ldr	r3, [pc, #104]	; (405ef8 <_svfprintf_r+0x13dc>)
  405e90:	f7ff ba2f 	b.w	4052f2 <_svfprintf_r+0x7d6>
  405e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405e96:	9808      	ldr	r0, [sp, #32]
  405e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405e9a:	4639      	mov	r1, r7
  405e9c:	f004 fd66 	bl	40a96c <__aeabi_dcmpeq>
  405ea0:	2800      	cmp	r0, #0
  405ea2:	f47f ae7f 	bne.w	405ba4 <_svfprintf_r+0x1088>
  405ea6:	f1c5 0501 	rsb	r5, r5, #1
  405eaa:	951f      	str	r5, [sp, #124]	; 0x7c
  405eac:	442c      	add	r4, r5
  405eae:	e59e      	b.n	4059ee <_svfprintf_r+0xed2>
  405eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405eb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405eb4:	4413      	add	r3, r2
  405eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405eb8:	441a      	add	r2, r3
  405eba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405ebe:	920e      	str	r2, [sp, #56]	; 0x38
  405ec0:	9308      	str	r3, [sp, #32]
  405ec2:	e5c7      	b.n	405a54 <_svfprintf_r+0xf38>
  405ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405ec8:	f1c3 0301 	rsb	r3, r3, #1
  405ecc:	441a      	add	r2, r3
  405ece:	4613      	mov	r3, r2
  405ed0:	e7d0      	b.n	405e74 <_svfprintf_r+0x1358>
  405ed2:	f01b 0301 	ands.w	r3, fp, #1
  405ed6:	9312      	str	r3, [sp, #72]	; 0x48
  405ed8:	f47f aee2 	bne.w	405ca0 <_svfprintf_r+0x1184>
  405edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ee2:	9308      	str	r3, [sp, #32]
  405ee4:	e5b6      	b.n	405a54 <_svfprintf_r+0xf38>
  405ee6:	bf00      	nop
  405ee8:	66666667 	.word	0x66666667
  405eec:	0040b1a4 	.word	0x0040b1a4
  405ef0:	0040b1c0 	.word	0x0040b1c0
  405ef4:	0040b178 	.word	0x0040b178
  405ef8:	0040b174 	.word	0x0040b174
  405efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405efe:	b913      	cbnz	r3, 405f06 <_svfprintf_r+0x13ea>
  405f00:	f01b 0f01 	tst.w	fp, #1
  405f04:	d002      	beq.n	405f0c <_svfprintf_r+0x13f0>
  405f06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405f08:	3301      	adds	r3, #1
  405f0a:	e7d4      	b.n	405eb6 <_svfprintf_r+0x139a>
  405f0c:	2301      	movs	r3, #1
  405f0e:	e73a      	b.n	405d86 <_svfprintf_r+0x126a>
  405f10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405f12:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405f16:	6828      	ldr	r0, [r5, #0]
  405f18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405f1c:	900a      	str	r0, [sp, #40]	; 0x28
  405f1e:	4628      	mov	r0, r5
  405f20:	3004      	adds	r0, #4
  405f22:	46a2      	mov	sl, r4
  405f24:	900f      	str	r0, [sp, #60]	; 0x3c
  405f26:	f7fe be51 	b.w	404bcc <_svfprintf_r+0xb0>
  405f2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f2e:	f7ff b867 	b.w	405000 <_svfprintf_r+0x4e4>
  405f32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f36:	f7ff ba15 	b.w	405364 <_svfprintf_r+0x848>
  405f3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405f3e:	e6a6      	b.n	405c8e <_svfprintf_r+0x1172>
  405f40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f44:	f7ff b8eb 	b.w	40511e <_svfprintf_r+0x602>
  405f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405f4a:	230c      	movs	r3, #12
  405f4c:	6013      	str	r3, [r2, #0]
  405f4e:	f04f 33ff 	mov.w	r3, #4294967295
  405f52:	9309      	str	r3, [sp, #36]	; 0x24
  405f54:	f7fe bebd 	b.w	404cd2 <_svfprintf_r+0x1b6>
  405f58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f5c:	f7ff b99a 	b.w	405294 <_svfprintf_r+0x778>
  405f60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f64:	f7ff b976 	b.w	405254 <_svfprintf_r+0x738>
  405f68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f6c:	f7ff b959 	b.w	405222 <_svfprintf_r+0x706>
  405f70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405f74:	f7ff b912 	b.w	40519c <_svfprintf_r+0x680>

00405f78 <_vfprintf_r>:
  405f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405f7c:	b0c1      	sub	sp, #260	; 0x104
  405f7e:	461d      	mov	r5, r3
  405f80:	468a      	mov	sl, r1
  405f82:	4691      	mov	r9, r2
  405f84:	4604      	mov	r4, r0
  405f86:	9008      	str	r0, [sp, #32]
  405f88:	f002 ff3a 	bl	408e00 <_localeconv_r>
  405f8c:	6803      	ldr	r3, [r0, #0]
  405f8e:	9315      	str	r3, [sp, #84]	; 0x54
  405f90:	4618      	mov	r0, r3
  405f92:	f7fe fd55 	bl	404a40 <strlen>
  405f96:	950e      	str	r5, [sp, #56]	; 0x38
  405f98:	9014      	str	r0, [sp, #80]	; 0x50
  405f9a:	b11c      	cbz	r4, 405fa4 <_vfprintf_r+0x2c>
  405f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  405f9e:	2b00      	cmp	r3, #0
  405fa0:	f000 825f 	beq.w	406462 <_vfprintf_r+0x4ea>
  405fa4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  405fa8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  405fac:	f013 0f01 	tst.w	r3, #1
  405fb0:	b293      	uxth	r3, r2
  405fb2:	d102      	bne.n	405fba <_vfprintf_r+0x42>
  405fb4:	0599      	lsls	r1, r3, #22
  405fb6:	f140 8275 	bpl.w	4064a4 <_vfprintf_r+0x52c>
  405fba:	049f      	lsls	r7, r3, #18
  405fbc:	d40a      	bmi.n	405fd4 <_vfprintf_r+0x5c>
  405fbe:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  405fc2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  405fc6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405fca:	f8aa 300c 	strh.w	r3, [sl, #12]
  405fce:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  405fd2:	b29b      	uxth	r3, r3
  405fd4:	071e      	lsls	r6, r3, #28
  405fd6:	f140 8223 	bpl.w	406420 <_vfprintf_r+0x4a8>
  405fda:	f8da 2010 	ldr.w	r2, [sl, #16]
  405fde:	2a00      	cmp	r2, #0
  405fe0:	f000 821e 	beq.w	406420 <_vfprintf_r+0x4a8>
  405fe4:	f003 021a 	and.w	r2, r3, #26
  405fe8:	2a0a      	cmp	r2, #10
  405fea:	f000 823e 	beq.w	40646a <_vfprintf_r+0x4f2>
  405fee:	2300      	movs	r3, #0
  405ff0:	4618      	mov	r0, r3
  405ff2:	9311      	str	r3, [sp, #68]	; 0x44
  405ff4:	9313      	str	r3, [sp, #76]	; 0x4c
  405ff6:	9312      	str	r3, [sp, #72]	; 0x48
  405ff8:	9325      	str	r3, [sp, #148]	; 0x94
  405ffa:	9324      	str	r3, [sp, #144]	; 0x90
  405ffc:	9318      	str	r3, [sp, #96]	; 0x60
  405ffe:	9319      	str	r3, [sp, #100]	; 0x64
  406000:	930b      	str	r3, [sp, #44]	; 0x2c
  406002:	ab30      	add	r3, sp, #192	; 0xc0
  406004:	9323      	str	r3, [sp, #140]	; 0x8c
  406006:	4698      	mov	r8, r3
  406008:	9016      	str	r0, [sp, #88]	; 0x58
  40600a:	9017      	str	r0, [sp, #92]	; 0x5c
  40600c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  406010:	f899 3000 	ldrb.w	r3, [r9]
  406014:	464c      	mov	r4, r9
  406016:	b1eb      	cbz	r3, 406054 <_vfprintf_r+0xdc>
  406018:	2b25      	cmp	r3, #37	; 0x25
  40601a:	d102      	bne.n	406022 <_vfprintf_r+0xaa>
  40601c:	e01a      	b.n	406054 <_vfprintf_r+0xdc>
  40601e:	2b25      	cmp	r3, #37	; 0x25
  406020:	d003      	beq.n	40602a <_vfprintf_r+0xb2>
  406022:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406026:	2b00      	cmp	r3, #0
  406028:	d1f9      	bne.n	40601e <_vfprintf_r+0xa6>
  40602a:	eba4 0509 	sub.w	r5, r4, r9
  40602e:	b18d      	cbz	r5, 406054 <_vfprintf_r+0xdc>
  406030:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406032:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406034:	f8c8 9000 	str.w	r9, [r8]
  406038:	3301      	adds	r3, #1
  40603a:	442a      	add	r2, r5
  40603c:	2b07      	cmp	r3, #7
  40603e:	f8c8 5004 	str.w	r5, [r8, #4]
  406042:	9225      	str	r2, [sp, #148]	; 0x94
  406044:	9324      	str	r3, [sp, #144]	; 0x90
  406046:	f300 8201 	bgt.w	40644c <_vfprintf_r+0x4d4>
  40604a:	f108 0808 	add.w	r8, r8, #8
  40604e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406050:	442b      	add	r3, r5
  406052:	930b      	str	r3, [sp, #44]	; 0x2c
  406054:	7823      	ldrb	r3, [r4, #0]
  406056:	2b00      	cmp	r3, #0
  406058:	f000 83f0 	beq.w	40683c <_vfprintf_r+0x8c4>
  40605c:	2300      	movs	r3, #0
  40605e:	461a      	mov	r2, r3
  406060:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406064:	4619      	mov	r1, r3
  406066:	930c      	str	r3, [sp, #48]	; 0x30
  406068:	469b      	mov	fp, r3
  40606a:	7866      	ldrb	r6, [r4, #1]
  40606c:	f04f 33ff 	mov.w	r3, #4294967295
  406070:	f104 0901 	add.w	r9, r4, #1
  406074:	9309      	str	r3, [sp, #36]	; 0x24
  406076:	f109 0901 	add.w	r9, r9, #1
  40607a:	f1a6 0320 	sub.w	r3, r6, #32
  40607e:	2b58      	cmp	r3, #88	; 0x58
  406080:	f200 83bf 	bhi.w	406802 <_vfprintf_r+0x88a>
  406084:	e8df f013 	tbh	[pc, r3, lsl #1]
  406088:	03bd02e0 	.word	0x03bd02e0
  40608c:	034f03bd 	.word	0x034f03bd
  406090:	03bd03bd 	.word	0x03bd03bd
  406094:	03bd03bd 	.word	0x03bd03bd
  406098:	03bd03bd 	.word	0x03bd03bd
  40609c:	03080354 	.word	0x03080354
  4060a0:	021a03bd 	.word	0x021a03bd
  4060a4:	03bd02e8 	.word	0x03bd02e8
  4060a8:	033a0303 	.word	0x033a0303
  4060ac:	033a033a 	.word	0x033a033a
  4060b0:	033a033a 	.word	0x033a033a
  4060b4:	033a033a 	.word	0x033a033a
  4060b8:	033a033a 	.word	0x033a033a
  4060bc:	03bd03bd 	.word	0x03bd03bd
  4060c0:	03bd03bd 	.word	0x03bd03bd
  4060c4:	03bd03bd 	.word	0x03bd03bd
  4060c8:	03bd03bd 	.word	0x03bd03bd
  4060cc:	03bd03bd 	.word	0x03bd03bd
  4060d0:	03620349 	.word	0x03620349
  4060d4:	036203bd 	.word	0x036203bd
  4060d8:	03bd03bd 	.word	0x03bd03bd
  4060dc:	03bd03bd 	.word	0x03bd03bd
  4060e0:	03bd03a2 	.word	0x03bd03a2
  4060e4:	006f03bd 	.word	0x006f03bd
  4060e8:	03bd03bd 	.word	0x03bd03bd
  4060ec:	03bd03bd 	.word	0x03bd03bd
  4060f0:	005903bd 	.word	0x005903bd
  4060f4:	03bd03bd 	.word	0x03bd03bd
  4060f8:	03bd031e 	.word	0x03bd031e
  4060fc:	03bd03bd 	.word	0x03bd03bd
  406100:	03bd03bd 	.word	0x03bd03bd
  406104:	03bd03bd 	.word	0x03bd03bd
  406108:	03bd03bd 	.word	0x03bd03bd
  40610c:	032403bd 	.word	0x032403bd
  406110:	03620273 	.word	0x03620273
  406114:	03620362 	.word	0x03620362
  406118:	027302b7 	.word	0x027302b7
  40611c:	03bd03bd 	.word	0x03bd03bd
  406120:	03bd02bc 	.word	0x03bd02bc
  406124:	007102c9 	.word	0x007102c9
  406128:	0247030d 	.word	0x0247030d
  40612c:	025203bd 	.word	0x025203bd
  406130:	005b03bd 	.word	0x005b03bd
  406134:	03bd03bd 	.word	0x03bd03bd
  406138:	021f      	.short	0x021f
  40613a:	f04b 0b10 	orr.w	fp, fp, #16
  40613e:	f01b 0f20 	tst.w	fp, #32
  406142:	f040 8353 	bne.w	4067ec <_vfprintf_r+0x874>
  406146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406148:	f01b 0f10 	tst.w	fp, #16
  40614c:	4613      	mov	r3, r2
  40614e:	f040 85b4 	bne.w	406cba <_vfprintf_r+0xd42>
  406152:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406156:	f000 85b0 	beq.w	406cba <_vfprintf_r+0xd42>
  40615a:	8814      	ldrh	r4, [r2, #0]
  40615c:	3204      	adds	r2, #4
  40615e:	2500      	movs	r5, #0
  406160:	2301      	movs	r3, #1
  406162:	920e      	str	r2, [sp, #56]	; 0x38
  406164:	e014      	b.n	406190 <_vfprintf_r+0x218>
  406166:	f04b 0b10 	orr.w	fp, fp, #16
  40616a:	f01b 0320 	ands.w	r3, fp, #32
  40616e:	f040 8332 	bne.w	4067d6 <_vfprintf_r+0x85e>
  406172:	f01b 0210 	ands.w	r2, fp, #16
  406176:	f040 8589 	bne.w	406c8c <_vfprintf_r+0xd14>
  40617a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40617e:	f000 8585 	beq.w	406c8c <_vfprintf_r+0xd14>
  406182:	990e      	ldr	r1, [sp, #56]	; 0x38
  406184:	4613      	mov	r3, r2
  406186:	460a      	mov	r2, r1
  406188:	3204      	adds	r2, #4
  40618a:	880c      	ldrh	r4, [r1, #0]
  40618c:	920e      	str	r2, [sp, #56]	; 0x38
  40618e:	2500      	movs	r5, #0
  406190:	f04f 0a00 	mov.w	sl, #0
  406194:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406198:	9909      	ldr	r1, [sp, #36]	; 0x24
  40619a:	1c4a      	adds	r2, r1, #1
  40619c:	f000 820b 	beq.w	4065b6 <_vfprintf_r+0x63e>
  4061a0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4061a4:	9206      	str	r2, [sp, #24]
  4061a6:	ea54 0205 	orrs.w	r2, r4, r5
  4061aa:	f040 820a 	bne.w	4065c2 <_vfprintf_r+0x64a>
  4061ae:	2900      	cmp	r1, #0
  4061b0:	f040 846f 	bne.w	406a92 <_vfprintf_r+0xb1a>
  4061b4:	2b00      	cmp	r3, #0
  4061b6:	f040 852d 	bne.w	406c14 <_vfprintf_r+0xc9c>
  4061ba:	f01b 0301 	ands.w	r3, fp, #1
  4061be:	930d      	str	r3, [sp, #52]	; 0x34
  4061c0:	f000 8668 	beq.w	406e94 <_vfprintf_r+0xf1c>
  4061c4:	af40      	add	r7, sp, #256	; 0x100
  4061c6:	2330      	movs	r3, #48	; 0x30
  4061c8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4061d0:	4293      	cmp	r3, r2
  4061d2:	bfb8      	it	lt
  4061d4:	4613      	movlt	r3, r2
  4061d6:	9307      	str	r3, [sp, #28]
  4061d8:	2300      	movs	r3, #0
  4061da:	9310      	str	r3, [sp, #64]	; 0x40
  4061dc:	f1ba 0f00 	cmp.w	sl, #0
  4061e0:	d002      	beq.n	4061e8 <_vfprintf_r+0x270>
  4061e2:	9b07      	ldr	r3, [sp, #28]
  4061e4:	3301      	adds	r3, #1
  4061e6:	9307      	str	r3, [sp, #28]
  4061e8:	9b06      	ldr	r3, [sp, #24]
  4061ea:	f013 0302 	ands.w	r3, r3, #2
  4061ee:	930f      	str	r3, [sp, #60]	; 0x3c
  4061f0:	d002      	beq.n	4061f8 <_vfprintf_r+0x280>
  4061f2:	9b07      	ldr	r3, [sp, #28]
  4061f4:	3302      	adds	r3, #2
  4061f6:	9307      	str	r3, [sp, #28]
  4061f8:	9b06      	ldr	r3, [sp, #24]
  4061fa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4061fe:	f040 831b 	bne.w	406838 <_vfprintf_r+0x8c0>
  406202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406204:	9a07      	ldr	r2, [sp, #28]
  406206:	eba3 0b02 	sub.w	fp, r3, r2
  40620a:	f1bb 0f00 	cmp.w	fp, #0
  40620e:	f340 8313 	ble.w	406838 <_vfprintf_r+0x8c0>
  406212:	f1bb 0f10 	cmp.w	fp, #16
  406216:	9925      	ldr	r1, [sp, #148]	; 0x94
  406218:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40621a:	dd28      	ble.n	40626e <_vfprintf_r+0x2f6>
  40621c:	4643      	mov	r3, r8
  40621e:	2410      	movs	r4, #16
  406220:	46a8      	mov	r8, r5
  406222:	f8dd a020 	ldr.w	sl, [sp, #32]
  406226:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406228:	e006      	b.n	406238 <_vfprintf_r+0x2c0>
  40622a:	f1ab 0b10 	sub.w	fp, fp, #16
  40622e:	f1bb 0f10 	cmp.w	fp, #16
  406232:	f103 0308 	add.w	r3, r3, #8
  406236:	dd18      	ble.n	40626a <_vfprintf_r+0x2f2>
  406238:	3201      	adds	r2, #1
  40623a:	48b9      	ldr	r0, [pc, #740]	; (406520 <_vfprintf_r+0x5a8>)
  40623c:	9224      	str	r2, [sp, #144]	; 0x90
  40623e:	3110      	adds	r1, #16
  406240:	2a07      	cmp	r2, #7
  406242:	9125      	str	r1, [sp, #148]	; 0x94
  406244:	e883 0011 	stmia.w	r3, {r0, r4}
  406248:	ddef      	ble.n	40622a <_vfprintf_r+0x2b2>
  40624a:	aa23      	add	r2, sp, #140	; 0x8c
  40624c:	4629      	mov	r1, r5
  40624e:	4650      	mov	r0, sl
  406250:	f003 fcbc 	bl	409bcc <__sprint_r>
  406254:	2800      	cmp	r0, #0
  406256:	f040 836a 	bne.w	40692e <_vfprintf_r+0x9b6>
  40625a:	f1ab 0b10 	sub.w	fp, fp, #16
  40625e:	f1bb 0f10 	cmp.w	fp, #16
  406262:	9925      	ldr	r1, [sp, #148]	; 0x94
  406264:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406266:	ab30      	add	r3, sp, #192	; 0xc0
  406268:	dce6      	bgt.n	406238 <_vfprintf_r+0x2c0>
  40626a:	4645      	mov	r5, r8
  40626c:	4698      	mov	r8, r3
  40626e:	3201      	adds	r2, #1
  406270:	4bab      	ldr	r3, [pc, #684]	; (406520 <_vfprintf_r+0x5a8>)
  406272:	9224      	str	r2, [sp, #144]	; 0x90
  406274:	eb0b 0401 	add.w	r4, fp, r1
  406278:	2a07      	cmp	r2, #7
  40627a:	9425      	str	r4, [sp, #148]	; 0x94
  40627c:	e888 0808 	stmia.w	r8, {r3, fp}
  406280:	f300 84cd 	bgt.w	406c1e <_vfprintf_r+0xca6>
  406284:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406288:	f108 0808 	add.w	r8, r8, #8
  40628c:	f1ba 0f00 	cmp.w	sl, #0
  406290:	d00e      	beq.n	4062b0 <_vfprintf_r+0x338>
  406292:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406294:	3301      	adds	r3, #1
  406296:	3401      	adds	r4, #1
  406298:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40629c:	2201      	movs	r2, #1
  40629e:	2b07      	cmp	r3, #7
  4062a0:	9425      	str	r4, [sp, #148]	; 0x94
  4062a2:	9324      	str	r3, [sp, #144]	; 0x90
  4062a4:	e888 0006 	stmia.w	r8, {r1, r2}
  4062a8:	f300 840a 	bgt.w	406ac0 <_vfprintf_r+0xb48>
  4062ac:	f108 0808 	add.w	r8, r8, #8
  4062b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062b2:	b16b      	cbz	r3, 4062d0 <_vfprintf_r+0x358>
  4062b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062b6:	3301      	adds	r3, #1
  4062b8:	3402      	adds	r4, #2
  4062ba:	a91c      	add	r1, sp, #112	; 0x70
  4062bc:	2202      	movs	r2, #2
  4062be:	2b07      	cmp	r3, #7
  4062c0:	9425      	str	r4, [sp, #148]	; 0x94
  4062c2:	9324      	str	r3, [sp, #144]	; 0x90
  4062c4:	e888 0006 	stmia.w	r8, {r1, r2}
  4062c8:	f300 8406 	bgt.w	406ad8 <_vfprintf_r+0xb60>
  4062cc:	f108 0808 	add.w	r8, r8, #8
  4062d0:	2d80      	cmp	r5, #128	; 0x80
  4062d2:	f000 832e 	beq.w	406932 <_vfprintf_r+0x9ba>
  4062d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4062d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4062da:	eba3 0a02 	sub.w	sl, r3, r2
  4062de:	f1ba 0f00 	cmp.w	sl, #0
  4062e2:	dd3b      	ble.n	40635c <_vfprintf_r+0x3e4>
  4062e4:	f1ba 0f10 	cmp.w	sl, #16
  4062e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062ea:	4d8e      	ldr	r5, [pc, #568]	; (406524 <_vfprintf_r+0x5ac>)
  4062ec:	dd2b      	ble.n	406346 <_vfprintf_r+0x3ce>
  4062ee:	4642      	mov	r2, r8
  4062f0:	4621      	mov	r1, r4
  4062f2:	46b0      	mov	r8, r6
  4062f4:	f04f 0b10 	mov.w	fp, #16
  4062f8:	462e      	mov	r6, r5
  4062fa:	9c08      	ldr	r4, [sp, #32]
  4062fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4062fe:	e006      	b.n	40630e <_vfprintf_r+0x396>
  406300:	f1aa 0a10 	sub.w	sl, sl, #16
  406304:	f1ba 0f10 	cmp.w	sl, #16
  406308:	f102 0208 	add.w	r2, r2, #8
  40630c:	dd17      	ble.n	40633e <_vfprintf_r+0x3c6>
  40630e:	3301      	adds	r3, #1
  406310:	3110      	adds	r1, #16
  406312:	2b07      	cmp	r3, #7
  406314:	9125      	str	r1, [sp, #148]	; 0x94
  406316:	9324      	str	r3, [sp, #144]	; 0x90
  406318:	e882 0840 	stmia.w	r2, {r6, fp}
  40631c:	ddf0      	ble.n	406300 <_vfprintf_r+0x388>
  40631e:	aa23      	add	r2, sp, #140	; 0x8c
  406320:	4629      	mov	r1, r5
  406322:	4620      	mov	r0, r4
  406324:	f003 fc52 	bl	409bcc <__sprint_r>
  406328:	2800      	cmp	r0, #0
  40632a:	f040 8300 	bne.w	40692e <_vfprintf_r+0x9b6>
  40632e:	f1aa 0a10 	sub.w	sl, sl, #16
  406332:	f1ba 0f10 	cmp.w	sl, #16
  406336:	9925      	ldr	r1, [sp, #148]	; 0x94
  406338:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40633a:	aa30      	add	r2, sp, #192	; 0xc0
  40633c:	dce7      	bgt.n	40630e <_vfprintf_r+0x396>
  40633e:	4635      	mov	r5, r6
  406340:	460c      	mov	r4, r1
  406342:	4646      	mov	r6, r8
  406344:	4690      	mov	r8, r2
  406346:	3301      	adds	r3, #1
  406348:	4454      	add	r4, sl
  40634a:	2b07      	cmp	r3, #7
  40634c:	9425      	str	r4, [sp, #148]	; 0x94
  40634e:	9324      	str	r3, [sp, #144]	; 0x90
  406350:	e888 0420 	stmia.w	r8, {r5, sl}
  406354:	f300 83a9 	bgt.w	406aaa <_vfprintf_r+0xb32>
  406358:	f108 0808 	add.w	r8, r8, #8
  40635c:	9b06      	ldr	r3, [sp, #24]
  40635e:	05db      	lsls	r3, r3, #23
  406360:	f100 8285 	bmi.w	40686e <_vfprintf_r+0x8f6>
  406364:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406366:	990d      	ldr	r1, [sp, #52]	; 0x34
  406368:	f8c8 7000 	str.w	r7, [r8]
  40636c:	3301      	adds	r3, #1
  40636e:	440c      	add	r4, r1
  406370:	2b07      	cmp	r3, #7
  406372:	9425      	str	r4, [sp, #148]	; 0x94
  406374:	f8c8 1004 	str.w	r1, [r8, #4]
  406378:	9324      	str	r3, [sp, #144]	; 0x90
  40637a:	f300 8375 	bgt.w	406a68 <_vfprintf_r+0xaf0>
  40637e:	f108 0808 	add.w	r8, r8, #8
  406382:	9b06      	ldr	r3, [sp, #24]
  406384:	0759      	lsls	r1, r3, #29
  406386:	d53b      	bpl.n	406400 <_vfprintf_r+0x488>
  406388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40638a:	9a07      	ldr	r2, [sp, #28]
  40638c:	1a9d      	subs	r5, r3, r2
  40638e:	2d00      	cmp	r5, #0
  406390:	dd36      	ble.n	406400 <_vfprintf_r+0x488>
  406392:	2d10      	cmp	r5, #16
  406394:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406396:	dd21      	ble.n	4063dc <_vfprintf_r+0x464>
  406398:	2610      	movs	r6, #16
  40639a:	9f08      	ldr	r7, [sp, #32]
  40639c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4063a0:	e004      	b.n	4063ac <_vfprintf_r+0x434>
  4063a2:	3d10      	subs	r5, #16
  4063a4:	2d10      	cmp	r5, #16
  4063a6:	f108 0808 	add.w	r8, r8, #8
  4063aa:	dd17      	ble.n	4063dc <_vfprintf_r+0x464>
  4063ac:	3301      	adds	r3, #1
  4063ae:	4a5c      	ldr	r2, [pc, #368]	; (406520 <_vfprintf_r+0x5a8>)
  4063b0:	9324      	str	r3, [sp, #144]	; 0x90
  4063b2:	3410      	adds	r4, #16
  4063b4:	2b07      	cmp	r3, #7
  4063b6:	9425      	str	r4, [sp, #148]	; 0x94
  4063b8:	e888 0044 	stmia.w	r8, {r2, r6}
  4063bc:	ddf1      	ble.n	4063a2 <_vfprintf_r+0x42a>
  4063be:	aa23      	add	r2, sp, #140	; 0x8c
  4063c0:	4651      	mov	r1, sl
  4063c2:	4638      	mov	r0, r7
  4063c4:	f003 fc02 	bl	409bcc <__sprint_r>
  4063c8:	2800      	cmp	r0, #0
  4063ca:	f040 823f 	bne.w	40684c <_vfprintf_r+0x8d4>
  4063ce:	3d10      	subs	r5, #16
  4063d0:	2d10      	cmp	r5, #16
  4063d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4063d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4063d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4063da:	dce7      	bgt.n	4063ac <_vfprintf_r+0x434>
  4063dc:	3301      	adds	r3, #1
  4063de:	4a50      	ldr	r2, [pc, #320]	; (406520 <_vfprintf_r+0x5a8>)
  4063e0:	9324      	str	r3, [sp, #144]	; 0x90
  4063e2:	442c      	add	r4, r5
  4063e4:	2b07      	cmp	r3, #7
  4063e6:	9425      	str	r4, [sp, #148]	; 0x94
  4063e8:	e888 0024 	stmia.w	r8, {r2, r5}
  4063ec:	dd08      	ble.n	406400 <_vfprintf_r+0x488>
  4063ee:	aa23      	add	r2, sp, #140	; 0x8c
  4063f0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4063f2:	9808      	ldr	r0, [sp, #32]
  4063f4:	f003 fbea 	bl	409bcc <__sprint_r>
  4063f8:	2800      	cmp	r0, #0
  4063fa:	f040 8347 	bne.w	406a8c <_vfprintf_r+0xb14>
  4063fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406404:	9907      	ldr	r1, [sp, #28]
  406406:	428a      	cmp	r2, r1
  406408:	bfac      	ite	ge
  40640a:	189b      	addge	r3, r3, r2
  40640c:	185b      	addlt	r3, r3, r1
  40640e:	930b      	str	r3, [sp, #44]	; 0x2c
  406410:	2c00      	cmp	r4, #0
  406412:	f040 8333 	bne.w	406a7c <_vfprintf_r+0xb04>
  406416:	2300      	movs	r3, #0
  406418:	9324      	str	r3, [sp, #144]	; 0x90
  40641a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40641e:	e5f7      	b.n	406010 <_vfprintf_r+0x98>
  406420:	4651      	mov	r1, sl
  406422:	9808      	ldr	r0, [sp, #32]
  406424:	f001 f896 	bl	407554 <__swsetup_r>
  406428:	2800      	cmp	r0, #0
  40642a:	d038      	beq.n	40649e <_vfprintf_r+0x526>
  40642c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406430:	07dd      	lsls	r5, r3, #31
  406432:	d404      	bmi.n	40643e <_vfprintf_r+0x4c6>
  406434:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406438:	059c      	lsls	r4, r3, #22
  40643a:	f140 85ca 	bpl.w	406fd2 <_vfprintf_r+0x105a>
  40643e:	f04f 33ff 	mov.w	r3, #4294967295
  406442:	930b      	str	r3, [sp, #44]	; 0x2c
  406444:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406446:	b041      	add	sp, #260	; 0x104
  406448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40644c:	aa23      	add	r2, sp, #140	; 0x8c
  40644e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406450:	9808      	ldr	r0, [sp, #32]
  406452:	f003 fbbb 	bl	409bcc <__sprint_r>
  406456:	2800      	cmp	r0, #0
  406458:	f040 8318 	bne.w	406a8c <_vfprintf_r+0xb14>
  40645c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406460:	e5f5      	b.n	40604e <_vfprintf_r+0xd6>
  406462:	9808      	ldr	r0, [sp, #32]
  406464:	f002 f9a2 	bl	4087ac <__sinit>
  406468:	e59c      	b.n	405fa4 <_vfprintf_r+0x2c>
  40646a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  40646e:	2a00      	cmp	r2, #0
  406470:	f6ff adbd 	blt.w	405fee <_vfprintf_r+0x76>
  406474:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  406478:	07d0      	lsls	r0, r2, #31
  40647a:	d405      	bmi.n	406488 <_vfprintf_r+0x510>
  40647c:	0599      	lsls	r1, r3, #22
  40647e:	d403      	bmi.n	406488 <_vfprintf_r+0x510>
  406480:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406484:	f002 fcd0 	bl	408e28 <__retarget_lock_release_recursive>
  406488:	462b      	mov	r3, r5
  40648a:	464a      	mov	r2, r9
  40648c:	4651      	mov	r1, sl
  40648e:	9808      	ldr	r0, [sp, #32]
  406490:	f001 f81e 	bl	4074d0 <__sbprintf>
  406494:	900b      	str	r0, [sp, #44]	; 0x2c
  406496:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406498:	b041      	add	sp, #260	; 0x104
  40649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40649e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4064a2:	e59f      	b.n	405fe4 <_vfprintf_r+0x6c>
  4064a4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4064a8:	f002 fcbc 	bl	408e24 <__retarget_lock_acquire_recursive>
  4064ac:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4064b0:	b293      	uxth	r3, r2
  4064b2:	e582      	b.n	405fba <_vfprintf_r+0x42>
  4064b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4064b6:	930e      	str	r3, [sp, #56]	; 0x38
  4064b8:	4240      	negs	r0, r0
  4064ba:	900c      	str	r0, [sp, #48]	; 0x30
  4064bc:	f04b 0b04 	orr.w	fp, fp, #4
  4064c0:	f899 6000 	ldrb.w	r6, [r9]
  4064c4:	e5d7      	b.n	406076 <_vfprintf_r+0xfe>
  4064c6:	2a00      	cmp	r2, #0
  4064c8:	f040 87df 	bne.w	40748a <_vfprintf_r+0x1512>
  4064cc:	4b16      	ldr	r3, [pc, #88]	; (406528 <_vfprintf_r+0x5b0>)
  4064ce:	9318      	str	r3, [sp, #96]	; 0x60
  4064d0:	f01b 0f20 	tst.w	fp, #32
  4064d4:	f040 84b9 	bne.w	406e4a <_vfprintf_r+0xed2>
  4064d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4064da:	f01b 0f10 	tst.w	fp, #16
  4064de:	4613      	mov	r3, r2
  4064e0:	f040 83dc 	bne.w	406c9c <_vfprintf_r+0xd24>
  4064e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4064e8:	f000 83d8 	beq.w	406c9c <_vfprintf_r+0xd24>
  4064ec:	3304      	adds	r3, #4
  4064ee:	8814      	ldrh	r4, [r2, #0]
  4064f0:	930e      	str	r3, [sp, #56]	; 0x38
  4064f2:	2500      	movs	r5, #0
  4064f4:	f01b 0f01 	tst.w	fp, #1
  4064f8:	f000 8322 	beq.w	406b40 <_vfprintf_r+0xbc8>
  4064fc:	ea54 0305 	orrs.w	r3, r4, r5
  406500:	f000 831e 	beq.w	406b40 <_vfprintf_r+0xbc8>
  406504:	2330      	movs	r3, #48	; 0x30
  406506:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40650a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40650e:	f04b 0b02 	orr.w	fp, fp, #2
  406512:	2302      	movs	r3, #2
  406514:	e63c      	b.n	406190 <_vfprintf_r+0x218>
  406516:	f04b 0b20 	orr.w	fp, fp, #32
  40651a:	f899 6000 	ldrb.w	r6, [r9]
  40651e:	e5aa      	b.n	406076 <_vfprintf_r+0xfe>
  406520:	0040b1d0 	.word	0x0040b1d0
  406524:	0040b1e0 	.word	0x0040b1e0
  406528:	0040b190 	.word	0x0040b190
  40652c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40652e:	6817      	ldr	r7, [r2, #0]
  406530:	2400      	movs	r4, #0
  406532:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406536:	1d15      	adds	r5, r2, #4
  406538:	2f00      	cmp	r7, #0
  40653a:	f000 864e 	beq.w	4071da <_vfprintf_r+0x1262>
  40653e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406540:	1c53      	adds	r3, r2, #1
  406542:	f000 85cc 	beq.w	4070de <_vfprintf_r+0x1166>
  406546:	4621      	mov	r1, r4
  406548:	4638      	mov	r0, r7
  40654a:	f002 fce9 	bl	408f20 <memchr>
  40654e:	2800      	cmp	r0, #0
  406550:	f000 8697 	beq.w	407282 <_vfprintf_r+0x130a>
  406554:	1bc3      	subs	r3, r0, r7
  406556:	930d      	str	r3, [sp, #52]	; 0x34
  406558:	9409      	str	r4, [sp, #36]	; 0x24
  40655a:	950e      	str	r5, [sp, #56]	; 0x38
  40655c:	f8cd b018 	str.w	fp, [sp, #24]
  406560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406564:	9307      	str	r3, [sp, #28]
  406566:	9410      	str	r4, [sp, #64]	; 0x40
  406568:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40656c:	e636      	b.n	4061dc <_vfprintf_r+0x264>
  40656e:	2a00      	cmp	r2, #0
  406570:	f040 8796 	bne.w	4074a0 <_vfprintf_r+0x1528>
  406574:	f01b 0f20 	tst.w	fp, #32
  406578:	f040 845a 	bne.w	406e30 <_vfprintf_r+0xeb8>
  40657c:	f01b 0f10 	tst.w	fp, #16
  406580:	f040 83a2 	bne.w	406cc8 <_vfprintf_r+0xd50>
  406584:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406588:	f000 839e 	beq.w	406cc8 <_vfprintf_r+0xd50>
  40658c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40658e:	f9b1 4000 	ldrsh.w	r4, [r1]
  406592:	3104      	adds	r1, #4
  406594:	17e5      	asrs	r5, r4, #31
  406596:	4622      	mov	r2, r4
  406598:	462b      	mov	r3, r5
  40659a:	910e      	str	r1, [sp, #56]	; 0x38
  40659c:	2a00      	cmp	r2, #0
  40659e:	f173 0300 	sbcs.w	r3, r3, #0
  4065a2:	f2c0 8487 	blt.w	406eb4 <_vfprintf_r+0xf3c>
  4065a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4065a8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4065ac:	1c4a      	adds	r2, r1, #1
  4065ae:	f04f 0301 	mov.w	r3, #1
  4065b2:	f47f adf5 	bne.w	4061a0 <_vfprintf_r+0x228>
  4065b6:	ea54 0205 	orrs.w	r2, r4, r5
  4065ba:	f000 826c 	beq.w	406a96 <_vfprintf_r+0xb1e>
  4065be:	f8cd b018 	str.w	fp, [sp, #24]
  4065c2:	2b01      	cmp	r3, #1
  4065c4:	f000 8308 	beq.w	406bd8 <_vfprintf_r+0xc60>
  4065c8:	2b02      	cmp	r3, #2
  4065ca:	f040 8295 	bne.w	406af8 <_vfprintf_r+0xb80>
  4065ce:	9818      	ldr	r0, [sp, #96]	; 0x60
  4065d0:	af30      	add	r7, sp, #192	; 0xc0
  4065d2:	0923      	lsrs	r3, r4, #4
  4065d4:	f004 010f 	and.w	r1, r4, #15
  4065d8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4065dc:	092a      	lsrs	r2, r5, #4
  4065de:	461c      	mov	r4, r3
  4065e0:	4615      	mov	r5, r2
  4065e2:	5c43      	ldrb	r3, [r0, r1]
  4065e4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4065e8:	ea54 0305 	orrs.w	r3, r4, r5
  4065ec:	d1f1      	bne.n	4065d2 <_vfprintf_r+0x65a>
  4065ee:	ab30      	add	r3, sp, #192	; 0xc0
  4065f0:	1bdb      	subs	r3, r3, r7
  4065f2:	930d      	str	r3, [sp, #52]	; 0x34
  4065f4:	e5ea      	b.n	4061cc <_vfprintf_r+0x254>
  4065f6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4065fa:	f899 6000 	ldrb.w	r6, [r9]
  4065fe:	e53a      	b.n	406076 <_vfprintf_r+0xfe>
  406600:	f899 6000 	ldrb.w	r6, [r9]
  406604:	2e6c      	cmp	r6, #108	; 0x6c
  406606:	bf03      	ittte	eq
  406608:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  40660c:	f04b 0b20 	orreq.w	fp, fp, #32
  406610:	f109 0901 	addeq.w	r9, r9, #1
  406614:	f04b 0b10 	orrne.w	fp, fp, #16
  406618:	e52d      	b.n	406076 <_vfprintf_r+0xfe>
  40661a:	2a00      	cmp	r2, #0
  40661c:	f040 874c 	bne.w	4074b8 <_vfprintf_r+0x1540>
  406620:	f01b 0f20 	tst.w	fp, #32
  406624:	f040 853f 	bne.w	4070a6 <_vfprintf_r+0x112e>
  406628:	f01b 0f10 	tst.w	fp, #16
  40662c:	f040 80fc 	bne.w	406828 <_vfprintf_r+0x8b0>
  406630:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406634:	f000 80f8 	beq.w	406828 <_vfprintf_r+0x8b0>
  406638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40663a:	6813      	ldr	r3, [r2, #0]
  40663c:	3204      	adds	r2, #4
  40663e:	920e      	str	r2, [sp, #56]	; 0x38
  406640:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  406644:	801a      	strh	r2, [r3, #0]
  406646:	e4e3      	b.n	406010 <_vfprintf_r+0x98>
  406648:	f899 6000 	ldrb.w	r6, [r9]
  40664c:	2900      	cmp	r1, #0
  40664e:	f47f ad12 	bne.w	406076 <_vfprintf_r+0xfe>
  406652:	2201      	movs	r2, #1
  406654:	2120      	movs	r1, #32
  406656:	e50e      	b.n	406076 <_vfprintf_r+0xfe>
  406658:	f899 6000 	ldrb.w	r6, [r9]
  40665c:	2e2a      	cmp	r6, #42	; 0x2a
  40665e:	f109 0001 	add.w	r0, r9, #1
  406662:	f000 86f1 	beq.w	407448 <_vfprintf_r+0x14d0>
  406666:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40666a:	2b09      	cmp	r3, #9
  40666c:	4681      	mov	r9, r0
  40666e:	bf98      	it	ls
  406670:	2000      	movls	r0, #0
  406672:	f200 863d 	bhi.w	4072f0 <_vfprintf_r+0x1378>
  406676:	f819 6b01 	ldrb.w	r6, [r9], #1
  40667a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40667e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406682:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406686:	2b09      	cmp	r3, #9
  406688:	d9f5      	bls.n	406676 <_vfprintf_r+0x6fe>
  40668a:	9009      	str	r0, [sp, #36]	; 0x24
  40668c:	e4f5      	b.n	40607a <_vfprintf_r+0x102>
  40668e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406692:	f899 6000 	ldrb.w	r6, [r9]
  406696:	e4ee      	b.n	406076 <_vfprintf_r+0xfe>
  406698:	f899 6000 	ldrb.w	r6, [r9]
  40669c:	2201      	movs	r2, #1
  40669e:	212b      	movs	r1, #43	; 0x2b
  4066a0:	e4e9      	b.n	406076 <_vfprintf_r+0xfe>
  4066a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4066a4:	4bae      	ldr	r3, [pc, #696]	; (406960 <_vfprintf_r+0x9e8>)
  4066a6:	6814      	ldr	r4, [r2, #0]
  4066a8:	9318      	str	r3, [sp, #96]	; 0x60
  4066aa:	2678      	movs	r6, #120	; 0x78
  4066ac:	2330      	movs	r3, #48	; 0x30
  4066ae:	3204      	adds	r2, #4
  4066b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4066b4:	f04b 0b02 	orr.w	fp, fp, #2
  4066b8:	920e      	str	r2, [sp, #56]	; 0x38
  4066ba:	2500      	movs	r5, #0
  4066bc:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4066c0:	2302      	movs	r3, #2
  4066c2:	e565      	b.n	406190 <_vfprintf_r+0x218>
  4066c4:	2a00      	cmp	r2, #0
  4066c6:	f040 86e4 	bne.w	407492 <_vfprintf_r+0x151a>
  4066ca:	4ba6      	ldr	r3, [pc, #664]	; (406964 <_vfprintf_r+0x9ec>)
  4066cc:	9318      	str	r3, [sp, #96]	; 0x60
  4066ce:	e6ff      	b.n	4064d0 <_vfprintf_r+0x558>
  4066d0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4066d2:	f8cd b018 	str.w	fp, [sp, #24]
  4066d6:	680a      	ldr	r2, [r1, #0]
  4066d8:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4066dc:	2300      	movs	r3, #0
  4066de:	460a      	mov	r2, r1
  4066e0:	469a      	mov	sl, r3
  4066e2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4066e6:	3204      	adds	r2, #4
  4066e8:	2301      	movs	r3, #1
  4066ea:	9307      	str	r3, [sp, #28]
  4066ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  4066f0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  4066f4:	920e      	str	r2, [sp, #56]	; 0x38
  4066f6:	930d      	str	r3, [sp, #52]	; 0x34
  4066f8:	af26      	add	r7, sp, #152	; 0x98
  4066fa:	e575      	b.n	4061e8 <_vfprintf_r+0x270>
  4066fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406700:	2000      	movs	r0, #0
  406702:	f819 6b01 	ldrb.w	r6, [r9], #1
  406706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40670a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  40670e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406712:	2b09      	cmp	r3, #9
  406714:	d9f5      	bls.n	406702 <_vfprintf_r+0x78a>
  406716:	900c      	str	r0, [sp, #48]	; 0x30
  406718:	e4af      	b.n	40607a <_vfprintf_r+0x102>
  40671a:	2a00      	cmp	r2, #0
  40671c:	f040 86c8 	bne.w	4074b0 <_vfprintf_r+0x1538>
  406720:	f04b 0b10 	orr.w	fp, fp, #16
  406724:	e726      	b.n	406574 <_vfprintf_r+0x5fc>
  406726:	f04b 0b01 	orr.w	fp, fp, #1
  40672a:	f899 6000 	ldrb.w	r6, [r9]
  40672e:	e4a2      	b.n	406076 <_vfprintf_r+0xfe>
  406730:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406732:	6823      	ldr	r3, [r4, #0]
  406734:	930c      	str	r3, [sp, #48]	; 0x30
  406736:	4618      	mov	r0, r3
  406738:	2800      	cmp	r0, #0
  40673a:	4623      	mov	r3, r4
  40673c:	f103 0304 	add.w	r3, r3, #4
  406740:	f6ff aeb8 	blt.w	4064b4 <_vfprintf_r+0x53c>
  406744:	930e      	str	r3, [sp, #56]	; 0x38
  406746:	f899 6000 	ldrb.w	r6, [r9]
  40674a:	e494      	b.n	406076 <_vfprintf_r+0xfe>
  40674c:	2a00      	cmp	r2, #0
  40674e:	f040 86b7 	bne.w	4074c0 <_vfprintf_r+0x1548>
  406752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406754:	3507      	adds	r5, #7
  406756:	f025 0307 	bic.w	r3, r5, #7
  40675a:	f103 0208 	add.w	r2, r3, #8
  40675e:	920e      	str	r2, [sp, #56]	; 0x38
  406760:	681a      	ldr	r2, [r3, #0]
  406762:	9213      	str	r2, [sp, #76]	; 0x4c
  406764:	685b      	ldr	r3, [r3, #4]
  406766:	9312      	str	r3, [sp, #72]	; 0x48
  406768:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40676a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40676c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  406770:	4628      	mov	r0, r5
  406772:	4621      	mov	r1, r4
  406774:	f04f 32ff 	mov.w	r2, #4294967295
  406778:	4b7b      	ldr	r3, [pc, #492]	; (406968 <_vfprintf_r+0x9f0>)
  40677a:	f004 f929 	bl	40a9d0 <__aeabi_dcmpun>
  40677e:	2800      	cmp	r0, #0
  406780:	f040 83a2 	bne.w	406ec8 <_vfprintf_r+0xf50>
  406784:	4628      	mov	r0, r5
  406786:	4621      	mov	r1, r4
  406788:	f04f 32ff 	mov.w	r2, #4294967295
  40678c:	4b76      	ldr	r3, [pc, #472]	; (406968 <_vfprintf_r+0x9f0>)
  40678e:	f004 f901 	bl	40a994 <__aeabi_dcmple>
  406792:	2800      	cmp	r0, #0
  406794:	f040 8398 	bne.w	406ec8 <_vfprintf_r+0xf50>
  406798:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40679a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40679c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40679e:	9912      	ldr	r1, [sp, #72]	; 0x48
  4067a0:	f004 f8ee 	bl	40a980 <__aeabi_dcmplt>
  4067a4:	2800      	cmp	r0, #0
  4067a6:	f040 8435 	bne.w	407014 <_vfprintf_r+0x109c>
  4067aa:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4067ae:	4f6f      	ldr	r7, [pc, #444]	; (40696c <_vfprintf_r+0x9f4>)
  4067b0:	4b6f      	ldr	r3, [pc, #444]	; (406970 <_vfprintf_r+0x9f8>)
  4067b2:	2203      	movs	r2, #3
  4067b4:	2100      	movs	r1, #0
  4067b6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4067ba:	9207      	str	r2, [sp, #28]
  4067bc:	9109      	str	r1, [sp, #36]	; 0x24
  4067be:	9006      	str	r0, [sp, #24]
  4067c0:	2e47      	cmp	r6, #71	; 0x47
  4067c2:	bfd8      	it	le
  4067c4:	461f      	movle	r7, r3
  4067c6:	920d      	str	r2, [sp, #52]	; 0x34
  4067c8:	9110      	str	r1, [sp, #64]	; 0x40
  4067ca:	e507      	b.n	4061dc <_vfprintf_r+0x264>
  4067cc:	f04b 0b08 	orr.w	fp, fp, #8
  4067d0:	f899 6000 	ldrb.w	r6, [r9]
  4067d4:	e44f      	b.n	406076 <_vfprintf_r+0xfe>
  4067d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4067d8:	3507      	adds	r5, #7
  4067da:	f025 0307 	bic.w	r3, r5, #7
  4067de:	f103 0208 	add.w	r2, r3, #8
  4067e2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4067e6:	920e      	str	r2, [sp, #56]	; 0x38
  4067e8:	2300      	movs	r3, #0
  4067ea:	e4d1      	b.n	406190 <_vfprintf_r+0x218>
  4067ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4067ee:	3507      	adds	r5, #7
  4067f0:	f025 0307 	bic.w	r3, r5, #7
  4067f4:	f103 0208 	add.w	r2, r3, #8
  4067f8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4067fc:	920e      	str	r2, [sp, #56]	; 0x38
  4067fe:	2301      	movs	r3, #1
  406800:	e4c6      	b.n	406190 <_vfprintf_r+0x218>
  406802:	2a00      	cmp	r2, #0
  406804:	f040 8650 	bne.w	4074a8 <_vfprintf_r+0x1530>
  406808:	b1c6      	cbz	r6, 40683c <_vfprintf_r+0x8c4>
  40680a:	2300      	movs	r3, #0
  40680c:	2201      	movs	r2, #1
  40680e:	469a      	mov	sl, r3
  406810:	9207      	str	r2, [sp, #28]
  406812:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  406816:	f8cd b018 	str.w	fp, [sp, #24]
  40681a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40681e:	9309      	str	r3, [sp, #36]	; 0x24
  406820:	9310      	str	r3, [sp, #64]	; 0x40
  406822:	920d      	str	r2, [sp, #52]	; 0x34
  406824:	af26      	add	r7, sp, #152	; 0x98
  406826:	e4df      	b.n	4061e8 <_vfprintf_r+0x270>
  406828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40682a:	6813      	ldr	r3, [r2, #0]
  40682c:	3204      	adds	r2, #4
  40682e:	920e      	str	r2, [sp, #56]	; 0x38
  406830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406832:	601a      	str	r2, [r3, #0]
  406834:	f7ff bbec 	b.w	406010 <_vfprintf_r+0x98>
  406838:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40683a:	e527      	b.n	40628c <_vfprintf_r+0x314>
  40683c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40683e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406842:	2b00      	cmp	r3, #0
  406844:	f040 8594 	bne.w	407370 <_vfprintf_r+0x13f8>
  406848:	2300      	movs	r3, #0
  40684a:	9324      	str	r3, [sp, #144]	; 0x90
  40684c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406850:	f013 0f01 	tst.w	r3, #1
  406854:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406858:	d102      	bne.n	406860 <_vfprintf_r+0x8e8>
  40685a:	059a      	lsls	r2, r3, #22
  40685c:	f140 8249 	bpl.w	406cf2 <_vfprintf_r+0xd7a>
  406860:	065b      	lsls	r3, r3, #25
  406862:	f53f adec 	bmi.w	40643e <_vfprintf_r+0x4c6>
  406866:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406868:	b041      	add	sp, #260	; 0x104
  40686a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40686e:	2e65      	cmp	r6, #101	; 0x65
  406870:	f340 80b2 	ble.w	4069d8 <_vfprintf_r+0xa60>
  406874:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406876:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40687a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40687c:	f004 f876 	bl	40a96c <__aeabi_dcmpeq>
  406880:	2800      	cmp	r0, #0
  406882:	f000 8160 	beq.w	406b46 <_vfprintf_r+0xbce>
  406886:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406888:	4a3a      	ldr	r2, [pc, #232]	; (406974 <_vfprintf_r+0x9fc>)
  40688a:	f8c8 2000 	str.w	r2, [r8]
  40688e:	3301      	adds	r3, #1
  406890:	3401      	adds	r4, #1
  406892:	2201      	movs	r2, #1
  406894:	2b07      	cmp	r3, #7
  406896:	9425      	str	r4, [sp, #148]	; 0x94
  406898:	9324      	str	r3, [sp, #144]	; 0x90
  40689a:	f8c8 2004 	str.w	r2, [r8, #4]
  40689e:	f300 83bf 	bgt.w	407020 <_vfprintf_r+0x10a8>
  4068a2:	f108 0808 	add.w	r8, r8, #8
  4068a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4068a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4068ac:	4293      	cmp	r3, r2
  4068ae:	db03      	blt.n	4068b8 <_vfprintf_r+0x940>
  4068b0:	9b06      	ldr	r3, [sp, #24]
  4068b2:	07df      	lsls	r7, r3, #31
  4068b4:	f57f ad65 	bpl.w	406382 <_vfprintf_r+0x40a>
  4068b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068ba:	9914      	ldr	r1, [sp, #80]	; 0x50
  4068bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4068be:	f8c8 2000 	str.w	r2, [r8]
  4068c2:	3301      	adds	r3, #1
  4068c4:	440c      	add	r4, r1
  4068c6:	2b07      	cmp	r3, #7
  4068c8:	f8c8 1004 	str.w	r1, [r8, #4]
  4068cc:	9425      	str	r4, [sp, #148]	; 0x94
  4068ce:	9324      	str	r3, [sp, #144]	; 0x90
  4068d0:	f300 83f8 	bgt.w	4070c4 <_vfprintf_r+0x114c>
  4068d4:	f108 0808 	add.w	r8, r8, #8
  4068d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4068da:	1e5e      	subs	r6, r3, #1
  4068dc:	2e00      	cmp	r6, #0
  4068de:	f77f ad50 	ble.w	406382 <_vfprintf_r+0x40a>
  4068e2:	2e10      	cmp	r6, #16
  4068e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068e6:	4d24      	ldr	r5, [pc, #144]	; (406978 <_vfprintf_r+0xa00>)
  4068e8:	f340 81dd 	ble.w	406ca6 <_vfprintf_r+0xd2e>
  4068ec:	2710      	movs	r7, #16
  4068ee:	f8dd a020 	ldr.w	sl, [sp, #32]
  4068f2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4068f6:	e005      	b.n	406904 <_vfprintf_r+0x98c>
  4068f8:	f108 0808 	add.w	r8, r8, #8
  4068fc:	3e10      	subs	r6, #16
  4068fe:	2e10      	cmp	r6, #16
  406900:	f340 81d1 	ble.w	406ca6 <_vfprintf_r+0xd2e>
  406904:	3301      	adds	r3, #1
  406906:	3410      	adds	r4, #16
  406908:	2b07      	cmp	r3, #7
  40690a:	9425      	str	r4, [sp, #148]	; 0x94
  40690c:	9324      	str	r3, [sp, #144]	; 0x90
  40690e:	e888 00a0 	stmia.w	r8, {r5, r7}
  406912:	ddf1      	ble.n	4068f8 <_vfprintf_r+0x980>
  406914:	aa23      	add	r2, sp, #140	; 0x8c
  406916:	4659      	mov	r1, fp
  406918:	4650      	mov	r0, sl
  40691a:	f003 f957 	bl	409bcc <__sprint_r>
  40691e:	2800      	cmp	r0, #0
  406920:	f040 83cd 	bne.w	4070be <_vfprintf_r+0x1146>
  406924:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406926:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406928:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40692c:	e7e6      	b.n	4068fc <_vfprintf_r+0x984>
  40692e:	46aa      	mov	sl, r5
  406930:	e78c      	b.n	40684c <_vfprintf_r+0x8d4>
  406932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406934:	9a07      	ldr	r2, [sp, #28]
  406936:	eba3 0a02 	sub.w	sl, r3, r2
  40693a:	f1ba 0f00 	cmp.w	sl, #0
  40693e:	f77f acca 	ble.w	4062d6 <_vfprintf_r+0x35e>
  406942:	f1ba 0f10 	cmp.w	sl, #16
  406946:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406948:	4d0b      	ldr	r5, [pc, #44]	; (406978 <_vfprintf_r+0xa00>)
  40694a:	dd39      	ble.n	4069c0 <_vfprintf_r+0xa48>
  40694c:	4642      	mov	r2, r8
  40694e:	4621      	mov	r1, r4
  406950:	46b0      	mov	r8, r6
  406952:	f04f 0b10 	mov.w	fp, #16
  406956:	462e      	mov	r6, r5
  406958:	9c08      	ldr	r4, [sp, #32]
  40695a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40695c:	e015      	b.n	40698a <_vfprintf_r+0xa12>
  40695e:	bf00      	nop
  406960:	0040b190 	.word	0x0040b190
  406964:	0040b17c 	.word	0x0040b17c
  406968:	7fefffff 	.word	0x7fefffff
  40696c:	0040b170 	.word	0x0040b170
  406970:	0040b16c 	.word	0x0040b16c
  406974:	0040b1ac 	.word	0x0040b1ac
  406978:	0040b1e0 	.word	0x0040b1e0
  40697c:	f1aa 0a10 	sub.w	sl, sl, #16
  406980:	f1ba 0f10 	cmp.w	sl, #16
  406984:	f102 0208 	add.w	r2, r2, #8
  406988:	dd16      	ble.n	4069b8 <_vfprintf_r+0xa40>
  40698a:	3301      	adds	r3, #1
  40698c:	3110      	adds	r1, #16
  40698e:	2b07      	cmp	r3, #7
  406990:	9125      	str	r1, [sp, #148]	; 0x94
  406992:	9324      	str	r3, [sp, #144]	; 0x90
  406994:	e882 0840 	stmia.w	r2, {r6, fp}
  406998:	ddf0      	ble.n	40697c <_vfprintf_r+0xa04>
  40699a:	aa23      	add	r2, sp, #140	; 0x8c
  40699c:	4629      	mov	r1, r5
  40699e:	4620      	mov	r0, r4
  4069a0:	f003 f914 	bl	409bcc <__sprint_r>
  4069a4:	2800      	cmp	r0, #0
  4069a6:	d1c2      	bne.n	40692e <_vfprintf_r+0x9b6>
  4069a8:	f1aa 0a10 	sub.w	sl, sl, #16
  4069ac:	f1ba 0f10 	cmp.w	sl, #16
  4069b0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4069b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4069b4:	aa30      	add	r2, sp, #192	; 0xc0
  4069b6:	dce8      	bgt.n	40698a <_vfprintf_r+0xa12>
  4069b8:	4635      	mov	r5, r6
  4069ba:	460c      	mov	r4, r1
  4069bc:	4646      	mov	r6, r8
  4069be:	4690      	mov	r8, r2
  4069c0:	3301      	adds	r3, #1
  4069c2:	4454      	add	r4, sl
  4069c4:	2b07      	cmp	r3, #7
  4069c6:	9425      	str	r4, [sp, #148]	; 0x94
  4069c8:	9324      	str	r3, [sp, #144]	; 0x90
  4069ca:	e888 0420 	stmia.w	r8, {r5, sl}
  4069ce:	f300 8264 	bgt.w	406e9a <_vfprintf_r+0xf22>
  4069d2:	f108 0808 	add.w	r8, r8, #8
  4069d6:	e47e      	b.n	4062d6 <_vfprintf_r+0x35e>
  4069d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4069da:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4069dc:	2b01      	cmp	r3, #1
  4069de:	f340 81fd 	ble.w	406ddc <_vfprintf_r+0xe64>
  4069e2:	3601      	adds	r6, #1
  4069e4:	3401      	adds	r4, #1
  4069e6:	2301      	movs	r3, #1
  4069e8:	2e07      	cmp	r6, #7
  4069ea:	9425      	str	r4, [sp, #148]	; 0x94
  4069ec:	9624      	str	r6, [sp, #144]	; 0x90
  4069ee:	f8c8 7000 	str.w	r7, [r8]
  4069f2:	f8c8 3004 	str.w	r3, [r8, #4]
  4069f6:	f300 820e 	bgt.w	406e16 <_vfprintf_r+0xe9e>
  4069fa:	f108 0808 	add.w	r8, r8, #8
  4069fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406a02:	f8c8 3000 	str.w	r3, [r8]
  406a06:	3601      	adds	r6, #1
  406a08:	4414      	add	r4, r2
  406a0a:	2e07      	cmp	r6, #7
  406a0c:	9425      	str	r4, [sp, #148]	; 0x94
  406a0e:	9624      	str	r6, [sp, #144]	; 0x90
  406a10:	f8c8 2004 	str.w	r2, [r8, #4]
  406a14:	f300 822e 	bgt.w	406e74 <_vfprintf_r+0xefc>
  406a18:	f108 0808 	add.w	r8, r8, #8
  406a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406a1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406a20:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406a22:	9912      	ldr	r1, [sp, #72]	; 0x48
  406a24:	f003 ffa2 	bl	40a96c <__aeabi_dcmpeq>
  406a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a2a:	2800      	cmp	r0, #0
  406a2c:	f040 8106 	bne.w	406c3c <_vfprintf_r+0xcc4>
  406a30:	3b01      	subs	r3, #1
  406a32:	3601      	adds	r6, #1
  406a34:	3701      	adds	r7, #1
  406a36:	441c      	add	r4, r3
  406a38:	2e07      	cmp	r6, #7
  406a3a:	9624      	str	r6, [sp, #144]	; 0x90
  406a3c:	9425      	str	r4, [sp, #148]	; 0x94
  406a3e:	f8c8 7000 	str.w	r7, [r8]
  406a42:	f8c8 3004 	str.w	r3, [r8, #4]
  406a46:	f300 81d9 	bgt.w	406dfc <_vfprintf_r+0xe84>
  406a4a:	f108 0808 	add.w	r8, r8, #8
  406a4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406a50:	f8c8 2004 	str.w	r2, [r8, #4]
  406a54:	3601      	adds	r6, #1
  406a56:	4414      	add	r4, r2
  406a58:	ab1f      	add	r3, sp, #124	; 0x7c
  406a5a:	2e07      	cmp	r6, #7
  406a5c:	9425      	str	r4, [sp, #148]	; 0x94
  406a5e:	9624      	str	r6, [sp, #144]	; 0x90
  406a60:	f8c8 3000 	str.w	r3, [r8]
  406a64:	f77f ac8b 	ble.w	40637e <_vfprintf_r+0x406>
  406a68:	aa23      	add	r2, sp, #140	; 0x8c
  406a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406a6c:	9808      	ldr	r0, [sp, #32]
  406a6e:	f003 f8ad 	bl	409bcc <__sprint_r>
  406a72:	b958      	cbnz	r0, 406a8c <_vfprintf_r+0xb14>
  406a74:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406a76:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406a7a:	e482      	b.n	406382 <_vfprintf_r+0x40a>
  406a7c:	aa23      	add	r2, sp, #140	; 0x8c
  406a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406a80:	9808      	ldr	r0, [sp, #32]
  406a82:	f003 f8a3 	bl	409bcc <__sprint_r>
  406a86:	2800      	cmp	r0, #0
  406a88:	f43f acc5 	beq.w	406416 <_vfprintf_r+0x49e>
  406a8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406a90:	e6dc      	b.n	40684c <_vfprintf_r+0x8d4>
  406a92:	f8dd b018 	ldr.w	fp, [sp, #24]
  406a96:	2b01      	cmp	r3, #1
  406a98:	f000 8121 	beq.w	406cde <_vfprintf_r+0xd66>
  406a9c:	2b02      	cmp	r3, #2
  406a9e:	d127      	bne.n	406af0 <_vfprintf_r+0xb78>
  406aa0:	f8cd b018 	str.w	fp, [sp, #24]
  406aa4:	2400      	movs	r4, #0
  406aa6:	2500      	movs	r5, #0
  406aa8:	e591      	b.n	4065ce <_vfprintf_r+0x656>
  406aaa:	aa23      	add	r2, sp, #140	; 0x8c
  406aac:	990a      	ldr	r1, [sp, #40]	; 0x28
  406aae:	9808      	ldr	r0, [sp, #32]
  406ab0:	f003 f88c 	bl	409bcc <__sprint_r>
  406ab4:	2800      	cmp	r0, #0
  406ab6:	d1e9      	bne.n	406a8c <_vfprintf_r+0xb14>
  406ab8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406aba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406abe:	e44d      	b.n	40635c <_vfprintf_r+0x3e4>
  406ac0:	aa23      	add	r2, sp, #140	; 0x8c
  406ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
  406ac4:	9808      	ldr	r0, [sp, #32]
  406ac6:	f003 f881 	bl	409bcc <__sprint_r>
  406aca:	2800      	cmp	r0, #0
  406acc:	d1de      	bne.n	406a8c <_vfprintf_r+0xb14>
  406ace:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406ad0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406ad4:	f7ff bbec 	b.w	4062b0 <_vfprintf_r+0x338>
  406ad8:	aa23      	add	r2, sp, #140	; 0x8c
  406ada:	990a      	ldr	r1, [sp, #40]	; 0x28
  406adc:	9808      	ldr	r0, [sp, #32]
  406ade:	f003 f875 	bl	409bcc <__sprint_r>
  406ae2:	2800      	cmp	r0, #0
  406ae4:	d1d2      	bne.n	406a8c <_vfprintf_r+0xb14>
  406ae6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406ae8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406aec:	f7ff bbf0 	b.w	4062d0 <_vfprintf_r+0x358>
  406af0:	f8cd b018 	str.w	fp, [sp, #24]
  406af4:	2400      	movs	r4, #0
  406af6:	2500      	movs	r5, #0
  406af8:	a930      	add	r1, sp, #192	; 0xc0
  406afa:	e000      	b.n	406afe <_vfprintf_r+0xb86>
  406afc:	4639      	mov	r1, r7
  406afe:	08e2      	lsrs	r2, r4, #3
  406b00:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406b04:	08e8      	lsrs	r0, r5, #3
  406b06:	f004 0307 	and.w	r3, r4, #7
  406b0a:	4605      	mov	r5, r0
  406b0c:	4614      	mov	r4, r2
  406b0e:	3330      	adds	r3, #48	; 0x30
  406b10:	ea54 0205 	orrs.w	r2, r4, r5
  406b14:	f801 3c01 	strb.w	r3, [r1, #-1]
  406b18:	f101 37ff 	add.w	r7, r1, #4294967295
  406b1c:	d1ee      	bne.n	406afc <_vfprintf_r+0xb84>
  406b1e:	9a06      	ldr	r2, [sp, #24]
  406b20:	07d2      	lsls	r2, r2, #31
  406b22:	f57f ad64 	bpl.w	4065ee <_vfprintf_r+0x676>
  406b26:	2b30      	cmp	r3, #48	; 0x30
  406b28:	f43f ad61 	beq.w	4065ee <_vfprintf_r+0x676>
  406b2c:	2330      	movs	r3, #48	; 0x30
  406b2e:	3902      	subs	r1, #2
  406b30:	f807 3c01 	strb.w	r3, [r7, #-1]
  406b34:	ab30      	add	r3, sp, #192	; 0xc0
  406b36:	1a5b      	subs	r3, r3, r1
  406b38:	930d      	str	r3, [sp, #52]	; 0x34
  406b3a:	460f      	mov	r7, r1
  406b3c:	f7ff bb46 	b.w	4061cc <_vfprintf_r+0x254>
  406b40:	2302      	movs	r3, #2
  406b42:	f7ff bb25 	b.w	406190 <_vfprintf_r+0x218>
  406b46:	991d      	ldr	r1, [sp, #116]	; 0x74
  406b48:	2900      	cmp	r1, #0
  406b4a:	f340 8274 	ble.w	407036 <_vfprintf_r+0x10be>
  406b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b52:	4293      	cmp	r3, r2
  406b54:	bfa8      	it	ge
  406b56:	4613      	movge	r3, r2
  406b58:	2b00      	cmp	r3, #0
  406b5a:	461e      	mov	r6, r3
  406b5c:	dd0d      	ble.n	406b7a <_vfprintf_r+0xc02>
  406b5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b60:	f8c8 7000 	str.w	r7, [r8]
  406b64:	3301      	adds	r3, #1
  406b66:	4434      	add	r4, r6
  406b68:	2b07      	cmp	r3, #7
  406b6a:	9425      	str	r4, [sp, #148]	; 0x94
  406b6c:	f8c8 6004 	str.w	r6, [r8, #4]
  406b70:	9324      	str	r3, [sp, #144]	; 0x90
  406b72:	f300 8324 	bgt.w	4071be <_vfprintf_r+0x1246>
  406b76:	f108 0808 	add.w	r8, r8, #8
  406b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b7c:	2e00      	cmp	r6, #0
  406b7e:	bfa8      	it	ge
  406b80:	1b9b      	subge	r3, r3, r6
  406b82:	2b00      	cmp	r3, #0
  406b84:	461e      	mov	r6, r3
  406b86:	f340 80d0 	ble.w	406d2a <_vfprintf_r+0xdb2>
  406b8a:	2e10      	cmp	r6, #16
  406b8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b8e:	4dc0      	ldr	r5, [pc, #768]	; (406e90 <_vfprintf_r+0xf18>)
  406b90:	f340 80b7 	ble.w	406d02 <_vfprintf_r+0xd8a>
  406b94:	4622      	mov	r2, r4
  406b96:	f04f 0a10 	mov.w	sl, #16
  406b9a:	f8dd b020 	ldr.w	fp, [sp, #32]
  406b9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406ba0:	e005      	b.n	406bae <_vfprintf_r+0xc36>
  406ba2:	f108 0808 	add.w	r8, r8, #8
  406ba6:	3e10      	subs	r6, #16
  406ba8:	2e10      	cmp	r6, #16
  406baa:	f340 80a9 	ble.w	406d00 <_vfprintf_r+0xd88>
  406bae:	3301      	adds	r3, #1
  406bb0:	3210      	adds	r2, #16
  406bb2:	2b07      	cmp	r3, #7
  406bb4:	9225      	str	r2, [sp, #148]	; 0x94
  406bb6:	9324      	str	r3, [sp, #144]	; 0x90
  406bb8:	e888 0420 	stmia.w	r8, {r5, sl}
  406bbc:	ddf1      	ble.n	406ba2 <_vfprintf_r+0xc2a>
  406bbe:	aa23      	add	r2, sp, #140	; 0x8c
  406bc0:	4621      	mov	r1, r4
  406bc2:	4658      	mov	r0, fp
  406bc4:	f003 f802 	bl	409bcc <__sprint_r>
  406bc8:	2800      	cmp	r0, #0
  406bca:	f040 8324 	bne.w	407216 <_vfprintf_r+0x129e>
  406bce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406bd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bd2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406bd6:	e7e6      	b.n	406ba6 <_vfprintf_r+0xc2e>
  406bd8:	2d00      	cmp	r5, #0
  406bda:	bf08      	it	eq
  406bdc:	2c0a      	cmpeq	r4, #10
  406bde:	d37c      	bcc.n	406cda <_vfprintf_r+0xd62>
  406be0:	af30      	add	r7, sp, #192	; 0xc0
  406be2:	4620      	mov	r0, r4
  406be4:	4629      	mov	r1, r5
  406be6:	220a      	movs	r2, #10
  406be8:	2300      	movs	r3, #0
  406bea:	f003 ff2f 	bl	40aa4c <__aeabi_uldivmod>
  406bee:	3230      	adds	r2, #48	; 0x30
  406bf0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  406bf4:	4620      	mov	r0, r4
  406bf6:	4629      	mov	r1, r5
  406bf8:	2300      	movs	r3, #0
  406bfa:	220a      	movs	r2, #10
  406bfc:	f003 ff26 	bl	40aa4c <__aeabi_uldivmod>
  406c00:	4604      	mov	r4, r0
  406c02:	460d      	mov	r5, r1
  406c04:	ea54 0305 	orrs.w	r3, r4, r5
  406c08:	d1eb      	bne.n	406be2 <_vfprintf_r+0xc6a>
  406c0a:	ab30      	add	r3, sp, #192	; 0xc0
  406c0c:	1bdb      	subs	r3, r3, r7
  406c0e:	930d      	str	r3, [sp, #52]	; 0x34
  406c10:	f7ff badc 	b.w	4061cc <_vfprintf_r+0x254>
  406c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c16:	930d      	str	r3, [sp, #52]	; 0x34
  406c18:	af30      	add	r7, sp, #192	; 0xc0
  406c1a:	f7ff bad7 	b.w	4061cc <_vfprintf_r+0x254>
  406c1e:	aa23      	add	r2, sp, #140	; 0x8c
  406c20:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c22:	9808      	ldr	r0, [sp, #32]
  406c24:	f002 ffd2 	bl	409bcc <__sprint_r>
  406c28:	2800      	cmp	r0, #0
  406c2a:	f47f af2f 	bne.w	406a8c <_vfprintf_r+0xb14>
  406c2e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406c32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c38:	f7ff bb28 	b.w	40628c <_vfprintf_r+0x314>
  406c3c:	1e5f      	subs	r7, r3, #1
  406c3e:	2f00      	cmp	r7, #0
  406c40:	f77f af05 	ble.w	406a4e <_vfprintf_r+0xad6>
  406c44:	2f10      	cmp	r7, #16
  406c46:	4d92      	ldr	r5, [pc, #584]	; (406e90 <_vfprintf_r+0xf18>)
  406c48:	f340 810a 	ble.w	406e60 <_vfprintf_r+0xee8>
  406c4c:	f04f 0a10 	mov.w	sl, #16
  406c50:	f8dd b020 	ldr.w	fp, [sp, #32]
  406c54:	e005      	b.n	406c62 <_vfprintf_r+0xcea>
  406c56:	f108 0808 	add.w	r8, r8, #8
  406c5a:	3f10      	subs	r7, #16
  406c5c:	2f10      	cmp	r7, #16
  406c5e:	f340 80ff 	ble.w	406e60 <_vfprintf_r+0xee8>
  406c62:	3601      	adds	r6, #1
  406c64:	3410      	adds	r4, #16
  406c66:	2e07      	cmp	r6, #7
  406c68:	9425      	str	r4, [sp, #148]	; 0x94
  406c6a:	9624      	str	r6, [sp, #144]	; 0x90
  406c6c:	e888 0420 	stmia.w	r8, {r5, sl}
  406c70:	ddf1      	ble.n	406c56 <_vfprintf_r+0xcde>
  406c72:	aa23      	add	r2, sp, #140	; 0x8c
  406c74:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c76:	4658      	mov	r0, fp
  406c78:	f002 ffa8 	bl	409bcc <__sprint_r>
  406c7c:	2800      	cmp	r0, #0
  406c7e:	f47f af05 	bne.w	406a8c <_vfprintf_r+0xb14>
  406c82:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c84:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406c86:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c8a:	e7e6      	b.n	406c5a <_vfprintf_r+0xce2>
  406c8c:	990e      	ldr	r1, [sp, #56]	; 0x38
  406c8e:	460a      	mov	r2, r1
  406c90:	3204      	adds	r2, #4
  406c92:	680c      	ldr	r4, [r1, #0]
  406c94:	920e      	str	r2, [sp, #56]	; 0x38
  406c96:	2500      	movs	r5, #0
  406c98:	f7ff ba7a 	b.w	406190 <_vfprintf_r+0x218>
  406c9c:	681c      	ldr	r4, [r3, #0]
  406c9e:	3304      	adds	r3, #4
  406ca0:	930e      	str	r3, [sp, #56]	; 0x38
  406ca2:	2500      	movs	r5, #0
  406ca4:	e426      	b.n	4064f4 <_vfprintf_r+0x57c>
  406ca6:	3301      	adds	r3, #1
  406ca8:	4434      	add	r4, r6
  406caa:	2b07      	cmp	r3, #7
  406cac:	9425      	str	r4, [sp, #148]	; 0x94
  406cae:	9324      	str	r3, [sp, #144]	; 0x90
  406cb0:	e888 0060 	stmia.w	r8, {r5, r6}
  406cb4:	f77f ab63 	ble.w	40637e <_vfprintf_r+0x406>
  406cb8:	e6d6      	b.n	406a68 <_vfprintf_r+0xaf0>
  406cba:	3204      	adds	r2, #4
  406cbc:	681c      	ldr	r4, [r3, #0]
  406cbe:	920e      	str	r2, [sp, #56]	; 0x38
  406cc0:	2301      	movs	r3, #1
  406cc2:	2500      	movs	r5, #0
  406cc4:	f7ff ba64 	b.w	406190 <_vfprintf_r+0x218>
  406cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406cca:	6814      	ldr	r4, [r2, #0]
  406ccc:	4613      	mov	r3, r2
  406cce:	3304      	adds	r3, #4
  406cd0:	17e5      	asrs	r5, r4, #31
  406cd2:	930e      	str	r3, [sp, #56]	; 0x38
  406cd4:	4622      	mov	r2, r4
  406cd6:	462b      	mov	r3, r5
  406cd8:	e460      	b.n	40659c <_vfprintf_r+0x624>
  406cda:	f8dd b018 	ldr.w	fp, [sp, #24]
  406cde:	f8cd b018 	str.w	fp, [sp, #24]
  406ce2:	af40      	add	r7, sp, #256	; 0x100
  406ce4:	3430      	adds	r4, #48	; 0x30
  406ce6:	2301      	movs	r3, #1
  406ce8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  406cec:	930d      	str	r3, [sp, #52]	; 0x34
  406cee:	f7ff ba6d 	b.w	4061cc <_vfprintf_r+0x254>
  406cf2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406cf6:	f002 f897 	bl	408e28 <__retarget_lock_release_recursive>
  406cfa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406cfe:	e5af      	b.n	406860 <_vfprintf_r+0x8e8>
  406d00:	4614      	mov	r4, r2
  406d02:	3301      	adds	r3, #1
  406d04:	4434      	add	r4, r6
  406d06:	2b07      	cmp	r3, #7
  406d08:	9425      	str	r4, [sp, #148]	; 0x94
  406d0a:	9324      	str	r3, [sp, #144]	; 0x90
  406d0c:	e888 0060 	stmia.w	r8, {r5, r6}
  406d10:	f340 816d 	ble.w	406fee <_vfprintf_r+0x1076>
  406d14:	aa23      	add	r2, sp, #140	; 0x8c
  406d16:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d18:	9808      	ldr	r0, [sp, #32]
  406d1a:	f002 ff57 	bl	409bcc <__sprint_r>
  406d1e:	2800      	cmp	r0, #0
  406d20:	f47f aeb4 	bne.w	406a8c <_vfprintf_r+0xb14>
  406d24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406d26:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406d2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d2e:	4293      	cmp	r3, r2
  406d30:	f280 8158 	bge.w	406fe4 <_vfprintf_r+0x106c>
  406d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406d36:	9814      	ldr	r0, [sp, #80]	; 0x50
  406d38:	9915      	ldr	r1, [sp, #84]	; 0x54
  406d3a:	f8c8 1000 	str.w	r1, [r8]
  406d3e:	3201      	adds	r2, #1
  406d40:	4404      	add	r4, r0
  406d42:	2a07      	cmp	r2, #7
  406d44:	9425      	str	r4, [sp, #148]	; 0x94
  406d46:	f8c8 0004 	str.w	r0, [r8, #4]
  406d4a:	9224      	str	r2, [sp, #144]	; 0x90
  406d4c:	f300 8152 	bgt.w	406ff4 <_vfprintf_r+0x107c>
  406d50:	f108 0808 	add.w	r8, r8, #8
  406d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d56:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d58:	1ad3      	subs	r3, r2, r3
  406d5a:	1a56      	subs	r6, r2, r1
  406d5c:	429e      	cmp	r6, r3
  406d5e:	bfa8      	it	ge
  406d60:	461e      	movge	r6, r3
  406d62:	2e00      	cmp	r6, #0
  406d64:	dd0e      	ble.n	406d84 <_vfprintf_r+0xe0c>
  406d66:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406d68:	f8c8 6004 	str.w	r6, [r8, #4]
  406d6c:	3201      	adds	r2, #1
  406d6e:	440f      	add	r7, r1
  406d70:	4434      	add	r4, r6
  406d72:	2a07      	cmp	r2, #7
  406d74:	f8c8 7000 	str.w	r7, [r8]
  406d78:	9425      	str	r4, [sp, #148]	; 0x94
  406d7a:	9224      	str	r2, [sp, #144]	; 0x90
  406d7c:	f300 823c 	bgt.w	4071f8 <_vfprintf_r+0x1280>
  406d80:	f108 0808 	add.w	r8, r8, #8
  406d84:	2e00      	cmp	r6, #0
  406d86:	bfac      	ite	ge
  406d88:	1b9e      	subge	r6, r3, r6
  406d8a:	461e      	movlt	r6, r3
  406d8c:	2e00      	cmp	r6, #0
  406d8e:	f77f aaf8 	ble.w	406382 <_vfprintf_r+0x40a>
  406d92:	2e10      	cmp	r6, #16
  406d94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d96:	4d3e      	ldr	r5, [pc, #248]	; (406e90 <_vfprintf_r+0xf18>)
  406d98:	dd85      	ble.n	406ca6 <_vfprintf_r+0xd2e>
  406d9a:	2710      	movs	r7, #16
  406d9c:	f8dd a020 	ldr.w	sl, [sp, #32]
  406da0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406da4:	e005      	b.n	406db2 <_vfprintf_r+0xe3a>
  406da6:	f108 0808 	add.w	r8, r8, #8
  406daa:	3e10      	subs	r6, #16
  406dac:	2e10      	cmp	r6, #16
  406dae:	f77f af7a 	ble.w	406ca6 <_vfprintf_r+0xd2e>
  406db2:	3301      	adds	r3, #1
  406db4:	3410      	adds	r4, #16
  406db6:	2b07      	cmp	r3, #7
  406db8:	9425      	str	r4, [sp, #148]	; 0x94
  406dba:	9324      	str	r3, [sp, #144]	; 0x90
  406dbc:	e888 00a0 	stmia.w	r8, {r5, r7}
  406dc0:	ddf1      	ble.n	406da6 <_vfprintf_r+0xe2e>
  406dc2:	aa23      	add	r2, sp, #140	; 0x8c
  406dc4:	4659      	mov	r1, fp
  406dc6:	4650      	mov	r0, sl
  406dc8:	f002 ff00 	bl	409bcc <__sprint_r>
  406dcc:	2800      	cmp	r0, #0
  406dce:	f040 8176 	bne.w	4070be <_vfprintf_r+0x1146>
  406dd2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406dd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406dd6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dda:	e7e6      	b.n	406daa <_vfprintf_r+0xe32>
  406ddc:	9b06      	ldr	r3, [sp, #24]
  406dde:	07d8      	lsls	r0, r3, #31
  406de0:	f53f adff 	bmi.w	4069e2 <_vfprintf_r+0xa6a>
  406de4:	3601      	adds	r6, #1
  406de6:	3401      	adds	r4, #1
  406de8:	2301      	movs	r3, #1
  406dea:	2e07      	cmp	r6, #7
  406dec:	9425      	str	r4, [sp, #148]	; 0x94
  406dee:	9624      	str	r6, [sp, #144]	; 0x90
  406df0:	f8c8 7000 	str.w	r7, [r8]
  406df4:	f8c8 3004 	str.w	r3, [r8, #4]
  406df8:	f77f ae27 	ble.w	406a4a <_vfprintf_r+0xad2>
  406dfc:	aa23      	add	r2, sp, #140	; 0x8c
  406dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e00:	9808      	ldr	r0, [sp, #32]
  406e02:	f002 fee3 	bl	409bcc <__sprint_r>
  406e06:	2800      	cmp	r0, #0
  406e08:	f47f ae40 	bne.w	406a8c <_vfprintf_r+0xb14>
  406e0c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406e0e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406e10:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406e14:	e61b      	b.n	406a4e <_vfprintf_r+0xad6>
  406e16:	aa23      	add	r2, sp, #140	; 0x8c
  406e18:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e1a:	9808      	ldr	r0, [sp, #32]
  406e1c:	f002 fed6 	bl	409bcc <__sprint_r>
  406e20:	2800      	cmp	r0, #0
  406e22:	f47f ae33 	bne.w	406a8c <_vfprintf_r+0xb14>
  406e26:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406e28:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406e2a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406e2e:	e5e6      	b.n	4069fe <_vfprintf_r+0xa86>
  406e30:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406e32:	3507      	adds	r5, #7
  406e34:	f025 0507 	bic.w	r5, r5, #7
  406e38:	e9d5 2300 	ldrd	r2, r3, [r5]
  406e3c:	f105 0108 	add.w	r1, r5, #8
  406e40:	910e      	str	r1, [sp, #56]	; 0x38
  406e42:	4614      	mov	r4, r2
  406e44:	461d      	mov	r5, r3
  406e46:	f7ff bba9 	b.w	40659c <_vfprintf_r+0x624>
  406e4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406e4c:	3507      	adds	r5, #7
  406e4e:	f025 0307 	bic.w	r3, r5, #7
  406e52:	f103 0208 	add.w	r2, r3, #8
  406e56:	920e      	str	r2, [sp, #56]	; 0x38
  406e58:	e9d3 4500 	ldrd	r4, r5, [r3]
  406e5c:	f7ff bb4a 	b.w	4064f4 <_vfprintf_r+0x57c>
  406e60:	3601      	adds	r6, #1
  406e62:	443c      	add	r4, r7
  406e64:	2e07      	cmp	r6, #7
  406e66:	9425      	str	r4, [sp, #148]	; 0x94
  406e68:	9624      	str	r6, [sp, #144]	; 0x90
  406e6a:	e888 00a0 	stmia.w	r8, {r5, r7}
  406e6e:	f77f adec 	ble.w	406a4a <_vfprintf_r+0xad2>
  406e72:	e7c3      	b.n	406dfc <_vfprintf_r+0xe84>
  406e74:	aa23      	add	r2, sp, #140	; 0x8c
  406e76:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e78:	9808      	ldr	r0, [sp, #32]
  406e7a:	f002 fea7 	bl	409bcc <__sprint_r>
  406e7e:	2800      	cmp	r0, #0
  406e80:	f47f ae04 	bne.w	406a8c <_vfprintf_r+0xb14>
  406e84:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406e86:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406e88:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406e8c:	e5c6      	b.n	406a1c <_vfprintf_r+0xaa4>
  406e8e:	bf00      	nop
  406e90:	0040b1e0 	.word	0x0040b1e0
  406e94:	af30      	add	r7, sp, #192	; 0xc0
  406e96:	f7ff b999 	b.w	4061cc <_vfprintf_r+0x254>
  406e9a:	aa23      	add	r2, sp, #140	; 0x8c
  406e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e9e:	9808      	ldr	r0, [sp, #32]
  406ea0:	f002 fe94 	bl	409bcc <__sprint_r>
  406ea4:	2800      	cmp	r0, #0
  406ea6:	f47f adf1 	bne.w	406a8c <_vfprintf_r+0xb14>
  406eaa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406eac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406eb0:	f7ff ba11 	b.w	4062d6 <_vfprintf_r+0x35e>
  406eb4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  406eb8:	4264      	negs	r4, r4
  406eba:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406ebe:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406ec2:	2301      	movs	r3, #1
  406ec4:	f7ff b968 	b.w	406198 <_vfprintf_r+0x220>
  406ec8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  406eca:	4622      	mov	r2, r4
  406ecc:	4620      	mov	r0, r4
  406ece:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406ed0:	4623      	mov	r3, r4
  406ed2:	4621      	mov	r1, r4
  406ed4:	f003 fd7c 	bl	40a9d0 <__aeabi_dcmpun>
  406ed8:	2800      	cmp	r0, #0
  406eda:	f040 828c 	bne.w	4073f6 <_vfprintf_r+0x147e>
  406ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ee0:	3301      	adds	r3, #1
  406ee2:	f026 0320 	bic.w	r3, r6, #32
  406ee6:	930d      	str	r3, [sp, #52]	; 0x34
  406ee8:	f000 8091 	beq.w	40700e <_vfprintf_r+0x1096>
  406eec:	2b47      	cmp	r3, #71	; 0x47
  406eee:	d104      	bne.n	406efa <_vfprintf_r+0xf82>
  406ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ef2:	2b00      	cmp	r3, #0
  406ef4:	bf08      	it	eq
  406ef6:	2301      	moveq	r3, #1
  406ef8:	9309      	str	r3, [sp, #36]	; 0x24
  406efa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  406efe:	9306      	str	r3, [sp, #24]
  406f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406f02:	f1b3 0a00 	subs.w	sl, r3, #0
  406f06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406f08:	9307      	str	r3, [sp, #28]
  406f0a:	bfbb      	ittet	lt
  406f0c:	4653      	movlt	r3, sl
  406f0e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  406f12:	2300      	movge	r3, #0
  406f14:	232d      	movlt	r3, #45	; 0x2d
  406f16:	2e66      	cmp	r6, #102	; 0x66
  406f18:	930f      	str	r3, [sp, #60]	; 0x3c
  406f1a:	f000 817f 	beq.w	40721c <_vfprintf_r+0x12a4>
  406f1e:	2e46      	cmp	r6, #70	; 0x46
  406f20:	f000 81d4 	beq.w	4072cc <_vfprintf_r+0x1354>
  406f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f26:	9a07      	ldr	r2, [sp, #28]
  406f28:	2b45      	cmp	r3, #69	; 0x45
  406f2a:	bf0c      	ite	eq
  406f2c:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  406f2e:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  406f30:	a821      	add	r0, sp, #132	; 0x84
  406f32:	a91e      	add	r1, sp, #120	; 0x78
  406f34:	bf08      	it	eq
  406f36:	1c5d      	addeq	r5, r3, #1
  406f38:	9004      	str	r0, [sp, #16]
  406f3a:	9103      	str	r1, [sp, #12]
  406f3c:	a81d      	add	r0, sp, #116	; 0x74
  406f3e:	2102      	movs	r1, #2
  406f40:	9002      	str	r0, [sp, #8]
  406f42:	4653      	mov	r3, sl
  406f44:	9501      	str	r5, [sp, #4]
  406f46:	9100      	str	r1, [sp, #0]
  406f48:	9808      	ldr	r0, [sp, #32]
  406f4a:	f000 fc0d 	bl	407768 <_dtoa_r>
  406f4e:	2e67      	cmp	r6, #103	; 0x67
  406f50:	4607      	mov	r7, r0
  406f52:	f040 81af 	bne.w	4072b4 <_vfprintf_r+0x133c>
  406f56:	f01b 0f01 	tst.w	fp, #1
  406f5a:	f000 8213 	beq.w	407384 <_vfprintf_r+0x140c>
  406f5e:	197c      	adds	r4, r7, r5
  406f60:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406f62:	9807      	ldr	r0, [sp, #28]
  406f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406f66:	4651      	mov	r1, sl
  406f68:	f003 fd00 	bl	40a96c <__aeabi_dcmpeq>
  406f6c:	2800      	cmp	r0, #0
  406f6e:	f040 8132 	bne.w	4071d6 <_vfprintf_r+0x125e>
  406f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406f74:	42a3      	cmp	r3, r4
  406f76:	d206      	bcs.n	406f86 <_vfprintf_r+0x100e>
  406f78:	2130      	movs	r1, #48	; 0x30
  406f7a:	1c5a      	adds	r2, r3, #1
  406f7c:	9221      	str	r2, [sp, #132]	; 0x84
  406f7e:	7019      	strb	r1, [r3, #0]
  406f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406f82:	429c      	cmp	r4, r3
  406f84:	d8f9      	bhi.n	406f7a <_vfprintf_r+0x1002>
  406f86:	1bdb      	subs	r3, r3, r7
  406f88:	9311      	str	r3, [sp, #68]	; 0x44
  406f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f8c:	2b47      	cmp	r3, #71	; 0x47
  406f8e:	f000 80b9 	beq.w	407104 <_vfprintf_r+0x118c>
  406f92:	2e65      	cmp	r6, #101	; 0x65
  406f94:	f340 8276 	ble.w	407484 <_vfprintf_r+0x150c>
  406f98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406f9a:	9310      	str	r3, [sp, #64]	; 0x40
  406f9c:	2e66      	cmp	r6, #102	; 0x66
  406f9e:	f000 8162 	beq.w	407266 <_vfprintf_r+0x12ee>
  406fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406fa6:	4619      	mov	r1, r3
  406fa8:	4291      	cmp	r1, r2
  406faa:	f300 814f 	bgt.w	40724c <_vfprintf_r+0x12d4>
  406fae:	f01b 0f01 	tst.w	fp, #1
  406fb2:	f040 8209 	bne.w	4073c8 <_vfprintf_r+0x1450>
  406fb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406fba:	9307      	str	r3, [sp, #28]
  406fbc:	920d      	str	r2, [sp, #52]	; 0x34
  406fbe:	2667      	movs	r6, #103	; 0x67
  406fc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406fc2:	2b00      	cmp	r3, #0
  406fc4:	f040 8096 	bne.w	4070f4 <_vfprintf_r+0x117c>
  406fc8:	9309      	str	r3, [sp, #36]	; 0x24
  406fca:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406fce:	f7ff b905 	b.w	4061dc <_vfprintf_r+0x264>
  406fd2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406fd6:	f001 ff27 	bl	408e28 <__retarget_lock_release_recursive>
  406fda:	f04f 33ff 	mov.w	r3, #4294967295
  406fde:	930b      	str	r3, [sp, #44]	; 0x2c
  406fe0:	f7ff ba30 	b.w	406444 <_vfprintf_r+0x4cc>
  406fe4:	9a06      	ldr	r2, [sp, #24]
  406fe6:	07d5      	lsls	r5, r2, #31
  406fe8:	f57f aeb4 	bpl.w	406d54 <_vfprintf_r+0xddc>
  406fec:	e6a2      	b.n	406d34 <_vfprintf_r+0xdbc>
  406fee:	f108 0808 	add.w	r8, r8, #8
  406ff2:	e69a      	b.n	406d2a <_vfprintf_r+0xdb2>
  406ff4:	aa23      	add	r2, sp, #140	; 0x8c
  406ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
  406ff8:	9808      	ldr	r0, [sp, #32]
  406ffa:	f002 fde7 	bl	409bcc <__sprint_r>
  406ffe:	2800      	cmp	r0, #0
  407000:	f47f ad44 	bne.w	406a8c <_vfprintf_r+0xb14>
  407004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407006:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407008:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40700c:	e6a2      	b.n	406d54 <_vfprintf_r+0xddc>
  40700e:	2306      	movs	r3, #6
  407010:	9309      	str	r3, [sp, #36]	; 0x24
  407012:	e772      	b.n	406efa <_vfprintf_r+0xf82>
  407014:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407018:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40701c:	f7ff bbc7 	b.w	4067ae <_vfprintf_r+0x836>
  407020:	aa23      	add	r2, sp, #140	; 0x8c
  407022:	990a      	ldr	r1, [sp, #40]	; 0x28
  407024:	9808      	ldr	r0, [sp, #32]
  407026:	f002 fdd1 	bl	409bcc <__sprint_r>
  40702a:	2800      	cmp	r0, #0
  40702c:	f47f ad2e 	bne.w	406a8c <_vfprintf_r+0xb14>
  407030:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407034:	e437      	b.n	4068a6 <_vfprintf_r+0x92e>
  407036:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407038:	4ab4      	ldr	r2, [pc, #720]	; (40730c <_vfprintf_r+0x1394>)
  40703a:	f8c8 2000 	str.w	r2, [r8]
  40703e:	3301      	adds	r3, #1
  407040:	3401      	adds	r4, #1
  407042:	2201      	movs	r2, #1
  407044:	2b07      	cmp	r3, #7
  407046:	9425      	str	r4, [sp, #148]	; 0x94
  407048:	9324      	str	r3, [sp, #144]	; 0x90
  40704a:	f8c8 2004 	str.w	r2, [r8, #4]
  40704e:	f300 8124 	bgt.w	40729a <_vfprintf_r+0x1322>
  407052:	f108 0808 	add.w	r8, r8, #8
  407056:	b929      	cbnz	r1, 407064 <_vfprintf_r+0x10ec>
  407058:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40705a:	b91b      	cbnz	r3, 407064 <_vfprintf_r+0x10ec>
  40705c:	9b06      	ldr	r3, [sp, #24]
  40705e:	07de      	lsls	r6, r3, #31
  407060:	f57f a98f 	bpl.w	406382 <_vfprintf_r+0x40a>
  407064:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407066:	9814      	ldr	r0, [sp, #80]	; 0x50
  407068:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40706a:	f8c8 2000 	str.w	r2, [r8]
  40706e:	3301      	adds	r3, #1
  407070:	4602      	mov	r2, r0
  407072:	4422      	add	r2, r4
  407074:	2b07      	cmp	r3, #7
  407076:	9225      	str	r2, [sp, #148]	; 0x94
  407078:	f8c8 0004 	str.w	r0, [r8, #4]
  40707c:	9324      	str	r3, [sp, #144]	; 0x90
  40707e:	f300 8169 	bgt.w	407354 <_vfprintf_r+0x13dc>
  407082:	f108 0808 	add.w	r8, r8, #8
  407086:	2900      	cmp	r1, #0
  407088:	f2c0 8136 	blt.w	4072f8 <_vfprintf_r+0x1380>
  40708c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40708e:	f8c8 7000 	str.w	r7, [r8]
  407092:	3301      	adds	r3, #1
  407094:	188c      	adds	r4, r1, r2
  407096:	2b07      	cmp	r3, #7
  407098:	9425      	str	r4, [sp, #148]	; 0x94
  40709a:	9324      	str	r3, [sp, #144]	; 0x90
  40709c:	f8c8 1004 	str.w	r1, [r8, #4]
  4070a0:	f77f a96d 	ble.w	40637e <_vfprintf_r+0x406>
  4070a4:	e4e0      	b.n	406a68 <_vfprintf_r+0xaf0>
  4070a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4070a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4070aa:	6813      	ldr	r3, [r2, #0]
  4070ac:	17cd      	asrs	r5, r1, #31
  4070ae:	4608      	mov	r0, r1
  4070b0:	3204      	adds	r2, #4
  4070b2:	4629      	mov	r1, r5
  4070b4:	920e      	str	r2, [sp, #56]	; 0x38
  4070b6:	e9c3 0100 	strd	r0, r1, [r3]
  4070ba:	f7fe bfa9 	b.w	406010 <_vfprintf_r+0x98>
  4070be:	46da      	mov	sl, fp
  4070c0:	f7ff bbc4 	b.w	40684c <_vfprintf_r+0x8d4>
  4070c4:	aa23      	add	r2, sp, #140	; 0x8c
  4070c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4070c8:	9808      	ldr	r0, [sp, #32]
  4070ca:	f002 fd7f 	bl	409bcc <__sprint_r>
  4070ce:	2800      	cmp	r0, #0
  4070d0:	f47f acdc 	bne.w	406a8c <_vfprintf_r+0xb14>
  4070d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4070d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4070da:	f7ff bbfd 	b.w	4068d8 <_vfprintf_r+0x960>
  4070de:	4638      	mov	r0, r7
  4070e0:	9409      	str	r4, [sp, #36]	; 0x24
  4070e2:	f7fd fcad 	bl	404a40 <strlen>
  4070e6:	950e      	str	r5, [sp, #56]	; 0x38
  4070e8:	900d      	str	r0, [sp, #52]	; 0x34
  4070ea:	f8cd b018 	str.w	fp, [sp, #24]
  4070ee:	4603      	mov	r3, r0
  4070f0:	f7ff ba36 	b.w	406560 <_vfprintf_r+0x5e8>
  4070f4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4070f8:	2300      	movs	r3, #0
  4070fa:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4070fe:	9309      	str	r3, [sp, #36]	; 0x24
  407100:	f7ff b86f 	b.w	4061e2 <_vfprintf_r+0x26a>
  407104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407106:	9310      	str	r3, [sp, #64]	; 0x40
  407108:	461a      	mov	r2, r3
  40710a:	3303      	adds	r3, #3
  40710c:	db04      	blt.n	407118 <_vfprintf_r+0x11a0>
  40710e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407110:	4619      	mov	r1, r3
  407112:	4291      	cmp	r1, r2
  407114:	f6bf af45 	bge.w	406fa2 <_vfprintf_r+0x102a>
  407118:	3e02      	subs	r6, #2
  40711a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40711c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  407120:	3b01      	subs	r3, #1
  407122:	2b00      	cmp	r3, #0
  407124:	931d      	str	r3, [sp, #116]	; 0x74
  407126:	bfbd      	ittte	lt
  407128:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40712a:	f1c3 0301 	rsblt	r3, r3, #1
  40712e:	222d      	movlt	r2, #45	; 0x2d
  407130:	222b      	movge	r2, #43	; 0x2b
  407132:	2b09      	cmp	r3, #9
  407134:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  407138:	f340 813e 	ble.w	4073b8 <_vfprintf_r+0x1440>
  40713c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  407140:	4620      	mov	r0, r4
  407142:	4d73      	ldr	r5, [pc, #460]	; (407310 <_vfprintf_r+0x1398>)
  407144:	e000      	b.n	407148 <_vfprintf_r+0x11d0>
  407146:	4610      	mov	r0, r2
  407148:	fb85 1203 	smull	r1, r2, r5, r3
  40714c:	17d9      	asrs	r1, r3, #31
  40714e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407152:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407156:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40715a:	3230      	adds	r2, #48	; 0x30
  40715c:	2909      	cmp	r1, #9
  40715e:	f800 2c01 	strb.w	r2, [r0, #-1]
  407162:	460b      	mov	r3, r1
  407164:	f100 32ff 	add.w	r2, r0, #4294967295
  407168:	dced      	bgt.n	407146 <_vfprintf_r+0x11ce>
  40716a:	3330      	adds	r3, #48	; 0x30
  40716c:	3802      	subs	r0, #2
  40716e:	b2d9      	uxtb	r1, r3
  407170:	4284      	cmp	r4, r0
  407172:	f802 1c01 	strb.w	r1, [r2, #-1]
  407176:	f240 8190 	bls.w	40749a <_vfprintf_r+0x1522>
  40717a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  40717e:	4613      	mov	r3, r2
  407180:	e001      	b.n	407186 <_vfprintf_r+0x120e>
  407182:	f813 1b01 	ldrb.w	r1, [r3], #1
  407186:	f800 1b01 	strb.w	r1, [r0], #1
  40718a:	42a3      	cmp	r3, r4
  40718c:	d1f9      	bne.n	407182 <_vfprintf_r+0x120a>
  40718e:	3301      	adds	r3, #1
  407190:	1a9b      	subs	r3, r3, r2
  407192:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407196:	4413      	add	r3, r2
  407198:	aa1f      	add	r2, sp, #124	; 0x7c
  40719a:	1a9b      	subs	r3, r3, r2
  40719c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40719e:	9319      	str	r3, [sp, #100]	; 0x64
  4071a0:	2a01      	cmp	r2, #1
  4071a2:	4413      	add	r3, r2
  4071a4:	930d      	str	r3, [sp, #52]	; 0x34
  4071a6:	f340 8145 	ble.w	407434 <_vfprintf_r+0x14bc>
  4071aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4071ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4071ae:	4413      	add	r3, r2
  4071b0:	930d      	str	r3, [sp, #52]	; 0x34
  4071b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4071b6:	9307      	str	r3, [sp, #28]
  4071b8:	2300      	movs	r3, #0
  4071ba:	9310      	str	r3, [sp, #64]	; 0x40
  4071bc:	e700      	b.n	406fc0 <_vfprintf_r+0x1048>
  4071be:	aa23      	add	r2, sp, #140	; 0x8c
  4071c0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4071c2:	9808      	ldr	r0, [sp, #32]
  4071c4:	f002 fd02 	bl	409bcc <__sprint_r>
  4071c8:	2800      	cmp	r0, #0
  4071ca:	f47f ac5f 	bne.w	406a8c <_vfprintf_r+0xb14>
  4071ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4071d0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071d4:	e4d1      	b.n	406b7a <_vfprintf_r+0xc02>
  4071d6:	4623      	mov	r3, r4
  4071d8:	e6d5      	b.n	406f86 <_vfprintf_r+0x100e>
  4071da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071dc:	9710      	str	r7, [sp, #64]	; 0x40
  4071de:	2b06      	cmp	r3, #6
  4071e0:	bf28      	it	cs
  4071e2:	2306      	movcs	r3, #6
  4071e4:	9709      	str	r7, [sp, #36]	; 0x24
  4071e6:	46ba      	mov	sl, r7
  4071e8:	9307      	str	r3, [sp, #28]
  4071ea:	950e      	str	r5, [sp, #56]	; 0x38
  4071ec:	f8cd b018 	str.w	fp, [sp, #24]
  4071f0:	930d      	str	r3, [sp, #52]	; 0x34
  4071f2:	4f48      	ldr	r7, [pc, #288]	; (407314 <_vfprintf_r+0x139c>)
  4071f4:	f7fe bff2 	b.w	4061dc <_vfprintf_r+0x264>
  4071f8:	aa23      	add	r2, sp, #140	; 0x8c
  4071fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4071fc:	9808      	ldr	r0, [sp, #32]
  4071fe:	f002 fce5 	bl	409bcc <__sprint_r>
  407202:	2800      	cmp	r0, #0
  407204:	f47f ac42 	bne.w	406a8c <_vfprintf_r+0xb14>
  407208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40720a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40720c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40720e:	1ad3      	subs	r3, r2, r3
  407210:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407214:	e5b6      	b.n	406d84 <_vfprintf_r+0xe0c>
  407216:	46a2      	mov	sl, r4
  407218:	f7ff bb18 	b.w	40684c <_vfprintf_r+0x8d4>
  40721c:	a821      	add	r0, sp, #132	; 0x84
  40721e:	a91e      	add	r1, sp, #120	; 0x78
  407220:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407222:	9004      	str	r0, [sp, #16]
  407224:	9103      	str	r1, [sp, #12]
  407226:	a81d      	add	r0, sp, #116	; 0x74
  407228:	2103      	movs	r1, #3
  40722a:	9002      	str	r0, [sp, #8]
  40722c:	9a07      	ldr	r2, [sp, #28]
  40722e:	9501      	str	r5, [sp, #4]
  407230:	4653      	mov	r3, sl
  407232:	9100      	str	r1, [sp, #0]
  407234:	9808      	ldr	r0, [sp, #32]
  407236:	f000 fa97 	bl	407768 <_dtoa_r>
  40723a:	4607      	mov	r7, r0
  40723c:	1944      	adds	r4, r0, r5
  40723e:	783b      	ldrb	r3, [r7, #0]
  407240:	2b30      	cmp	r3, #48	; 0x30
  407242:	f000 80ca 	beq.w	4073da <_vfprintf_r+0x1462>
  407246:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407248:	442c      	add	r4, r5
  40724a:	e689      	b.n	406f60 <_vfprintf_r+0xfe8>
  40724c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40724e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407250:	4413      	add	r3, r2
  407252:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407254:	930d      	str	r3, [sp, #52]	; 0x34
  407256:	2a00      	cmp	r2, #0
  407258:	f340 80e4 	ble.w	407424 <_vfprintf_r+0x14ac>
  40725c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407260:	9307      	str	r3, [sp, #28]
  407262:	2667      	movs	r6, #103	; 0x67
  407264:	e6ac      	b.n	406fc0 <_vfprintf_r+0x1048>
  407266:	2b00      	cmp	r3, #0
  407268:	f340 80fb 	ble.w	407462 <_vfprintf_r+0x14ea>
  40726c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40726e:	2a00      	cmp	r2, #0
  407270:	f040 80ce 	bne.w	407410 <_vfprintf_r+0x1498>
  407274:	f01b 0f01 	tst.w	fp, #1
  407278:	f040 80ca 	bne.w	407410 <_vfprintf_r+0x1498>
  40727c:	9307      	str	r3, [sp, #28]
  40727e:	930d      	str	r3, [sp, #52]	; 0x34
  407280:	e69e      	b.n	406fc0 <_vfprintf_r+0x1048>
  407282:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407284:	9307      	str	r3, [sp, #28]
  407286:	930d      	str	r3, [sp, #52]	; 0x34
  407288:	9009      	str	r0, [sp, #36]	; 0x24
  40728a:	950e      	str	r5, [sp, #56]	; 0x38
  40728c:	f8cd b018 	str.w	fp, [sp, #24]
  407290:	9010      	str	r0, [sp, #64]	; 0x40
  407292:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407296:	f7fe bfa1 	b.w	4061dc <_vfprintf_r+0x264>
  40729a:	aa23      	add	r2, sp, #140	; 0x8c
  40729c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40729e:	9808      	ldr	r0, [sp, #32]
  4072a0:	f002 fc94 	bl	409bcc <__sprint_r>
  4072a4:	2800      	cmp	r0, #0
  4072a6:	f47f abf1 	bne.w	406a8c <_vfprintf_r+0xb14>
  4072aa:	991d      	ldr	r1, [sp, #116]	; 0x74
  4072ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4072ae:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4072b2:	e6d0      	b.n	407056 <_vfprintf_r+0x10de>
  4072b4:	2e47      	cmp	r6, #71	; 0x47
  4072b6:	f47f ae52 	bne.w	406f5e <_vfprintf_r+0xfe6>
  4072ba:	f01b 0f01 	tst.w	fp, #1
  4072be:	f000 80da 	beq.w	407476 <_vfprintf_r+0x14fe>
  4072c2:	2e46      	cmp	r6, #70	; 0x46
  4072c4:	eb07 0405 	add.w	r4, r7, r5
  4072c8:	d0b9      	beq.n	40723e <_vfprintf_r+0x12c6>
  4072ca:	e649      	b.n	406f60 <_vfprintf_r+0xfe8>
  4072cc:	a821      	add	r0, sp, #132	; 0x84
  4072ce:	a91e      	add	r1, sp, #120	; 0x78
  4072d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4072d2:	9004      	str	r0, [sp, #16]
  4072d4:	9103      	str	r1, [sp, #12]
  4072d6:	a81d      	add	r0, sp, #116	; 0x74
  4072d8:	2103      	movs	r1, #3
  4072da:	9002      	str	r0, [sp, #8]
  4072dc:	9a07      	ldr	r2, [sp, #28]
  4072de:	9401      	str	r4, [sp, #4]
  4072e0:	4653      	mov	r3, sl
  4072e2:	9100      	str	r1, [sp, #0]
  4072e4:	9808      	ldr	r0, [sp, #32]
  4072e6:	f000 fa3f 	bl	407768 <_dtoa_r>
  4072ea:	4625      	mov	r5, r4
  4072ec:	4607      	mov	r7, r0
  4072ee:	e7e8      	b.n	4072c2 <_vfprintf_r+0x134a>
  4072f0:	2300      	movs	r3, #0
  4072f2:	9309      	str	r3, [sp, #36]	; 0x24
  4072f4:	f7fe bec1 	b.w	40607a <_vfprintf_r+0x102>
  4072f8:	424e      	negs	r6, r1
  4072fa:	3110      	adds	r1, #16
  4072fc:	4d06      	ldr	r5, [pc, #24]	; (407318 <_vfprintf_r+0x13a0>)
  4072fe:	da43      	bge.n	407388 <_vfprintf_r+0x1410>
  407300:	2410      	movs	r4, #16
  407302:	f8dd a020 	ldr.w	sl, [sp, #32]
  407306:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40730a:	e00c      	b.n	407326 <_vfprintf_r+0x13ae>
  40730c:	0040b1ac 	.word	0x0040b1ac
  407310:	66666667 	.word	0x66666667
  407314:	0040b1a4 	.word	0x0040b1a4
  407318:	0040b1e0 	.word	0x0040b1e0
  40731c:	f108 0808 	add.w	r8, r8, #8
  407320:	3e10      	subs	r6, #16
  407322:	2e10      	cmp	r6, #16
  407324:	dd30      	ble.n	407388 <_vfprintf_r+0x1410>
  407326:	3301      	adds	r3, #1
  407328:	3210      	adds	r2, #16
  40732a:	2b07      	cmp	r3, #7
  40732c:	9225      	str	r2, [sp, #148]	; 0x94
  40732e:	9324      	str	r3, [sp, #144]	; 0x90
  407330:	f8c8 5000 	str.w	r5, [r8]
  407334:	f8c8 4004 	str.w	r4, [r8, #4]
  407338:	ddf0      	ble.n	40731c <_vfprintf_r+0x13a4>
  40733a:	aa23      	add	r2, sp, #140	; 0x8c
  40733c:	4659      	mov	r1, fp
  40733e:	4650      	mov	r0, sl
  407340:	f002 fc44 	bl	409bcc <__sprint_r>
  407344:	2800      	cmp	r0, #0
  407346:	f47f aeba 	bne.w	4070be <_vfprintf_r+0x1146>
  40734a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40734c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40734e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407352:	e7e5      	b.n	407320 <_vfprintf_r+0x13a8>
  407354:	aa23      	add	r2, sp, #140	; 0x8c
  407356:	990a      	ldr	r1, [sp, #40]	; 0x28
  407358:	9808      	ldr	r0, [sp, #32]
  40735a:	f002 fc37 	bl	409bcc <__sprint_r>
  40735e:	2800      	cmp	r0, #0
  407360:	f47f ab94 	bne.w	406a8c <_vfprintf_r+0xb14>
  407364:	991d      	ldr	r1, [sp, #116]	; 0x74
  407366:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407368:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40736a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40736e:	e68a      	b.n	407086 <_vfprintf_r+0x110e>
  407370:	9808      	ldr	r0, [sp, #32]
  407372:	aa23      	add	r2, sp, #140	; 0x8c
  407374:	4651      	mov	r1, sl
  407376:	f002 fc29 	bl	409bcc <__sprint_r>
  40737a:	2800      	cmp	r0, #0
  40737c:	f43f aa64 	beq.w	406848 <_vfprintf_r+0x8d0>
  407380:	f7ff ba64 	b.w	40684c <_vfprintf_r+0x8d4>
  407384:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407386:	e5fe      	b.n	406f86 <_vfprintf_r+0x100e>
  407388:	3301      	adds	r3, #1
  40738a:	4432      	add	r2, r6
  40738c:	2b07      	cmp	r3, #7
  40738e:	e888 0060 	stmia.w	r8, {r5, r6}
  407392:	9225      	str	r2, [sp, #148]	; 0x94
  407394:	9324      	str	r3, [sp, #144]	; 0x90
  407396:	f108 0808 	add.w	r8, r8, #8
  40739a:	f77f ae77 	ble.w	40708c <_vfprintf_r+0x1114>
  40739e:	aa23      	add	r2, sp, #140	; 0x8c
  4073a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4073a2:	9808      	ldr	r0, [sp, #32]
  4073a4:	f002 fc12 	bl	409bcc <__sprint_r>
  4073a8:	2800      	cmp	r0, #0
  4073aa:	f47f ab6f 	bne.w	406a8c <_vfprintf_r+0xb14>
  4073ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4073b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073b2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4073b6:	e669      	b.n	40708c <_vfprintf_r+0x1114>
  4073b8:	3330      	adds	r3, #48	; 0x30
  4073ba:	2230      	movs	r2, #48	; 0x30
  4073bc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4073c0:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4073c4:	ab20      	add	r3, sp, #128	; 0x80
  4073c6:	e6e7      	b.n	407198 <_vfprintf_r+0x1220>
  4073c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4073ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4073cc:	4413      	add	r3, r2
  4073ce:	930d      	str	r3, [sp, #52]	; 0x34
  4073d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4073d4:	9307      	str	r3, [sp, #28]
  4073d6:	2667      	movs	r6, #103	; 0x67
  4073d8:	e5f2      	b.n	406fc0 <_vfprintf_r+0x1048>
  4073da:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4073dc:	9807      	ldr	r0, [sp, #28]
  4073de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4073e0:	4651      	mov	r1, sl
  4073e2:	f003 fac3 	bl	40a96c <__aeabi_dcmpeq>
  4073e6:	2800      	cmp	r0, #0
  4073e8:	f47f af2d 	bne.w	407246 <_vfprintf_r+0x12ce>
  4073ec:	f1c5 0501 	rsb	r5, r5, #1
  4073f0:	951d      	str	r5, [sp, #116]	; 0x74
  4073f2:	442c      	add	r4, r5
  4073f4:	e5b4      	b.n	406f60 <_vfprintf_r+0xfe8>
  4073f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4073f8:	4f33      	ldr	r7, [pc, #204]	; (4074c8 <_vfprintf_r+0x1550>)
  4073fa:	2b00      	cmp	r3, #0
  4073fc:	bfb6      	itet	lt
  4073fe:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  407402:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  407406:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40740a:	4b30      	ldr	r3, [pc, #192]	; (4074cc <_vfprintf_r+0x1554>)
  40740c:	f7ff b9d1 	b.w	4067b2 <_vfprintf_r+0x83a>
  407410:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407412:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407414:	4413      	add	r3, r2
  407416:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407418:	441a      	add	r2, r3
  40741a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40741e:	920d      	str	r2, [sp, #52]	; 0x34
  407420:	9307      	str	r3, [sp, #28]
  407422:	e5cd      	b.n	406fc0 <_vfprintf_r+0x1048>
  407424:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407428:	f1c3 0301 	rsb	r3, r3, #1
  40742c:	441a      	add	r2, r3
  40742e:	4613      	mov	r3, r2
  407430:	920d      	str	r2, [sp, #52]	; 0x34
  407432:	e713      	b.n	40725c <_vfprintf_r+0x12e4>
  407434:	f01b 0301 	ands.w	r3, fp, #1
  407438:	9310      	str	r3, [sp, #64]	; 0x40
  40743a:	f47f aeb6 	bne.w	4071aa <_vfprintf_r+0x1232>
  40743e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407444:	9307      	str	r3, [sp, #28]
  407446:	e5bb      	b.n	406fc0 <_vfprintf_r+0x1048>
  407448:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40744a:	f899 6001 	ldrb.w	r6, [r9, #1]
  40744e:	6823      	ldr	r3, [r4, #0]
  407450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  407454:	9309      	str	r3, [sp, #36]	; 0x24
  407456:	4623      	mov	r3, r4
  407458:	3304      	adds	r3, #4
  40745a:	4681      	mov	r9, r0
  40745c:	930e      	str	r3, [sp, #56]	; 0x38
  40745e:	f7fe be0a 	b.w	406076 <_vfprintf_r+0xfe>
  407462:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407464:	b913      	cbnz	r3, 40746c <_vfprintf_r+0x14f4>
  407466:	f01b 0f01 	tst.w	fp, #1
  40746a:	d002      	beq.n	407472 <_vfprintf_r+0x14fa>
  40746c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40746e:	3301      	adds	r3, #1
  407470:	e7d1      	b.n	407416 <_vfprintf_r+0x149e>
  407472:	2301      	movs	r3, #1
  407474:	e702      	b.n	40727c <_vfprintf_r+0x1304>
  407476:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407478:	1bdb      	subs	r3, r3, r7
  40747a:	9311      	str	r3, [sp, #68]	; 0x44
  40747c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40747e:	2b47      	cmp	r3, #71	; 0x47
  407480:	f43f ae40 	beq.w	407104 <_vfprintf_r+0x118c>
  407484:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407486:	9310      	str	r3, [sp, #64]	; 0x40
  407488:	e647      	b.n	40711a <_vfprintf_r+0x11a2>
  40748a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40748e:	f7ff b81d 	b.w	4064cc <_vfprintf_r+0x554>
  407492:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407496:	f7ff b918 	b.w	4066ca <_vfprintf_r+0x752>
  40749a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40749e:	e67b      	b.n	407198 <_vfprintf_r+0x1220>
  4074a0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4074a4:	f7ff b866 	b.w	406574 <_vfprintf_r+0x5fc>
  4074a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4074ac:	f7ff b9ac 	b.w	406808 <_vfprintf_r+0x890>
  4074b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4074b4:	f7ff b934 	b.w	406720 <_vfprintf_r+0x7a8>
  4074b8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4074bc:	f7ff b8b0 	b.w	406620 <_vfprintf_r+0x6a8>
  4074c0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4074c4:	f7ff b945 	b.w	406752 <_vfprintf_r+0x7da>
  4074c8:	0040b178 	.word	0x0040b178
  4074cc:	0040b174 	.word	0x0040b174

004074d0 <__sbprintf>:
  4074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4074d4:	460c      	mov	r4, r1
  4074d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4074da:	8989      	ldrh	r1, [r1, #12]
  4074dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4074de:	89e5      	ldrh	r5, [r4, #14]
  4074e0:	9619      	str	r6, [sp, #100]	; 0x64
  4074e2:	f021 0102 	bic.w	r1, r1, #2
  4074e6:	4606      	mov	r6, r0
  4074e8:	69e0      	ldr	r0, [r4, #28]
  4074ea:	f8ad 100c 	strh.w	r1, [sp, #12]
  4074ee:	4617      	mov	r7, r2
  4074f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4074f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4074f6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4074fa:	4698      	mov	r8, r3
  4074fc:	ad1a      	add	r5, sp, #104	; 0x68
  4074fe:	2300      	movs	r3, #0
  407500:	9007      	str	r0, [sp, #28]
  407502:	a816      	add	r0, sp, #88	; 0x58
  407504:	9209      	str	r2, [sp, #36]	; 0x24
  407506:	9306      	str	r3, [sp, #24]
  407508:	9500      	str	r5, [sp, #0]
  40750a:	9504      	str	r5, [sp, #16]
  40750c:	9102      	str	r1, [sp, #8]
  40750e:	9105      	str	r1, [sp, #20]
  407510:	f001 fc84 	bl	408e1c <__retarget_lock_init_recursive>
  407514:	4643      	mov	r3, r8
  407516:	463a      	mov	r2, r7
  407518:	4669      	mov	r1, sp
  40751a:	4630      	mov	r0, r6
  40751c:	f7fe fd2c 	bl	405f78 <_vfprintf_r>
  407520:	1e05      	subs	r5, r0, #0
  407522:	db07      	blt.n	407534 <__sbprintf+0x64>
  407524:	4630      	mov	r0, r6
  407526:	4669      	mov	r1, sp
  407528:	f001 f8e8 	bl	4086fc <_fflush_r>
  40752c:	2800      	cmp	r0, #0
  40752e:	bf18      	it	ne
  407530:	f04f 35ff 	movne.w	r5, #4294967295
  407534:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407538:	065b      	lsls	r3, r3, #25
  40753a:	d503      	bpl.n	407544 <__sbprintf+0x74>
  40753c:	89a3      	ldrh	r3, [r4, #12]
  40753e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407542:	81a3      	strh	r3, [r4, #12]
  407544:	9816      	ldr	r0, [sp, #88]	; 0x58
  407546:	f001 fc6b 	bl	408e20 <__retarget_lock_close_recursive>
  40754a:	4628      	mov	r0, r5
  40754c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407554 <__swsetup_r>:
  407554:	b538      	push	{r3, r4, r5, lr}
  407556:	4b30      	ldr	r3, [pc, #192]	; (407618 <__swsetup_r+0xc4>)
  407558:	681b      	ldr	r3, [r3, #0]
  40755a:	4605      	mov	r5, r0
  40755c:	460c      	mov	r4, r1
  40755e:	b113      	cbz	r3, 407566 <__swsetup_r+0x12>
  407560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407562:	2a00      	cmp	r2, #0
  407564:	d038      	beq.n	4075d8 <__swsetup_r+0x84>
  407566:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40756a:	b293      	uxth	r3, r2
  40756c:	0718      	lsls	r0, r3, #28
  40756e:	d50c      	bpl.n	40758a <__swsetup_r+0x36>
  407570:	6920      	ldr	r0, [r4, #16]
  407572:	b1a8      	cbz	r0, 4075a0 <__swsetup_r+0x4c>
  407574:	f013 0201 	ands.w	r2, r3, #1
  407578:	d01e      	beq.n	4075b8 <__swsetup_r+0x64>
  40757a:	6963      	ldr	r3, [r4, #20]
  40757c:	2200      	movs	r2, #0
  40757e:	425b      	negs	r3, r3
  407580:	61a3      	str	r3, [r4, #24]
  407582:	60a2      	str	r2, [r4, #8]
  407584:	b1f0      	cbz	r0, 4075c4 <__swsetup_r+0x70>
  407586:	2000      	movs	r0, #0
  407588:	bd38      	pop	{r3, r4, r5, pc}
  40758a:	06d9      	lsls	r1, r3, #27
  40758c:	d53c      	bpl.n	407608 <__swsetup_r+0xb4>
  40758e:	0758      	lsls	r0, r3, #29
  407590:	d426      	bmi.n	4075e0 <__swsetup_r+0x8c>
  407592:	6920      	ldr	r0, [r4, #16]
  407594:	f042 0308 	orr.w	r3, r2, #8
  407598:	81a3      	strh	r3, [r4, #12]
  40759a:	b29b      	uxth	r3, r3
  40759c:	2800      	cmp	r0, #0
  40759e:	d1e9      	bne.n	407574 <__swsetup_r+0x20>
  4075a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4075a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4075a8:	d0e4      	beq.n	407574 <__swsetup_r+0x20>
  4075aa:	4628      	mov	r0, r5
  4075ac:	4621      	mov	r1, r4
  4075ae:	f001 fc6b 	bl	408e88 <__smakebuf_r>
  4075b2:	89a3      	ldrh	r3, [r4, #12]
  4075b4:	6920      	ldr	r0, [r4, #16]
  4075b6:	e7dd      	b.n	407574 <__swsetup_r+0x20>
  4075b8:	0799      	lsls	r1, r3, #30
  4075ba:	bf58      	it	pl
  4075bc:	6962      	ldrpl	r2, [r4, #20]
  4075be:	60a2      	str	r2, [r4, #8]
  4075c0:	2800      	cmp	r0, #0
  4075c2:	d1e0      	bne.n	407586 <__swsetup_r+0x32>
  4075c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075c8:	061a      	lsls	r2, r3, #24
  4075ca:	d5dd      	bpl.n	407588 <__swsetup_r+0x34>
  4075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4075d0:	81a3      	strh	r3, [r4, #12]
  4075d2:	f04f 30ff 	mov.w	r0, #4294967295
  4075d6:	bd38      	pop	{r3, r4, r5, pc}
  4075d8:	4618      	mov	r0, r3
  4075da:	f001 f8e7 	bl	4087ac <__sinit>
  4075de:	e7c2      	b.n	407566 <__swsetup_r+0x12>
  4075e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4075e2:	b151      	cbz	r1, 4075fa <__swsetup_r+0xa6>
  4075e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4075e8:	4299      	cmp	r1, r3
  4075ea:	d004      	beq.n	4075f6 <__swsetup_r+0xa2>
  4075ec:	4628      	mov	r0, r5
  4075ee:	f001 f97f 	bl	4088f0 <_free_r>
  4075f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4075f6:	2300      	movs	r3, #0
  4075f8:	6323      	str	r3, [r4, #48]	; 0x30
  4075fa:	2300      	movs	r3, #0
  4075fc:	6920      	ldr	r0, [r4, #16]
  4075fe:	6063      	str	r3, [r4, #4]
  407600:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407604:	6020      	str	r0, [r4, #0]
  407606:	e7c5      	b.n	407594 <__swsetup_r+0x40>
  407608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40760c:	2309      	movs	r3, #9
  40760e:	602b      	str	r3, [r5, #0]
  407610:	f04f 30ff 	mov.w	r0, #4294967295
  407614:	81a2      	strh	r2, [r4, #12]
  407616:	bd38      	pop	{r3, r4, r5, pc}
  407618:	20400028 	.word	0x20400028

0040761c <register_fini>:
  40761c:	4b02      	ldr	r3, [pc, #8]	; (407628 <register_fini+0xc>)
  40761e:	b113      	cbz	r3, 407626 <register_fini+0xa>
  407620:	4802      	ldr	r0, [pc, #8]	; (40762c <register_fini+0x10>)
  407622:	f000 b805 	b.w	407630 <atexit>
  407626:	4770      	bx	lr
  407628:	00000000 	.word	0x00000000
  40762c:	0040881d 	.word	0x0040881d

00407630 <atexit>:
  407630:	2300      	movs	r3, #0
  407632:	4601      	mov	r1, r0
  407634:	461a      	mov	r2, r3
  407636:	4618      	mov	r0, r3
  407638:	f002 bae8 	b.w	409c0c <__register_exitproc>

0040763c <quorem>:
  40763c:	6902      	ldr	r2, [r0, #16]
  40763e:	690b      	ldr	r3, [r1, #16]
  407640:	4293      	cmp	r3, r2
  407642:	f300 808d 	bgt.w	407760 <quorem+0x124>
  407646:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40764a:	f103 38ff 	add.w	r8, r3, #4294967295
  40764e:	f101 0714 	add.w	r7, r1, #20
  407652:	f100 0b14 	add.w	fp, r0, #20
  407656:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40765a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40765e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407662:	b083      	sub	sp, #12
  407664:	3201      	adds	r2, #1
  407666:	fbb3 f9f2 	udiv	r9, r3, r2
  40766a:	eb0b 0304 	add.w	r3, fp, r4
  40766e:	9400      	str	r4, [sp, #0]
  407670:	eb07 0a04 	add.w	sl, r7, r4
  407674:	9301      	str	r3, [sp, #4]
  407676:	f1b9 0f00 	cmp.w	r9, #0
  40767a:	d039      	beq.n	4076f0 <quorem+0xb4>
  40767c:	2500      	movs	r5, #0
  40767e:	462e      	mov	r6, r5
  407680:	46bc      	mov	ip, r7
  407682:	46de      	mov	lr, fp
  407684:	f85c 4b04 	ldr.w	r4, [ip], #4
  407688:	f8de 3000 	ldr.w	r3, [lr]
  40768c:	b2a2      	uxth	r2, r4
  40768e:	fb09 5502 	mla	r5, r9, r2, r5
  407692:	0c22      	lsrs	r2, r4, #16
  407694:	0c2c      	lsrs	r4, r5, #16
  407696:	fb09 4202 	mla	r2, r9, r2, r4
  40769a:	b2ad      	uxth	r5, r5
  40769c:	1b75      	subs	r5, r6, r5
  40769e:	b296      	uxth	r6, r2
  4076a0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4076a4:	fa15 f383 	uxtah	r3, r5, r3
  4076a8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4076ac:	b29b      	uxth	r3, r3
  4076ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4076b2:	45e2      	cmp	sl, ip
  4076b4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4076b8:	f84e 3b04 	str.w	r3, [lr], #4
  4076bc:	ea4f 4626 	mov.w	r6, r6, asr #16
  4076c0:	d2e0      	bcs.n	407684 <quorem+0x48>
  4076c2:	9b00      	ldr	r3, [sp, #0]
  4076c4:	f85b 3003 	ldr.w	r3, [fp, r3]
  4076c8:	b993      	cbnz	r3, 4076f0 <quorem+0xb4>
  4076ca:	9c01      	ldr	r4, [sp, #4]
  4076cc:	1f23      	subs	r3, r4, #4
  4076ce:	459b      	cmp	fp, r3
  4076d0:	d20c      	bcs.n	4076ec <quorem+0xb0>
  4076d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4076d6:	b94b      	cbnz	r3, 4076ec <quorem+0xb0>
  4076d8:	f1a4 0308 	sub.w	r3, r4, #8
  4076dc:	e002      	b.n	4076e4 <quorem+0xa8>
  4076de:	681a      	ldr	r2, [r3, #0]
  4076e0:	3b04      	subs	r3, #4
  4076e2:	b91a      	cbnz	r2, 4076ec <quorem+0xb0>
  4076e4:	459b      	cmp	fp, r3
  4076e6:	f108 38ff 	add.w	r8, r8, #4294967295
  4076ea:	d3f8      	bcc.n	4076de <quorem+0xa2>
  4076ec:	f8c0 8010 	str.w	r8, [r0, #16]
  4076f0:	4604      	mov	r4, r0
  4076f2:	f001 fec7 	bl	409484 <__mcmp>
  4076f6:	2800      	cmp	r0, #0
  4076f8:	db2e      	blt.n	407758 <quorem+0x11c>
  4076fa:	f109 0901 	add.w	r9, r9, #1
  4076fe:	465d      	mov	r5, fp
  407700:	2300      	movs	r3, #0
  407702:	f857 1b04 	ldr.w	r1, [r7], #4
  407706:	6828      	ldr	r0, [r5, #0]
  407708:	b28a      	uxth	r2, r1
  40770a:	1a9a      	subs	r2, r3, r2
  40770c:	0c0b      	lsrs	r3, r1, #16
  40770e:	fa12 f280 	uxtah	r2, r2, r0
  407712:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407716:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40771a:	b292      	uxth	r2, r2
  40771c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407720:	45ba      	cmp	sl, r7
  407722:	f845 2b04 	str.w	r2, [r5], #4
  407726:	ea4f 4323 	mov.w	r3, r3, asr #16
  40772a:	d2ea      	bcs.n	407702 <quorem+0xc6>
  40772c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407730:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407734:	b982      	cbnz	r2, 407758 <quorem+0x11c>
  407736:	1f1a      	subs	r2, r3, #4
  407738:	4593      	cmp	fp, r2
  40773a:	d20b      	bcs.n	407754 <quorem+0x118>
  40773c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407740:	b942      	cbnz	r2, 407754 <quorem+0x118>
  407742:	3b08      	subs	r3, #8
  407744:	e002      	b.n	40774c <quorem+0x110>
  407746:	681a      	ldr	r2, [r3, #0]
  407748:	3b04      	subs	r3, #4
  40774a:	b91a      	cbnz	r2, 407754 <quorem+0x118>
  40774c:	459b      	cmp	fp, r3
  40774e:	f108 38ff 	add.w	r8, r8, #4294967295
  407752:	d3f8      	bcc.n	407746 <quorem+0x10a>
  407754:	f8c4 8010 	str.w	r8, [r4, #16]
  407758:	4648      	mov	r0, r9
  40775a:	b003      	add	sp, #12
  40775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407760:	2000      	movs	r0, #0
  407762:	4770      	bx	lr
  407764:	0000      	movs	r0, r0
	...

00407768 <_dtoa_r>:
  407768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40776c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40776e:	b09b      	sub	sp, #108	; 0x6c
  407770:	4604      	mov	r4, r0
  407772:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407774:	4692      	mov	sl, r2
  407776:	469b      	mov	fp, r3
  407778:	b141      	cbz	r1, 40778c <_dtoa_r+0x24>
  40777a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40777c:	604a      	str	r2, [r1, #4]
  40777e:	2301      	movs	r3, #1
  407780:	4093      	lsls	r3, r2
  407782:	608b      	str	r3, [r1, #8]
  407784:	f001 fca6 	bl	4090d4 <_Bfree>
  407788:	2300      	movs	r3, #0
  40778a:	6423      	str	r3, [r4, #64]	; 0x40
  40778c:	f1bb 0f00 	cmp.w	fp, #0
  407790:	465d      	mov	r5, fp
  407792:	db35      	blt.n	407800 <_dtoa_r+0x98>
  407794:	2300      	movs	r3, #0
  407796:	6033      	str	r3, [r6, #0]
  407798:	4b9d      	ldr	r3, [pc, #628]	; (407a10 <_dtoa_r+0x2a8>)
  40779a:	43ab      	bics	r3, r5
  40779c:	d015      	beq.n	4077ca <_dtoa_r+0x62>
  40779e:	4650      	mov	r0, sl
  4077a0:	4659      	mov	r1, fp
  4077a2:	2200      	movs	r2, #0
  4077a4:	2300      	movs	r3, #0
  4077a6:	f003 f8e1 	bl	40a96c <__aeabi_dcmpeq>
  4077aa:	4680      	mov	r8, r0
  4077ac:	2800      	cmp	r0, #0
  4077ae:	d02d      	beq.n	40780c <_dtoa_r+0xa4>
  4077b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4077b2:	2301      	movs	r3, #1
  4077b4:	6013      	str	r3, [r2, #0]
  4077b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4077b8:	2b00      	cmp	r3, #0
  4077ba:	f000 80bd 	beq.w	407938 <_dtoa_r+0x1d0>
  4077be:	4895      	ldr	r0, [pc, #596]	; (407a14 <_dtoa_r+0x2ac>)
  4077c0:	6018      	str	r0, [r3, #0]
  4077c2:	3801      	subs	r0, #1
  4077c4:	b01b      	add	sp, #108	; 0x6c
  4077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4077cc:	f242 730f 	movw	r3, #9999	; 0x270f
  4077d0:	6013      	str	r3, [r2, #0]
  4077d2:	f1ba 0f00 	cmp.w	sl, #0
  4077d6:	d10d      	bne.n	4077f4 <_dtoa_r+0x8c>
  4077d8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4077dc:	b955      	cbnz	r5, 4077f4 <_dtoa_r+0x8c>
  4077de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4077e0:	488d      	ldr	r0, [pc, #564]	; (407a18 <_dtoa_r+0x2b0>)
  4077e2:	2b00      	cmp	r3, #0
  4077e4:	d0ee      	beq.n	4077c4 <_dtoa_r+0x5c>
  4077e6:	f100 0308 	add.w	r3, r0, #8
  4077ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4077ec:	6013      	str	r3, [r2, #0]
  4077ee:	b01b      	add	sp, #108	; 0x6c
  4077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4077f6:	4889      	ldr	r0, [pc, #548]	; (407a1c <_dtoa_r+0x2b4>)
  4077f8:	2b00      	cmp	r3, #0
  4077fa:	d0e3      	beq.n	4077c4 <_dtoa_r+0x5c>
  4077fc:	1cc3      	adds	r3, r0, #3
  4077fe:	e7f4      	b.n	4077ea <_dtoa_r+0x82>
  407800:	2301      	movs	r3, #1
  407802:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407806:	6033      	str	r3, [r6, #0]
  407808:	46ab      	mov	fp, r5
  40780a:	e7c5      	b.n	407798 <_dtoa_r+0x30>
  40780c:	aa18      	add	r2, sp, #96	; 0x60
  40780e:	ab19      	add	r3, sp, #100	; 0x64
  407810:	9201      	str	r2, [sp, #4]
  407812:	9300      	str	r3, [sp, #0]
  407814:	4652      	mov	r2, sl
  407816:	465b      	mov	r3, fp
  407818:	4620      	mov	r0, r4
  40781a:	f001 fed3 	bl	4095c4 <__d2b>
  40781e:	0d2b      	lsrs	r3, r5, #20
  407820:	4681      	mov	r9, r0
  407822:	d071      	beq.n	407908 <_dtoa_r+0x1a0>
  407824:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407828:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40782c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40782e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407832:	4650      	mov	r0, sl
  407834:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407838:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40783c:	2200      	movs	r2, #0
  40783e:	4b78      	ldr	r3, [pc, #480]	; (407a20 <_dtoa_r+0x2b8>)
  407840:	f002 fc78 	bl	40a134 <__aeabi_dsub>
  407844:	a36c      	add	r3, pc, #432	; (adr r3, 4079f8 <_dtoa_r+0x290>)
  407846:	e9d3 2300 	ldrd	r2, r3, [r3]
  40784a:	f002 fe27 	bl	40a49c <__aeabi_dmul>
  40784e:	a36c      	add	r3, pc, #432	; (adr r3, 407a00 <_dtoa_r+0x298>)
  407850:	e9d3 2300 	ldrd	r2, r3, [r3]
  407854:	f002 fc70 	bl	40a138 <__adddf3>
  407858:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40785c:	4630      	mov	r0, r6
  40785e:	f002 fdb7 	bl	40a3d0 <__aeabi_i2d>
  407862:	a369      	add	r3, pc, #420	; (adr r3, 407a08 <_dtoa_r+0x2a0>)
  407864:	e9d3 2300 	ldrd	r2, r3, [r3]
  407868:	f002 fe18 	bl	40a49c <__aeabi_dmul>
  40786c:	4602      	mov	r2, r0
  40786e:	460b      	mov	r3, r1
  407870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407874:	f002 fc60 	bl	40a138 <__adddf3>
  407878:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40787c:	f003 f8be 	bl	40a9fc <__aeabi_d2iz>
  407880:	2200      	movs	r2, #0
  407882:	9002      	str	r0, [sp, #8]
  407884:	2300      	movs	r3, #0
  407886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40788a:	f003 f879 	bl	40a980 <__aeabi_dcmplt>
  40788e:	2800      	cmp	r0, #0
  407890:	f040 8173 	bne.w	407b7a <_dtoa_r+0x412>
  407894:	9d02      	ldr	r5, [sp, #8]
  407896:	2d16      	cmp	r5, #22
  407898:	f200 815d 	bhi.w	407b56 <_dtoa_r+0x3ee>
  40789c:	4b61      	ldr	r3, [pc, #388]	; (407a24 <_dtoa_r+0x2bc>)
  40789e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4078a2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4078a6:	4652      	mov	r2, sl
  4078a8:	465b      	mov	r3, fp
  4078aa:	f003 f887 	bl	40a9bc <__aeabi_dcmpgt>
  4078ae:	2800      	cmp	r0, #0
  4078b0:	f000 81c5 	beq.w	407c3e <_dtoa_r+0x4d6>
  4078b4:	1e6b      	subs	r3, r5, #1
  4078b6:	9302      	str	r3, [sp, #8]
  4078b8:	2300      	movs	r3, #0
  4078ba:	930e      	str	r3, [sp, #56]	; 0x38
  4078bc:	1bbf      	subs	r7, r7, r6
  4078be:	1e7b      	subs	r3, r7, #1
  4078c0:	9306      	str	r3, [sp, #24]
  4078c2:	f100 8154 	bmi.w	407b6e <_dtoa_r+0x406>
  4078c6:	2300      	movs	r3, #0
  4078c8:	9308      	str	r3, [sp, #32]
  4078ca:	9b02      	ldr	r3, [sp, #8]
  4078cc:	2b00      	cmp	r3, #0
  4078ce:	f2c0 8145 	blt.w	407b5c <_dtoa_r+0x3f4>
  4078d2:	9a06      	ldr	r2, [sp, #24]
  4078d4:	930d      	str	r3, [sp, #52]	; 0x34
  4078d6:	4611      	mov	r1, r2
  4078d8:	4419      	add	r1, r3
  4078da:	2300      	movs	r3, #0
  4078dc:	9106      	str	r1, [sp, #24]
  4078de:	930c      	str	r3, [sp, #48]	; 0x30
  4078e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078e2:	2b09      	cmp	r3, #9
  4078e4:	d82a      	bhi.n	40793c <_dtoa_r+0x1d4>
  4078e6:	2b05      	cmp	r3, #5
  4078e8:	f340 865b 	ble.w	4085a2 <_dtoa_r+0xe3a>
  4078ec:	3b04      	subs	r3, #4
  4078ee:	9324      	str	r3, [sp, #144]	; 0x90
  4078f0:	2500      	movs	r5, #0
  4078f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078f4:	3b02      	subs	r3, #2
  4078f6:	2b03      	cmp	r3, #3
  4078f8:	f200 8642 	bhi.w	408580 <_dtoa_r+0xe18>
  4078fc:	e8df f013 	tbh	[pc, r3, lsl #1]
  407900:	02c903d4 	.word	0x02c903d4
  407904:	046103df 	.word	0x046103df
  407908:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40790a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40790c:	443e      	add	r6, r7
  40790e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407912:	2b20      	cmp	r3, #32
  407914:	f340 818e 	ble.w	407c34 <_dtoa_r+0x4cc>
  407918:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40791c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407920:	409d      	lsls	r5, r3
  407922:	fa2a f000 	lsr.w	r0, sl, r0
  407926:	4328      	orrs	r0, r5
  407928:	f002 fd42 	bl	40a3b0 <__aeabi_ui2d>
  40792c:	2301      	movs	r3, #1
  40792e:	3e01      	subs	r6, #1
  407930:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407934:	9314      	str	r3, [sp, #80]	; 0x50
  407936:	e781      	b.n	40783c <_dtoa_r+0xd4>
  407938:	483b      	ldr	r0, [pc, #236]	; (407a28 <_dtoa_r+0x2c0>)
  40793a:	e743      	b.n	4077c4 <_dtoa_r+0x5c>
  40793c:	2100      	movs	r1, #0
  40793e:	6461      	str	r1, [r4, #68]	; 0x44
  407940:	4620      	mov	r0, r4
  407942:	9125      	str	r1, [sp, #148]	; 0x94
  407944:	f001 fba0 	bl	409088 <_Balloc>
  407948:	f04f 33ff 	mov.w	r3, #4294967295
  40794c:	930a      	str	r3, [sp, #40]	; 0x28
  40794e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407950:	930f      	str	r3, [sp, #60]	; 0x3c
  407952:	2301      	movs	r3, #1
  407954:	9004      	str	r0, [sp, #16]
  407956:	6420      	str	r0, [r4, #64]	; 0x40
  407958:	9224      	str	r2, [sp, #144]	; 0x90
  40795a:	930b      	str	r3, [sp, #44]	; 0x2c
  40795c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40795e:	2b00      	cmp	r3, #0
  407960:	f2c0 80d9 	blt.w	407b16 <_dtoa_r+0x3ae>
  407964:	9a02      	ldr	r2, [sp, #8]
  407966:	2a0e      	cmp	r2, #14
  407968:	f300 80d5 	bgt.w	407b16 <_dtoa_r+0x3ae>
  40796c:	4b2d      	ldr	r3, [pc, #180]	; (407a24 <_dtoa_r+0x2bc>)
  40796e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407972:	e9d3 2300 	ldrd	r2, r3, [r3]
  407976:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40797a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40797c:	2b00      	cmp	r3, #0
  40797e:	f2c0 83ba 	blt.w	4080f6 <_dtoa_r+0x98e>
  407982:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  407986:	4650      	mov	r0, sl
  407988:	462a      	mov	r2, r5
  40798a:	4633      	mov	r3, r6
  40798c:	4659      	mov	r1, fp
  40798e:	f002 feaf 	bl	40a6f0 <__aeabi_ddiv>
  407992:	f003 f833 	bl	40a9fc <__aeabi_d2iz>
  407996:	4680      	mov	r8, r0
  407998:	f002 fd1a 	bl	40a3d0 <__aeabi_i2d>
  40799c:	462a      	mov	r2, r5
  40799e:	4633      	mov	r3, r6
  4079a0:	f002 fd7c 	bl	40a49c <__aeabi_dmul>
  4079a4:	460b      	mov	r3, r1
  4079a6:	4602      	mov	r2, r0
  4079a8:	4659      	mov	r1, fp
  4079aa:	4650      	mov	r0, sl
  4079ac:	f002 fbc2 	bl	40a134 <__aeabi_dsub>
  4079b0:	9d04      	ldr	r5, [sp, #16]
  4079b2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4079b6:	702b      	strb	r3, [r5, #0]
  4079b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4079ba:	2b01      	cmp	r3, #1
  4079bc:	4606      	mov	r6, r0
  4079be:	460f      	mov	r7, r1
  4079c0:	f105 0501 	add.w	r5, r5, #1
  4079c4:	d068      	beq.n	407a98 <_dtoa_r+0x330>
  4079c6:	2200      	movs	r2, #0
  4079c8:	4b18      	ldr	r3, [pc, #96]	; (407a2c <_dtoa_r+0x2c4>)
  4079ca:	f002 fd67 	bl	40a49c <__aeabi_dmul>
  4079ce:	2200      	movs	r2, #0
  4079d0:	2300      	movs	r3, #0
  4079d2:	4606      	mov	r6, r0
  4079d4:	460f      	mov	r7, r1
  4079d6:	f002 ffc9 	bl	40a96c <__aeabi_dcmpeq>
  4079da:	2800      	cmp	r0, #0
  4079dc:	f040 8088 	bne.w	407af0 <_dtoa_r+0x388>
  4079e0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4079e4:	f04f 0a00 	mov.w	sl, #0
  4079e8:	f8df b040 	ldr.w	fp, [pc, #64]	; 407a2c <_dtoa_r+0x2c4>
  4079ec:	940c      	str	r4, [sp, #48]	; 0x30
  4079ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4079f2:	e028      	b.n	407a46 <_dtoa_r+0x2de>
  4079f4:	f3af 8000 	nop.w
  4079f8:	636f4361 	.word	0x636f4361
  4079fc:	3fd287a7 	.word	0x3fd287a7
  407a00:	8b60c8b3 	.word	0x8b60c8b3
  407a04:	3fc68a28 	.word	0x3fc68a28
  407a08:	509f79fb 	.word	0x509f79fb
  407a0c:	3fd34413 	.word	0x3fd34413
  407a10:	7ff00000 	.word	0x7ff00000
  407a14:	0040b1ad 	.word	0x0040b1ad
  407a18:	0040b1f0 	.word	0x0040b1f0
  407a1c:	0040b1fc 	.word	0x0040b1fc
  407a20:	3ff80000 	.word	0x3ff80000
  407a24:	0040b228 	.word	0x0040b228
  407a28:	0040b1ac 	.word	0x0040b1ac
  407a2c:	40240000 	.word	0x40240000
  407a30:	f002 fd34 	bl	40a49c <__aeabi_dmul>
  407a34:	2200      	movs	r2, #0
  407a36:	2300      	movs	r3, #0
  407a38:	4606      	mov	r6, r0
  407a3a:	460f      	mov	r7, r1
  407a3c:	f002 ff96 	bl	40a96c <__aeabi_dcmpeq>
  407a40:	2800      	cmp	r0, #0
  407a42:	f040 83c1 	bne.w	4081c8 <_dtoa_r+0xa60>
  407a46:	4642      	mov	r2, r8
  407a48:	464b      	mov	r3, r9
  407a4a:	4630      	mov	r0, r6
  407a4c:	4639      	mov	r1, r7
  407a4e:	f002 fe4f 	bl	40a6f0 <__aeabi_ddiv>
  407a52:	f002 ffd3 	bl	40a9fc <__aeabi_d2iz>
  407a56:	4604      	mov	r4, r0
  407a58:	f002 fcba 	bl	40a3d0 <__aeabi_i2d>
  407a5c:	4642      	mov	r2, r8
  407a5e:	464b      	mov	r3, r9
  407a60:	f002 fd1c 	bl	40a49c <__aeabi_dmul>
  407a64:	4602      	mov	r2, r0
  407a66:	460b      	mov	r3, r1
  407a68:	4630      	mov	r0, r6
  407a6a:	4639      	mov	r1, r7
  407a6c:	f002 fb62 	bl	40a134 <__aeabi_dsub>
  407a70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407a74:	9e04      	ldr	r6, [sp, #16]
  407a76:	f805 eb01 	strb.w	lr, [r5], #1
  407a7a:	eba5 0e06 	sub.w	lr, r5, r6
  407a7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407a80:	45b6      	cmp	lr, r6
  407a82:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407a86:	4652      	mov	r2, sl
  407a88:	465b      	mov	r3, fp
  407a8a:	d1d1      	bne.n	407a30 <_dtoa_r+0x2c8>
  407a8c:	46a0      	mov	r8, r4
  407a8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407a92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407a94:	4606      	mov	r6, r0
  407a96:	460f      	mov	r7, r1
  407a98:	4632      	mov	r2, r6
  407a9a:	463b      	mov	r3, r7
  407a9c:	4630      	mov	r0, r6
  407a9e:	4639      	mov	r1, r7
  407aa0:	f002 fb4a 	bl	40a138 <__adddf3>
  407aa4:	4606      	mov	r6, r0
  407aa6:	460f      	mov	r7, r1
  407aa8:	4602      	mov	r2, r0
  407aaa:	460b      	mov	r3, r1
  407aac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407ab0:	f002 ff66 	bl	40a980 <__aeabi_dcmplt>
  407ab4:	b948      	cbnz	r0, 407aca <_dtoa_r+0x362>
  407ab6:	4632      	mov	r2, r6
  407ab8:	463b      	mov	r3, r7
  407aba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407abe:	f002 ff55 	bl	40a96c <__aeabi_dcmpeq>
  407ac2:	b1a8      	cbz	r0, 407af0 <_dtoa_r+0x388>
  407ac4:	f018 0f01 	tst.w	r8, #1
  407ac8:	d012      	beq.n	407af0 <_dtoa_r+0x388>
  407aca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407ace:	9a04      	ldr	r2, [sp, #16]
  407ad0:	1e6b      	subs	r3, r5, #1
  407ad2:	e004      	b.n	407ade <_dtoa_r+0x376>
  407ad4:	429a      	cmp	r2, r3
  407ad6:	f000 8401 	beq.w	4082dc <_dtoa_r+0xb74>
  407ada:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407ade:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  407ae2:	f103 0501 	add.w	r5, r3, #1
  407ae6:	d0f5      	beq.n	407ad4 <_dtoa_r+0x36c>
  407ae8:	f108 0801 	add.w	r8, r8, #1
  407aec:	f883 8000 	strb.w	r8, [r3]
  407af0:	4649      	mov	r1, r9
  407af2:	4620      	mov	r0, r4
  407af4:	f001 faee 	bl	4090d4 <_Bfree>
  407af8:	2200      	movs	r2, #0
  407afa:	9b02      	ldr	r3, [sp, #8]
  407afc:	702a      	strb	r2, [r5, #0]
  407afe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407b00:	3301      	adds	r3, #1
  407b02:	6013      	str	r3, [r2, #0]
  407b04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407b06:	2b00      	cmp	r3, #0
  407b08:	f000 839e 	beq.w	408248 <_dtoa_r+0xae0>
  407b0c:	9804      	ldr	r0, [sp, #16]
  407b0e:	601d      	str	r5, [r3, #0]
  407b10:	b01b      	add	sp, #108	; 0x6c
  407b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407b18:	2a00      	cmp	r2, #0
  407b1a:	d03e      	beq.n	407b9a <_dtoa_r+0x432>
  407b1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b1e:	2a01      	cmp	r2, #1
  407b20:	f340 8311 	ble.w	408146 <_dtoa_r+0x9de>
  407b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407b28:	1e5f      	subs	r7, r3, #1
  407b2a:	42ba      	cmp	r2, r7
  407b2c:	f2c0 838f 	blt.w	40824e <_dtoa_r+0xae6>
  407b30:	1bd7      	subs	r7, r2, r7
  407b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b34:	2b00      	cmp	r3, #0
  407b36:	f2c0 848b 	blt.w	408450 <_dtoa_r+0xce8>
  407b3a:	9d08      	ldr	r5, [sp, #32]
  407b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b3e:	9a08      	ldr	r2, [sp, #32]
  407b40:	441a      	add	r2, r3
  407b42:	9208      	str	r2, [sp, #32]
  407b44:	9a06      	ldr	r2, [sp, #24]
  407b46:	2101      	movs	r1, #1
  407b48:	441a      	add	r2, r3
  407b4a:	4620      	mov	r0, r4
  407b4c:	9206      	str	r2, [sp, #24]
  407b4e:	f001 fb5b 	bl	409208 <__i2b>
  407b52:	4606      	mov	r6, r0
  407b54:	e024      	b.n	407ba0 <_dtoa_r+0x438>
  407b56:	2301      	movs	r3, #1
  407b58:	930e      	str	r3, [sp, #56]	; 0x38
  407b5a:	e6af      	b.n	4078bc <_dtoa_r+0x154>
  407b5c:	9a08      	ldr	r2, [sp, #32]
  407b5e:	9b02      	ldr	r3, [sp, #8]
  407b60:	1ad2      	subs	r2, r2, r3
  407b62:	425b      	negs	r3, r3
  407b64:	930c      	str	r3, [sp, #48]	; 0x30
  407b66:	2300      	movs	r3, #0
  407b68:	9208      	str	r2, [sp, #32]
  407b6a:	930d      	str	r3, [sp, #52]	; 0x34
  407b6c:	e6b8      	b.n	4078e0 <_dtoa_r+0x178>
  407b6e:	f1c7 0301 	rsb	r3, r7, #1
  407b72:	9308      	str	r3, [sp, #32]
  407b74:	2300      	movs	r3, #0
  407b76:	9306      	str	r3, [sp, #24]
  407b78:	e6a7      	b.n	4078ca <_dtoa_r+0x162>
  407b7a:	9d02      	ldr	r5, [sp, #8]
  407b7c:	4628      	mov	r0, r5
  407b7e:	f002 fc27 	bl	40a3d0 <__aeabi_i2d>
  407b82:	4602      	mov	r2, r0
  407b84:	460b      	mov	r3, r1
  407b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407b8a:	f002 feef 	bl	40a96c <__aeabi_dcmpeq>
  407b8e:	2800      	cmp	r0, #0
  407b90:	f47f ae80 	bne.w	407894 <_dtoa_r+0x12c>
  407b94:	1e6b      	subs	r3, r5, #1
  407b96:	9302      	str	r3, [sp, #8]
  407b98:	e67c      	b.n	407894 <_dtoa_r+0x12c>
  407b9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407b9c:	9d08      	ldr	r5, [sp, #32]
  407b9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407ba0:	2d00      	cmp	r5, #0
  407ba2:	dd0c      	ble.n	407bbe <_dtoa_r+0x456>
  407ba4:	9906      	ldr	r1, [sp, #24]
  407ba6:	2900      	cmp	r1, #0
  407ba8:	460b      	mov	r3, r1
  407baa:	dd08      	ble.n	407bbe <_dtoa_r+0x456>
  407bac:	42a9      	cmp	r1, r5
  407bae:	9a08      	ldr	r2, [sp, #32]
  407bb0:	bfa8      	it	ge
  407bb2:	462b      	movge	r3, r5
  407bb4:	1ad2      	subs	r2, r2, r3
  407bb6:	1aed      	subs	r5, r5, r3
  407bb8:	1acb      	subs	r3, r1, r3
  407bba:	9208      	str	r2, [sp, #32]
  407bbc:	9306      	str	r3, [sp, #24]
  407bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407bc0:	b1d3      	cbz	r3, 407bf8 <_dtoa_r+0x490>
  407bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407bc4:	2b00      	cmp	r3, #0
  407bc6:	f000 82b7 	beq.w	408138 <_dtoa_r+0x9d0>
  407bca:	2f00      	cmp	r7, #0
  407bcc:	dd10      	ble.n	407bf0 <_dtoa_r+0x488>
  407bce:	4631      	mov	r1, r6
  407bd0:	463a      	mov	r2, r7
  407bd2:	4620      	mov	r0, r4
  407bd4:	f001 fbb4 	bl	409340 <__pow5mult>
  407bd8:	464a      	mov	r2, r9
  407bda:	4601      	mov	r1, r0
  407bdc:	4606      	mov	r6, r0
  407bde:	4620      	mov	r0, r4
  407be0:	f001 fb1c 	bl	40921c <__multiply>
  407be4:	4649      	mov	r1, r9
  407be6:	4680      	mov	r8, r0
  407be8:	4620      	mov	r0, r4
  407bea:	f001 fa73 	bl	4090d4 <_Bfree>
  407bee:	46c1      	mov	r9, r8
  407bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407bf2:	1bda      	subs	r2, r3, r7
  407bf4:	f040 82a1 	bne.w	40813a <_dtoa_r+0x9d2>
  407bf8:	2101      	movs	r1, #1
  407bfa:	4620      	mov	r0, r4
  407bfc:	f001 fb04 	bl	409208 <__i2b>
  407c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407c02:	2b00      	cmp	r3, #0
  407c04:	4680      	mov	r8, r0
  407c06:	dd1c      	ble.n	407c42 <_dtoa_r+0x4da>
  407c08:	4601      	mov	r1, r0
  407c0a:	461a      	mov	r2, r3
  407c0c:	4620      	mov	r0, r4
  407c0e:	f001 fb97 	bl	409340 <__pow5mult>
  407c12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c14:	2b01      	cmp	r3, #1
  407c16:	4680      	mov	r8, r0
  407c18:	f340 8254 	ble.w	4080c4 <_dtoa_r+0x95c>
  407c1c:	2300      	movs	r3, #0
  407c1e:	930c      	str	r3, [sp, #48]	; 0x30
  407c20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407c24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407c28:	6918      	ldr	r0, [r3, #16]
  407c2a:	f001 fa9d 	bl	409168 <__hi0bits>
  407c2e:	f1c0 0020 	rsb	r0, r0, #32
  407c32:	e010      	b.n	407c56 <_dtoa_r+0x4ee>
  407c34:	f1c3 0520 	rsb	r5, r3, #32
  407c38:	fa0a f005 	lsl.w	r0, sl, r5
  407c3c:	e674      	b.n	407928 <_dtoa_r+0x1c0>
  407c3e:	900e      	str	r0, [sp, #56]	; 0x38
  407c40:	e63c      	b.n	4078bc <_dtoa_r+0x154>
  407c42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c44:	2b01      	cmp	r3, #1
  407c46:	f340 8287 	ble.w	408158 <_dtoa_r+0x9f0>
  407c4a:	2300      	movs	r3, #0
  407c4c:	930c      	str	r3, [sp, #48]	; 0x30
  407c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407c50:	2001      	movs	r0, #1
  407c52:	2b00      	cmp	r3, #0
  407c54:	d1e4      	bne.n	407c20 <_dtoa_r+0x4b8>
  407c56:	9a06      	ldr	r2, [sp, #24]
  407c58:	4410      	add	r0, r2
  407c5a:	f010 001f 	ands.w	r0, r0, #31
  407c5e:	f000 80a1 	beq.w	407da4 <_dtoa_r+0x63c>
  407c62:	f1c0 0320 	rsb	r3, r0, #32
  407c66:	2b04      	cmp	r3, #4
  407c68:	f340 849e 	ble.w	4085a8 <_dtoa_r+0xe40>
  407c6c:	9b08      	ldr	r3, [sp, #32]
  407c6e:	f1c0 001c 	rsb	r0, r0, #28
  407c72:	4403      	add	r3, r0
  407c74:	9308      	str	r3, [sp, #32]
  407c76:	4613      	mov	r3, r2
  407c78:	4403      	add	r3, r0
  407c7a:	4405      	add	r5, r0
  407c7c:	9306      	str	r3, [sp, #24]
  407c7e:	9b08      	ldr	r3, [sp, #32]
  407c80:	2b00      	cmp	r3, #0
  407c82:	dd05      	ble.n	407c90 <_dtoa_r+0x528>
  407c84:	4649      	mov	r1, r9
  407c86:	461a      	mov	r2, r3
  407c88:	4620      	mov	r0, r4
  407c8a:	f001 fba9 	bl	4093e0 <__lshift>
  407c8e:	4681      	mov	r9, r0
  407c90:	9b06      	ldr	r3, [sp, #24]
  407c92:	2b00      	cmp	r3, #0
  407c94:	dd05      	ble.n	407ca2 <_dtoa_r+0x53a>
  407c96:	4641      	mov	r1, r8
  407c98:	461a      	mov	r2, r3
  407c9a:	4620      	mov	r0, r4
  407c9c:	f001 fba0 	bl	4093e0 <__lshift>
  407ca0:	4680      	mov	r8, r0
  407ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407ca4:	2b00      	cmp	r3, #0
  407ca6:	f040 8086 	bne.w	407db6 <_dtoa_r+0x64e>
  407caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cac:	2b00      	cmp	r3, #0
  407cae:	f340 8266 	ble.w	40817e <_dtoa_r+0xa16>
  407cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407cb4:	2b00      	cmp	r3, #0
  407cb6:	f000 8098 	beq.w	407dea <_dtoa_r+0x682>
  407cba:	2d00      	cmp	r5, #0
  407cbc:	dd05      	ble.n	407cca <_dtoa_r+0x562>
  407cbe:	4631      	mov	r1, r6
  407cc0:	462a      	mov	r2, r5
  407cc2:	4620      	mov	r0, r4
  407cc4:	f001 fb8c 	bl	4093e0 <__lshift>
  407cc8:	4606      	mov	r6, r0
  407cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407ccc:	2b00      	cmp	r3, #0
  407cce:	f040 8337 	bne.w	408340 <_dtoa_r+0xbd8>
  407cd2:	9606      	str	r6, [sp, #24]
  407cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cd6:	9a04      	ldr	r2, [sp, #16]
  407cd8:	f8dd b018 	ldr.w	fp, [sp, #24]
  407cdc:	3b01      	subs	r3, #1
  407cde:	18d3      	adds	r3, r2, r3
  407ce0:	930b      	str	r3, [sp, #44]	; 0x2c
  407ce2:	f00a 0301 	and.w	r3, sl, #1
  407ce6:	930c      	str	r3, [sp, #48]	; 0x30
  407ce8:	4617      	mov	r7, r2
  407cea:	46c2      	mov	sl, r8
  407cec:	4651      	mov	r1, sl
  407cee:	4648      	mov	r0, r9
  407cf0:	f7ff fca4 	bl	40763c <quorem>
  407cf4:	4631      	mov	r1, r6
  407cf6:	4605      	mov	r5, r0
  407cf8:	4648      	mov	r0, r9
  407cfa:	f001 fbc3 	bl	409484 <__mcmp>
  407cfe:	465a      	mov	r2, fp
  407d00:	900a      	str	r0, [sp, #40]	; 0x28
  407d02:	4651      	mov	r1, sl
  407d04:	4620      	mov	r0, r4
  407d06:	f001 fbd9 	bl	4094bc <__mdiff>
  407d0a:	68c2      	ldr	r2, [r0, #12]
  407d0c:	4680      	mov	r8, r0
  407d0e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  407d12:	2a00      	cmp	r2, #0
  407d14:	f040 822b 	bne.w	40816e <_dtoa_r+0xa06>
  407d18:	4601      	mov	r1, r0
  407d1a:	4648      	mov	r0, r9
  407d1c:	9308      	str	r3, [sp, #32]
  407d1e:	f001 fbb1 	bl	409484 <__mcmp>
  407d22:	4641      	mov	r1, r8
  407d24:	9006      	str	r0, [sp, #24]
  407d26:	4620      	mov	r0, r4
  407d28:	f001 f9d4 	bl	4090d4 <_Bfree>
  407d2c:	9a06      	ldr	r2, [sp, #24]
  407d2e:	9b08      	ldr	r3, [sp, #32]
  407d30:	b932      	cbnz	r2, 407d40 <_dtoa_r+0x5d8>
  407d32:	9924      	ldr	r1, [sp, #144]	; 0x90
  407d34:	b921      	cbnz	r1, 407d40 <_dtoa_r+0x5d8>
  407d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407d38:	2a00      	cmp	r2, #0
  407d3a:	f000 83ef 	beq.w	40851c <_dtoa_r+0xdb4>
  407d3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407d40:	990a      	ldr	r1, [sp, #40]	; 0x28
  407d42:	2900      	cmp	r1, #0
  407d44:	f2c0 829f 	blt.w	408286 <_dtoa_r+0xb1e>
  407d48:	d105      	bne.n	407d56 <_dtoa_r+0x5ee>
  407d4a:	9924      	ldr	r1, [sp, #144]	; 0x90
  407d4c:	b919      	cbnz	r1, 407d56 <_dtoa_r+0x5ee>
  407d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
  407d50:	2900      	cmp	r1, #0
  407d52:	f000 8298 	beq.w	408286 <_dtoa_r+0xb1e>
  407d56:	2a00      	cmp	r2, #0
  407d58:	f300 8306 	bgt.w	408368 <_dtoa_r+0xc00>
  407d5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407d5e:	703b      	strb	r3, [r7, #0]
  407d60:	f107 0801 	add.w	r8, r7, #1
  407d64:	4297      	cmp	r7, r2
  407d66:	4645      	mov	r5, r8
  407d68:	f000 830c 	beq.w	408384 <_dtoa_r+0xc1c>
  407d6c:	4649      	mov	r1, r9
  407d6e:	2300      	movs	r3, #0
  407d70:	220a      	movs	r2, #10
  407d72:	4620      	mov	r0, r4
  407d74:	f001 f9b8 	bl	4090e8 <__multadd>
  407d78:	455e      	cmp	r6, fp
  407d7a:	4681      	mov	r9, r0
  407d7c:	4631      	mov	r1, r6
  407d7e:	f04f 0300 	mov.w	r3, #0
  407d82:	f04f 020a 	mov.w	r2, #10
  407d86:	4620      	mov	r0, r4
  407d88:	f000 81eb 	beq.w	408162 <_dtoa_r+0x9fa>
  407d8c:	f001 f9ac 	bl	4090e8 <__multadd>
  407d90:	4659      	mov	r1, fp
  407d92:	4606      	mov	r6, r0
  407d94:	2300      	movs	r3, #0
  407d96:	220a      	movs	r2, #10
  407d98:	4620      	mov	r0, r4
  407d9a:	f001 f9a5 	bl	4090e8 <__multadd>
  407d9e:	4647      	mov	r7, r8
  407da0:	4683      	mov	fp, r0
  407da2:	e7a3      	b.n	407cec <_dtoa_r+0x584>
  407da4:	201c      	movs	r0, #28
  407da6:	9b08      	ldr	r3, [sp, #32]
  407da8:	4403      	add	r3, r0
  407daa:	9308      	str	r3, [sp, #32]
  407dac:	9b06      	ldr	r3, [sp, #24]
  407dae:	4403      	add	r3, r0
  407db0:	4405      	add	r5, r0
  407db2:	9306      	str	r3, [sp, #24]
  407db4:	e763      	b.n	407c7e <_dtoa_r+0x516>
  407db6:	4641      	mov	r1, r8
  407db8:	4648      	mov	r0, r9
  407dba:	f001 fb63 	bl	409484 <__mcmp>
  407dbe:	2800      	cmp	r0, #0
  407dc0:	f6bf af73 	bge.w	407caa <_dtoa_r+0x542>
  407dc4:	9f02      	ldr	r7, [sp, #8]
  407dc6:	4649      	mov	r1, r9
  407dc8:	2300      	movs	r3, #0
  407dca:	220a      	movs	r2, #10
  407dcc:	4620      	mov	r0, r4
  407dce:	3f01      	subs	r7, #1
  407dd0:	9702      	str	r7, [sp, #8]
  407dd2:	f001 f989 	bl	4090e8 <__multadd>
  407dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407dd8:	4681      	mov	r9, r0
  407dda:	2b00      	cmp	r3, #0
  407ddc:	f040 83b6 	bne.w	40854c <_dtoa_r+0xde4>
  407de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407de2:	2b00      	cmp	r3, #0
  407de4:	f340 83bf 	ble.w	408566 <_dtoa_r+0xdfe>
  407de8:	930a      	str	r3, [sp, #40]	; 0x28
  407dea:	f8dd b010 	ldr.w	fp, [sp, #16]
  407dee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407df0:	465d      	mov	r5, fp
  407df2:	e002      	b.n	407dfa <_dtoa_r+0x692>
  407df4:	f001 f978 	bl	4090e8 <__multadd>
  407df8:	4681      	mov	r9, r0
  407dfa:	4641      	mov	r1, r8
  407dfc:	4648      	mov	r0, r9
  407dfe:	f7ff fc1d 	bl	40763c <quorem>
  407e02:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  407e06:	f805 ab01 	strb.w	sl, [r5], #1
  407e0a:	eba5 030b 	sub.w	r3, r5, fp
  407e0e:	42bb      	cmp	r3, r7
  407e10:	f04f 020a 	mov.w	r2, #10
  407e14:	f04f 0300 	mov.w	r3, #0
  407e18:	4649      	mov	r1, r9
  407e1a:	4620      	mov	r0, r4
  407e1c:	dbea      	blt.n	407df4 <_dtoa_r+0x68c>
  407e1e:	9b04      	ldr	r3, [sp, #16]
  407e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407e22:	2a01      	cmp	r2, #1
  407e24:	bfac      	ite	ge
  407e26:	189b      	addge	r3, r3, r2
  407e28:	3301      	addlt	r3, #1
  407e2a:	461d      	mov	r5, r3
  407e2c:	f04f 0b00 	mov.w	fp, #0
  407e30:	4649      	mov	r1, r9
  407e32:	2201      	movs	r2, #1
  407e34:	4620      	mov	r0, r4
  407e36:	f001 fad3 	bl	4093e0 <__lshift>
  407e3a:	4641      	mov	r1, r8
  407e3c:	4681      	mov	r9, r0
  407e3e:	f001 fb21 	bl	409484 <__mcmp>
  407e42:	2800      	cmp	r0, #0
  407e44:	f340 823d 	ble.w	4082c2 <_dtoa_r+0xb5a>
  407e48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407e4c:	9904      	ldr	r1, [sp, #16]
  407e4e:	1e6b      	subs	r3, r5, #1
  407e50:	e004      	b.n	407e5c <_dtoa_r+0x6f4>
  407e52:	428b      	cmp	r3, r1
  407e54:	f000 81ae 	beq.w	4081b4 <_dtoa_r+0xa4c>
  407e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407e5c:	2a39      	cmp	r2, #57	; 0x39
  407e5e:	f103 0501 	add.w	r5, r3, #1
  407e62:	d0f6      	beq.n	407e52 <_dtoa_r+0x6ea>
  407e64:	3201      	adds	r2, #1
  407e66:	701a      	strb	r2, [r3, #0]
  407e68:	4641      	mov	r1, r8
  407e6a:	4620      	mov	r0, r4
  407e6c:	f001 f932 	bl	4090d4 <_Bfree>
  407e70:	2e00      	cmp	r6, #0
  407e72:	f43f ae3d 	beq.w	407af0 <_dtoa_r+0x388>
  407e76:	f1bb 0f00 	cmp.w	fp, #0
  407e7a:	d005      	beq.n	407e88 <_dtoa_r+0x720>
  407e7c:	45b3      	cmp	fp, r6
  407e7e:	d003      	beq.n	407e88 <_dtoa_r+0x720>
  407e80:	4659      	mov	r1, fp
  407e82:	4620      	mov	r0, r4
  407e84:	f001 f926 	bl	4090d4 <_Bfree>
  407e88:	4631      	mov	r1, r6
  407e8a:	4620      	mov	r0, r4
  407e8c:	f001 f922 	bl	4090d4 <_Bfree>
  407e90:	e62e      	b.n	407af0 <_dtoa_r+0x388>
  407e92:	2300      	movs	r3, #0
  407e94:	930b      	str	r3, [sp, #44]	; 0x2c
  407e96:	9b02      	ldr	r3, [sp, #8]
  407e98:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407e9a:	4413      	add	r3, r2
  407e9c:	930f      	str	r3, [sp, #60]	; 0x3c
  407e9e:	3301      	adds	r3, #1
  407ea0:	2b01      	cmp	r3, #1
  407ea2:	461f      	mov	r7, r3
  407ea4:	461e      	mov	r6, r3
  407ea6:	930a      	str	r3, [sp, #40]	; 0x28
  407ea8:	bfb8      	it	lt
  407eaa:	2701      	movlt	r7, #1
  407eac:	2100      	movs	r1, #0
  407eae:	2f17      	cmp	r7, #23
  407eb0:	6461      	str	r1, [r4, #68]	; 0x44
  407eb2:	d90a      	bls.n	407eca <_dtoa_r+0x762>
  407eb4:	2201      	movs	r2, #1
  407eb6:	2304      	movs	r3, #4
  407eb8:	005b      	lsls	r3, r3, #1
  407eba:	f103 0014 	add.w	r0, r3, #20
  407ebe:	4287      	cmp	r7, r0
  407ec0:	4611      	mov	r1, r2
  407ec2:	f102 0201 	add.w	r2, r2, #1
  407ec6:	d2f7      	bcs.n	407eb8 <_dtoa_r+0x750>
  407ec8:	6461      	str	r1, [r4, #68]	; 0x44
  407eca:	4620      	mov	r0, r4
  407ecc:	f001 f8dc 	bl	409088 <_Balloc>
  407ed0:	2e0e      	cmp	r6, #14
  407ed2:	9004      	str	r0, [sp, #16]
  407ed4:	6420      	str	r0, [r4, #64]	; 0x40
  407ed6:	f63f ad41 	bhi.w	40795c <_dtoa_r+0x1f4>
  407eda:	2d00      	cmp	r5, #0
  407edc:	f43f ad3e 	beq.w	40795c <_dtoa_r+0x1f4>
  407ee0:	9902      	ldr	r1, [sp, #8]
  407ee2:	2900      	cmp	r1, #0
  407ee4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407ee8:	f340 8202 	ble.w	4082f0 <_dtoa_r+0xb88>
  407eec:	4bb8      	ldr	r3, [pc, #736]	; (4081d0 <_dtoa_r+0xa68>)
  407eee:	f001 020f 	and.w	r2, r1, #15
  407ef2:	110d      	asrs	r5, r1, #4
  407ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407ef8:	06e9      	lsls	r1, r5, #27
  407efa:	e9d3 6700 	ldrd	r6, r7, [r3]
  407efe:	f140 81ae 	bpl.w	40825e <_dtoa_r+0xaf6>
  407f02:	4bb4      	ldr	r3, [pc, #720]	; (4081d4 <_dtoa_r+0xa6c>)
  407f04:	4650      	mov	r0, sl
  407f06:	4659      	mov	r1, fp
  407f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407f0c:	f002 fbf0 	bl	40a6f0 <__aeabi_ddiv>
  407f10:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407f14:	f005 050f 	and.w	r5, r5, #15
  407f18:	f04f 0a03 	mov.w	sl, #3
  407f1c:	b18d      	cbz	r5, 407f42 <_dtoa_r+0x7da>
  407f1e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4081d4 <_dtoa_r+0xa6c>
  407f22:	07ea      	lsls	r2, r5, #31
  407f24:	d509      	bpl.n	407f3a <_dtoa_r+0x7d2>
  407f26:	4630      	mov	r0, r6
  407f28:	4639      	mov	r1, r7
  407f2a:	e9d8 2300 	ldrd	r2, r3, [r8]
  407f2e:	f002 fab5 	bl	40a49c <__aeabi_dmul>
  407f32:	f10a 0a01 	add.w	sl, sl, #1
  407f36:	4606      	mov	r6, r0
  407f38:	460f      	mov	r7, r1
  407f3a:	106d      	asrs	r5, r5, #1
  407f3c:	f108 0808 	add.w	r8, r8, #8
  407f40:	d1ef      	bne.n	407f22 <_dtoa_r+0x7ba>
  407f42:	463b      	mov	r3, r7
  407f44:	4632      	mov	r2, r6
  407f46:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407f4a:	f002 fbd1 	bl	40a6f0 <__aeabi_ddiv>
  407f4e:	4607      	mov	r7, r0
  407f50:	4688      	mov	r8, r1
  407f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407f54:	b143      	cbz	r3, 407f68 <_dtoa_r+0x800>
  407f56:	2200      	movs	r2, #0
  407f58:	4b9f      	ldr	r3, [pc, #636]	; (4081d8 <_dtoa_r+0xa70>)
  407f5a:	4638      	mov	r0, r7
  407f5c:	4641      	mov	r1, r8
  407f5e:	f002 fd0f 	bl	40a980 <__aeabi_dcmplt>
  407f62:	2800      	cmp	r0, #0
  407f64:	f040 8286 	bne.w	408474 <_dtoa_r+0xd0c>
  407f68:	4650      	mov	r0, sl
  407f6a:	f002 fa31 	bl	40a3d0 <__aeabi_i2d>
  407f6e:	463a      	mov	r2, r7
  407f70:	4643      	mov	r3, r8
  407f72:	f002 fa93 	bl	40a49c <__aeabi_dmul>
  407f76:	4b99      	ldr	r3, [pc, #612]	; (4081dc <_dtoa_r+0xa74>)
  407f78:	2200      	movs	r2, #0
  407f7a:	f002 f8dd 	bl	40a138 <__adddf3>
  407f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f80:	4605      	mov	r5, r0
  407f82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407f86:	2b00      	cmp	r3, #0
  407f88:	f000 813e 	beq.w	408208 <_dtoa_r+0xaa0>
  407f8c:	9b02      	ldr	r3, [sp, #8]
  407f8e:	9315      	str	r3, [sp, #84]	; 0x54
  407f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f92:	9312      	str	r3, [sp, #72]	; 0x48
  407f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407f96:	2b00      	cmp	r3, #0
  407f98:	f000 81fa 	beq.w	408390 <_dtoa_r+0xc28>
  407f9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407f9e:	4b8c      	ldr	r3, [pc, #560]	; (4081d0 <_dtoa_r+0xa68>)
  407fa0:	498f      	ldr	r1, [pc, #572]	; (4081e0 <_dtoa_r+0xa78>)
  407fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407faa:	2000      	movs	r0, #0
  407fac:	f002 fba0 	bl	40a6f0 <__aeabi_ddiv>
  407fb0:	462a      	mov	r2, r5
  407fb2:	4633      	mov	r3, r6
  407fb4:	f002 f8be 	bl	40a134 <__aeabi_dsub>
  407fb8:	4682      	mov	sl, r0
  407fba:	468b      	mov	fp, r1
  407fbc:	4638      	mov	r0, r7
  407fbe:	4641      	mov	r1, r8
  407fc0:	f002 fd1c 	bl	40a9fc <__aeabi_d2iz>
  407fc4:	4605      	mov	r5, r0
  407fc6:	f002 fa03 	bl	40a3d0 <__aeabi_i2d>
  407fca:	4602      	mov	r2, r0
  407fcc:	460b      	mov	r3, r1
  407fce:	4638      	mov	r0, r7
  407fd0:	4641      	mov	r1, r8
  407fd2:	f002 f8af 	bl	40a134 <__aeabi_dsub>
  407fd6:	3530      	adds	r5, #48	; 0x30
  407fd8:	fa5f f885 	uxtb.w	r8, r5
  407fdc:	9d04      	ldr	r5, [sp, #16]
  407fde:	4606      	mov	r6, r0
  407fe0:	460f      	mov	r7, r1
  407fe2:	f885 8000 	strb.w	r8, [r5]
  407fe6:	4602      	mov	r2, r0
  407fe8:	460b      	mov	r3, r1
  407fea:	4650      	mov	r0, sl
  407fec:	4659      	mov	r1, fp
  407fee:	3501      	adds	r5, #1
  407ff0:	f002 fce4 	bl	40a9bc <__aeabi_dcmpgt>
  407ff4:	2800      	cmp	r0, #0
  407ff6:	d154      	bne.n	4080a2 <_dtoa_r+0x93a>
  407ff8:	4632      	mov	r2, r6
  407ffa:	463b      	mov	r3, r7
  407ffc:	2000      	movs	r0, #0
  407ffe:	4976      	ldr	r1, [pc, #472]	; (4081d8 <_dtoa_r+0xa70>)
  408000:	f002 f898 	bl	40a134 <__aeabi_dsub>
  408004:	4602      	mov	r2, r0
  408006:	460b      	mov	r3, r1
  408008:	4650      	mov	r0, sl
  40800a:	4659      	mov	r1, fp
  40800c:	f002 fcd6 	bl	40a9bc <__aeabi_dcmpgt>
  408010:	2800      	cmp	r0, #0
  408012:	f040 8270 	bne.w	4084f6 <_dtoa_r+0xd8e>
  408016:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408018:	2a01      	cmp	r2, #1
  40801a:	f000 8111 	beq.w	408240 <_dtoa_r+0xad8>
  40801e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408020:	9a04      	ldr	r2, [sp, #16]
  408022:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408026:	4413      	add	r3, r2
  408028:	4699      	mov	r9, r3
  40802a:	e00d      	b.n	408048 <_dtoa_r+0x8e0>
  40802c:	2000      	movs	r0, #0
  40802e:	496a      	ldr	r1, [pc, #424]	; (4081d8 <_dtoa_r+0xa70>)
  408030:	f002 f880 	bl	40a134 <__aeabi_dsub>
  408034:	4652      	mov	r2, sl
  408036:	465b      	mov	r3, fp
  408038:	f002 fca2 	bl	40a980 <__aeabi_dcmplt>
  40803c:	2800      	cmp	r0, #0
  40803e:	f040 8258 	bne.w	4084f2 <_dtoa_r+0xd8a>
  408042:	454d      	cmp	r5, r9
  408044:	f000 80fa 	beq.w	40823c <_dtoa_r+0xad4>
  408048:	4650      	mov	r0, sl
  40804a:	4659      	mov	r1, fp
  40804c:	2200      	movs	r2, #0
  40804e:	4b65      	ldr	r3, [pc, #404]	; (4081e4 <_dtoa_r+0xa7c>)
  408050:	f002 fa24 	bl	40a49c <__aeabi_dmul>
  408054:	2200      	movs	r2, #0
  408056:	4b63      	ldr	r3, [pc, #396]	; (4081e4 <_dtoa_r+0xa7c>)
  408058:	4682      	mov	sl, r0
  40805a:	468b      	mov	fp, r1
  40805c:	4630      	mov	r0, r6
  40805e:	4639      	mov	r1, r7
  408060:	f002 fa1c 	bl	40a49c <__aeabi_dmul>
  408064:	460f      	mov	r7, r1
  408066:	4606      	mov	r6, r0
  408068:	f002 fcc8 	bl	40a9fc <__aeabi_d2iz>
  40806c:	4680      	mov	r8, r0
  40806e:	f002 f9af 	bl	40a3d0 <__aeabi_i2d>
  408072:	4602      	mov	r2, r0
  408074:	460b      	mov	r3, r1
  408076:	4630      	mov	r0, r6
  408078:	4639      	mov	r1, r7
  40807a:	f002 f85b 	bl	40a134 <__aeabi_dsub>
  40807e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408082:	fa5f f888 	uxtb.w	r8, r8
  408086:	4652      	mov	r2, sl
  408088:	465b      	mov	r3, fp
  40808a:	f805 8b01 	strb.w	r8, [r5], #1
  40808e:	4606      	mov	r6, r0
  408090:	460f      	mov	r7, r1
  408092:	f002 fc75 	bl	40a980 <__aeabi_dcmplt>
  408096:	4632      	mov	r2, r6
  408098:	463b      	mov	r3, r7
  40809a:	2800      	cmp	r0, #0
  40809c:	d0c6      	beq.n	40802c <_dtoa_r+0x8c4>
  40809e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4080a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4080a4:	9302      	str	r3, [sp, #8]
  4080a6:	e523      	b.n	407af0 <_dtoa_r+0x388>
  4080a8:	2300      	movs	r3, #0
  4080aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4080ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4080ae:	2b00      	cmp	r3, #0
  4080b0:	f340 80dc 	ble.w	40826c <_dtoa_r+0xb04>
  4080b4:	461f      	mov	r7, r3
  4080b6:	461e      	mov	r6, r3
  4080b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4080ba:	930a      	str	r3, [sp, #40]	; 0x28
  4080bc:	e6f6      	b.n	407eac <_dtoa_r+0x744>
  4080be:	2301      	movs	r3, #1
  4080c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4080c2:	e7f3      	b.n	4080ac <_dtoa_r+0x944>
  4080c4:	f1ba 0f00 	cmp.w	sl, #0
  4080c8:	f47f ada8 	bne.w	407c1c <_dtoa_r+0x4b4>
  4080cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4080d0:	2b00      	cmp	r3, #0
  4080d2:	f47f adba 	bne.w	407c4a <_dtoa_r+0x4e2>
  4080d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4080da:	0d3f      	lsrs	r7, r7, #20
  4080dc:	053f      	lsls	r7, r7, #20
  4080de:	2f00      	cmp	r7, #0
  4080e0:	f000 820d 	beq.w	4084fe <_dtoa_r+0xd96>
  4080e4:	9b08      	ldr	r3, [sp, #32]
  4080e6:	3301      	adds	r3, #1
  4080e8:	9308      	str	r3, [sp, #32]
  4080ea:	9b06      	ldr	r3, [sp, #24]
  4080ec:	3301      	adds	r3, #1
  4080ee:	9306      	str	r3, [sp, #24]
  4080f0:	2301      	movs	r3, #1
  4080f2:	930c      	str	r3, [sp, #48]	; 0x30
  4080f4:	e5ab      	b.n	407c4e <_dtoa_r+0x4e6>
  4080f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4080f8:	2b00      	cmp	r3, #0
  4080fa:	f73f ac42 	bgt.w	407982 <_dtoa_r+0x21a>
  4080fe:	f040 8221 	bne.w	408544 <_dtoa_r+0xddc>
  408102:	2200      	movs	r2, #0
  408104:	4b38      	ldr	r3, [pc, #224]	; (4081e8 <_dtoa_r+0xa80>)
  408106:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40810a:	f002 f9c7 	bl	40a49c <__aeabi_dmul>
  40810e:	4652      	mov	r2, sl
  408110:	465b      	mov	r3, fp
  408112:	f002 fc49 	bl	40a9a8 <__aeabi_dcmpge>
  408116:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40811a:	4646      	mov	r6, r8
  40811c:	2800      	cmp	r0, #0
  40811e:	d041      	beq.n	4081a4 <_dtoa_r+0xa3c>
  408120:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408122:	9d04      	ldr	r5, [sp, #16]
  408124:	43db      	mvns	r3, r3
  408126:	9302      	str	r3, [sp, #8]
  408128:	4641      	mov	r1, r8
  40812a:	4620      	mov	r0, r4
  40812c:	f000 ffd2 	bl	4090d4 <_Bfree>
  408130:	2e00      	cmp	r6, #0
  408132:	f43f acdd 	beq.w	407af0 <_dtoa_r+0x388>
  408136:	e6a7      	b.n	407e88 <_dtoa_r+0x720>
  408138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40813a:	4649      	mov	r1, r9
  40813c:	4620      	mov	r0, r4
  40813e:	f001 f8ff 	bl	409340 <__pow5mult>
  408142:	4681      	mov	r9, r0
  408144:	e558      	b.n	407bf8 <_dtoa_r+0x490>
  408146:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408148:	2a00      	cmp	r2, #0
  40814a:	f000 8187 	beq.w	40845c <_dtoa_r+0xcf4>
  40814e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408152:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408154:	9d08      	ldr	r5, [sp, #32]
  408156:	e4f2      	b.n	407b3e <_dtoa_r+0x3d6>
  408158:	f1ba 0f00 	cmp.w	sl, #0
  40815c:	f47f ad75 	bne.w	407c4a <_dtoa_r+0x4e2>
  408160:	e7b4      	b.n	4080cc <_dtoa_r+0x964>
  408162:	f000 ffc1 	bl	4090e8 <__multadd>
  408166:	4647      	mov	r7, r8
  408168:	4606      	mov	r6, r0
  40816a:	4683      	mov	fp, r0
  40816c:	e5be      	b.n	407cec <_dtoa_r+0x584>
  40816e:	4601      	mov	r1, r0
  408170:	4620      	mov	r0, r4
  408172:	9306      	str	r3, [sp, #24]
  408174:	f000 ffae 	bl	4090d4 <_Bfree>
  408178:	2201      	movs	r2, #1
  40817a:	9b06      	ldr	r3, [sp, #24]
  40817c:	e5e0      	b.n	407d40 <_dtoa_r+0x5d8>
  40817e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408180:	2b02      	cmp	r3, #2
  408182:	f77f ad96 	ble.w	407cb2 <_dtoa_r+0x54a>
  408186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408188:	2b00      	cmp	r3, #0
  40818a:	d1c9      	bne.n	408120 <_dtoa_r+0x9b8>
  40818c:	4641      	mov	r1, r8
  40818e:	2205      	movs	r2, #5
  408190:	4620      	mov	r0, r4
  408192:	f000 ffa9 	bl	4090e8 <__multadd>
  408196:	4601      	mov	r1, r0
  408198:	4680      	mov	r8, r0
  40819a:	4648      	mov	r0, r9
  40819c:	f001 f972 	bl	409484 <__mcmp>
  4081a0:	2800      	cmp	r0, #0
  4081a2:	ddbd      	ble.n	408120 <_dtoa_r+0x9b8>
  4081a4:	9a02      	ldr	r2, [sp, #8]
  4081a6:	9904      	ldr	r1, [sp, #16]
  4081a8:	2331      	movs	r3, #49	; 0x31
  4081aa:	3201      	adds	r2, #1
  4081ac:	9202      	str	r2, [sp, #8]
  4081ae:	700b      	strb	r3, [r1, #0]
  4081b0:	1c4d      	adds	r5, r1, #1
  4081b2:	e7b9      	b.n	408128 <_dtoa_r+0x9c0>
  4081b4:	9a02      	ldr	r2, [sp, #8]
  4081b6:	3201      	adds	r2, #1
  4081b8:	9202      	str	r2, [sp, #8]
  4081ba:	9a04      	ldr	r2, [sp, #16]
  4081bc:	2331      	movs	r3, #49	; 0x31
  4081be:	7013      	strb	r3, [r2, #0]
  4081c0:	e652      	b.n	407e68 <_dtoa_r+0x700>
  4081c2:	2301      	movs	r3, #1
  4081c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4081c6:	e666      	b.n	407e96 <_dtoa_r+0x72e>
  4081c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4081cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4081ce:	e48f      	b.n	407af0 <_dtoa_r+0x388>
  4081d0:	0040b228 	.word	0x0040b228
  4081d4:	0040b200 	.word	0x0040b200
  4081d8:	3ff00000 	.word	0x3ff00000
  4081dc:	401c0000 	.word	0x401c0000
  4081e0:	3fe00000 	.word	0x3fe00000
  4081e4:	40240000 	.word	0x40240000
  4081e8:	40140000 	.word	0x40140000
  4081ec:	4650      	mov	r0, sl
  4081ee:	f002 f8ef 	bl	40a3d0 <__aeabi_i2d>
  4081f2:	463a      	mov	r2, r7
  4081f4:	4643      	mov	r3, r8
  4081f6:	f002 f951 	bl	40a49c <__aeabi_dmul>
  4081fa:	2200      	movs	r2, #0
  4081fc:	4bc1      	ldr	r3, [pc, #772]	; (408504 <_dtoa_r+0xd9c>)
  4081fe:	f001 ff9b 	bl	40a138 <__adddf3>
  408202:	4605      	mov	r5, r0
  408204:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408208:	4641      	mov	r1, r8
  40820a:	2200      	movs	r2, #0
  40820c:	4bbe      	ldr	r3, [pc, #760]	; (408508 <_dtoa_r+0xda0>)
  40820e:	4638      	mov	r0, r7
  408210:	f001 ff90 	bl	40a134 <__aeabi_dsub>
  408214:	462a      	mov	r2, r5
  408216:	4633      	mov	r3, r6
  408218:	4682      	mov	sl, r0
  40821a:	468b      	mov	fp, r1
  40821c:	f002 fbce 	bl	40a9bc <__aeabi_dcmpgt>
  408220:	4680      	mov	r8, r0
  408222:	2800      	cmp	r0, #0
  408224:	f040 8110 	bne.w	408448 <_dtoa_r+0xce0>
  408228:	462a      	mov	r2, r5
  40822a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40822e:	4650      	mov	r0, sl
  408230:	4659      	mov	r1, fp
  408232:	f002 fba5 	bl	40a980 <__aeabi_dcmplt>
  408236:	b118      	cbz	r0, 408240 <_dtoa_r+0xad8>
  408238:	4646      	mov	r6, r8
  40823a:	e771      	b.n	408120 <_dtoa_r+0x9b8>
  40823c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408240:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408244:	f7ff bb8a 	b.w	40795c <_dtoa_r+0x1f4>
  408248:	9804      	ldr	r0, [sp, #16]
  40824a:	f7ff babb 	b.w	4077c4 <_dtoa_r+0x5c>
  40824e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408250:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408252:	970c      	str	r7, [sp, #48]	; 0x30
  408254:	1afb      	subs	r3, r7, r3
  408256:	441a      	add	r2, r3
  408258:	920d      	str	r2, [sp, #52]	; 0x34
  40825a:	2700      	movs	r7, #0
  40825c:	e469      	b.n	407b32 <_dtoa_r+0x3ca>
  40825e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408262:	f04f 0a02 	mov.w	sl, #2
  408266:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40826a:	e657      	b.n	407f1c <_dtoa_r+0x7b4>
  40826c:	2100      	movs	r1, #0
  40826e:	2301      	movs	r3, #1
  408270:	6461      	str	r1, [r4, #68]	; 0x44
  408272:	4620      	mov	r0, r4
  408274:	9325      	str	r3, [sp, #148]	; 0x94
  408276:	f000 ff07 	bl	409088 <_Balloc>
  40827a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40827c:	9004      	str	r0, [sp, #16]
  40827e:	6420      	str	r0, [r4, #64]	; 0x40
  408280:	930a      	str	r3, [sp, #40]	; 0x28
  408282:	930f      	str	r3, [sp, #60]	; 0x3c
  408284:	e629      	b.n	407eda <_dtoa_r+0x772>
  408286:	2a00      	cmp	r2, #0
  408288:	46d0      	mov	r8, sl
  40828a:	f8cd b018 	str.w	fp, [sp, #24]
  40828e:	469a      	mov	sl, r3
  408290:	dd11      	ble.n	4082b6 <_dtoa_r+0xb4e>
  408292:	4649      	mov	r1, r9
  408294:	2201      	movs	r2, #1
  408296:	4620      	mov	r0, r4
  408298:	f001 f8a2 	bl	4093e0 <__lshift>
  40829c:	4641      	mov	r1, r8
  40829e:	4681      	mov	r9, r0
  4082a0:	f001 f8f0 	bl	409484 <__mcmp>
  4082a4:	2800      	cmp	r0, #0
  4082a6:	f340 8146 	ble.w	408536 <_dtoa_r+0xdce>
  4082aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4082ae:	f000 8106 	beq.w	4084be <_dtoa_r+0xd56>
  4082b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4082b6:	46b3      	mov	fp, r6
  4082b8:	f887 a000 	strb.w	sl, [r7]
  4082bc:	1c7d      	adds	r5, r7, #1
  4082be:	9e06      	ldr	r6, [sp, #24]
  4082c0:	e5d2      	b.n	407e68 <_dtoa_r+0x700>
  4082c2:	d104      	bne.n	4082ce <_dtoa_r+0xb66>
  4082c4:	f01a 0f01 	tst.w	sl, #1
  4082c8:	d001      	beq.n	4082ce <_dtoa_r+0xb66>
  4082ca:	e5bd      	b.n	407e48 <_dtoa_r+0x6e0>
  4082cc:	4615      	mov	r5, r2
  4082ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4082d2:	2b30      	cmp	r3, #48	; 0x30
  4082d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4082d8:	d0f8      	beq.n	4082cc <_dtoa_r+0xb64>
  4082da:	e5c5      	b.n	407e68 <_dtoa_r+0x700>
  4082dc:	9904      	ldr	r1, [sp, #16]
  4082de:	2230      	movs	r2, #48	; 0x30
  4082e0:	700a      	strb	r2, [r1, #0]
  4082e2:	9a02      	ldr	r2, [sp, #8]
  4082e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4082e8:	3201      	adds	r2, #1
  4082ea:	9202      	str	r2, [sp, #8]
  4082ec:	f7ff bbfc 	b.w	407ae8 <_dtoa_r+0x380>
  4082f0:	f000 80bb 	beq.w	40846a <_dtoa_r+0xd02>
  4082f4:	9b02      	ldr	r3, [sp, #8]
  4082f6:	425d      	negs	r5, r3
  4082f8:	4b84      	ldr	r3, [pc, #528]	; (40850c <_dtoa_r+0xda4>)
  4082fa:	f005 020f 	and.w	r2, r5, #15
  4082fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408302:	e9d3 2300 	ldrd	r2, r3, [r3]
  408306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40830a:	f002 f8c7 	bl	40a49c <__aeabi_dmul>
  40830e:	112d      	asrs	r5, r5, #4
  408310:	4607      	mov	r7, r0
  408312:	4688      	mov	r8, r1
  408314:	f000 812c 	beq.w	408570 <_dtoa_r+0xe08>
  408318:	4e7d      	ldr	r6, [pc, #500]	; (408510 <_dtoa_r+0xda8>)
  40831a:	f04f 0a02 	mov.w	sl, #2
  40831e:	07eb      	lsls	r3, r5, #31
  408320:	d509      	bpl.n	408336 <_dtoa_r+0xbce>
  408322:	4638      	mov	r0, r7
  408324:	4641      	mov	r1, r8
  408326:	e9d6 2300 	ldrd	r2, r3, [r6]
  40832a:	f002 f8b7 	bl	40a49c <__aeabi_dmul>
  40832e:	f10a 0a01 	add.w	sl, sl, #1
  408332:	4607      	mov	r7, r0
  408334:	4688      	mov	r8, r1
  408336:	106d      	asrs	r5, r5, #1
  408338:	f106 0608 	add.w	r6, r6, #8
  40833c:	d1ef      	bne.n	40831e <_dtoa_r+0xbb6>
  40833e:	e608      	b.n	407f52 <_dtoa_r+0x7ea>
  408340:	6871      	ldr	r1, [r6, #4]
  408342:	4620      	mov	r0, r4
  408344:	f000 fea0 	bl	409088 <_Balloc>
  408348:	6933      	ldr	r3, [r6, #16]
  40834a:	3302      	adds	r3, #2
  40834c:	009a      	lsls	r2, r3, #2
  40834e:	4605      	mov	r5, r0
  408350:	f106 010c 	add.w	r1, r6, #12
  408354:	300c      	adds	r0, #12
  408356:	f7fc f88f 	bl	404478 <memcpy>
  40835a:	4629      	mov	r1, r5
  40835c:	2201      	movs	r2, #1
  40835e:	4620      	mov	r0, r4
  408360:	f001 f83e 	bl	4093e0 <__lshift>
  408364:	9006      	str	r0, [sp, #24]
  408366:	e4b5      	b.n	407cd4 <_dtoa_r+0x56c>
  408368:	2b39      	cmp	r3, #57	; 0x39
  40836a:	f8cd b018 	str.w	fp, [sp, #24]
  40836e:	46d0      	mov	r8, sl
  408370:	f000 80a5 	beq.w	4084be <_dtoa_r+0xd56>
  408374:	f103 0a01 	add.w	sl, r3, #1
  408378:	46b3      	mov	fp, r6
  40837a:	f887 a000 	strb.w	sl, [r7]
  40837e:	1c7d      	adds	r5, r7, #1
  408380:	9e06      	ldr	r6, [sp, #24]
  408382:	e571      	b.n	407e68 <_dtoa_r+0x700>
  408384:	465a      	mov	r2, fp
  408386:	46d0      	mov	r8, sl
  408388:	46b3      	mov	fp, r6
  40838a:	469a      	mov	sl, r3
  40838c:	4616      	mov	r6, r2
  40838e:	e54f      	b.n	407e30 <_dtoa_r+0x6c8>
  408390:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408392:	495e      	ldr	r1, [pc, #376]	; (40850c <_dtoa_r+0xda4>)
  408394:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408398:	462a      	mov	r2, r5
  40839a:	4633      	mov	r3, r6
  40839c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4083a0:	f002 f87c 	bl	40a49c <__aeabi_dmul>
  4083a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4083a8:	4638      	mov	r0, r7
  4083aa:	4641      	mov	r1, r8
  4083ac:	f002 fb26 	bl	40a9fc <__aeabi_d2iz>
  4083b0:	4605      	mov	r5, r0
  4083b2:	f002 f80d 	bl	40a3d0 <__aeabi_i2d>
  4083b6:	460b      	mov	r3, r1
  4083b8:	4602      	mov	r2, r0
  4083ba:	4641      	mov	r1, r8
  4083bc:	4638      	mov	r0, r7
  4083be:	f001 feb9 	bl	40a134 <__aeabi_dsub>
  4083c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4083c4:	460f      	mov	r7, r1
  4083c6:	9904      	ldr	r1, [sp, #16]
  4083c8:	3530      	adds	r5, #48	; 0x30
  4083ca:	2b01      	cmp	r3, #1
  4083cc:	700d      	strb	r5, [r1, #0]
  4083ce:	4606      	mov	r6, r0
  4083d0:	f101 0501 	add.w	r5, r1, #1
  4083d4:	d026      	beq.n	408424 <_dtoa_r+0xcbc>
  4083d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4083d8:	9a04      	ldr	r2, [sp, #16]
  4083da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408518 <_dtoa_r+0xdb0>
  4083de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4083e2:	4413      	add	r3, r2
  4083e4:	f04f 0a00 	mov.w	sl, #0
  4083e8:	4699      	mov	r9, r3
  4083ea:	4652      	mov	r2, sl
  4083ec:	465b      	mov	r3, fp
  4083ee:	4630      	mov	r0, r6
  4083f0:	4639      	mov	r1, r7
  4083f2:	f002 f853 	bl	40a49c <__aeabi_dmul>
  4083f6:	460f      	mov	r7, r1
  4083f8:	4606      	mov	r6, r0
  4083fa:	f002 faff 	bl	40a9fc <__aeabi_d2iz>
  4083fe:	4680      	mov	r8, r0
  408400:	f001 ffe6 	bl	40a3d0 <__aeabi_i2d>
  408404:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408408:	4602      	mov	r2, r0
  40840a:	460b      	mov	r3, r1
  40840c:	4630      	mov	r0, r6
  40840e:	4639      	mov	r1, r7
  408410:	f001 fe90 	bl	40a134 <__aeabi_dsub>
  408414:	f805 8b01 	strb.w	r8, [r5], #1
  408418:	454d      	cmp	r5, r9
  40841a:	4606      	mov	r6, r0
  40841c:	460f      	mov	r7, r1
  40841e:	d1e4      	bne.n	4083ea <_dtoa_r+0xc82>
  408420:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408424:	4b3b      	ldr	r3, [pc, #236]	; (408514 <_dtoa_r+0xdac>)
  408426:	2200      	movs	r2, #0
  408428:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40842c:	f001 fe84 	bl	40a138 <__adddf3>
  408430:	4632      	mov	r2, r6
  408432:	463b      	mov	r3, r7
  408434:	f002 faa4 	bl	40a980 <__aeabi_dcmplt>
  408438:	2800      	cmp	r0, #0
  40843a:	d046      	beq.n	4084ca <_dtoa_r+0xd62>
  40843c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40843e:	9302      	str	r3, [sp, #8]
  408440:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408444:	f7ff bb43 	b.w	407ace <_dtoa_r+0x366>
  408448:	f04f 0800 	mov.w	r8, #0
  40844c:	4646      	mov	r6, r8
  40844e:	e6a9      	b.n	4081a4 <_dtoa_r+0xa3c>
  408450:	9b08      	ldr	r3, [sp, #32]
  408452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408454:	1a9d      	subs	r5, r3, r2
  408456:	2300      	movs	r3, #0
  408458:	f7ff bb71 	b.w	407b3e <_dtoa_r+0x3d6>
  40845c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40845e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408460:	9d08      	ldr	r5, [sp, #32]
  408462:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408466:	f7ff bb6a 	b.w	407b3e <_dtoa_r+0x3d6>
  40846a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40846e:	f04f 0a02 	mov.w	sl, #2
  408472:	e56e      	b.n	407f52 <_dtoa_r+0x7ea>
  408474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408476:	2b00      	cmp	r3, #0
  408478:	f43f aeb8 	beq.w	4081ec <_dtoa_r+0xa84>
  40847c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40847e:	2b00      	cmp	r3, #0
  408480:	f77f aede 	ble.w	408240 <_dtoa_r+0xad8>
  408484:	2200      	movs	r2, #0
  408486:	4b24      	ldr	r3, [pc, #144]	; (408518 <_dtoa_r+0xdb0>)
  408488:	4638      	mov	r0, r7
  40848a:	4641      	mov	r1, r8
  40848c:	f002 f806 	bl	40a49c <__aeabi_dmul>
  408490:	4607      	mov	r7, r0
  408492:	4688      	mov	r8, r1
  408494:	f10a 0001 	add.w	r0, sl, #1
  408498:	f001 ff9a 	bl	40a3d0 <__aeabi_i2d>
  40849c:	463a      	mov	r2, r7
  40849e:	4643      	mov	r3, r8
  4084a0:	f001 fffc 	bl	40a49c <__aeabi_dmul>
  4084a4:	2200      	movs	r2, #0
  4084a6:	4b17      	ldr	r3, [pc, #92]	; (408504 <_dtoa_r+0xd9c>)
  4084a8:	f001 fe46 	bl	40a138 <__adddf3>
  4084ac:	9a02      	ldr	r2, [sp, #8]
  4084ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4084b0:	9312      	str	r3, [sp, #72]	; 0x48
  4084b2:	3a01      	subs	r2, #1
  4084b4:	4605      	mov	r5, r0
  4084b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4084ba:	9215      	str	r2, [sp, #84]	; 0x54
  4084bc:	e56a      	b.n	407f94 <_dtoa_r+0x82c>
  4084be:	2239      	movs	r2, #57	; 0x39
  4084c0:	46b3      	mov	fp, r6
  4084c2:	703a      	strb	r2, [r7, #0]
  4084c4:	9e06      	ldr	r6, [sp, #24]
  4084c6:	1c7d      	adds	r5, r7, #1
  4084c8:	e4c0      	b.n	407e4c <_dtoa_r+0x6e4>
  4084ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4084ce:	2000      	movs	r0, #0
  4084d0:	4910      	ldr	r1, [pc, #64]	; (408514 <_dtoa_r+0xdac>)
  4084d2:	f001 fe2f 	bl	40a134 <__aeabi_dsub>
  4084d6:	4632      	mov	r2, r6
  4084d8:	463b      	mov	r3, r7
  4084da:	f002 fa6f 	bl	40a9bc <__aeabi_dcmpgt>
  4084de:	b908      	cbnz	r0, 4084e4 <_dtoa_r+0xd7c>
  4084e0:	e6ae      	b.n	408240 <_dtoa_r+0xad8>
  4084e2:	4615      	mov	r5, r2
  4084e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4084e8:	2b30      	cmp	r3, #48	; 0x30
  4084ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4084ee:	d0f8      	beq.n	4084e2 <_dtoa_r+0xd7a>
  4084f0:	e5d7      	b.n	4080a2 <_dtoa_r+0x93a>
  4084f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4084f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4084f8:	9302      	str	r3, [sp, #8]
  4084fa:	f7ff bae8 	b.w	407ace <_dtoa_r+0x366>
  4084fe:	970c      	str	r7, [sp, #48]	; 0x30
  408500:	f7ff bba5 	b.w	407c4e <_dtoa_r+0x4e6>
  408504:	401c0000 	.word	0x401c0000
  408508:	40140000 	.word	0x40140000
  40850c:	0040b228 	.word	0x0040b228
  408510:	0040b200 	.word	0x0040b200
  408514:	3fe00000 	.word	0x3fe00000
  408518:	40240000 	.word	0x40240000
  40851c:	2b39      	cmp	r3, #57	; 0x39
  40851e:	f8cd b018 	str.w	fp, [sp, #24]
  408522:	46d0      	mov	r8, sl
  408524:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408528:	469a      	mov	sl, r3
  40852a:	d0c8      	beq.n	4084be <_dtoa_r+0xd56>
  40852c:	f1bb 0f00 	cmp.w	fp, #0
  408530:	f73f aebf 	bgt.w	4082b2 <_dtoa_r+0xb4a>
  408534:	e6bf      	b.n	4082b6 <_dtoa_r+0xb4e>
  408536:	f47f aebe 	bne.w	4082b6 <_dtoa_r+0xb4e>
  40853a:	f01a 0f01 	tst.w	sl, #1
  40853e:	f43f aeba 	beq.w	4082b6 <_dtoa_r+0xb4e>
  408542:	e6b2      	b.n	4082aa <_dtoa_r+0xb42>
  408544:	f04f 0800 	mov.w	r8, #0
  408548:	4646      	mov	r6, r8
  40854a:	e5e9      	b.n	408120 <_dtoa_r+0x9b8>
  40854c:	4631      	mov	r1, r6
  40854e:	2300      	movs	r3, #0
  408550:	220a      	movs	r2, #10
  408552:	4620      	mov	r0, r4
  408554:	f000 fdc8 	bl	4090e8 <__multadd>
  408558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40855a:	2b00      	cmp	r3, #0
  40855c:	4606      	mov	r6, r0
  40855e:	dd0a      	ble.n	408576 <_dtoa_r+0xe0e>
  408560:	930a      	str	r3, [sp, #40]	; 0x28
  408562:	f7ff bbaa 	b.w	407cba <_dtoa_r+0x552>
  408566:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408568:	2b02      	cmp	r3, #2
  40856a:	dc23      	bgt.n	4085b4 <_dtoa_r+0xe4c>
  40856c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40856e:	e43b      	b.n	407de8 <_dtoa_r+0x680>
  408570:	f04f 0a02 	mov.w	sl, #2
  408574:	e4ed      	b.n	407f52 <_dtoa_r+0x7ea>
  408576:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408578:	2b02      	cmp	r3, #2
  40857a:	dc1b      	bgt.n	4085b4 <_dtoa_r+0xe4c>
  40857c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40857e:	e7ef      	b.n	408560 <_dtoa_r+0xdf8>
  408580:	2500      	movs	r5, #0
  408582:	6465      	str	r5, [r4, #68]	; 0x44
  408584:	4629      	mov	r1, r5
  408586:	4620      	mov	r0, r4
  408588:	f000 fd7e 	bl	409088 <_Balloc>
  40858c:	f04f 33ff 	mov.w	r3, #4294967295
  408590:	930a      	str	r3, [sp, #40]	; 0x28
  408592:	930f      	str	r3, [sp, #60]	; 0x3c
  408594:	2301      	movs	r3, #1
  408596:	9004      	str	r0, [sp, #16]
  408598:	9525      	str	r5, [sp, #148]	; 0x94
  40859a:	6420      	str	r0, [r4, #64]	; 0x40
  40859c:	930b      	str	r3, [sp, #44]	; 0x2c
  40859e:	f7ff b9dd 	b.w	40795c <_dtoa_r+0x1f4>
  4085a2:	2501      	movs	r5, #1
  4085a4:	f7ff b9a5 	b.w	4078f2 <_dtoa_r+0x18a>
  4085a8:	f43f ab69 	beq.w	407c7e <_dtoa_r+0x516>
  4085ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4085b0:	f7ff bbf9 	b.w	407da6 <_dtoa_r+0x63e>
  4085b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4085b6:	930a      	str	r3, [sp, #40]	; 0x28
  4085b8:	e5e5      	b.n	408186 <_dtoa_r+0xa1e>
  4085ba:	bf00      	nop

004085bc <__sflush_r>:
  4085bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4085c0:	b29a      	uxth	r2, r3
  4085c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085c6:	460d      	mov	r5, r1
  4085c8:	0711      	lsls	r1, r2, #28
  4085ca:	4680      	mov	r8, r0
  4085cc:	d43a      	bmi.n	408644 <__sflush_r+0x88>
  4085ce:	686a      	ldr	r2, [r5, #4]
  4085d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4085d4:	2a00      	cmp	r2, #0
  4085d6:	81ab      	strh	r3, [r5, #12]
  4085d8:	dd6f      	ble.n	4086ba <__sflush_r+0xfe>
  4085da:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4085dc:	2c00      	cmp	r4, #0
  4085de:	d049      	beq.n	408674 <__sflush_r+0xb8>
  4085e0:	2200      	movs	r2, #0
  4085e2:	b29b      	uxth	r3, r3
  4085e4:	f8d8 6000 	ldr.w	r6, [r8]
  4085e8:	f8c8 2000 	str.w	r2, [r8]
  4085ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4085f0:	d067      	beq.n	4086c2 <__sflush_r+0x106>
  4085f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4085f4:	075f      	lsls	r7, r3, #29
  4085f6:	d505      	bpl.n	408604 <__sflush_r+0x48>
  4085f8:	6869      	ldr	r1, [r5, #4]
  4085fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4085fc:	1a52      	subs	r2, r2, r1
  4085fe:	b10b      	cbz	r3, 408604 <__sflush_r+0x48>
  408600:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408602:	1ad2      	subs	r2, r2, r3
  408604:	2300      	movs	r3, #0
  408606:	69e9      	ldr	r1, [r5, #28]
  408608:	4640      	mov	r0, r8
  40860a:	47a0      	blx	r4
  40860c:	1c44      	adds	r4, r0, #1
  40860e:	d03c      	beq.n	40868a <__sflush_r+0xce>
  408610:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408614:	692a      	ldr	r2, [r5, #16]
  408616:	602a      	str	r2, [r5, #0]
  408618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40861c:	2200      	movs	r2, #0
  40861e:	81ab      	strh	r3, [r5, #12]
  408620:	04db      	lsls	r3, r3, #19
  408622:	606a      	str	r2, [r5, #4]
  408624:	d447      	bmi.n	4086b6 <__sflush_r+0xfa>
  408626:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408628:	f8c8 6000 	str.w	r6, [r8]
  40862c:	b311      	cbz	r1, 408674 <__sflush_r+0xb8>
  40862e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408632:	4299      	cmp	r1, r3
  408634:	d002      	beq.n	40863c <__sflush_r+0x80>
  408636:	4640      	mov	r0, r8
  408638:	f000 f95a 	bl	4088f0 <_free_r>
  40863c:	2000      	movs	r0, #0
  40863e:	6328      	str	r0, [r5, #48]	; 0x30
  408640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408644:	692e      	ldr	r6, [r5, #16]
  408646:	b1ae      	cbz	r6, 408674 <__sflush_r+0xb8>
  408648:	682c      	ldr	r4, [r5, #0]
  40864a:	602e      	str	r6, [r5, #0]
  40864c:	0791      	lsls	r1, r2, #30
  40864e:	bf0c      	ite	eq
  408650:	696b      	ldreq	r3, [r5, #20]
  408652:	2300      	movne	r3, #0
  408654:	1ba4      	subs	r4, r4, r6
  408656:	60ab      	str	r3, [r5, #8]
  408658:	e00a      	b.n	408670 <__sflush_r+0xb4>
  40865a:	4623      	mov	r3, r4
  40865c:	4632      	mov	r2, r6
  40865e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408660:	69e9      	ldr	r1, [r5, #28]
  408662:	4640      	mov	r0, r8
  408664:	47b8      	blx	r7
  408666:	2800      	cmp	r0, #0
  408668:	eba4 0400 	sub.w	r4, r4, r0
  40866c:	4406      	add	r6, r0
  40866e:	dd04      	ble.n	40867a <__sflush_r+0xbe>
  408670:	2c00      	cmp	r4, #0
  408672:	dcf2      	bgt.n	40865a <__sflush_r+0x9e>
  408674:	2000      	movs	r0, #0
  408676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40867a:	89ab      	ldrh	r3, [r5, #12]
  40867c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408680:	81ab      	strh	r3, [r5, #12]
  408682:	f04f 30ff 	mov.w	r0, #4294967295
  408686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40868a:	f8d8 4000 	ldr.w	r4, [r8]
  40868e:	2c1d      	cmp	r4, #29
  408690:	d8f3      	bhi.n	40867a <__sflush_r+0xbe>
  408692:	4b19      	ldr	r3, [pc, #100]	; (4086f8 <__sflush_r+0x13c>)
  408694:	40e3      	lsrs	r3, r4
  408696:	43db      	mvns	r3, r3
  408698:	f013 0301 	ands.w	r3, r3, #1
  40869c:	d1ed      	bne.n	40867a <__sflush_r+0xbe>
  40869e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4086a2:	606b      	str	r3, [r5, #4]
  4086a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4086a8:	6929      	ldr	r1, [r5, #16]
  4086aa:	81ab      	strh	r3, [r5, #12]
  4086ac:	04da      	lsls	r2, r3, #19
  4086ae:	6029      	str	r1, [r5, #0]
  4086b0:	d5b9      	bpl.n	408626 <__sflush_r+0x6a>
  4086b2:	2c00      	cmp	r4, #0
  4086b4:	d1b7      	bne.n	408626 <__sflush_r+0x6a>
  4086b6:	6528      	str	r0, [r5, #80]	; 0x50
  4086b8:	e7b5      	b.n	408626 <__sflush_r+0x6a>
  4086ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4086bc:	2a00      	cmp	r2, #0
  4086be:	dc8c      	bgt.n	4085da <__sflush_r+0x1e>
  4086c0:	e7d8      	b.n	408674 <__sflush_r+0xb8>
  4086c2:	2301      	movs	r3, #1
  4086c4:	69e9      	ldr	r1, [r5, #28]
  4086c6:	4640      	mov	r0, r8
  4086c8:	47a0      	blx	r4
  4086ca:	1c43      	adds	r3, r0, #1
  4086cc:	4602      	mov	r2, r0
  4086ce:	d002      	beq.n	4086d6 <__sflush_r+0x11a>
  4086d0:	89ab      	ldrh	r3, [r5, #12]
  4086d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4086d4:	e78e      	b.n	4085f4 <__sflush_r+0x38>
  4086d6:	f8d8 3000 	ldr.w	r3, [r8]
  4086da:	2b00      	cmp	r3, #0
  4086dc:	d0f8      	beq.n	4086d0 <__sflush_r+0x114>
  4086de:	2b1d      	cmp	r3, #29
  4086e0:	d001      	beq.n	4086e6 <__sflush_r+0x12a>
  4086e2:	2b16      	cmp	r3, #22
  4086e4:	d102      	bne.n	4086ec <__sflush_r+0x130>
  4086e6:	f8c8 6000 	str.w	r6, [r8]
  4086ea:	e7c3      	b.n	408674 <__sflush_r+0xb8>
  4086ec:	89ab      	ldrh	r3, [r5, #12]
  4086ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4086f2:	81ab      	strh	r3, [r5, #12]
  4086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4086f8:	20400001 	.word	0x20400001

004086fc <_fflush_r>:
  4086fc:	b538      	push	{r3, r4, r5, lr}
  4086fe:	460d      	mov	r5, r1
  408700:	4604      	mov	r4, r0
  408702:	b108      	cbz	r0, 408708 <_fflush_r+0xc>
  408704:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408706:	b1bb      	cbz	r3, 408738 <_fflush_r+0x3c>
  408708:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40870c:	b188      	cbz	r0, 408732 <_fflush_r+0x36>
  40870e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408710:	07db      	lsls	r3, r3, #31
  408712:	d401      	bmi.n	408718 <_fflush_r+0x1c>
  408714:	0581      	lsls	r1, r0, #22
  408716:	d517      	bpl.n	408748 <_fflush_r+0x4c>
  408718:	4620      	mov	r0, r4
  40871a:	4629      	mov	r1, r5
  40871c:	f7ff ff4e 	bl	4085bc <__sflush_r>
  408720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408722:	07da      	lsls	r2, r3, #31
  408724:	4604      	mov	r4, r0
  408726:	d402      	bmi.n	40872e <_fflush_r+0x32>
  408728:	89ab      	ldrh	r3, [r5, #12]
  40872a:	059b      	lsls	r3, r3, #22
  40872c:	d507      	bpl.n	40873e <_fflush_r+0x42>
  40872e:	4620      	mov	r0, r4
  408730:	bd38      	pop	{r3, r4, r5, pc}
  408732:	4604      	mov	r4, r0
  408734:	4620      	mov	r0, r4
  408736:	bd38      	pop	{r3, r4, r5, pc}
  408738:	f000 f838 	bl	4087ac <__sinit>
  40873c:	e7e4      	b.n	408708 <_fflush_r+0xc>
  40873e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408740:	f000 fb72 	bl	408e28 <__retarget_lock_release_recursive>
  408744:	4620      	mov	r0, r4
  408746:	bd38      	pop	{r3, r4, r5, pc}
  408748:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40874a:	f000 fb6b 	bl	408e24 <__retarget_lock_acquire_recursive>
  40874e:	e7e3      	b.n	408718 <_fflush_r+0x1c>

00408750 <_cleanup_r>:
  408750:	4901      	ldr	r1, [pc, #4]	; (408758 <_cleanup_r+0x8>)
  408752:	f000 bb2b 	b.w	408dac <_fwalk_reent>
  408756:	bf00      	nop
  408758:	00409d55 	.word	0x00409d55

0040875c <std.isra.0>:
  40875c:	b510      	push	{r4, lr}
  40875e:	2300      	movs	r3, #0
  408760:	4604      	mov	r4, r0
  408762:	8181      	strh	r1, [r0, #12]
  408764:	81c2      	strh	r2, [r0, #14]
  408766:	6003      	str	r3, [r0, #0]
  408768:	6043      	str	r3, [r0, #4]
  40876a:	6083      	str	r3, [r0, #8]
  40876c:	6643      	str	r3, [r0, #100]	; 0x64
  40876e:	6103      	str	r3, [r0, #16]
  408770:	6143      	str	r3, [r0, #20]
  408772:	6183      	str	r3, [r0, #24]
  408774:	4619      	mov	r1, r3
  408776:	2208      	movs	r2, #8
  408778:	305c      	adds	r0, #92	; 0x5c
  40877a:	f7fb ff17 	bl	4045ac <memset>
  40877e:	4807      	ldr	r0, [pc, #28]	; (40879c <std.isra.0+0x40>)
  408780:	4907      	ldr	r1, [pc, #28]	; (4087a0 <std.isra.0+0x44>)
  408782:	4a08      	ldr	r2, [pc, #32]	; (4087a4 <std.isra.0+0x48>)
  408784:	4b08      	ldr	r3, [pc, #32]	; (4087a8 <std.isra.0+0x4c>)
  408786:	6220      	str	r0, [r4, #32]
  408788:	61e4      	str	r4, [r4, #28]
  40878a:	6261      	str	r1, [r4, #36]	; 0x24
  40878c:	62a2      	str	r2, [r4, #40]	; 0x28
  40878e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408790:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408798:	f000 bb40 	b.w	408e1c <__retarget_lock_init_recursive>
  40879c:	004099c9 	.word	0x004099c9
  4087a0:	004099ed 	.word	0x004099ed
  4087a4:	00409a29 	.word	0x00409a29
  4087a8:	00409a49 	.word	0x00409a49

004087ac <__sinit>:
  4087ac:	b510      	push	{r4, lr}
  4087ae:	4604      	mov	r4, r0
  4087b0:	4812      	ldr	r0, [pc, #72]	; (4087fc <__sinit+0x50>)
  4087b2:	f000 fb37 	bl	408e24 <__retarget_lock_acquire_recursive>
  4087b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4087b8:	b9d2      	cbnz	r2, 4087f0 <__sinit+0x44>
  4087ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4087be:	4810      	ldr	r0, [pc, #64]	; (408800 <__sinit+0x54>)
  4087c0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4087c4:	2103      	movs	r1, #3
  4087c6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4087ca:	63e0      	str	r0, [r4, #60]	; 0x3c
  4087cc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4087d0:	6860      	ldr	r0, [r4, #4]
  4087d2:	2104      	movs	r1, #4
  4087d4:	f7ff ffc2 	bl	40875c <std.isra.0>
  4087d8:	2201      	movs	r2, #1
  4087da:	2109      	movs	r1, #9
  4087dc:	68a0      	ldr	r0, [r4, #8]
  4087de:	f7ff ffbd 	bl	40875c <std.isra.0>
  4087e2:	2202      	movs	r2, #2
  4087e4:	2112      	movs	r1, #18
  4087e6:	68e0      	ldr	r0, [r4, #12]
  4087e8:	f7ff ffb8 	bl	40875c <std.isra.0>
  4087ec:	2301      	movs	r3, #1
  4087ee:	63a3      	str	r3, [r4, #56]	; 0x38
  4087f0:	4802      	ldr	r0, [pc, #8]	; (4087fc <__sinit+0x50>)
  4087f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4087f6:	f000 bb17 	b.w	408e28 <__retarget_lock_release_recursive>
  4087fa:	bf00      	nop
  4087fc:	20400e68 	.word	0x20400e68
  408800:	00408751 	.word	0x00408751

00408804 <__sfp_lock_acquire>:
  408804:	4801      	ldr	r0, [pc, #4]	; (40880c <__sfp_lock_acquire+0x8>)
  408806:	f000 bb0d 	b.w	408e24 <__retarget_lock_acquire_recursive>
  40880a:	bf00      	nop
  40880c:	20400e7c 	.word	0x20400e7c

00408810 <__sfp_lock_release>:
  408810:	4801      	ldr	r0, [pc, #4]	; (408818 <__sfp_lock_release+0x8>)
  408812:	f000 bb09 	b.w	408e28 <__retarget_lock_release_recursive>
  408816:	bf00      	nop
  408818:	20400e7c 	.word	0x20400e7c

0040881c <__libc_fini_array>:
  40881c:	b538      	push	{r3, r4, r5, lr}
  40881e:	4c0a      	ldr	r4, [pc, #40]	; (408848 <__libc_fini_array+0x2c>)
  408820:	4d0a      	ldr	r5, [pc, #40]	; (40884c <__libc_fini_array+0x30>)
  408822:	1b64      	subs	r4, r4, r5
  408824:	10a4      	asrs	r4, r4, #2
  408826:	d00a      	beq.n	40883e <__libc_fini_array+0x22>
  408828:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40882c:	3b01      	subs	r3, #1
  40882e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408832:	3c01      	subs	r4, #1
  408834:	f855 3904 	ldr.w	r3, [r5], #-4
  408838:	4798      	blx	r3
  40883a:	2c00      	cmp	r4, #0
  40883c:	d1f9      	bne.n	408832 <__libc_fini_array+0x16>
  40883e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408842:	f002 bded 	b.w	40b420 <_fini>
  408846:	bf00      	nop
  408848:	0040b430 	.word	0x0040b430
  40884c:	0040b42c 	.word	0x0040b42c

00408850 <_malloc_trim_r>:
  408850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408852:	4f24      	ldr	r7, [pc, #144]	; (4088e4 <_malloc_trim_r+0x94>)
  408854:	460c      	mov	r4, r1
  408856:	4606      	mov	r6, r0
  408858:	f7fb fef6 	bl	404648 <__malloc_lock>
  40885c:	68bb      	ldr	r3, [r7, #8]
  40885e:	685d      	ldr	r5, [r3, #4]
  408860:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408864:	310f      	adds	r1, #15
  408866:	f025 0503 	bic.w	r5, r5, #3
  40886a:	4429      	add	r1, r5
  40886c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408870:	f021 010f 	bic.w	r1, r1, #15
  408874:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408878:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40887c:	db07      	blt.n	40888e <_malloc_trim_r+0x3e>
  40887e:	2100      	movs	r1, #0
  408880:	4630      	mov	r0, r6
  408882:	f7fb ff57 	bl	404734 <_sbrk_r>
  408886:	68bb      	ldr	r3, [r7, #8]
  408888:	442b      	add	r3, r5
  40888a:	4298      	cmp	r0, r3
  40888c:	d004      	beq.n	408898 <_malloc_trim_r+0x48>
  40888e:	4630      	mov	r0, r6
  408890:	f7fb fee0 	bl	404654 <__malloc_unlock>
  408894:	2000      	movs	r0, #0
  408896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408898:	4261      	negs	r1, r4
  40889a:	4630      	mov	r0, r6
  40889c:	f7fb ff4a 	bl	404734 <_sbrk_r>
  4088a0:	3001      	adds	r0, #1
  4088a2:	d00d      	beq.n	4088c0 <_malloc_trim_r+0x70>
  4088a4:	4b10      	ldr	r3, [pc, #64]	; (4088e8 <_malloc_trim_r+0x98>)
  4088a6:	68ba      	ldr	r2, [r7, #8]
  4088a8:	6819      	ldr	r1, [r3, #0]
  4088aa:	1b2d      	subs	r5, r5, r4
  4088ac:	f045 0501 	orr.w	r5, r5, #1
  4088b0:	4630      	mov	r0, r6
  4088b2:	1b09      	subs	r1, r1, r4
  4088b4:	6055      	str	r5, [r2, #4]
  4088b6:	6019      	str	r1, [r3, #0]
  4088b8:	f7fb fecc 	bl	404654 <__malloc_unlock>
  4088bc:	2001      	movs	r0, #1
  4088be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4088c0:	2100      	movs	r1, #0
  4088c2:	4630      	mov	r0, r6
  4088c4:	f7fb ff36 	bl	404734 <_sbrk_r>
  4088c8:	68ba      	ldr	r2, [r7, #8]
  4088ca:	1a83      	subs	r3, r0, r2
  4088cc:	2b0f      	cmp	r3, #15
  4088ce:	ddde      	ble.n	40888e <_malloc_trim_r+0x3e>
  4088d0:	4c06      	ldr	r4, [pc, #24]	; (4088ec <_malloc_trim_r+0x9c>)
  4088d2:	4905      	ldr	r1, [pc, #20]	; (4088e8 <_malloc_trim_r+0x98>)
  4088d4:	6824      	ldr	r4, [r4, #0]
  4088d6:	f043 0301 	orr.w	r3, r3, #1
  4088da:	1b00      	subs	r0, r0, r4
  4088dc:	6053      	str	r3, [r2, #4]
  4088de:	6008      	str	r0, [r1, #0]
  4088e0:	e7d5      	b.n	40888e <_malloc_trim_r+0x3e>
  4088e2:	bf00      	nop
  4088e4:	20400458 	.word	0x20400458
  4088e8:	20400db8 	.word	0x20400db8
  4088ec:	20400860 	.word	0x20400860

004088f0 <_free_r>:
  4088f0:	2900      	cmp	r1, #0
  4088f2:	d044      	beq.n	40897e <_free_r+0x8e>
  4088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088f8:	460d      	mov	r5, r1
  4088fa:	4680      	mov	r8, r0
  4088fc:	f7fb fea4 	bl	404648 <__malloc_lock>
  408900:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408904:	4969      	ldr	r1, [pc, #420]	; (408aac <_free_r+0x1bc>)
  408906:	f027 0301 	bic.w	r3, r7, #1
  40890a:	f1a5 0408 	sub.w	r4, r5, #8
  40890e:	18e2      	adds	r2, r4, r3
  408910:	688e      	ldr	r6, [r1, #8]
  408912:	6850      	ldr	r0, [r2, #4]
  408914:	42b2      	cmp	r2, r6
  408916:	f020 0003 	bic.w	r0, r0, #3
  40891a:	d05e      	beq.n	4089da <_free_r+0xea>
  40891c:	07fe      	lsls	r6, r7, #31
  40891e:	6050      	str	r0, [r2, #4]
  408920:	d40b      	bmi.n	40893a <_free_r+0x4a>
  408922:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408926:	1be4      	subs	r4, r4, r7
  408928:	f101 0e08 	add.w	lr, r1, #8
  40892c:	68a5      	ldr	r5, [r4, #8]
  40892e:	4575      	cmp	r5, lr
  408930:	443b      	add	r3, r7
  408932:	d06d      	beq.n	408a10 <_free_r+0x120>
  408934:	68e7      	ldr	r7, [r4, #12]
  408936:	60ef      	str	r7, [r5, #12]
  408938:	60bd      	str	r5, [r7, #8]
  40893a:	1815      	adds	r5, r2, r0
  40893c:	686d      	ldr	r5, [r5, #4]
  40893e:	07ed      	lsls	r5, r5, #31
  408940:	d53e      	bpl.n	4089c0 <_free_r+0xd0>
  408942:	f043 0201 	orr.w	r2, r3, #1
  408946:	6062      	str	r2, [r4, #4]
  408948:	50e3      	str	r3, [r4, r3]
  40894a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40894e:	d217      	bcs.n	408980 <_free_r+0x90>
  408950:	08db      	lsrs	r3, r3, #3
  408952:	1c58      	adds	r0, r3, #1
  408954:	109a      	asrs	r2, r3, #2
  408956:	684d      	ldr	r5, [r1, #4]
  408958:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40895c:	60a7      	str	r7, [r4, #8]
  40895e:	2301      	movs	r3, #1
  408960:	4093      	lsls	r3, r2
  408962:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408966:	432b      	orrs	r3, r5
  408968:	3a08      	subs	r2, #8
  40896a:	60e2      	str	r2, [r4, #12]
  40896c:	604b      	str	r3, [r1, #4]
  40896e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408972:	60fc      	str	r4, [r7, #12]
  408974:	4640      	mov	r0, r8
  408976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40897a:	f7fb be6b 	b.w	404654 <__malloc_unlock>
  40897e:	4770      	bx	lr
  408980:	0a5a      	lsrs	r2, r3, #9
  408982:	2a04      	cmp	r2, #4
  408984:	d852      	bhi.n	408a2c <_free_r+0x13c>
  408986:	099a      	lsrs	r2, r3, #6
  408988:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40898c:	00ff      	lsls	r7, r7, #3
  40898e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408992:	19c8      	adds	r0, r1, r7
  408994:	59ca      	ldr	r2, [r1, r7]
  408996:	3808      	subs	r0, #8
  408998:	4290      	cmp	r0, r2
  40899a:	d04f      	beq.n	408a3c <_free_r+0x14c>
  40899c:	6851      	ldr	r1, [r2, #4]
  40899e:	f021 0103 	bic.w	r1, r1, #3
  4089a2:	428b      	cmp	r3, r1
  4089a4:	d232      	bcs.n	408a0c <_free_r+0x11c>
  4089a6:	6892      	ldr	r2, [r2, #8]
  4089a8:	4290      	cmp	r0, r2
  4089aa:	d1f7      	bne.n	40899c <_free_r+0xac>
  4089ac:	68c3      	ldr	r3, [r0, #12]
  4089ae:	60a0      	str	r0, [r4, #8]
  4089b0:	60e3      	str	r3, [r4, #12]
  4089b2:	609c      	str	r4, [r3, #8]
  4089b4:	60c4      	str	r4, [r0, #12]
  4089b6:	4640      	mov	r0, r8
  4089b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4089bc:	f7fb be4a 	b.w	404654 <__malloc_unlock>
  4089c0:	6895      	ldr	r5, [r2, #8]
  4089c2:	4f3b      	ldr	r7, [pc, #236]	; (408ab0 <_free_r+0x1c0>)
  4089c4:	42bd      	cmp	r5, r7
  4089c6:	4403      	add	r3, r0
  4089c8:	d040      	beq.n	408a4c <_free_r+0x15c>
  4089ca:	68d0      	ldr	r0, [r2, #12]
  4089cc:	60e8      	str	r0, [r5, #12]
  4089ce:	f043 0201 	orr.w	r2, r3, #1
  4089d2:	6085      	str	r5, [r0, #8]
  4089d4:	6062      	str	r2, [r4, #4]
  4089d6:	50e3      	str	r3, [r4, r3]
  4089d8:	e7b7      	b.n	40894a <_free_r+0x5a>
  4089da:	07ff      	lsls	r7, r7, #31
  4089dc:	4403      	add	r3, r0
  4089de:	d407      	bmi.n	4089f0 <_free_r+0x100>
  4089e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4089e4:	1aa4      	subs	r4, r4, r2
  4089e6:	4413      	add	r3, r2
  4089e8:	68a0      	ldr	r0, [r4, #8]
  4089ea:	68e2      	ldr	r2, [r4, #12]
  4089ec:	60c2      	str	r2, [r0, #12]
  4089ee:	6090      	str	r0, [r2, #8]
  4089f0:	4a30      	ldr	r2, [pc, #192]	; (408ab4 <_free_r+0x1c4>)
  4089f2:	6812      	ldr	r2, [r2, #0]
  4089f4:	f043 0001 	orr.w	r0, r3, #1
  4089f8:	4293      	cmp	r3, r2
  4089fa:	6060      	str	r0, [r4, #4]
  4089fc:	608c      	str	r4, [r1, #8]
  4089fe:	d3b9      	bcc.n	408974 <_free_r+0x84>
  408a00:	4b2d      	ldr	r3, [pc, #180]	; (408ab8 <_free_r+0x1c8>)
  408a02:	4640      	mov	r0, r8
  408a04:	6819      	ldr	r1, [r3, #0]
  408a06:	f7ff ff23 	bl	408850 <_malloc_trim_r>
  408a0a:	e7b3      	b.n	408974 <_free_r+0x84>
  408a0c:	4610      	mov	r0, r2
  408a0e:	e7cd      	b.n	4089ac <_free_r+0xbc>
  408a10:	1811      	adds	r1, r2, r0
  408a12:	6849      	ldr	r1, [r1, #4]
  408a14:	07c9      	lsls	r1, r1, #31
  408a16:	d444      	bmi.n	408aa2 <_free_r+0x1b2>
  408a18:	6891      	ldr	r1, [r2, #8]
  408a1a:	68d2      	ldr	r2, [r2, #12]
  408a1c:	60ca      	str	r2, [r1, #12]
  408a1e:	4403      	add	r3, r0
  408a20:	f043 0001 	orr.w	r0, r3, #1
  408a24:	6091      	str	r1, [r2, #8]
  408a26:	6060      	str	r0, [r4, #4]
  408a28:	50e3      	str	r3, [r4, r3]
  408a2a:	e7a3      	b.n	408974 <_free_r+0x84>
  408a2c:	2a14      	cmp	r2, #20
  408a2e:	d816      	bhi.n	408a5e <_free_r+0x16e>
  408a30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408a34:	00ff      	lsls	r7, r7, #3
  408a36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408a3a:	e7aa      	b.n	408992 <_free_r+0xa2>
  408a3c:	10aa      	asrs	r2, r5, #2
  408a3e:	2301      	movs	r3, #1
  408a40:	684d      	ldr	r5, [r1, #4]
  408a42:	4093      	lsls	r3, r2
  408a44:	432b      	orrs	r3, r5
  408a46:	604b      	str	r3, [r1, #4]
  408a48:	4603      	mov	r3, r0
  408a4a:	e7b0      	b.n	4089ae <_free_r+0xbe>
  408a4c:	f043 0201 	orr.w	r2, r3, #1
  408a50:	614c      	str	r4, [r1, #20]
  408a52:	610c      	str	r4, [r1, #16]
  408a54:	60e5      	str	r5, [r4, #12]
  408a56:	60a5      	str	r5, [r4, #8]
  408a58:	6062      	str	r2, [r4, #4]
  408a5a:	50e3      	str	r3, [r4, r3]
  408a5c:	e78a      	b.n	408974 <_free_r+0x84>
  408a5e:	2a54      	cmp	r2, #84	; 0x54
  408a60:	d806      	bhi.n	408a70 <_free_r+0x180>
  408a62:	0b1a      	lsrs	r2, r3, #12
  408a64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408a68:	00ff      	lsls	r7, r7, #3
  408a6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408a6e:	e790      	b.n	408992 <_free_r+0xa2>
  408a70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408a74:	d806      	bhi.n	408a84 <_free_r+0x194>
  408a76:	0bda      	lsrs	r2, r3, #15
  408a78:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408a7c:	00ff      	lsls	r7, r7, #3
  408a7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408a82:	e786      	b.n	408992 <_free_r+0xa2>
  408a84:	f240 5054 	movw	r0, #1364	; 0x554
  408a88:	4282      	cmp	r2, r0
  408a8a:	d806      	bhi.n	408a9a <_free_r+0x1aa>
  408a8c:	0c9a      	lsrs	r2, r3, #18
  408a8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408a92:	00ff      	lsls	r7, r7, #3
  408a94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408a98:	e77b      	b.n	408992 <_free_r+0xa2>
  408a9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408a9e:	257e      	movs	r5, #126	; 0x7e
  408aa0:	e777      	b.n	408992 <_free_r+0xa2>
  408aa2:	f043 0101 	orr.w	r1, r3, #1
  408aa6:	6061      	str	r1, [r4, #4]
  408aa8:	6013      	str	r3, [r2, #0]
  408aaa:	e763      	b.n	408974 <_free_r+0x84>
  408aac:	20400458 	.word	0x20400458
  408ab0:	20400460 	.word	0x20400460
  408ab4:	20400864 	.word	0x20400864
  408ab8:	20400de8 	.word	0x20400de8

00408abc <__sfvwrite_r>:
  408abc:	6893      	ldr	r3, [r2, #8]
  408abe:	2b00      	cmp	r3, #0
  408ac0:	d073      	beq.n	408baa <__sfvwrite_r+0xee>
  408ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ac6:	898b      	ldrh	r3, [r1, #12]
  408ac8:	b083      	sub	sp, #12
  408aca:	460c      	mov	r4, r1
  408acc:	0719      	lsls	r1, r3, #28
  408ace:	9000      	str	r0, [sp, #0]
  408ad0:	4616      	mov	r6, r2
  408ad2:	d526      	bpl.n	408b22 <__sfvwrite_r+0x66>
  408ad4:	6922      	ldr	r2, [r4, #16]
  408ad6:	b322      	cbz	r2, 408b22 <__sfvwrite_r+0x66>
  408ad8:	f013 0002 	ands.w	r0, r3, #2
  408adc:	6835      	ldr	r5, [r6, #0]
  408ade:	d02c      	beq.n	408b3a <__sfvwrite_r+0x7e>
  408ae0:	f04f 0900 	mov.w	r9, #0
  408ae4:	4fb0      	ldr	r7, [pc, #704]	; (408da8 <__sfvwrite_r+0x2ec>)
  408ae6:	46c8      	mov	r8, r9
  408ae8:	46b2      	mov	sl, r6
  408aea:	45b8      	cmp	r8, r7
  408aec:	4643      	mov	r3, r8
  408aee:	464a      	mov	r2, r9
  408af0:	bf28      	it	cs
  408af2:	463b      	movcs	r3, r7
  408af4:	9800      	ldr	r0, [sp, #0]
  408af6:	f1b8 0f00 	cmp.w	r8, #0
  408afa:	d050      	beq.n	408b9e <__sfvwrite_r+0xe2>
  408afc:	69e1      	ldr	r1, [r4, #28]
  408afe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408b00:	47b0      	blx	r6
  408b02:	2800      	cmp	r0, #0
  408b04:	dd58      	ble.n	408bb8 <__sfvwrite_r+0xfc>
  408b06:	f8da 3008 	ldr.w	r3, [sl, #8]
  408b0a:	1a1b      	subs	r3, r3, r0
  408b0c:	4481      	add	r9, r0
  408b0e:	eba8 0800 	sub.w	r8, r8, r0
  408b12:	f8ca 3008 	str.w	r3, [sl, #8]
  408b16:	2b00      	cmp	r3, #0
  408b18:	d1e7      	bne.n	408aea <__sfvwrite_r+0x2e>
  408b1a:	2000      	movs	r0, #0
  408b1c:	b003      	add	sp, #12
  408b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b22:	4621      	mov	r1, r4
  408b24:	9800      	ldr	r0, [sp, #0]
  408b26:	f7fe fd15 	bl	407554 <__swsetup_r>
  408b2a:	2800      	cmp	r0, #0
  408b2c:	f040 8133 	bne.w	408d96 <__sfvwrite_r+0x2da>
  408b30:	89a3      	ldrh	r3, [r4, #12]
  408b32:	6835      	ldr	r5, [r6, #0]
  408b34:	f013 0002 	ands.w	r0, r3, #2
  408b38:	d1d2      	bne.n	408ae0 <__sfvwrite_r+0x24>
  408b3a:	f013 0901 	ands.w	r9, r3, #1
  408b3e:	d145      	bne.n	408bcc <__sfvwrite_r+0x110>
  408b40:	464f      	mov	r7, r9
  408b42:	9601      	str	r6, [sp, #4]
  408b44:	b337      	cbz	r7, 408b94 <__sfvwrite_r+0xd8>
  408b46:	059a      	lsls	r2, r3, #22
  408b48:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408b4c:	f140 8083 	bpl.w	408c56 <__sfvwrite_r+0x19a>
  408b50:	4547      	cmp	r7, r8
  408b52:	46c3      	mov	fp, r8
  408b54:	f0c0 80ab 	bcc.w	408cae <__sfvwrite_r+0x1f2>
  408b58:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408b5c:	f040 80ac 	bne.w	408cb8 <__sfvwrite_r+0x1fc>
  408b60:	6820      	ldr	r0, [r4, #0]
  408b62:	46ba      	mov	sl, r7
  408b64:	465a      	mov	r2, fp
  408b66:	4649      	mov	r1, r9
  408b68:	f000 fa2a 	bl	408fc0 <memmove>
  408b6c:	68a2      	ldr	r2, [r4, #8]
  408b6e:	6823      	ldr	r3, [r4, #0]
  408b70:	eba2 0208 	sub.w	r2, r2, r8
  408b74:	445b      	add	r3, fp
  408b76:	60a2      	str	r2, [r4, #8]
  408b78:	6023      	str	r3, [r4, #0]
  408b7a:	9a01      	ldr	r2, [sp, #4]
  408b7c:	6893      	ldr	r3, [r2, #8]
  408b7e:	eba3 030a 	sub.w	r3, r3, sl
  408b82:	44d1      	add	r9, sl
  408b84:	eba7 070a 	sub.w	r7, r7, sl
  408b88:	6093      	str	r3, [r2, #8]
  408b8a:	2b00      	cmp	r3, #0
  408b8c:	d0c5      	beq.n	408b1a <__sfvwrite_r+0x5e>
  408b8e:	89a3      	ldrh	r3, [r4, #12]
  408b90:	2f00      	cmp	r7, #0
  408b92:	d1d8      	bne.n	408b46 <__sfvwrite_r+0x8a>
  408b94:	f8d5 9000 	ldr.w	r9, [r5]
  408b98:	686f      	ldr	r7, [r5, #4]
  408b9a:	3508      	adds	r5, #8
  408b9c:	e7d2      	b.n	408b44 <__sfvwrite_r+0x88>
  408b9e:	f8d5 9000 	ldr.w	r9, [r5]
  408ba2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408ba6:	3508      	adds	r5, #8
  408ba8:	e79f      	b.n	408aea <__sfvwrite_r+0x2e>
  408baa:	2000      	movs	r0, #0
  408bac:	4770      	bx	lr
  408bae:	4621      	mov	r1, r4
  408bb0:	9800      	ldr	r0, [sp, #0]
  408bb2:	f7ff fda3 	bl	4086fc <_fflush_r>
  408bb6:	b370      	cbz	r0, 408c16 <__sfvwrite_r+0x15a>
  408bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408bc0:	f04f 30ff 	mov.w	r0, #4294967295
  408bc4:	81a3      	strh	r3, [r4, #12]
  408bc6:	b003      	add	sp, #12
  408bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bcc:	4681      	mov	r9, r0
  408bce:	4633      	mov	r3, r6
  408bd0:	464e      	mov	r6, r9
  408bd2:	46a8      	mov	r8, r5
  408bd4:	469a      	mov	sl, r3
  408bd6:	464d      	mov	r5, r9
  408bd8:	b34e      	cbz	r6, 408c2e <__sfvwrite_r+0x172>
  408bda:	b380      	cbz	r0, 408c3e <__sfvwrite_r+0x182>
  408bdc:	6820      	ldr	r0, [r4, #0]
  408bde:	6923      	ldr	r3, [r4, #16]
  408be0:	6962      	ldr	r2, [r4, #20]
  408be2:	45b1      	cmp	r9, r6
  408be4:	46cb      	mov	fp, r9
  408be6:	bf28      	it	cs
  408be8:	46b3      	movcs	fp, r6
  408bea:	4298      	cmp	r0, r3
  408bec:	465f      	mov	r7, fp
  408bee:	d904      	bls.n	408bfa <__sfvwrite_r+0x13e>
  408bf0:	68a3      	ldr	r3, [r4, #8]
  408bf2:	4413      	add	r3, r2
  408bf4:	459b      	cmp	fp, r3
  408bf6:	f300 80a6 	bgt.w	408d46 <__sfvwrite_r+0x28a>
  408bfa:	4593      	cmp	fp, r2
  408bfc:	db4b      	blt.n	408c96 <__sfvwrite_r+0x1da>
  408bfe:	4613      	mov	r3, r2
  408c00:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408c02:	69e1      	ldr	r1, [r4, #28]
  408c04:	9800      	ldr	r0, [sp, #0]
  408c06:	462a      	mov	r2, r5
  408c08:	47b8      	blx	r7
  408c0a:	1e07      	subs	r7, r0, #0
  408c0c:	ddd4      	ble.n	408bb8 <__sfvwrite_r+0xfc>
  408c0e:	ebb9 0907 	subs.w	r9, r9, r7
  408c12:	d0cc      	beq.n	408bae <__sfvwrite_r+0xf2>
  408c14:	2001      	movs	r0, #1
  408c16:	f8da 3008 	ldr.w	r3, [sl, #8]
  408c1a:	1bdb      	subs	r3, r3, r7
  408c1c:	443d      	add	r5, r7
  408c1e:	1bf6      	subs	r6, r6, r7
  408c20:	f8ca 3008 	str.w	r3, [sl, #8]
  408c24:	2b00      	cmp	r3, #0
  408c26:	f43f af78 	beq.w	408b1a <__sfvwrite_r+0x5e>
  408c2a:	2e00      	cmp	r6, #0
  408c2c:	d1d5      	bne.n	408bda <__sfvwrite_r+0x11e>
  408c2e:	f108 0308 	add.w	r3, r8, #8
  408c32:	e913 0060 	ldmdb	r3, {r5, r6}
  408c36:	4698      	mov	r8, r3
  408c38:	3308      	adds	r3, #8
  408c3a:	2e00      	cmp	r6, #0
  408c3c:	d0f9      	beq.n	408c32 <__sfvwrite_r+0x176>
  408c3e:	4632      	mov	r2, r6
  408c40:	210a      	movs	r1, #10
  408c42:	4628      	mov	r0, r5
  408c44:	f000 f96c 	bl	408f20 <memchr>
  408c48:	2800      	cmp	r0, #0
  408c4a:	f000 80a1 	beq.w	408d90 <__sfvwrite_r+0x2d4>
  408c4e:	3001      	adds	r0, #1
  408c50:	eba0 0905 	sub.w	r9, r0, r5
  408c54:	e7c2      	b.n	408bdc <__sfvwrite_r+0x120>
  408c56:	6820      	ldr	r0, [r4, #0]
  408c58:	6923      	ldr	r3, [r4, #16]
  408c5a:	4298      	cmp	r0, r3
  408c5c:	d802      	bhi.n	408c64 <__sfvwrite_r+0x1a8>
  408c5e:	6963      	ldr	r3, [r4, #20]
  408c60:	429f      	cmp	r7, r3
  408c62:	d25d      	bcs.n	408d20 <__sfvwrite_r+0x264>
  408c64:	45b8      	cmp	r8, r7
  408c66:	bf28      	it	cs
  408c68:	46b8      	movcs	r8, r7
  408c6a:	4642      	mov	r2, r8
  408c6c:	4649      	mov	r1, r9
  408c6e:	f000 f9a7 	bl	408fc0 <memmove>
  408c72:	68a3      	ldr	r3, [r4, #8]
  408c74:	6822      	ldr	r2, [r4, #0]
  408c76:	eba3 0308 	sub.w	r3, r3, r8
  408c7a:	4442      	add	r2, r8
  408c7c:	60a3      	str	r3, [r4, #8]
  408c7e:	6022      	str	r2, [r4, #0]
  408c80:	b10b      	cbz	r3, 408c86 <__sfvwrite_r+0x1ca>
  408c82:	46c2      	mov	sl, r8
  408c84:	e779      	b.n	408b7a <__sfvwrite_r+0xbe>
  408c86:	4621      	mov	r1, r4
  408c88:	9800      	ldr	r0, [sp, #0]
  408c8a:	f7ff fd37 	bl	4086fc <_fflush_r>
  408c8e:	2800      	cmp	r0, #0
  408c90:	d192      	bne.n	408bb8 <__sfvwrite_r+0xfc>
  408c92:	46c2      	mov	sl, r8
  408c94:	e771      	b.n	408b7a <__sfvwrite_r+0xbe>
  408c96:	465a      	mov	r2, fp
  408c98:	4629      	mov	r1, r5
  408c9a:	f000 f991 	bl	408fc0 <memmove>
  408c9e:	68a2      	ldr	r2, [r4, #8]
  408ca0:	6823      	ldr	r3, [r4, #0]
  408ca2:	eba2 020b 	sub.w	r2, r2, fp
  408ca6:	445b      	add	r3, fp
  408ca8:	60a2      	str	r2, [r4, #8]
  408caa:	6023      	str	r3, [r4, #0]
  408cac:	e7af      	b.n	408c0e <__sfvwrite_r+0x152>
  408cae:	6820      	ldr	r0, [r4, #0]
  408cb0:	46b8      	mov	r8, r7
  408cb2:	46ba      	mov	sl, r7
  408cb4:	46bb      	mov	fp, r7
  408cb6:	e755      	b.n	408b64 <__sfvwrite_r+0xa8>
  408cb8:	6962      	ldr	r2, [r4, #20]
  408cba:	6820      	ldr	r0, [r4, #0]
  408cbc:	6921      	ldr	r1, [r4, #16]
  408cbe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408cc2:	eba0 0a01 	sub.w	sl, r0, r1
  408cc6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408cca:	f10a 0001 	add.w	r0, sl, #1
  408cce:	ea4f 0868 	mov.w	r8, r8, asr #1
  408cd2:	4438      	add	r0, r7
  408cd4:	4540      	cmp	r0, r8
  408cd6:	4642      	mov	r2, r8
  408cd8:	bf84      	itt	hi
  408cda:	4680      	movhi	r8, r0
  408cdc:	4642      	movhi	r2, r8
  408cde:	055b      	lsls	r3, r3, #21
  408ce0:	d544      	bpl.n	408d6c <__sfvwrite_r+0x2b0>
  408ce2:	4611      	mov	r1, r2
  408ce4:	9800      	ldr	r0, [sp, #0]
  408ce6:	f7fb f917 	bl	403f18 <_malloc_r>
  408cea:	4683      	mov	fp, r0
  408cec:	2800      	cmp	r0, #0
  408cee:	d055      	beq.n	408d9c <__sfvwrite_r+0x2e0>
  408cf0:	4652      	mov	r2, sl
  408cf2:	6921      	ldr	r1, [r4, #16]
  408cf4:	f7fb fbc0 	bl	404478 <memcpy>
  408cf8:	89a3      	ldrh	r3, [r4, #12]
  408cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408d02:	81a3      	strh	r3, [r4, #12]
  408d04:	eb0b 000a 	add.w	r0, fp, sl
  408d08:	eba8 030a 	sub.w	r3, r8, sl
  408d0c:	f8c4 b010 	str.w	fp, [r4, #16]
  408d10:	f8c4 8014 	str.w	r8, [r4, #20]
  408d14:	6020      	str	r0, [r4, #0]
  408d16:	60a3      	str	r3, [r4, #8]
  408d18:	46b8      	mov	r8, r7
  408d1a:	46ba      	mov	sl, r7
  408d1c:	46bb      	mov	fp, r7
  408d1e:	e721      	b.n	408b64 <__sfvwrite_r+0xa8>
  408d20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408d24:	42b9      	cmp	r1, r7
  408d26:	bf28      	it	cs
  408d28:	4639      	movcs	r1, r7
  408d2a:	464a      	mov	r2, r9
  408d2c:	fb91 f1f3 	sdiv	r1, r1, r3
  408d30:	9800      	ldr	r0, [sp, #0]
  408d32:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408d34:	fb03 f301 	mul.w	r3, r3, r1
  408d38:	69e1      	ldr	r1, [r4, #28]
  408d3a:	47b0      	blx	r6
  408d3c:	f1b0 0a00 	subs.w	sl, r0, #0
  408d40:	f73f af1b 	bgt.w	408b7a <__sfvwrite_r+0xbe>
  408d44:	e738      	b.n	408bb8 <__sfvwrite_r+0xfc>
  408d46:	461a      	mov	r2, r3
  408d48:	4629      	mov	r1, r5
  408d4a:	9301      	str	r3, [sp, #4]
  408d4c:	f000 f938 	bl	408fc0 <memmove>
  408d50:	6822      	ldr	r2, [r4, #0]
  408d52:	9b01      	ldr	r3, [sp, #4]
  408d54:	9800      	ldr	r0, [sp, #0]
  408d56:	441a      	add	r2, r3
  408d58:	6022      	str	r2, [r4, #0]
  408d5a:	4621      	mov	r1, r4
  408d5c:	f7ff fcce 	bl	4086fc <_fflush_r>
  408d60:	9b01      	ldr	r3, [sp, #4]
  408d62:	2800      	cmp	r0, #0
  408d64:	f47f af28 	bne.w	408bb8 <__sfvwrite_r+0xfc>
  408d68:	461f      	mov	r7, r3
  408d6a:	e750      	b.n	408c0e <__sfvwrite_r+0x152>
  408d6c:	9800      	ldr	r0, [sp, #0]
  408d6e:	f000 fc85 	bl	40967c <_realloc_r>
  408d72:	4683      	mov	fp, r0
  408d74:	2800      	cmp	r0, #0
  408d76:	d1c5      	bne.n	408d04 <__sfvwrite_r+0x248>
  408d78:	9d00      	ldr	r5, [sp, #0]
  408d7a:	6921      	ldr	r1, [r4, #16]
  408d7c:	4628      	mov	r0, r5
  408d7e:	f7ff fdb7 	bl	4088f0 <_free_r>
  408d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408d86:	220c      	movs	r2, #12
  408d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408d8c:	602a      	str	r2, [r5, #0]
  408d8e:	e715      	b.n	408bbc <__sfvwrite_r+0x100>
  408d90:	f106 0901 	add.w	r9, r6, #1
  408d94:	e722      	b.n	408bdc <__sfvwrite_r+0x120>
  408d96:	f04f 30ff 	mov.w	r0, #4294967295
  408d9a:	e6bf      	b.n	408b1c <__sfvwrite_r+0x60>
  408d9c:	9a00      	ldr	r2, [sp, #0]
  408d9e:	230c      	movs	r3, #12
  408da0:	6013      	str	r3, [r2, #0]
  408da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408da6:	e709      	b.n	408bbc <__sfvwrite_r+0x100>
  408da8:	7ffffc00 	.word	0x7ffffc00

00408dac <_fwalk_reent>:
  408dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408db0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408db4:	d01f      	beq.n	408df6 <_fwalk_reent+0x4a>
  408db6:	4688      	mov	r8, r1
  408db8:	4606      	mov	r6, r0
  408dba:	f04f 0900 	mov.w	r9, #0
  408dbe:	687d      	ldr	r5, [r7, #4]
  408dc0:	68bc      	ldr	r4, [r7, #8]
  408dc2:	3d01      	subs	r5, #1
  408dc4:	d411      	bmi.n	408dea <_fwalk_reent+0x3e>
  408dc6:	89a3      	ldrh	r3, [r4, #12]
  408dc8:	2b01      	cmp	r3, #1
  408dca:	f105 35ff 	add.w	r5, r5, #4294967295
  408dce:	d908      	bls.n	408de2 <_fwalk_reent+0x36>
  408dd0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408dd4:	3301      	adds	r3, #1
  408dd6:	4621      	mov	r1, r4
  408dd8:	4630      	mov	r0, r6
  408dda:	d002      	beq.n	408de2 <_fwalk_reent+0x36>
  408ddc:	47c0      	blx	r8
  408dde:	ea49 0900 	orr.w	r9, r9, r0
  408de2:	1c6b      	adds	r3, r5, #1
  408de4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408de8:	d1ed      	bne.n	408dc6 <_fwalk_reent+0x1a>
  408dea:	683f      	ldr	r7, [r7, #0]
  408dec:	2f00      	cmp	r7, #0
  408dee:	d1e6      	bne.n	408dbe <_fwalk_reent+0x12>
  408df0:	4648      	mov	r0, r9
  408df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408df6:	46b9      	mov	r9, r7
  408df8:	4648      	mov	r0, r9
  408dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408dfe:	bf00      	nop

00408e00 <_localeconv_r>:
  408e00:	4a04      	ldr	r2, [pc, #16]	; (408e14 <_localeconv_r+0x14>)
  408e02:	4b05      	ldr	r3, [pc, #20]	; (408e18 <_localeconv_r+0x18>)
  408e04:	6812      	ldr	r2, [r2, #0]
  408e06:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408e08:	2800      	cmp	r0, #0
  408e0a:	bf08      	it	eq
  408e0c:	4618      	moveq	r0, r3
  408e0e:	30f0      	adds	r0, #240	; 0xf0
  408e10:	4770      	bx	lr
  408e12:	bf00      	nop
  408e14:	20400028 	.word	0x20400028
  408e18:	2040086c 	.word	0x2040086c

00408e1c <__retarget_lock_init_recursive>:
  408e1c:	4770      	bx	lr
  408e1e:	bf00      	nop

00408e20 <__retarget_lock_close_recursive>:
  408e20:	4770      	bx	lr
  408e22:	bf00      	nop

00408e24 <__retarget_lock_acquire_recursive>:
  408e24:	4770      	bx	lr
  408e26:	bf00      	nop

00408e28 <__retarget_lock_release_recursive>:
  408e28:	4770      	bx	lr
  408e2a:	bf00      	nop

00408e2c <__swhatbuf_r>:
  408e2c:	b570      	push	{r4, r5, r6, lr}
  408e2e:	460c      	mov	r4, r1
  408e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408e34:	2900      	cmp	r1, #0
  408e36:	b090      	sub	sp, #64	; 0x40
  408e38:	4615      	mov	r5, r2
  408e3a:	461e      	mov	r6, r3
  408e3c:	db14      	blt.n	408e68 <__swhatbuf_r+0x3c>
  408e3e:	aa01      	add	r2, sp, #4
  408e40:	f001 f86e 	bl	409f20 <_fstat_r>
  408e44:	2800      	cmp	r0, #0
  408e46:	db0f      	blt.n	408e68 <__swhatbuf_r+0x3c>
  408e48:	9a02      	ldr	r2, [sp, #8]
  408e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408e4e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408e52:	fab2 f282 	clz	r2, r2
  408e56:	0952      	lsrs	r2, r2, #5
  408e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408e5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408e60:	6032      	str	r2, [r6, #0]
  408e62:	602b      	str	r3, [r5, #0]
  408e64:	b010      	add	sp, #64	; 0x40
  408e66:	bd70      	pop	{r4, r5, r6, pc}
  408e68:	89a2      	ldrh	r2, [r4, #12]
  408e6a:	2300      	movs	r3, #0
  408e6c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408e70:	6033      	str	r3, [r6, #0]
  408e72:	d004      	beq.n	408e7e <__swhatbuf_r+0x52>
  408e74:	2240      	movs	r2, #64	; 0x40
  408e76:	4618      	mov	r0, r3
  408e78:	602a      	str	r2, [r5, #0]
  408e7a:	b010      	add	sp, #64	; 0x40
  408e7c:	bd70      	pop	{r4, r5, r6, pc}
  408e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408e82:	602b      	str	r3, [r5, #0]
  408e84:	b010      	add	sp, #64	; 0x40
  408e86:	bd70      	pop	{r4, r5, r6, pc}

00408e88 <__smakebuf_r>:
  408e88:	898a      	ldrh	r2, [r1, #12]
  408e8a:	0792      	lsls	r2, r2, #30
  408e8c:	460b      	mov	r3, r1
  408e8e:	d506      	bpl.n	408e9e <__smakebuf_r+0x16>
  408e90:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408e94:	2101      	movs	r1, #1
  408e96:	601a      	str	r2, [r3, #0]
  408e98:	611a      	str	r2, [r3, #16]
  408e9a:	6159      	str	r1, [r3, #20]
  408e9c:	4770      	bx	lr
  408e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  408ea0:	b083      	sub	sp, #12
  408ea2:	ab01      	add	r3, sp, #4
  408ea4:	466a      	mov	r2, sp
  408ea6:	460c      	mov	r4, r1
  408ea8:	4606      	mov	r6, r0
  408eaa:	f7ff ffbf 	bl	408e2c <__swhatbuf_r>
  408eae:	9900      	ldr	r1, [sp, #0]
  408eb0:	4605      	mov	r5, r0
  408eb2:	4630      	mov	r0, r6
  408eb4:	f7fb f830 	bl	403f18 <_malloc_r>
  408eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ebc:	b1d8      	cbz	r0, 408ef6 <__smakebuf_r+0x6e>
  408ebe:	9a01      	ldr	r2, [sp, #4]
  408ec0:	4f15      	ldr	r7, [pc, #84]	; (408f18 <__smakebuf_r+0x90>)
  408ec2:	9900      	ldr	r1, [sp, #0]
  408ec4:	63f7      	str	r7, [r6, #60]	; 0x3c
  408ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408eca:	81a3      	strh	r3, [r4, #12]
  408ecc:	6020      	str	r0, [r4, #0]
  408ece:	6120      	str	r0, [r4, #16]
  408ed0:	6161      	str	r1, [r4, #20]
  408ed2:	b91a      	cbnz	r2, 408edc <__smakebuf_r+0x54>
  408ed4:	432b      	orrs	r3, r5
  408ed6:	81a3      	strh	r3, [r4, #12]
  408ed8:	b003      	add	sp, #12
  408eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408edc:	4630      	mov	r0, r6
  408ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408ee2:	f001 f831 	bl	409f48 <_isatty_r>
  408ee6:	b1a0      	cbz	r0, 408f12 <__smakebuf_r+0x8a>
  408ee8:	89a3      	ldrh	r3, [r4, #12]
  408eea:	f023 0303 	bic.w	r3, r3, #3
  408eee:	f043 0301 	orr.w	r3, r3, #1
  408ef2:	b21b      	sxth	r3, r3
  408ef4:	e7ee      	b.n	408ed4 <__smakebuf_r+0x4c>
  408ef6:	059a      	lsls	r2, r3, #22
  408ef8:	d4ee      	bmi.n	408ed8 <__smakebuf_r+0x50>
  408efa:	f023 0303 	bic.w	r3, r3, #3
  408efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408f02:	f043 0302 	orr.w	r3, r3, #2
  408f06:	2101      	movs	r1, #1
  408f08:	81a3      	strh	r3, [r4, #12]
  408f0a:	6022      	str	r2, [r4, #0]
  408f0c:	6122      	str	r2, [r4, #16]
  408f0e:	6161      	str	r1, [r4, #20]
  408f10:	e7e2      	b.n	408ed8 <__smakebuf_r+0x50>
  408f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f16:	e7dd      	b.n	408ed4 <__smakebuf_r+0x4c>
  408f18:	00408751 	.word	0x00408751
  408f1c:	00000000 	.word	0x00000000

00408f20 <memchr>:
  408f20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408f24:	2a10      	cmp	r2, #16
  408f26:	db2b      	blt.n	408f80 <memchr+0x60>
  408f28:	f010 0f07 	tst.w	r0, #7
  408f2c:	d008      	beq.n	408f40 <memchr+0x20>
  408f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408f32:	3a01      	subs	r2, #1
  408f34:	428b      	cmp	r3, r1
  408f36:	d02d      	beq.n	408f94 <memchr+0x74>
  408f38:	f010 0f07 	tst.w	r0, #7
  408f3c:	b342      	cbz	r2, 408f90 <memchr+0x70>
  408f3e:	d1f6      	bne.n	408f2e <memchr+0xe>
  408f40:	b4f0      	push	{r4, r5, r6, r7}
  408f42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408f46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408f4a:	f022 0407 	bic.w	r4, r2, #7
  408f4e:	f07f 0700 	mvns.w	r7, #0
  408f52:	2300      	movs	r3, #0
  408f54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408f58:	3c08      	subs	r4, #8
  408f5a:	ea85 0501 	eor.w	r5, r5, r1
  408f5e:	ea86 0601 	eor.w	r6, r6, r1
  408f62:	fa85 f547 	uadd8	r5, r5, r7
  408f66:	faa3 f587 	sel	r5, r3, r7
  408f6a:	fa86 f647 	uadd8	r6, r6, r7
  408f6e:	faa5 f687 	sel	r6, r5, r7
  408f72:	b98e      	cbnz	r6, 408f98 <memchr+0x78>
  408f74:	d1ee      	bne.n	408f54 <memchr+0x34>
  408f76:	bcf0      	pop	{r4, r5, r6, r7}
  408f78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408f7c:	f002 0207 	and.w	r2, r2, #7
  408f80:	b132      	cbz	r2, 408f90 <memchr+0x70>
  408f82:	f810 3b01 	ldrb.w	r3, [r0], #1
  408f86:	3a01      	subs	r2, #1
  408f88:	ea83 0301 	eor.w	r3, r3, r1
  408f8c:	b113      	cbz	r3, 408f94 <memchr+0x74>
  408f8e:	d1f8      	bne.n	408f82 <memchr+0x62>
  408f90:	2000      	movs	r0, #0
  408f92:	4770      	bx	lr
  408f94:	3801      	subs	r0, #1
  408f96:	4770      	bx	lr
  408f98:	2d00      	cmp	r5, #0
  408f9a:	bf06      	itte	eq
  408f9c:	4635      	moveq	r5, r6
  408f9e:	3803      	subeq	r0, #3
  408fa0:	3807      	subne	r0, #7
  408fa2:	f015 0f01 	tst.w	r5, #1
  408fa6:	d107      	bne.n	408fb8 <memchr+0x98>
  408fa8:	3001      	adds	r0, #1
  408faa:	f415 7f80 	tst.w	r5, #256	; 0x100
  408fae:	bf02      	ittt	eq
  408fb0:	3001      	addeq	r0, #1
  408fb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408fb6:	3001      	addeq	r0, #1
  408fb8:	bcf0      	pop	{r4, r5, r6, r7}
  408fba:	3801      	subs	r0, #1
  408fbc:	4770      	bx	lr
  408fbe:	bf00      	nop

00408fc0 <memmove>:
  408fc0:	4288      	cmp	r0, r1
  408fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  408fc4:	d90d      	bls.n	408fe2 <memmove+0x22>
  408fc6:	188b      	adds	r3, r1, r2
  408fc8:	4298      	cmp	r0, r3
  408fca:	d20a      	bcs.n	408fe2 <memmove+0x22>
  408fcc:	1884      	adds	r4, r0, r2
  408fce:	2a00      	cmp	r2, #0
  408fd0:	d051      	beq.n	409076 <memmove+0xb6>
  408fd2:	4622      	mov	r2, r4
  408fd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408fd8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408fdc:	4299      	cmp	r1, r3
  408fde:	d1f9      	bne.n	408fd4 <memmove+0x14>
  408fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408fe2:	2a0f      	cmp	r2, #15
  408fe4:	d948      	bls.n	409078 <memmove+0xb8>
  408fe6:	ea41 0300 	orr.w	r3, r1, r0
  408fea:	079b      	lsls	r3, r3, #30
  408fec:	d146      	bne.n	40907c <memmove+0xbc>
  408fee:	f100 0410 	add.w	r4, r0, #16
  408ff2:	f101 0310 	add.w	r3, r1, #16
  408ff6:	4615      	mov	r5, r2
  408ff8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408ffc:	f844 6c10 	str.w	r6, [r4, #-16]
  409000:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409004:	f844 6c0c 	str.w	r6, [r4, #-12]
  409008:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40900c:	f844 6c08 	str.w	r6, [r4, #-8]
  409010:	3d10      	subs	r5, #16
  409012:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409016:	f844 6c04 	str.w	r6, [r4, #-4]
  40901a:	2d0f      	cmp	r5, #15
  40901c:	f103 0310 	add.w	r3, r3, #16
  409020:	f104 0410 	add.w	r4, r4, #16
  409024:	d8e8      	bhi.n	408ff8 <memmove+0x38>
  409026:	f1a2 0310 	sub.w	r3, r2, #16
  40902a:	f023 030f 	bic.w	r3, r3, #15
  40902e:	f002 0e0f 	and.w	lr, r2, #15
  409032:	3310      	adds	r3, #16
  409034:	f1be 0f03 	cmp.w	lr, #3
  409038:	4419      	add	r1, r3
  40903a:	4403      	add	r3, r0
  40903c:	d921      	bls.n	409082 <memmove+0xc2>
  40903e:	1f1e      	subs	r6, r3, #4
  409040:	460d      	mov	r5, r1
  409042:	4674      	mov	r4, lr
  409044:	3c04      	subs	r4, #4
  409046:	f855 7b04 	ldr.w	r7, [r5], #4
  40904a:	f846 7f04 	str.w	r7, [r6, #4]!
  40904e:	2c03      	cmp	r4, #3
  409050:	d8f8      	bhi.n	409044 <memmove+0x84>
  409052:	f1ae 0404 	sub.w	r4, lr, #4
  409056:	f024 0403 	bic.w	r4, r4, #3
  40905a:	3404      	adds	r4, #4
  40905c:	4421      	add	r1, r4
  40905e:	4423      	add	r3, r4
  409060:	f002 0203 	and.w	r2, r2, #3
  409064:	b162      	cbz	r2, 409080 <memmove+0xc0>
  409066:	3b01      	subs	r3, #1
  409068:	440a      	add	r2, r1
  40906a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40906e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409072:	428a      	cmp	r2, r1
  409074:	d1f9      	bne.n	40906a <memmove+0xaa>
  409076:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409078:	4603      	mov	r3, r0
  40907a:	e7f3      	b.n	409064 <memmove+0xa4>
  40907c:	4603      	mov	r3, r0
  40907e:	e7f2      	b.n	409066 <memmove+0xa6>
  409080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409082:	4672      	mov	r2, lr
  409084:	e7ee      	b.n	409064 <memmove+0xa4>
  409086:	bf00      	nop

00409088 <_Balloc>:
  409088:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40908a:	b570      	push	{r4, r5, r6, lr}
  40908c:	4605      	mov	r5, r0
  40908e:	460c      	mov	r4, r1
  409090:	b14b      	cbz	r3, 4090a6 <_Balloc+0x1e>
  409092:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409096:	b180      	cbz	r0, 4090ba <_Balloc+0x32>
  409098:	6802      	ldr	r2, [r0, #0]
  40909a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40909e:	2300      	movs	r3, #0
  4090a0:	6103      	str	r3, [r0, #16]
  4090a2:	60c3      	str	r3, [r0, #12]
  4090a4:	bd70      	pop	{r4, r5, r6, pc}
  4090a6:	2221      	movs	r2, #33	; 0x21
  4090a8:	2104      	movs	r1, #4
  4090aa:	f000 fe11 	bl	409cd0 <_calloc_r>
  4090ae:	64e8      	str	r0, [r5, #76]	; 0x4c
  4090b0:	4603      	mov	r3, r0
  4090b2:	2800      	cmp	r0, #0
  4090b4:	d1ed      	bne.n	409092 <_Balloc+0xa>
  4090b6:	2000      	movs	r0, #0
  4090b8:	bd70      	pop	{r4, r5, r6, pc}
  4090ba:	2101      	movs	r1, #1
  4090bc:	fa01 f604 	lsl.w	r6, r1, r4
  4090c0:	1d72      	adds	r2, r6, #5
  4090c2:	4628      	mov	r0, r5
  4090c4:	0092      	lsls	r2, r2, #2
  4090c6:	f000 fe03 	bl	409cd0 <_calloc_r>
  4090ca:	2800      	cmp	r0, #0
  4090cc:	d0f3      	beq.n	4090b6 <_Balloc+0x2e>
  4090ce:	6044      	str	r4, [r0, #4]
  4090d0:	6086      	str	r6, [r0, #8]
  4090d2:	e7e4      	b.n	40909e <_Balloc+0x16>

004090d4 <_Bfree>:
  4090d4:	b131      	cbz	r1, 4090e4 <_Bfree+0x10>
  4090d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4090d8:	684a      	ldr	r2, [r1, #4]
  4090da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4090de:	6008      	str	r0, [r1, #0]
  4090e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4090e4:	4770      	bx	lr
  4090e6:	bf00      	nop

004090e8 <__multadd>:
  4090e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4090ea:	690c      	ldr	r4, [r1, #16]
  4090ec:	b083      	sub	sp, #12
  4090ee:	460d      	mov	r5, r1
  4090f0:	4606      	mov	r6, r0
  4090f2:	f101 0e14 	add.w	lr, r1, #20
  4090f6:	2700      	movs	r7, #0
  4090f8:	f8de 0000 	ldr.w	r0, [lr]
  4090fc:	b281      	uxth	r1, r0
  4090fe:	fb02 3301 	mla	r3, r2, r1, r3
  409102:	0c01      	lsrs	r1, r0, #16
  409104:	0c18      	lsrs	r0, r3, #16
  409106:	fb02 0101 	mla	r1, r2, r1, r0
  40910a:	b29b      	uxth	r3, r3
  40910c:	3701      	adds	r7, #1
  40910e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  409112:	42bc      	cmp	r4, r7
  409114:	f84e 3b04 	str.w	r3, [lr], #4
  409118:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40911c:	dcec      	bgt.n	4090f8 <__multadd+0x10>
  40911e:	b13b      	cbz	r3, 409130 <__multadd+0x48>
  409120:	68aa      	ldr	r2, [r5, #8]
  409122:	4294      	cmp	r4, r2
  409124:	da07      	bge.n	409136 <__multadd+0x4e>
  409126:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40912a:	3401      	adds	r4, #1
  40912c:	6153      	str	r3, [r2, #20]
  40912e:	612c      	str	r4, [r5, #16]
  409130:	4628      	mov	r0, r5
  409132:	b003      	add	sp, #12
  409134:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409136:	6869      	ldr	r1, [r5, #4]
  409138:	9301      	str	r3, [sp, #4]
  40913a:	3101      	adds	r1, #1
  40913c:	4630      	mov	r0, r6
  40913e:	f7ff ffa3 	bl	409088 <_Balloc>
  409142:	692a      	ldr	r2, [r5, #16]
  409144:	3202      	adds	r2, #2
  409146:	f105 010c 	add.w	r1, r5, #12
  40914a:	4607      	mov	r7, r0
  40914c:	0092      	lsls	r2, r2, #2
  40914e:	300c      	adds	r0, #12
  409150:	f7fb f992 	bl	404478 <memcpy>
  409154:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409156:	6869      	ldr	r1, [r5, #4]
  409158:	9b01      	ldr	r3, [sp, #4]
  40915a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40915e:	6028      	str	r0, [r5, #0]
  409160:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409164:	463d      	mov	r5, r7
  409166:	e7de      	b.n	409126 <__multadd+0x3e>

00409168 <__hi0bits>:
  409168:	0c02      	lsrs	r2, r0, #16
  40916a:	0412      	lsls	r2, r2, #16
  40916c:	4603      	mov	r3, r0
  40916e:	b9b2      	cbnz	r2, 40919e <__hi0bits+0x36>
  409170:	0403      	lsls	r3, r0, #16
  409172:	2010      	movs	r0, #16
  409174:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409178:	bf04      	itt	eq
  40917a:	021b      	lsleq	r3, r3, #8
  40917c:	3008      	addeq	r0, #8
  40917e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409182:	bf04      	itt	eq
  409184:	011b      	lsleq	r3, r3, #4
  409186:	3004      	addeq	r0, #4
  409188:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40918c:	bf04      	itt	eq
  40918e:	009b      	lsleq	r3, r3, #2
  409190:	3002      	addeq	r0, #2
  409192:	2b00      	cmp	r3, #0
  409194:	db02      	blt.n	40919c <__hi0bits+0x34>
  409196:	005b      	lsls	r3, r3, #1
  409198:	d403      	bmi.n	4091a2 <__hi0bits+0x3a>
  40919a:	2020      	movs	r0, #32
  40919c:	4770      	bx	lr
  40919e:	2000      	movs	r0, #0
  4091a0:	e7e8      	b.n	409174 <__hi0bits+0xc>
  4091a2:	3001      	adds	r0, #1
  4091a4:	4770      	bx	lr
  4091a6:	bf00      	nop

004091a8 <__lo0bits>:
  4091a8:	6803      	ldr	r3, [r0, #0]
  4091aa:	f013 0207 	ands.w	r2, r3, #7
  4091ae:	4601      	mov	r1, r0
  4091b0:	d007      	beq.n	4091c2 <__lo0bits+0x1a>
  4091b2:	07da      	lsls	r2, r3, #31
  4091b4:	d421      	bmi.n	4091fa <__lo0bits+0x52>
  4091b6:	0798      	lsls	r0, r3, #30
  4091b8:	d421      	bmi.n	4091fe <__lo0bits+0x56>
  4091ba:	089b      	lsrs	r3, r3, #2
  4091bc:	600b      	str	r3, [r1, #0]
  4091be:	2002      	movs	r0, #2
  4091c0:	4770      	bx	lr
  4091c2:	b298      	uxth	r0, r3
  4091c4:	b198      	cbz	r0, 4091ee <__lo0bits+0x46>
  4091c6:	4610      	mov	r0, r2
  4091c8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4091cc:	bf04      	itt	eq
  4091ce:	0a1b      	lsreq	r3, r3, #8
  4091d0:	3008      	addeq	r0, #8
  4091d2:	071a      	lsls	r2, r3, #28
  4091d4:	bf04      	itt	eq
  4091d6:	091b      	lsreq	r3, r3, #4
  4091d8:	3004      	addeq	r0, #4
  4091da:	079a      	lsls	r2, r3, #30
  4091dc:	bf04      	itt	eq
  4091de:	089b      	lsreq	r3, r3, #2
  4091e0:	3002      	addeq	r0, #2
  4091e2:	07da      	lsls	r2, r3, #31
  4091e4:	d407      	bmi.n	4091f6 <__lo0bits+0x4e>
  4091e6:	085b      	lsrs	r3, r3, #1
  4091e8:	d104      	bne.n	4091f4 <__lo0bits+0x4c>
  4091ea:	2020      	movs	r0, #32
  4091ec:	4770      	bx	lr
  4091ee:	0c1b      	lsrs	r3, r3, #16
  4091f0:	2010      	movs	r0, #16
  4091f2:	e7e9      	b.n	4091c8 <__lo0bits+0x20>
  4091f4:	3001      	adds	r0, #1
  4091f6:	600b      	str	r3, [r1, #0]
  4091f8:	4770      	bx	lr
  4091fa:	2000      	movs	r0, #0
  4091fc:	4770      	bx	lr
  4091fe:	085b      	lsrs	r3, r3, #1
  409200:	600b      	str	r3, [r1, #0]
  409202:	2001      	movs	r0, #1
  409204:	4770      	bx	lr
  409206:	bf00      	nop

00409208 <__i2b>:
  409208:	b510      	push	{r4, lr}
  40920a:	460c      	mov	r4, r1
  40920c:	2101      	movs	r1, #1
  40920e:	f7ff ff3b 	bl	409088 <_Balloc>
  409212:	2201      	movs	r2, #1
  409214:	6144      	str	r4, [r0, #20]
  409216:	6102      	str	r2, [r0, #16]
  409218:	bd10      	pop	{r4, pc}
  40921a:	bf00      	nop

0040921c <__multiply>:
  40921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409220:	690c      	ldr	r4, [r1, #16]
  409222:	6915      	ldr	r5, [r2, #16]
  409224:	42ac      	cmp	r4, r5
  409226:	b083      	sub	sp, #12
  409228:	468b      	mov	fp, r1
  40922a:	4616      	mov	r6, r2
  40922c:	da04      	bge.n	409238 <__multiply+0x1c>
  40922e:	4622      	mov	r2, r4
  409230:	46b3      	mov	fp, r6
  409232:	462c      	mov	r4, r5
  409234:	460e      	mov	r6, r1
  409236:	4615      	mov	r5, r2
  409238:	f8db 3008 	ldr.w	r3, [fp, #8]
  40923c:	f8db 1004 	ldr.w	r1, [fp, #4]
  409240:	eb04 0805 	add.w	r8, r4, r5
  409244:	4598      	cmp	r8, r3
  409246:	bfc8      	it	gt
  409248:	3101      	addgt	r1, #1
  40924a:	f7ff ff1d 	bl	409088 <_Balloc>
  40924e:	f100 0914 	add.w	r9, r0, #20
  409252:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409256:	45d1      	cmp	r9, sl
  409258:	9000      	str	r0, [sp, #0]
  40925a:	d205      	bcs.n	409268 <__multiply+0x4c>
  40925c:	464b      	mov	r3, r9
  40925e:	2100      	movs	r1, #0
  409260:	f843 1b04 	str.w	r1, [r3], #4
  409264:	459a      	cmp	sl, r3
  409266:	d8fb      	bhi.n	409260 <__multiply+0x44>
  409268:	f106 0c14 	add.w	ip, r6, #20
  40926c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409270:	f10b 0b14 	add.w	fp, fp, #20
  409274:	459c      	cmp	ip, r3
  409276:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40927a:	d24c      	bcs.n	409316 <__multiply+0xfa>
  40927c:	f8cd a004 	str.w	sl, [sp, #4]
  409280:	469a      	mov	sl, r3
  409282:	f8dc 5000 	ldr.w	r5, [ip]
  409286:	b2af      	uxth	r7, r5
  409288:	b1ef      	cbz	r7, 4092c6 <__multiply+0xaa>
  40928a:	2100      	movs	r1, #0
  40928c:	464d      	mov	r5, r9
  40928e:	465e      	mov	r6, fp
  409290:	460c      	mov	r4, r1
  409292:	f856 2b04 	ldr.w	r2, [r6], #4
  409296:	6828      	ldr	r0, [r5, #0]
  409298:	b293      	uxth	r3, r2
  40929a:	b281      	uxth	r1, r0
  40929c:	fb07 1303 	mla	r3, r7, r3, r1
  4092a0:	0c12      	lsrs	r2, r2, #16
  4092a2:	0c01      	lsrs	r1, r0, #16
  4092a4:	4423      	add	r3, r4
  4092a6:	fb07 1102 	mla	r1, r7, r2, r1
  4092aa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4092ae:	b29b      	uxth	r3, r3
  4092b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4092b4:	45b6      	cmp	lr, r6
  4092b6:	f845 3b04 	str.w	r3, [r5], #4
  4092ba:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4092be:	d8e8      	bhi.n	409292 <__multiply+0x76>
  4092c0:	602c      	str	r4, [r5, #0]
  4092c2:	f8dc 5000 	ldr.w	r5, [ip]
  4092c6:	0c2d      	lsrs	r5, r5, #16
  4092c8:	d01d      	beq.n	409306 <__multiply+0xea>
  4092ca:	f8d9 3000 	ldr.w	r3, [r9]
  4092ce:	4648      	mov	r0, r9
  4092d0:	461c      	mov	r4, r3
  4092d2:	4659      	mov	r1, fp
  4092d4:	2200      	movs	r2, #0
  4092d6:	880e      	ldrh	r6, [r1, #0]
  4092d8:	0c24      	lsrs	r4, r4, #16
  4092da:	fb05 4406 	mla	r4, r5, r6, r4
  4092de:	4422      	add	r2, r4
  4092e0:	b29b      	uxth	r3, r3
  4092e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4092e6:	f840 3b04 	str.w	r3, [r0], #4
  4092ea:	f851 3b04 	ldr.w	r3, [r1], #4
  4092ee:	6804      	ldr	r4, [r0, #0]
  4092f0:	0c1b      	lsrs	r3, r3, #16
  4092f2:	b2a6      	uxth	r6, r4
  4092f4:	fb05 6303 	mla	r3, r5, r3, r6
  4092f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4092fc:	458e      	cmp	lr, r1
  4092fe:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409302:	d8e8      	bhi.n	4092d6 <__multiply+0xba>
  409304:	6003      	str	r3, [r0, #0]
  409306:	f10c 0c04 	add.w	ip, ip, #4
  40930a:	45e2      	cmp	sl, ip
  40930c:	f109 0904 	add.w	r9, r9, #4
  409310:	d8b7      	bhi.n	409282 <__multiply+0x66>
  409312:	f8dd a004 	ldr.w	sl, [sp, #4]
  409316:	f1b8 0f00 	cmp.w	r8, #0
  40931a:	dd0b      	ble.n	409334 <__multiply+0x118>
  40931c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409320:	f1aa 0a04 	sub.w	sl, sl, #4
  409324:	b11b      	cbz	r3, 40932e <__multiply+0x112>
  409326:	e005      	b.n	409334 <__multiply+0x118>
  409328:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40932c:	b913      	cbnz	r3, 409334 <__multiply+0x118>
  40932e:	f1b8 0801 	subs.w	r8, r8, #1
  409332:	d1f9      	bne.n	409328 <__multiply+0x10c>
  409334:	9800      	ldr	r0, [sp, #0]
  409336:	f8c0 8010 	str.w	r8, [r0, #16]
  40933a:	b003      	add	sp, #12
  40933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409340 <__pow5mult>:
  409340:	f012 0303 	ands.w	r3, r2, #3
  409344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409348:	4614      	mov	r4, r2
  40934a:	4607      	mov	r7, r0
  40934c:	d12e      	bne.n	4093ac <__pow5mult+0x6c>
  40934e:	460d      	mov	r5, r1
  409350:	10a4      	asrs	r4, r4, #2
  409352:	d01c      	beq.n	40938e <__pow5mult+0x4e>
  409354:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409356:	b396      	cbz	r6, 4093be <__pow5mult+0x7e>
  409358:	07e3      	lsls	r3, r4, #31
  40935a:	f04f 0800 	mov.w	r8, #0
  40935e:	d406      	bmi.n	40936e <__pow5mult+0x2e>
  409360:	1064      	asrs	r4, r4, #1
  409362:	d014      	beq.n	40938e <__pow5mult+0x4e>
  409364:	6830      	ldr	r0, [r6, #0]
  409366:	b1a8      	cbz	r0, 409394 <__pow5mult+0x54>
  409368:	4606      	mov	r6, r0
  40936a:	07e3      	lsls	r3, r4, #31
  40936c:	d5f8      	bpl.n	409360 <__pow5mult+0x20>
  40936e:	4632      	mov	r2, r6
  409370:	4629      	mov	r1, r5
  409372:	4638      	mov	r0, r7
  409374:	f7ff ff52 	bl	40921c <__multiply>
  409378:	b1b5      	cbz	r5, 4093a8 <__pow5mult+0x68>
  40937a:	686a      	ldr	r2, [r5, #4]
  40937c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40937e:	1064      	asrs	r4, r4, #1
  409380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409384:	6029      	str	r1, [r5, #0]
  409386:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40938a:	4605      	mov	r5, r0
  40938c:	d1ea      	bne.n	409364 <__pow5mult+0x24>
  40938e:	4628      	mov	r0, r5
  409390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409394:	4632      	mov	r2, r6
  409396:	4631      	mov	r1, r6
  409398:	4638      	mov	r0, r7
  40939a:	f7ff ff3f 	bl	40921c <__multiply>
  40939e:	6030      	str	r0, [r6, #0]
  4093a0:	f8c0 8000 	str.w	r8, [r0]
  4093a4:	4606      	mov	r6, r0
  4093a6:	e7e0      	b.n	40936a <__pow5mult+0x2a>
  4093a8:	4605      	mov	r5, r0
  4093aa:	e7d9      	b.n	409360 <__pow5mult+0x20>
  4093ac:	1e5a      	subs	r2, r3, #1
  4093ae:	4d0b      	ldr	r5, [pc, #44]	; (4093dc <__pow5mult+0x9c>)
  4093b0:	2300      	movs	r3, #0
  4093b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4093b6:	f7ff fe97 	bl	4090e8 <__multadd>
  4093ba:	4605      	mov	r5, r0
  4093bc:	e7c8      	b.n	409350 <__pow5mult+0x10>
  4093be:	2101      	movs	r1, #1
  4093c0:	4638      	mov	r0, r7
  4093c2:	f7ff fe61 	bl	409088 <_Balloc>
  4093c6:	f240 2171 	movw	r1, #625	; 0x271
  4093ca:	2201      	movs	r2, #1
  4093cc:	2300      	movs	r3, #0
  4093ce:	6141      	str	r1, [r0, #20]
  4093d0:	6102      	str	r2, [r0, #16]
  4093d2:	4606      	mov	r6, r0
  4093d4:	64b8      	str	r0, [r7, #72]	; 0x48
  4093d6:	6003      	str	r3, [r0, #0]
  4093d8:	e7be      	b.n	409358 <__pow5mult+0x18>
  4093da:	bf00      	nop
  4093dc:	0040b2f0 	.word	0x0040b2f0

004093e0 <__lshift>:
  4093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4093e4:	4691      	mov	r9, r2
  4093e6:	690a      	ldr	r2, [r1, #16]
  4093e8:	688b      	ldr	r3, [r1, #8]
  4093ea:	ea4f 1469 	mov.w	r4, r9, asr #5
  4093ee:	eb04 0802 	add.w	r8, r4, r2
  4093f2:	f108 0501 	add.w	r5, r8, #1
  4093f6:	429d      	cmp	r5, r3
  4093f8:	460e      	mov	r6, r1
  4093fa:	4607      	mov	r7, r0
  4093fc:	6849      	ldr	r1, [r1, #4]
  4093fe:	dd04      	ble.n	40940a <__lshift+0x2a>
  409400:	005b      	lsls	r3, r3, #1
  409402:	429d      	cmp	r5, r3
  409404:	f101 0101 	add.w	r1, r1, #1
  409408:	dcfa      	bgt.n	409400 <__lshift+0x20>
  40940a:	4638      	mov	r0, r7
  40940c:	f7ff fe3c 	bl	409088 <_Balloc>
  409410:	2c00      	cmp	r4, #0
  409412:	f100 0314 	add.w	r3, r0, #20
  409416:	dd06      	ble.n	409426 <__lshift+0x46>
  409418:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40941c:	2100      	movs	r1, #0
  40941e:	f843 1b04 	str.w	r1, [r3], #4
  409422:	429a      	cmp	r2, r3
  409424:	d1fb      	bne.n	40941e <__lshift+0x3e>
  409426:	6934      	ldr	r4, [r6, #16]
  409428:	f106 0114 	add.w	r1, r6, #20
  40942c:	f019 091f 	ands.w	r9, r9, #31
  409430:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409434:	d01d      	beq.n	409472 <__lshift+0x92>
  409436:	f1c9 0c20 	rsb	ip, r9, #32
  40943a:	2200      	movs	r2, #0
  40943c:	680c      	ldr	r4, [r1, #0]
  40943e:	fa04 f409 	lsl.w	r4, r4, r9
  409442:	4314      	orrs	r4, r2
  409444:	f843 4b04 	str.w	r4, [r3], #4
  409448:	f851 2b04 	ldr.w	r2, [r1], #4
  40944c:	458e      	cmp	lr, r1
  40944e:	fa22 f20c 	lsr.w	r2, r2, ip
  409452:	d8f3      	bhi.n	40943c <__lshift+0x5c>
  409454:	601a      	str	r2, [r3, #0]
  409456:	b10a      	cbz	r2, 40945c <__lshift+0x7c>
  409458:	f108 0502 	add.w	r5, r8, #2
  40945c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40945e:	6872      	ldr	r2, [r6, #4]
  409460:	3d01      	subs	r5, #1
  409462:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409466:	6105      	str	r5, [r0, #16]
  409468:	6031      	str	r1, [r6, #0]
  40946a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40946e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409472:	3b04      	subs	r3, #4
  409474:	f851 2b04 	ldr.w	r2, [r1], #4
  409478:	f843 2f04 	str.w	r2, [r3, #4]!
  40947c:	458e      	cmp	lr, r1
  40947e:	d8f9      	bhi.n	409474 <__lshift+0x94>
  409480:	e7ec      	b.n	40945c <__lshift+0x7c>
  409482:	bf00      	nop

00409484 <__mcmp>:
  409484:	b430      	push	{r4, r5}
  409486:	690b      	ldr	r3, [r1, #16]
  409488:	4605      	mov	r5, r0
  40948a:	6900      	ldr	r0, [r0, #16]
  40948c:	1ac0      	subs	r0, r0, r3
  40948e:	d10f      	bne.n	4094b0 <__mcmp+0x2c>
  409490:	009b      	lsls	r3, r3, #2
  409492:	3514      	adds	r5, #20
  409494:	3114      	adds	r1, #20
  409496:	4419      	add	r1, r3
  409498:	442b      	add	r3, r5
  40949a:	e001      	b.n	4094a0 <__mcmp+0x1c>
  40949c:	429d      	cmp	r5, r3
  40949e:	d207      	bcs.n	4094b0 <__mcmp+0x2c>
  4094a0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4094a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4094a8:	4294      	cmp	r4, r2
  4094aa:	d0f7      	beq.n	40949c <__mcmp+0x18>
  4094ac:	d302      	bcc.n	4094b4 <__mcmp+0x30>
  4094ae:	2001      	movs	r0, #1
  4094b0:	bc30      	pop	{r4, r5}
  4094b2:	4770      	bx	lr
  4094b4:	f04f 30ff 	mov.w	r0, #4294967295
  4094b8:	e7fa      	b.n	4094b0 <__mcmp+0x2c>
  4094ba:	bf00      	nop

004094bc <__mdiff>:
  4094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4094c0:	690f      	ldr	r7, [r1, #16]
  4094c2:	460e      	mov	r6, r1
  4094c4:	6911      	ldr	r1, [r2, #16]
  4094c6:	1a7f      	subs	r7, r7, r1
  4094c8:	2f00      	cmp	r7, #0
  4094ca:	4690      	mov	r8, r2
  4094cc:	d117      	bne.n	4094fe <__mdiff+0x42>
  4094ce:	0089      	lsls	r1, r1, #2
  4094d0:	f106 0514 	add.w	r5, r6, #20
  4094d4:	f102 0e14 	add.w	lr, r2, #20
  4094d8:	186b      	adds	r3, r5, r1
  4094da:	4471      	add	r1, lr
  4094dc:	e001      	b.n	4094e2 <__mdiff+0x26>
  4094de:	429d      	cmp	r5, r3
  4094e0:	d25c      	bcs.n	40959c <__mdiff+0xe0>
  4094e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4094e6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4094ea:	42a2      	cmp	r2, r4
  4094ec:	d0f7      	beq.n	4094de <__mdiff+0x22>
  4094ee:	d25e      	bcs.n	4095ae <__mdiff+0xf2>
  4094f0:	4633      	mov	r3, r6
  4094f2:	462c      	mov	r4, r5
  4094f4:	4646      	mov	r6, r8
  4094f6:	4675      	mov	r5, lr
  4094f8:	4698      	mov	r8, r3
  4094fa:	2701      	movs	r7, #1
  4094fc:	e005      	b.n	40950a <__mdiff+0x4e>
  4094fe:	db58      	blt.n	4095b2 <__mdiff+0xf6>
  409500:	f106 0514 	add.w	r5, r6, #20
  409504:	f108 0414 	add.w	r4, r8, #20
  409508:	2700      	movs	r7, #0
  40950a:	6871      	ldr	r1, [r6, #4]
  40950c:	f7ff fdbc 	bl	409088 <_Balloc>
  409510:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409514:	6936      	ldr	r6, [r6, #16]
  409516:	60c7      	str	r7, [r0, #12]
  409518:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40951c:	46a6      	mov	lr, r4
  40951e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409522:	f100 0414 	add.w	r4, r0, #20
  409526:	2300      	movs	r3, #0
  409528:	f85e 1b04 	ldr.w	r1, [lr], #4
  40952c:	f855 8b04 	ldr.w	r8, [r5], #4
  409530:	b28a      	uxth	r2, r1
  409532:	fa13 f388 	uxtah	r3, r3, r8
  409536:	0c09      	lsrs	r1, r1, #16
  409538:	1a9a      	subs	r2, r3, r2
  40953a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40953e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409542:	b292      	uxth	r2, r2
  409544:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409548:	45f4      	cmp	ip, lr
  40954a:	f844 2b04 	str.w	r2, [r4], #4
  40954e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409552:	d8e9      	bhi.n	409528 <__mdiff+0x6c>
  409554:	42af      	cmp	r7, r5
  409556:	d917      	bls.n	409588 <__mdiff+0xcc>
  409558:	46a4      	mov	ip, r4
  40955a:	46ae      	mov	lr, r5
  40955c:	f85e 2b04 	ldr.w	r2, [lr], #4
  409560:	fa13 f382 	uxtah	r3, r3, r2
  409564:	1419      	asrs	r1, r3, #16
  409566:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40956a:	b29b      	uxth	r3, r3
  40956c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409570:	4577      	cmp	r7, lr
  409572:	f84c 2b04 	str.w	r2, [ip], #4
  409576:	ea4f 4321 	mov.w	r3, r1, asr #16
  40957a:	d8ef      	bhi.n	40955c <__mdiff+0xa0>
  40957c:	43ed      	mvns	r5, r5
  40957e:	442f      	add	r7, r5
  409580:	f027 0703 	bic.w	r7, r7, #3
  409584:	3704      	adds	r7, #4
  409586:	443c      	add	r4, r7
  409588:	3c04      	subs	r4, #4
  40958a:	b922      	cbnz	r2, 409596 <__mdiff+0xda>
  40958c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409590:	3e01      	subs	r6, #1
  409592:	2b00      	cmp	r3, #0
  409594:	d0fa      	beq.n	40958c <__mdiff+0xd0>
  409596:	6106      	str	r6, [r0, #16]
  409598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40959c:	2100      	movs	r1, #0
  40959e:	f7ff fd73 	bl	409088 <_Balloc>
  4095a2:	2201      	movs	r2, #1
  4095a4:	2300      	movs	r3, #0
  4095a6:	6102      	str	r2, [r0, #16]
  4095a8:	6143      	str	r3, [r0, #20]
  4095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095ae:	4674      	mov	r4, lr
  4095b0:	e7ab      	b.n	40950a <__mdiff+0x4e>
  4095b2:	4633      	mov	r3, r6
  4095b4:	f106 0414 	add.w	r4, r6, #20
  4095b8:	f102 0514 	add.w	r5, r2, #20
  4095bc:	4616      	mov	r6, r2
  4095be:	2701      	movs	r7, #1
  4095c0:	4698      	mov	r8, r3
  4095c2:	e7a2      	b.n	40950a <__mdiff+0x4e>

004095c4 <__d2b>:
  4095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4095c8:	b082      	sub	sp, #8
  4095ca:	2101      	movs	r1, #1
  4095cc:	461c      	mov	r4, r3
  4095ce:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4095d2:	4615      	mov	r5, r2
  4095d4:	9e08      	ldr	r6, [sp, #32]
  4095d6:	f7ff fd57 	bl	409088 <_Balloc>
  4095da:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4095de:	4680      	mov	r8, r0
  4095e0:	b10f      	cbz	r7, 4095e6 <__d2b+0x22>
  4095e2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4095e6:	9401      	str	r4, [sp, #4]
  4095e8:	b31d      	cbz	r5, 409632 <__d2b+0x6e>
  4095ea:	a802      	add	r0, sp, #8
  4095ec:	f840 5d08 	str.w	r5, [r0, #-8]!
  4095f0:	f7ff fdda 	bl	4091a8 <__lo0bits>
  4095f4:	2800      	cmp	r0, #0
  4095f6:	d134      	bne.n	409662 <__d2b+0x9e>
  4095f8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4095fc:	f8c8 2014 	str.w	r2, [r8, #20]
  409600:	2b00      	cmp	r3, #0
  409602:	bf0c      	ite	eq
  409604:	2101      	moveq	r1, #1
  409606:	2102      	movne	r1, #2
  409608:	f8c8 3018 	str.w	r3, [r8, #24]
  40960c:	f8c8 1010 	str.w	r1, [r8, #16]
  409610:	b9df      	cbnz	r7, 40964a <__d2b+0x86>
  409612:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409616:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40961a:	6030      	str	r0, [r6, #0]
  40961c:	6918      	ldr	r0, [r3, #16]
  40961e:	f7ff fda3 	bl	409168 <__hi0bits>
  409622:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409624:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409628:	6018      	str	r0, [r3, #0]
  40962a:	4640      	mov	r0, r8
  40962c:	b002      	add	sp, #8
  40962e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409632:	a801      	add	r0, sp, #4
  409634:	f7ff fdb8 	bl	4091a8 <__lo0bits>
  409638:	9b01      	ldr	r3, [sp, #4]
  40963a:	f8c8 3014 	str.w	r3, [r8, #20]
  40963e:	2101      	movs	r1, #1
  409640:	3020      	adds	r0, #32
  409642:	f8c8 1010 	str.w	r1, [r8, #16]
  409646:	2f00      	cmp	r7, #0
  409648:	d0e3      	beq.n	409612 <__d2b+0x4e>
  40964a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40964c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409650:	4407      	add	r7, r0
  409652:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409656:	6037      	str	r7, [r6, #0]
  409658:	6018      	str	r0, [r3, #0]
  40965a:	4640      	mov	r0, r8
  40965c:	b002      	add	sp, #8
  40965e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409662:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409666:	f1c0 0220 	rsb	r2, r0, #32
  40966a:	fa03 f202 	lsl.w	r2, r3, r2
  40966e:	430a      	orrs	r2, r1
  409670:	40c3      	lsrs	r3, r0
  409672:	9301      	str	r3, [sp, #4]
  409674:	f8c8 2014 	str.w	r2, [r8, #20]
  409678:	e7c2      	b.n	409600 <__d2b+0x3c>
  40967a:	bf00      	nop

0040967c <_realloc_r>:
  40967c:	2900      	cmp	r1, #0
  40967e:	f000 8095 	beq.w	4097ac <_realloc_r+0x130>
  409682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409686:	460d      	mov	r5, r1
  409688:	4616      	mov	r6, r2
  40968a:	b083      	sub	sp, #12
  40968c:	4680      	mov	r8, r0
  40968e:	f106 070b 	add.w	r7, r6, #11
  409692:	f7fa ffd9 	bl	404648 <__malloc_lock>
  409696:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40969a:	2f16      	cmp	r7, #22
  40969c:	f02e 0403 	bic.w	r4, lr, #3
  4096a0:	f1a5 0908 	sub.w	r9, r5, #8
  4096a4:	d83c      	bhi.n	409720 <_realloc_r+0xa4>
  4096a6:	2210      	movs	r2, #16
  4096a8:	4617      	mov	r7, r2
  4096aa:	42be      	cmp	r6, r7
  4096ac:	d83d      	bhi.n	40972a <_realloc_r+0xae>
  4096ae:	4294      	cmp	r4, r2
  4096b0:	da43      	bge.n	40973a <_realloc_r+0xbe>
  4096b2:	4bc4      	ldr	r3, [pc, #784]	; (4099c4 <_realloc_r+0x348>)
  4096b4:	6899      	ldr	r1, [r3, #8]
  4096b6:	eb09 0004 	add.w	r0, r9, r4
  4096ba:	4288      	cmp	r0, r1
  4096bc:	f000 80b4 	beq.w	409828 <_realloc_r+0x1ac>
  4096c0:	6843      	ldr	r3, [r0, #4]
  4096c2:	f023 0101 	bic.w	r1, r3, #1
  4096c6:	4401      	add	r1, r0
  4096c8:	6849      	ldr	r1, [r1, #4]
  4096ca:	07c9      	lsls	r1, r1, #31
  4096cc:	d54c      	bpl.n	409768 <_realloc_r+0xec>
  4096ce:	f01e 0f01 	tst.w	lr, #1
  4096d2:	f000 809b 	beq.w	40980c <_realloc_r+0x190>
  4096d6:	4631      	mov	r1, r6
  4096d8:	4640      	mov	r0, r8
  4096da:	f7fa fc1d 	bl	403f18 <_malloc_r>
  4096de:	4606      	mov	r6, r0
  4096e0:	2800      	cmp	r0, #0
  4096e2:	d03a      	beq.n	40975a <_realloc_r+0xde>
  4096e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4096e8:	f023 0301 	bic.w	r3, r3, #1
  4096ec:	444b      	add	r3, r9
  4096ee:	f1a0 0208 	sub.w	r2, r0, #8
  4096f2:	429a      	cmp	r2, r3
  4096f4:	f000 8121 	beq.w	40993a <_realloc_r+0x2be>
  4096f8:	1f22      	subs	r2, r4, #4
  4096fa:	2a24      	cmp	r2, #36	; 0x24
  4096fc:	f200 8107 	bhi.w	40990e <_realloc_r+0x292>
  409700:	2a13      	cmp	r2, #19
  409702:	f200 80db 	bhi.w	4098bc <_realloc_r+0x240>
  409706:	4603      	mov	r3, r0
  409708:	462a      	mov	r2, r5
  40970a:	6811      	ldr	r1, [r2, #0]
  40970c:	6019      	str	r1, [r3, #0]
  40970e:	6851      	ldr	r1, [r2, #4]
  409710:	6059      	str	r1, [r3, #4]
  409712:	6892      	ldr	r2, [r2, #8]
  409714:	609a      	str	r2, [r3, #8]
  409716:	4629      	mov	r1, r5
  409718:	4640      	mov	r0, r8
  40971a:	f7ff f8e9 	bl	4088f0 <_free_r>
  40971e:	e01c      	b.n	40975a <_realloc_r+0xde>
  409720:	f027 0707 	bic.w	r7, r7, #7
  409724:	2f00      	cmp	r7, #0
  409726:	463a      	mov	r2, r7
  409728:	dabf      	bge.n	4096aa <_realloc_r+0x2e>
  40972a:	2600      	movs	r6, #0
  40972c:	230c      	movs	r3, #12
  40972e:	4630      	mov	r0, r6
  409730:	f8c8 3000 	str.w	r3, [r8]
  409734:	b003      	add	sp, #12
  409736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40973a:	462e      	mov	r6, r5
  40973c:	1be3      	subs	r3, r4, r7
  40973e:	2b0f      	cmp	r3, #15
  409740:	d81e      	bhi.n	409780 <_realloc_r+0x104>
  409742:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409746:	f003 0301 	and.w	r3, r3, #1
  40974a:	4323      	orrs	r3, r4
  40974c:	444c      	add	r4, r9
  40974e:	f8c9 3004 	str.w	r3, [r9, #4]
  409752:	6863      	ldr	r3, [r4, #4]
  409754:	f043 0301 	orr.w	r3, r3, #1
  409758:	6063      	str	r3, [r4, #4]
  40975a:	4640      	mov	r0, r8
  40975c:	f7fa ff7a 	bl	404654 <__malloc_unlock>
  409760:	4630      	mov	r0, r6
  409762:	b003      	add	sp, #12
  409764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409768:	f023 0303 	bic.w	r3, r3, #3
  40976c:	18e1      	adds	r1, r4, r3
  40976e:	4291      	cmp	r1, r2
  409770:	db1f      	blt.n	4097b2 <_realloc_r+0x136>
  409772:	68c3      	ldr	r3, [r0, #12]
  409774:	6882      	ldr	r2, [r0, #8]
  409776:	462e      	mov	r6, r5
  409778:	60d3      	str	r3, [r2, #12]
  40977a:	460c      	mov	r4, r1
  40977c:	609a      	str	r2, [r3, #8]
  40977e:	e7dd      	b.n	40973c <_realloc_r+0xc0>
  409780:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409784:	eb09 0107 	add.w	r1, r9, r7
  409788:	f002 0201 	and.w	r2, r2, #1
  40978c:	444c      	add	r4, r9
  40978e:	f043 0301 	orr.w	r3, r3, #1
  409792:	4317      	orrs	r7, r2
  409794:	f8c9 7004 	str.w	r7, [r9, #4]
  409798:	604b      	str	r3, [r1, #4]
  40979a:	6863      	ldr	r3, [r4, #4]
  40979c:	f043 0301 	orr.w	r3, r3, #1
  4097a0:	3108      	adds	r1, #8
  4097a2:	6063      	str	r3, [r4, #4]
  4097a4:	4640      	mov	r0, r8
  4097a6:	f7ff f8a3 	bl	4088f0 <_free_r>
  4097aa:	e7d6      	b.n	40975a <_realloc_r+0xde>
  4097ac:	4611      	mov	r1, r2
  4097ae:	f7fa bbb3 	b.w	403f18 <_malloc_r>
  4097b2:	f01e 0f01 	tst.w	lr, #1
  4097b6:	d18e      	bne.n	4096d6 <_realloc_r+0x5a>
  4097b8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4097bc:	eba9 0a01 	sub.w	sl, r9, r1
  4097c0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4097c4:	f021 0103 	bic.w	r1, r1, #3
  4097c8:	440b      	add	r3, r1
  4097ca:	4423      	add	r3, r4
  4097cc:	4293      	cmp	r3, r2
  4097ce:	db25      	blt.n	40981c <_realloc_r+0x1a0>
  4097d0:	68c2      	ldr	r2, [r0, #12]
  4097d2:	6881      	ldr	r1, [r0, #8]
  4097d4:	4656      	mov	r6, sl
  4097d6:	60ca      	str	r2, [r1, #12]
  4097d8:	6091      	str	r1, [r2, #8]
  4097da:	f8da 100c 	ldr.w	r1, [sl, #12]
  4097de:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4097e2:	1f22      	subs	r2, r4, #4
  4097e4:	2a24      	cmp	r2, #36	; 0x24
  4097e6:	60c1      	str	r1, [r0, #12]
  4097e8:	6088      	str	r0, [r1, #8]
  4097ea:	f200 8094 	bhi.w	409916 <_realloc_r+0x29a>
  4097ee:	2a13      	cmp	r2, #19
  4097f0:	d96f      	bls.n	4098d2 <_realloc_r+0x256>
  4097f2:	6829      	ldr	r1, [r5, #0]
  4097f4:	f8ca 1008 	str.w	r1, [sl, #8]
  4097f8:	6869      	ldr	r1, [r5, #4]
  4097fa:	f8ca 100c 	str.w	r1, [sl, #12]
  4097fe:	2a1b      	cmp	r2, #27
  409800:	f200 80a2 	bhi.w	409948 <_realloc_r+0x2cc>
  409804:	3508      	adds	r5, #8
  409806:	f10a 0210 	add.w	r2, sl, #16
  40980a:	e063      	b.n	4098d4 <_realloc_r+0x258>
  40980c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409810:	eba9 0a03 	sub.w	sl, r9, r3
  409814:	f8da 1004 	ldr.w	r1, [sl, #4]
  409818:	f021 0103 	bic.w	r1, r1, #3
  40981c:	1863      	adds	r3, r4, r1
  40981e:	4293      	cmp	r3, r2
  409820:	f6ff af59 	blt.w	4096d6 <_realloc_r+0x5a>
  409824:	4656      	mov	r6, sl
  409826:	e7d8      	b.n	4097da <_realloc_r+0x15e>
  409828:	6841      	ldr	r1, [r0, #4]
  40982a:	f021 0b03 	bic.w	fp, r1, #3
  40982e:	44a3      	add	fp, r4
  409830:	f107 0010 	add.w	r0, r7, #16
  409834:	4583      	cmp	fp, r0
  409836:	da56      	bge.n	4098e6 <_realloc_r+0x26a>
  409838:	f01e 0f01 	tst.w	lr, #1
  40983c:	f47f af4b 	bne.w	4096d6 <_realloc_r+0x5a>
  409840:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409844:	eba9 0a01 	sub.w	sl, r9, r1
  409848:	f8da 1004 	ldr.w	r1, [sl, #4]
  40984c:	f021 0103 	bic.w	r1, r1, #3
  409850:	448b      	add	fp, r1
  409852:	4558      	cmp	r0, fp
  409854:	dce2      	bgt.n	40981c <_realloc_r+0x1a0>
  409856:	4656      	mov	r6, sl
  409858:	f8da 100c 	ldr.w	r1, [sl, #12]
  40985c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409860:	1f22      	subs	r2, r4, #4
  409862:	2a24      	cmp	r2, #36	; 0x24
  409864:	60c1      	str	r1, [r0, #12]
  409866:	6088      	str	r0, [r1, #8]
  409868:	f200 808f 	bhi.w	40998a <_realloc_r+0x30e>
  40986c:	2a13      	cmp	r2, #19
  40986e:	f240 808a 	bls.w	409986 <_realloc_r+0x30a>
  409872:	6829      	ldr	r1, [r5, #0]
  409874:	f8ca 1008 	str.w	r1, [sl, #8]
  409878:	6869      	ldr	r1, [r5, #4]
  40987a:	f8ca 100c 	str.w	r1, [sl, #12]
  40987e:	2a1b      	cmp	r2, #27
  409880:	f200 808a 	bhi.w	409998 <_realloc_r+0x31c>
  409884:	3508      	adds	r5, #8
  409886:	f10a 0210 	add.w	r2, sl, #16
  40988a:	6829      	ldr	r1, [r5, #0]
  40988c:	6011      	str	r1, [r2, #0]
  40988e:	6869      	ldr	r1, [r5, #4]
  409890:	6051      	str	r1, [r2, #4]
  409892:	68a9      	ldr	r1, [r5, #8]
  409894:	6091      	str	r1, [r2, #8]
  409896:	eb0a 0107 	add.w	r1, sl, r7
  40989a:	ebab 0207 	sub.w	r2, fp, r7
  40989e:	f042 0201 	orr.w	r2, r2, #1
  4098a2:	6099      	str	r1, [r3, #8]
  4098a4:	604a      	str	r2, [r1, #4]
  4098a6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4098aa:	f003 0301 	and.w	r3, r3, #1
  4098ae:	431f      	orrs	r7, r3
  4098b0:	4640      	mov	r0, r8
  4098b2:	f8ca 7004 	str.w	r7, [sl, #4]
  4098b6:	f7fa fecd 	bl	404654 <__malloc_unlock>
  4098ba:	e751      	b.n	409760 <_realloc_r+0xe4>
  4098bc:	682b      	ldr	r3, [r5, #0]
  4098be:	6003      	str	r3, [r0, #0]
  4098c0:	686b      	ldr	r3, [r5, #4]
  4098c2:	6043      	str	r3, [r0, #4]
  4098c4:	2a1b      	cmp	r2, #27
  4098c6:	d82d      	bhi.n	409924 <_realloc_r+0x2a8>
  4098c8:	f100 0308 	add.w	r3, r0, #8
  4098cc:	f105 0208 	add.w	r2, r5, #8
  4098d0:	e71b      	b.n	40970a <_realloc_r+0x8e>
  4098d2:	4632      	mov	r2, r6
  4098d4:	6829      	ldr	r1, [r5, #0]
  4098d6:	6011      	str	r1, [r2, #0]
  4098d8:	6869      	ldr	r1, [r5, #4]
  4098da:	6051      	str	r1, [r2, #4]
  4098dc:	68a9      	ldr	r1, [r5, #8]
  4098de:	6091      	str	r1, [r2, #8]
  4098e0:	461c      	mov	r4, r3
  4098e2:	46d1      	mov	r9, sl
  4098e4:	e72a      	b.n	40973c <_realloc_r+0xc0>
  4098e6:	eb09 0107 	add.w	r1, r9, r7
  4098ea:	ebab 0b07 	sub.w	fp, fp, r7
  4098ee:	f04b 0201 	orr.w	r2, fp, #1
  4098f2:	6099      	str	r1, [r3, #8]
  4098f4:	604a      	str	r2, [r1, #4]
  4098f6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4098fa:	f003 0301 	and.w	r3, r3, #1
  4098fe:	431f      	orrs	r7, r3
  409900:	4640      	mov	r0, r8
  409902:	f845 7c04 	str.w	r7, [r5, #-4]
  409906:	f7fa fea5 	bl	404654 <__malloc_unlock>
  40990a:	462e      	mov	r6, r5
  40990c:	e728      	b.n	409760 <_realloc_r+0xe4>
  40990e:	4629      	mov	r1, r5
  409910:	f7ff fb56 	bl	408fc0 <memmove>
  409914:	e6ff      	b.n	409716 <_realloc_r+0x9a>
  409916:	4629      	mov	r1, r5
  409918:	4630      	mov	r0, r6
  40991a:	461c      	mov	r4, r3
  40991c:	46d1      	mov	r9, sl
  40991e:	f7ff fb4f 	bl	408fc0 <memmove>
  409922:	e70b      	b.n	40973c <_realloc_r+0xc0>
  409924:	68ab      	ldr	r3, [r5, #8]
  409926:	6083      	str	r3, [r0, #8]
  409928:	68eb      	ldr	r3, [r5, #12]
  40992a:	60c3      	str	r3, [r0, #12]
  40992c:	2a24      	cmp	r2, #36	; 0x24
  40992e:	d017      	beq.n	409960 <_realloc_r+0x2e4>
  409930:	f100 0310 	add.w	r3, r0, #16
  409934:	f105 0210 	add.w	r2, r5, #16
  409938:	e6e7      	b.n	40970a <_realloc_r+0x8e>
  40993a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40993e:	f023 0303 	bic.w	r3, r3, #3
  409942:	441c      	add	r4, r3
  409944:	462e      	mov	r6, r5
  409946:	e6f9      	b.n	40973c <_realloc_r+0xc0>
  409948:	68a9      	ldr	r1, [r5, #8]
  40994a:	f8ca 1010 	str.w	r1, [sl, #16]
  40994e:	68e9      	ldr	r1, [r5, #12]
  409950:	f8ca 1014 	str.w	r1, [sl, #20]
  409954:	2a24      	cmp	r2, #36	; 0x24
  409956:	d00c      	beq.n	409972 <_realloc_r+0x2f6>
  409958:	3510      	adds	r5, #16
  40995a:	f10a 0218 	add.w	r2, sl, #24
  40995e:	e7b9      	b.n	4098d4 <_realloc_r+0x258>
  409960:	692b      	ldr	r3, [r5, #16]
  409962:	6103      	str	r3, [r0, #16]
  409964:	696b      	ldr	r3, [r5, #20]
  409966:	6143      	str	r3, [r0, #20]
  409968:	f105 0218 	add.w	r2, r5, #24
  40996c:	f100 0318 	add.w	r3, r0, #24
  409970:	e6cb      	b.n	40970a <_realloc_r+0x8e>
  409972:	692a      	ldr	r2, [r5, #16]
  409974:	f8ca 2018 	str.w	r2, [sl, #24]
  409978:	696a      	ldr	r2, [r5, #20]
  40997a:	f8ca 201c 	str.w	r2, [sl, #28]
  40997e:	3518      	adds	r5, #24
  409980:	f10a 0220 	add.w	r2, sl, #32
  409984:	e7a6      	b.n	4098d4 <_realloc_r+0x258>
  409986:	4632      	mov	r2, r6
  409988:	e77f      	b.n	40988a <_realloc_r+0x20e>
  40998a:	4629      	mov	r1, r5
  40998c:	4630      	mov	r0, r6
  40998e:	9301      	str	r3, [sp, #4]
  409990:	f7ff fb16 	bl	408fc0 <memmove>
  409994:	9b01      	ldr	r3, [sp, #4]
  409996:	e77e      	b.n	409896 <_realloc_r+0x21a>
  409998:	68a9      	ldr	r1, [r5, #8]
  40999a:	f8ca 1010 	str.w	r1, [sl, #16]
  40999e:	68e9      	ldr	r1, [r5, #12]
  4099a0:	f8ca 1014 	str.w	r1, [sl, #20]
  4099a4:	2a24      	cmp	r2, #36	; 0x24
  4099a6:	d003      	beq.n	4099b0 <_realloc_r+0x334>
  4099a8:	3510      	adds	r5, #16
  4099aa:	f10a 0218 	add.w	r2, sl, #24
  4099ae:	e76c      	b.n	40988a <_realloc_r+0x20e>
  4099b0:	692a      	ldr	r2, [r5, #16]
  4099b2:	f8ca 2018 	str.w	r2, [sl, #24]
  4099b6:	696a      	ldr	r2, [r5, #20]
  4099b8:	f8ca 201c 	str.w	r2, [sl, #28]
  4099bc:	3518      	adds	r5, #24
  4099be:	f10a 0220 	add.w	r2, sl, #32
  4099c2:	e762      	b.n	40988a <_realloc_r+0x20e>
  4099c4:	20400458 	.word	0x20400458

004099c8 <__sread>:
  4099c8:	b510      	push	{r4, lr}
  4099ca:	460c      	mov	r4, r1
  4099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4099d0:	f000 fb06 	bl	409fe0 <_read_r>
  4099d4:	2800      	cmp	r0, #0
  4099d6:	db03      	blt.n	4099e0 <__sread+0x18>
  4099d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4099da:	4403      	add	r3, r0
  4099dc:	6523      	str	r3, [r4, #80]	; 0x50
  4099de:	bd10      	pop	{r4, pc}
  4099e0:	89a3      	ldrh	r3, [r4, #12]
  4099e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4099e6:	81a3      	strh	r3, [r4, #12]
  4099e8:	bd10      	pop	{r4, pc}
  4099ea:	bf00      	nop

004099ec <__swrite>:
  4099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4099f0:	4616      	mov	r6, r2
  4099f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4099f6:	461f      	mov	r7, r3
  4099f8:	05d3      	lsls	r3, r2, #23
  4099fa:	460c      	mov	r4, r1
  4099fc:	4605      	mov	r5, r0
  4099fe:	d507      	bpl.n	409a10 <__swrite+0x24>
  409a00:	2200      	movs	r2, #0
  409a02:	2302      	movs	r3, #2
  409a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409a08:	f000 fabe 	bl	409f88 <_lseek_r>
  409a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409a18:	81a2      	strh	r2, [r4, #12]
  409a1a:	463b      	mov	r3, r7
  409a1c:	4632      	mov	r2, r6
  409a1e:	4628      	mov	r0, r5
  409a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409a24:	f000 b8dc 	b.w	409be0 <_write_r>

00409a28 <__sseek>:
  409a28:	b510      	push	{r4, lr}
  409a2a:	460c      	mov	r4, r1
  409a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409a30:	f000 faaa 	bl	409f88 <_lseek_r>
  409a34:	89a3      	ldrh	r3, [r4, #12]
  409a36:	1c42      	adds	r2, r0, #1
  409a38:	bf0e      	itee	eq
  409a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409a42:	6520      	strne	r0, [r4, #80]	; 0x50
  409a44:	81a3      	strh	r3, [r4, #12]
  409a46:	bd10      	pop	{r4, pc}

00409a48 <__sclose>:
  409a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409a4c:	f000 b970 	b.w	409d30 <_close_r>

00409a50 <__ssprint_r>:
  409a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409a54:	6893      	ldr	r3, [r2, #8]
  409a56:	b083      	sub	sp, #12
  409a58:	4690      	mov	r8, r2
  409a5a:	2b00      	cmp	r3, #0
  409a5c:	d070      	beq.n	409b40 <__ssprint_r+0xf0>
  409a5e:	4682      	mov	sl, r0
  409a60:	460c      	mov	r4, r1
  409a62:	6817      	ldr	r7, [r2, #0]
  409a64:	688d      	ldr	r5, [r1, #8]
  409a66:	6808      	ldr	r0, [r1, #0]
  409a68:	e042      	b.n	409af0 <__ssprint_r+0xa0>
  409a6a:	89a3      	ldrh	r3, [r4, #12]
  409a6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409a70:	d02e      	beq.n	409ad0 <__ssprint_r+0x80>
  409a72:	6965      	ldr	r5, [r4, #20]
  409a74:	6921      	ldr	r1, [r4, #16]
  409a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409a7a:	eba0 0b01 	sub.w	fp, r0, r1
  409a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409a82:	f10b 0001 	add.w	r0, fp, #1
  409a86:	106d      	asrs	r5, r5, #1
  409a88:	4430      	add	r0, r6
  409a8a:	42a8      	cmp	r0, r5
  409a8c:	462a      	mov	r2, r5
  409a8e:	bf84      	itt	hi
  409a90:	4605      	movhi	r5, r0
  409a92:	462a      	movhi	r2, r5
  409a94:	055b      	lsls	r3, r3, #21
  409a96:	d538      	bpl.n	409b0a <__ssprint_r+0xba>
  409a98:	4611      	mov	r1, r2
  409a9a:	4650      	mov	r0, sl
  409a9c:	f7fa fa3c 	bl	403f18 <_malloc_r>
  409aa0:	2800      	cmp	r0, #0
  409aa2:	d03c      	beq.n	409b1e <__ssprint_r+0xce>
  409aa4:	465a      	mov	r2, fp
  409aa6:	6921      	ldr	r1, [r4, #16]
  409aa8:	9001      	str	r0, [sp, #4]
  409aaa:	f7fa fce5 	bl	404478 <memcpy>
  409aae:	89a2      	ldrh	r2, [r4, #12]
  409ab0:	9b01      	ldr	r3, [sp, #4]
  409ab2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409aba:	81a2      	strh	r2, [r4, #12]
  409abc:	eba5 020b 	sub.w	r2, r5, fp
  409ac0:	eb03 000b 	add.w	r0, r3, fp
  409ac4:	6165      	str	r5, [r4, #20]
  409ac6:	6123      	str	r3, [r4, #16]
  409ac8:	6020      	str	r0, [r4, #0]
  409aca:	60a2      	str	r2, [r4, #8]
  409acc:	4635      	mov	r5, r6
  409ace:	46b3      	mov	fp, r6
  409ad0:	465a      	mov	r2, fp
  409ad2:	4649      	mov	r1, r9
  409ad4:	f7ff fa74 	bl	408fc0 <memmove>
  409ad8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409adc:	68a2      	ldr	r2, [r4, #8]
  409ade:	6820      	ldr	r0, [r4, #0]
  409ae0:	1b55      	subs	r5, r2, r5
  409ae2:	4458      	add	r0, fp
  409ae4:	1b9e      	subs	r6, r3, r6
  409ae6:	60a5      	str	r5, [r4, #8]
  409ae8:	6020      	str	r0, [r4, #0]
  409aea:	f8c8 6008 	str.w	r6, [r8, #8]
  409aee:	b33e      	cbz	r6, 409b40 <__ssprint_r+0xf0>
  409af0:	687e      	ldr	r6, [r7, #4]
  409af2:	463b      	mov	r3, r7
  409af4:	3708      	adds	r7, #8
  409af6:	2e00      	cmp	r6, #0
  409af8:	d0fa      	beq.n	409af0 <__ssprint_r+0xa0>
  409afa:	42ae      	cmp	r6, r5
  409afc:	f8d3 9000 	ldr.w	r9, [r3]
  409b00:	46ab      	mov	fp, r5
  409b02:	d2b2      	bcs.n	409a6a <__ssprint_r+0x1a>
  409b04:	4635      	mov	r5, r6
  409b06:	46b3      	mov	fp, r6
  409b08:	e7e2      	b.n	409ad0 <__ssprint_r+0x80>
  409b0a:	4650      	mov	r0, sl
  409b0c:	f7ff fdb6 	bl	40967c <_realloc_r>
  409b10:	4603      	mov	r3, r0
  409b12:	2800      	cmp	r0, #0
  409b14:	d1d2      	bne.n	409abc <__ssprint_r+0x6c>
  409b16:	6921      	ldr	r1, [r4, #16]
  409b18:	4650      	mov	r0, sl
  409b1a:	f7fe fee9 	bl	4088f0 <_free_r>
  409b1e:	230c      	movs	r3, #12
  409b20:	f8ca 3000 	str.w	r3, [sl]
  409b24:	89a3      	ldrh	r3, [r4, #12]
  409b26:	2200      	movs	r2, #0
  409b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409b2c:	f04f 30ff 	mov.w	r0, #4294967295
  409b30:	81a3      	strh	r3, [r4, #12]
  409b32:	f8c8 2008 	str.w	r2, [r8, #8]
  409b36:	f8c8 2004 	str.w	r2, [r8, #4]
  409b3a:	b003      	add	sp, #12
  409b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b40:	2000      	movs	r0, #0
  409b42:	f8c8 0004 	str.w	r0, [r8, #4]
  409b46:	b003      	add	sp, #12
  409b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409b4c <__sprint_r.part.0>:
  409b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  409b52:	049c      	lsls	r4, r3, #18
  409b54:	4693      	mov	fp, r2
  409b56:	d52f      	bpl.n	409bb8 <__sprint_r.part.0+0x6c>
  409b58:	6893      	ldr	r3, [r2, #8]
  409b5a:	6812      	ldr	r2, [r2, #0]
  409b5c:	b353      	cbz	r3, 409bb4 <__sprint_r.part.0+0x68>
  409b5e:	460e      	mov	r6, r1
  409b60:	4607      	mov	r7, r0
  409b62:	f102 0908 	add.w	r9, r2, #8
  409b66:	e919 0420 	ldmdb	r9, {r5, sl}
  409b6a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  409b6e:	d017      	beq.n	409ba0 <__sprint_r.part.0+0x54>
  409b70:	3d04      	subs	r5, #4
  409b72:	2400      	movs	r4, #0
  409b74:	e001      	b.n	409b7a <__sprint_r.part.0+0x2e>
  409b76:	45a0      	cmp	r8, r4
  409b78:	d010      	beq.n	409b9c <__sprint_r.part.0+0x50>
  409b7a:	4632      	mov	r2, r6
  409b7c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  409b80:	4638      	mov	r0, r7
  409b82:	f000 f999 	bl	409eb8 <_fputwc_r>
  409b86:	1c43      	adds	r3, r0, #1
  409b88:	f104 0401 	add.w	r4, r4, #1
  409b8c:	d1f3      	bne.n	409b76 <__sprint_r.part.0+0x2a>
  409b8e:	2300      	movs	r3, #0
  409b90:	f8cb 3008 	str.w	r3, [fp, #8]
  409b94:	f8cb 3004 	str.w	r3, [fp, #4]
  409b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b9c:	f8db 3008 	ldr.w	r3, [fp, #8]
  409ba0:	f02a 0a03 	bic.w	sl, sl, #3
  409ba4:	eba3 030a 	sub.w	r3, r3, sl
  409ba8:	f8cb 3008 	str.w	r3, [fp, #8]
  409bac:	f109 0908 	add.w	r9, r9, #8
  409bb0:	2b00      	cmp	r3, #0
  409bb2:	d1d8      	bne.n	409b66 <__sprint_r.part.0+0x1a>
  409bb4:	2000      	movs	r0, #0
  409bb6:	e7ea      	b.n	409b8e <__sprint_r.part.0+0x42>
  409bb8:	f7fe ff80 	bl	408abc <__sfvwrite_r>
  409bbc:	2300      	movs	r3, #0
  409bbe:	f8cb 3008 	str.w	r3, [fp, #8]
  409bc2:	f8cb 3004 	str.w	r3, [fp, #4]
  409bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bca:	bf00      	nop

00409bcc <__sprint_r>:
  409bcc:	6893      	ldr	r3, [r2, #8]
  409bce:	b10b      	cbz	r3, 409bd4 <__sprint_r+0x8>
  409bd0:	f7ff bfbc 	b.w	409b4c <__sprint_r.part.0>
  409bd4:	b410      	push	{r4}
  409bd6:	4618      	mov	r0, r3
  409bd8:	6053      	str	r3, [r2, #4]
  409bda:	bc10      	pop	{r4}
  409bdc:	4770      	bx	lr
  409bde:	bf00      	nop

00409be0 <_write_r>:
  409be0:	b570      	push	{r4, r5, r6, lr}
  409be2:	460d      	mov	r5, r1
  409be4:	4c08      	ldr	r4, [pc, #32]	; (409c08 <_write_r+0x28>)
  409be6:	4611      	mov	r1, r2
  409be8:	4606      	mov	r6, r0
  409bea:	461a      	mov	r2, r3
  409bec:	4628      	mov	r0, r5
  409bee:	2300      	movs	r3, #0
  409bf0:	6023      	str	r3, [r4, #0]
  409bf2:	f7f7 f83b 	bl	400c6c <_write>
  409bf6:	1c43      	adds	r3, r0, #1
  409bf8:	d000      	beq.n	409bfc <_write_r+0x1c>
  409bfa:	bd70      	pop	{r4, r5, r6, pc}
  409bfc:	6823      	ldr	r3, [r4, #0]
  409bfe:	2b00      	cmp	r3, #0
  409c00:	d0fb      	beq.n	409bfa <_write_r+0x1a>
  409c02:	6033      	str	r3, [r6, #0]
  409c04:	bd70      	pop	{r4, r5, r6, pc}
  409c06:	bf00      	nop
  409c08:	20400e80 	.word	0x20400e80

00409c0c <__register_exitproc>:
  409c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409c10:	4d2c      	ldr	r5, [pc, #176]	; (409cc4 <__register_exitproc+0xb8>)
  409c12:	4606      	mov	r6, r0
  409c14:	6828      	ldr	r0, [r5, #0]
  409c16:	4698      	mov	r8, r3
  409c18:	460f      	mov	r7, r1
  409c1a:	4691      	mov	r9, r2
  409c1c:	f7ff f902 	bl	408e24 <__retarget_lock_acquire_recursive>
  409c20:	4b29      	ldr	r3, [pc, #164]	; (409cc8 <__register_exitproc+0xbc>)
  409c22:	681c      	ldr	r4, [r3, #0]
  409c24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409c28:	2b00      	cmp	r3, #0
  409c2a:	d03e      	beq.n	409caa <__register_exitproc+0x9e>
  409c2c:	685a      	ldr	r2, [r3, #4]
  409c2e:	2a1f      	cmp	r2, #31
  409c30:	dc1c      	bgt.n	409c6c <__register_exitproc+0x60>
  409c32:	f102 0e01 	add.w	lr, r2, #1
  409c36:	b176      	cbz	r6, 409c56 <__register_exitproc+0x4a>
  409c38:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409c3c:	2401      	movs	r4, #1
  409c3e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409c42:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409c46:	4094      	lsls	r4, r2
  409c48:	4320      	orrs	r0, r4
  409c4a:	2e02      	cmp	r6, #2
  409c4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409c50:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409c54:	d023      	beq.n	409c9e <__register_exitproc+0x92>
  409c56:	3202      	adds	r2, #2
  409c58:	f8c3 e004 	str.w	lr, [r3, #4]
  409c5c:	6828      	ldr	r0, [r5, #0]
  409c5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409c62:	f7ff f8e1 	bl	408e28 <__retarget_lock_release_recursive>
  409c66:	2000      	movs	r0, #0
  409c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409c6c:	4b17      	ldr	r3, [pc, #92]	; (409ccc <__register_exitproc+0xc0>)
  409c6e:	b30b      	cbz	r3, 409cb4 <__register_exitproc+0xa8>
  409c70:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409c74:	f7fa f940 	bl	403ef8 <malloc>
  409c78:	4603      	mov	r3, r0
  409c7a:	b1d8      	cbz	r0, 409cb4 <__register_exitproc+0xa8>
  409c7c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409c80:	6002      	str	r2, [r0, #0]
  409c82:	2100      	movs	r1, #0
  409c84:	6041      	str	r1, [r0, #4]
  409c86:	460a      	mov	r2, r1
  409c88:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409c8c:	f04f 0e01 	mov.w	lr, #1
  409c90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409c94:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409c98:	2e00      	cmp	r6, #0
  409c9a:	d0dc      	beq.n	409c56 <__register_exitproc+0x4a>
  409c9c:	e7cc      	b.n	409c38 <__register_exitproc+0x2c>
  409c9e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409ca2:	430c      	orrs	r4, r1
  409ca4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409ca8:	e7d5      	b.n	409c56 <__register_exitproc+0x4a>
  409caa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409cae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409cb2:	e7bb      	b.n	409c2c <__register_exitproc+0x20>
  409cb4:	6828      	ldr	r0, [r5, #0]
  409cb6:	f7ff f8b7 	bl	408e28 <__retarget_lock_release_recursive>
  409cba:	f04f 30ff 	mov.w	r0, #4294967295
  409cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409cc2:	bf00      	nop
  409cc4:	20400868 	.word	0x20400868
  409cc8:	0040b164 	.word	0x0040b164
  409ccc:	00403ef9 	.word	0x00403ef9

00409cd0 <_calloc_r>:
  409cd0:	b510      	push	{r4, lr}
  409cd2:	fb02 f101 	mul.w	r1, r2, r1
  409cd6:	f7fa f91f 	bl	403f18 <_malloc_r>
  409cda:	4604      	mov	r4, r0
  409cdc:	b1d8      	cbz	r0, 409d16 <_calloc_r+0x46>
  409cde:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409ce2:	f022 0203 	bic.w	r2, r2, #3
  409ce6:	3a04      	subs	r2, #4
  409ce8:	2a24      	cmp	r2, #36	; 0x24
  409cea:	d818      	bhi.n	409d1e <_calloc_r+0x4e>
  409cec:	2a13      	cmp	r2, #19
  409cee:	d914      	bls.n	409d1a <_calloc_r+0x4a>
  409cf0:	2300      	movs	r3, #0
  409cf2:	2a1b      	cmp	r2, #27
  409cf4:	6003      	str	r3, [r0, #0]
  409cf6:	6043      	str	r3, [r0, #4]
  409cf8:	d916      	bls.n	409d28 <_calloc_r+0x58>
  409cfa:	2a24      	cmp	r2, #36	; 0x24
  409cfc:	6083      	str	r3, [r0, #8]
  409cfe:	60c3      	str	r3, [r0, #12]
  409d00:	bf11      	iteee	ne
  409d02:	f100 0210 	addne.w	r2, r0, #16
  409d06:	6103      	streq	r3, [r0, #16]
  409d08:	6143      	streq	r3, [r0, #20]
  409d0a:	f100 0218 	addeq.w	r2, r0, #24
  409d0e:	2300      	movs	r3, #0
  409d10:	6013      	str	r3, [r2, #0]
  409d12:	6053      	str	r3, [r2, #4]
  409d14:	6093      	str	r3, [r2, #8]
  409d16:	4620      	mov	r0, r4
  409d18:	bd10      	pop	{r4, pc}
  409d1a:	4602      	mov	r2, r0
  409d1c:	e7f7      	b.n	409d0e <_calloc_r+0x3e>
  409d1e:	2100      	movs	r1, #0
  409d20:	f7fa fc44 	bl	4045ac <memset>
  409d24:	4620      	mov	r0, r4
  409d26:	bd10      	pop	{r4, pc}
  409d28:	f100 0208 	add.w	r2, r0, #8
  409d2c:	e7ef      	b.n	409d0e <_calloc_r+0x3e>
  409d2e:	bf00      	nop

00409d30 <_close_r>:
  409d30:	b538      	push	{r3, r4, r5, lr}
  409d32:	4c07      	ldr	r4, [pc, #28]	; (409d50 <_close_r+0x20>)
  409d34:	2300      	movs	r3, #0
  409d36:	4605      	mov	r5, r0
  409d38:	4608      	mov	r0, r1
  409d3a:	6023      	str	r3, [r4, #0]
  409d3c:	f7f7 fcac 	bl	401698 <_close>
  409d40:	1c43      	adds	r3, r0, #1
  409d42:	d000      	beq.n	409d46 <_close_r+0x16>
  409d44:	bd38      	pop	{r3, r4, r5, pc}
  409d46:	6823      	ldr	r3, [r4, #0]
  409d48:	2b00      	cmp	r3, #0
  409d4a:	d0fb      	beq.n	409d44 <_close_r+0x14>
  409d4c:	602b      	str	r3, [r5, #0]
  409d4e:	bd38      	pop	{r3, r4, r5, pc}
  409d50:	20400e80 	.word	0x20400e80

00409d54 <_fclose_r>:
  409d54:	b570      	push	{r4, r5, r6, lr}
  409d56:	b159      	cbz	r1, 409d70 <_fclose_r+0x1c>
  409d58:	4605      	mov	r5, r0
  409d5a:	460c      	mov	r4, r1
  409d5c:	b110      	cbz	r0, 409d64 <_fclose_r+0x10>
  409d5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409d60:	2b00      	cmp	r3, #0
  409d62:	d03c      	beq.n	409dde <_fclose_r+0x8a>
  409d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409d66:	07d8      	lsls	r0, r3, #31
  409d68:	d505      	bpl.n	409d76 <_fclose_r+0x22>
  409d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409d6e:	b92b      	cbnz	r3, 409d7c <_fclose_r+0x28>
  409d70:	2600      	movs	r6, #0
  409d72:	4630      	mov	r0, r6
  409d74:	bd70      	pop	{r4, r5, r6, pc}
  409d76:	89a3      	ldrh	r3, [r4, #12]
  409d78:	0599      	lsls	r1, r3, #22
  409d7a:	d53c      	bpl.n	409df6 <_fclose_r+0xa2>
  409d7c:	4621      	mov	r1, r4
  409d7e:	4628      	mov	r0, r5
  409d80:	f7fe fc1c 	bl	4085bc <__sflush_r>
  409d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409d86:	4606      	mov	r6, r0
  409d88:	b133      	cbz	r3, 409d98 <_fclose_r+0x44>
  409d8a:	69e1      	ldr	r1, [r4, #28]
  409d8c:	4628      	mov	r0, r5
  409d8e:	4798      	blx	r3
  409d90:	2800      	cmp	r0, #0
  409d92:	bfb8      	it	lt
  409d94:	f04f 36ff 	movlt.w	r6, #4294967295
  409d98:	89a3      	ldrh	r3, [r4, #12]
  409d9a:	061a      	lsls	r2, r3, #24
  409d9c:	d422      	bmi.n	409de4 <_fclose_r+0x90>
  409d9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409da0:	b141      	cbz	r1, 409db4 <_fclose_r+0x60>
  409da2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409da6:	4299      	cmp	r1, r3
  409da8:	d002      	beq.n	409db0 <_fclose_r+0x5c>
  409daa:	4628      	mov	r0, r5
  409dac:	f7fe fda0 	bl	4088f0 <_free_r>
  409db0:	2300      	movs	r3, #0
  409db2:	6323      	str	r3, [r4, #48]	; 0x30
  409db4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409db6:	b121      	cbz	r1, 409dc2 <_fclose_r+0x6e>
  409db8:	4628      	mov	r0, r5
  409dba:	f7fe fd99 	bl	4088f0 <_free_r>
  409dbe:	2300      	movs	r3, #0
  409dc0:	6463      	str	r3, [r4, #68]	; 0x44
  409dc2:	f7fe fd1f 	bl	408804 <__sfp_lock_acquire>
  409dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409dc8:	2200      	movs	r2, #0
  409dca:	07db      	lsls	r3, r3, #31
  409dcc:	81a2      	strh	r2, [r4, #12]
  409dce:	d50e      	bpl.n	409dee <_fclose_r+0x9a>
  409dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409dd2:	f7ff f825 	bl	408e20 <__retarget_lock_close_recursive>
  409dd6:	f7fe fd1b 	bl	408810 <__sfp_lock_release>
  409dda:	4630      	mov	r0, r6
  409ddc:	bd70      	pop	{r4, r5, r6, pc}
  409dde:	f7fe fce5 	bl	4087ac <__sinit>
  409de2:	e7bf      	b.n	409d64 <_fclose_r+0x10>
  409de4:	6921      	ldr	r1, [r4, #16]
  409de6:	4628      	mov	r0, r5
  409de8:	f7fe fd82 	bl	4088f0 <_free_r>
  409dec:	e7d7      	b.n	409d9e <_fclose_r+0x4a>
  409dee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409df0:	f7ff f81a 	bl	408e28 <__retarget_lock_release_recursive>
  409df4:	e7ec      	b.n	409dd0 <_fclose_r+0x7c>
  409df6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409df8:	f7ff f814 	bl	408e24 <__retarget_lock_acquire_recursive>
  409dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409e00:	2b00      	cmp	r3, #0
  409e02:	d1bb      	bne.n	409d7c <_fclose_r+0x28>
  409e04:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409e06:	f016 0601 	ands.w	r6, r6, #1
  409e0a:	d1b1      	bne.n	409d70 <_fclose_r+0x1c>
  409e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409e0e:	f7ff f80b 	bl	408e28 <__retarget_lock_release_recursive>
  409e12:	4630      	mov	r0, r6
  409e14:	bd70      	pop	{r4, r5, r6, pc}
  409e16:	bf00      	nop

00409e18 <__fputwc>:
  409e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409e1c:	b082      	sub	sp, #8
  409e1e:	4680      	mov	r8, r0
  409e20:	4689      	mov	r9, r1
  409e22:	4614      	mov	r4, r2
  409e24:	f000 f8a2 	bl	409f6c <__locale_mb_cur_max>
  409e28:	2801      	cmp	r0, #1
  409e2a:	d036      	beq.n	409e9a <__fputwc+0x82>
  409e2c:	464a      	mov	r2, r9
  409e2e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  409e32:	a901      	add	r1, sp, #4
  409e34:	4640      	mov	r0, r8
  409e36:	f000 f941 	bl	40a0bc <_wcrtomb_r>
  409e3a:	1c42      	adds	r2, r0, #1
  409e3c:	4606      	mov	r6, r0
  409e3e:	d025      	beq.n	409e8c <__fputwc+0x74>
  409e40:	b3a8      	cbz	r0, 409eae <__fputwc+0x96>
  409e42:	f89d e004 	ldrb.w	lr, [sp, #4]
  409e46:	2500      	movs	r5, #0
  409e48:	f10d 0a04 	add.w	sl, sp, #4
  409e4c:	e009      	b.n	409e62 <__fputwc+0x4a>
  409e4e:	6823      	ldr	r3, [r4, #0]
  409e50:	1c5a      	adds	r2, r3, #1
  409e52:	6022      	str	r2, [r4, #0]
  409e54:	f883 e000 	strb.w	lr, [r3]
  409e58:	3501      	adds	r5, #1
  409e5a:	42b5      	cmp	r5, r6
  409e5c:	d227      	bcs.n	409eae <__fputwc+0x96>
  409e5e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  409e62:	68a3      	ldr	r3, [r4, #8]
  409e64:	3b01      	subs	r3, #1
  409e66:	2b00      	cmp	r3, #0
  409e68:	60a3      	str	r3, [r4, #8]
  409e6a:	daf0      	bge.n	409e4e <__fputwc+0x36>
  409e6c:	69a7      	ldr	r7, [r4, #24]
  409e6e:	42bb      	cmp	r3, r7
  409e70:	4671      	mov	r1, lr
  409e72:	4622      	mov	r2, r4
  409e74:	4640      	mov	r0, r8
  409e76:	db02      	blt.n	409e7e <__fputwc+0x66>
  409e78:	f1be 0f0a 	cmp.w	lr, #10
  409e7c:	d1e7      	bne.n	409e4e <__fputwc+0x36>
  409e7e:	f000 f8c5 	bl	40a00c <__swbuf_r>
  409e82:	1c43      	adds	r3, r0, #1
  409e84:	d1e8      	bne.n	409e58 <__fputwc+0x40>
  409e86:	b002      	add	sp, #8
  409e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e8c:	89a3      	ldrh	r3, [r4, #12]
  409e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e92:	81a3      	strh	r3, [r4, #12]
  409e94:	b002      	add	sp, #8
  409e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e9a:	f109 33ff 	add.w	r3, r9, #4294967295
  409e9e:	2bfe      	cmp	r3, #254	; 0xfe
  409ea0:	d8c4      	bhi.n	409e2c <__fputwc+0x14>
  409ea2:	fa5f fe89 	uxtb.w	lr, r9
  409ea6:	4606      	mov	r6, r0
  409ea8:	f88d e004 	strb.w	lr, [sp, #4]
  409eac:	e7cb      	b.n	409e46 <__fputwc+0x2e>
  409eae:	4648      	mov	r0, r9
  409eb0:	b002      	add	sp, #8
  409eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409eb6:	bf00      	nop

00409eb8 <_fputwc_r>:
  409eb8:	b530      	push	{r4, r5, lr}
  409eba:	6e53      	ldr	r3, [r2, #100]	; 0x64
  409ebc:	f013 0f01 	tst.w	r3, #1
  409ec0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  409ec4:	4614      	mov	r4, r2
  409ec6:	b083      	sub	sp, #12
  409ec8:	4605      	mov	r5, r0
  409eca:	b29a      	uxth	r2, r3
  409ecc:	d101      	bne.n	409ed2 <_fputwc_r+0x1a>
  409ece:	0590      	lsls	r0, r2, #22
  409ed0:	d51c      	bpl.n	409f0c <_fputwc_r+0x54>
  409ed2:	0490      	lsls	r0, r2, #18
  409ed4:	d406      	bmi.n	409ee4 <_fputwc_r+0x2c>
  409ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  409ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  409edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409ee0:	81a3      	strh	r3, [r4, #12]
  409ee2:	6662      	str	r2, [r4, #100]	; 0x64
  409ee4:	4628      	mov	r0, r5
  409ee6:	4622      	mov	r2, r4
  409ee8:	f7ff ff96 	bl	409e18 <__fputwc>
  409eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409eee:	07da      	lsls	r2, r3, #31
  409ef0:	4605      	mov	r5, r0
  409ef2:	d402      	bmi.n	409efa <_fputwc_r+0x42>
  409ef4:	89a3      	ldrh	r3, [r4, #12]
  409ef6:	059b      	lsls	r3, r3, #22
  409ef8:	d502      	bpl.n	409f00 <_fputwc_r+0x48>
  409efa:	4628      	mov	r0, r5
  409efc:	b003      	add	sp, #12
  409efe:	bd30      	pop	{r4, r5, pc}
  409f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409f02:	f7fe ff91 	bl	408e28 <__retarget_lock_release_recursive>
  409f06:	4628      	mov	r0, r5
  409f08:	b003      	add	sp, #12
  409f0a:	bd30      	pop	{r4, r5, pc}
  409f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409f0e:	9101      	str	r1, [sp, #4]
  409f10:	f7fe ff88 	bl	408e24 <__retarget_lock_acquire_recursive>
  409f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409f18:	9901      	ldr	r1, [sp, #4]
  409f1a:	b29a      	uxth	r2, r3
  409f1c:	e7d9      	b.n	409ed2 <_fputwc_r+0x1a>
  409f1e:	bf00      	nop

00409f20 <_fstat_r>:
  409f20:	b538      	push	{r3, r4, r5, lr}
  409f22:	460b      	mov	r3, r1
  409f24:	4c07      	ldr	r4, [pc, #28]	; (409f44 <_fstat_r+0x24>)
  409f26:	4605      	mov	r5, r0
  409f28:	4611      	mov	r1, r2
  409f2a:	4618      	mov	r0, r3
  409f2c:	2300      	movs	r3, #0
  409f2e:	6023      	str	r3, [r4, #0]
  409f30:	f7f7 fbb5 	bl	40169e <_fstat>
  409f34:	1c43      	adds	r3, r0, #1
  409f36:	d000      	beq.n	409f3a <_fstat_r+0x1a>
  409f38:	bd38      	pop	{r3, r4, r5, pc}
  409f3a:	6823      	ldr	r3, [r4, #0]
  409f3c:	2b00      	cmp	r3, #0
  409f3e:	d0fb      	beq.n	409f38 <_fstat_r+0x18>
  409f40:	602b      	str	r3, [r5, #0]
  409f42:	bd38      	pop	{r3, r4, r5, pc}
  409f44:	20400e80 	.word	0x20400e80

00409f48 <_isatty_r>:
  409f48:	b538      	push	{r3, r4, r5, lr}
  409f4a:	4c07      	ldr	r4, [pc, #28]	; (409f68 <_isatty_r+0x20>)
  409f4c:	2300      	movs	r3, #0
  409f4e:	4605      	mov	r5, r0
  409f50:	4608      	mov	r0, r1
  409f52:	6023      	str	r3, [r4, #0]
  409f54:	f7f7 fba8 	bl	4016a8 <_isatty>
  409f58:	1c43      	adds	r3, r0, #1
  409f5a:	d000      	beq.n	409f5e <_isatty_r+0x16>
  409f5c:	bd38      	pop	{r3, r4, r5, pc}
  409f5e:	6823      	ldr	r3, [r4, #0]
  409f60:	2b00      	cmp	r3, #0
  409f62:	d0fb      	beq.n	409f5c <_isatty_r+0x14>
  409f64:	602b      	str	r3, [r5, #0]
  409f66:	bd38      	pop	{r3, r4, r5, pc}
  409f68:	20400e80 	.word	0x20400e80

00409f6c <__locale_mb_cur_max>:
  409f6c:	4b04      	ldr	r3, [pc, #16]	; (409f80 <__locale_mb_cur_max+0x14>)
  409f6e:	4a05      	ldr	r2, [pc, #20]	; (409f84 <__locale_mb_cur_max+0x18>)
  409f70:	681b      	ldr	r3, [r3, #0]
  409f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  409f74:	2b00      	cmp	r3, #0
  409f76:	bf08      	it	eq
  409f78:	4613      	moveq	r3, r2
  409f7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  409f7e:	4770      	bx	lr
  409f80:	20400028 	.word	0x20400028
  409f84:	2040086c 	.word	0x2040086c

00409f88 <_lseek_r>:
  409f88:	b570      	push	{r4, r5, r6, lr}
  409f8a:	460d      	mov	r5, r1
  409f8c:	4c08      	ldr	r4, [pc, #32]	; (409fb0 <_lseek_r+0x28>)
  409f8e:	4611      	mov	r1, r2
  409f90:	4606      	mov	r6, r0
  409f92:	461a      	mov	r2, r3
  409f94:	4628      	mov	r0, r5
  409f96:	2300      	movs	r3, #0
  409f98:	6023      	str	r3, [r4, #0]
  409f9a:	f7f7 fb87 	bl	4016ac <_lseek>
  409f9e:	1c43      	adds	r3, r0, #1
  409fa0:	d000      	beq.n	409fa4 <_lseek_r+0x1c>
  409fa2:	bd70      	pop	{r4, r5, r6, pc}
  409fa4:	6823      	ldr	r3, [r4, #0]
  409fa6:	2b00      	cmp	r3, #0
  409fa8:	d0fb      	beq.n	409fa2 <_lseek_r+0x1a>
  409faa:	6033      	str	r3, [r6, #0]
  409fac:	bd70      	pop	{r4, r5, r6, pc}
  409fae:	bf00      	nop
  409fb0:	20400e80 	.word	0x20400e80

00409fb4 <__ascii_mbtowc>:
  409fb4:	b082      	sub	sp, #8
  409fb6:	b149      	cbz	r1, 409fcc <__ascii_mbtowc+0x18>
  409fb8:	b15a      	cbz	r2, 409fd2 <__ascii_mbtowc+0x1e>
  409fba:	b16b      	cbz	r3, 409fd8 <__ascii_mbtowc+0x24>
  409fbc:	7813      	ldrb	r3, [r2, #0]
  409fbe:	600b      	str	r3, [r1, #0]
  409fc0:	7812      	ldrb	r2, [r2, #0]
  409fc2:	1c10      	adds	r0, r2, #0
  409fc4:	bf18      	it	ne
  409fc6:	2001      	movne	r0, #1
  409fc8:	b002      	add	sp, #8
  409fca:	4770      	bx	lr
  409fcc:	a901      	add	r1, sp, #4
  409fce:	2a00      	cmp	r2, #0
  409fd0:	d1f3      	bne.n	409fba <__ascii_mbtowc+0x6>
  409fd2:	4610      	mov	r0, r2
  409fd4:	b002      	add	sp, #8
  409fd6:	4770      	bx	lr
  409fd8:	f06f 0001 	mvn.w	r0, #1
  409fdc:	e7f4      	b.n	409fc8 <__ascii_mbtowc+0x14>
  409fde:	bf00      	nop

00409fe0 <_read_r>:
  409fe0:	b570      	push	{r4, r5, r6, lr}
  409fe2:	460d      	mov	r5, r1
  409fe4:	4c08      	ldr	r4, [pc, #32]	; (40a008 <_read_r+0x28>)
  409fe6:	4611      	mov	r1, r2
  409fe8:	4606      	mov	r6, r0
  409fea:	461a      	mov	r2, r3
  409fec:	4628      	mov	r0, r5
  409fee:	2300      	movs	r3, #0
  409ff0:	6023      	str	r3, [r4, #0]
  409ff2:	f7f6 fe1d 	bl	400c30 <_read>
  409ff6:	1c43      	adds	r3, r0, #1
  409ff8:	d000      	beq.n	409ffc <_read_r+0x1c>
  409ffa:	bd70      	pop	{r4, r5, r6, pc}
  409ffc:	6823      	ldr	r3, [r4, #0]
  409ffe:	2b00      	cmp	r3, #0
  40a000:	d0fb      	beq.n	409ffa <_read_r+0x1a>
  40a002:	6033      	str	r3, [r6, #0]
  40a004:	bd70      	pop	{r4, r5, r6, pc}
  40a006:	bf00      	nop
  40a008:	20400e80 	.word	0x20400e80

0040a00c <__swbuf_r>:
  40a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a00e:	460d      	mov	r5, r1
  40a010:	4614      	mov	r4, r2
  40a012:	4606      	mov	r6, r0
  40a014:	b110      	cbz	r0, 40a01c <__swbuf_r+0x10>
  40a016:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a018:	2b00      	cmp	r3, #0
  40a01a:	d04b      	beq.n	40a0b4 <__swbuf_r+0xa8>
  40a01c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a020:	69a3      	ldr	r3, [r4, #24]
  40a022:	60a3      	str	r3, [r4, #8]
  40a024:	b291      	uxth	r1, r2
  40a026:	0708      	lsls	r0, r1, #28
  40a028:	d539      	bpl.n	40a09e <__swbuf_r+0x92>
  40a02a:	6923      	ldr	r3, [r4, #16]
  40a02c:	2b00      	cmp	r3, #0
  40a02e:	d036      	beq.n	40a09e <__swbuf_r+0x92>
  40a030:	b2ed      	uxtb	r5, r5
  40a032:	0489      	lsls	r1, r1, #18
  40a034:	462f      	mov	r7, r5
  40a036:	d515      	bpl.n	40a064 <__swbuf_r+0x58>
  40a038:	6822      	ldr	r2, [r4, #0]
  40a03a:	6961      	ldr	r1, [r4, #20]
  40a03c:	1ad3      	subs	r3, r2, r3
  40a03e:	428b      	cmp	r3, r1
  40a040:	da1c      	bge.n	40a07c <__swbuf_r+0x70>
  40a042:	3301      	adds	r3, #1
  40a044:	68a1      	ldr	r1, [r4, #8]
  40a046:	1c50      	adds	r0, r2, #1
  40a048:	3901      	subs	r1, #1
  40a04a:	60a1      	str	r1, [r4, #8]
  40a04c:	6020      	str	r0, [r4, #0]
  40a04e:	7015      	strb	r5, [r2, #0]
  40a050:	6962      	ldr	r2, [r4, #20]
  40a052:	429a      	cmp	r2, r3
  40a054:	d01a      	beq.n	40a08c <__swbuf_r+0x80>
  40a056:	89a3      	ldrh	r3, [r4, #12]
  40a058:	07db      	lsls	r3, r3, #31
  40a05a:	d501      	bpl.n	40a060 <__swbuf_r+0x54>
  40a05c:	2d0a      	cmp	r5, #10
  40a05e:	d015      	beq.n	40a08c <__swbuf_r+0x80>
  40a060:	4638      	mov	r0, r7
  40a062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a064:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a066:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a06a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a06e:	81a2      	strh	r2, [r4, #12]
  40a070:	6822      	ldr	r2, [r4, #0]
  40a072:	6661      	str	r1, [r4, #100]	; 0x64
  40a074:	6961      	ldr	r1, [r4, #20]
  40a076:	1ad3      	subs	r3, r2, r3
  40a078:	428b      	cmp	r3, r1
  40a07a:	dbe2      	blt.n	40a042 <__swbuf_r+0x36>
  40a07c:	4621      	mov	r1, r4
  40a07e:	4630      	mov	r0, r6
  40a080:	f7fe fb3c 	bl	4086fc <_fflush_r>
  40a084:	b940      	cbnz	r0, 40a098 <__swbuf_r+0x8c>
  40a086:	6822      	ldr	r2, [r4, #0]
  40a088:	2301      	movs	r3, #1
  40a08a:	e7db      	b.n	40a044 <__swbuf_r+0x38>
  40a08c:	4621      	mov	r1, r4
  40a08e:	4630      	mov	r0, r6
  40a090:	f7fe fb34 	bl	4086fc <_fflush_r>
  40a094:	2800      	cmp	r0, #0
  40a096:	d0e3      	beq.n	40a060 <__swbuf_r+0x54>
  40a098:	f04f 37ff 	mov.w	r7, #4294967295
  40a09c:	e7e0      	b.n	40a060 <__swbuf_r+0x54>
  40a09e:	4621      	mov	r1, r4
  40a0a0:	4630      	mov	r0, r6
  40a0a2:	f7fd fa57 	bl	407554 <__swsetup_r>
  40a0a6:	2800      	cmp	r0, #0
  40a0a8:	d1f6      	bne.n	40a098 <__swbuf_r+0x8c>
  40a0aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a0ae:	6923      	ldr	r3, [r4, #16]
  40a0b0:	b291      	uxth	r1, r2
  40a0b2:	e7bd      	b.n	40a030 <__swbuf_r+0x24>
  40a0b4:	f7fe fb7a 	bl	4087ac <__sinit>
  40a0b8:	e7b0      	b.n	40a01c <__swbuf_r+0x10>
  40a0ba:	bf00      	nop

0040a0bc <_wcrtomb_r>:
  40a0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a0be:	4606      	mov	r6, r0
  40a0c0:	b085      	sub	sp, #20
  40a0c2:	461f      	mov	r7, r3
  40a0c4:	b189      	cbz	r1, 40a0ea <_wcrtomb_r+0x2e>
  40a0c6:	4c10      	ldr	r4, [pc, #64]	; (40a108 <_wcrtomb_r+0x4c>)
  40a0c8:	4d10      	ldr	r5, [pc, #64]	; (40a10c <_wcrtomb_r+0x50>)
  40a0ca:	6824      	ldr	r4, [r4, #0]
  40a0cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a0ce:	2c00      	cmp	r4, #0
  40a0d0:	bf08      	it	eq
  40a0d2:	462c      	moveq	r4, r5
  40a0d4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a0d8:	47a0      	blx	r4
  40a0da:	1c43      	adds	r3, r0, #1
  40a0dc:	d103      	bne.n	40a0e6 <_wcrtomb_r+0x2a>
  40a0de:	2200      	movs	r2, #0
  40a0e0:	238a      	movs	r3, #138	; 0x8a
  40a0e2:	603a      	str	r2, [r7, #0]
  40a0e4:	6033      	str	r3, [r6, #0]
  40a0e6:	b005      	add	sp, #20
  40a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a0ea:	460c      	mov	r4, r1
  40a0ec:	4906      	ldr	r1, [pc, #24]	; (40a108 <_wcrtomb_r+0x4c>)
  40a0ee:	4a07      	ldr	r2, [pc, #28]	; (40a10c <_wcrtomb_r+0x50>)
  40a0f0:	6809      	ldr	r1, [r1, #0]
  40a0f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a0f4:	2900      	cmp	r1, #0
  40a0f6:	bf08      	it	eq
  40a0f8:	4611      	moveq	r1, r2
  40a0fa:	4622      	mov	r2, r4
  40a0fc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a100:	a901      	add	r1, sp, #4
  40a102:	47a0      	blx	r4
  40a104:	e7e9      	b.n	40a0da <_wcrtomb_r+0x1e>
  40a106:	bf00      	nop
  40a108:	20400028 	.word	0x20400028
  40a10c:	2040086c 	.word	0x2040086c

0040a110 <__ascii_wctomb>:
  40a110:	b121      	cbz	r1, 40a11c <__ascii_wctomb+0xc>
  40a112:	2aff      	cmp	r2, #255	; 0xff
  40a114:	d804      	bhi.n	40a120 <__ascii_wctomb+0x10>
  40a116:	700a      	strb	r2, [r1, #0]
  40a118:	2001      	movs	r0, #1
  40a11a:	4770      	bx	lr
  40a11c:	4608      	mov	r0, r1
  40a11e:	4770      	bx	lr
  40a120:	238a      	movs	r3, #138	; 0x8a
  40a122:	6003      	str	r3, [r0, #0]
  40a124:	f04f 30ff 	mov.w	r0, #4294967295
  40a128:	4770      	bx	lr
  40a12a:	bf00      	nop

0040a12c <__aeabi_drsub>:
  40a12c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a130:	e002      	b.n	40a138 <__adddf3>
  40a132:	bf00      	nop

0040a134 <__aeabi_dsub>:
  40a134:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a138 <__adddf3>:
  40a138:	b530      	push	{r4, r5, lr}
  40a13a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a13e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a142:	ea94 0f05 	teq	r4, r5
  40a146:	bf08      	it	eq
  40a148:	ea90 0f02 	teqeq	r0, r2
  40a14c:	bf1f      	itttt	ne
  40a14e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a152:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a156:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a15a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a15e:	f000 80e2 	beq.w	40a326 <__adddf3+0x1ee>
  40a162:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a166:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a16a:	bfb8      	it	lt
  40a16c:	426d      	neglt	r5, r5
  40a16e:	dd0c      	ble.n	40a18a <__adddf3+0x52>
  40a170:	442c      	add	r4, r5
  40a172:	ea80 0202 	eor.w	r2, r0, r2
  40a176:	ea81 0303 	eor.w	r3, r1, r3
  40a17a:	ea82 0000 	eor.w	r0, r2, r0
  40a17e:	ea83 0101 	eor.w	r1, r3, r1
  40a182:	ea80 0202 	eor.w	r2, r0, r2
  40a186:	ea81 0303 	eor.w	r3, r1, r3
  40a18a:	2d36      	cmp	r5, #54	; 0x36
  40a18c:	bf88      	it	hi
  40a18e:	bd30      	pophi	{r4, r5, pc}
  40a190:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a194:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a198:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a19c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a1a0:	d002      	beq.n	40a1a8 <__adddf3+0x70>
  40a1a2:	4240      	negs	r0, r0
  40a1a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a1a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a1ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a1b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a1b4:	d002      	beq.n	40a1bc <__adddf3+0x84>
  40a1b6:	4252      	negs	r2, r2
  40a1b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a1bc:	ea94 0f05 	teq	r4, r5
  40a1c0:	f000 80a7 	beq.w	40a312 <__adddf3+0x1da>
  40a1c4:	f1a4 0401 	sub.w	r4, r4, #1
  40a1c8:	f1d5 0e20 	rsbs	lr, r5, #32
  40a1cc:	db0d      	blt.n	40a1ea <__adddf3+0xb2>
  40a1ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a1d2:	fa22 f205 	lsr.w	r2, r2, r5
  40a1d6:	1880      	adds	r0, r0, r2
  40a1d8:	f141 0100 	adc.w	r1, r1, #0
  40a1dc:	fa03 f20e 	lsl.w	r2, r3, lr
  40a1e0:	1880      	adds	r0, r0, r2
  40a1e2:	fa43 f305 	asr.w	r3, r3, r5
  40a1e6:	4159      	adcs	r1, r3
  40a1e8:	e00e      	b.n	40a208 <__adddf3+0xd0>
  40a1ea:	f1a5 0520 	sub.w	r5, r5, #32
  40a1ee:	f10e 0e20 	add.w	lr, lr, #32
  40a1f2:	2a01      	cmp	r2, #1
  40a1f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a1f8:	bf28      	it	cs
  40a1fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a1fe:	fa43 f305 	asr.w	r3, r3, r5
  40a202:	18c0      	adds	r0, r0, r3
  40a204:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a20c:	d507      	bpl.n	40a21e <__adddf3+0xe6>
  40a20e:	f04f 0e00 	mov.w	lr, #0
  40a212:	f1dc 0c00 	rsbs	ip, ip, #0
  40a216:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a21a:	eb6e 0101 	sbc.w	r1, lr, r1
  40a21e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a222:	d31b      	bcc.n	40a25c <__adddf3+0x124>
  40a224:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a228:	d30c      	bcc.n	40a244 <__adddf3+0x10c>
  40a22a:	0849      	lsrs	r1, r1, #1
  40a22c:	ea5f 0030 	movs.w	r0, r0, rrx
  40a230:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a234:	f104 0401 	add.w	r4, r4, #1
  40a238:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a23c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a240:	f080 809a 	bcs.w	40a378 <__adddf3+0x240>
  40a244:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a248:	bf08      	it	eq
  40a24a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a24e:	f150 0000 	adcs.w	r0, r0, #0
  40a252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a256:	ea41 0105 	orr.w	r1, r1, r5
  40a25a:	bd30      	pop	{r4, r5, pc}
  40a25c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a260:	4140      	adcs	r0, r0
  40a262:	eb41 0101 	adc.w	r1, r1, r1
  40a266:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a26a:	f1a4 0401 	sub.w	r4, r4, #1
  40a26e:	d1e9      	bne.n	40a244 <__adddf3+0x10c>
  40a270:	f091 0f00 	teq	r1, #0
  40a274:	bf04      	itt	eq
  40a276:	4601      	moveq	r1, r0
  40a278:	2000      	moveq	r0, #0
  40a27a:	fab1 f381 	clz	r3, r1
  40a27e:	bf08      	it	eq
  40a280:	3320      	addeq	r3, #32
  40a282:	f1a3 030b 	sub.w	r3, r3, #11
  40a286:	f1b3 0220 	subs.w	r2, r3, #32
  40a28a:	da0c      	bge.n	40a2a6 <__adddf3+0x16e>
  40a28c:	320c      	adds	r2, #12
  40a28e:	dd08      	ble.n	40a2a2 <__adddf3+0x16a>
  40a290:	f102 0c14 	add.w	ip, r2, #20
  40a294:	f1c2 020c 	rsb	r2, r2, #12
  40a298:	fa01 f00c 	lsl.w	r0, r1, ip
  40a29c:	fa21 f102 	lsr.w	r1, r1, r2
  40a2a0:	e00c      	b.n	40a2bc <__adddf3+0x184>
  40a2a2:	f102 0214 	add.w	r2, r2, #20
  40a2a6:	bfd8      	it	le
  40a2a8:	f1c2 0c20 	rsble	ip, r2, #32
  40a2ac:	fa01 f102 	lsl.w	r1, r1, r2
  40a2b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a2b4:	bfdc      	itt	le
  40a2b6:	ea41 010c 	orrle.w	r1, r1, ip
  40a2ba:	4090      	lslle	r0, r2
  40a2bc:	1ae4      	subs	r4, r4, r3
  40a2be:	bfa2      	ittt	ge
  40a2c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a2c4:	4329      	orrge	r1, r5
  40a2c6:	bd30      	popge	{r4, r5, pc}
  40a2c8:	ea6f 0404 	mvn.w	r4, r4
  40a2cc:	3c1f      	subs	r4, #31
  40a2ce:	da1c      	bge.n	40a30a <__adddf3+0x1d2>
  40a2d0:	340c      	adds	r4, #12
  40a2d2:	dc0e      	bgt.n	40a2f2 <__adddf3+0x1ba>
  40a2d4:	f104 0414 	add.w	r4, r4, #20
  40a2d8:	f1c4 0220 	rsb	r2, r4, #32
  40a2dc:	fa20 f004 	lsr.w	r0, r0, r4
  40a2e0:	fa01 f302 	lsl.w	r3, r1, r2
  40a2e4:	ea40 0003 	orr.w	r0, r0, r3
  40a2e8:	fa21 f304 	lsr.w	r3, r1, r4
  40a2ec:	ea45 0103 	orr.w	r1, r5, r3
  40a2f0:	bd30      	pop	{r4, r5, pc}
  40a2f2:	f1c4 040c 	rsb	r4, r4, #12
  40a2f6:	f1c4 0220 	rsb	r2, r4, #32
  40a2fa:	fa20 f002 	lsr.w	r0, r0, r2
  40a2fe:	fa01 f304 	lsl.w	r3, r1, r4
  40a302:	ea40 0003 	orr.w	r0, r0, r3
  40a306:	4629      	mov	r1, r5
  40a308:	bd30      	pop	{r4, r5, pc}
  40a30a:	fa21 f004 	lsr.w	r0, r1, r4
  40a30e:	4629      	mov	r1, r5
  40a310:	bd30      	pop	{r4, r5, pc}
  40a312:	f094 0f00 	teq	r4, #0
  40a316:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a31a:	bf06      	itte	eq
  40a31c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a320:	3401      	addeq	r4, #1
  40a322:	3d01      	subne	r5, #1
  40a324:	e74e      	b.n	40a1c4 <__adddf3+0x8c>
  40a326:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a32a:	bf18      	it	ne
  40a32c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a330:	d029      	beq.n	40a386 <__adddf3+0x24e>
  40a332:	ea94 0f05 	teq	r4, r5
  40a336:	bf08      	it	eq
  40a338:	ea90 0f02 	teqeq	r0, r2
  40a33c:	d005      	beq.n	40a34a <__adddf3+0x212>
  40a33e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a342:	bf04      	itt	eq
  40a344:	4619      	moveq	r1, r3
  40a346:	4610      	moveq	r0, r2
  40a348:	bd30      	pop	{r4, r5, pc}
  40a34a:	ea91 0f03 	teq	r1, r3
  40a34e:	bf1e      	ittt	ne
  40a350:	2100      	movne	r1, #0
  40a352:	2000      	movne	r0, #0
  40a354:	bd30      	popne	{r4, r5, pc}
  40a356:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a35a:	d105      	bne.n	40a368 <__adddf3+0x230>
  40a35c:	0040      	lsls	r0, r0, #1
  40a35e:	4149      	adcs	r1, r1
  40a360:	bf28      	it	cs
  40a362:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a366:	bd30      	pop	{r4, r5, pc}
  40a368:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a36c:	bf3c      	itt	cc
  40a36e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a372:	bd30      	popcc	{r4, r5, pc}
  40a374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a378:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a37c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a380:	f04f 0000 	mov.w	r0, #0
  40a384:	bd30      	pop	{r4, r5, pc}
  40a386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a38a:	bf1a      	itte	ne
  40a38c:	4619      	movne	r1, r3
  40a38e:	4610      	movne	r0, r2
  40a390:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a394:	bf1c      	itt	ne
  40a396:	460b      	movne	r3, r1
  40a398:	4602      	movne	r2, r0
  40a39a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a39e:	bf06      	itte	eq
  40a3a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a3a4:	ea91 0f03 	teqeq	r1, r3
  40a3a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a3ac:	bd30      	pop	{r4, r5, pc}
  40a3ae:	bf00      	nop

0040a3b0 <__aeabi_ui2d>:
  40a3b0:	f090 0f00 	teq	r0, #0
  40a3b4:	bf04      	itt	eq
  40a3b6:	2100      	moveq	r1, #0
  40a3b8:	4770      	bxeq	lr
  40a3ba:	b530      	push	{r4, r5, lr}
  40a3bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a3c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a3c4:	f04f 0500 	mov.w	r5, #0
  40a3c8:	f04f 0100 	mov.w	r1, #0
  40a3cc:	e750      	b.n	40a270 <__adddf3+0x138>
  40a3ce:	bf00      	nop

0040a3d0 <__aeabi_i2d>:
  40a3d0:	f090 0f00 	teq	r0, #0
  40a3d4:	bf04      	itt	eq
  40a3d6:	2100      	moveq	r1, #0
  40a3d8:	4770      	bxeq	lr
  40a3da:	b530      	push	{r4, r5, lr}
  40a3dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a3e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a3e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a3e8:	bf48      	it	mi
  40a3ea:	4240      	negmi	r0, r0
  40a3ec:	f04f 0100 	mov.w	r1, #0
  40a3f0:	e73e      	b.n	40a270 <__adddf3+0x138>
  40a3f2:	bf00      	nop

0040a3f4 <__aeabi_f2d>:
  40a3f4:	0042      	lsls	r2, r0, #1
  40a3f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a3fa:	ea4f 0131 	mov.w	r1, r1, rrx
  40a3fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a402:	bf1f      	itttt	ne
  40a404:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a408:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a40c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a410:	4770      	bxne	lr
  40a412:	f092 0f00 	teq	r2, #0
  40a416:	bf14      	ite	ne
  40a418:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a41c:	4770      	bxeq	lr
  40a41e:	b530      	push	{r4, r5, lr}
  40a420:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a42c:	e720      	b.n	40a270 <__adddf3+0x138>
  40a42e:	bf00      	nop

0040a430 <__aeabi_ul2d>:
  40a430:	ea50 0201 	orrs.w	r2, r0, r1
  40a434:	bf08      	it	eq
  40a436:	4770      	bxeq	lr
  40a438:	b530      	push	{r4, r5, lr}
  40a43a:	f04f 0500 	mov.w	r5, #0
  40a43e:	e00a      	b.n	40a456 <__aeabi_l2d+0x16>

0040a440 <__aeabi_l2d>:
  40a440:	ea50 0201 	orrs.w	r2, r0, r1
  40a444:	bf08      	it	eq
  40a446:	4770      	bxeq	lr
  40a448:	b530      	push	{r4, r5, lr}
  40a44a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a44e:	d502      	bpl.n	40a456 <__aeabi_l2d+0x16>
  40a450:	4240      	negs	r0, r0
  40a452:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a456:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a45a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a45e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a462:	f43f aedc 	beq.w	40a21e <__adddf3+0xe6>
  40a466:	f04f 0203 	mov.w	r2, #3
  40a46a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a46e:	bf18      	it	ne
  40a470:	3203      	addne	r2, #3
  40a472:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a476:	bf18      	it	ne
  40a478:	3203      	addne	r2, #3
  40a47a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a47e:	f1c2 0320 	rsb	r3, r2, #32
  40a482:	fa00 fc03 	lsl.w	ip, r0, r3
  40a486:	fa20 f002 	lsr.w	r0, r0, r2
  40a48a:	fa01 fe03 	lsl.w	lr, r1, r3
  40a48e:	ea40 000e 	orr.w	r0, r0, lr
  40a492:	fa21 f102 	lsr.w	r1, r1, r2
  40a496:	4414      	add	r4, r2
  40a498:	e6c1      	b.n	40a21e <__adddf3+0xe6>
  40a49a:	bf00      	nop

0040a49c <__aeabi_dmul>:
  40a49c:	b570      	push	{r4, r5, r6, lr}
  40a49e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a4a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a4a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a4aa:	bf1d      	ittte	ne
  40a4ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a4b0:	ea94 0f0c 	teqne	r4, ip
  40a4b4:	ea95 0f0c 	teqne	r5, ip
  40a4b8:	f000 f8de 	bleq	40a678 <__aeabi_dmul+0x1dc>
  40a4bc:	442c      	add	r4, r5
  40a4be:	ea81 0603 	eor.w	r6, r1, r3
  40a4c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a4c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a4ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a4ce:	bf18      	it	ne
  40a4d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a4d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a4d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a4dc:	d038      	beq.n	40a550 <__aeabi_dmul+0xb4>
  40a4de:	fba0 ce02 	umull	ip, lr, r0, r2
  40a4e2:	f04f 0500 	mov.w	r5, #0
  40a4e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a4ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a4ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a4f2:	f04f 0600 	mov.w	r6, #0
  40a4f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a4fa:	f09c 0f00 	teq	ip, #0
  40a4fe:	bf18      	it	ne
  40a500:	f04e 0e01 	orrne.w	lr, lr, #1
  40a504:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a508:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a50c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a510:	d204      	bcs.n	40a51c <__aeabi_dmul+0x80>
  40a512:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a516:	416d      	adcs	r5, r5
  40a518:	eb46 0606 	adc.w	r6, r6, r6
  40a51c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a520:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a524:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a528:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a52c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a530:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a534:	bf88      	it	hi
  40a536:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a53a:	d81e      	bhi.n	40a57a <__aeabi_dmul+0xde>
  40a53c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a540:	bf08      	it	eq
  40a542:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a546:	f150 0000 	adcs.w	r0, r0, #0
  40a54a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a54e:	bd70      	pop	{r4, r5, r6, pc}
  40a550:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a554:	ea46 0101 	orr.w	r1, r6, r1
  40a558:	ea40 0002 	orr.w	r0, r0, r2
  40a55c:	ea81 0103 	eor.w	r1, r1, r3
  40a560:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a564:	bfc2      	ittt	gt
  40a566:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a56a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a56e:	bd70      	popgt	{r4, r5, r6, pc}
  40a570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a574:	f04f 0e00 	mov.w	lr, #0
  40a578:	3c01      	subs	r4, #1
  40a57a:	f300 80ab 	bgt.w	40a6d4 <__aeabi_dmul+0x238>
  40a57e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a582:	bfde      	ittt	le
  40a584:	2000      	movle	r0, #0
  40a586:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a58a:	bd70      	pople	{r4, r5, r6, pc}
  40a58c:	f1c4 0400 	rsb	r4, r4, #0
  40a590:	3c20      	subs	r4, #32
  40a592:	da35      	bge.n	40a600 <__aeabi_dmul+0x164>
  40a594:	340c      	adds	r4, #12
  40a596:	dc1b      	bgt.n	40a5d0 <__aeabi_dmul+0x134>
  40a598:	f104 0414 	add.w	r4, r4, #20
  40a59c:	f1c4 0520 	rsb	r5, r4, #32
  40a5a0:	fa00 f305 	lsl.w	r3, r0, r5
  40a5a4:	fa20 f004 	lsr.w	r0, r0, r4
  40a5a8:	fa01 f205 	lsl.w	r2, r1, r5
  40a5ac:	ea40 0002 	orr.w	r0, r0, r2
  40a5b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a5b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a5b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a5bc:	fa21 f604 	lsr.w	r6, r1, r4
  40a5c0:	eb42 0106 	adc.w	r1, r2, r6
  40a5c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a5c8:	bf08      	it	eq
  40a5ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a5ce:	bd70      	pop	{r4, r5, r6, pc}
  40a5d0:	f1c4 040c 	rsb	r4, r4, #12
  40a5d4:	f1c4 0520 	rsb	r5, r4, #32
  40a5d8:	fa00 f304 	lsl.w	r3, r0, r4
  40a5dc:	fa20 f005 	lsr.w	r0, r0, r5
  40a5e0:	fa01 f204 	lsl.w	r2, r1, r4
  40a5e4:	ea40 0002 	orr.w	r0, r0, r2
  40a5e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a5f0:	f141 0100 	adc.w	r1, r1, #0
  40a5f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a5f8:	bf08      	it	eq
  40a5fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a5fe:	bd70      	pop	{r4, r5, r6, pc}
  40a600:	f1c4 0520 	rsb	r5, r4, #32
  40a604:	fa00 f205 	lsl.w	r2, r0, r5
  40a608:	ea4e 0e02 	orr.w	lr, lr, r2
  40a60c:	fa20 f304 	lsr.w	r3, r0, r4
  40a610:	fa01 f205 	lsl.w	r2, r1, r5
  40a614:	ea43 0302 	orr.w	r3, r3, r2
  40a618:	fa21 f004 	lsr.w	r0, r1, r4
  40a61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a620:	fa21 f204 	lsr.w	r2, r1, r4
  40a624:	ea20 0002 	bic.w	r0, r0, r2
  40a628:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a62c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a630:	bf08      	it	eq
  40a632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a636:	bd70      	pop	{r4, r5, r6, pc}
  40a638:	f094 0f00 	teq	r4, #0
  40a63c:	d10f      	bne.n	40a65e <__aeabi_dmul+0x1c2>
  40a63e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a642:	0040      	lsls	r0, r0, #1
  40a644:	eb41 0101 	adc.w	r1, r1, r1
  40a648:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a64c:	bf08      	it	eq
  40a64e:	3c01      	subeq	r4, #1
  40a650:	d0f7      	beq.n	40a642 <__aeabi_dmul+0x1a6>
  40a652:	ea41 0106 	orr.w	r1, r1, r6
  40a656:	f095 0f00 	teq	r5, #0
  40a65a:	bf18      	it	ne
  40a65c:	4770      	bxne	lr
  40a65e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a662:	0052      	lsls	r2, r2, #1
  40a664:	eb43 0303 	adc.w	r3, r3, r3
  40a668:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a66c:	bf08      	it	eq
  40a66e:	3d01      	subeq	r5, #1
  40a670:	d0f7      	beq.n	40a662 <__aeabi_dmul+0x1c6>
  40a672:	ea43 0306 	orr.w	r3, r3, r6
  40a676:	4770      	bx	lr
  40a678:	ea94 0f0c 	teq	r4, ip
  40a67c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a680:	bf18      	it	ne
  40a682:	ea95 0f0c 	teqne	r5, ip
  40a686:	d00c      	beq.n	40a6a2 <__aeabi_dmul+0x206>
  40a688:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a68c:	bf18      	it	ne
  40a68e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a692:	d1d1      	bne.n	40a638 <__aeabi_dmul+0x19c>
  40a694:	ea81 0103 	eor.w	r1, r1, r3
  40a698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a69c:	f04f 0000 	mov.w	r0, #0
  40a6a0:	bd70      	pop	{r4, r5, r6, pc}
  40a6a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a6a6:	bf06      	itte	eq
  40a6a8:	4610      	moveq	r0, r2
  40a6aa:	4619      	moveq	r1, r3
  40a6ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a6b0:	d019      	beq.n	40a6e6 <__aeabi_dmul+0x24a>
  40a6b2:	ea94 0f0c 	teq	r4, ip
  40a6b6:	d102      	bne.n	40a6be <__aeabi_dmul+0x222>
  40a6b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a6bc:	d113      	bne.n	40a6e6 <__aeabi_dmul+0x24a>
  40a6be:	ea95 0f0c 	teq	r5, ip
  40a6c2:	d105      	bne.n	40a6d0 <__aeabi_dmul+0x234>
  40a6c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a6c8:	bf1c      	itt	ne
  40a6ca:	4610      	movne	r0, r2
  40a6cc:	4619      	movne	r1, r3
  40a6ce:	d10a      	bne.n	40a6e6 <__aeabi_dmul+0x24a>
  40a6d0:	ea81 0103 	eor.w	r1, r1, r3
  40a6d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a6d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a6dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a6e0:	f04f 0000 	mov.w	r0, #0
  40a6e4:	bd70      	pop	{r4, r5, r6, pc}
  40a6e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a6ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a6ee:	bd70      	pop	{r4, r5, r6, pc}

0040a6f0 <__aeabi_ddiv>:
  40a6f0:	b570      	push	{r4, r5, r6, lr}
  40a6f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a6f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a6fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a6fe:	bf1d      	ittte	ne
  40a700:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a704:	ea94 0f0c 	teqne	r4, ip
  40a708:	ea95 0f0c 	teqne	r5, ip
  40a70c:	f000 f8a7 	bleq	40a85e <__aeabi_ddiv+0x16e>
  40a710:	eba4 0405 	sub.w	r4, r4, r5
  40a714:	ea81 0e03 	eor.w	lr, r1, r3
  40a718:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a71c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a720:	f000 8088 	beq.w	40a834 <__aeabi_ddiv+0x144>
  40a724:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a728:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a72c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a730:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a734:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a738:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a73c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a740:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a744:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a748:	429d      	cmp	r5, r3
  40a74a:	bf08      	it	eq
  40a74c:	4296      	cmpeq	r6, r2
  40a74e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a752:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a756:	d202      	bcs.n	40a75e <__aeabi_ddiv+0x6e>
  40a758:	085b      	lsrs	r3, r3, #1
  40a75a:	ea4f 0232 	mov.w	r2, r2, rrx
  40a75e:	1ab6      	subs	r6, r6, r2
  40a760:	eb65 0503 	sbc.w	r5, r5, r3
  40a764:	085b      	lsrs	r3, r3, #1
  40a766:	ea4f 0232 	mov.w	r2, r2, rrx
  40a76a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a76e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a772:	ebb6 0e02 	subs.w	lr, r6, r2
  40a776:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a77a:	bf22      	ittt	cs
  40a77c:	1ab6      	subcs	r6, r6, r2
  40a77e:	4675      	movcs	r5, lr
  40a780:	ea40 000c 	orrcs.w	r0, r0, ip
  40a784:	085b      	lsrs	r3, r3, #1
  40a786:	ea4f 0232 	mov.w	r2, r2, rrx
  40a78a:	ebb6 0e02 	subs.w	lr, r6, r2
  40a78e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a792:	bf22      	ittt	cs
  40a794:	1ab6      	subcs	r6, r6, r2
  40a796:	4675      	movcs	r5, lr
  40a798:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a79c:	085b      	lsrs	r3, r3, #1
  40a79e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a7a2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a7a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a7aa:	bf22      	ittt	cs
  40a7ac:	1ab6      	subcs	r6, r6, r2
  40a7ae:	4675      	movcs	r5, lr
  40a7b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a7b4:	085b      	lsrs	r3, r3, #1
  40a7b6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a7ba:	ebb6 0e02 	subs.w	lr, r6, r2
  40a7be:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a7c2:	bf22      	ittt	cs
  40a7c4:	1ab6      	subcs	r6, r6, r2
  40a7c6:	4675      	movcs	r5, lr
  40a7c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a7cc:	ea55 0e06 	orrs.w	lr, r5, r6
  40a7d0:	d018      	beq.n	40a804 <__aeabi_ddiv+0x114>
  40a7d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a7d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a7da:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a7de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a7e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a7e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a7ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a7ee:	d1c0      	bne.n	40a772 <__aeabi_ddiv+0x82>
  40a7f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a7f4:	d10b      	bne.n	40a80e <__aeabi_ddiv+0x11e>
  40a7f6:	ea41 0100 	orr.w	r1, r1, r0
  40a7fa:	f04f 0000 	mov.w	r0, #0
  40a7fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a802:	e7b6      	b.n	40a772 <__aeabi_ddiv+0x82>
  40a804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a808:	bf04      	itt	eq
  40a80a:	4301      	orreq	r1, r0
  40a80c:	2000      	moveq	r0, #0
  40a80e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a812:	bf88      	it	hi
  40a814:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a818:	f63f aeaf 	bhi.w	40a57a <__aeabi_dmul+0xde>
  40a81c:	ebb5 0c03 	subs.w	ip, r5, r3
  40a820:	bf04      	itt	eq
  40a822:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a826:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a82a:	f150 0000 	adcs.w	r0, r0, #0
  40a82e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a832:	bd70      	pop	{r4, r5, r6, pc}
  40a834:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a838:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a83c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a840:	bfc2      	ittt	gt
  40a842:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a84a:	bd70      	popgt	{r4, r5, r6, pc}
  40a84c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a850:	f04f 0e00 	mov.w	lr, #0
  40a854:	3c01      	subs	r4, #1
  40a856:	e690      	b.n	40a57a <__aeabi_dmul+0xde>
  40a858:	ea45 0e06 	orr.w	lr, r5, r6
  40a85c:	e68d      	b.n	40a57a <__aeabi_dmul+0xde>
  40a85e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a862:	ea94 0f0c 	teq	r4, ip
  40a866:	bf08      	it	eq
  40a868:	ea95 0f0c 	teqeq	r5, ip
  40a86c:	f43f af3b 	beq.w	40a6e6 <__aeabi_dmul+0x24a>
  40a870:	ea94 0f0c 	teq	r4, ip
  40a874:	d10a      	bne.n	40a88c <__aeabi_ddiv+0x19c>
  40a876:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a87a:	f47f af34 	bne.w	40a6e6 <__aeabi_dmul+0x24a>
  40a87e:	ea95 0f0c 	teq	r5, ip
  40a882:	f47f af25 	bne.w	40a6d0 <__aeabi_dmul+0x234>
  40a886:	4610      	mov	r0, r2
  40a888:	4619      	mov	r1, r3
  40a88a:	e72c      	b.n	40a6e6 <__aeabi_dmul+0x24a>
  40a88c:	ea95 0f0c 	teq	r5, ip
  40a890:	d106      	bne.n	40a8a0 <__aeabi_ddiv+0x1b0>
  40a892:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a896:	f43f aefd 	beq.w	40a694 <__aeabi_dmul+0x1f8>
  40a89a:	4610      	mov	r0, r2
  40a89c:	4619      	mov	r1, r3
  40a89e:	e722      	b.n	40a6e6 <__aeabi_dmul+0x24a>
  40a8a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a8a4:	bf18      	it	ne
  40a8a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a8aa:	f47f aec5 	bne.w	40a638 <__aeabi_dmul+0x19c>
  40a8ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a8b2:	f47f af0d 	bne.w	40a6d0 <__aeabi_dmul+0x234>
  40a8b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a8ba:	f47f aeeb 	bne.w	40a694 <__aeabi_dmul+0x1f8>
  40a8be:	e712      	b.n	40a6e6 <__aeabi_dmul+0x24a>

0040a8c0 <__gedf2>:
  40a8c0:	f04f 3cff 	mov.w	ip, #4294967295
  40a8c4:	e006      	b.n	40a8d4 <__cmpdf2+0x4>
  40a8c6:	bf00      	nop

0040a8c8 <__ledf2>:
  40a8c8:	f04f 0c01 	mov.w	ip, #1
  40a8cc:	e002      	b.n	40a8d4 <__cmpdf2+0x4>
  40a8ce:	bf00      	nop

0040a8d0 <__cmpdf2>:
  40a8d0:	f04f 0c01 	mov.w	ip, #1
  40a8d4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a8d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a8dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a8e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a8e4:	bf18      	it	ne
  40a8e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a8ea:	d01b      	beq.n	40a924 <__cmpdf2+0x54>
  40a8ec:	b001      	add	sp, #4
  40a8ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a8f2:	bf0c      	ite	eq
  40a8f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a8f8:	ea91 0f03 	teqne	r1, r3
  40a8fc:	bf02      	ittt	eq
  40a8fe:	ea90 0f02 	teqeq	r0, r2
  40a902:	2000      	moveq	r0, #0
  40a904:	4770      	bxeq	lr
  40a906:	f110 0f00 	cmn.w	r0, #0
  40a90a:	ea91 0f03 	teq	r1, r3
  40a90e:	bf58      	it	pl
  40a910:	4299      	cmppl	r1, r3
  40a912:	bf08      	it	eq
  40a914:	4290      	cmpeq	r0, r2
  40a916:	bf2c      	ite	cs
  40a918:	17d8      	asrcs	r0, r3, #31
  40a91a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a91e:	f040 0001 	orr.w	r0, r0, #1
  40a922:	4770      	bx	lr
  40a924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a92c:	d102      	bne.n	40a934 <__cmpdf2+0x64>
  40a92e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a932:	d107      	bne.n	40a944 <__cmpdf2+0x74>
  40a934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a93c:	d1d6      	bne.n	40a8ec <__cmpdf2+0x1c>
  40a93e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a942:	d0d3      	beq.n	40a8ec <__cmpdf2+0x1c>
  40a944:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a948:	4770      	bx	lr
  40a94a:	bf00      	nop

0040a94c <__aeabi_cdrcmple>:
  40a94c:	4684      	mov	ip, r0
  40a94e:	4610      	mov	r0, r2
  40a950:	4662      	mov	r2, ip
  40a952:	468c      	mov	ip, r1
  40a954:	4619      	mov	r1, r3
  40a956:	4663      	mov	r3, ip
  40a958:	e000      	b.n	40a95c <__aeabi_cdcmpeq>
  40a95a:	bf00      	nop

0040a95c <__aeabi_cdcmpeq>:
  40a95c:	b501      	push	{r0, lr}
  40a95e:	f7ff ffb7 	bl	40a8d0 <__cmpdf2>
  40a962:	2800      	cmp	r0, #0
  40a964:	bf48      	it	mi
  40a966:	f110 0f00 	cmnmi.w	r0, #0
  40a96a:	bd01      	pop	{r0, pc}

0040a96c <__aeabi_dcmpeq>:
  40a96c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a970:	f7ff fff4 	bl	40a95c <__aeabi_cdcmpeq>
  40a974:	bf0c      	ite	eq
  40a976:	2001      	moveq	r0, #1
  40a978:	2000      	movne	r0, #0
  40a97a:	f85d fb08 	ldr.w	pc, [sp], #8
  40a97e:	bf00      	nop

0040a980 <__aeabi_dcmplt>:
  40a980:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a984:	f7ff ffea 	bl	40a95c <__aeabi_cdcmpeq>
  40a988:	bf34      	ite	cc
  40a98a:	2001      	movcc	r0, #1
  40a98c:	2000      	movcs	r0, #0
  40a98e:	f85d fb08 	ldr.w	pc, [sp], #8
  40a992:	bf00      	nop

0040a994 <__aeabi_dcmple>:
  40a994:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a998:	f7ff ffe0 	bl	40a95c <__aeabi_cdcmpeq>
  40a99c:	bf94      	ite	ls
  40a99e:	2001      	movls	r0, #1
  40a9a0:	2000      	movhi	r0, #0
  40a9a2:	f85d fb08 	ldr.w	pc, [sp], #8
  40a9a6:	bf00      	nop

0040a9a8 <__aeabi_dcmpge>:
  40a9a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a9ac:	f7ff ffce 	bl	40a94c <__aeabi_cdrcmple>
  40a9b0:	bf94      	ite	ls
  40a9b2:	2001      	movls	r0, #1
  40a9b4:	2000      	movhi	r0, #0
  40a9b6:	f85d fb08 	ldr.w	pc, [sp], #8
  40a9ba:	bf00      	nop

0040a9bc <__aeabi_dcmpgt>:
  40a9bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a9c0:	f7ff ffc4 	bl	40a94c <__aeabi_cdrcmple>
  40a9c4:	bf34      	ite	cc
  40a9c6:	2001      	movcc	r0, #1
  40a9c8:	2000      	movcs	r0, #0
  40a9ca:	f85d fb08 	ldr.w	pc, [sp], #8
  40a9ce:	bf00      	nop

0040a9d0 <__aeabi_dcmpun>:
  40a9d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a9d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a9d8:	d102      	bne.n	40a9e0 <__aeabi_dcmpun+0x10>
  40a9da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a9de:	d10a      	bne.n	40a9f6 <__aeabi_dcmpun+0x26>
  40a9e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a9e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a9e8:	d102      	bne.n	40a9f0 <__aeabi_dcmpun+0x20>
  40a9ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a9ee:	d102      	bne.n	40a9f6 <__aeabi_dcmpun+0x26>
  40a9f0:	f04f 0000 	mov.w	r0, #0
  40a9f4:	4770      	bx	lr
  40a9f6:	f04f 0001 	mov.w	r0, #1
  40a9fa:	4770      	bx	lr

0040a9fc <__aeabi_d2iz>:
  40a9fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40aa00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40aa04:	d215      	bcs.n	40aa32 <__aeabi_d2iz+0x36>
  40aa06:	d511      	bpl.n	40aa2c <__aeabi_d2iz+0x30>
  40aa08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40aa0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40aa10:	d912      	bls.n	40aa38 <__aeabi_d2iz+0x3c>
  40aa12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40aa16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40aa1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40aa1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40aa22:	fa23 f002 	lsr.w	r0, r3, r2
  40aa26:	bf18      	it	ne
  40aa28:	4240      	negne	r0, r0
  40aa2a:	4770      	bx	lr
  40aa2c:	f04f 0000 	mov.w	r0, #0
  40aa30:	4770      	bx	lr
  40aa32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40aa36:	d105      	bne.n	40aa44 <__aeabi_d2iz+0x48>
  40aa38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40aa3c:	bf08      	it	eq
  40aa3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40aa42:	4770      	bx	lr
  40aa44:	f04f 0000 	mov.w	r0, #0
  40aa48:	4770      	bx	lr
  40aa4a:	bf00      	nop

0040aa4c <__aeabi_uldivmod>:
  40aa4c:	b953      	cbnz	r3, 40aa64 <__aeabi_uldivmod+0x18>
  40aa4e:	b94a      	cbnz	r2, 40aa64 <__aeabi_uldivmod+0x18>
  40aa50:	2900      	cmp	r1, #0
  40aa52:	bf08      	it	eq
  40aa54:	2800      	cmpeq	r0, #0
  40aa56:	bf1c      	itt	ne
  40aa58:	f04f 31ff 	movne.w	r1, #4294967295
  40aa5c:	f04f 30ff 	movne.w	r0, #4294967295
  40aa60:	f000 b97a 	b.w	40ad58 <__aeabi_idiv0>
  40aa64:	f1ad 0c08 	sub.w	ip, sp, #8
  40aa68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40aa6c:	f000 f806 	bl	40aa7c <__udivmoddi4>
  40aa70:	f8dd e004 	ldr.w	lr, [sp, #4]
  40aa74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40aa78:	b004      	add	sp, #16
  40aa7a:	4770      	bx	lr

0040aa7c <__udivmoddi4>:
  40aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aa80:	468c      	mov	ip, r1
  40aa82:	460d      	mov	r5, r1
  40aa84:	4604      	mov	r4, r0
  40aa86:	9e08      	ldr	r6, [sp, #32]
  40aa88:	2b00      	cmp	r3, #0
  40aa8a:	d151      	bne.n	40ab30 <__udivmoddi4+0xb4>
  40aa8c:	428a      	cmp	r2, r1
  40aa8e:	4617      	mov	r7, r2
  40aa90:	d96d      	bls.n	40ab6e <__udivmoddi4+0xf2>
  40aa92:	fab2 fe82 	clz	lr, r2
  40aa96:	f1be 0f00 	cmp.w	lr, #0
  40aa9a:	d00b      	beq.n	40aab4 <__udivmoddi4+0x38>
  40aa9c:	f1ce 0c20 	rsb	ip, lr, #32
  40aaa0:	fa01 f50e 	lsl.w	r5, r1, lr
  40aaa4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40aaa8:	fa02 f70e 	lsl.w	r7, r2, lr
  40aaac:	ea4c 0c05 	orr.w	ip, ip, r5
  40aab0:	fa00 f40e 	lsl.w	r4, r0, lr
  40aab4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40aab8:	0c25      	lsrs	r5, r4, #16
  40aaba:	fbbc f8fa 	udiv	r8, ip, sl
  40aabe:	fa1f f987 	uxth.w	r9, r7
  40aac2:	fb0a cc18 	mls	ip, sl, r8, ip
  40aac6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40aaca:	fb08 f309 	mul.w	r3, r8, r9
  40aace:	42ab      	cmp	r3, r5
  40aad0:	d90a      	bls.n	40aae8 <__udivmoddi4+0x6c>
  40aad2:	19ed      	adds	r5, r5, r7
  40aad4:	f108 32ff 	add.w	r2, r8, #4294967295
  40aad8:	f080 8123 	bcs.w	40ad22 <__udivmoddi4+0x2a6>
  40aadc:	42ab      	cmp	r3, r5
  40aade:	f240 8120 	bls.w	40ad22 <__udivmoddi4+0x2a6>
  40aae2:	f1a8 0802 	sub.w	r8, r8, #2
  40aae6:	443d      	add	r5, r7
  40aae8:	1aed      	subs	r5, r5, r3
  40aaea:	b2a4      	uxth	r4, r4
  40aaec:	fbb5 f0fa 	udiv	r0, r5, sl
  40aaf0:	fb0a 5510 	mls	r5, sl, r0, r5
  40aaf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40aaf8:	fb00 f909 	mul.w	r9, r0, r9
  40aafc:	45a1      	cmp	r9, r4
  40aafe:	d909      	bls.n	40ab14 <__udivmoddi4+0x98>
  40ab00:	19e4      	adds	r4, r4, r7
  40ab02:	f100 33ff 	add.w	r3, r0, #4294967295
  40ab06:	f080 810a 	bcs.w	40ad1e <__udivmoddi4+0x2a2>
  40ab0a:	45a1      	cmp	r9, r4
  40ab0c:	f240 8107 	bls.w	40ad1e <__udivmoddi4+0x2a2>
  40ab10:	3802      	subs	r0, #2
  40ab12:	443c      	add	r4, r7
  40ab14:	eba4 0409 	sub.w	r4, r4, r9
  40ab18:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ab1c:	2100      	movs	r1, #0
  40ab1e:	2e00      	cmp	r6, #0
  40ab20:	d061      	beq.n	40abe6 <__udivmoddi4+0x16a>
  40ab22:	fa24 f40e 	lsr.w	r4, r4, lr
  40ab26:	2300      	movs	r3, #0
  40ab28:	6034      	str	r4, [r6, #0]
  40ab2a:	6073      	str	r3, [r6, #4]
  40ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab30:	428b      	cmp	r3, r1
  40ab32:	d907      	bls.n	40ab44 <__udivmoddi4+0xc8>
  40ab34:	2e00      	cmp	r6, #0
  40ab36:	d054      	beq.n	40abe2 <__udivmoddi4+0x166>
  40ab38:	2100      	movs	r1, #0
  40ab3a:	e886 0021 	stmia.w	r6, {r0, r5}
  40ab3e:	4608      	mov	r0, r1
  40ab40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab44:	fab3 f183 	clz	r1, r3
  40ab48:	2900      	cmp	r1, #0
  40ab4a:	f040 808e 	bne.w	40ac6a <__udivmoddi4+0x1ee>
  40ab4e:	42ab      	cmp	r3, r5
  40ab50:	d302      	bcc.n	40ab58 <__udivmoddi4+0xdc>
  40ab52:	4282      	cmp	r2, r0
  40ab54:	f200 80fa 	bhi.w	40ad4c <__udivmoddi4+0x2d0>
  40ab58:	1a84      	subs	r4, r0, r2
  40ab5a:	eb65 0503 	sbc.w	r5, r5, r3
  40ab5e:	2001      	movs	r0, #1
  40ab60:	46ac      	mov	ip, r5
  40ab62:	2e00      	cmp	r6, #0
  40ab64:	d03f      	beq.n	40abe6 <__udivmoddi4+0x16a>
  40ab66:	e886 1010 	stmia.w	r6, {r4, ip}
  40ab6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab6e:	b912      	cbnz	r2, 40ab76 <__udivmoddi4+0xfa>
  40ab70:	2701      	movs	r7, #1
  40ab72:	fbb7 f7f2 	udiv	r7, r7, r2
  40ab76:	fab7 fe87 	clz	lr, r7
  40ab7a:	f1be 0f00 	cmp.w	lr, #0
  40ab7e:	d134      	bne.n	40abea <__udivmoddi4+0x16e>
  40ab80:	1beb      	subs	r3, r5, r7
  40ab82:	0c3a      	lsrs	r2, r7, #16
  40ab84:	fa1f fc87 	uxth.w	ip, r7
  40ab88:	2101      	movs	r1, #1
  40ab8a:	fbb3 f8f2 	udiv	r8, r3, r2
  40ab8e:	0c25      	lsrs	r5, r4, #16
  40ab90:	fb02 3318 	mls	r3, r2, r8, r3
  40ab94:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ab98:	fb0c f308 	mul.w	r3, ip, r8
  40ab9c:	42ab      	cmp	r3, r5
  40ab9e:	d907      	bls.n	40abb0 <__udivmoddi4+0x134>
  40aba0:	19ed      	adds	r5, r5, r7
  40aba2:	f108 30ff 	add.w	r0, r8, #4294967295
  40aba6:	d202      	bcs.n	40abae <__udivmoddi4+0x132>
  40aba8:	42ab      	cmp	r3, r5
  40abaa:	f200 80d1 	bhi.w	40ad50 <__udivmoddi4+0x2d4>
  40abae:	4680      	mov	r8, r0
  40abb0:	1aed      	subs	r5, r5, r3
  40abb2:	b2a3      	uxth	r3, r4
  40abb4:	fbb5 f0f2 	udiv	r0, r5, r2
  40abb8:	fb02 5510 	mls	r5, r2, r0, r5
  40abbc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40abc0:	fb0c fc00 	mul.w	ip, ip, r0
  40abc4:	45a4      	cmp	ip, r4
  40abc6:	d907      	bls.n	40abd8 <__udivmoddi4+0x15c>
  40abc8:	19e4      	adds	r4, r4, r7
  40abca:	f100 33ff 	add.w	r3, r0, #4294967295
  40abce:	d202      	bcs.n	40abd6 <__udivmoddi4+0x15a>
  40abd0:	45a4      	cmp	ip, r4
  40abd2:	f200 80b8 	bhi.w	40ad46 <__udivmoddi4+0x2ca>
  40abd6:	4618      	mov	r0, r3
  40abd8:	eba4 040c 	sub.w	r4, r4, ip
  40abdc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40abe0:	e79d      	b.n	40ab1e <__udivmoddi4+0xa2>
  40abe2:	4631      	mov	r1, r6
  40abe4:	4630      	mov	r0, r6
  40abe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40abea:	f1ce 0420 	rsb	r4, lr, #32
  40abee:	fa05 f30e 	lsl.w	r3, r5, lr
  40abf2:	fa07 f70e 	lsl.w	r7, r7, lr
  40abf6:	fa20 f804 	lsr.w	r8, r0, r4
  40abfa:	0c3a      	lsrs	r2, r7, #16
  40abfc:	fa25 f404 	lsr.w	r4, r5, r4
  40ac00:	ea48 0803 	orr.w	r8, r8, r3
  40ac04:	fbb4 f1f2 	udiv	r1, r4, r2
  40ac08:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40ac0c:	fb02 4411 	mls	r4, r2, r1, r4
  40ac10:	fa1f fc87 	uxth.w	ip, r7
  40ac14:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40ac18:	fb01 f30c 	mul.w	r3, r1, ip
  40ac1c:	42ab      	cmp	r3, r5
  40ac1e:	fa00 f40e 	lsl.w	r4, r0, lr
  40ac22:	d909      	bls.n	40ac38 <__udivmoddi4+0x1bc>
  40ac24:	19ed      	adds	r5, r5, r7
  40ac26:	f101 30ff 	add.w	r0, r1, #4294967295
  40ac2a:	f080 808a 	bcs.w	40ad42 <__udivmoddi4+0x2c6>
  40ac2e:	42ab      	cmp	r3, r5
  40ac30:	f240 8087 	bls.w	40ad42 <__udivmoddi4+0x2c6>
  40ac34:	3902      	subs	r1, #2
  40ac36:	443d      	add	r5, r7
  40ac38:	1aeb      	subs	r3, r5, r3
  40ac3a:	fa1f f588 	uxth.w	r5, r8
  40ac3e:	fbb3 f0f2 	udiv	r0, r3, r2
  40ac42:	fb02 3310 	mls	r3, r2, r0, r3
  40ac46:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ac4a:	fb00 f30c 	mul.w	r3, r0, ip
  40ac4e:	42ab      	cmp	r3, r5
  40ac50:	d907      	bls.n	40ac62 <__udivmoddi4+0x1e6>
  40ac52:	19ed      	adds	r5, r5, r7
  40ac54:	f100 38ff 	add.w	r8, r0, #4294967295
  40ac58:	d26f      	bcs.n	40ad3a <__udivmoddi4+0x2be>
  40ac5a:	42ab      	cmp	r3, r5
  40ac5c:	d96d      	bls.n	40ad3a <__udivmoddi4+0x2be>
  40ac5e:	3802      	subs	r0, #2
  40ac60:	443d      	add	r5, r7
  40ac62:	1aeb      	subs	r3, r5, r3
  40ac64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40ac68:	e78f      	b.n	40ab8a <__udivmoddi4+0x10e>
  40ac6a:	f1c1 0720 	rsb	r7, r1, #32
  40ac6e:	fa22 f807 	lsr.w	r8, r2, r7
  40ac72:	408b      	lsls	r3, r1
  40ac74:	fa05 f401 	lsl.w	r4, r5, r1
  40ac78:	ea48 0303 	orr.w	r3, r8, r3
  40ac7c:	fa20 fe07 	lsr.w	lr, r0, r7
  40ac80:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40ac84:	40fd      	lsrs	r5, r7
  40ac86:	ea4e 0e04 	orr.w	lr, lr, r4
  40ac8a:	fbb5 f9fc 	udiv	r9, r5, ip
  40ac8e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40ac92:	fb0c 5519 	mls	r5, ip, r9, r5
  40ac96:	fa1f f883 	uxth.w	r8, r3
  40ac9a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40ac9e:	fb09 f408 	mul.w	r4, r9, r8
  40aca2:	42ac      	cmp	r4, r5
  40aca4:	fa02 f201 	lsl.w	r2, r2, r1
  40aca8:	fa00 fa01 	lsl.w	sl, r0, r1
  40acac:	d908      	bls.n	40acc0 <__udivmoddi4+0x244>
  40acae:	18ed      	adds	r5, r5, r3
  40acb0:	f109 30ff 	add.w	r0, r9, #4294967295
  40acb4:	d243      	bcs.n	40ad3e <__udivmoddi4+0x2c2>
  40acb6:	42ac      	cmp	r4, r5
  40acb8:	d941      	bls.n	40ad3e <__udivmoddi4+0x2c2>
  40acba:	f1a9 0902 	sub.w	r9, r9, #2
  40acbe:	441d      	add	r5, r3
  40acc0:	1b2d      	subs	r5, r5, r4
  40acc2:	fa1f fe8e 	uxth.w	lr, lr
  40acc6:	fbb5 f0fc 	udiv	r0, r5, ip
  40acca:	fb0c 5510 	mls	r5, ip, r0, r5
  40acce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40acd2:	fb00 f808 	mul.w	r8, r0, r8
  40acd6:	45a0      	cmp	r8, r4
  40acd8:	d907      	bls.n	40acea <__udivmoddi4+0x26e>
  40acda:	18e4      	adds	r4, r4, r3
  40acdc:	f100 35ff 	add.w	r5, r0, #4294967295
  40ace0:	d229      	bcs.n	40ad36 <__udivmoddi4+0x2ba>
  40ace2:	45a0      	cmp	r8, r4
  40ace4:	d927      	bls.n	40ad36 <__udivmoddi4+0x2ba>
  40ace6:	3802      	subs	r0, #2
  40ace8:	441c      	add	r4, r3
  40acea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40acee:	eba4 0408 	sub.w	r4, r4, r8
  40acf2:	fba0 8902 	umull	r8, r9, r0, r2
  40acf6:	454c      	cmp	r4, r9
  40acf8:	46c6      	mov	lr, r8
  40acfa:	464d      	mov	r5, r9
  40acfc:	d315      	bcc.n	40ad2a <__udivmoddi4+0x2ae>
  40acfe:	d012      	beq.n	40ad26 <__udivmoddi4+0x2aa>
  40ad00:	b156      	cbz	r6, 40ad18 <__udivmoddi4+0x29c>
  40ad02:	ebba 030e 	subs.w	r3, sl, lr
  40ad06:	eb64 0405 	sbc.w	r4, r4, r5
  40ad0a:	fa04 f707 	lsl.w	r7, r4, r7
  40ad0e:	40cb      	lsrs	r3, r1
  40ad10:	431f      	orrs	r7, r3
  40ad12:	40cc      	lsrs	r4, r1
  40ad14:	6037      	str	r7, [r6, #0]
  40ad16:	6074      	str	r4, [r6, #4]
  40ad18:	2100      	movs	r1, #0
  40ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ad1e:	4618      	mov	r0, r3
  40ad20:	e6f8      	b.n	40ab14 <__udivmoddi4+0x98>
  40ad22:	4690      	mov	r8, r2
  40ad24:	e6e0      	b.n	40aae8 <__udivmoddi4+0x6c>
  40ad26:	45c2      	cmp	sl, r8
  40ad28:	d2ea      	bcs.n	40ad00 <__udivmoddi4+0x284>
  40ad2a:	ebb8 0e02 	subs.w	lr, r8, r2
  40ad2e:	eb69 0503 	sbc.w	r5, r9, r3
  40ad32:	3801      	subs	r0, #1
  40ad34:	e7e4      	b.n	40ad00 <__udivmoddi4+0x284>
  40ad36:	4628      	mov	r0, r5
  40ad38:	e7d7      	b.n	40acea <__udivmoddi4+0x26e>
  40ad3a:	4640      	mov	r0, r8
  40ad3c:	e791      	b.n	40ac62 <__udivmoddi4+0x1e6>
  40ad3e:	4681      	mov	r9, r0
  40ad40:	e7be      	b.n	40acc0 <__udivmoddi4+0x244>
  40ad42:	4601      	mov	r1, r0
  40ad44:	e778      	b.n	40ac38 <__udivmoddi4+0x1bc>
  40ad46:	3802      	subs	r0, #2
  40ad48:	443c      	add	r4, r7
  40ad4a:	e745      	b.n	40abd8 <__udivmoddi4+0x15c>
  40ad4c:	4608      	mov	r0, r1
  40ad4e:	e708      	b.n	40ab62 <__udivmoddi4+0xe6>
  40ad50:	f1a8 0802 	sub.w	r8, r8, #2
  40ad54:	443d      	add	r5, r7
  40ad56:	e72b      	b.n	40abb0 <__udivmoddi4+0x134>

0040ad58 <__aeabi_idiv0>:
  40ad58:	4770      	bx	lr
  40ad5a:	bf00      	nop

0040ad5c <sysfont_glyphs>:
  40ad5c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  40ad6c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  40ad7c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  40ad8c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  40ad9c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  40adac:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  40adbc:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  40adcc:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  40addc:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  40adec:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  40adfc:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  40ae0c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  40ae1c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  40ae2c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  40ae3c:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  40ae4c:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  40ae5c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  40ae6c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  40ae7c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  40ae8c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  40ae9c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  40aeac:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  40aebc:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  40aecc:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  40aedc:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  40aeec:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  40aefc:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  40af0c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  40af1c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  40af2c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  40af3c:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  40af4c:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  40af5c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  40af6c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  40af7c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  40af8c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  40af9c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  40afac:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  40afbc:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  40afcc:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  40afdc:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  40afec:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  40affc:	0000 0000 6d54 2072 7653 0063 0000 0000     ....Tmr Svc.....
  40b00c:	07e7 0000 0004 0000 0018 0000 0011 0000     ................
  40b01c:	0008 0000 0037 0000 0001 0000 6e45 7274     ....7.......Entr
  40b02c:	756f 0000 6f43 656d 6f63 0075 6c6f 6465     ou..Comecou.oled
  40b03c:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  40b04c:	6165 6574 6f20 656c 2064 6174 6b73 000d     eate oled task..
  40b05c:	6573 736e 726f 0000 6146 6c69 6465 7420     sensor..Failed t
  40b06c:	206f 7263 6165 6574 7320 6e65 6f73 2072     o create sensor 
  40b07c:	6174 6b73 000d 0000 7472 0074 6146 6c69     task....rtt.Fail
  40b08c:	6465 7420 206f 7263 6165 6574 7220 7474     ed to create rtt
  40b09c:	7420 7361 0d6b 0000 6374 0000 6146 6c69      task...tc..Fail
  40b0ac:	6465 7420 206f 7263 6165 6574 7420 2063     ed to create tc 
  40b0bc:	6174 6b73 000d 0000 7472 0063 6146 6c69     task....rtc.Fail
  40b0cc:	6465 7420 206f 7263 6165 6574 7220 6374     ed to create rtc
  40b0dc:	7420 7361 0d6b 0000 6146 6c69 6465 7420      task...Failed t
  40b0ec:	206f 7263 6165 6574 7320 6d65 7061 6f68     o create semapho
  40b0fc:	6572 5220 5454 0000 6146 6c69 6465 7420     re RTT..Failed t
  40b10c:	206f 7263 6165 6574 7320 6d65 7061 6f68     o create semapho
  40b11c:	6572 5420 0043 0000 6146 6c69 6465 7420     re TC...Failed t
  40b12c:	206f 7263 6165 6574 7320 6d65 7061 6f68     o create semapho
  40b13c:	6572 5220 4354 0000 6425 0000 003a 0000     re RTC..%d..:...
  40b14c:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  40b15c:	2078 7325 0a0d 0000                         x %s....

0040b164 <_global_impure_ptr>:
  40b164:	0030 2040 000a 0000 4e49 0046 6e69 0066     0.@ ....INF.inf.
  40b174:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
  40b184:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  40b194:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  40b1a4:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0040b1b0 <blanks.7223>:
  40b1b0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b1c0 <zeroes.7224>:
  40b1c0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040b1d0 <blanks.7238>:
  40b1d0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b1e0 <zeroes.7239>:
  40b1e0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40b1f0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0040b200 <__mprec_bigtens>:
  40b200:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40b210:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40b220:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040b228 <__mprec_tens>:
  40b228:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40b238:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40b248:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40b258:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40b268:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40b278:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40b288:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40b298:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40b2a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40b2b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40b2c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40b2d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40b2e8:	9db4 79d9 7843 44ea                         ...yCx.D

0040b2f0 <p05.6055>:
  40b2f0:	0005 0000 0019 0000 007d 0000 4f50 4953     ........}...POSI
  40b300:	0058 0000 002e 0000                         X.......

0040b308 <_ctype_>:
  40b308:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40b318:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40b328:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40b338:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40b348:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40b358:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40b368:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40b378:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40b388:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040b40c <_init>:
  40b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b40e:	bf00      	nop
  40b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b412:	bc08      	pop	{r3}
  40b414:	469e      	mov	lr, r3
  40b416:	4770      	bx	lr

0040b418 <__init_array_start>:
  40b418:	0040761d 	.word	0x0040761d

0040b41c <__frame_dummy_init_array_entry>:
  40b41c:	00400165                                e.@.

0040b420 <_fini>:
  40b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b422:	bf00      	nop
  40b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b426:	bc08      	pop	{r3}
  40b428:	469e      	mov	lr, r3
  40b42a:	4770      	bx	lr

0040b42c <__fini_array_start>:
  40b42c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 ad5c 0040 0706 7d20               ....\.@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <xHigherPriorityTaskWoken>:
20400024:	0001 0000                                   ....

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__malloc_av_>:
	...
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 

20400860 <__malloc_sbrk_base>:
20400860:	ffff ffff                                   ....

20400864 <__malloc_trim_threshold>:
20400864:	0000 0002                                   ....

20400868 <__atexit_recursive_mutex>:
20400868:	0e5c 2040                                   \.@ 

2040086c <__global_locale>:
2040086c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	a111 0040 9fb5 0040 0000 0000 b308 0040     ..@...@.......@.
2040095c:	b304 0040 aff4 0040 aff4 0040 aff4 0040     ..@...@...@...@.
2040096c:	aff4 0040 aff4 0040 aff4 0040 aff4 0040     ..@...@...@...@.
2040097c:	aff4 0040 aff4 0040 ffff ffff ffff ffff     ..@...@.........
2040098c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
