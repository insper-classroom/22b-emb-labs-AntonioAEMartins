
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  0 .text         0000b430  00400000  00400000  00010000  2**6
=======
<<<<<<< Updated upstream
  0 .text         00009004  00400000  00400000  00010000  2**6
>>>>>>> Stashed changes
=======
  0 .text         0000b720  00400000  00400000  00010000  2**6
>>>>>>> Stashed changes
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b720  0040b720  0001b720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040b728  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004bc  204009d8  0040c100  000209d8  2**2
                  ALLOC
  4 .stack        00002004  20400e94  0040c5bc  000209d8  2**0
                  ALLOC
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  5 .heap         00000200  20402e88  0040e2c0  000209d8  2**0
=======
  5 .heap         00000200  20402e60  0040be6c  000209c8  2**0
=======
  0 .text         0000b728  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b728  0040b728  0001b728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040b730  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004bc  204009d8  0040c108  000209d8  2**2
                  ALLOC
  4 .stack        00002004  20400e94  0040c5c4  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20402e98  0040e5c8  000209d8  2**0
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
  5 .heap         00000200  20402e98  0040e5c0  000209d8  2**0
>>>>>>> Stashed changes
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  8 .debug_info   00029b0a  00000000  00000000  00020a5f  2**0
=======
<<<<<<< Updated upstream
  8 .debug_info   000238d4  00000000  00000000  00020a4f  2**0
>>>>>>> Stashed changes
=======
  8 .debug_info   0002b228  00000000  00000000  00020a5f  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d79  00000000  00000000  0004bc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cad2  00000000  00000000  00051a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012b0  00000000  00000000  0005e4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001418  00000000  00000000  0005f782  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010a6a  00000000  00000000  00060b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a508  00000000  00000000  00071604  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096e50  00000000  00000000  0008bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 16 .debug_frame  000040f4  00000000  00000000  00136758  2**2
=======
 16 .debug_frame  000038cc  00000000  00000000  001252a4  2**2
=======
  8 .debug_info   0002b23f  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d79  00000000  00000000  0004bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cad2  00000000  00000000  00051a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012b0  00000000  00000000  0005e4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001418  00000000  00000000  0005f799  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010a6a  00000000  00000000  00060bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a50b  00000000  00000000  0007161b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096e50  00000000  00000000  0008bb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000414c  00000000  00000000  00122978  2**2
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
 16 .debug_frame  0000414c  00000000  00000000  0012295c  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  400000:	88 2e 40 20 01 14 40 00 ff 13 40 00 ff 13 40 00     ..@ ..@...@...@.
  400010:	ff 13 40 00 ff 13 40 00 ff 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 17 40 00 ff 13 40 00 00 00 00 00 79 18 40 00     ..@...@.....y.@.
  40003c:	e1 18 40 00 ff 13 40 00 ff 13 40 00 35 38 40 00     ..@...@...@.58@.
  40004c:	89 37 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     .7@...@...@...@.
  40005c:	ff 13 40 00 ff 13 40 00 00 00 00 00 dd 10 40 00     ..@...@.......@.
  40006c:	f1 10 40 00 05 11 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40007c:	ff 13 40 00 19 11 40 00 2d 11 40 00 ff 13 40 00     ..@...@.-.@...@.
  40008c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  40009c:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000ac:	01 38 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     .8@...@...@...@.
  4000bc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000cc:	ff 13 40 00 00 00 00 00 ff 13 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000ec:	ff 13 40 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ..@...@...@...@.
  4000fc:	ff 13 40 00 cd 37 40 00 ff 13 40 00 ff 13 40 00     ..@..7@...@...@.
  40010c:	ff 13 40 00 ff 13 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ff 13 40 00 ff 13 40 00 ff 13 40 00     ......@...@...@.
  40012c:	ff 13 40 00 ff 13 40 00 00 00 00 00 ff 13 40 00     ..@...@.......@.
  40013c:	ff 13 40 00                                         ..@.
=======
<<<<<<< Updated upstream
  400000:	60 2e 40 20 6d 0e 40 00 6b 0e 40 00 6b 0e 40 00     `.@ m.@.k.@.k.@.
  400010:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 00 00 00 00     k.@.k.@.k.@.....
	...
  40002c:	45 12 40 00 6b 0e 40 00 00 00 00 00 e5 12 40 00     E.@.k.@.......@.
  40003c:	4d 13 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     M.@.k.@.k.@.k.@.
  40004c:	1d 31 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     .1@.k.@.k.@.k.@.
  40005c:	6b 0e 40 00 6b 0e 40 00 00 00 00 00 5d 0b 40 00     k.@.k.@.....].@.
  40006c:	71 0b 40 00 85 0b 40 00 6b 0e 40 00 6b 0e 40 00     q.@...@.k.@.k.@.
  40007c:	6b 0e 40 00 99 0b 40 00 ad 0b 40 00 6b 0e 40 00     k.@...@...@.k.@.
  40008c:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  40009c:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  4000ac:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  4000bc:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  4000cc:	6b 0e 40 00 00 00 00 00 6b 0e 40 00 00 00 00 00     k.@.....k.@.....
  4000dc:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  4000ec:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  4000fc:	6b 0e 40 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     k.@.k.@.k.@.k.@.
  40010c:	6b 0e 40 00 6b 0e 40 00 00 00 00 00 00 00 00 00     k.@.k.@.........
  40011c:	00 00 00 00 6b 0e 40 00 6b 0e 40 00 6b 0e 40 00     ....k.@.k.@.k.@.
  40012c:	6b 0e 40 00 6b 0e 40 00 00 00 00 00 6b 0e 40 00     k.@.k.@.....k.@.
  40013c:	6b 0e 40 00                                         k.@.
=======
  400000:	98 2e 40 20 c5 16 40 00 c3 16 40 00 c3 16 40 00     ..@ ..@...@...@.
  400010:	c3 16 40 00 c3 16 40 00 c3 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	9d 1a 40 00 c3 16 40 00 00 00 00 00 3d 1b 40 00     ..@...@.....=.@.
  40003c:	a5 1b 40 00 c3 16 40 00 c3 16 40 00 25 3b 40 00     ..@...@...@.%;@.
=======
  400000:	98 2e 40 20 c5 16 40 00 c3 16 40 00 c3 16 40 00     ..@ ..@...@...@.
  400010:	c3 16 40 00 c3 16 40 00 c3 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	9d 1a 40 00 c3 16 40 00 00 00 00 00 3d 1b 40 00     ..@...@.....=.@.
  40003c:	a5 1b 40 00 c3 16 40 00 c3 16 40 00 11 3b 40 00     ..@...@...@..;@.
>>>>>>> Stashed changes
  40004c:	3d 3a 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     =:@...@...@...@.
  40005c:	c3 16 40 00 c3 16 40 00 00 00 00 00 dd 10 40 00     ..@...@.......@.
  40006c:	f1 10 40 00 05 11 40 00 c3 16 40 00 c3 16 40 00     ..@...@...@...@.
  40007c:	c3 16 40 00 19 11 40 00 2d 11 40 00 c3 16 40 00     ..@...@.-.@...@.
  40008c:	c3 16 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     ..@...@...@...@.
  40009c:	c3 16 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     ..@...@...@...@.
  4000ac:	b5 3a 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     .:@...@...@...@.
  4000bc:	c3 16 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     ..@...@...@...@.
  4000cc:	c3 16 40 00 00 00 00 00 c3 16 40 00 00 00 00 00     ..@.......@.....
  4000dc:	c3 16 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     ..@...@...@...@.
  4000ec:	c3 16 40 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     ..@...@...@...@.
  4000fc:	c3 16 40 00 81 3a 40 00 c3 16 40 00 c3 16 40 00     ..@..:@...@...@.
  40010c:	c3 16 40 00 c3 16 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c3 16 40 00 c3 16 40 00 c3 16 40 00     ......@...@...@.
  40012c:	c3 16 40 00 c3 16 40 00 00 00 00 00 c3 16 40 00     ..@...@.......@.
  40013c:	c3 16 40 00                                         ..@.
<<<<<<< Updated upstream
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  400160:	0040b438 	.word	0x0040b438
=======
<<<<<<< Updated upstream
  400160:	0040900c 	.word	0x0040900c
=======
  400160:	0040b730 	.word	0x0040b730
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
  400160:	0040b728 	.word	0x0040b728
>>>>>>> Stashed changes

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  40019c:	0040b438 	.word	0x0040b438
=======
  40019c:	0040b728 	.word	0x0040b728
>>>>>>> Stashed changes
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040b728 	.word	0x0040b728
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
=======
<<<<<<< Updated upstream
  40019c:	0040900c 	.word	0x0040900c
  4001a0:	204009cc 	.word	0x204009cc
  4001a4:	0040900c 	.word	0x0040900c
=======
  40019c:	0040b730 	.word	0x0040b730
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040b730 	.word	0x0040b730
>>>>>>> Stashed changes
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	204009e4 	.word	0x204009e4

004001c0 <rtt_sel_source>:
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	204009e4 	.word	0x204009e4

004001ec <rtt_enable_interrupt>:
  4001ec:	6802      	ldr	r2, [r0, #0]
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	204009e4 	.word	0x204009e4

00400200 <rtt_disable_interrupt>:
  400200:	6803      	ldr	r3, [r0, #0]
  400202:	ea23 0101 	bic.w	r1, r3, r1
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	204009e4 	.word	0x204009e4

00400214 <rtt_read_timer_value>:
  400214:	6882      	ldr	r2, [r0, #8]
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
  40021c:	6882      	ldr	r2, [r0, #8]
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
  400228:	68c0      	ldr	r0, [r0, #12]
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <spi_enable_clock>:
  400270:	b508      	push	{r3, lr}
  400272:	4b07      	ldr	r3, [pc, #28]	; (400290 <spi_enable_clock+0x20>)
  400274:	4298      	cmp	r0, r3
  400276:	d003      	beq.n	400280 <spi_enable_clock+0x10>
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <spi_enable_clock+0x24>)
  40027a:	4298      	cmp	r0, r3
  40027c:	d004      	beq.n	400288 <spi_enable_clock+0x18>
  40027e:	bd08      	pop	{r3, pc}
  400280:	2015      	movs	r0, #21
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_enable_clock+0x28>)
  400284:	4798      	blx	r3
  400286:	bd08      	pop	{r3, pc}
  400288:	202a      	movs	r0, #42	; 0x2a
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <spi_enable_clock+0x28>)
  40028c:	4798      	blx	r3
  40028e:	e7f6      	b.n	40027e <spi_enable_clock+0xe>
  400290:	40008000 	.word	0x40008000
  400294:	40058000 	.word	0x40058000
  400298:	00400ce1 	.word	0x00400ce1

0040029c <spi_set_peripheral_chip_select_value>:
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002a2:	6043      	str	r3, [r0, #4]
  4002a4:	6843      	ldr	r3, [r0, #4]
  4002a6:	0409      	lsls	r1, r1, #16
  4002a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002ac:	4319      	orrs	r1, r3
  4002ae:	6041      	str	r1, [r0, #4]
  4002b0:	4770      	bx	lr

004002b2 <spi_write>:
  4002b2:	b430      	push	{r4, r5}
  4002b4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b8:	6905      	ldr	r5, [r0, #16]
  4002ba:	f015 0f02 	tst.w	r5, #2
  4002be:	d103      	bne.n	4002c8 <spi_write+0x16>
  4002c0:	3c01      	subs	r4, #1
  4002c2:	d1f9      	bne.n	4002b8 <spi_write+0x6>
  4002c4:	2001      	movs	r0, #1
  4002c6:	e00c      	b.n	4002e2 <spi_write+0x30>
  4002c8:	6844      	ldr	r4, [r0, #4]
  4002ca:	f014 0f02 	tst.w	r4, #2
  4002ce:	d006      	beq.n	4002de <spi_write+0x2c>
  4002d0:	0412      	lsls	r2, r2, #16
  4002d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d6:	4311      	orrs	r1, r2
  4002d8:	b10b      	cbz	r3, 4002de <spi_write+0x2c>
  4002da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4002de:	60c1      	str	r1, [r0, #12]
  4002e0:	2000      	movs	r0, #0
  4002e2:	bc30      	pop	{r4, r5}
  4002e4:	4770      	bx	lr

004002e6 <spi_set_clock_polarity>:
  4002e6:	b932      	cbnz	r2, 4002f6 <spi_set_clock_polarity+0x10>
  4002e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  4002ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ee:	f023 0301 	bic.w	r3, r3, #1
  4002f2:	6303      	str	r3, [r0, #48]	; 0x30
  4002f4:	4770      	bx	lr
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f043 0301 	orr.w	r3, r3, #1
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr

00400304 <spi_set_clock_phase>:
  400304:	b932      	cbnz	r2, 400314 <spi_set_clock_phase+0x10>
  400306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  40030a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030c:	f023 0302 	bic.w	r3, r3, #2
  400310:	6303      	str	r3, [r0, #48]	; 0x30
  400312:	4770      	bx	lr
  400314:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  400318:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40031a:	f043 0302 	orr.w	r3, r3, #2
  40031e:	6303      	str	r3, [r0, #48]	; 0x30
  400320:	4770      	bx	lr

00400322 <spi_configure_cs_behavior>:
  400322:	2a04      	cmp	r2, #4
  400324:	d003      	beq.n	40032e <spi_configure_cs_behavior+0xc>
  400326:	b16a      	cbz	r2, 400344 <spi_configure_cs_behavior+0x22>
  400328:	2a08      	cmp	r2, #8
  40032a:	d016      	beq.n	40035a <spi_configure_cs_behavior+0x38>
  40032c:	4770      	bx	lr
  40032e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  400332:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400334:	f023 0308 	bic.w	r3, r3, #8
  400338:	6303      	str	r3, [r0, #48]	; 0x30
  40033a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033c:	f043 0304 	orr.w	r3, r3, #4
  400340:	6303      	str	r3, [r0, #48]	; 0x30
  400342:	4770      	bx	lr
  400344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  400348:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034a:	f023 0308 	bic.w	r3, r3, #8
  40034e:	6303      	str	r3, [r0, #48]	; 0x30
  400350:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400352:	f023 0304 	bic.w	r3, r3, #4
  400356:	6303      	str	r3, [r0, #48]	; 0x30
  400358:	4770      	bx	lr
  40035a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  40035e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400360:	f043 0308 	orr.w	r3, r3, #8
  400364:	6303      	str	r3, [r0, #48]	; 0x30
  400366:	e7e1      	b.n	40032c <spi_configure_cs_behavior+0xa>

00400368 <spi_set_bits_per_transfer>:
  400368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40036c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400372:	630b      	str	r3, [r1, #48]	; 0x30
  400374:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400376:	431a      	orrs	r2, r3
  400378:	630a      	str	r2, [r1, #48]	; 0x30
  40037a:	4770      	bx	lr

0040037c <spi_calc_baudrate_div>:
  40037c:	1e43      	subs	r3, r0, #1
  40037e:	4419      	add	r1, r3
  400380:	fbb1 f0f0 	udiv	r0, r1, r0
  400384:	1e43      	subs	r3, r0, #1
  400386:	2bfe      	cmp	r3, #254	; 0xfe
  400388:	bf94      	ite	ls
  40038a:	b200      	sxthls	r0, r0
  40038c:	f04f 30ff 	movhi.w	r0, #4294967295
  400390:	4770      	bx	lr

00400392 <spi_set_baudrate_div>:
  400392:	b17a      	cbz	r2, 4003b4 <spi_set_baudrate_div+0x22>
  400394:	b410      	push	{r4}
  400396:	4614      	mov	r4, r2
  400398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40039c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003a2:	630b      	str	r3, [r1, #48]	; 0x30
  4003a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003aa:	630a      	str	r2, [r1, #48]	; 0x30
  4003ac:	2000      	movs	r0, #0
  4003ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b2:	4770      	bx	lr
  4003b4:	f04f 30ff 	mov.w	r0, #4294967295
  4003b8:	4770      	bx	lr
	...

004003bc <gfx_mono_set_framebuffer>:
  4003bc:	4b01      	ldr	r3, [pc, #4]	; (4003c4 <gfx_mono_set_framebuffer+0x8>)
  4003be:	6018      	str	r0, [r3, #0]
  4003c0:	4770      	bx	lr
  4003c2:	bf00      	nop
  4003c4:	204009e8 	.word	0x204009e8

004003c8 <gfx_mono_framebuffer_put_byte>:
  4003c8:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <gfx_mono_framebuffer_put_byte+0xc>)
  4003ca:	681b      	ldr	r3, [r3, #0]
  4003cc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003d0:	5442      	strb	r2, [r0, r1]
  4003d2:	4770      	bx	lr
<<<<<<< Updated upstream
  4003d4:	204009e8 	.word	0x204009e8

004003d8 <gfx_mono_framebuffer_get_byte>:
  4003d8:	4b02      	ldr	r3, [pc, #8]	; (4003e4 <gfx_mono_framebuffer_get_byte+0xc>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003e0:	5c40      	ldrb	r0, [r0, r1]
  4003e2:	4770      	bx	lr
  4003e4:	204009e8 	.word	0x204009e8

004003e8 <gfx_mono_ssd1306_put_byte>:
  4003e8:	b570      	push	{r4, r5, r6, lr}
  4003ea:	4604      	mov	r4, r0
  4003ec:	460d      	mov	r5, r1
  4003ee:	4616      	mov	r6, r2
  4003f0:	b91b      	cbnz	r3, 4003fa <gfx_mono_ssd1306_put_byte+0x12>
  4003f2:	4b0d      	ldr	r3, [pc, #52]	; (400428 <gfx_mono_ssd1306_put_byte+0x40>)
  4003f4:	4798      	blx	r3
  4003f6:	42b0      	cmp	r0, r6
  4003f8:	d015      	beq.n	400426 <gfx_mono_ssd1306_put_byte+0x3e>
  4003fa:	4632      	mov	r2, r6
  4003fc:	4629      	mov	r1, r5
  4003fe:	4620      	mov	r0, r4
  400400:	4b0a      	ldr	r3, [pc, #40]	; (40042c <gfx_mono_ssd1306_put_byte+0x44>)
  400402:	4798      	blx	r3
  400404:	f004 000f 	and.w	r0, r4, #15
  400408:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40040c:	4c08      	ldr	r4, [pc, #32]	; (400430 <gfx_mono_ssd1306_put_byte+0x48>)
  40040e:	47a0      	blx	r4
  400410:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400414:	f040 0010 	orr.w	r0, r0, #16
  400418:	47a0      	blx	r4
  40041a:	f005 000f 	and.w	r0, r5, #15
  40041e:	47a0      	blx	r4
  400420:	4630      	mov	r0, r6
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <gfx_mono_ssd1306_put_byte+0x4c>)
  400424:	4798      	blx	r3
  400426:	bd70      	pop	{r4, r5, r6, pc}
  400428:	004003d9 	.word	0x004003d9
  40042c:	004003c9 	.word	0x004003c9
  400430:	00400489 	.word	0x00400489
  400434:	004006a9 	.word	0x004006a9

00400438 <gfx_mono_ssd1306_init>:
  400438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40043c:	480d      	ldr	r0, [pc, #52]	; (400474 <gfx_mono_ssd1306_init+0x3c>)
  40043e:	4b0e      	ldr	r3, [pc, #56]	; (400478 <gfx_mono_ssd1306_init+0x40>)
  400440:	4798      	blx	r3
  400442:	4b0e      	ldr	r3, [pc, #56]	; (40047c <gfx_mono_ssd1306_init+0x44>)
  400444:	4798      	blx	r3
  400446:	2040      	movs	r0, #64	; 0x40
  400448:	4b0d      	ldr	r3, [pc, #52]	; (400480 <gfx_mono_ssd1306_init+0x48>)
  40044a:	4798      	blx	r3
  40044c:	2500      	movs	r5, #0
  40044e:	f04f 0801 	mov.w	r8, #1
  400452:	462f      	mov	r7, r5
  400454:	4e0b      	ldr	r6, [pc, #44]	; (400484 <gfx_mono_ssd1306_init+0x4c>)
  400456:	2400      	movs	r4, #0
  400458:	4643      	mov	r3, r8
  40045a:	463a      	mov	r2, r7
  40045c:	b2e1      	uxtb	r1, r4
  40045e:	4628      	mov	r0, r5
  400460:	47b0      	blx	r6
  400462:	3401      	adds	r4, #1
  400464:	2c80      	cmp	r4, #128	; 0x80
  400466:	d1f7      	bne.n	400458 <gfx_mono_ssd1306_init+0x20>
  400468:	3501      	adds	r5, #1
  40046a:	b2ed      	uxtb	r5, r5
  40046c:	2d04      	cmp	r5, #4
  40046e:	d1f2      	bne.n	400456 <gfx_mono_ssd1306_init+0x1e>
  400470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400474:	204009ec 	.word	0x204009ec
  400478:	004003bd 	.word	0x004003bd
  40047c:	004004c9 	.word	0x004004c9
  400480:	00400489 	.word	0x00400489
  400484:	004003e9 	.word	0x004003e9

00400488 <ssd1306_write_command>:
  400488:	b538      	push	{r3, r4, r5, lr}
  40048a:	4605      	mov	r5, r0
  40048c:	2208      	movs	r2, #8
  40048e:	4b09      	ldr	r3, [pc, #36]	; (4004b4 <ssd1306_write_command+0x2c>)
  400490:	635a      	str	r2, [r3, #52]	; 0x34
  400492:	4c09      	ldr	r4, [pc, #36]	; (4004b8 <ssd1306_write_command+0x30>)
  400494:	2101      	movs	r1, #1
  400496:	4620      	mov	r0, r4
  400498:	4b08      	ldr	r3, [pc, #32]	; (4004bc <ssd1306_write_command+0x34>)
  40049a:	4798      	blx	r3
  40049c:	2301      	movs	r3, #1
  40049e:	461a      	mov	r2, r3
  4004a0:	4629      	mov	r1, r5
  4004a2:	4620      	mov	r0, r4
  4004a4:	4c06      	ldr	r4, [pc, #24]	; (4004c0 <ssd1306_write_command+0x38>)
  4004a6:	47a0      	blx	r4
  4004a8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4004ac:	4b05      	ldr	r3, [pc, #20]	; (4004c4 <ssd1306_write_command+0x3c>)
  4004ae:	4798      	blx	r3
  4004b0:	bd38      	pop	{r3, r4, r5, pc}
  4004b2:	bf00      	nop
  4004b4:	400e1000 	.word	0x400e1000
  4004b8:	40008000 	.word	0x40008000
  4004bc:	0040029d 	.word	0x0040029d
  4004c0:	004002b3 	.word	0x004002b3
  4004c4:	20400001 	.word	0x20400001

004004c8 <ssd1306_init>:
  4004c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004cc:	4d66      	ldr	r5, [pc, #408]	; (400668 <ssd1306_init+0x1a0>)
  4004ce:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4004d2:	612e      	str	r6, [r5, #16]
  4004d4:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
  4004d8:	4b64      	ldr	r3, [pc, #400]	; (40066c <ssd1306_init+0x1a4>)
  4004da:	2708      	movs	r7, #8
  4004dc:	611f      	str	r7, [r3, #16]
  4004de:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
  4004e2:	666e      	str	r6, [r5, #100]	; 0x64
  4004e4:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
  4004e8:	656e      	str	r6, [r5, #84]	; 0x54
  4004ea:	626e      	str	r6, [r5, #36]	; 0x24
  4004ec:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
  4004f0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4004f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4004f6:	672a      	str	r2, [r5, #112]	; 0x70
  4004f8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4004fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4004fe:	676a      	str	r2, [r5, #116]	; 0x74
  400500:	665f      	str	r7, [r3, #100]	; 0x64
  400502:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
  400506:	655f      	str	r7, [r3, #84]	; 0x54
  400508:	625f      	str	r7, [r3, #36]	; 0x24
  40050a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
  40050e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400510:	f022 0208 	bic.w	r2, r2, #8
  400514:	671a      	str	r2, [r3, #112]	; 0x70
  400516:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400518:	f022 0208 	bic.w	r2, r2, #8
  40051c:	675a      	str	r2, [r3, #116]	; 0x74
  40051e:	601f      	str	r7, [r3, #0]
  400520:	602e      	str	r6, [r5, #0]
  400522:	631f      	str	r7, [r3, #48]	; 0x30
  400524:	632e      	str	r6, [r5, #48]	; 0x30
  400526:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4006a4 <ssd1306_init+0x1dc>
  40052a:	2300      	movs	r3, #0
  40052c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400530:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400534:	4640      	mov	r0, r8
  400536:	4c4e      	ldr	r4, [pc, #312]	; (400670 <ssd1306_init+0x1a8>)
  400538:	47a0      	blx	r4
  40053a:	2300      	movs	r3, #0
  40053c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400540:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400544:	4640      	mov	r0, r8
  400546:	47a0      	blx	r4
  400548:	2300      	movs	r3, #0
  40054a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40054e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400552:	4640      	mov	r0, r8
  400554:	47a0      	blx	r4
  400556:	2300      	movs	r3, #0
  400558:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40055c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400560:	4640      	mov	r0, r8
  400562:	47a0      	blx	r4
  400564:	2300      	movs	r3, #0
  400566:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40056a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40056e:	4640      	mov	r0, r8
  400570:	47a0      	blx	r4
  400572:	2300      	movs	r3, #0
  400574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400578:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40057c:	4640      	mov	r0, r8
  40057e:	47a0      	blx	r4
  400580:	4c3c      	ldr	r4, [pc, #240]	; (400674 <ssd1306_init+0x1ac>)
  400582:	f04f 0902 	mov.w	r9, #2
  400586:	f8c4 9000 	str.w	r9, [r4]
  40058a:	f04f 0880 	mov.w	r8, #128	; 0x80
  40058e:	f8c4 8000 	str.w	r8, [r4]
  400592:	6863      	ldr	r3, [r4, #4]
  400594:	f043 0301 	orr.w	r3, r3, #1
  400598:	6063      	str	r3, [r4, #4]
  40059a:	463a      	mov	r2, r7
  40059c:	2101      	movs	r1, #1
  40059e:	4620      	mov	r0, r4
  4005a0:	4b35      	ldr	r3, [pc, #212]	; (400678 <ssd1306_init+0x1b0>)
  4005a2:	4798      	blx	r3
  4005a4:	2200      	movs	r2, #0
  4005a6:	2101      	movs	r1, #1
  4005a8:	4620      	mov	r0, r4
  4005aa:	4b34      	ldr	r3, [pc, #208]	; (40067c <ssd1306_init+0x1b4>)
  4005ac:	4798      	blx	r3
  4005ae:	2200      	movs	r2, #0
  4005b0:	2101      	movs	r1, #1
  4005b2:	4620      	mov	r0, r4
  4005b4:	4b32      	ldr	r3, [pc, #200]	; (400680 <ssd1306_init+0x1b8>)
  4005b6:	4798      	blx	r3
  4005b8:	6863      	ldr	r3, [r4, #4]
  4005ba:	f023 0302 	bic.w	r3, r3, #2
  4005be:	6063      	str	r3, [r4, #4]
  4005c0:	2200      	movs	r2, #0
  4005c2:	2101      	movs	r1, #1
  4005c4:	4620      	mov	r0, r4
  4005c6:	4b2f      	ldr	r3, [pc, #188]	; (400684 <ssd1306_init+0x1bc>)
  4005c8:	4798      	blx	r3
  4005ca:	6863      	ldr	r3, [r4, #4]
  4005cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4005d0:	6063      	str	r3, [r4, #4]
  4005d2:	6863      	ldr	r3, [r4, #4]
  4005d4:	f043 0310 	orr.w	r3, r3, #16
  4005d8:	6063      	str	r3, [r4, #4]
  4005da:	492b      	ldr	r1, [pc, #172]	; (400688 <ssd1306_init+0x1c0>)
  4005dc:	482b      	ldr	r0, [pc, #172]	; (40068c <ssd1306_init+0x1c4>)
  4005de:	4b2c      	ldr	r3, [pc, #176]	; (400690 <ssd1306_init+0x1c8>)
  4005e0:	4798      	blx	r3
  4005e2:	b2c2      	uxtb	r2, r0
  4005e4:	2101      	movs	r1, #1
  4005e6:	4620      	mov	r0, r4
  4005e8:	4b2a      	ldr	r3, [pc, #168]	; (400694 <ssd1306_init+0x1cc>)
  4005ea:	4798      	blx	r3
  4005ec:	4620      	mov	r0, r4
  4005ee:	4b2a      	ldr	r3, [pc, #168]	; (400698 <ssd1306_init+0x1d0>)
  4005f0:	4798      	blx	r3
  4005f2:	2301      	movs	r3, #1
  4005f4:	6023      	str	r3, [r4, #0]
  4005f6:	636e      	str	r6, [r5, #52]	; 0x34
  4005f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4005fc:	4c27      	ldr	r4, [pc, #156]	; (40069c <ssd1306_init+0x1d4>)
  4005fe:	47a0      	blx	r4
  400600:	632e      	str	r6, [r5, #48]	; 0x30
  400602:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400606:	47a0      	blx	r4
  400608:	632e      	str	r6, [r5, #48]	; 0x30
  40060a:	20a8      	movs	r0, #168	; 0xa8
  40060c:	4c24      	ldr	r4, [pc, #144]	; (4006a0 <ssd1306_init+0x1d8>)
  40060e:	47a0      	blx	r4
  400610:	201f      	movs	r0, #31
  400612:	47a0      	blx	r4
  400614:	20d3      	movs	r0, #211	; 0xd3
  400616:	47a0      	blx	r4
  400618:	2000      	movs	r0, #0
  40061a:	47a0      	blx	r4
  40061c:	2040      	movs	r0, #64	; 0x40
  40061e:	47a0      	blx	r4
  400620:	20a1      	movs	r0, #161	; 0xa1
  400622:	47a0      	blx	r4
  400624:	20c8      	movs	r0, #200	; 0xc8
  400626:	47a0      	blx	r4
  400628:	20da      	movs	r0, #218	; 0xda
  40062a:	47a0      	blx	r4
  40062c:	4648      	mov	r0, r9
  40062e:	47a0      	blx	r4
  400630:	2081      	movs	r0, #129	; 0x81
  400632:	47a0      	blx	r4
  400634:	208f      	movs	r0, #143	; 0x8f
  400636:	47a0      	blx	r4
  400638:	20a4      	movs	r0, #164	; 0xa4
  40063a:	47a0      	blx	r4
  40063c:	20a6      	movs	r0, #166	; 0xa6
  40063e:	47a0      	blx	r4
  400640:	20d5      	movs	r0, #213	; 0xd5
  400642:	47a0      	blx	r4
  400644:	4640      	mov	r0, r8
  400646:	47a0      	blx	r4
  400648:	208d      	movs	r0, #141	; 0x8d
  40064a:	47a0      	blx	r4
  40064c:	2014      	movs	r0, #20
  40064e:	47a0      	blx	r4
  400650:	20db      	movs	r0, #219	; 0xdb
  400652:	47a0      	blx	r4
  400654:	2040      	movs	r0, #64	; 0x40
  400656:	47a0      	blx	r4
  400658:	20d9      	movs	r0, #217	; 0xd9
  40065a:	47a0      	blx	r4
  40065c:	20f1      	movs	r0, #241	; 0xf1
  40065e:	47a0      	blx	r4
  400660:	20af      	movs	r0, #175	; 0xaf
  400662:	47a0      	blx	r4
  400664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400668:	400e1200 	.word	0x400e1200
  40066c:	400e1000 	.word	0x400e1000
  400670:	00400a75 	.word	0x00400a75
  400674:	40008000 	.word	0x40008000
  400678:	00400323 	.word	0x00400323
  40067c:	004002e7 	.word	0x004002e7
  400680:	00400305 	.word	0x00400305
  400684:	00400369 	.word	0x00400369
  400688:	08f0d180 	.word	0x08f0d180
  40068c:	001e8480 	.word	0x001e8480
  400690:	0040037d 	.word	0x0040037d
  400694:	00400393 	.word	0x00400393
  400698:	00400271 	.word	0x00400271
  40069c:	20400001 	.word	0x20400001
  4006a0:	00400489 	.word	0x00400489
  4006a4:	400e1400 	.word	0x400e1400

004006a8 <ssd1306_write_data>:
  4006a8:	b538      	push	{r3, r4, r5, lr}
  4006aa:	4605      	mov	r5, r0
  4006ac:	2208      	movs	r2, #8
  4006ae:	4b09      	ldr	r3, [pc, #36]	; (4006d4 <ssd1306_write_data+0x2c>)
  4006b0:	631a      	str	r2, [r3, #48]	; 0x30
  4006b2:	4c09      	ldr	r4, [pc, #36]	; (4006d8 <ssd1306_write_data+0x30>)
  4006b4:	2101      	movs	r1, #1
  4006b6:	4620      	mov	r0, r4
  4006b8:	4b08      	ldr	r3, [pc, #32]	; (4006dc <ssd1306_write_data+0x34>)
  4006ba:	4798      	blx	r3
  4006bc:	2301      	movs	r3, #1
  4006be:	461a      	mov	r2, r3
  4006c0:	4629      	mov	r1, r5
  4006c2:	4620      	mov	r0, r4
  4006c4:	4c06      	ldr	r4, [pc, #24]	; (4006e0 <ssd1306_write_data+0x38>)
  4006c6:	47a0      	blx	r4
  4006c8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4006cc:	4b05      	ldr	r3, [pc, #20]	; (4006e4 <ssd1306_write_data+0x3c>)
  4006ce:	4798      	blx	r3
  4006d0:	bd38      	pop	{r3, r4, r5, pc}
  4006d2:	bf00      	nop
  4006d4:	400e1000 	.word	0x400e1000
  4006d8:	40008000 	.word	0x40008000
  4006dc:	0040029d 	.word	0x0040029d
  4006e0:	004002b3 	.word	0x004002b3
  4006e4:	20400001 	.word	0x20400001

004006e8 <sysclk_init>:
  4006e8:	b510      	push	{r4, lr}
  4006ea:	4810      	ldr	r0, [pc, #64]	; (40072c <sysclk_init+0x44>)
  4006ec:	4b10      	ldr	r3, [pc, #64]	; (400730 <sysclk_init+0x48>)
  4006ee:	4798      	blx	r3
  4006f0:	213e      	movs	r1, #62	; 0x3e
  4006f2:	2000      	movs	r0, #0
  4006f4:	4b0f      	ldr	r3, [pc, #60]	; (400734 <sysclk_init+0x4c>)
  4006f6:	4798      	blx	r3
  4006f8:	4c0f      	ldr	r4, [pc, #60]	; (400738 <sysclk_init+0x50>)
  4006fa:	47a0      	blx	r4
  4006fc:	2800      	cmp	r0, #0
  4006fe:	d0fc      	beq.n	4006fa <sysclk_init+0x12>
  400700:	4b0e      	ldr	r3, [pc, #56]	; (40073c <sysclk_init+0x54>)
  400702:	4798      	blx	r3
  400704:	4a0e      	ldr	r2, [pc, #56]	; (400740 <sysclk_init+0x58>)
  400706:	4b0f      	ldr	r3, [pc, #60]	; (400744 <sysclk_init+0x5c>)
  400708:	629a      	str	r2, [r3, #40]	; 0x28
  40070a:	4c0f      	ldr	r4, [pc, #60]	; (400748 <sysclk_init+0x60>)
  40070c:	47a0      	blx	r4
  40070e:	2800      	cmp	r0, #0
  400710:	d0fc      	beq.n	40070c <sysclk_init+0x24>
  400712:	2002      	movs	r0, #2
  400714:	4b0d      	ldr	r3, [pc, #52]	; (40074c <sysclk_init+0x64>)
  400716:	4798      	blx	r3
  400718:	2000      	movs	r0, #0
  40071a:	4b0d      	ldr	r3, [pc, #52]	; (400750 <sysclk_init+0x68>)
  40071c:	4798      	blx	r3
  40071e:	4b0d      	ldr	r3, [pc, #52]	; (400754 <sysclk_init+0x6c>)
  400720:	4798      	blx	r3
  400722:	4802      	ldr	r0, [pc, #8]	; (40072c <sysclk_init+0x44>)
  400724:	4b02      	ldr	r3, [pc, #8]	; (400730 <sysclk_init+0x48>)
  400726:	4798      	blx	r3
  400728:	bd10      	pop	{r4, pc}
  40072a:	bf00      	nop
  40072c:	11e1a300 	.word	0x11e1a300
  400730:	00401041 	.word	0x00401041
  400734:	00400c5d 	.word	0x00400c5d
  400738:	00400cb1 	.word	0x00400cb1
  40073c:	00400cc1 	.word	0x00400cc1
  400740:	20183f01 	.word	0x20183f01
  400744:	400e0600 	.word	0x400e0600
  400748:	00400cd1 	.word	0x00400cd1
  40074c:	00400bc1 	.word	0x00400bc1
  400750:	00400bf9 	.word	0x00400bf9
  400754:	00400f35 	.word	0x00400f35

00400758 <_read>:
  400758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40075c:	b980      	cbnz	r0, 400780 <_read+0x28>
  40075e:	460c      	mov	r4, r1
  400760:	4690      	mov	r8, r2
  400762:	2a00      	cmp	r2, #0
  400764:	dd0f      	ble.n	400786 <_read+0x2e>
  400766:	188f      	adds	r7, r1, r2
  400768:	4e08      	ldr	r6, [pc, #32]	; (40078c <_read+0x34>)
  40076a:	4d09      	ldr	r5, [pc, #36]	; (400790 <_read+0x38>)
  40076c:	6830      	ldr	r0, [r6, #0]
  40076e:	4621      	mov	r1, r4
  400770:	682b      	ldr	r3, [r5, #0]
  400772:	4798      	blx	r3
  400774:	3401      	adds	r4, #1
  400776:	42bc      	cmp	r4, r7
  400778:	d1f8      	bne.n	40076c <_read+0x14>
  40077a:	4640      	mov	r0, r8
  40077c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400780:	f04f 38ff 	mov.w	r8, #4294967295
  400784:	e7f9      	b.n	40077a <_read+0x22>
  400786:	4680      	mov	r8, r0
  400788:	e7f7      	b.n	40077a <_read+0x22>
  40078a:	bf00      	nop
  40078c:	20400de0 	.word	0x20400de0
  400790:	20400dd8 	.word	0x20400dd8

00400794 <_write>:
  400794:	3801      	subs	r0, #1
  400796:	2802      	cmp	r0, #2
  400798:	d815      	bhi.n	4007c6 <_write+0x32>
  40079a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40079e:	460e      	mov	r6, r1
  4007a0:	4614      	mov	r4, r2
  4007a2:	b19a      	cbz	r2, 4007cc <_write+0x38>
  4007a4:	460d      	mov	r5, r1
  4007a6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007e0 <_write+0x4c>
  4007aa:	4f0c      	ldr	r7, [pc, #48]	; (4007dc <_write+0x48>)
  4007ac:	f8d8 0000 	ldr.w	r0, [r8]
  4007b0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4007b4:	683b      	ldr	r3, [r7, #0]
  4007b6:	4798      	blx	r3
  4007b8:	2800      	cmp	r0, #0
  4007ba:	db0a      	blt.n	4007d2 <_write+0x3e>
  4007bc:	1ba8      	subs	r0, r5, r6
  4007be:	3c01      	subs	r4, #1
  4007c0:	d1f4      	bne.n	4007ac <_write+0x18>
  4007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007c6:	f04f 30ff 	mov.w	r0, #4294967295
  4007ca:	4770      	bx	lr
  4007cc:	4610      	mov	r0, r2
  4007ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007d2:	f04f 30ff 	mov.w	r0, #4294967295
  4007d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007da:	bf00      	nop
  4007dc:	20400ddc 	.word	0x20400ddc
  4007e0:	20400de0 	.word	0x20400de0

004007e4 <board_init>:
  4007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007ea:	4b5c      	ldr	r3, [pc, #368]	; (40095c <board_init+0x178>)
  4007ec:	605a      	str	r2, [r3, #4]
  4007ee:	f3bf 8f4f 	dsb	sy
  4007f2:	f3bf 8f6f 	isb	sy
  4007f6:	4b5a      	ldr	r3, [pc, #360]	; (400960 <board_init+0x17c>)
  4007f8:	2200      	movs	r2, #0
  4007fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  4007fe:	695a      	ldr	r2, [r3, #20]
  400800:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400804:	615a      	str	r2, [r3, #20]
  400806:	f3bf 8f4f 	dsb	sy
  40080a:	f3bf 8f6f 	isb	sy
  40080e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
  400812:	f3c7 364e 	ubfx	r6, r7, #13, #15
  400816:	f007 0007 	and.w	r0, r7, #7
  40081a:	3004      	adds	r0, #4
  40081c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400820:	fab7 fe87 	clz	lr, r7
  400824:	f00e 0e1f 	and.w	lr, lr, #31
  400828:	f3bf 8f4f 	dsb	sy
  40082c:	f04f 34ff 	mov.w	r4, #4294967295
  400830:	fa04 fc00 	lsl.w	ip, r4, r0
  400834:	fa06 f000 	lsl.w	r0, r6, r0
  400838:	fa04 f40e 	lsl.w	r4, r4, lr
  40083c:	fa07 fe0e 	lsl.w	lr, r7, lr
  400840:	461d      	mov	r5, r3
  400842:	463a      	mov	r2, r7
  400844:	4673      	mov	r3, lr
  400846:	ea40 0103 	orr.w	r1, r0, r3
  40084a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
  40084e:	3a01      	subs	r2, #1
  400850:	4423      	add	r3, r4
  400852:	f1b2 3fff 	cmp.w	r2, #4294967295
  400856:	d1f6      	bne.n	400846 <board_init+0x62>
  400858:	3e01      	subs	r6, #1
  40085a:	4460      	add	r0, ip
  40085c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400860:	d1ef      	bne.n	400842 <board_init+0x5e>
  400862:	f3bf 8f4f 	dsb	sy
  400866:	4b3e      	ldr	r3, [pc, #248]	; (400960 <board_init+0x17c>)
  400868:	695a      	ldr	r2, [r3, #20]
  40086a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40086e:	615a      	str	r2, [r3, #20]
  400870:	f3bf 8f4f 	dsb	sy
  400874:	f3bf 8f6f 	isb	sy
  400878:	4a3a      	ldr	r2, [pc, #232]	; (400964 <board_init+0x180>)
  40087a:	493b      	ldr	r1, [pc, #236]	; (400968 <board_init+0x184>)
  40087c:	6051      	str	r1, [r2, #4]
  40087e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400882:	6051      	str	r1, [r2, #4]
  400884:	f3bf 8f4f 	dsb	sy
  400888:	f3bf 8f6f 	isb	sy
  40088c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400890:	f022 0201 	bic.w	r2, r2, #1
  400894:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  400898:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40089c:	f022 0201 	bic.w	r2, r2, #1
  4008a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  4008a4:	f3bf 8f4f 	dsb	sy
  4008a8:	f3bf 8f6f 	isb	sy
  4008ac:	200a      	movs	r0, #10
  4008ae:	4c2f      	ldr	r4, [pc, #188]	; (40096c <board_init+0x188>)
  4008b0:	47a0      	blx	r4
  4008b2:	200b      	movs	r0, #11
  4008b4:	47a0      	blx	r4
  4008b6:	200c      	movs	r0, #12
  4008b8:	47a0      	blx	r4
  4008ba:	2010      	movs	r0, #16
  4008bc:	47a0      	blx	r4
  4008be:	2011      	movs	r0, #17
  4008c0:	47a0      	blx	r4
  4008c2:	4b2b      	ldr	r3, [pc, #172]	; (400970 <board_init+0x18c>)
  4008c4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008c8:	611a      	str	r2, [r3, #16]
  4008ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4008ce:	631a      	str	r2, [r3, #48]	; 0x30
  4008d0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4008d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4008d8:	615a      	str	r2, [r3, #20]
  4008da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4008de:	665a      	str	r2, [r3, #100]	; 0x64
  4008e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  4008e4:	655a      	str	r2, [r3, #84]	; 0x54
  4008e6:	621a      	str	r2, [r3, #32]
  4008e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4008ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008ee:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4008f2:	6719      	str	r1, [r3, #112]	; 0x70
  4008f4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008f6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4008fa:	6759      	str	r1, [r3, #116]	; 0x74
  4008fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  400900:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400904:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400908:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40090c:	661a      	str	r2, [r3, #96]	; 0x60
  40090e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  400912:	655a      	str	r2, [r3, #84]	; 0x54
  400914:	625a      	str	r2, [r3, #36]	; 0x24
  400916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40091a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40091c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400920:	6719      	str	r1, [r3, #112]	; 0x70
  400922:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400924:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400928:	6759      	str	r1, [r3, #116]	; 0x74
  40092a:	605a      	str	r2, [r3, #4]
  40092c:	4a11      	ldr	r2, [pc, #68]	; (400974 <board_init+0x190>)
  40092e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400932:	f043 0310 	orr.w	r3, r3, #16
  400936:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  40093a:	4b0f      	ldr	r3, [pc, #60]	; (400978 <board_init+0x194>)
  40093c:	2210      	movs	r2, #16
  40093e:	661a      	str	r2, [r3, #96]	; 0x60
  400940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  400944:	655a      	str	r2, [r3, #84]	; 0x54
  400946:	625a      	str	r2, [r3, #36]	; 0x24
  400948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40094c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40094e:	4311      	orrs	r1, r2
  400950:	6719      	str	r1, [r3, #112]	; 0x70
  400952:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400954:	4311      	orrs	r1, r2
  400956:	6759      	str	r1, [r3, #116]	; 0x74
  400958:	605a      	str	r2, [r3, #4]
  40095a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40095c:	400e1850 	.word	0x400e1850
  400960:	e000ed00 	.word	0xe000ed00
  400964:	400e0c00 	.word	0x400e0c00
  400968:	5a00080c 	.word	0x5a00080c
  40096c:	00400ce1 	.word	0x00400ce1
  400970:	400e1200 	.word	0x400e1200
  400974:	40088000 	.word	0x40088000
  400978:	400e1000 	.word	0x400e1000

0040097c <pio_set>:
  40097c:	6301      	str	r1, [r0, #48]	; 0x30
  40097e:	4770      	bx	lr

00400980 <pio_clear>:
  400980:	6341      	str	r1, [r0, #52]	; 0x34
  400982:	4770      	bx	lr

00400984 <pio_set_peripheral>:
  400984:	6442      	str	r2, [r0, #68]	; 0x44
  400986:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40098a:	d03a      	beq.n	400a02 <pio_set_peripheral+0x7e>
  40098c:	d813      	bhi.n	4009b6 <pio_set_peripheral+0x32>
  40098e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400992:	d025      	beq.n	4009e0 <pio_set_peripheral+0x5c>
  400994:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400998:	d10a      	bne.n	4009b0 <pio_set_peripheral+0x2c>
  40099a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  40099c:	4313      	orrs	r3, r2
  40099e:	6703      	str	r3, [r0, #112]	; 0x70
  4009a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4009a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4009a4:	400b      	ands	r3, r1
  4009a6:	ea23 0302 	bic.w	r3, r3, r2
  4009aa:	6743      	str	r3, [r0, #116]	; 0x74
  4009ac:	6042      	str	r2, [r0, #4]
  4009ae:	4770      	bx	lr
  4009b0:	2900      	cmp	r1, #0
  4009b2:	d1fb      	bne.n	4009ac <pio_set_peripheral+0x28>
  4009b4:	4770      	bx	lr
  4009b6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4009ba:	d021      	beq.n	400a00 <pio_set_peripheral+0x7c>
  4009bc:	d809      	bhi.n	4009d2 <pio_set_peripheral+0x4e>
  4009be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4009c2:	d1f3      	bne.n	4009ac <pio_set_peripheral+0x28>
  4009c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4009c6:	4313      	orrs	r3, r2
  4009c8:	6703      	str	r3, [r0, #112]	; 0x70
  4009ca:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4009cc:	4313      	orrs	r3, r2
  4009ce:	6743      	str	r3, [r0, #116]	; 0x74
  4009d0:	e7ec      	b.n	4009ac <pio_set_peripheral+0x28>
  4009d2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4009d6:	d013      	beq.n	400a00 <pio_set_peripheral+0x7c>
  4009d8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4009dc:	d010      	beq.n	400a00 <pio_set_peripheral+0x7c>
  4009de:	e7e5      	b.n	4009ac <pio_set_peripheral+0x28>
  4009e0:	b410      	push	{r4}
  4009e2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4009e4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4009e6:	43d3      	mvns	r3, r2
  4009e8:	4021      	ands	r1, r4
  4009ea:	461c      	mov	r4, r3
  4009ec:	4019      	ands	r1, r3
  4009ee:	6701      	str	r1, [r0, #112]	; 0x70
  4009f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4009f2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4009f4:	400b      	ands	r3, r1
  4009f6:	4023      	ands	r3, r4
  4009f8:	6743      	str	r3, [r0, #116]	; 0x74
  4009fa:	6042      	str	r2, [r0, #4]
  4009fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a00:	4770      	bx	lr
  400a02:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400a04:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a06:	400b      	ands	r3, r1
  400a08:	ea23 0302 	bic.w	r3, r3, r2
  400a0c:	6703      	str	r3, [r0, #112]	; 0x70
  400a0e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400a10:	4313      	orrs	r3, r2
  400a12:	6743      	str	r3, [r0, #116]	; 0x74
  400a14:	e7ca      	b.n	4009ac <pio_set_peripheral+0x28>

00400a16 <pio_set_input>:
  400a16:	6441      	str	r1, [r0, #68]	; 0x44
  400a18:	f012 0f01 	tst.w	r2, #1
  400a1c:	d10d      	bne.n	400a3a <pio_set_input+0x24>
  400a1e:	6601      	str	r1, [r0, #96]	; 0x60
  400a20:	f012 0f0a 	tst.w	r2, #10
  400a24:	d00b      	beq.n	400a3e <pio_set_input+0x28>
  400a26:	6201      	str	r1, [r0, #32]
  400a28:	f012 0f02 	tst.w	r2, #2
  400a2c:	d109      	bne.n	400a42 <pio_set_input+0x2c>
  400a2e:	f012 0f08 	tst.w	r2, #8
  400a32:	d008      	beq.n	400a46 <pio_set_input+0x30>
  400a34:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400a38:	e005      	b.n	400a46 <pio_set_input+0x30>
  400a3a:	6641      	str	r1, [r0, #100]	; 0x64
  400a3c:	e7f0      	b.n	400a20 <pio_set_input+0xa>
  400a3e:	6241      	str	r1, [r0, #36]	; 0x24
  400a40:	e7f2      	b.n	400a28 <pio_set_input+0x12>
  400a42:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400a46:	6141      	str	r1, [r0, #20]
  400a48:	6001      	str	r1, [r0, #0]
  400a4a:	4770      	bx	lr

00400a4c <pio_set_output>:
  400a4c:	b410      	push	{r4}
  400a4e:	9c01      	ldr	r4, [sp, #4]
  400a50:	6441      	str	r1, [r0, #68]	; 0x44
  400a52:	b94c      	cbnz	r4, 400a68 <pio_set_output+0x1c>
  400a54:	6601      	str	r1, [r0, #96]	; 0x60
  400a56:	b14b      	cbz	r3, 400a6c <pio_set_output+0x20>
  400a58:	6501      	str	r1, [r0, #80]	; 0x50
  400a5a:	b94a      	cbnz	r2, 400a70 <pio_set_output+0x24>
  400a5c:	6341      	str	r1, [r0, #52]	; 0x34
  400a5e:	6101      	str	r1, [r0, #16]
  400a60:	6001      	str	r1, [r0, #0]
  400a62:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	6641      	str	r1, [r0, #100]	; 0x64
  400a6a:	e7f4      	b.n	400a56 <pio_set_output+0xa>
  400a6c:	6541      	str	r1, [r0, #84]	; 0x54
  400a6e:	e7f4      	b.n	400a5a <pio_set_output+0xe>
  400a70:	6301      	str	r1, [r0, #48]	; 0x30
  400a72:	e7f4      	b.n	400a5e <pio_set_output+0x12>

00400a74 <pio_configure>:
  400a74:	b570      	push	{r4, r5, r6, lr}
  400a76:	b082      	sub	sp, #8
  400a78:	4605      	mov	r5, r0
  400a7a:	4616      	mov	r6, r2
  400a7c:	461c      	mov	r4, r3
  400a7e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a82:	d014      	beq.n	400aae <pio_configure+0x3a>
  400a84:	d90a      	bls.n	400a9c <pio_configure+0x28>
  400a86:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a8a:	d024      	beq.n	400ad6 <pio_configure+0x62>
  400a8c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a90:	d021      	beq.n	400ad6 <pio_configure+0x62>
  400a92:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a96:	d017      	beq.n	400ac8 <pio_configure+0x54>
  400a98:	2000      	movs	r0, #0
  400a9a:	e01a      	b.n	400ad2 <pio_configure+0x5e>
  400a9c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400aa0:	d005      	beq.n	400aae <pio_configure+0x3a>
  400aa2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400aa6:	d002      	beq.n	400aae <pio_configure+0x3a>
  400aa8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400aac:	d1f4      	bne.n	400a98 <pio_configure+0x24>
  400aae:	4632      	mov	r2, r6
  400ab0:	4628      	mov	r0, r5
  400ab2:	4b11      	ldr	r3, [pc, #68]	; (400af8 <pio_configure+0x84>)
  400ab4:	4798      	blx	r3
  400ab6:	f014 0f01 	tst.w	r4, #1
  400aba:	d102      	bne.n	400ac2 <pio_configure+0x4e>
  400abc:	662e      	str	r6, [r5, #96]	; 0x60
  400abe:	2001      	movs	r0, #1
  400ac0:	e007      	b.n	400ad2 <pio_configure+0x5e>
  400ac2:	666e      	str	r6, [r5, #100]	; 0x64
  400ac4:	2001      	movs	r0, #1
  400ac6:	e004      	b.n	400ad2 <pio_configure+0x5e>
  400ac8:	461a      	mov	r2, r3
  400aca:	4631      	mov	r1, r6
  400acc:	4b0b      	ldr	r3, [pc, #44]	; (400afc <pio_configure+0x88>)
  400ace:	4798      	blx	r3
  400ad0:	2001      	movs	r0, #1
  400ad2:	b002      	add	sp, #8
  400ad4:	bd70      	pop	{r4, r5, r6, pc}
  400ad6:	f004 0301 	and.w	r3, r4, #1
  400ada:	9300      	str	r3, [sp, #0]
  400adc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ae0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ae4:	bf14      	ite	ne
  400ae6:	2200      	movne	r2, #0
  400ae8:	2201      	moveq	r2, #1
  400aea:	4631      	mov	r1, r6
  400aec:	4628      	mov	r0, r5
  400aee:	4c04      	ldr	r4, [pc, #16]	; (400b00 <pio_configure+0x8c>)
  400af0:	47a0      	blx	r4
  400af2:	2001      	movs	r0, #1
  400af4:	e7ed      	b.n	400ad2 <pio_configure+0x5e>
  400af6:	bf00      	nop
  400af8:	00400985 	.word	0x00400985
  400afc:	00400a17 	.word	0x00400a17
  400b00:	00400a4d 	.word	0x00400a4d

00400b04 <pio_get_interrupt_status>:
  400b04:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  400b06:	4770      	bx	lr

00400b08 <pio_get_interrupt_mask>:
  400b08:	6c80      	ldr	r0, [r0, #72]	; 0x48
  400b0a:	4770      	bx	lr

00400b0c <pio_handler_process>:
  400b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b10:	4604      	mov	r4, r0
  400b12:	4688      	mov	r8, r1
  400b14:	4b0e      	ldr	r3, [pc, #56]	; (400b50 <pio_handler_process+0x44>)
  400b16:	4798      	blx	r3
  400b18:	4605      	mov	r5, r0
  400b1a:	4620      	mov	r0, r4
  400b1c:	4b0d      	ldr	r3, [pc, #52]	; (400b54 <pio_handler_process+0x48>)
  400b1e:	4798      	blx	r3
  400b20:	4005      	ands	r5, r0
  400b22:	d013      	beq.n	400b4c <pio_handler_process+0x40>
  400b24:	4c0c      	ldr	r4, [pc, #48]	; (400b58 <pio_handler_process+0x4c>)
  400b26:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400b2a:	e003      	b.n	400b34 <pio_handler_process+0x28>
  400b2c:	42b4      	cmp	r4, r6
  400b2e:	d00d      	beq.n	400b4c <pio_handler_process+0x40>
  400b30:	3410      	adds	r4, #16
  400b32:	b15d      	cbz	r5, 400b4c <pio_handler_process+0x40>
  400b34:	6820      	ldr	r0, [r4, #0]
  400b36:	4540      	cmp	r0, r8
  400b38:	d1f8      	bne.n	400b2c <pio_handler_process+0x20>
  400b3a:	6861      	ldr	r1, [r4, #4]
  400b3c:	4229      	tst	r1, r5
  400b3e:	d0f5      	beq.n	400b2c <pio_handler_process+0x20>
  400b40:	68e3      	ldr	r3, [r4, #12]
  400b42:	4798      	blx	r3
  400b44:	6863      	ldr	r3, [r4, #4]
  400b46:	ea25 0503 	bic.w	r5, r5, r3
  400b4a:	e7ef      	b.n	400b2c <pio_handler_process+0x20>
  400b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b50:	00400b05 	.word	0x00400b05
  400b54:	00400b09 	.word	0x00400b09
  400b58:	20400bec 	.word	0x20400bec

00400b5c <PIOA_Handler>:
  400b5c:	b508      	push	{r3, lr}
  400b5e:	210a      	movs	r1, #10
  400b60:	4801      	ldr	r0, [pc, #4]	; (400b68 <PIOA_Handler+0xc>)
  400b62:	4b02      	ldr	r3, [pc, #8]	; (400b6c <PIOA_Handler+0x10>)
  400b64:	4798      	blx	r3
  400b66:	bd08      	pop	{r3, pc}
  400b68:	400e0e00 	.word	0x400e0e00
  400b6c:	00400b0d 	.word	0x00400b0d

00400b70 <PIOB_Handler>:
  400b70:	b508      	push	{r3, lr}
  400b72:	210b      	movs	r1, #11
  400b74:	4801      	ldr	r0, [pc, #4]	; (400b7c <PIOB_Handler+0xc>)
  400b76:	4b02      	ldr	r3, [pc, #8]	; (400b80 <PIOB_Handler+0x10>)
  400b78:	4798      	blx	r3
  400b7a:	bd08      	pop	{r3, pc}
  400b7c:	400e1000 	.word	0x400e1000
  400b80:	00400b0d 	.word	0x00400b0d

00400b84 <PIOC_Handler>:
  400b84:	b508      	push	{r3, lr}
  400b86:	210c      	movs	r1, #12
  400b88:	4801      	ldr	r0, [pc, #4]	; (400b90 <PIOC_Handler+0xc>)
  400b8a:	4b02      	ldr	r3, [pc, #8]	; (400b94 <PIOC_Handler+0x10>)
  400b8c:	4798      	blx	r3
  400b8e:	bd08      	pop	{r3, pc}
  400b90:	400e1200 	.word	0x400e1200
  400b94:	00400b0d 	.word	0x00400b0d

00400b98 <PIOD_Handler>:
  400b98:	b508      	push	{r3, lr}
  400b9a:	2110      	movs	r1, #16
  400b9c:	4801      	ldr	r0, [pc, #4]	; (400ba4 <PIOD_Handler+0xc>)
  400b9e:	4b02      	ldr	r3, [pc, #8]	; (400ba8 <PIOD_Handler+0x10>)
  400ba0:	4798      	blx	r3
  400ba2:	bd08      	pop	{r3, pc}
  400ba4:	400e1400 	.word	0x400e1400
  400ba8:	00400b0d 	.word	0x00400b0d

00400bac <PIOE_Handler>:
  400bac:	b508      	push	{r3, lr}
  400bae:	2111      	movs	r1, #17
  400bb0:	4801      	ldr	r0, [pc, #4]	; (400bb8 <PIOE_Handler+0xc>)
  400bb2:	4b02      	ldr	r3, [pc, #8]	; (400bbc <PIOE_Handler+0x10>)
  400bb4:	4798      	blx	r3
  400bb6:	bd08      	pop	{r3, pc}
  400bb8:	400e1600 	.word	0x400e1600
  400bbc:	00400b0d 	.word	0x00400b0d

00400bc0 <pmc_mck_set_division>:
  400bc0:	2803      	cmp	r0, #3
  400bc2:	d011      	beq.n	400be8 <pmc_mck_set_division+0x28>
  400bc4:	2804      	cmp	r0, #4
  400bc6:	d012      	beq.n	400bee <pmc_mck_set_division+0x2e>
  400bc8:	2802      	cmp	r0, #2
  400bca:	bf0c      	ite	eq
  400bcc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400bd0:	2100      	movne	r1, #0
  400bd2:	4a08      	ldr	r2, [pc, #32]	; (400bf4 <pmc_mck_set_division+0x34>)
  400bd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400bda:	430b      	orrs	r3, r1
  400bdc:	6313      	str	r3, [r2, #48]	; 0x30
  400bde:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400be0:	f013 0f08 	tst.w	r3, #8
  400be4:	d0fb      	beq.n	400bde <pmc_mck_set_division+0x1e>
  400be6:	4770      	bx	lr
  400be8:	f44f 7140 	mov.w	r1, #768	; 0x300
  400bec:	e7f1      	b.n	400bd2 <pmc_mck_set_division+0x12>
  400bee:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bf2:	e7ee      	b.n	400bd2 <pmc_mck_set_division+0x12>
  400bf4:	400e0600 	.word	0x400e0600

00400bf8 <pmc_switch_mck_to_pllack>:
  400bf8:	4a17      	ldr	r2, [pc, #92]	; (400c58 <pmc_switch_mck_to_pllack+0x60>)
  400bfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400c00:	4318      	orrs	r0, r3
  400c02:	6310      	str	r0, [r2, #48]	; 0x30
  400c04:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c06:	f013 0f08 	tst.w	r3, #8
  400c0a:	d10a      	bne.n	400c22 <pmc_switch_mck_to_pllack+0x2a>
  400c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c10:	4911      	ldr	r1, [pc, #68]	; (400c58 <pmc_switch_mck_to_pllack+0x60>)
  400c12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c14:	f012 0f08 	tst.w	r2, #8
  400c18:	d103      	bne.n	400c22 <pmc_switch_mck_to_pllack+0x2a>
  400c1a:	3b01      	subs	r3, #1
  400c1c:	d1f9      	bne.n	400c12 <pmc_switch_mck_to_pllack+0x1a>
  400c1e:	2001      	movs	r0, #1
  400c20:	4770      	bx	lr
  400c22:	4a0d      	ldr	r2, [pc, #52]	; (400c58 <pmc_switch_mck_to_pllack+0x60>)
  400c24:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c26:	f023 0303 	bic.w	r3, r3, #3
  400c2a:	f043 0302 	orr.w	r3, r3, #2
  400c2e:	6313      	str	r3, [r2, #48]	; 0x30
  400c30:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c32:	f013 0f08 	tst.w	r3, #8
  400c36:	d10a      	bne.n	400c4e <pmc_switch_mck_to_pllack+0x56>
  400c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c3c:	4906      	ldr	r1, [pc, #24]	; (400c58 <pmc_switch_mck_to_pllack+0x60>)
  400c3e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c40:	f012 0f08 	tst.w	r2, #8
  400c44:	d105      	bne.n	400c52 <pmc_switch_mck_to_pllack+0x5a>
  400c46:	3b01      	subs	r3, #1
  400c48:	d1f9      	bne.n	400c3e <pmc_switch_mck_to_pllack+0x46>
  400c4a:	2001      	movs	r0, #1
  400c4c:	4770      	bx	lr
  400c4e:	2000      	movs	r0, #0
  400c50:	4770      	bx	lr
  400c52:	2000      	movs	r0, #0
  400c54:	4770      	bx	lr
  400c56:	bf00      	nop
  400c58:	400e0600 	.word	0x400e0600

00400c5c <pmc_switch_mainck_to_xtal>:
  400c5c:	b9a0      	cbnz	r0, 400c88 <pmc_switch_mainck_to_xtal+0x2c>
  400c5e:	480e      	ldr	r0, [pc, #56]	; (400c98 <pmc_switch_mainck_to_xtal+0x3c>)
  400c60:	6a03      	ldr	r3, [r0, #32]
  400c62:	0209      	lsls	r1, r1, #8
  400c64:	b289      	uxth	r1, r1
  400c66:	4a0d      	ldr	r2, [pc, #52]	; (400c9c <pmc_switch_mainck_to_xtal+0x40>)
  400c68:	401a      	ands	r2, r3
  400c6a:	4b0d      	ldr	r3, [pc, #52]	; (400ca0 <pmc_switch_mainck_to_xtal+0x44>)
  400c6c:	4313      	orrs	r3, r2
  400c6e:	4319      	orrs	r1, r3
  400c70:	6201      	str	r1, [r0, #32]
  400c72:	4602      	mov	r2, r0
  400c74:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c76:	f013 0f01 	tst.w	r3, #1
  400c7a:	d0fb      	beq.n	400c74 <pmc_switch_mainck_to_xtal+0x18>
  400c7c:	4a06      	ldr	r2, [pc, #24]	; (400c98 <pmc_switch_mainck_to_xtal+0x3c>)
  400c7e:	6a11      	ldr	r1, [r2, #32]
  400c80:	4b08      	ldr	r3, [pc, #32]	; (400ca4 <pmc_switch_mainck_to_xtal+0x48>)
  400c82:	430b      	orrs	r3, r1
  400c84:	6213      	str	r3, [r2, #32]
  400c86:	4770      	bx	lr
  400c88:	4903      	ldr	r1, [pc, #12]	; (400c98 <pmc_switch_mainck_to_xtal+0x3c>)
  400c8a:	6a0b      	ldr	r3, [r1, #32]
  400c8c:	4a06      	ldr	r2, [pc, #24]	; (400ca8 <pmc_switch_mainck_to_xtal+0x4c>)
  400c8e:	401a      	ands	r2, r3
  400c90:	4b06      	ldr	r3, [pc, #24]	; (400cac <pmc_switch_mainck_to_xtal+0x50>)
  400c92:	4313      	orrs	r3, r2
  400c94:	620b      	str	r3, [r1, #32]
  400c96:	4770      	bx	lr
  400c98:	400e0600 	.word	0x400e0600
  400c9c:	ffc8fffc 	.word	0xffc8fffc
  400ca0:	00370001 	.word	0x00370001
  400ca4:	01370000 	.word	0x01370000
  400ca8:	fec8fffc 	.word	0xfec8fffc
  400cac:	01370002 	.word	0x01370002

00400cb0 <pmc_osc_is_ready_mainck>:
  400cb0:	4b02      	ldr	r3, [pc, #8]	; (400cbc <pmc_osc_is_ready_mainck+0xc>)
  400cb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400cb4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400cb8:	4770      	bx	lr
  400cba:	bf00      	nop
  400cbc:	400e0600 	.word	0x400e0600

00400cc0 <pmc_disable_pllack>:
  400cc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400cc4:	4b01      	ldr	r3, [pc, #4]	; (400ccc <pmc_disable_pllack+0xc>)
  400cc6:	629a      	str	r2, [r3, #40]	; 0x28
  400cc8:	4770      	bx	lr
  400cca:	bf00      	nop
  400ccc:	400e0600 	.word	0x400e0600

00400cd0 <pmc_is_locked_pllack>:
  400cd0:	4b02      	ldr	r3, [pc, #8]	; (400cdc <pmc_is_locked_pllack+0xc>)
  400cd2:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400cd4:	f000 0002 	and.w	r0, r0, #2
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop
  400cdc:	400e0600 	.word	0x400e0600

00400ce0 <pmc_enable_periph_clk>:
  400ce0:	283f      	cmp	r0, #63	; 0x3f
  400ce2:	d81e      	bhi.n	400d22 <pmc_enable_periph_clk+0x42>
  400ce4:	281f      	cmp	r0, #31
  400ce6:	d80c      	bhi.n	400d02 <pmc_enable_periph_clk+0x22>
  400ce8:	4b11      	ldr	r3, [pc, #68]	; (400d30 <pmc_enable_periph_clk+0x50>)
  400cea:	699a      	ldr	r2, [r3, #24]
  400cec:	2301      	movs	r3, #1
  400cee:	4083      	lsls	r3, r0
  400cf0:	4393      	bics	r3, r2
  400cf2:	d018      	beq.n	400d26 <pmc_enable_periph_clk+0x46>
  400cf4:	2301      	movs	r3, #1
  400cf6:	fa03 f000 	lsl.w	r0, r3, r0
  400cfa:	4b0d      	ldr	r3, [pc, #52]	; (400d30 <pmc_enable_periph_clk+0x50>)
  400cfc:	6118      	str	r0, [r3, #16]
  400cfe:	2000      	movs	r0, #0
  400d00:	4770      	bx	lr
  400d02:	3820      	subs	r0, #32
  400d04:	4b0a      	ldr	r3, [pc, #40]	; (400d30 <pmc_enable_periph_clk+0x50>)
  400d06:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400d0a:	2301      	movs	r3, #1
  400d0c:	4083      	lsls	r3, r0
  400d0e:	4393      	bics	r3, r2
  400d10:	d00b      	beq.n	400d2a <pmc_enable_periph_clk+0x4a>
  400d12:	2301      	movs	r3, #1
  400d14:	fa03 f000 	lsl.w	r0, r3, r0
  400d18:	4b05      	ldr	r3, [pc, #20]	; (400d30 <pmc_enable_periph_clk+0x50>)
  400d1a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  400d1e:	2000      	movs	r0, #0
  400d20:	4770      	bx	lr
  400d22:	2001      	movs	r0, #1
  400d24:	4770      	bx	lr
  400d26:	2000      	movs	r0, #0
  400d28:	4770      	bx	lr
  400d2a:	2000      	movs	r0, #0
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop
  400d30:	400e0600 	.word	0x400e0600

00400d34 <uart_write>:
  400d34:	6943      	ldr	r3, [r0, #20]
  400d36:	f013 0f02 	tst.w	r3, #2
  400d3a:	d002      	beq.n	400d42 <uart_write+0xe>
  400d3c:	61c1      	str	r1, [r0, #28]
  400d3e:	2000      	movs	r0, #0
  400d40:	4770      	bx	lr
  400d42:	2001      	movs	r0, #1
  400d44:	4770      	bx	lr

00400d46 <uart_read>:
  400d46:	6943      	ldr	r3, [r0, #20]
  400d48:	f013 0f01 	tst.w	r3, #1
  400d4c:	d003      	beq.n	400d56 <uart_read+0x10>
  400d4e:	6983      	ldr	r3, [r0, #24]
  400d50:	700b      	strb	r3, [r1, #0]
  400d52:	2000      	movs	r0, #0
  400d54:	4770      	bx	lr
  400d56:	2001      	movs	r0, #1
  400d58:	4770      	bx	lr

00400d5a <usart_set_async_baudrate>:
  400d5a:	b410      	push	{r4}
  400d5c:	010b      	lsls	r3, r1, #4
  400d5e:	4293      	cmp	r3, r2
  400d60:	d914      	bls.n	400d8c <usart_set_async_baudrate+0x32>
  400d62:	00c9      	lsls	r1, r1, #3
  400d64:	084b      	lsrs	r3, r1, #1
  400d66:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400d6a:	fbb2 f2f1 	udiv	r2, r2, r1
  400d6e:	08d3      	lsrs	r3, r2, #3
  400d70:	1e5c      	subs	r4, r3, #1
  400d72:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d76:	428c      	cmp	r4, r1
  400d78:	d901      	bls.n	400d7e <usart_set_async_baudrate+0x24>
  400d7a:	2001      	movs	r0, #1
  400d7c:	e017      	b.n	400dae <usart_set_async_baudrate+0x54>
  400d7e:	6841      	ldr	r1, [r0, #4]
  400d80:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400d84:	6041      	str	r1, [r0, #4]
  400d86:	e00c      	b.n	400da2 <usart_set_async_baudrate+0x48>
  400d88:	2001      	movs	r0, #1
  400d8a:	e010      	b.n	400dae <usart_set_async_baudrate+0x54>
  400d8c:	0859      	lsrs	r1, r3, #1
  400d8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400d92:	fbb2 f2f3 	udiv	r2, r2, r3
  400d96:	08d3      	lsrs	r3, r2, #3
  400d98:	1e5c      	subs	r4, r3, #1
  400d9a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d9e:	428c      	cmp	r4, r1
  400da0:	d8f2      	bhi.n	400d88 <usart_set_async_baudrate+0x2e>
  400da2:	0412      	lsls	r2, r2, #16
  400da4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400da8:	431a      	orrs	r2, r3
  400daa:	6202      	str	r2, [r0, #32]
  400dac:	2000      	movs	r0, #0
  400dae:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db2:	4770      	bx	lr

00400db4 <usart_reset>:
  400db4:	4b08      	ldr	r3, [pc, #32]	; (400dd8 <usart_reset+0x24>)
  400db6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  400dba:	2300      	movs	r3, #0
  400dbc:	6043      	str	r3, [r0, #4]
  400dbe:	6243      	str	r3, [r0, #36]	; 0x24
  400dc0:	6283      	str	r3, [r0, #40]	; 0x28
  400dc2:	2388      	movs	r3, #136	; 0x88
  400dc4:	6003      	str	r3, [r0, #0]
  400dc6:	2324      	movs	r3, #36	; 0x24
  400dc8:	6003      	str	r3, [r0, #0]
  400dca:	f44f 7380 	mov.w	r3, #256	; 0x100
  400dce:	6003      	str	r3, [r0, #0]
  400dd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400dd4:	6003      	str	r3, [r0, #0]
  400dd6:	4770      	bx	lr
  400dd8:	55534100 	.word	0x55534100

00400ddc <usart_init_rs232>:
  400ddc:	b570      	push	{r4, r5, r6, lr}
  400dde:	4605      	mov	r5, r0
  400de0:	460c      	mov	r4, r1
  400de2:	4616      	mov	r6, r2
  400de4:	4b0f      	ldr	r3, [pc, #60]	; (400e24 <usart_init_rs232+0x48>)
  400de6:	4798      	blx	r3
  400de8:	2200      	movs	r2, #0
  400dea:	4b0f      	ldr	r3, [pc, #60]	; (400e28 <usart_init_rs232+0x4c>)
  400dec:	601a      	str	r2, [r3, #0]
  400dee:	b1a4      	cbz	r4, 400e1a <usart_init_rs232+0x3e>
  400df0:	4632      	mov	r2, r6
  400df2:	6821      	ldr	r1, [r4, #0]
  400df4:	4628      	mov	r0, r5
  400df6:	4b0d      	ldr	r3, [pc, #52]	; (400e2c <usart_init_rs232+0x50>)
  400df8:	4798      	blx	r3
  400dfa:	4602      	mov	r2, r0
  400dfc:	b978      	cbnz	r0, 400e1e <usart_init_rs232+0x42>
  400dfe:	6863      	ldr	r3, [r4, #4]
  400e00:	68a1      	ldr	r1, [r4, #8]
  400e02:	430b      	orrs	r3, r1
  400e04:	6921      	ldr	r1, [r4, #16]
  400e06:	430b      	orrs	r3, r1
  400e08:	68e1      	ldr	r1, [r4, #12]
  400e0a:	430b      	orrs	r3, r1
  400e0c:	4906      	ldr	r1, [pc, #24]	; (400e28 <usart_init_rs232+0x4c>)
  400e0e:	600b      	str	r3, [r1, #0]
  400e10:	6869      	ldr	r1, [r5, #4]
  400e12:	430b      	orrs	r3, r1
  400e14:	606b      	str	r3, [r5, #4]
  400e16:	4610      	mov	r0, r2
  400e18:	bd70      	pop	{r4, r5, r6, pc}
  400e1a:	2201      	movs	r2, #1
  400e1c:	e7fb      	b.n	400e16 <usart_init_rs232+0x3a>
  400e1e:	2201      	movs	r2, #1
  400e20:	e7f9      	b.n	400e16 <usart_init_rs232+0x3a>
  400e22:	bf00      	nop
  400e24:	00400db5 	.word	0x00400db5
  400e28:	20400c5c 	.word	0x20400c5c
  400e2c:	00400d5b 	.word	0x00400d5b

00400e30 <usart_enable_tx>:
  400e30:	2340      	movs	r3, #64	; 0x40
  400e32:	6003      	str	r3, [r0, #0]
  400e34:	4770      	bx	lr

00400e36 <usart_enable_rx>:
  400e36:	2310      	movs	r3, #16
  400e38:	6003      	str	r3, [r0, #0]
  400e3a:	4770      	bx	lr

00400e3c <usart_write>:
  400e3c:	6943      	ldr	r3, [r0, #20]
  400e3e:	f013 0f02 	tst.w	r3, #2
  400e42:	d004      	beq.n	400e4e <usart_write+0x12>
  400e44:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400e48:	61c1      	str	r1, [r0, #28]
  400e4a:	2000      	movs	r0, #0
  400e4c:	4770      	bx	lr
  400e4e:	2001      	movs	r0, #1
  400e50:	4770      	bx	lr

00400e52 <usart_read>:
  400e52:	6943      	ldr	r3, [r0, #20]
  400e54:	f013 0f01 	tst.w	r3, #1
  400e58:	d005      	beq.n	400e66 <usart_read+0x14>
  400e5a:	6983      	ldr	r3, [r0, #24]
  400e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400e60:	600b      	str	r3, [r1, #0]
  400e62:	2000      	movs	r0, #0
  400e64:	4770      	bx	lr
  400e66:	2001      	movs	r0, #1
  400e68:	4770      	bx	lr

00400e6a <Dummy_Handler>:
  400e6a:	e7fe      	b.n	400e6a <Dummy_Handler>

00400e6c <Reset_Handler>:
  400e6c:	b500      	push	{lr}
  400e6e:	b083      	sub	sp, #12
  400e70:	4b25      	ldr	r3, [pc, #148]	; (400f08 <Reset_Handler+0x9c>)
  400e72:	4a26      	ldr	r2, [pc, #152]	; (400f0c <Reset_Handler+0xa0>)
  400e74:	429a      	cmp	r2, r3
  400e76:	d010      	beq.n	400e9a <Reset_Handler+0x2e>
  400e78:	4b25      	ldr	r3, [pc, #148]	; (400f10 <Reset_Handler+0xa4>)
  400e7a:	4a23      	ldr	r2, [pc, #140]	; (400f08 <Reset_Handler+0x9c>)
  400e7c:	429a      	cmp	r2, r3
  400e7e:	d20c      	bcs.n	400e9a <Reset_Handler+0x2e>
  400e80:	3b01      	subs	r3, #1
  400e82:	1a9b      	subs	r3, r3, r2
  400e84:	f023 0303 	bic.w	r3, r3, #3
  400e88:	3304      	adds	r3, #4
  400e8a:	4413      	add	r3, r2
  400e8c:	491f      	ldr	r1, [pc, #124]	; (400f0c <Reset_Handler+0xa0>)
  400e8e:	f851 0b04 	ldr.w	r0, [r1], #4
  400e92:	f842 0b04 	str.w	r0, [r2], #4
  400e96:	429a      	cmp	r2, r3
  400e98:	d1f9      	bne.n	400e8e <Reset_Handler+0x22>
  400e9a:	4b1e      	ldr	r3, [pc, #120]	; (400f14 <Reset_Handler+0xa8>)
  400e9c:	4a1e      	ldr	r2, [pc, #120]	; (400f18 <Reset_Handler+0xac>)
  400e9e:	429a      	cmp	r2, r3
  400ea0:	d20a      	bcs.n	400eb8 <Reset_Handler+0x4c>
  400ea2:	3b01      	subs	r3, #1
  400ea4:	1a9b      	subs	r3, r3, r2
  400ea6:	f023 0303 	bic.w	r3, r3, #3
  400eaa:	3304      	adds	r3, #4
  400eac:	4413      	add	r3, r2
  400eae:	2100      	movs	r1, #0
  400eb0:	f842 1b04 	str.w	r1, [r2], #4
  400eb4:	4293      	cmp	r3, r2
  400eb6:	d1fb      	bne.n	400eb0 <Reset_Handler+0x44>
  400eb8:	4a18      	ldr	r2, [pc, #96]	; (400f1c <Reset_Handler+0xb0>)
  400eba:	4b19      	ldr	r3, [pc, #100]	; (400f20 <Reset_Handler+0xb4>)
  400ebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ec0:	6093      	str	r3, [r2, #8]
  400ec2:	f3ef 8310 	mrs	r3, PRIMASK
  400ec6:	fab3 f383 	clz	r3, r3
  400eca:	095b      	lsrs	r3, r3, #5
  400ecc:	9301      	str	r3, [sp, #4]
  400ece:	b672      	cpsid	i
  400ed0:	f3bf 8f5f 	dmb	sy
  400ed4:	2200      	movs	r2, #0
  400ed6:	4b13      	ldr	r3, [pc, #76]	; (400f24 <Reset_Handler+0xb8>)
  400ed8:	701a      	strb	r2, [r3, #0]
  400eda:	9901      	ldr	r1, [sp, #4]
  400edc:	4a12      	ldr	r2, [pc, #72]	; (400f28 <Reset_Handler+0xbc>)
  400ede:	6813      	ldr	r3, [r2, #0]
  400ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ee4:	6013      	str	r3, [r2, #0]
  400ee6:	f3bf 8f4f 	dsb	sy
  400eea:	f3bf 8f6f 	isb	sy
  400eee:	b129      	cbz	r1, 400efc <Reset_Handler+0x90>
  400ef0:	2201      	movs	r2, #1
  400ef2:	4b0c      	ldr	r3, [pc, #48]	; (400f24 <Reset_Handler+0xb8>)
  400ef4:	701a      	strb	r2, [r3, #0]
  400ef6:	f3bf 8f5f 	dmb	sy
  400efa:	b662      	cpsie	i
  400efc:	4b0b      	ldr	r3, [pc, #44]	; (400f2c <Reset_Handler+0xc0>)
  400efe:	4798      	blx	r3
  400f00:	4b0b      	ldr	r3, [pc, #44]	; (400f30 <Reset_Handler+0xc4>)
  400f02:	4798      	blx	r3
  400f04:	e7fe      	b.n	400f04 <Reset_Handler+0x98>
  400f06:	bf00      	nop
  400f08:	20400000 	.word	0x20400000
  400f0c:	0040900c 	.word	0x0040900c
  400f10:	204009c8 	.word	0x204009c8
  400f14:	20400e5c 	.word	0x20400e5c
  400f18:	204009c8 	.word	0x204009c8
  400f1c:	e000ed00 	.word	0xe000ed00
  400f20:	00400000 	.word	0x00400000
  400f24:	2040000a 	.word	0x2040000a
  400f28:	e000ed88 	.word	0xe000ed88
  400f2c:	00403425 	.word	0x00403425
  400f30:	00403235 	.word	0x00403235

00400f34 <SystemCoreClockUpdate>:
  400f34:	4b3b      	ldr	r3, [pc, #236]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f38:	f003 0303 	and.w	r3, r3, #3
  400f3c:	2b01      	cmp	r3, #1
  400f3e:	d01d      	beq.n	400f7c <SystemCoreClockUpdate+0x48>
  400f40:	b183      	cbz	r3, 400f64 <SystemCoreClockUpdate+0x30>
  400f42:	2b02      	cmp	r3, #2
  400f44:	d036      	beq.n	400fb4 <SystemCoreClockUpdate+0x80>
  400f46:	4b37      	ldr	r3, [pc, #220]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f4e:	2b70      	cmp	r3, #112	; 0x70
  400f50:	d05f      	beq.n	401012 <SystemCoreClockUpdate+0xde>
  400f52:	4b34      	ldr	r3, [pc, #208]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400f56:	4934      	ldr	r1, [pc, #208]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400f58:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400f5c:	680b      	ldr	r3, [r1, #0]
  400f5e:	40d3      	lsrs	r3, r2
  400f60:	600b      	str	r3, [r1, #0]
  400f62:	4770      	bx	lr
  400f64:	4b31      	ldr	r3, [pc, #196]	; (40102c <SystemCoreClockUpdate+0xf8>)
  400f66:	695b      	ldr	r3, [r3, #20]
  400f68:	f013 0f80 	tst.w	r3, #128	; 0x80
  400f6c:	bf14      	ite	ne
  400f6e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  400f72:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400f76:	4b2c      	ldr	r3, [pc, #176]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400f78:	601a      	str	r2, [r3, #0]
  400f7a:	e7e4      	b.n	400f46 <SystemCoreClockUpdate+0x12>
  400f7c:	4b29      	ldr	r3, [pc, #164]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400f7e:	6a1b      	ldr	r3, [r3, #32]
  400f80:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f84:	d003      	beq.n	400f8e <SystemCoreClockUpdate+0x5a>
  400f86:	4a2a      	ldr	r2, [pc, #168]	; (401030 <SystemCoreClockUpdate+0xfc>)
  400f88:	4b27      	ldr	r3, [pc, #156]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400f8a:	601a      	str	r2, [r3, #0]
  400f8c:	e7db      	b.n	400f46 <SystemCoreClockUpdate+0x12>
  400f8e:	4a29      	ldr	r2, [pc, #164]	; (401034 <SystemCoreClockUpdate+0x100>)
  400f90:	4b25      	ldr	r3, [pc, #148]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400f92:	601a      	str	r2, [r3, #0]
  400f94:	4b23      	ldr	r3, [pc, #140]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400f96:	6a1b      	ldr	r3, [r3, #32]
  400f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f9c:	2b10      	cmp	r3, #16
  400f9e:	d005      	beq.n	400fac <SystemCoreClockUpdate+0x78>
  400fa0:	2b20      	cmp	r3, #32
  400fa2:	d1d0      	bne.n	400f46 <SystemCoreClockUpdate+0x12>
  400fa4:	4a22      	ldr	r2, [pc, #136]	; (401030 <SystemCoreClockUpdate+0xfc>)
  400fa6:	4b20      	ldr	r3, [pc, #128]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400fa8:	601a      	str	r2, [r3, #0]
  400faa:	e7cc      	b.n	400f46 <SystemCoreClockUpdate+0x12>
  400fac:	4a22      	ldr	r2, [pc, #136]	; (401038 <SystemCoreClockUpdate+0x104>)
  400fae:	4b1e      	ldr	r3, [pc, #120]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400fb0:	601a      	str	r2, [r3, #0]
  400fb2:	e7c8      	b.n	400f46 <SystemCoreClockUpdate+0x12>
  400fb4:	4b1b      	ldr	r3, [pc, #108]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400fb6:	6a1b      	ldr	r3, [r3, #32]
  400fb8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400fbc:	d016      	beq.n	400fec <SystemCoreClockUpdate+0xb8>
  400fbe:	4a1c      	ldr	r2, [pc, #112]	; (401030 <SystemCoreClockUpdate+0xfc>)
  400fc0:	4b19      	ldr	r3, [pc, #100]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400fc2:	601a      	str	r2, [r3, #0]
  400fc4:	4b17      	ldr	r3, [pc, #92]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fc8:	f003 0303 	and.w	r3, r3, #3
  400fcc:	2b02      	cmp	r3, #2
  400fce:	d1ba      	bne.n	400f46 <SystemCoreClockUpdate+0x12>
  400fd0:	4a14      	ldr	r2, [pc, #80]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400fd2:	6a91      	ldr	r1, [r2, #40]	; 0x28
  400fd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400fd6:	4814      	ldr	r0, [pc, #80]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400fd8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400fdc:	6803      	ldr	r3, [r0, #0]
  400fde:	fb01 3303 	mla	r3, r1, r3, r3
  400fe2:	b2d2      	uxtb	r2, r2
  400fe4:	fbb3 f3f2 	udiv	r3, r3, r2
  400fe8:	6003      	str	r3, [r0, #0]
  400fea:	e7ac      	b.n	400f46 <SystemCoreClockUpdate+0x12>
  400fec:	4a11      	ldr	r2, [pc, #68]	; (401034 <SystemCoreClockUpdate+0x100>)
  400fee:	4b0e      	ldr	r3, [pc, #56]	; (401028 <SystemCoreClockUpdate+0xf4>)
  400ff0:	601a      	str	r2, [r3, #0]
  400ff2:	4b0c      	ldr	r3, [pc, #48]	; (401024 <SystemCoreClockUpdate+0xf0>)
  400ff4:	6a1b      	ldr	r3, [r3, #32]
  400ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ffa:	2b10      	cmp	r3, #16
  400ffc:	d005      	beq.n	40100a <SystemCoreClockUpdate+0xd6>
  400ffe:	2b20      	cmp	r3, #32
  401000:	d1e0      	bne.n	400fc4 <SystemCoreClockUpdate+0x90>
  401002:	4a0b      	ldr	r2, [pc, #44]	; (401030 <SystemCoreClockUpdate+0xfc>)
  401004:	4b08      	ldr	r3, [pc, #32]	; (401028 <SystemCoreClockUpdate+0xf4>)
  401006:	601a      	str	r2, [r3, #0]
  401008:	e7dc      	b.n	400fc4 <SystemCoreClockUpdate+0x90>
  40100a:	4a0b      	ldr	r2, [pc, #44]	; (401038 <SystemCoreClockUpdate+0x104>)
  40100c:	4b06      	ldr	r3, [pc, #24]	; (401028 <SystemCoreClockUpdate+0xf4>)
  40100e:	601a      	str	r2, [r3, #0]
  401010:	e7d8      	b.n	400fc4 <SystemCoreClockUpdate+0x90>
  401012:	4a05      	ldr	r2, [pc, #20]	; (401028 <SystemCoreClockUpdate+0xf4>)
  401014:	6813      	ldr	r3, [r2, #0]
  401016:	4909      	ldr	r1, [pc, #36]	; (40103c <SystemCoreClockUpdate+0x108>)
  401018:	fba1 1303 	umull	r1, r3, r1, r3
  40101c:	085b      	lsrs	r3, r3, #1
  40101e:	6013      	str	r3, [r2, #0]
  401020:	4770      	bx	lr
  401022:	bf00      	nop
  401024:	400e0600 	.word	0x400e0600
  401028:	2040000c 	.word	0x2040000c
  40102c:	400e1810 	.word	0x400e1810
  401030:	00b71b00 	.word	0x00b71b00
  401034:	003d0900 	.word	0x003d0900
  401038:	007a1200 	.word	0x007a1200
  40103c:	aaaaaaab 	.word	0xaaaaaaab

00401040 <system_init_flash>:
  401040:	4b16      	ldr	r3, [pc, #88]	; (40109c <system_init_flash+0x5c>)
  401042:	4298      	cmp	r0, r3
  401044:	d913      	bls.n	40106e <system_init_flash+0x2e>
  401046:	4b16      	ldr	r3, [pc, #88]	; (4010a0 <system_init_flash+0x60>)
  401048:	4298      	cmp	r0, r3
  40104a:	d915      	bls.n	401078 <system_init_flash+0x38>
  40104c:	4b15      	ldr	r3, [pc, #84]	; (4010a4 <system_init_flash+0x64>)
  40104e:	4298      	cmp	r0, r3
  401050:	d916      	bls.n	401080 <system_init_flash+0x40>
  401052:	4b15      	ldr	r3, [pc, #84]	; (4010a8 <system_init_flash+0x68>)
  401054:	4298      	cmp	r0, r3
  401056:	d917      	bls.n	401088 <system_init_flash+0x48>
  401058:	4b14      	ldr	r3, [pc, #80]	; (4010ac <system_init_flash+0x6c>)
  40105a:	4298      	cmp	r0, r3
  40105c:	d918      	bls.n	401090 <system_init_flash+0x50>
  40105e:	4b14      	ldr	r3, [pc, #80]	; (4010b0 <system_init_flash+0x70>)
  401060:	4298      	cmp	r0, r3
  401062:	bf94      	ite	ls
  401064:	4a13      	ldrls	r2, [pc, #76]	; (4010b4 <system_init_flash+0x74>)
  401066:	4a14      	ldrhi	r2, [pc, #80]	; (4010b8 <system_init_flash+0x78>)
  401068:	4b14      	ldr	r3, [pc, #80]	; (4010bc <system_init_flash+0x7c>)
  40106a:	601a      	str	r2, [r3, #0]
  40106c:	4770      	bx	lr
  40106e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401072:	4b12      	ldr	r3, [pc, #72]	; (4010bc <system_init_flash+0x7c>)
  401074:	601a      	str	r2, [r3, #0]
  401076:	4770      	bx	lr
  401078:	4a11      	ldr	r2, [pc, #68]	; (4010c0 <system_init_flash+0x80>)
  40107a:	4b10      	ldr	r3, [pc, #64]	; (4010bc <system_init_flash+0x7c>)
  40107c:	601a      	str	r2, [r3, #0]
  40107e:	4770      	bx	lr
  401080:	4a10      	ldr	r2, [pc, #64]	; (4010c4 <system_init_flash+0x84>)
  401082:	4b0e      	ldr	r3, [pc, #56]	; (4010bc <system_init_flash+0x7c>)
  401084:	601a      	str	r2, [r3, #0]
  401086:	4770      	bx	lr
  401088:	4a0f      	ldr	r2, [pc, #60]	; (4010c8 <system_init_flash+0x88>)
  40108a:	4b0c      	ldr	r3, [pc, #48]	; (4010bc <system_init_flash+0x7c>)
  40108c:	601a      	str	r2, [r3, #0]
  40108e:	4770      	bx	lr
  401090:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401094:	4b09      	ldr	r3, [pc, #36]	; (4010bc <system_init_flash+0x7c>)
  401096:	601a      	str	r2, [r3, #0]
  401098:	4770      	bx	lr
  40109a:	bf00      	nop
  40109c:	015ef3bf 	.word	0x015ef3bf
  4010a0:	02bde77f 	.word	0x02bde77f
  4010a4:	041cdb3f 	.word	0x041cdb3f
  4010a8:	057bceff 	.word	0x057bceff
  4010ac:	06dac2bf 	.word	0x06dac2bf
  4010b0:	0839b67f 	.word	0x0839b67f
  4010b4:	04000500 	.word	0x04000500
  4010b8:	04000600 	.word	0x04000600
  4010bc:	400e0c00 	.word	0x400e0c00
  4010c0:	04000100 	.word	0x04000100
  4010c4:	04000200 	.word	0x04000200
  4010c8:	04000300 	.word	0x04000300

004010cc <_sbrk>:
  4010cc:	4b0a      	ldr	r3, [pc, #40]	; (4010f8 <_sbrk+0x2c>)
  4010ce:	681b      	ldr	r3, [r3, #0]
  4010d0:	b153      	cbz	r3, 4010e8 <_sbrk+0x1c>
  4010d2:	4b09      	ldr	r3, [pc, #36]	; (4010f8 <_sbrk+0x2c>)
  4010d4:	681b      	ldr	r3, [r3, #0]
  4010d6:	181a      	adds	r2, r3, r0
  4010d8:	4908      	ldr	r1, [pc, #32]	; (4010fc <_sbrk+0x30>)
  4010da:	4291      	cmp	r1, r2
  4010dc:	db08      	blt.n	4010f0 <_sbrk+0x24>
  4010de:	4610      	mov	r0, r2
  4010e0:	4a05      	ldr	r2, [pc, #20]	; (4010f8 <_sbrk+0x2c>)
  4010e2:	6010      	str	r0, [r2, #0]
  4010e4:	4618      	mov	r0, r3
  4010e6:	4770      	bx	lr
  4010e8:	4a05      	ldr	r2, [pc, #20]	; (401100 <_sbrk+0x34>)
  4010ea:	4b03      	ldr	r3, [pc, #12]	; (4010f8 <_sbrk+0x2c>)
  4010ec:	601a      	str	r2, [r3, #0]
  4010ee:	e7f0      	b.n	4010d2 <_sbrk+0x6>
  4010f0:	f04f 30ff 	mov.w	r0, #4294967295
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	20400c60 	.word	0x20400c60
  4010fc:	2045fffc 	.word	0x2045fffc
  401100:	20403060 	.word	0x20403060

00401104 <_close>:
  401104:	f04f 30ff 	mov.w	r0, #4294967295
  401108:	4770      	bx	lr

0040110a <_fstat>:
  40110a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40110e:	604b      	str	r3, [r1, #4]
  401110:	2000      	movs	r0, #0
  401112:	4770      	bx	lr

00401114 <_isatty>:
  401114:	2001      	movs	r0, #1
  401116:	4770      	bx	lr

00401118 <_lseek>:
  401118:	2000      	movs	r0, #0
  40111a:	4770      	bx	lr

0040111c <vListInitialise>:
  40111c:	f100 0308 	add.w	r3, r0, #8
  401120:	6043      	str	r3, [r0, #4]
  401122:	f04f 32ff 	mov.w	r2, #4294967295
  401126:	6082      	str	r2, [r0, #8]
  401128:	60c3      	str	r3, [r0, #12]
  40112a:	6103      	str	r3, [r0, #16]
  40112c:	2300      	movs	r3, #0
  40112e:	6003      	str	r3, [r0, #0]
  401130:	4770      	bx	lr

00401132 <vListInitialiseItem>:
  401132:	2300      	movs	r3, #0
  401134:	6103      	str	r3, [r0, #16]
  401136:	4770      	bx	lr

00401138 <vListInsertEnd>:
  401138:	6843      	ldr	r3, [r0, #4]
  40113a:	604b      	str	r3, [r1, #4]
  40113c:	689a      	ldr	r2, [r3, #8]
  40113e:	608a      	str	r2, [r1, #8]
  401140:	689a      	ldr	r2, [r3, #8]
  401142:	6051      	str	r1, [r2, #4]
  401144:	6099      	str	r1, [r3, #8]
  401146:	6108      	str	r0, [r1, #16]
  401148:	6803      	ldr	r3, [r0, #0]
  40114a:	3301      	adds	r3, #1
  40114c:	6003      	str	r3, [r0, #0]
  40114e:	4770      	bx	lr

00401150 <vListInsert>:
  401150:	b430      	push	{r4, r5}
  401152:	680d      	ldr	r5, [r1, #0]
  401154:	f1b5 3fff 	cmp.w	r5, #4294967295
  401158:	d002      	beq.n	401160 <vListInsert+0x10>
  40115a:	f100 0208 	add.w	r2, r0, #8
  40115e:	e002      	b.n	401166 <vListInsert+0x16>
  401160:	6902      	ldr	r2, [r0, #16]
  401162:	e004      	b.n	40116e <vListInsert+0x1e>
  401164:	461a      	mov	r2, r3
  401166:	6853      	ldr	r3, [r2, #4]
  401168:	681c      	ldr	r4, [r3, #0]
  40116a:	42a5      	cmp	r5, r4
  40116c:	d2fa      	bcs.n	401164 <vListInsert+0x14>
  40116e:	6853      	ldr	r3, [r2, #4]
  401170:	604b      	str	r3, [r1, #4]
  401172:	6099      	str	r1, [r3, #8]
  401174:	608a      	str	r2, [r1, #8]
  401176:	6051      	str	r1, [r2, #4]
  401178:	6108      	str	r0, [r1, #16]
  40117a:	6803      	ldr	r3, [r0, #0]
  40117c:	3301      	adds	r3, #1
  40117e:	6003      	str	r3, [r0, #0]
  401180:	bc30      	pop	{r4, r5}
  401182:	4770      	bx	lr

00401184 <uxListRemove>:
  401184:	6903      	ldr	r3, [r0, #16]
  401186:	6842      	ldr	r2, [r0, #4]
  401188:	6881      	ldr	r1, [r0, #8]
  40118a:	6091      	str	r1, [r2, #8]
  40118c:	6882      	ldr	r2, [r0, #8]
  40118e:	6841      	ldr	r1, [r0, #4]
  401190:	6051      	str	r1, [r2, #4]
  401192:	685a      	ldr	r2, [r3, #4]
  401194:	4290      	cmp	r0, r2
  401196:	d005      	beq.n	4011a4 <uxListRemove+0x20>
  401198:	2200      	movs	r2, #0
  40119a:	6102      	str	r2, [r0, #16]
  40119c:	6818      	ldr	r0, [r3, #0]
  40119e:	3801      	subs	r0, #1
  4011a0:	6018      	str	r0, [r3, #0]
  4011a2:	4770      	bx	lr
  4011a4:	6882      	ldr	r2, [r0, #8]
  4011a6:	605a      	str	r2, [r3, #4]
  4011a8:	e7f6      	b.n	401198 <uxListRemove+0x14>
=======
  4003d4:	204009f4 	.word	0x204009f4

004003d8 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4003d8:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4003da:	6883      	ldr	r3, [r0, #8]
  4003dc:	429a      	cmp	r2, r3
  4003de:	d003      	beq.n	4003e8 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4003e0:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4003e2:	6883      	ldr	r3, [r0, #8]
  4003e4:	4293      	cmp	r3, r2
  4003e6:	d1fb      	bne.n	4003e0 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	4770      	bx	lr

004003ec <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4003ec:	68c0      	ldr	r0, [r0, #12]
}
  4003ee:	4770      	bx	lr

004003f0 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4606      	mov	r6, r0
  4003f4:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4003f6:	6804      	ldr	r4, [r0, #0]
  4003f8:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4003fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400400:	4809      	ldr	r0, [pc, #36]	; (400428 <rtt_write_alarm_time+0x38>)
  400402:	4b0a      	ldr	r3, [pc, #40]	; (40042c <rtt_write_alarm_time+0x3c>)
  400404:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400406:	b92d      	cbnz	r5, 400414 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400408:	f04f 33ff 	mov.w	r3, #4294967295
  40040c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40040e:	b924      	cbnz	r4, 40041a <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400410:	2000      	movs	r0, #0
  400412:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400414:	3d01      	subs	r5, #1
  400416:	6075      	str	r5, [r6, #4]
  400418:	e7f9      	b.n	40040e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40041a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40041e:	4802      	ldr	r0, [pc, #8]	; (400428 <rtt_write_alarm_time+0x38>)
  400420:	4b03      	ldr	r3, [pc, #12]	; (400430 <rtt_write_alarm_time+0x40>)
  400422:	4798      	blx	r3
  400424:	e7f4      	b.n	400410 <rtt_write_alarm_time+0x20>
  400426:	bf00      	nop
  400428:	400e1830 	.word	0x400e1830
  40042c:	004003c5 	.word	0x004003c5
  400430:	004003b1 	.word	0x004003b1

00400434 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400434:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <spi_enable_clock+0x20>)
  400438:	4298      	cmp	r0, r3
  40043a:	d003      	beq.n	400444 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40043c:	4b06      	ldr	r3, [pc, #24]	; (400458 <spi_enable_clock+0x24>)
  40043e:	4298      	cmp	r0, r3
  400440:	d004      	beq.n	40044c <spi_enable_clock+0x18>
  400442:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400444:	2015      	movs	r0, #21
  400446:	4b05      	ldr	r3, [pc, #20]	; (40045c <spi_enable_clock+0x28>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	202a      	movs	r0, #42	; 0x2a
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <spi_enable_clock+0x28>)
  400450:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400452:	e7f6      	b.n	400442 <spi_enable_clock+0xe>
  400454:	40008000 	.word	0x40008000
  400458:	40058000 	.word	0x40058000
  40045c:	00401261 	.word	0x00401261

00400460 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400460:	6843      	ldr	r3, [r0, #4]
  400462:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400466:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400468:	6843      	ldr	r3, [r0, #4]
  40046a:	0409      	lsls	r1, r1, #16
  40046c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400470:	4319      	orrs	r1, r3
  400472:	6041      	str	r1, [r0, #4]
  400474:	4770      	bx	lr

00400476 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400476:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400478:	f643 2499 	movw	r4, #15001	; 0x3a99
  40047c:	6905      	ldr	r5, [r0, #16]
  40047e:	f015 0f02 	tst.w	r5, #2
  400482:	d103      	bne.n	40048c <spi_write+0x16>
		if (!timeout--) {
  400484:	3c01      	subs	r4, #1
  400486:	d1f9      	bne.n	40047c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400488:	2001      	movs	r0, #1
  40048a:	e00c      	b.n	4004a6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40048c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40048e:	f014 0f02 	tst.w	r4, #2
  400492:	d006      	beq.n	4004a2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400494:	0412      	lsls	r2, r2, #16
  400496:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40049a:	4311      	orrs	r1, r2
		if (uc_last) {
  40049c:	b10b      	cbz	r3, 4004a2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40049e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4004a2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	bc30      	pop	{r4, r5}
  4004a8:	4770      	bx	lr

004004aa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4004aa:	b932      	cbnz	r2, 4004ba <spi_set_clock_polarity+0x10>
  4004ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b2:	f023 0301 	bic.w	r3, r3, #1
  4004b6:	6303      	str	r3, [r0, #48]	; 0x30
  4004b8:	4770      	bx	lr
  4004ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4004be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004c0:	f043 0301 	orr.w	r3, r3, #1
  4004c4:	6303      	str	r3, [r0, #48]	; 0x30
  4004c6:	4770      	bx	lr

004004c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4004c8:	b932      	cbnz	r2, 4004d8 <spi_set_clock_phase+0x10>
  4004ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4004ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004d0:	f023 0302 	bic.w	r3, r3, #2
  4004d4:	6303      	str	r3, [r0, #48]	; 0x30
  4004d6:	4770      	bx	lr
  4004d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004de:	f043 0302 	orr.w	r3, r3, #2
  4004e2:	6303      	str	r3, [r0, #48]	; 0x30
  4004e4:	4770      	bx	lr

004004e6 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4004e6:	2a04      	cmp	r2, #4
  4004e8:	d003      	beq.n	4004f2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4004ea:	b16a      	cbz	r2, 400508 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4004ec:	2a08      	cmp	r2, #8
  4004ee:	d016      	beq.n	40051e <spi_configure_cs_behavior+0x38>
  4004f0:	4770      	bx	lr
  4004f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004f8:	f023 0308 	bic.w	r3, r3, #8
  4004fc:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400500:	f043 0304 	orr.w	r3, r3, #4
  400504:	6303      	str	r3, [r0, #48]	; 0x30
  400506:	4770      	bx	lr
  400508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40050c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40050e:	f023 0308 	bic.w	r3, r3, #8
  400512:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400514:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400516:	f023 0304 	bic.w	r3, r3, #4
  40051a:	6303      	str	r3, [r0, #48]	; 0x30
  40051c:	4770      	bx	lr
  40051e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400522:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400524:	f043 0308 	orr.w	r3, r3, #8
  400528:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40052a:	e7e1      	b.n	4004f0 <spi_configure_cs_behavior+0xa>

0040052c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40052c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400530:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400536:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400538:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40053a:	431a      	orrs	r2, r3
  40053c:	630a      	str	r2, [r1, #48]	; 0x30
  40053e:	4770      	bx	lr

00400540 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400540:	1e43      	subs	r3, r0, #1
  400542:	4419      	add	r1, r3
  400544:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400548:	1e43      	subs	r3, r0, #1
  40054a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40054c:	bf94      	ite	ls
  40054e:	b200      	sxthls	r0, r0
		return -1;
  400550:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400554:	4770      	bx	lr

00400556 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400556:	b17a      	cbz	r2, 400578 <spi_set_baudrate_div+0x22>
{
  400558:	b410      	push	{r4}
  40055a:	4614      	mov	r4, r2
  40055c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400560:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400566:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400568:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40056a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40056e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400570:	2000      	movs	r0, #0
}
  400572:	f85d 4b04 	ldr.w	r4, [sp], #4
  400576:	4770      	bx	lr
        return -1;
  400578:	f04f 30ff 	mov.w	r0, #4294967295
  40057c:	4770      	bx	lr

0040057e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40057e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400580:	0189      	lsls	r1, r1, #6
  400582:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400584:	2402      	movs	r4, #2
  400586:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400588:	f04f 31ff 	mov.w	r1, #4294967295
  40058c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40058e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400590:	605a      	str	r2, [r3, #4]
}
  400592:	f85d 4b04 	ldr.w	r4, [sp], #4
  400596:	4770      	bx	lr

00400598 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400598:	0189      	lsls	r1, r1, #6
  40059a:	2305      	movs	r3, #5
  40059c:	5043      	str	r3, [r0, r1]
  40059e:	4770      	bx	lr

004005a0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4005a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4005a4:	61ca      	str	r2, [r1, #28]
  4005a6:	4770      	bx	lr

004005a8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4005ac:	624a      	str	r2, [r1, #36]	; 0x24
  4005ae:	4770      	bx	lr

004005b0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4005b4:	6a08      	ldr	r0, [r1, #32]
}
  4005b6:	4770      	bx	lr

004005b8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4005b8:	b4f0      	push	{r4, r5, r6, r7}
  4005ba:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005bc:	2402      	movs	r4, #2
  4005be:	9401      	str	r4, [sp, #4]
  4005c0:	2408      	movs	r4, #8
  4005c2:	9402      	str	r4, [sp, #8]
  4005c4:	2420      	movs	r4, #32
  4005c6:	9403      	str	r4, [sp, #12]
  4005c8:	2480      	movs	r4, #128	; 0x80
  4005ca:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4005cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4005ce:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005d0:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4005d2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4005d6:	d814      	bhi.n	400602 <tc_find_mck_divisor+0x4a>
  4005d8:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4005da:	42a0      	cmp	r0, r4
  4005dc:	d217      	bcs.n	40060e <tc_find_mck_divisor+0x56>
  4005de:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4005e0:	af01      	add	r7, sp, #4
  4005e2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4005e6:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4005ea:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4005ec:	4284      	cmp	r4, r0
  4005ee:	d30a      	bcc.n	400606 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4005f0:	4286      	cmp	r6, r0
  4005f2:	d90d      	bls.n	400610 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4005f4:	3501      	adds	r5, #1
	for (ul_index = 0;
  4005f6:	2d05      	cmp	r5, #5
  4005f8:	d1f3      	bne.n	4005e2 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005fa:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005fc:	b006      	add	sp, #24
  4005fe:	bcf0      	pop	{r4, r5, r6, r7}
  400600:	4770      	bx	lr
			return 0;
  400602:	2000      	movs	r0, #0
  400604:	e7fa      	b.n	4005fc <tc_find_mck_divisor+0x44>
  400606:	2000      	movs	r0, #0
  400608:	e7f8      	b.n	4005fc <tc_find_mck_divisor+0x44>
	return 1;
  40060a:	2001      	movs	r0, #1
  40060c:	e7f6      	b.n	4005fc <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40060e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400610:	b12a      	cbz	r2, 40061e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400612:	a906      	add	r1, sp, #24
  400614:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400618:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40061c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40061e:	2b00      	cmp	r3, #0
  400620:	d0f3      	beq.n	40060a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400622:	601d      	str	r5, [r3, #0]
	return 1;
  400624:	2001      	movs	r0, #1
  400626:	e7e9      	b.n	4005fc <tc_find_mck_divisor+0x44>

00400628 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400628:	4b01      	ldr	r3, [pc, #4]	; (400630 <gfx_mono_set_framebuffer+0x8>)
  40062a:	6018      	str	r0, [r3, #0]
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009f8 	.word	0x204009f8

00400634 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <gfx_mono_framebuffer_put_byte+0xc>)
  400636:	681b      	ldr	r3, [r3, #0]
  400638:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40063c:	5442      	strb	r2, [r0, r1]
  40063e:	4770      	bx	lr
  400640:	204009f8 	.word	0x204009f8

00400644 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <gfx_mono_framebuffer_get_byte+0xc>)
  400646:	681b      	ldr	r3, [r3, #0]
  400648:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40064c:	5c40      	ldrb	r0, [r0, r1]
  40064e:	4770      	bx	lr
  400650:	204009f8 	.word	0x204009f8

00400654 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400658:	1884      	adds	r4, r0, r2
  40065a:	2c80      	cmp	r4, #128	; 0x80
  40065c:	dd02      	ble.n	400664 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40065e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400662:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400664:	b322      	cbz	r2, 4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400666:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400668:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40066c:	2601      	movs	r6, #1
  40066e:	fa06 f101 	lsl.w	r1, r6, r1
  400672:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400674:	2b01      	cmp	r3, #1
  400676:	d01d      	beq.n	4006b4 <gfx_mono_generic_draw_horizontal_line+0x60>
  400678:	2b00      	cmp	r3, #0
  40067a:	d035      	beq.n	4006e8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40067c:	2b02      	cmp	r3, #2
  40067e:	d117      	bne.n	4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400680:	3801      	subs	r0, #1
  400682:	b2c7      	uxtb	r7, r0
  400684:	19d4      	adds	r4, r2, r7
  400686:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400688:	f8df a090 	ldr.w	sl, [pc, #144]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40068c:	f04f 0900 	mov.w	r9, #0
  400690:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400694:	4621      	mov	r1, r4
  400696:	4628      	mov	r0, r5
  400698:	47d0      	blx	sl
			temp ^= pixelmask;
  40069a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40069e:	464b      	mov	r3, r9
  4006a0:	b2d2      	uxtb	r2, r2
  4006a2:	4621      	mov	r1, r4
  4006a4:	4628      	mov	r0, r5
  4006a6:	47c0      	blx	r8
  4006a8:	3c01      	subs	r4, #1
  4006aa:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ac:	42bc      	cmp	r4, r7
  4006ae:	d1f1      	bne.n	400694 <gfx_mono_generic_draw_horizontal_line+0x40>
  4006b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006b4:	3801      	subs	r0, #1
  4006b6:	b2c7      	uxtb	r7, r0
  4006b8:	19d4      	adds	r4, r2, r7
  4006ba:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006bc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4006c0:	f04f 0900 	mov.w	r9, #0
  4006c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006c8:	4621      	mov	r1, r4
  4006ca:	4628      	mov	r0, r5
  4006cc:	47d0      	blx	sl
			temp |= pixelmask;
  4006ce:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006d2:	464b      	mov	r3, r9
  4006d4:	b2d2      	uxtb	r2, r2
  4006d6:	4621      	mov	r1, r4
  4006d8:	4628      	mov	r0, r5
  4006da:	47c0      	blx	r8
  4006dc:	3c01      	subs	r4, #1
  4006de:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006e0:	42bc      	cmp	r4, r7
  4006e2:	d1f1      	bne.n	4006c8 <gfx_mono_generic_draw_horizontal_line+0x74>
  4006e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006e8:	3801      	subs	r0, #1
  4006ea:	b2c7      	uxtb	r7, r0
  4006ec:	19d4      	adds	r4, r2, r7
  4006ee:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006f0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4006f4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4006f6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006fa:	4621      	mov	r1, r4
  4006fc:	4628      	mov	r0, r5
  4006fe:	47c0      	blx	r8
			temp &= ~pixelmask;
  400700:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400704:	2300      	movs	r3, #0
  400706:	b2d2      	uxtb	r2, r2
  400708:	4621      	mov	r1, r4
  40070a:	4628      	mov	r0, r5
  40070c:	47c8      	blx	r9
  40070e:	3c01      	subs	r4, #1
  400710:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400712:	42bc      	cmp	r4, r7
  400714:	d1f1      	bne.n	4006fa <gfx_mono_generic_draw_horizontal_line+0xa6>
  400716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40071a:	bf00      	nop
  40071c:	00400955 	.word	0x00400955
  400720:	00400851 	.word	0x00400851

00400724 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400728:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40072c:	b18b      	cbz	r3, 400752 <gfx_mono_generic_draw_filled_rect+0x2e>
  40072e:	461c      	mov	r4, r3
  400730:	4690      	mov	r8, r2
  400732:	4606      	mov	r6, r0
  400734:	1e4d      	subs	r5, r1, #1
  400736:	b2ed      	uxtb	r5, r5
  400738:	442c      	add	r4, r5
  40073a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40073c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400758 <gfx_mono_generic_draw_filled_rect+0x34>
  400740:	463b      	mov	r3, r7
  400742:	4642      	mov	r2, r8
  400744:	4621      	mov	r1, r4
  400746:	4630      	mov	r0, r6
  400748:	47c8      	blx	r9
  40074a:	3c01      	subs	r4, #1
  40074c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40074e:	42ac      	cmp	r4, r5
  400750:	d1f6      	bne.n	400740 <gfx_mono_generic_draw_filled_rect+0x1c>
  400752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400756:	bf00      	nop
  400758:	00400655 	.word	0x00400655

0040075c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400760:	b083      	sub	sp, #12
  400762:	4604      	mov	r4, r0
  400764:	4688      	mov	r8, r1
  400766:	4691      	mov	r9, r2
  400768:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40076a:	7a5b      	ldrb	r3, [r3, #9]
  40076c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400770:	2100      	movs	r1, #0
  400772:	9100      	str	r1, [sp, #0]
  400774:	4649      	mov	r1, r9
  400776:	4640      	mov	r0, r8
  400778:	4d21      	ldr	r5, [pc, #132]	; (400800 <gfx_mono_draw_char+0xa4>)
  40077a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  40077c:	f89b 3000 	ldrb.w	r3, [fp]
  400780:	b113      	cbz	r3, 400788 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400782:	b003      	add	sp, #12
  400784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400788:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40078c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40078e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400792:	bf18      	it	ne
  400794:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400796:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40079a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40079e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4007a0:	fb17 f70a 	smulbb	r7, r7, sl
  4007a4:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4007a8:	f8db 3004 	ldr.w	r3, [fp, #4]
  4007ac:	fa13 f787 	uxtah	r7, r3, r7
  4007b0:	e01f      	b.n	4007f2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4007b2:	0064      	lsls	r4, r4, #1
  4007b4:	b2e4      	uxtb	r4, r4
  4007b6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4007b8:	b2eb      	uxtb	r3, r5
  4007ba:	429e      	cmp	r6, r3
  4007bc:	d910      	bls.n	4007e0 <gfx_mono_draw_char+0x84>
  4007be:	b2eb      	uxtb	r3, r5
  4007c0:	eb08 0003 	add.w	r0, r8, r3
  4007c4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4007c6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4007ca:	bf08      	it	eq
  4007cc:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4007d0:	f014 0f80 	tst.w	r4, #128	; 0x80
  4007d4:	d0ed      	beq.n	4007b2 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007d6:	2201      	movs	r2, #1
  4007d8:	4649      	mov	r1, r9
  4007da:	4b0a      	ldr	r3, [pc, #40]	; (400804 <gfx_mono_draw_char+0xa8>)
  4007dc:	4798      	blx	r3
  4007de:	e7e8      	b.n	4007b2 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4007e0:	f109 0901 	add.w	r9, r9, #1
  4007e4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007e8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007ec:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007f0:	d0c7      	beq.n	400782 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007f2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007f6:	2e00      	cmp	r6, #0
  4007f8:	d0f2      	beq.n	4007e0 <gfx_mono_draw_char+0x84>
  4007fa:	2500      	movs	r5, #0
  4007fc:	462c      	mov	r4, r5
  4007fe:	e7de      	b.n	4007be <gfx_mono_draw_char+0x62>
  400800:	00400725 	.word	0x00400725
  400804:	004008f1 	.word	0x004008f1

00400808 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40080c:	4604      	mov	r4, r0
  40080e:	4690      	mov	r8, r2
  400810:	461d      	mov	r5, r3
  400812:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400814:	4f0d      	ldr	r7, [pc, #52]	; (40084c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400816:	460e      	mov	r6, r1
  400818:	e008      	b.n	40082c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40081a:	7a6a      	ldrb	r2, [r5, #9]
  40081c:	3201      	adds	r2, #1
  40081e:	4442      	add	r2, r8
  400820:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400824:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400826:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40082a:	b16b      	cbz	r3, 400848 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  40082c:	7820      	ldrb	r0, [r4, #0]
  40082e:	280a      	cmp	r0, #10
  400830:	d0f3      	beq.n	40081a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400832:	280d      	cmp	r0, #13
  400834:	d0f7      	beq.n	400826 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400836:	462b      	mov	r3, r5
  400838:	4642      	mov	r2, r8
  40083a:	4649      	mov	r1, r9
  40083c:	47b8      	blx	r7
			x += font->width;
  40083e:	7a2b      	ldrb	r3, [r5, #8]
  400840:	4499      	add	r9, r3
  400842:	fa5f f989 	uxtb.w	r9, r9
  400846:	e7ee      	b.n	400826 <gfx_mono_draw_string+0x1e>
}
  400848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40084c:	0040075d 	.word	0x0040075d

00400850 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400850:	b570      	push	{r4, r5, r6, lr}
  400852:	4604      	mov	r4, r0
  400854:	460d      	mov	r5, r1
  400856:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400858:	b91b      	cbnz	r3, 400862 <gfx_mono_ssd1306_put_byte+0x12>
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <gfx_mono_ssd1306_put_byte+0x40>)
  40085c:	4798      	blx	r3
  40085e:	42b0      	cmp	r0, r6
  400860:	d015      	beq.n	40088e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400862:	4632      	mov	r2, r6
  400864:	4629      	mov	r1, r5
  400866:	4620      	mov	r0, r4
  400868:	4b0a      	ldr	r3, [pc, #40]	; (400894 <gfx_mono_ssd1306_put_byte+0x44>)
  40086a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40086c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400870:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400874:	4c08      	ldr	r4, [pc, #32]	; (400898 <gfx_mono_ssd1306_put_byte+0x48>)
  400876:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400878:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40087c:	f040 0010 	orr.w	r0, r0, #16
  400880:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400882:	f005 000f 	and.w	r0, r5, #15
  400886:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400888:	4630      	mov	r0, r6
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <gfx_mono_ssd1306_put_byte+0x4c>)
  40088c:	4798      	blx	r3
  40088e:	bd70      	pop	{r4, r5, r6, pc}
  400890:	00400645 	.word	0x00400645
  400894:	00400635 	.word	0x00400635
  400898:	00400961 	.word	0x00400961
  40089c:	00400b81 	.word	0x00400b81

004008a0 <gfx_mono_ssd1306_init>:
{
  4008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4008a4:	480d      	ldr	r0, [pc, #52]	; (4008dc <gfx_mono_ssd1306_init+0x3c>)
  4008a6:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <gfx_mono_ssd1306_init+0x40>)
  4008a8:	4798      	blx	r3
	ssd1306_init();
  4008aa:	4b0e      	ldr	r3, [pc, #56]	; (4008e4 <gfx_mono_ssd1306_init+0x44>)
  4008ac:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4008ae:	2040      	movs	r0, #64	; 0x40
  4008b0:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <gfx_mono_ssd1306_init+0x48>)
  4008b2:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008b4:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008b6:	f04f 0801 	mov.w	r8, #1
  4008ba:	462f      	mov	r7, r5
  4008bc:	4e0b      	ldr	r6, [pc, #44]	; (4008ec <gfx_mono_ssd1306_init+0x4c>)
{
  4008be:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008c0:	4643      	mov	r3, r8
  4008c2:	463a      	mov	r2, r7
  4008c4:	b2e1      	uxtb	r1, r4
  4008c6:	4628      	mov	r0, r5
  4008c8:	47b0      	blx	r6
  4008ca:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4008cc:	2c80      	cmp	r4, #128	; 0x80
  4008ce:	d1f7      	bne.n	4008c0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008d0:	3501      	adds	r5, #1
  4008d2:	b2ed      	uxtb	r5, r5
  4008d4:	2d04      	cmp	r5, #4
  4008d6:	d1f2      	bne.n	4008be <gfx_mono_ssd1306_init+0x1e>
  4008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008dc:	204009fc 	.word	0x204009fc
  4008e0:	00400629 	.word	0x00400629
  4008e4:	004009a1 	.word	0x004009a1
  4008e8:	00400961 	.word	0x00400961
  4008ec:	00400851 	.word	0x00400851

004008f0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008f0:	09c3      	lsrs	r3, r0, #7
  4008f2:	d12a      	bne.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008f4:	291f      	cmp	r1, #31
  4008f6:	d828      	bhi.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008fc:	4614      	mov	r4, r2
  4008fe:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400900:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400902:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400906:	2201      	movs	r2, #1
  400908:	fa02 f701 	lsl.w	r7, r2, r1
  40090c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400910:	4601      	mov	r1, r0
  400912:	4630      	mov	r0, r6
  400914:	4b0d      	ldr	r3, [pc, #52]	; (40094c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400916:	4798      	blx	r3
  400918:	4602      	mov	r2, r0
	switch (color) {
  40091a:	2c01      	cmp	r4, #1
  40091c:	d009      	beq.n	400932 <gfx_mono_ssd1306_draw_pixel+0x42>
  40091e:	b164      	cbz	r4, 40093a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400920:	2c02      	cmp	r4, #2
  400922:	d00e      	beq.n	400942 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400924:	2300      	movs	r3, #0
  400926:	4629      	mov	r1, r5
  400928:	4630      	mov	r0, r6
  40092a:	4c09      	ldr	r4, [pc, #36]	; (400950 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40092c:	47a0      	blx	r4
  40092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400932:	ea48 0200 	orr.w	r2, r8, r0
  400936:	b2d2      	uxtb	r2, r2
		break;
  400938:	e7f4      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40093a:	ea20 0207 	bic.w	r2, r0, r7
  40093e:	b2d2      	uxtb	r2, r2
		break;
  400940:	e7f0      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400942:	ea88 0200 	eor.w	r2, r8, r0
  400946:	b2d2      	uxtb	r2, r2
		break;
  400948:	e7ec      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
  40094a:	4770      	bx	lr
  40094c:	00400645 	.word	0x00400645
  400950:	00400851 	.word	0x00400851

00400954 <gfx_mono_ssd1306_get_byte>:
{
  400954:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400956:	4b01      	ldr	r3, [pc, #4]	; (40095c <gfx_mono_ssd1306_get_byte+0x8>)
  400958:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40095a:	bd08      	pop	{r3, pc}
  40095c:	00400645 	.word	0x00400645

00400960 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400960:	b538      	push	{r3, r4, r5, lr}
  400962:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400964:	2208      	movs	r2, #8
  400966:	4b09      	ldr	r3, [pc, #36]	; (40098c <ssd1306_write_command+0x2c>)
  400968:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40096a:	4c09      	ldr	r4, [pc, #36]	; (400990 <ssd1306_write_command+0x30>)
  40096c:	2101      	movs	r1, #1
  40096e:	4620      	mov	r0, r4
  400970:	4b08      	ldr	r3, [pc, #32]	; (400994 <ssd1306_write_command+0x34>)
  400972:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400974:	2301      	movs	r3, #1
  400976:	461a      	mov	r2, r3
  400978:	4629      	mov	r1, r5
  40097a:	4620      	mov	r0, r4
  40097c:	4c06      	ldr	r4, [pc, #24]	; (400998 <ssd1306_write_command+0x38>)
  40097e:	47a0      	blx	r4
	delay_us(10);
  400980:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <ssd1306_write_command+0x3c>)
  400986:	4798      	blx	r3
  400988:	bd38      	pop	{r3, r4, r5, pc}
  40098a:	bf00      	nop
  40098c:	400e1000 	.word	0x400e1000
  400990:	40008000 	.word	0x40008000
  400994:	00400461 	.word	0x00400461
  400998:	00400477 	.word	0x00400477
  40099c:	20400001 	.word	0x20400001

004009a0 <ssd1306_init>:
{
  4009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009a4:	4d66      	ldr	r5, [pc, #408]	; (400b40 <ssd1306_init+0x1a0>)
  4009a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4009aa:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009ac:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009b0:	4b64      	ldr	r3, [pc, #400]	; (400b44 <ssd1306_init+0x1a4>)
  4009b2:	2708      	movs	r7, #8
  4009b4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009ba:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009bc:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009c4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009c8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4009ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009ce:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4009d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009d6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4009d8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009da:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009de:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009e0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009e2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009e8:	f022 0208 	bic.w	r2, r2, #8
  4009ec:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009f0:	f022 0208 	bic.w	r2, r2, #8
  4009f4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009f6:	601f      	str	r7, [r3, #0]
  4009f8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009fa:	631f      	str	r7, [r3, #48]	; 0x30
  4009fc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009fe:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b7c <ssd1306_init+0x1dc>
  400a02:	2300      	movs	r3, #0
  400a04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a0c:	4640      	mov	r0, r8
  400a0e:	4c4e      	ldr	r4, [pc, #312]	; (400b48 <ssd1306_init+0x1a8>)
  400a10:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a12:	2300      	movs	r3, #0
  400a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a1c:	4640      	mov	r0, r8
  400a1e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a20:	2300      	movs	r3, #0
  400a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a2a:	4640      	mov	r0, r8
  400a2c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a2e:	2300      	movs	r3, #0
  400a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a38:	4640      	mov	r0, r8
  400a3a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a3c:	2300      	movs	r3, #0
  400a3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a46:	4640      	mov	r0, r8
  400a48:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a4a:	2300      	movs	r3, #0
  400a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a54:	4640      	mov	r0, r8
  400a56:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a58:	4c3c      	ldr	r4, [pc, #240]	; (400b4c <ssd1306_init+0x1ac>)
  400a5a:	f04f 0902 	mov.w	r9, #2
  400a5e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a62:	f04f 0880 	mov.w	r8, #128	; 0x80
  400a66:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a6a:	6863      	ldr	r3, [r4, #4]
  400a6c:	f043 0301 	orr.w	r3, r3, #1
  400a70:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400a72:	463a      	mov	r2, r7
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b35      	ldr	r3, [pc, #212]	; (400b50 <ssd1306_init+0x1b0>)
  400a7a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a7c:	2200      	movs	r2, #0
  400a7e:	2101      	movs	r1, #1
  400a80:	4620      	mov	r0, r4
  400a82:	4b34      	ldr	r3, [pc, #208]	; (400b54 <ssd1306_init+0x1b4>)
  400a84:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a86:	2200      	movs	r2, #0
  400a88:	2101      	movs	r1, #1
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b32      	ldr	r3, [pc, #200]	; (400b58 <ssd1306_init+0x1b8>)
  400a8e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a90:	6863      	ldr	r3, [r4, #4]
  400a92:	f023 0302 	bic.w	r3, r3, #2
  400a96:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a98:	2200      	movs	r2, #0
  400a9a:	2101      	movs	r1, #1
  400a9c:	4620      	mov	r0, r4
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <ssd1306_init+0x1bc>)
  400aa0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400aa8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400aaa:	6863      	ldr	r3, [r4, #4]
  400aac:	f043 0310 	orr.w	r3, r3, #16
  400ab0:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400ab2:	492b      	ldr	r1, [pc, #172]	; (400b60 <ssd1306_init+0x1c0>)
  400ab4:	482b      	ldr	r0, [pc, #172]	; (400b64 <ssd1306_init+0x1c4>)
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ssd1306_init+0x1c8>)
  400ab8:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400aba:	b2c2      	uxtb	r2, r0
  400abc:	2101      	movs	r1, #1
  400abe:	4620      	mov	r0, r4
  400ac0:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <ssd1306_init+0x1cc>)
  400ac2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ssd1306_init+0x1d0>)
  400ac8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400aca:	2301      	movs	r3, #1
  400acc:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400ace:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ad4:	4c27      	ldr	r4, [pc, #156]	; (400b74 <ssd1306_init+0x1d4>)
  400ad6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ad8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ade:	47a0      	blx	r4
  400ae0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400ae2:	20a8      	movs	r0, #168	; 0xa8
  400ae4:	4c24      	ldr	r4, [pc, #144]	; (400b78 <ssd1306_init+0x1d8>)
  400ae6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ae8:	201f      	movs	r0, #31
  400aea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400aec:	20d3      	movs	r0, #211	; 0xd3
  400aee:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400af0:	2000      	movs	r0, #0
  400af2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400af4:	2040      	movs	r0, #64	; 0x40
  400af6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400af8:	20a1      	movs	r0, #161	; 0xa1
  400afa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400afc:	20c8      	movs	r0, #200	; 0xc8
  400afe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b00:	20da      	movs	r0, #218	; 0xda
  400b02:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b04:	4648      	mov	r0, r9
  400b06:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b08:	2081      	movs	r0, #129	; 0x81
  400b0a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b0c:	208f      	movs	r0, #143	; 0x8f
  400b0e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b10:	20a4      	movs	r0, #164	; 0xa4
  400b12:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b14:	20a6      	movs	r0, #166	; 0xa6
  400b16:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b18:	20d5      	movs	r0, #213	; 0xd5
  400b1a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b1c:	4640      	mov	r0, r8
  400b1e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b20:	208d      	movs	r0, #141	; 0x8d
  400b22:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b24:	2014      	movs	r0, #20
  400b26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b28:	20db      	movs	r0, #219	; 0xdb
  400b2a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b2c:	2040      	movs	r0, #64	; 0x40
  400b2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b30:	20d9      	movs	r0, #217	; 0xd9
  400b32:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b34:	20f1      	movs	r0, #241	; 0xf1
  400b36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400b38:	20af      	movs	r0, #175	; 0xaf
  400b3a:	47a0      	blx	r4
  400b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b40:	400e1200 	.word	0x400e1200
  400b44:	400e1000 	.word	0x400e1000
  400b48:	00400f4d 	.word	0x00400f4d
  400b4c:	40008000 	.word	0x40008000
  400b50:	004004e7 	.word	0x004004e7
  400b54:	004004ab 	.word	0x004004ab
  400b58:	004004c9 	.word	0x004004c9
  400b5c:	0040052d 	.word	0x0040052d
  400b60:	08f0d180 	.word	0x08f0d180
  400b64:	001e8480 	.word	0x001e8480
  400b68:	00400541 	.word	0x00400541
  400b6c:	00400557 	.word	0x00400557
  400b70:	00400435 	.word	0x00400435
  400b74:	20400001 	.word	0x20400001
  400b78:	00400961 	.word	0x00400961
  400b7c:	400e1400 	.word	0x400e1400

00400b80 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b80:	b538      	push	{r3, r4, r5, lr}
  400b82:	4605      	mov	r5, r0
  400b84:	2208      	movs	r2, #8
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <ssd1306_write_data+0x2c>)
  400b88:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b8a:	4c09      	ldr	r4, [pc, #36]	; (400bb0 <ssd1306_write_data+0x30>)
  400b8c:	2101      	movs	r1, #1
  400b8e:	4620      	mov	r0, r4
  400b90:	4b08      	ldr	r3, [pc, #32]	; (400bb4 <ssd1306_write_data+0x34>)
  400b92:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b94:	2301      	movs	r3, #1
  400b96:	461a      	mov	r2, r3
  400b98:	4629      	mov	r1, r5
  400b9a:	4620      	mov	r0, r4
  400b9c:	4c06      	ldr	r4, [pc, #24]	; (400bb8 <ssd1306_write_data+0x38>)
  400b9e:	47a0      	blx	r4
	delay_us(10);
  400ba0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <ssd1306_write_data+0x3c>)
  400ba6:	4798      	blx	r3
  400ba8:	bd38      	pop	{r3, r4, r5, pc}
  400baa:	bf00      	nop
  400bac:	400e1000 	.word	0x400e1000
  400bb0:	40008000 	.word	0x40008000
  400bb4:	00400461 	.word	0x00400461
  400bb8:	00400477 	.word	0x00400477
  400bbc:	20400001 	.word	0x20400001

00400bc0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bc0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bc2:	4810      	ldr	r0, [pc, #64]	; (400c04 <sysclk_init+0x44>)
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <sysclk_init+0x48>)
  400bc6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bc8:	213e      	movs	r1, #62	; 0x3e
  400bca:	2000      	movs	r0, #0
  400bcc:	4b0f      	ldr	r3, [pc, #60]	; (400c0c <sysclk_init+0x4c>)
  400bce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400bd0:	4c0f      	ldr	r4, [pc, #60]	; (400c10 <sysclk_init+0x50>)
  400bd2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d0fc      	beq.n	400bd2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400bd8:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <sysclk_init+0x54>)
  400bda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <sysclk_init+0x58>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <sysclk_init+0x5c>)
  400be0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400be2:	4c0f      	ldr	r4, [pc, #60]	; (400c20 <sysclk_init+0x60>)
  400be4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400be6:	2800      	cmp	r0, #0
  400be8:	d0fc      	beq.n	400be4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400bea:	2002      	movs	r0, #2
  400bec:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <sysclk_init+0x64>)
  400bee:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400bf0:	2000      	movs	r0, #0
  400bf2:	4b0d      	ldr	r3, [pc, #52]	; (400c28 <sysclk_init+0x68>)
  400bf4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bf6:	4b0d      	ldr	r3, [pc, #52]	; (400c2c <sysclk_init+0x6c>)
  400bf8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bfa:	4802      	ldr	r0, [pc, #8]	; (400c04 <sysclk_init+0x44>)
  400bfc:	4b02      	ldr	r3, [pc, #8]	; (400c08 <sysclk_init+0x48>)
  400bfe:	4798      	blx	r3
  400c00:	bd10      	pop	{r4, pc}
  400c02:	bf00      	nop
  400c04:	11e1a300 	.word	0x11e1a300
  400c08:	00401899 	.word	0x00401899
  400c0c:	004011dd 	.word	0x004011dd
  400c10:	00401231 	.word	0x00401231
  400c14:	00401241 	.word	0x00401241
  400c18:	20183f01 	.word	0x20183f01
  400c1c:	400e0600 	.word	0x400e0600
  400c20:	00401251 	.word	0x00401251
  400c24:	00401141 	.word	0x00401141
  400c28:	00401179 	.word	0x00401179
  400c2c:	0040178d 	.word	0x0040178d

00400c30 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400c34:	b980      	cbnz	r0, 400c58 <_read+0x28>
  400c36:	460c      	mov	r4, r1
  400c38:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400c3a:	2a00      	cmp	r2, #0
  400c3c:	dd0f      	ble.n	400c5e <_read+0x2e>
  400c3e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400c40:	4e08      	ldr	r6, [pc, #32]	; (400c64 <_read+0x34>)
  400c42:	4d09      	ldr	r5, [pc, #36]	; (400c68 <_read+0x38>)
  400c44:	6830      	ldr	r0, [r6, #0]
  400c46:	4621      	mov	r1, r4
  400c48:	682b      	ldr	r3, [r5, #0]
  400c4a:	4798      	blx	r3
		ptr++;
  400c4c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400c4e:	42bc      	cmp	r4, r7
  400c50:	d1f8      	bne.n	400c44 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400c52:	4640      	mov	r0, r8
  400c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c58:	f04f 38ff 	mov.w	r8, #4294967295
  400c5c:	e7f9      	b.n	400c52 <_read+0x22>
	for (; len > 0; --len) {
  400c5e:	4680      	mov	r8, r0
  400c60:	e7f7      	b.n	400c52 <_read+0x22>
  400c62:	bf00      	nop
  400c64:	20400e00 	.word	0x20400e00
  400c68:	20400df8 	.word	0x20400df8

00400c6c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400c6c:	3801      	subs	r0, #1
  400c6e:	2802      	cmp	r0, #2
  400c70:	d815      	bhi.n	400c9e <_write+0x32>
{
  400c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c76:	460e      	mov	r6, r1
  400c78:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400c7a:	b19a      	cbz	r2, 400ca4 <_write+0x38>
  400c7c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400c7e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400cb8 <_write+0x4c>
  400c82:	4f0c      	ldr	r7, [pc, #48]	; (400cb4 <_write+0x48>)
  400c84:	f8d8 0000 	ldr.w	r0, [r8]
  400c88:	f815 1b01 	ldrb.w	r1, [r5], #1
  400c8c:	683b      	ldr	r3, [r7, #0]
  400c8e:	4798      	blx	r3
  400c90:	2800      	cmp	r0, #0
  400c92:	db0a      	blt.n	400caa <_write+0x3e>
  400c94:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400c96:	3c01      	subs	r4, #1
  400c98:	d1f4      	bne.n	400c84 <_write+0x18>
  400c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c9e:	f04f 30ff 	mov.w	r0, #4294967295
  400ca2:	4770      	bx	lr
	for (; len != 0; --len) {
  400ca4:	4610      	mov	r0, r2
  400ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400caa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cb2:	bf00      	nop
  400cb4:	20400dfc 	.word	0x20400dfc
  400cb8:	20400e00 	.word	0x20400e00

00400cbc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400cbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cc2:	4b5c      	ldr	r3, [pc, #368]	; (400e34 <board_init+0x178>)
  400cc4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cca:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400cce:	4b5a      	ldr	r3, [pc, #360]	; (400e38 <board_init+0x17c>)
  400cd0:	2200      	movs	r2, #0
  400cd2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400cd6:	695a      	ldr	r2, [r3, #20]
  400cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400cdc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ce2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ce6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400cea:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400cee:	f007 0007 	and.w	r0, r7, #7
  400cf2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400cf4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400cf8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400cfc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d00:	f3bf 8f4f 	dsb	sy
  400d04:	f04f 34ff 	mov.w	r4, #4294967295
  400d08:	fa04 fc00 	lsl.w	ip, r4, r0
  400d0c:	fa06 f000 	lsl.w	r0, r6, r0
  400d10:	fa04 f40e 	lsl.w	r4, r4, lr
  400d14:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d18:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d1a:	463a      	mov	r2, r7
  400d1c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d1e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400d22:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400d26:	3a01      	subs	r2, #1
  400d28:	4423      	add	r3, r4
  400d2a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400d2e:	d1f6      	bne.n	400d1e <board_init+0x62>
        } while(sets--);
  400d30:	3e01      	subs	r6, #1
  400d32:	4460      	add	r0, ip
  400d34:	f1b6 3fff 	cmp.w	r6, #4294967295
  400d38:	d1ef      	bne.n	400d1a <board_init+0x5e>
  400d3a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400d3e:	4b3e      	ldr	r3, [pc, #248]	; (400e38 <board_init+0x17c>)
  400d40:	695a      	ldr	r2, [r3, #20]
  400d42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400d46:	615a      	str	r2, [r3, #20]
  400d48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d4c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d50:	4a3a      	ldr	r2, [pc, #232]	; (400e3c <board_init+0x180>)
  400d52:	493b      	ldr	r1, [pc, #236]	; (400e40 <board_init+0x184>)
  400d54:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d56:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400d5a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d60:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d64:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d68:	f022 0201 	bic.w	r2, r2, #1
  400d6c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d70:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d74:	f022 0201 	bic.w	r2, r2, #1
  400d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d80:	f3bf 8f6f 	isb	sy
  400d84:	200a      	movs	r0, #10
  400d86:	4c2f      	ldr	r4, [pc, #188]	; (400e44 <board_init+0x188>)
  400d88:	47a0      	blx	r4
  400d8a:	200b      	movs	r0, #11
  400d8c:	47a0      	blx	r4
  400d8e:	200c      	movs	r0, #12
  400d90:	47a0      	blx	r4
  400d92:	2010      	movs	r0, #16
  400d94:	47a0      	blx	r4
  400d96:	2011      	movs	r0, #17
  400d98:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d9a:	4b2b      	ldr	r3, [pc, #172]	; (400e48 <board_init+0x18c>)
  400d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400da0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400da2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400da6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400da8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400db0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400db6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dbc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400dbe:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400dc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400dc6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dca:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dcc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dd2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400dd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400dd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400de0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400de4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dea:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dec:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400df2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400df4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400df8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dfa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dfc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400e00:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e02:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e04:	4a11      	ldr	r2, [pc, #68]	; (400e4c <board_init+0x190>)
  400e06:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400e0a:	f043 0310 	orr.w	r3, r3, #16
  400e0e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e12:	4b0f      	ldr	r3, [pc, #60]	; (400e50 <board_init+0x194>)
  400e14:	2210      	movs	r2, #16
  400e16:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e1c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e1e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e24:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e26:	4311      	orrs	r1, r2
  400e28:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e2a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e2c:	4311      	orrs	r1, r2
  400e2e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e30:	605a      	str	r2, [r3, #4]
  400e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e34:	400e1850 	.word	0x400e1850
  400e38:	e000ed00 	.word	0xe000ed00
  400e3c:	400e0c00 	.word	0x400e0c00
  400e40:	5a00080c 	.word	0x5a00080c
  400e44:	00401261 	.word	0x00401261
  400e48:	400e1200 	.word	0x400e1200
  400e4c:	40088000 	.word	0x40088000
  400e50:	400e1000 	.word	0x400e1000

00400e54 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400e54:	6301      	str	r1, [r0, #48]	; 0x30
  400e56:	4770      	bx	lr

00400e58 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400e58:	6341      	str	r1, [r0, #52]	; 0x34
  400e5a:	4770      	bx	lr

00400e5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e5c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e5e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e62:	d03a      	beq.n	400eda <pio_set_peripheral+0x7e>
  400e64:	d813      	bhi.n	400e8e <pio_set_peripheral+0x32>
  400e66:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e6a:	d025      	beq.n	400eb8 <pio_set_peripheral+0x5c>
  400e6c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e70:	d10a      	bne.n	400e88 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e72:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e74:	4313      	orrs	r3, r2
  400e76:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e78:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e7a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e7c:	400b      	ands	r3, r1
  400e7e:	ea23 0302 	bic.w	r3, r3, r2
  400e82:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e84:	6042      	str	r2, [r0, #4]
  400e86:	4770      	bx	lr
	switch (ul_type) {
  400e88:	2900      	cmp	r1, #0
  400e8a:	d1fb      	bne.n	400e84 <pio_set_peripheral+0x28>
  400e8c:	4770      	bx	lr
  400e8e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e92:	d021      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400e94:	d809      	bhi.n	400eaa <pio_set_peripheral+0x4e>
  400e96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e9a:	d1f3      	bne.n	400e84 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e9e:	4313      	orrs	r3, r2
  400ea0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ea2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ea4:	4313      	orrs	r3, r2
  400ea6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ea8:	e7ec      	b.n	400e84 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400eaa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400eae:	d013      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400eb0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400eb4:	d010      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400eb6:	e7e5      	b.n	400e84 <pio_set_peripheral+0x28>
{
  400eb8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eba:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ebc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ebe:	43d3      	mvns	r3, r2
  400ec0:	4021      	ands	r1, r4
  400ec2:	461c      	mov	r4, r3
  400ec4:	4019      	ands	r1, r3
  400ec6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ec8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400eca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ecc:	400b      	ands	r3, r1
  400ece:	4023      	ands	r3, r4
  400ed0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400ed2:	6042      	str	r2, [r0, #4]
}
  400ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ed8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eda:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400edc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400ede:	400b      	ands	r3, r1
  400ee0:	ea23 0302 	bic.w	r3, r3, r2
  400ee4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ee6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ee8:	4313      	orrs	r3, r2
  400eea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400eec:	e7ca      	b.n	400e84 <pio_set_peripheral+0x28>

00400eee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400eee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ef0:	f012 0f01 	tst.w	r2, #1
  400ef4:	d10d      	bne.n	400f12 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400ef6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ef8:	f012 0f0a 	tst.w	r2, #10
  400efc:	d00b      	beq.n	400f16 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400efe:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400f00:	f012 0f02 	tst.w	r2, #2
  400f04:	d109      	bne.n	400f1a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400f06:	f012 0f08 	tst.w	r2, #8
  400f0a:	d008      	beq.n	400f1e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400f0c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400f10:	e005      	b.n	400f1e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400f12:	6641      	str	r1, [r0, #100]	; 0x64
  400f14:	e7f0      	b.n	400ef8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400f16:	6241      	str	r1, [r0, #36]	; 0x24
  400f18:	e7f2      	b.n	400f00 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400f1a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400f1e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400f20:	6001      	str	r1, [r0, #0]
  400f22:	4770      	bx	lr

00400f24 <pio_set_output>:
{
  400f24:	b410      	push	{r4}
  400f26:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400f28:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f2a:	b94c      	cbnz	r4, 400f40 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400f2c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400f2e:	b14b      	cbz	r3, 400f44 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400f30:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400f32:	b94a      	cbnz	r2, 400f48 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400f34:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400f36:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400f38:	6001      	str	r1, [r0, #0]
}
  400f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f3e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400f40:	6641      	str	r1, [r0, #100]	; 0x64
  400f42:	e7f4      	b.n	400f2e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400f44:	6541      	str	r1, [r0, #84]	; 0x54
  400f46:	e7f4      	b.n	400f32 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400f48:	6301      	str	r1, [r0, #48]	; 0x30
  400f4a:	e7f4      	b.n	400f36 <pio_set_output+0x12>

00400f4c <pio_configure>:
{
  400f4c:	b570      	push	{r4, r5, r6, lr}
  400f4e:	b082      	sub	sp, #8
  400f50:	4605      	mov	r5, r0
  400f52:	4616      	mov	r6, r2
  400f54:	461c      	mov	r4, r3
	switch (ul_type) {
  400f56:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f5a:	d014      	beq.n	400f86 <pio_configure+0x3a>
  400f5c:	d90a      	bls.n	400f74 <pio_configure+0x28>
  400f5e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f62:	d024      	beq.n	400fae <pio_configure+0x62>
  400f64:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f68:	d021      	beq.n	400fae <pio_configure+0x62>
  400f6a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f6e:	d017      	beq.n	400fa0 <pio_configure+0x54>
		return 0;
  400f70:	2000      	movs	r0, #0
  400f72:	e01a      	b.n	400faa <pio_configure+0x5e>
	switch (ul_type) {
  400f74:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f78:	d005      	beq.n	400f86 <pio_configure+0x3a>
  400f7a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f7e:	d002      	beq.n	400f86 <pio_configure+0x3a>
  400f80:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f84:	d1f4      	bne.n	400f70 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400f86:	4632      	mov	r2, r6
  400f88:	4628      	mov	r0, r5
  400f8a:	4b11      	ldr	r3, [pc, #68]	; (400fd0 <pio_configure+0x84>)
  400f8c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f8e:	f014 0f01 	tst.w	r4, #1
  400f92:	d102      	bne.n	400f9a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400f94:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400f96:	2001      	movs	r0, #1
  400f98:	e007      	b.n	400faa <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400f9a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400f9c:	2001      	movs	r0, #1
  400f9e:	e004      	b.n	400faa <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400fa0:	461a      	mov	r2, r3
  400fa2:	4631      	mov	r1, r6
  400fa4:	4b0b      	ldr	r3, [pc, #44]	; (400fd4 <pio_configure+0x88>)
  400fa6:	4798      	blx	r3
	return 1;
  400fa8:	2001      	movs	r0, #1
}
  400faa:	b002      	add	sp, #8
  400fac:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400fae:	f004 0301 	and.w	r3, r4, #1
  400fb2:	9300      	str	r3, [sp, #0]
  400fb4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400fb8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fbc:	bf14      	ite	ne
  400fbe:	2200      	movne	r2, #0
  400fc0:	2201      	moveq	r2, #1
  400fc2:	4631      	mov	r1, r6
  400fc4:	4628      	mov	r0, r5
  400fc6:	4c04      	ldr	r4, [pc, #16]	; (400fd8 <pio_configure+0x8c>)
  400fc8:	47a0      	blx	r4
	return 1;
  400fca:	2001      	movs	r0, #1
		break;
  400fcc:	e7ed      	b.n	400faa <pio_configure+0x5e>
  400fce:	bf00      	nop
  400fd0:	00400e5d 	.word	0x00400e5d
  400fd4:	00400eef 	.word	0x00400eef
  400fd8:	00400f25 	.word	0x00400f25

00400fdc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400fdc:	f012 0f10 	tst.w	r2, #16
  400fe0:	d012      	beq.n	401008 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400fe2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400fe6:	f012 0f20 	tst.w	r2, #32
  400fea:	d007      	beq.n	400ffc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400fec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400ff0:	f012 0f40 	tst.w	r2, #64	; 0x40
  400ff4:	d005      	beq.n	401002 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400ff6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400ffa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400ffc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401000:	e7f6      	b.n	400ff0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401002:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401006:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401008:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40100c:	4770      	bx	lr

0040100e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40100e:	6401      	str	r1, [r0, #64]	; 0x40
  401010:	4770      	bx	lr

00401012 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401012:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401014:	4770      	bx	lr

00401016 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401016:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401018:	4770      	bx	lr
>>>>>>> Stashed changes
	...

004011ac <prvTaskExitError>:
  4011ac:	4b0d      	ldr	r3, [pc, #52]	; (4011e4 <prvTaskExitError+0x38>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011b4:	d00a      	beq.n	4011cc <prvTaskExitError+0x20>
  4011b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011ba:	b672      	cpsid	i
  4011bc:	f383 8811 	msr	BASEPRI, r3
  4011c0:	f3bf 8f6f 	isb	sy
  4011c4:	f3bf 8f4f 	dsb	sy
  4011c8:	b662      	cpsie	i
  4011ca:	e7fe      	b.n	4011ca <prvTaskExitError+0x1e>
  4011cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011d0:	b672      	cpsid	i
  4011d2:	f383 8811 	msr	BASEPRI, r3
  4011d6:	f3bf 8f6f 	isb	sy
  4011da:	f3bf 8f4f 	dsb	sy
  4011de:	b662      	cpsie	i
  4011e0:	e7fe      	b.n	4011e0 <prvTaskExitError+0x34>
  4011e2:	bf00      	nop
  4011e4:	20400010 	.word	0x20400010

004011e8 <prvPortStartFirstTask>:
  4011e8:	4806      	ldr	r0, [pc, #24]	; (401204 <prvPortStartFirstTask+0x1c>)
  4011ea:	6800      	ldr	r0, [r0, #0]
  4011ec:	6800      	ldr	r0, [r0, #0]
  4011ee:	f380 8808 	msr	MSP, r0
  4011f2:	b662      	cpsie	i
  4011f4:	b661      	cpsie	f
  4011f6:	f3bf 8f4f 	dsb	sy
  4011fa:	f3bf 8f6f 	isb	sy
  4011fe:	df00      	svc	0
  401200:	bf00      	nop
  401202:	0000      	.short	0x0000
  401204:	e000ed08 	.word	0xe000ed08

00401208 <vPortEnableVFP>:
  401208:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401218 <vPortEnableVFP+0x10>
  40120c:	6801      	ldr	r1, [r0, #0]
  40120e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401212:	6001      	str	r1, [r0, #0]
  401214:	4770      	bx	lr
  401216:	0000      	.short	0x0000
  401218:	e000ed88 	.word	0xe000ed88

0040121c <pxPortInitialiseStack>:
  40121c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401220:	f840 3c04 	str.w	r3, [r0, #-4]
  401224:	f840 1c08 	str.w	r1, [r0, #-8]
  401228:	4b05      	ldr	r3, [pc, #20]	; (401240 <pxPortInitialiseStack+0x24>)
  40122a:	f840 3c0c 	str.w	r3, [r0, #-12]
  40122e:	f840 2c20 	str.w	r2, [r0, #-32]
  401232:	f06f 0302 	mvn.w	r3, #2
  401236:	f840 3c24 	str.w	r3, [r0, #-36]
  40123a:	3844      	subs	r0, #68	; 0x44
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	004011ad 	.word	0x004011ad

00401244 <SVC_Handler>:
  401244:	4b06      	ldr	r3, [pc, #24]	; (401260 <pxCurrentTCBConst2>)
  401246:	6819      	ldr	r1, [r3, #0]
  401248:	6808      	ldr	r0, [r1, #0]
  40124a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40124e:	f380 8809 	msr	PSP, r0
  401252:	f3bf 8f6f 	isb	sy
  401256:	f04f 0000 	mov.w	r0, #0
  40125a:	f380 8811 	msr	BASEPRI, r0
  40125e:	4770      	bx	lr

00401260 <pxCurrentTCBConst2>:
  401260:	20400c6c 	.word	0x20400c6c
  401264:	4770      	bx	lr
  401266:	bf00      	nop

00401268 <vPortEnterCritical>:
  401268:	f04f 0380 	mov.w	r3, #128	; 0x80
  40126c:	b672      	cpsid	i
  40126e:	f383 8811 	msr	BASEPRI, r3
  401272:	f3bf 8f6f 	isb	sy
  401276:	f3bf 8f4f 	dsb	sy
  40127a:	b662      	cpsie	i
  40127c:	4a0b      	ldr	r2, [pc, #44]	; (4012ac <vPortEnterCritical+0x44>)
  40127e:	6813      	ldr	r3, [r2, #0]
  401280:	3301      	adds	r3, #1
  401282:	6013      	str	r3, [r2, #0]
  401284:	2b01      	cmp	r3, #1
  401286:	d10f      	bne.n	4012a8 <vPortEnterCritical+0x40>
  401288:	4b09      	ldr	r3, [pc, #36]	; (4012b0 <vPortEnterCritical+0x48>)
  40128a:	681b      	ldr	r3, [r3, #0]
  40128c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401290:	d00a      	beq.n	4012a8 <vPortEnterCritical+0x40>
  401292:	f04f 0380 	mov.w	r3, #128	; 0x80
  401296:	b672      	cpsid	i
  401298:	f383 8811 	msr	BASEPRI, r3
  40129c:	f3bf 8f6f 	isb	sy
  4012a0:	f3bf 8f4f 	dsb	sy
  4012a4:	b662      	cpsie	i
  4012a6:	e7fe      	b.n	4012a6 <vPortEnterCritical+0x3e>
  4012a8:	4770      	bx	lr
<<<<<<< Updated upstream
  4012aa:	bf00      	nop
  4012ac:	20400010 	.word	0x20400010
  4012b0:	e000ed04 	.word	0xe000ed04

004012b4 <vPortExitCritical>:
  4012b4:	4b0a      	ldr	r3, [pc, #40]	; (4012e0 <vPortExitCritical+0x2c>)
  4012b6:	681b      	ldr	r3, [r3, #0]
  4012b8:	b953      	cbnz	r3, 4012d0 <vPortExitCritical+0x1c>
  4012ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012be:	b672      	cpsid	i
  4012c0:	f383 8811 	msr	BASEPRI, r3
  4012c4:	f3bf 8f6f 	isb	sy
  4012c8:	f3bf 8f4f 	dsb	sy
  4012cc:	b662      	cpsie	i
  4012ce:	e7fe      	b.n	4012ce <vPortExitCritical+0x1a>
  4012d0:	3b01      	subs	r3, #1
  4012d2:	4a03      	ldr	r2, [pc, #12]	; (4012e0 <vPortExitCritical+0x2c>)
  4012d4:	6013      	str	r3, [r2, #0]
  4012d6:	b90b      	cbnz	r3, 4012dc <vPortExitCritical+0x28>
  4012d8:	f383 8811 	msr	BASEPRI, r3
  4012dc:	4770      	bx	lr
  4012de:	bf00      	nop
  4012e0:	20400010 	.word	0x20400010

004012e4 <PendSV_Handler>:
  4012e4:	f3ef 8009 	mrs	r0, PSP
  4012e8:	f3bf 8f6f 	isb	sy
  4012ec:	4b15      	ldr	r3, [pc, #84]	; (401344 <pxCurrentTCBConst>)
  4012ee:	681a      	ldr	r2, [r3, #0]
  4012f0:	f01e 0f10 	tst.w	lr, #16
  4012f4:	bf08      	it	eq
  4012f6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4012fa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012fe:	6010      	str	r0, [r2, #0]
  401300:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401304:	f04f 0080 	mov.w	r0, #128	; 0x80
  401308:	b672      	cpsid	i
  40130a:	f380 8811 	msr	BASEPRI, r0
  40130e:	f3bf 8f4f 	dsb	sy
  401312:	f3bf 8f6f 	isb	sy
  401316:	b662      	cpsie	i
  401318:	f001 f900 	bl	40251c <vTaskSwitchContext>
  40131c:	f04f 0000 	mov.w	r0, #0
  401320:	f380 8811 	msr	BASEPRI, r0
  401324:	bc08      	pop	{r3}
  401326:	6819      	ldr	r1, [r3, #0]
  401328:	6808      	ldr	r0, [r1, #0]
  40132a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40132e:	f01e 0f10 	tst.w	lr, #16
  401332:	bf08      	it	eq
  401334:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401338:	f380 8809 	msr	PSP, r0
  40133c:	f3bf 8f6f 	isb	sy
  401340:	4770      	bx	lr
  401342:	bf00      	nop

00401344 <pxCurrentTCBConst>:
  401344:	20400c6c 	.word	0x20400c6c
  401348:	4770      	bx	lr
  40134a:	bf00      	nop

0040134c <SysTick_Handler>:
  40134c:	b508      	push	{r3, lr}
  40134e:	f3ef 8311 	mrs	r3, BASEPRI
  401352:	f04f 0280 	mov.w	r2, #128	; 0x80
  401356:	b672      	cpsid	i
  401358:	f382 8811 	msr	BASEPRI, r2
  40135c:	f3bf 8f6f 	isb	sy
  401360:	f3bf 8f4f 	dsb	sy
  401364:	b662      	cpsie	i
  401366:	4b05      	ldr	r3, [pc, #20]	; (40137c <SysTick_Handler+0x30>)
  401368:	4798      	blx	r3
  40136a:	b118      	cbz	r0, 401374 <SysTick_Handler+0x28>
  40136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401370:	4b03      	ldr	r3, [pc, #12]	; (401380 <SysTick_Handler+0x34>)
  401372:	601a      	str	r2, [r3, #0]
  401374:	2300      	movs	r3, #0
  401376:	f383 8811 	msr	BASEPRI, r3
  40137a:	bd08      	pop	{r3, pc}
  40137c:	00402189 	.word	0x00402189
  401380:	e000ed04 	.word	0xe000ed04

00401384 <vPortSetupTimerInterrupt>:
  401384:	4a03      	ldr	r2, [pc, #12]	; (401394 <vPortSetupTimerInterrupt+0x10>)
  401386:	4b04      	ldr	r3, [pc, #16]	; (401398 <vPortSetupTimerInterrupt+0x14>)
  401388:	601a      	str	r2, [r3, #0]
  40138a:	2207      	movs	r2, #7
  40138c:	3b04      	subs	r3, #4
  40138e:	601a      	str	r2, [r3, #0]
  401390:	4770      	bx	lr
  401392:	bf00      	nop
  401394:	000927bf 	.word	0x000927bf
  401398:	e000e014 	.word	0xe000e014

0040139c <xPortStartScheduler>:
  40139c:	b500      	push	{lr}
  40139e:	b083      	sub	sp, #12
  4013a0:	4b25      	ldr	r3, [pc, #148]	; (401438 <xPortStartScheduler+0x9c>)
  4013a2:	781a      	ldrb	r2, [r3, #0]
  4013a4:	b2d2      	uxtb	r2, r2
  4013a6:	9201      	str	r2, [sp, #4]
  4013a8:	22ff      	movs	r2, #255	; 0xff
  4013aa:	701a      	strb	r2, [r3, #0]
  4013ac:	781b      	ldrb	r3, [r3, #0]
  4013ae:	b2db      	uxtb	r3, r3
  4013b0:	f88d 3003 	strb.w	r3, [sp, #3]
  4013b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4013bc:	4a1f      	ldr	r2, [pc, #124]	; (40143c <xPortStartScheduler+0xa0>)
  4013be:	7013      	strb	r3, [r2, #0]
  4013c0:	2207      	movs	r2, #7
  4013c2:	4b1f      	ldr	r3, [pc, #124]	; (401440 <xPortStartScheduler+0xa4>)
  4013c4:	601a      	str	r2, [r3, #0]
  4013c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013ca:	f013 0f80 	tst.w	r3, #128	; 0x80
  4013ce:	d010      	beq.n	4013f2 <xPortStartScheduler+0x56>
  4013d0:	2206      	movs	r2, #6
  4013d2:	e000      	b.n	4013d6 <xPortStartScheduler+0x3a>
  4013d4:	460a      	mov	r2, r1
  4013d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013da:	005b      	lsls	r3, r3, #1
  4013dc:	b2db      	uxtb	r3, r3
  4013de:	f88d 3003 	strb.w	r3, [sp, #3]
  4013e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013e6:	1e51      	subs	r1, r2, #1
  4013e8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4013ec:	d1f2      	bne.n	4013d4 <xPortStartScheduler+0x38>
  4013ee:	4b14      	ldr	r3, [pc, #80]	; (401440 <xPortStartScheduler+0xa4>)
  4013f0:	601a      	str	r2, [r3, #0]
  4013f2:	4a13      	ldr	r2, [pc, #76]	; (401440 <xPortStartScheduler+0xa4>)
  4013f4:	6813      	ldr	r3, [r2, #0]
  4013f6:	021b      	lsls	r3, r3, #8
  4013f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4013fc:	6013      	str	r3, [r2, #0]
  4013fe:	9b01      	ldr	r3, [sp, #4]
  401400:	b2db      	uxtb	r3, r3
  401402:	4a0d      	ldr	r2, [pc, #52]	; (401438 <xPortStartScheduler+0x9c>)
  401404:	7013      	strb	r3, [r2, #0]
  401406:	4b0f      	ldr	r3, [pc, #60]	; (401444 <xPortStartScheduler+0xa8>)
  401408:	681a      	ldr	r2, [r3, #0]
  40140a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40140e:	601a      	str	r2, [r3, #0]
  401410:	681a      	ldr	r2, [r3, #0]
  401412:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401416:	601a      	str	r2, [r3, #0]
  401418:	4b0b      	ldr	r3, [pc, #44]	; (401448 <xPortStartScheduler+0xac>)
  40141a:	4798      	blx	r3
  40141c:	2200      	movs	r2, #0
  40141e:	4b0b      	ldr	r3, [pc, #44]	; (40144c <xPortStartScheduler+0xb0>)
  401420:	601a      	str	r2, [r3, #0]
  401422:	4b0b      	ldr	r3, [pc, #44]	; (401450 <xPortStartScheduler+0xb4>)
  401424:	4798      	blx	r3
  401426:	4a0b      	ldr	r2, [pc, #44]	; (401454 <xPortStartScheduler+0xb8>)
  401428:	6813      	ldr	r3, [r2, #0]
  40142a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40142e:	6013      	str	r3, [r2, #0]
  401430:	4b09      	ldr	r3, [pc, #36]	; (401458 <xPortStartScheduler+0xbc>)
  401432:	4798      	blx	r3
  401434:	4b09      	ldr	r3, [pc, #36]	; (40145c <xPortStartScheduler+0xc0>)
  401436:	4798      	blx	r3
  401438:	e000e400 	.word	0xe000e400
  40143c:	20400c64 	.word	0x20400c64
  401440:	20400c68 	.word	0x20400c68
  401444:	e000ed20 	.word	0xe000ed20
  401448:	00401385 	.word	0x00401385
  40144c:	20400010 	.word	0x20400010
  401450:	00401209 	.word	0x00401209
  401454:	e000ef34 	.word	0xe000ef34
  401458:	004011e9 	.word	0x004011e9
  40145c:	004011ad 	.word	0x004011ad

00401460 <vPortValidateInterruptPriority>:
  401460:	f3ef 8305 	mrs	r3, IPSR
  401464:	2b0f      	cmp	r3, #15
  401466:	d911      	bls.n	40148c <vPortValidateInterruptPriority+0x2c>
  401468:	4a12      	ldr	r2, [pc, #72]	; (4014b4 <vPortValidateInterruptPriority+0x54>)
  40146a:	5c9b      	ldrb	r3, [r3, r2]
  40146c:	b2db      	uxtb	r3, r3
  40146e:	4a12      	ldr	r2, [pc, #72]	; (4014b8 <vPortValidateInterruptPriority+0x58>)
  401470:	7812      	ldrb	r2, [r2, #0]
  401472:	429a      	cmp	r2, r3
  401474:	d90a      	bls.n	40148c <vPortValidateInterruptPriority+0x2c>
  401476:	f04f 0380 	mov.w	r3, #128	; 0x80
  40147a:	b672      	cpsid	i
  40147c:	f383 8811 	msr	BASEPRI, r3
  401480:	f3bf 8f6f 	isb	sy
  401484:	f3bf 8f4f 	dsb	sy
  401488:	b662      	cpsie	i
  40148a:	e7fe      	b.n	40148a <vPortValidateInterruptPriority+0x2a>
  40148c:	4b0b      	ldr	r3, [pc, #44]	; (4014bc <vPortValidateInterruptPriority+0x5c>)
  40148e:	681b      	ldr	r3, [r3, #0]
  401490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401494:	4a0a      	ldr	r2, [pc, #40]	; (4014c0 <vPortValidateInterruptPriority+0x60>)
  401496:	6812      	ldr	r2, [r2, #0]
  401498:	4293      	cmp	r3, r2
  40149a:	d90a      	bls.n	4014b2 <vPortValidateInterruptPriority+0x52>
  40149c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014a0:	b672      	cpsid	i
  4014a2:	f383 8811 	msr	BASEPRI, r3
  4014a6:	f3bf 8f6f 	isb	sy
  4014aa:	f3bf 8f4f 	dsb	sy
  4014ae:	b662      	cpsie	i
  4014b0:	e7fe      	b.n	4014b0 <vPortValidateInterruptPriority+0x50>
  4014b2:	4770      	bx	lr
  4014b4:	e000e3f0 	.word	0xe000e3f0
  4014b8:	20400c64 	.word	0x20400c64
  4014bc:	e000ed0c 	.word	0xe000ed0c
  4014c0:	20400c68 	.word	0x20400c68

004014c4 <pvPortMalloc>:
  4014c4:	b510      	push	{r4, lr}
  4014c6:	4604      	mov	r4, r0
  4014c8:	4b06      	ldr	r3, [pc, #24]	; (4014e4 <pvPortMalloc+0x20>)
  4014ca:	4798      	blx	r3
  4014cc:	4620      	mov	r0, r4
  4014ce:	4b06      	ldr	r3, [pc, #24]	; (4014e8 <pvPortMalloc+0x24>)
  4014d0:	4798      	blx	r3
  4014d2:	4604      	mov	r4, r0
  4014d4:	4b05      	ldr	r3, [pc, #20]	; (4014ec <pvPortMalloc+0x28>)
  4014d6:	4798      	blx	r3
  4014d8:	b10c      	cbz	r4, 4014de <pvPortMalloc+0x1a>
  4014da:	4620      	mov	r0, r4
  4014dc:	bd10      	pop	{r4, pc}
  4014de:	4b04      	ldr	r3, [pc, #16]	; (4014f0 <pvPortMalloc+0x2c>)
  4014e0:	4798      	blx	r3
  4014e2:	e7fa      	b.n	4014da <pvPortMalloc+0x16>
  4014e4:	0040216d 	.word	0x0040216d
  4014e8:	00403475 	.word	0x00403475
  4014ec:	004022d5 	.word	0x004022d5
  4014f0:	00403107 	.word	0x00403107

004014f4 <vPortFree>:
  4014f4:	b148      	cbz	r0, 40150a <vPortFree+0x16>
  4014f6:	b510      	push	{r4, lr}
  4014f8:	4604      	mov	r4, r0
  4014fa:	4b04      	ldr	r3, [pc, #16]	; (40150c <vPortFree+0x18>)
  4014fc:	4798      	blx	r3
  4014fe:	4620      	mov	r0, r4
  401500:	4b03      	ldr	r3, [pc, #12]	; (401510 <vPortFree+0x1c>)
  401502:	4798      	blx	r3
  401504:	4b03      	ldr	r3, [pc, #12]	; (401514 <vPortFree+0x20>)
  401506:	4798      	blx	r3
  401508:	bd10      	pop	{r4, pc}
  40150a:	4770      	bx	lr
  40150c:	0040216d 	.word	0x0040216d
  401510:	00403485 	.word	0x00403485
  401514:	004022d5 	.word	0x004022d5

00401518 <prvCopyDataToQueue>:
  401518:	b538      	push	{r3, r4, r5, lr}
  40151a:	4604      	mov	r4, r0
  40151c:	4615      	mov	r5, r2
  40151e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401520:	b95a      	cbnz	r2, 40153a <prvCopyDataToQueue+0x22>
  401522:	6803      	ldr	r3, [r0, #0]
  401524:	2b00      	cmp	r3, #0
  401526:	d12e      	bne.n	401586 <prvCopyDataToQueue+0x6e>
  401528:	6840      	ldr	r0, [r0, #4]
  40152a:	4b1b      	ldr	r3, [pc, #108]	; (401598 <prvCopyDataToQueue+0x80>)
  40152c:	4798      	blx	r3
  40152e:	2300      	movs	r3, #0
  401530:	6063      	str	r3, [r4, #4]
  401532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401534:	3301      	adds	r3, #1
  401536:	63a3      	str	r3, [r4, #56]	; 0x38
  401538:	bd38      	pop	{r3, r4, r5, pc}
  40153a:	b96d      	cbnz	r5, 401558 <prvCopyDataToQueue+0x40>
  40153c:	6880      	ldr	r0, [r0, #8]
  40153e:	4b17      	ldr	r3, [pc, #92]	; (40159c <prvCopyDataToQueue+0x84>)
  401540:	4798      	blx	r3
  401542:	68a3      	ldr	r3, [r4, #8]
  401544:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401546:	4413      	add	r3, r2
  401548:	60a3      	str	r3, [r4, #8]
  40154a:	6862      	ldr	r2, [r4, #4]
  40154c:	4293      	cmp	r3, r2
  40154e:	d31c      	bcc.n	40158a <prvCopyDataToQueue+0x72>
  401550:	6823      	ldr	r3, [r4, #0]
  401552:	60a3      	str	r3, [r4, #8]
  401554:	2000      	movs	r0, #0
  401556:	e7ec      	b.n	401532 <prvCopyDataToQueue+0x1a>
  401558:	68c0      	ldr	r0, [r0, #12]
  40155a:	4b10      	ldr	r3, [pc, #64]	; (40159c <prvCopyDataToQueue+0x84>)
  40155c:	4798      	blx	r3
  40155e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401560:	425b      	negs	r3, r3
  401562:	68e2      	ldr	r2, [r4, #12]
  401564:	441a      	add	r2, r3
  401566:	60e2      	str	r2, [r4, #12]
  401568:	6821      	ldr	r1, [r4, #0]
  40156a:	428a      	cmp	r2, r1
  40156c:	d202      	bcs.n	401574 <prvCopyDataToQueue+0x5c>
  40156e:	6862      	ldr	r2, [r4, #4]
  401570:	4413      	add	r3, r2
  401572:	60e3      	str	r3, [r4, #12]
  401574:	2d02      	cmp	r5, #2
  401576:	d10a      	bne.n	40158e <prvCopyDataToQueue+0x76>
  401578:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40157a:	b153      	cbz	r3, 401592 <prvCopyDataToQueue+0x7a>
  40157c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40157e:	3b01      	subs	r3, #1
  401580:	63a3      	str	r3, [r4, #56]	; 0x38
  401582:	2000      	movs	r0, #0
  401584:	e7d5      	b.n	401532 <prvCopyDataToQueue+0x1a>
  401586:	2000      	movs	r0, #0
  401588:	e7d3      	b.n	401532 <prvCopyDataToQueue+0x1a>
  40158a:	2000      	movs	r0, #0
  40158c:	e7d1      	b.n	401532 <prvCopyDataToQueue+0x1a>
  40158e:	2000      	movs	r0, #0
  401590:	e7cf      	b.n	401532 <prvCopyDataToQueue+0x1a>
  401592:	2000      	movs	r0, #0
  401594:	e7cd      	b.n	401532 <prvCopyDataToQueue+0x1a>
  401596:	bf00      	nop
  401598:	0040291d 	.word	0x0040291d
  40159c:	004039f5 	.word	0x004039f5

004015a0 <prvNotifyQueueSetContainer>:
  4015a0:	b530      	push	{r4, r5, lr}
  4015a2:	b083      	sub	sp, #12
  4015a4:	9001      	str	r0, [sp, #4]
  4015a6:	6d44      	ldr	r4, [r0, #84]	; 0x54
  4015a8:	b174      	cbz	r4, 4015c8 <prvNotifyQueueSetContainer+0x28>
  4015aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015ae:	429a      	cmp	r2, r3
  4015b0:	d315      	bcc.n	4015de <prvNotifyQueueSetContainer+0x3e>
  4015b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015b6:	b672      	cpsid	i
  4015b8:	f383 8811 	msr	BASEPRI, r3
  4015bc:	f3bf 8f6f 	isb	sy
  4015c0:	f3bf 8f4f 	dsb	sy
  4015c4:	b662      	cpsie	i
  4015c6:	e7fe      	b.n	4015c6 <prvNotifyQueueSetContainer+0x26>
  4015c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015cc:	b672      	cpsid	i
  4015ce:	f383 8811 	msr	BASEPRI, r3
  4015d2:	f3bf 8f6f 	isb	sy
  4015d6:	f3bf 8f4f 	dsb	sy
  4015da:	b662      	cpsie	i
  4015dc:	e7fe      	b.n	4015dc <prvNotifyQueueSetContainer+0x3c>
  4015de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015e0:	4293      	cmp	r3, r2
  4015e2:	d803      	bhi.n	4015ec <prvNotifyQueueSetContainer+0x4c>
  4015e4:	2500      	movs	r5, #0
  4015e6:	4628      	mov	r0, r5
  4015e8:	b003      	add	sp, #12
  4015ea:	bd30      	pop	{r4, r5, pc}
  4015ec:	460a      	mov	r2, r1
  4015ee:	a901      	add	r1, sp, #4
  4015f0:	4620      	mov	r0, r4
  4015f2:	4b0b      	ldr	r3, [pc, #44]	; (401620 <prvNotifyQueueSetContainer+0x80>)
  4015f4:	4798      	blx	r3
  4015f6:	4605      	mov	r5, r0
  4015f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015fe:	d10a      	bne.n	401616 <prvNotifyQueueSetContainer+0x76>
  401600:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401602:	2b00      	cmp	r3, #0
  401604:	d0ef      	beq.n	4015e6 <prvNotifyQueueSetContainer+0x46>
  401606:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40160a:	4b06      	ldr	r3, [pc, #24]	; (401624 <prvNotifyQueueSetContainer+0x84>)
  40160c:	4798      	blx	r3
  40160e:	2800      	cmp	r0, #0
  401610:	bf18      	it	ne
  401612:	2501      	movne	r5, #1
  401614:	e7e7      	b.n	4015e6 <prvNotifyQueueSetContainer+0x46>
  401616:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401618:	3301      	adds	r3, #1
  40161a:	64a3      	str	r3, [r4, #72]	; 0x48
  40161c:	e7e3      	b.n	4015e6 <prvNotifyQueueSetContainer+0x46>
  40161e:	bf00      	nop
  401620:	00401519 	.word	0x00401519
  401624:	004026f1 	.word	0x004026f1

00401628 <prvCopyDataFromQueue>:
  401628:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40162a:	b172      	cbz	r2, 40164a <prvCopyDataFromQueue+0x22>
  40162c:	b510      	push	{r4, lr}
  40162e:	4603      	mov	r3, r0
  401630:	68c4      	ldr	r4, [r0, #12]
  401632:	4414      	add	r4, r2
  401634:	60c4      	str	r4, [r0, #12]
  401636:	6840      	ldr	r0, [r0, #4]
  401638:	4284      	cmp	r4, r0
  40163a:	d301      	bcc.n	401640 <prvCopyDataFromQueue+0x18>
  40163c:	6818      	ldr	r0, [r3, #0]
  40163e:	60d8      	str	r0, [r3, #12]
  401640:	4608      	mov	r0, r1
  401642:	68d9      	ldr	r1, [r3, #12]
  401644:	4b01      	ldr	r3, [pc, #4]	; (40164c <prvCopyDataFromQueue+0x24>)
  401646:	4798      	blx	r3
  401648:	bd10      	pop	{r4, pc}
  40164a:	4770      	bx	lr
  40164c:	004039f5 	.word	0x004039f5

00401650 <prvUnlockQueue>:
  401650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401652:	4604      	mov	r4, r0
  401654:	4b22      	ldr	r3, [pc, #136]	; (4016e0 <prvUnlockQueue+0x90>)
  401656:	4798      	blx	r3
  401658:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40165a:	2b00      	cmp	r3, #0
  40165c:	dd1b      	ble.n	401696 <prvUnlockQueue+0x46>
  40165e:	4d21      	ldr	r5, [pc, #132]	; (4016e4 <prvUnlockQueue+0x94>)
  401660:	4f21      	ldr	r7, [pc, #132]	; (4016e8 <prvUnlockQueue+0x98>)
  401662:	4e22      	ldr	r6, [pc, #136]	; (4016ec <prvUnlockQueue+0x9c>)
  401664:	e00b      	b.n	40167e <prvUnlockQueue+0x2e>
  401666:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401668:	b1ab      	cbz	r3, 401696 <prvUnlockQueue+0x46>
  40166a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40166e:	47b0      	blx	r6
  401670:	b978      	cbnz	r0, 401692 <prvUnlockQueue+0x42>
  401672:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401674:	3b01      	subs	r3, #1
  401676:	64a3      	str	r3, [r4, #72]	; 0x48
  401678:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40167a:	2b00      	cmp	r3, #0
  40167c:	dd0b      	ble.n	401696 <prvUnlockQueue+0x46>
  40167e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401680:	2b00      	cmp	r3, #0
  401682:	d0f0      	beq.n	401666 <prvUnlockQueue+0x16>
  401684:	2100      	movs	r1, #0
  401686:	4620      	mov	r0, r4
  401688:	47a8      	blx	r5
  40168a:	2801      	cmp	r0, #1
  40168c:	d1f1      	bne.n	401672 <prvUnlockQueue+0x22>
  40168e:	47b8      	blx	r7
  401690:	e7ef      	b.n	401672 <prvUnlockQueue+0x22>
  401692:	47b8      	blx	r7
  401694:	e7ed      	b.n	401672 <prvUnlockQueue+0x22>
  401696:	f04f 33ff 	mov.w	r3, #4294967295
  40169a:	64a3      	str	r3, [r4, #72]	; 0x48
  40169c:	4b14      	ldr	r3, [pc, #80]	; (4016f0 <prvUnlockQueue+0xa0>)
  40169e:	4798      	blx	r3
  4016a0:	4b0f      	ldr	r3, [pc, #60]	; (4016e0 <prvUnlockQueue+0x90>)
  4016a2:	4798      	blx	r3
  4016a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016a6:	2b00      	cmp	r3, #0
  4016a8:	dd14      	ble.n	4016d4 <prvUnlockQueue+0x84>
  4016aa:	6923      	ldr	r3, [r4, #16]
  4016ac:	b193      	cbz	r3, 4016d4 <prvUnlockQueue+0x84>
  4016ae:	f104 0610 	add.w	r6, r4, #16
  4016b2:	4d0e      	ldr	r5, [pc, #56]	; (4016ec <prvUnlockQueue+0x9c>)
  4016b4:	4f0c      	ldr	r7, [pc, #48]	; (4016e8 <prvUnlockQueue+0x98>)
  4016b6:	e007      	b.n	4016c8 <prvUnlockQueue+0x78>
  4016b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016ba:	3b01      	subs	r3, #1
  4016bc:	6463      	str	r3, [r4, #68]	; 0x44
  4016be:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016c0:	2b00      	cmp	r3, #0
  4016c2:	dd07      	ble.n	4016d4 <prvUnlockQueue+0x84>
  4016c4:	6923      	ldr	r3, [r4, #16]
  4016c6:	b12b      	cbz	r3, 4016d4 <prvUnlockQueue+0x84>
  4016c8:	4630      	mov	r0, r6
  4016ca:	47a8      	blx	r5
  4016cc:	2800      	cmp	r0, #0
  4016ce:	d0f3      	beq.n	4016b8 <prvUnlockQueue+0x68>
  4016d0:	47b8      	blx	r7
  4016d2:	e7f1      	b.n	4016b8 <prvUnlockQueue+0x68>
  4016d4:	f04f 33ff 	mov.w	r3, #4294967295
  4016d8:	6463      	str	r3, [r4, #68]	; 0x44
  4016da:	4b05      	ldr	r3, [pc, #20]	; (4016f0 <prvUnlockQueue+0xa0>)
  4016dc:	4798      	blx	r3
  4016de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016e0:	00401269 	.word	0x00401269
  4016e4:	004015a1 	.word	0x004015a1
  4016e8:	0040284d 	.word	0x0040284d
  4016ec:	004026f1 	.word	0x004026f1
  4016f0:	004012b5 	.word	0x004012b5

004016f4 <xQueueGenericReset>:
  4016f4:	b538      	push	{r3, r4, r5, lr}
  4016f6:	b308      	cbz	r0, 40173c <xQueueGenericReset+0x48>
  4016f8:	4604      	mov	r4, r0
  4016fa:	460d      	mov	r5, r1
  4016fc:	4b1d      	ldr	r3, [pc, #116]	; (401774 <xQueueGenericReset+0x80>)
  4016fe:	4798      	blx	r3
  401700:	6822      	ldr	r2, [r4, #0]
  401702:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401704:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401706:	fb03 f301 	mul.w	r3, r3, r1
  40170a:	18d0      	adds	r0, r2, r3
  40170c:	6060      	str	r0, [r4, #4]
  40170e:	2000      	movs	r0, #0
  401710:	63a0      	str	r0, [r4, #56]	; 0x38
  401712:	60a2      	str	r2, [r4, #8]
  401714:	1a5b      	subs	r3, r3, r1
  401716:	4413      	add	r3, r2
  401718:	60e3      	str	r3, [r4, #12]
  40171a:	f04f 33ff 	mov.w	r3, #4294967295
  40171e:	6463      	str	r3, [r4, #68]	; 0x44
  401720:	64a3      	str	r3, [r4, #72]	; 0x48
  401722:	b9fd      	cbnz	r5, 401764 <xQueueGenericReset+0x70>
  401724:	6923      	ldr	r3, [r4, #16]
  401726:	b12b      	cbz	r3, 401734 <xQueueGenericReset+0x40>
  401728:	f104 0010 	add.w	r0, r4, #16
  40172c:	4b12      	ldr	r3, [pc, #72]	; (401778 <xQueueGenericReset+0x84>)
  40172e:	4798      	blx	r3
  401730:	2801      	cmp	r0, #1
  401732:	d00e      	beq.n	401752 <xQueueGenericReset+0x5e>
  401734:	4b11      	ldr	r3, [pc, #68]	; (40177c <xQueueGenericReset+0x88>)
  401736:	4798      	blx	r3
  401738:	2001      	movs	r0, #1
  40173a:	bd38      	pop	{r3, r4, r5, pc}
  40173c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401740:	b672      	cpsid	i
  401742:	f383 8811 	msr	BASEPRI, r3
  401746:	f3bf 8f6f 	isb	sy
  40174a:	f3bf 8f4f 	dsb	sy
  40174e:	b662      	cpsie	i
  401750:	e7fe      	b.n	401750 <xQueueGenericReset+0x5c>
  401752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401756:	4b0a      	ldr	r3, [pc, #40]	; (401780 <xQueueGenericReset+0x8c>)
  401758:	601a      	str	r2, [r3, #0]
  40175a:	f3bf 8f4f 	dsb	sy
  40175e:	f3bf 8f6f 	isb	sy
  401762:	e7e7      	b.n	401734 <xQueueGenericReset+0x40>
  401764:	f104 0010 	add.w	r0, r4, #16
  401768:	4d06      	ldr	r5, [pc, #24]	; (401784 <xQueueGenericReset+0x90>)
  40176a:	47a8      	blx	r5
  40176c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401770:	47a8      	blx	r5
  401772:	e7df      	b.n	401734 <xQueueGenericReset+0x40>
  401774:	00401269 	.word	0x00401269
  401778:	004026f1 	.word	0x004026f1
  40177c:	004012b5 	.word	0x004012b5
  401780:	e000ed04 	.word	0xe000ed04
  401784:	0040111d 	.word	0x0040111d

00401788 <xQueueGenericCreate>:
  401788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40178a:	b950      	cbnz	r0, 4017a2 <xQueueGenericCreate+0x1a>
  40178c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401790:	b672      	cpsid	i
  401792:	f383 8811 	msr	BASEPRI, r3
  401796:	f3bf 8f6f 	isb	sy
  40179a:	f3bf 8f4f 	dsb	sy
  40179e:	b662      	cpsie	i
  4017a0:	e7fe      	b.n	4017a0 <xQueueGenericCreate+0x18>
  4017a2:	4606      	mov	r6, r0
  4017a4:	4617      	mov	r7, r2
  4017a6:	460d      	mov	r5, r1
  4017a8:	b189      	cbz	r1, 4017ce <xQueueGenericCreate+0x46>
  4017aa:	fb01 f000 	mul.w	r0, r1, r0
  4017ae:	3059      	adds	r0, #89	; 0x59
  4017b0:	4b12      	ldr	r3, [pc, #72]	; (4017fc <xQueueGenericCreate+0x74>)
  4017b2:	4798      	blx	r3
  4017b4:	4604      	mov	r4, r0
  4017b6:	b9e8      	cbnz	r0, 4017f4 <xQueueGenericCreate+0x6c>
  4017b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017bc:	b672      	cpsid	i
  4017be:	f383 8811 	msr	BASEPRI, r3
  4017c2:	f3bf 8f6f 	isb	sy
  4017c6:	f3bf 8f4f 	dsb	sy
  4017ca:	b662      	cpsie	i
  4017cc:	e7fe      	b.n	4017cc <xQueueGenericCreate+0x44>
  4017ce:	2058      	movs	r0, #88	; 0x58
  4017d0:	4b0a      	ldr	r3, [pc, #40]	; (4017fc <xQueueGenericCreate+0x74>)
  4017d2:	4798      	blx	r3
  4017d4:	4604      	mov	r4, r0
  4017d6:	2800      	cmp	r0, #0
  4017d8:	d0ee      	beq.n	4017b8 <xQueueGenericCreate+0x30>
  4017da:	6020      	str	r0, [r4, #0]
  4017dc:	63e6      	str	r6, [r4, #60]	; 0x3c
  4017de:	6425      	str	r5, [r4, #64]	; 0x40
  4017e0:	2101      	movs	r1, #1
  4017e2:	4620      	mov	r0, r4
  4017e4:	4b06      	ldr	r3, [pc, #24]	; (401800 <xQueueGenericCreate+0x78>)
  4017e6:	4798      	blx	r3
  4017e8:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  4017ec:	2300      	movs	r3, #0
  4017ee:	6563      	str	r3, [r4, #84]	; 0x54
  4017f0:	4620      	mov	r0, r4
  4017f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017f4:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4017f8:	6003      	str	r3, [r0, #0]
  4017fa:	e7ef      	b.n	4017dc <xQueueGenericCreate+0x54>
  4017fc:	004014c5 	.word	0x004014c5
  401800:	004016f5 	.word	0x004016f5

00401804 <xQueueGenericSend>:
  401804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401808:	b085      	sub	sp, #20
  40180a:	9201      	str	r2, [sp, #4]
  40180c:	b1b8      	cbz	r0, 40183e <xQueueGenericSend+0x3a>
  40180e:	4604      	mov	r4, r0
  401810:	b301      	cbz	r1, 401854 <xQueueGenericSend+0x50>
  401812:	2b02      	cmp	r3, #2
  401814:	d02c      	beq.n	401870 <xQueueGenericSend+0x6c>
  401816:	461d      	mov	r5, r3
  401818:	4688      	mov	r8, r1
  40181a:	4b66      	ldr	r3, [pc, #408]	; (4019b4 <xQueueGenericSend+0x1b0>)
  40181c:	4798      	blx	r3
  40181e:	2800      	cmp	r0, #0
  401820:	d134      	bne.n	40188c <xQueueGenericSend+0x88>
  401822:	9b01      	ldr	r3, [sp, #4]
  401824:	2b00      	cmp	r3, #0
  401826:	d038      	beq.n	40189a <xQueueGenericSend+0x96>
  401828:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182c:	b672      	cpsid	i
  40182e:	f383 8811 	msr	BASEPRI, r3
  401832:	f3bf 8f6f 	isb	sy
  401836:	f3bf 8f4f 	dsb	sy
  40183a:	b662      	cpsie	i
  40183c:	e7fe      	b.n	40183c <xQueueGenericSend+0x38>
  40183e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401842:	b672      	cpsid	i
  401844:	f383 8811 	msr	BASEPRI, r3
  401848:	f3bf 8f6f 	isb	sy
  40184c:	f3bf 8f4f 	dsb	sy
  401850:	b662      	cpsie	i
  401852:	e7fe      	b.n	401852 <xQueueGenericSend+0x4e>
  401854:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401856:	2a00      	cmp	r2, #0
  401858:	d0db      	beq.n	401812 <xQueueGenericSend+0xe>
  40185a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40185e:	b672      	cpsid	i
  401860:	f383 8811 	msr	BASEPRI, r3
  401864:	f3bf 8f6f 	isb	sy
  401868:	f3bf 8f4f 	dsb	sy
  40186c:	b662      	cpsie	i
  40186e:	e7fe      	b.n	40186e <xQueueGenericSend+0x6a>
  401870:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401872:	2a01      	cmp	r2, #1
  401874:	d0cf      	beq.n	401816 <xQueueGenericSend+0x12>
  401876:	f04f 0380 	mov.w	r3, #128	; 0x80
  40187a:	b672      	cpsid	i
  40187c:	f383 8811 	msr	BASEPRI, r3
  401880:	f3bf 8f6f 	isb	sy
  401884:	f3bf 8f4f 	dsb	sy
  401888:	b662      	cpsie	i
  40188a:	e7fe      	b.n	40188a <xQueueGenericSend+0x86>
  40188c:	2700      	movs	r7, #0
  40188e:	4e4a      	ldr	r6, [pc, #296]	; (4019b8 <xQueueGenericSend+0x1b4>)
  401890:	f8df a150 	ldr.w	sl, [pc, #336]	; 4019e4 <xQueueGenericSend+0x1e0>
  401894:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4019c4 <xQueueGenericSend+0x1c0>
  401898:	e042      	b.n	401920 <xQueueGenericSend+0x11c>
  40189a:	2700      	movs	r7, #0
  40189c:	e7f7      	b.n	40188e <xQueueGenericSend+0x8a>
  40189e:	462a      	mov	r2, r5
  4018a0:	4641      	mov	r1, r8
  4018a2:	4620      	mov	r0, r4
  4018a4:	4b45      	ldr	r3, [pc, #276]	; (4019bc <xQueueGenericSend+0x1b8>)
  4018a6:	4798      	blx	r3
  4018a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4018aa:	b19b      	cbz	r3, 4018d4 <xQueueGenericSend+0xd0>
  4018ac:	4629      	mov	r1, r5
  4018ae:	4620      	mov	r0, r4
  4018b0:	4b43      	ldr	r3, [pc, #268]	; (4019c0 <xQueueGenericSend+0x1bc>)
  4018b2:	4798      	blx	r3
  4018b4:	2801      	cmp	r0, #1
  4018b6:	d107      	bne.n	4018c8 <xQueueGenericSend+0xc4>
  4018b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018bc:	4b41      	ldr	r3, [pc, #260]	; (4019c4 <xQueueGenericSend+0x1c0>)
  4018be:	601a      	str	r2, [r3, #0]
  4018c0:	f3bf 8f4f 	dsb	sy
  4018c4:	f3bf 8f6f 	isb	sy
  4018c8:	4b3f      	ldr	r3, [pc, #252]	; (4019c8 <xQueueGenericSend+0x1c4>)
  4018ca:	4798      	blx	r3
  4018cc:	2001      	movs	r0, #1
  4018ce:	b005      	add	sp, #20
  4018d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018d6:	b173      	cbz	r3, 4018f6 <xQueueGenericSend+0xf2>
  4018d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018dc:	4b3b      	ldr	r3, [pc, #236]	; (4019cc <xQueueGenericSend+0x1c8>)
  4018de:	4798      	blx	r3
  4018e0:	2801      	cmp	r0, #1
  4018e2:	d1f1      	bne.n	4018c8 <xQueueGenericSend+0xc4>
  4018e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018e8:	4b36      	ldr	r3, [pc, #216]	; (4019c4 <xQueueGenericSend+0x1c0>)
  4018ea:	601a      	str	r2, [r3, #0]
  4018ec:	f3bf 8f4f 	dsb	sy
  4018f0:	f3bf 8f6f 	isb	sy
  4018f4:	e7e8      	b.n	4018c8 <xQueueGenericSend+0xc4>
  4018f6:	2800      	cmp	r0, #0
  4018f8:	d0e6      	beq.n	4018c8 <xQueueGenericSend+0xc4>
  4018fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018fe:	4b31      	ldr	r3, [pc, #196]	; (4019c4 <xQueueGenericSend+0x1c0>)
  401900:	601a      	str	r2, [r3, #0]
  401902:	f3bf 8f4f 	dsb	sy
  401906:	f3bf 8f6f 	isb	sy
  40190a:	e7dd      	b.n	4018c8 <xQueueGenericSend+0xc4>
  40190c:	4b2e      	ldr	r3, [pc, #184]	; (4019c8 <xQueueGenericSend+0x1c4>)
  40190e:	4798      	blx	r3
  401910:	2000      	movs	r0, #0
  401912:	e7dc      	b.n	4018ce <xQueueGenericSend+0xca>
  401914:	4620      	mov	r0, r4
  401916:	4b2e      	ldr	r3, [pc, #184]	; (4019d0 <xQueueGenericSend+0x1cc>)
  401918:	4798      	blx	r3
  40191a:	4b2e      	ldr	r3, [pc, #184]	; (4019d4 <xQueueGenericSend+0x1d0>)
  40191c:	4798      	blx	r3
  40191e:	2701      	movs	r7, #1
  401920:	47b0      	blx	r6
  401922:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401924:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401926:	429a      	cmp	r2, r3
  401928:	d3b9      	bcc.n	40189e <xQueueGenericSend+0x9a>
  40192a:	2d02      	cmp	r5, #2
  40192c:	d0b7      	beq.n	40189e <xQueueGenericSend+0x9a>
  40192e:	9b01      	ldr	r3, [sp, #4]
  401930:	2b00      	cmp	r3, #0
  401932:	d0eb      	beq.n	40190c <xQueueGenericSend+0x108>
  401934:	b90f      	cbnz	r7, 40193a <xQueueGenericSend+0x136>
  401936:	a802      	add	r0, sp, #8
  401938:	47d0      	blx	sl
  40193a:	4b23      	ldr	r3, [pc, #140]	; (4019c8 <xQueueGenericSend+0x1c4>)
  40193c:	4798      	blx	r3
  40193e:	4b26      	ldr	r3, [pc, #152]	; (4019d8 <xQueueGenericSend+0x1d4>)
  401940:	4798      	blx	r3
  401942:	47b0      	blx	r6
  401944:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401946:	f1b3 3fff 	cmp.w	r3, #4294967295
  40194a:	d101      	bne.n	401950 <xQueueGenericSend+0x14c>
  40194c:	2300      	movs	r3, #0
  40194e:	6463      	str	r3, [r4, #68]	; 0x44
  401950:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401952:	f1b3 3fff 	cmp.w	r3, #4294967295
  401956:	d101      	bne.n	40195c <xQueueGenericSend+0x158>
  401958:	2300      	movs	r3, #0
  40195a:	64a3      	str	r3, [r4, #72]	; 0x48
  40195c:	4b1a      	ldr	r3, [pc, #104]	; (4019c8 <xQueueGenericSend+0x1c4>)
  40195e:	4798      	blx	r3
  401960:	a901      	add	r1, sp, #4
  401962:	a802      	add	r0, sp, #8
  401964:	4b1d      	ldr	r3, [pc, #116]	; (4019dc <xQueueGenericSend+0x1d8>)
  401966:	4798      	blx	r3
  401968:	b9e0      	cbnz	r0, 4019a4 <xQueueGenericSend+0x1a0>
  40196a:	47b0      	blx	r6
  40196c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401970:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  401972:	4b15      	ldr	r3, [pc, #84]	; (4019c8 <xQueueGenericSend+0x1c4>)
  401974:	4798      	blx	r3
  401976:	45bb      	cmp	fp, r7
  401978:	d1cc      	bne.n	401914 <xQueueGenericSend+0x110>
  40197a:	9901      	ldr	r1, [sp, #4]
  40197c:	f104 0010 	add.w	r0, r4, #16
  401980:	4b17      	ldr	r3, [pc, #92]	; (4019e0 <xQueueGenericSend+0x1dc>)
  401982:	4798      	blx	r3
  401984:	4620      	mov	r0, r4
  401986:	4b12      	ldr	r3, [pc, #72]	; (4019d0 <xQueueGenericSend+0x1cc>)
  401988:	4798      	blx	r3
  40198a:	4b12      	ldr	r3, [pc, #72]	; (4019d4 <xQueueGenericSend+0x1d0>)
  40198c:	4798      	blx	r3
  40198e:	2800      	cmp	r0, #0
  401990:	d1c5      	bne.n	40191e <xQueueGenericSend+0x11a>
  401992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401996:	f8c9 3000 	str.w	r3, [r9]
  40199a:	f3bf 8f4f 	dsb	sy
  40199e:	f3bf 8f6f 	isb	sy
  4019a2:	e7bc      	b.n	40191e <xQueueGenericSend+0x11a>
  4019a4:	4620      	mov	r0, r4
  4019a6:	4b0a      	ldr	r3, [pc, #40]	; (4019d0 <xQueueGenericSend+0x1cc>)
  4019a8:	4798      	blx	r3
  4019aa:	4b0a      	ldr	r3, [pc, #40]	; (4019d4 <xQueueGenericSend+0x1d0>)
  4019ac:	4798      	blx	r3
  4019ae:	2000      	movs	r0, #0
  4019b0:	e78d      	b.n	4018ce <xQueueGenericSend+0xca>
  4019b2:	bf00      	nop
  4019b4:	00402859 	.word	0x00402859
  4019b8:	00401269 	.word	0x00401269
  4019bc:	00401519 	.word	0x00401519
  4019c0:	004015a1 	.word	0x004015a1
  4019c4:	e000ed04 	.word	0xe000ed04
  4019c8:	004012b5 	.word	0x004012b5
  4019cc:	004026f1 	.word	0x004026f1
  4019d0:	00401651 	.word	0x00401651
  4019d4:	004022d5 	.word	0x004022d5
  4019d8:	0040216d 	.word	0x0040216d
  4019dc:	004027b9 	.word	0x004027b9
  4019e0:	004025ed 	.word	0x004025ed
  4019e4:	00402789 	.word	0x00402789

004019e8 <xQueueGenericSendFromISR>:
  4019e8:	2800      	cmp	r0, #0
  4019ea:	d036      	beq.n	401a5a <xQueueGenericSendFromISR+0x72>
  4019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4019f0:	4604      	mov	r4, r0
  4019f2:	2900      	cmp	r1, #0
  4019f4:	d03c      	beq.n	401a70 <xQueueGenericSendFromISR+0x88>
  4019f6:	2b02      	cmp	r3, #2
  4019f8:	d048      	beq.n	401a8c <xQueueGenericSendFromISR+0xa4>
  4019fa:	461e      	mov	r6, r3
  4019fc:	4615      	mov	r5, r2
  4019fe:	4688      	mov	r8, r1
  401a00:	4b35      	ldr	r3, [pc, #212]	; (401ad8 <xQueueGenericSendFromISR+0xf0>)
  401a02:	4798      	blx	r3
  401a04:	f3ef 8711 	mrs	r7, BASEPRI
  401a08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a0c:	b672      	cpsid	i
  401a0e:	f383 8811 	msr	BASEPRI, r3
  401a12:	f3bf 8f6f 	isb	sy
  401a16:	f3bf 8f4f 	dsb	sy
  401a1a:	b662      	cpsie	i
  401a1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a20:	429a      	cmp	r2, r3
  401a22:	d301      	bcc.n	401a28 <xQueueGenericSendFromISR+0x40>
  401a24:	2e02      	cmp	r6, #2
  401a26:	d14f      	bne.n	401ac8 <xQueueGenericSendFromISR+0xe0>
  401a28:	4632      	mov	r2, r6
  401a2a:	4641      	mov	r1, r8
  401a2c:	4620      	mov	r0, r4
  401a2e:	4b2b      	ldr	r3, [pc, #172]	; (401adc <xQueueGenericSendFromISR+0xf4>)
  401a30:	4798      	blx	r3
  401a32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a34:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a38:	d141      	bne.n	401abe <xQueueGenericSendFromISR+0xd6>
  401a3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d033      	beq.n	401aa8 <xQueueGenericSendFromISR+0xc0>
  401a40:	4631      	mov	r1, r6
  401a42:	4620      	mov	r0, r4
  401a44:	4b26      	ldr	r3, [pc, #152]	; (401ae0 <xQueueGenericSendFromISR+0xf8>)
  401a46:	4798      	blx	r3
  401a48:	2d00      	cmp	r5, #0
  401a4a:	d03f      	beq.n	401acc <xQueueGenericSendFromISR+0xe4>
  401a4c:	2801      	cmp	r0, #1
  401a4e:	d13d      	bne.n	401acc <xQueueGenericSendFromISR+0xe4>
  401a50:	6028      	str	r0, [r5, #0]
  401a52:	f387 8811 	msr	BASEPRI, r7
  401a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a5e:	b672      	cpsid	i
  401a60:	f383 8811 	msr	BASEPRI, r3
  401a64:	f3bf 8f6f 	isb	sy
  401a68:	f3bf 8f4f 	dsb	sy
  401a6c:	b662      	cpsie	i
  401a6e:	e7fe      	b.n	401a6e <xQueueGenericSendFromISR+0x86>
  401a70:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401a72:	2800      	cmp	r0, #0
  401a74:	d0bf      	beq.n	4019f6 <xQueueGenericSendFromISR+0xe>
  401a76:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a7a:	b672      	cpsid	i
  401a7c:	f383 8811 	msr	BASEPRI, r3
  401a80:	f3bf 8f6f 	isb	sy
  401a84:	f3bf 8f4f 	dsb	sy
  401a88:	b662      	cpsie	i
  401a8a:	e7fe      	b.n	401a8a <xQueueGenericSendFromISR+0xa2>
  401a8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401a8e:	2801      	cmp	r0, #1
  401a90:	d0b3      	beq.n	4019fa <xQueueGenericSendFromISR+0x12>
  401a92:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a96:	b672      	cpsid	i
  401a98:	f383 8811 	msr	BASEPRI, r3
  401a9c:	f3bf 8f6f 	isb	sy
  401aa0:	f3bf 8f4f 	dsb	sy
  401aa4:	b662      	cpsie	i
  401aa6:	e7fe      	b.n	401aa6 <xQueueGenericSendFromISR+0xbe>
  401aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401aaa:	b18b      	cbz	r3, 401ad0 <xQueueGenericSendFromISR+0xe8>
  401aac:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ab0:	4b0c      	ldr	r3, [pc, #48]	; (401ae4 <xQueueGenericSendFromISR+0xfc>)
  401ab2:	4798      	blx	r3
  401ab4:	b175      	cbz	r5, 401ad4 <xQueueGenericSendFromISR+0xec>
  401ab6:	b168      	cbz	r0, 401ad4 <xQueueGenericSendFromISR+0xec>
  401ab8:	2001      	movs	r0, #1
  401aba:	6028      	str	r0, [r5, #0]
  401abc:	e7c9      	b.n	401a52 <xQueueGenericSendFromISR+0x6a>
  401abe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ac0:	3301      	adds	r3, #1
  401ac2:	64a3      	str	r3, [r4, #72]	; 0x48
  401ac4:	2001      	movs	r0, #1
  401ac6:	e7c4      	b.n	401a52 <xQueueGenericSendFromISR+0x6a>
  401ac8:	2000      	movs	r0, #0
  401aca:	e7c2      	b.n	401a52 <xQueueGenericSendFromISR+0x6a>
  401acc:	2001      	movs	r0, #1
  401ace:	e7c0      	b.n	401a52 <xQueueGenericSendFromISR+0x6a>
  401ad0:	2001      	movs	r0, #1
  401ad2:	e7be      	b.n	401a52 <xQueueGenericSendFromISR+0x6a>
  401ad4:	2001      	movs	r0, #1
  401ad6:	e7bc      	b.n	401a52 <xQueueGenericSendFromISR+0x6a>
  401ad8:	00401461 	.word	0x00401461
  401adc:	00401519 	.word	0x00401519
  401ae0:	004015a1 	.word	0x004015a1
  401ae4:	004026f1 	.word	0x004026f1

00401ae8 <xQueueGiveFromISR>:
  401ae8:	b170      	cbz	r0, 401b08 <xQueueGiveFromISR+0x20>
  401aea:	b570      	push	{r4, r5, r6, lr}
  401aec:	4604      	mov	r4, r0
  401aee:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401af0:	b1ab      	cbz	r3, 401b1e <xQueueGiveFromISR+0x36>
  401af2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401af6:	b672      	cpsid	i
  401af8:	f383 8811 	msr	BASEPRI, r3
  401afc:	f3bf 8f6f 	isb	sy
  401b00:	f3bf 8f4f 	dsb	sy
  401b04:	b662      	cpsie	i
  401b06:	e7fe      	b.n	401b06 <xQueueGiveFromISR+0x1e>
  401b08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b0c:	b672      	cpsid	i
  401b0e:	f383 8811 	msr	BASEPRI, r3
  401b12:	f3bf 8f6f 	isb	sy
  401b16:	f3bf 8f4f 	dsb	sy
  401b1a:	b662      	cpsie	i
  401b1c:	e7fe      	b.n	401b1c <xQueueGiveFromISR+0x34>
  401b1e:	6803      	ldr	r3, [r0, #0]
  401b20:	b333      	cbz	r3, 401b70 <xQueueGiveFromISR+0x88>
  401b22:	460d      	mov	r5, r1
  401b24:	4b25      	ldr	r3, [pc, #148]	; (401bbc <xQueueGiveFromISR+0xd4>)
  401b26:	4798      	blx	r3
  401b28:	f3ef 8611 	mrs	r6, BASEPRI
  401b2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b30:	b672      	cpsid	i
  401b32:	f383 8811 	msr	BASEPRI, r3
  401b36:	f3bf 8f6f 	isb	sy
  401b3a:	f3bf 8f4f 	dsb	sy
  401b3e:	b662      	cpsie	i
  401b40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b44:	429a      	cmp	r2, r3
  401b46:	d231      	bcs.n	401bac <xQueueGiveFromISR+0xc4>
  401b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b4a:	3301      	adds	r3, #1
  401b4c:	63a3      	str	r3, [r4, #56]	; 0x38
  401b4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b50:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b54:	d125      	bne.n	401ba2 <xQueueGiveFromISR+0xba>
  401b56:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401b58:	b1c3      	cbz	r3, 401b8c <xQueueGiveFromISR+0xa4>
  401b5a:	2100      	movs	r1, #0
  401b5c:	4620      	mov	r0, r4
  401b5e:	4b18      	ldr	r3, [pc, #96]	; (401bc0 <xQueueGiveFromISR+0xd8>)
  401b60:	4798      	blx	r3
  401b62:	b32d      	cbz	r5, 401bb0 <xQueueGiveFromISR+0xc8>
  401b64:	2801      	cmp	r0, #1
  401b66:	d123      	bne.n	401bb0 <xQueueGiveFromISR+0xc8>
  401b68:	6028      	str	r0, [r5, #0]
  401b6a:	f386 8811 	msr	BASEPRI, r6
  401b6e:	bd70      	pop	{r4, r5, r6, pc}
  401b70:	6843      	ldr	r3, [r0, #4]
  401b72:	2b00      	cmp	r3, #0
  401b74:	d0d5      	beq.n	401b22 <xQueueGiveFromISR+0x3a>
  401b76:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b7a:	b672      	cpsid	i
  401b7c:	f383 8811 	msr	BASEPRI, r3
  401b80:	f3bf 8f6f 	isb	sy
  401b84:	f3bf 8f4f 	dsb	sy
  401b88:	b662      	cpsie	i
  401b8a:	e7fe      	b.n	401b8a <xQueueGiveFromISR+0xa2>
  401b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b8e:	b18b      	cbz	r3, 401bb4 <xQueueGiveFromISR+0xcc>
  401b90:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b94:	4b0b      	ldr	r3, [pc, #44]	; (401bc4 <xQueueGiveFromISR+0xdc>)
  401b96:	4798      	blx	r3
  401b98:	b175      	cbz	r5, 401bb8 <xQueueGiveFromISR+0xd0>
  401b9a:	b168      	cbz	r0, 401bb8 <xQueueGiveFromISR+0xd0>
  401b9c:	2001      	movs	r0, #1
  401b9e:	6028      	str	r0, [r5, #0]
  401ba0:	e7e3      	b.n	401b6a <xQueueGiveFromISR+0x82>
  401ba2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ba4:	3301      	adds	r3, #1
  401ba6:	64a3      	str	r3, [r4, #72]	; 0x48
  401ba8:	2001      	movs	r0, #1
  401baa:	e7de      	b.n	401b6a <xQueueGiveFromISR+0x82>
  401bac:	2000      	movs	r0, #0
  401bae:	e7dc      	b.n	401b6a <xQueueGiveFromISR+0x82>
  401bb0:	2001      	movs	r0, #1
  401bb2:	e7da      	b.n	401b6a <xQueueGiveFromISR+0x82>
  401bb4:	2001      	movs	r0, #1
  401bb6:	e7d8      	b.n	401b6a <xQueueGiveFromISR+0x82>
  401bb8:	2001      	movs	r0, #1
  401bba:	e7d6      	b.n	401b6a <xQueueGiveFromISR+0x82>
  401bbc:	00401461 	.word	0x00401461
  401bc0:	004015a1 	.word	0x004015a1
  401bc4:	004026f1 	.word	0x004026f1

00401bc8 <xQueueGenericReceive>:
  401bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bcc:	b084      	sub	sp, #16
  401bce:	9201      	str	r2, [sp, #4]
  401bd0:	b198      	cbz	r0, 401bfa <xQueueGenericReceive+0x32>
  401bd2:	4604      	mov	r4, r0
  401bd4:	b1e1      	cbz	r1, 401c10 <xQueueGenericReceive+0x48>
  401bd6:	4698      	mov	r8, r3
  401bd8:	460f      	mov	r7, r1
  401bda:	4b61      	ldr	r3, [pc, #388]	; (401d60 <xQueueGenericReceive+0x198>)
  401bdc:	4798      	blx	r3
  401bde:	bb28      	cbnz	r0, 401c2c <xQueueGenericReceive+0x64>
  401be0:	9b01      	ldr	r3, [sp, #4]
  401be2:	b353      	cbz	r3, 401c3a <xQueueGenericReceive+0x72>
  401be4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401be8:	b672      	cpsid	i
  401bea:	f383 8811 	msr	BASEPRI, r3
  401bee:	f3bf 8f6f 	isb	sy
  401bf2:	f3bf 8f4f 	dsb	sy
  401bf6:	b662      	cpsie	i
  401bf8:	e7fe      	b.n	401bf8 <xQueueGenericReceive+0x30>
  401bfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bfe:	b672      	cpsid	i
  401c00:	f383 8811 	msr	BASEPRI, r3
  401c04:	f3bf 8f6f 	isb	sy
  401c08:	f3bf 8f4f 	dsb	sy
  401c0c:	b662      	cpsie	i
  401c0e:	e7fe      	b.n	401c0e <xQueueGenericReceive+0x46>
  401c10:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c12:	2a00      	cmp	r2, #0
  401c14:	d0df      	beq.n	401bd6 <xQueueGenericReceive+0xe>
  401c16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c1a:	b672      	cpsid	i
  401c1c:	f383 8811 	msr	BASEPRI, r3
  401c20:	f3bf 8f6f 	isb	sy
  401c24:	f3bf 8f4f 	dsb	sy
  401c28:	b662      	cpsie	i
  401c2a:	e7fe      	b.n	401c2a <xQueueGenericReceive+0x62>
  401c2c:	2600      	movs	r6, #0
  401c2e:	4d4d      	ldr	r5, [pc, #308]	; (401d64 <xQueueGenericReceive+0x19c>)
  401c30:	f8df a160 	ldr.w	sl, [pc, #352]	; 401d94 <xQueueGenericReceive+0x1cc>
  401c34:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401d74 <xQueueGenericReceive+0x1ac>
  401c38:	e04b      	b.n	401cd2 <xQueueGenericReceive+0x10a>
  401c3a:	2600      	movs	r6, #0
  401c3c:	e7f7      	b.n	401c2e <xQueueGenericReceive+0x66>
  401c3e:	68e5      	ldr	r5, [r4, #12]
  401c40:	4639      	mov	r1, r7
  401c42:	4620      	mov	r0, r4
  401c44:	4b48      	ldr	r3, [pc, #288]	; (401d68 <xQueueGenericReceive+0x1a0>)
  401c46:	4798      	blx	r3
  401c48:	f1b8 0f00 	cmp.w	r8, #0
  401c4c:	d11d      	bne.n	401c8a <xQueueGenericReceive+0xc2>
  401c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c50:	3b01      	subs	r3, #1
  401c52:	63a3      	str	r3, [r4, #56]	; 0x38
  401c54:	6823      	ldr	r3, [r4, #0]
  401c56:	b913      	cbnz	r3, 401c5e <xQueueGenericReceive+0x96>
  401c58:	4b44      	ldr	r3, [pc, #272]	; (401d6c <xQueueGenericReceive+0x1a4>)
  401c5a:	4798      	blx	r3
  401c5c:	6060      	str	r0, [r4, #4]
  401c5e:	6923      	ldr	r3, [r4, #16]
  401c60:	b16b      	cbz	r3, 401c7e <xQueueGenericReceive+0xb6>
  401c62:	f104 0010 	add.w	r0, r4, #16
  401c66:	4b42      	ldr	r3, [pc, #264]	; (401d70 <xQueueGenericReceive+0x1a8>)
  401c68:	4798      	blx	r3
  401c6a:	2801      	cmp	r0, #1
  401c6c:	d107      	bne.n	401c7e <xQueueGenericReceive+0xb6>
  401c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c72:	4b40      	ldr	r3, [pc, #256]	; (401d74 <xQueueGenericReceive+0x1ac>)
  401c74:	601a      	str	r2, [r3, #0]
  401c76:	f3bf 8f4f 	dsb	sy
  401c7a:	f3bf 8f6f 	isb	sy
  401c7e:	4b3e      	ldr	r3, [pc, #248]	; (401d78 <xQueueGenericReceive+0x1b0>)
  401c80:	4798      	blx	r3
  401c82:	2001      	movs	r0, #1
  401c84:	b004      	add	sp, #16
  401c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c8a:	60e5      	str	r5, [r4, #12]
  401c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c8e:	2b00      	cmp	r3, #0
  401c90:	d0f5      	beq.n	401c7e <xQueueGenericReceive+0xb6>
  401c92:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c96:	4b36      	ldr	r3, [pc, #216]	; (401d70 <xQueueGenericReceive+0x1a8>)
  401c98:	4798      	blx	r3
  401c9a:	2800      	cmp	r0, #0
  401c9c:	d0ef      	beq.n	401c7e <xQueueGenericReceive+0xb6>
  401c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ca2:	4b34      	ldr	r3, [pc, #208]	; (401d74 <xQueueGenericReceive+0x1ac>)
  401ca4:	601a      	str	r2, [r3, #0]
  401ca6:	f3bf 8f4f 	dsb	sy
  401caa:	f3bf 8f6f 	isb	sy
  401cae:	e7e6      	b.n	401c7e <xQueueGenericReceive+0xb6>
  401cb0:	4b31      	ldr	r3, [pc, #196]	; (401d78 <xQueueGenericReceive+0x1b0>)
  401cb2:	4798      	blx	r3
  401cb4:	2000      	movs	r0, #0
  401cb6:	e7e5      	b.n	401c84 <xQueueGenericReceive+0xbc>
  401cb8:	47a8      	blx	r5
  401cba:	6860      	ldr	r0, [r4, #4]
  401cbc:	4b2f      	ldr	r3, [pc, #188]	; (401d7c <xQueueGenericReceive+0x1b4>)
  401cbe:	4798      	blx	r3
  401cc0:	4b2d      	ldr	r3, [pc, #180]	; (401d78 <xQueueGenericReceive+0x1b0>)
  401cc2:	4798      	blx	r3
  401cc4:	e030      	b.n	401d28 <xQueueGenericReceive+0x160>
  401cc6:	4620      	mov	r0, r4
  401cc8:	4b2d      	ldr	r3, [pc, #180]	; (401d80 <xQueueGenericReceive+0x1b8>)
  401cca:	4798      	blx	r3
  401ccc:	4b2d      	ldr	r3, [pc, #180]	; (401d84 <xQueueGenericReceive+0x1bc>)
  401cce:	4798      	blx	r3
  401cd0:	2601      	movs	r6, #1
  401cd2:	47a8      	blx	r5
  401cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401cd6:	2b00      	cmp	r3, #0
  401cd8:	d1b1      	bne.n	401c3e <xQueueGenericReceive+0x76>
  401cda:	9b01      	ldr	r3, [sp, #4]
  401cdc:	2b00      	cmp	r3, #0
  401cde:	d0e7      	beq.n	401cb0 <xQueueGenericReceive+0xe8>
  401ce0:	b90e      	cbnz	r6, 401ce6 <xQueueGenericReceive+0x11e>
  401ce2:	a802      	add	r0, sp, #8
  401ce4:	47d0      	blx	sl
  401ce6:	4b24      	ldr	r3, [pc, #144]	; (401d78 <xQueueGenericReceive+0x1b0>)
  401ce8:	4798      	blx	r3
  401cea:	4b27      	ldr	r3, [pc, #156]	; (401d88 <xQueueGenericReceive+0x1c0>)
  401cec:	4798      	blx	r3
  401cee:	47a8      	blx	r5
  401cf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cf6:	d101      	bne.n	401cfc <xQueueGenericReceive+0x134>
  401cf8:	2300      	movs	r3, #0
  401cfa:	6463      	str	r3, [r4, #68]	; 0x44
  401cfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d02:	d101      	bne.n	401d08 <xQueueGenericReceive+0x140>
  401d04:	2300      	movs	r3, #0
  401d06:	64a3      	str	r3, [r4, #72]	; 0x48
  401d08:	4b1b      	ldr	r3, [pc, #108]	; (401d78 <xQueueGenericReceive+0x1b0>)
  401d0a:	4798      	blx	r3
  401d0c:	a901      	add	r1, sp, #4
  401d0e:	a802      	add	r0, sp, #8
  401d10:	4b1e      	ldr	r3, [pc, #120]	; (401d8c <xQueueGenericReceive+0x1c4>)
  401d12:	4798      	blx	r3
  401d14:	b9e8      	cbnz	r0, 401d52 <xQueueGenericReceive+0x18a>
  401d16:	47a8      	blx	r5
  401d18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  401d1a:	4b17      	ldr	r3, [pc, #92]	; (401d78 <xQueueGenericReceive+0x1b0>)
  401d1c:	4798      	blx	r3
  401d1e:	2e00      	cmp	r6, #0
  401d20:	d1d1      	bne.n	401cc6 <xQueueGenericReceive+0xfe>
  401d22:	6823      	ldr	r3, [r4, #0]
  401d24:	2b00      	cmp	r3, #0
  401d26:	d0c7      	beq.n	401cb8 <xQueueGenericReceive+0xf0>
  401d28:	9901      	ldr	r1, [sp, #4]
  401d2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d2e:	4b18      	ldr	r3, [pc, #96]	; (401d90 <xQueueGenericReceive+0x1c8>)
  401d30:	4798      	blx	r3
  401d32:	4620      	mov	r0, r4
  401d34:	4b12      	ldr	r3, [pc, #72]	; (401d80 <xQueueGenericReceive+0x1b8>)
  401d36:	4798      	blx	r3
  401d38:	4b12      	ldr	r3, [pc, #72]	; (401d84 <xQueueGenericReceive+0x1bc>)
  401d3a:	4798      	blx	r3
  401d3c:	2800      	cmp	r0, #0
  401d3e:	d1c7      	bne.n	401cd0 <xQueueGenericReceive+0x108>
  401d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d44:	f8c9 3000 	str.w	r3, [r9]
  401d48:	f3bf 8f4f 	dsb	sy
  401d4c:	f3bf 8f6f 	isb	sy
  401d50:	e7be      	b.n	401cd0 <xQueueGenericReceive+0x108>
  401d52:	4620      	mov	r0, r4
  401d54:	4b0a      	ldr	r3, [pc, #40]	; (401d80 <xQueueGenericReceive+0x1b8>)
  401d56:	4798      	blx	r3
  401d58:	4b0a      	ldr	r3, [pc, #40]	; (401d84 <xQueueGenericReceive+0x1bc>)
  401d5a:	4798      	blx	r3
  401d5c:	2000      	movs	r0, #0
  401d5e:	e791      	b.n	401c84 <xQueueGenericReceive+0xbc>
  401d60:	00402859 	.word	0x00402859
  401d64:	00401269 	.word	0x00401269
  401d68:	00401629 	.word	0x00401629
  401d6c:	004029d9 	.word	0x004029d9
  401d70:	004026f1 	.word	0x004026f1
  401d74:	e000ed04 	.word	0xe000ed04
  401d78:	004012b5 	.word	0x004012b5
  401d7c:	00402879 	.word	0x00402879
  401d80:	00401651 	.word	0x00401651
  401d84:	004022d5 	.word	0x004022d5
  401d88:	0040216d 	.word	0x0040216d
  401d8c:	004027b9 	.word	0x004027b9
  401d90:	004025ed 	.word	0x004025ed
  401d94:	00402789 	.word	0x00402789

00401d98 <vQueueAddToRegistry>:
  401d98:	b410      	push	{r4}
  401d9a:	4b0b      	ldr	r3, [pc, #44]	; (401dc8 <vQueueAddToRegistry+0x30>)
  401d9c:	681b      	ldr	r3, [r3, #0]
  401d9e:	b153      	cbz	r3, 401db6 <vQueueAddToRegistry+0x1e>
  401da0:	2301      	movs	r3, #1
  401da2:	4c09      	ldr	r4, [pc, #36]	; (401dc8 <vQueueAddToRegistry+0x30>)
  401da4:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401da8:	b132      	cbz	r2, 401db8 <vQueueAddToRegistry+0x20>
  401daa:	3301      	adds	r3, #1
  401dac:	2b08      	cmp	r3, #8
  401dae:	d1f9      	bne.n	401da4 <vQueueAddToRegistry+0xc>
  401db0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401db4:	4770      	bx	lr
  401db6:	2300      	movs	r3, #0
  401db8:	4a03      	ldr	r2, [pc, #12]	; (401dc8 <vQueueAddToRegistry+0x30>)
  401dba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  401dbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401dc2:	6058      	str	r0, [r3, #4]
  401dc4:	e7f4      	b.n	401db0 <vQueueAddToRegistry+0x18>
  401dc6:	bf00      	nop
  401dc8:	20400de4 	.word	0x20400de4

00401dcc <vQueueWaitForMessageRestricted>:
  401dcc:	b570      	push	{r4, r5, r6, lr}
  401dce:	4604      	mov	r4, r0
  401dd0:	460d      	mov	r5, r1
  401dd2:	4616      	mov	r6, r2
  401dd4:	4b0f      	ldr	r3, [pc, #60]	; (401e14 <vQueueWaitForMessageRestricted+0x48>)
  401dd6:	4798      	blx	r3
  401dd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401dda:	f1b3 3fff 	cmp.w	r3, #4294967295
  401dde:	d00b      	beq.n	401df8 <vQueueWaitForMessageRestricted+0x2c>
  401de0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401de2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401de6:	d00a      	beq.n	401dfe <vQueueWaitForMessageRestricted+0x32>
  401de8:	4b0b      	ldr	r3, [pc, #44]	; (401e18 <vQueueWaitForMessageRestricted+0x4c>)
  401dea:	4798      	blx	r3
  401dec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401dee:	b14b      	cbz	r3, 401e04 <vQueueWaitForMessageRestricted+0x38>
  401df0:	4620      	mov	r0, r4
  401df2:	4b0a      	ldr	r3, [pc, #40]	; (401e1c <vQueueWaitForMessageRestricted+0x50>)
  401df4:	4798      	blx	r3
  401df6:	bd70      	pop	{r4, r5, r6, pc}
  401df8:	2300      	movs	r3, #0
  401dfa:	6463      	str	r3, [r4, #68]	; 0x44
  401dfc:	e7f0      	b.n	401de0 <vQueueWaitForMessageRestricted+0x14>
  401dfe:	2300      	movs	r3, #0
  401e00:	64a3      	str	r3, [r4, #72]	; 0x48
  401e02:	e7f1      	b.n	401de8 <vQueueWaitForMessageRestricted+0x1c>
  401e04:	4632      	mov	r2, r6
  401e06:	4629      	mov	r1, r5
  401e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e0c:	4b04      	ldr	r3, [pc, #16]	; (401e20 <vQueueWaitForMessageRestricted+0x54>)
  401e0e:	4798      	blx	r3
  401e10:	e7ee      	b.n	401df0 <vQueueWaitForMessageRestricted+0x24>
  401e12:	bf00      	nop
  401e14:	00401269 	.word	0x00401269
  401e18:	004012b5 	.word	0x004012b5
  401e1c:	00401651 	.word	0x00401651
  401e20:	00402671 	.word	0x00402671

00401e24 <prvResetNextTaskUnblockTime>:
  401e24:	4b08      	ldr	r3, [pc, #32]	; (401e48 <prvResetNextTaskUnblockTime+0x24>)
  401e26:	681b      	ldr	r3, [r3, #0]
  401e28:	681b      	ldr	r3, [r3, #0]
  401e2a:	b13b      	cbz	r3, 401e3c <prvResetNextTaskUnblockTime+0x18>
  401e2c:	4b06      	ldr	r3, [pc, #24]	; (401e48 <prvResetNextTaskUnblockTime+0x24>)
  401e2e:	681b      	ldr	r3, [r3, #0]
  401e30:	68db      	ldr	r3, [r3, #12]
  401e32:	68db      	ldr	r3, [r3, #12]
  401e34:	685a      	ldr	r2, [r3, #4]
  401e36:	4b05      	ldr	r3, [pc, #20]	; (401e4c <prvResetNextTaskUnblockTime+0x28>)
  401e38:	601a      	str	r2, [r3, #0]
  401e3a:	4770      	bx	lr
  401e3c:	f04f 32ff 	mov.w	r2, #4294967295
  401e40:	4b02      	ldr	r3, [pc, #8]	; (401e4c <prvResetNextTaskUnblockTime+0x28>)
  401e42:	601a      	str	r2, [r3, #0]
  401e44:	4770      	bx	lr
  401e46:	bf00      	nop
  401e48:	20400c70 	.word	0x20400c70
  401e4c:	20400d1c 	.word	0x20400d1c

00401e50 <prvAddCurrentTaskToDelayedList>:
  401e50:	b510      	push	{r4, lr}
  401e52:	4b0f      	ldr	r3, [pc, #60]	; (401e90 <prvAddCurrentTaskToDelayedList+0x40>)
  401e54:	681b      	ldr	r3, [r3, #0]
  401e56:	6058      	str	r0, [r3, #4]
  401e58:	4b0e      	ldr	r3, [pc, #56]	; (401e94 <prvAddCurrentTaskToDelayedList+0x44>)
  401e5a:	681b      	ldr	r3, [r3, #0]
  401e5c:	4298      	cmp	r0, r3
  401e5e:	d30e      	bcc.n	401e7e <prvAddCurrentTaskToDelayedList+0x2e>
  401e60:	4604      	mov	r4, r0
  401e62:	4b0d      	ldr	r3, [pc, #52]	; (401e98 <prvAddCurrentTaskToDelayedList+0x48>)
  401e64:	6818      	ldr	r0, [r3, #0]
  401e66:	4b0a      	ldr	r3, [pc, #40]	; (401e90 <prvAddCurrentTaskToDelayedList+0x40>)
  401e68:	6819      	ldr	r1, [r3, #0]
  401e6a:	3104      	adds	r1, #4
  401e6c:	4b0b      	ldr	r3, [pc, #44]	; (401e9c <prvAddCurrentTaskToDelayedList+0x4c>)
  401e6e:	4798      	blx	r3
  401e70:	4b0b      	ldr	r3, [pc, #44]	; (401ea0 <prvAddCurrentTaskToDelayedList+0x50>)
  401e72:	681b      	ldr	r3, [r3, #0]
  401e74:	429c      	cmp	r4, r3
  401e76:	d201      	bcs.n	401e7c <prvAddCurrentTaskToDelayedList+0x2c>
  401e78:	4b09      	ldr	r3, [pc, #36]	; (401ea0 <prvAddCurrentTaskToDelayedList+0x50>)
  401e7a:	601c      	str	r4, [r3, #0]
  401e7c:	bd10      	pop	{r4, pc}
  401e7e:	4b09      	ldr	r3, [pc, #36]	; (401ea4 <prvAddCurrentTaskToDelayedList+0x54>)
  401e80:	6818      	ldr	r0, [r3, #0]
  401e82:	4b03      	ldr	r3, [pc, #12]	; (401e90 <prvAddCurrentTaskToDelayedList+0x40>)
  401e84:	6819      	ldr	r1, [r3, #0]
  401e86:	3104      	adds	r1, #4
  401e88:	4b04      	ldr	r3, [pc, #16]	; (401e9c <prvAddCurrentTaskToDelayedList+0x4c>)
  401e8a:	4798      	blx	r3
  401e8c:	bd10      	pop	{r4, pc}
  401e8e:	bf00      	nop
  401e90:	20400c6c 	.word	0x20400c6c
  401e94:	20400d64 	.word	0x20400d64
  401e98:	20400c70 	.word	0x20400c70
  401e9c:	00401151 	.word	0x00401151
  401ea0:	20400d1c 	.word	0x20400d1c
  401ea4:	20400c74 	.word	0x20400c74

00401ea8 <xTaskGenericCreate>:
  401ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401eac:	b083      	sub	sp, #12
  401eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401eb0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401eb4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  401eb6:	b160      	cbz	r0, 401ed2 <xTaskGenericCreate+0x2a>
  401eb8:	2d04      	cmp	r5, #4
  401eba:	d915      	bls.n	401ee8 <xTaskGenericCreate+0x40>
  401ebc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ec0:	b672      	cpsid	i
  401ec2:	f383 8811 	msr	BASEPRI, r3
  401ec6:	f3bf 8f6f 	isb	sy
  401eca:	f3bf 8f4f 	dsb	sy
  401ece:	b662      	cpsie	i
  401ed0:	e7fe      	b.n	401ed0 <xTaskGenericCreate+0x28>
  401ed2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ed6:	b672      	cpsid	i
  401ed8:	f383 8811 	msr	BASEPRI, r3
  401edc:	f3bf 8f6f 	isb	sy
  401ee0:	f3bf 8f4f 	dsb	sy
  401ee4:	b662      	cpsie	i
  401ee6:	e7fe      	b.n	401ee6 <xTaskGenericCreate+0x3e>
  401ee8:	9001      	str	r0, [sp, #4]
  401eea:	4698      	mov	r8, r3
  401eec:	4691      	mov	r9, r2
  401eee:	460f      	mov	r7, r1
  401ef0:	b936      	cbnz	r6, 401f00 <xTaskGenericCreate+0x58>
  401ef2:	0090      	lsls	r0, r2, #2
  401ef4:	4b62      	ldr	r3, [pc, #392]	; (402080 <xTaskGenericCreate+0x1d8>)
  401ef6:	4798      	blx	r3
  401ef8:	4606      	mov	r6, r0
  401efa:	2800      	cmp	r0, #0
  401efc:	f000 809e 	beq.w	40203c <xTaskGenericCreate+0x194>
  401f00:	2058      	movs	r0, #88	; 0x58
  401f02:	4b5f      	ldr	r3, [pc, #380]	; (402080 <xTaskGenericCreate+0x1d8>)
  401f04:	4798      	blx	r3
  401f06:	4604      	mov	r4, r0
  401f08:	2800      	cmp	r0, #0
  401f0a:	f000 8094 	beq.w	402036 <xTaskGenericCreate+0x18e>
  401f0e:	6306      	str	r6, [r0, #48]	; 0x30
  401f10:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401f14:	21a5      	movs	r1, #165	; 0xa5
  401f16:	4630      	mov	r0, r6
  401f18:	4b5a      	ldr	r3, [pc, #360]	; (402084 <xTaskGenericCreate+0x1dc>)
  401f1a:	4798      	blx	r3
  401f1c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401f20:	444e      	add	r6, r9
  401f22:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401f24:	eb03 0386 	add.w	r3, r3, r6, lsl #2
  401f28:	f023 0607 	bic.w	r6, r3, #7
  401f2c:	783b      	ldrb	r3, [r7, #0]
  401f2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  401f32:	783b      	ldrb	r3, [r7, #0]
  401f34:	2b00      	cmp	r3, #0
  401f36:	f040 8084 	bne.w	402042 <xTaskGenericCreate+0x19a>
  401f3a:	2700      	movs	r7, #0
  401f3c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401f40:	62e5      	str	r5, [r4, #44]	; 0x2c
  401f42:	64a5      	str	r5, [r4, #72]	; 0x48
  401f44:	64e7      	str	r7, [r4, #76]	; 0x4c
  401f46:	f104 0904 	add.w	r9, r4, #4
  401f4a:	4648      	mov	r0, r9
  401f4c:	f8df b184 	ldr.w	fp, [pc, #388]	; 4020d4 <xTaskGenericCreate+0x22c>
  401f50:	47d8      	blx	fp
  401f52:	f104 0018 	add.w	r0, r4, #24
  401f56:	47d8      	blx	fp
  401f58:	6124      	str	r4, [r4, #16]
  401f5a:	f1c5 0305 	rsb	r3, r5, #5
  401f5e:	61a3      	str	r3, [r4, #24]
  401f60:	6264      	str	r4, [r4, #36]	; 0x24
  401f62:	6527      	str	r7, [r4, #80]	; 0x50
  401f64:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
  401f68:	4642      	mov	r2, r8
  401f6a:	9901      	ldr	r1, [sp, #4]
  401f6c:	4630      	mov	r0, r6
  401f6e:	4b46      	ldr	r3, [pc, #280]	; (402088 <xTaskGenericCreate+0x1e0>)
  401f70:	4798      	blx	r3
  401f72:	6020      	str	r0, [r4, #0]
  401f74:	f1ba 0f00 	cmp.w	sl, #0
  401f78:	d001      	beq.n	401f7e <xTaskGenericCreate+0xd6>
  401f7a:	f8ca 4000 	str.w	r4, [sl]
  401f7e:	4b43      	ldr	r3, [pc, #268]	; (40208c <xTaskGenericCreate+0x1e4>)
  401f80:	4798      	blx	r3
  401f82:	4a43      	ldr	r2, [pc, #268]	; (402090 <xTaskGenericCreate+0x1e8>)
  401f84:	6813      	ldr	r3, [r2, #0]
  401f86:	3301      	adds	r3, #1
  401f88:	6013      	str	r3, [r2, #0]
  401f8a:	4b42      	ldr	r3, [pc, #264]	; (402094 <xTaskGenericCreate+0x1ec>)
  401f8c:	681b      	ldr	r3, [r3, #0]
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d166      	bne.n	402060 <xTaskGenericCreate+0x1b8>
  401f92:	4b40      	ldr	r3, [pc, #256]	; (402094 <xTaskGenericCreate+0x1ec>)
  401f94:	601c      	str	r4, [r3, #0]
  401f96:	6813      	ldr	r3, [r2, #0]
  401f98:	2b01      	cmp	r3, #1
  401f9a:	d121      	bne.n	401fe0 <xTaskGenericCreate+0x138>
  401f9c:	4f3e      	ldr	r7, [pc, #248]	; (402098 <xTaskGenericCreate+0x1f0>)
  401f9e:	4638      	mov	r0, r7
  401fa0:	4e3e      	ldr	r6, [pc, #248]	; (40209c <xTaskGenericCreate+0x1f4>)
  401fa2:	47b0      	blx	r6
  401fa4:	f107 0014 	add.w	r0, r7, #20
  401fa8:	47b0      	blx	r6
  401faa:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401fae:	47b0      	blx	r6
  401fb0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401fb4:	47b0      	blx	r6
  401fb6:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401fba:	47b0      	blx	r6
  401fbc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4020d8 <xTaskGenericCreate+0x230>
  401fc0:	4640      	mov	r0, r8
  401fc2:	47b0      	blx	r6
  401fc4:	4f36      	ldr	r7, [pc, #216]	; (4020a0 <xTaskGenericCreate+0x1f8>)
  401fc6:	4638      	mov	r0, r7
  401fc8:	47b0      	blx	r6
  401fca:	4836      	ldr	r0, [pc, #216]	; (4020a4 <xTaskGenericCreate+0x1fc>)
  401fcc:	47b0      	blx	r6
  401fce:	4836      	ldr	r0, [pc, #216]	; (4020a8 <xTaskGenericCreate+0x200>)
  401fd0:	47b0      	blx	r6
  401fd2:	4836      	ldr	r0, [pc, #216]	; (4020ac <xTaskGenericCreate+0x204>)
  401fd4:	47b0      	blx	r6
  401fd6:	4b36      	ldr	r3, [pc, #216]	; (4020b0 <xTaskGenericCreate+0x208>)
  401fd8:	f8c3 8000 	str.w	r8, [r3]
  401fdc:	4b35      	ldr	r3, [pc, #212]	; (4020b4 <xTaskGenericCreate+0x20c>)
  401fde:	601f      	str	r7, [r3, #0]
  401fe0:	4a35      	ldr	r2, [pc, #212]	; (4020b8 <xTaskGenericCreate+0x210>)
  401fe2:	6813      	ldr	r3, [r2, #0]
  401fe4:	3301      	adds	r3, #1
  401fe6:	6013      	str	r3, [r2, #0]
  401fe8:	6423      	str	r3, [r4, #64]	; 0x40
  401fea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401fec:	4a33      	ldr	r2, [pc, #204]	; (4020bc <xTaskGenericCreate+0x214>)
  401fee:	6811      	ldr	r1, [r2, #0]
  401ff0:	2301      	movs	r3, #1
  401ff2:	4083      	lsls	r3, r0
  401ff4:	430b      	orrs	r3, r1
  401ff6:	6013      	str	r3, [r2, #0]
  401ff8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ffc:	4649      	mov	r1, r9
  401ffe:	4b26      	ldr	r3, [pc, #152]	; (402098 <xTaskGenericCreate+0x1f0>)
  402000:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402004:	4b2e      	ldr	r3, [pc, #184]	; (4020c0 <xTaskGenericCreate+0x218>)
  402006:	4798      	blx	r3
  402008:	4b2e      	ldr	r3, [pc, #184]	; (4020c4 <xTaskGenericCreate+0x21c>)
  40200a:	4798      	blx	r3
  40200c:	4b2e      	ldr	r3, [pc, #184]	; (4020c8 <xTaskGenericCreate+0x220>)
  40200e:	681b      	ldr	r3, [r3, #0]
  402010:	2b00      	cmp	r3, #0
  402012:	d031      	beq.n	402078 <xTaskGenericCreate+0x1d0>
  402014:	4b1f      	ldr	r3, [pc, #124]	; (402094 <xTaskGenericCreate+0x1ec>)
  402016:	681b      	ldr	r3, [r3, #0]
  402018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40201a:	429d      	cmp	r5, r3
  40201c:	d92e      	bls.n	40207c <xTaskGenericCreate+0x1d4>
  40201e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402022:	4b2a      	ldr	r3, [pc, #168]	; (4020cc <xTaskGenericCreate+0x224>)
  402024:	601a      	str	r2, [r3, #0]
  402026:	f3bf 8f4f 	dsb	sy
  40202a:	f3bf 8f6f 	isb	sy
  40202e:	2001      	movs	r0, #1
  402030:	b003      	add	sp, #12
  402032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402036:	4630      	mov	r0, r6
  402038:	4b25      	ldr	r3, [pc, #148]	; (4020d0 <xTaskGenericCreate+0x228>)
  40203a:	4798      	blx	r3
  40203c:	f04f 30ff 	mov.w	r0, #4294967295
  402040:	e7f6      	b.n	402030 <xTaskGenericCreate+0x188>
  402042:	463b      	mov	r3, r7
  402044:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402048:	3709      	adds	r7, #9
  40204a:	7859      	ldrb	r1, [r3, #1]
  40204c:	f802 1f01 	strb.w	r1, [r2, #1]!
  402050:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402054:	2900      	cmp	r1, #0
  402056:	f43f af70 	beq.w	401f3a <xTaskGenericCreate+0x92>
  40205a:	42bb      	cmp	r3, r7
  40205c:	d1f5      	bne.n	40204a <xTaskGenericCreate+0x1a2>
  40205e:	e76c      	b.n	401f3a <xTaskGenericCreate+0x92>
  402060:	4b19      	ldr	r3, [pc, #100]	; (4020c8 <xTaskGenericCreate+0x220>)
  402062:	681b      	ldr	r3, [r3, #0]
  402064:	2b00      	cmp	r3, #0
  402066:	d1bb      	bne.n	401fe0 <xTaskGenericCreate+0x138>
  402068:	4b0a      	ldr	r3, [pc, #40]	; (402094 <xTaskGenericCreate+0x1ec>)
  40206a:	681b      	ldr	r3, [r3, #0]
  40206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40206e:	429d      	cmp	r5, r3
  402070:	d3b6      	bcc.n	401fe0 <xTaskGenericCreate+0x138>
  402072:	4b08      	ldr	r3, [pc, #32]	; (402094 <xTaskGenericCreate+0x1ec>)
  402074:	601c      	str	r4, [r3, #0]
  402076:	e7b3      	b.n	401fe0 <xTaskGenericCreate+0x138>
  402078:	2001      	movs	r0, #1
  40207a:	e7d9      	b.n	402030 <xTaskGenericCreate+0x188>
  40207c:	2001      	movs	r0, #1
  40207e:	e7d7      	b.n	402030 <xTaskGenericCreate+0x188>
  402080:	004014c5 	.word	0x004014c5
  402084:	00403b29 	.word	0x00403b29
  402088:	0040121d 	.word	0x0040121d
  40208c:	00401269 	.word	0x00401269
  402090:	20400cdc 	.word	0x20400cdc
  402094:	20400c6c 	.word	0x20400c6c
  402098:	20400c78 	.word	0x20400c78
  40209c:	0040111d 	.word	0x0040111d
  4020a0:	20400d08 	.word	0x20400d08
  4020a4:	20400d24 	.word	0x20400d24
  4020a8:	20400d50 	.word	0x20400d50
  4020ac:	20400d3c 	.word	0x20400d3c
  4020b0:	20400c70 	.word	0x20400c70
  4020b4:	20400c74 	.word	0x20400c74
  4020b8:	20400ce8 	.word	0x20400ce8
  4020bc:	20400cf0 	.word	0x20400cf0
  4020c0:	00401139 	.word	0x00401139
  4020c4:	004012b5 	.word	0x004012b5
  4020c8:	20400d38 	.word	0x20400d38
  4020cc:	e000ed04 	.word	0xe000ed04
  4020d0:	004014f5 	.word	0x004014f5
  4020d4:	00401133 	.word	0x00401133
  4020d8:	20400cf4 	.word	0x20400cf4

004020dc <vTaskStartScheduler>:
  4020dc:	b510      	push	{r4, lr}
  4020de:	b084      	sub	sp, #16
  4020e0:	2300      	movs	r3, #0
  4020e2:	9303      	str	r3, [sp, #12]
  4020e4:	9302      	str	r3, [sp, #8]
  4020e6:	9301      	str	r3, [sp, #4]
  4020e8:	9300      	str	r3, [sp, #0]
  4020ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4020ee:	4917      	ldr	r1, [pc, #92]	; (40214c <vTaskStartScheduler+0x70>)
  4020f0:	4817      	ldr	r0, [pc, #92]	; (402150 <vTaskStartScheduler+0x74>)
  4020f2:	4c18      	ldr	r4, [pc, #96]	; (402154 <vTaskStartScheduler+0x78>)
  4020f4:	47a0      	blx	r4
  4020f6:	2801      	cmp	r0, #1
  4020f8:	d00b      	beq.n	402112 <vTaskStartScheduler+0x36>
  4020fa:	bb20      	cbnz	r0, 402146 <vTaskStartScheduler+0x6a>
  4020fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402100:	b672      	cpsid	i
  402102:	f383 8811 	msr	BASEPRI, r3
  402106:	f3bf 8f6f 	isb	sy
  40210a:	f3bf 8f4f 	dsb	sy
  40210e:	b662      	cpsie	i
  402110:	e7fe      	b.n	402110 <vTaskStartScheduler+0x34>
  402112:	4b11      	ldr	r3, [pc, #68]	; (402158 <vTaskStartScheduler+0x7c>)
  402114:	4798      	blx	r3
  402116:	2801      	cmp	r0, #1
  402118:	d1ef      	bne.n	4020fa <vTaskStartScheduler+0x1e>
  40211a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40211e:	b672      	cpsid	i
  402120:	f383 8811 	msr	BASEPRI, r3
  402124:	f3bf 8f6f 	isb	sy
  402128:	f3bf 8f4f 	dsb	sy
  40212c:	b662      	cpsie	i
  40212e:	f04f 32ff 	mov.w	r2, #4294967295
  402132:	4b0a      	ldr	r3, [pc, #40]	; (40215c <vTaskStartScheduler+0x80>)
  402134:	601a      	str	r2, [r3, #0]
  402136:	2201      	movs	r2, #1
  402138:	4b09      	ldr	r3, [pc, #36]	; (402160 <vTaskStartScheduler+0x84>)
  40213a:	601a      	str	r2, [r3, #0]
  40213c:	2200      	movs	r2, #0
  40213e:	4b09      	ldr	r3, [pc, #36]	; (402164 <vTaskStartScheduler+0x88>)
  402140:	601a      	str	r2, [r3, #0]
  402142:	4b09      	ldr	r3, [pc, #36]	; (402168 <vTaskStartScheduler+0x8c>)
  402144:	4798      	blx	r3
  402146:	b004      	add	sp, #16
  402148:	bd10      	pop	{r4, pc}
  40214a:	bf00      	nop
  40214c:	00408c40 	.word	0x00408c40
  402150:	00402485 	.word	0x00402485
  402154:	00401ea9 	.word	0x00401ea9
  402158:	00402ac5 	.word	0x00402ac5
  40215c:	20400d1c 	.word	0x20400d1c
  402160:	20400d38 	.word	0x20400d38
  402164:	20400d64 	.word	0x20400d64
  402168:	0040139d 	.word	0x0040139d

0040216c <vTaskSuspendAll>:
  40216c:	4a02      	ldr	r2, [pc, #8]	; (402178 <vTaskSuspendAll+0xc>)
  40216e:	6813      	ldr	r3, [r2, #0]
  402170:	3301      	adds	r3, #1
  402172:	6013      	str	r3, [r2, #0]
  402174:	4770      	bx	lr
  402176:	bf00      	nop
  402178:	20400ce4 	.word	0x20400ce4

0040217c <xTaskGetTickCount>:
  40217c:	4b01      	ldr	r3, [pc, #4]	; (402184 <xTaskGetTickCount+0x8>)
  40217e:	6818      	ldr	r0, [r3, #0]
  402180:	4770      	bx	lr
  402182:	bf00      	nop
  402184:	20400d64 	.word	0x20400d64
=======
  4012aa:	2000      	movs	r0, #0
}
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop
  4012b0:	400e0600 	.word	0x400e0600

004012b4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012b8:	fa03 f000 	lsl.w	r0, r3, r0
  4012bc:	4b01      	ldr	r3, [pc, #4]	; (4012c4 <pmc_enable_pck+0x10>)
  4012be:	6018      	str	r0, [r3, #0]
  4012c0:	4770      	bx	lr
  4012c2:	bf00      	nop
  4012c4:	400e0600 	.word	0x400e0600

004012c8 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4012c8:	4770      	bx	lr
	...

004012cc <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4012cc:	4a10      	ldr	r2, [pc, #64]	; (401310 <pmc_enable_waitmode+0x44>)
  4012ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4012d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4012d8:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4012da:	6a11      	ldr	r1, [r2, #32]
  4012dc:	4b0d      	ldr	r3, [pc, #52]	; (401314 <pmc_enable_waitmode+0x48>)
  4012de:	430b      	orrs	r3, r1
  4012e0:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012e4:	f013 0f08 	tst.w	r3, #8
  4012e8:	d0fb      	beq.n	4012e2 <pmc_enable_waitmode+0x16>
  4012ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4012ee:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4012f0:	3b01      	subs	r3, #1
  4012f2:	d1fc      	bne.n	4012ee <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4012f4:	4a06      	ldr	r2, [pc, #24]	; (401310 <pmc_enable_waitmode+0x44>)
  4012f6:	6a13      	ldr	r3, [r2, #32]
  4012f8:	f013 0f08 	tst.w	r3, #8
  4012fc:	d0fb      	beq.n	4012f6 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4012fe:	4a04      	ldr	r2, [pc, #16]	; (401310 <pmc_enable_waitmode+0x44>)
  401300:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401302:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40130a:	6713      	str	r3, [r2, #112]	; 0x70
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop
  401310:	400e0600 	.word	0x400e0600
  401314:	00370004 	.word	0x00370004

00401318 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  40131c:	1e43      	subs	r3, r0, #1
  40131e:	2b04      	cmp	r3, #4
  401320:	f200 8107 	bhi.w	401532 <pmc_sleep+0x21a>
  401324:	e8df f013 	tbh	[pc, r3, lsl #1]
  401328:	00050005 	.word	0x00050005
  40132c:	00150015 	.word	0x00150015
  401330:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401332:	4a81      	ldr	r2, [pc, #516]	; (401538 <pmc_sleep+0x220>)
  401334:	6913      	ldr	r3, [r2, #16]
  401336:	f023 0304 	bic.w	r3, r3, #4
  40133a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40133c:	2201      	movs	r2, #1
  40133e:	4b7f      	ldr	r3, [pc, #508]	; (40153c <pmc_sleep+0x224>)
  401340:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401342:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401346:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  40134c:	bf30      	wfi
  40134e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401352:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401354:	2803      	cmp	r0, #3
  401356:	bf0c      	ite	eq
  401358:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40135a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40135e:	4b78      	ldr	r3, [pc, #480]	; (401540 <pmc_sleep+0x228>)
  401360:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401362:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401364:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401368:	2200      	movs	r2, #0
  40136a:	4b74      	ldr	r3, [pc, #464]	; (40153c <pmc_sleep+0x224>)
  40136c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40136e:	2201      	movs	r2, #1
  401370:	4b74      	ldr	r3, [pc, #464]	; (401544 <pmc_sleep+0x22c>)
  401372:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401374:	4b74      	ldr	r3, [pc, #464]	; (401548 <pmc_sleep+0x230>)
  401376:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401378:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40137a:	4a74      	ldr	r2, [pc, #464]	; (40154c <pmc_sleep+0x234>)
  40137c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401380:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401382:	4a73      	ldr	r2, [pc, #460]	; (401550 <pmc_sleep+0x238>)
  401384:	433a      	orrs	r2, r7
  401386:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401388:	f005 0903 	and.w	r9, r5, #3
  40138c:	f1b9 0f01 	cmp.w	r9, #1
  401390:	f240 8089 	bls.w	4014a6 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401394:	f025 0103 	bic.w	r1, r5, #3
  401398:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40139c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40139e:	461a      	mov	r2, r3
  4013a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013a2:	f013 0f08 	tst.w	r3, #8
  4013a6:	d0fb      	beq.n	4013a0 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4013a8:	f011 0f70 	tst.w	r1, #112	; 0x70
  4013ac:	d008      	beq.n	4013c0 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4013ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4013b2:	4b65      	ldr	r3, [pc, #404]	; (401548 <pmc_sleep+0x230>)
  4013b4:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013b6:	461a      	mov	r2, r3
  4013b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ba:	f013 0f08 	tst.w	r3, #8
  4013be:	d0fb      	beq.n	4013b8 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4013c0:	4b64      	ldr	r3, [pc, #400]	; (401554 <pmc_sleep+0x23c>)
  4013c2:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4013c4:	4a60      	ldr	r2, [pc, #384]	; (401548 <pmc_sleep+0x230>)
  4013c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4013cc:	d0fb      	beq.n	4013c6 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4013ce:	4a5e      	ldr	r2, [pc, #376]	; (401548 <pmc_sleep+0x230>)
  4013d0:	6a11      	ldr	r1, [r2, #32]
  4013d2:	4b61      	ldr	r3, [pc, #388]	; (401558 <pmc_sleep+0x240>)
  4013d4:	400b      	ands	r3, r1
  4013d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013da:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4013dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013e2:	d0fb      	beq.n	4013dc <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4013e4:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4013e8:	4a58      	ldr	r2, [pc, #352]	; (40154c <pmc_sleep+0x234>)
  4013ea:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4013ec:	2c04      	cmp	r4, #4
  4013ee:	d05c      	beq.n	4014aa <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4013f0:	4c52      	ldr	r4, [pc, #328]	; (40153c <pmc_sleep+0x224>)
  4013f2:	2301      	movs	r3, #1
  4013f4:	7023      	strb	r3, [r4, #0]
  4013f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013fa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4013fc:	4b57      	ldr	r3, [pc, #348]	; (40155c <pmc_sleep+0x244>)
  4013fe:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401400:	b672      	cpsid	i
  401402:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  401406:	2300      	movs	r3, #0
  401408:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40140a:	f017 0f02 	tst.w	r7, #2
  40140e:	d055      	beq.n	4014bc <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401410:	4a4d      	ldr	r2, [pc, #308]	; (401548 <pmc_sleep+0x230>)
  401412:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401414:	4952      	ldr	r1, [pc, #328]	; (401560 <pmc_sleep+0x248>)
  401416:	4019      	ands	r1, r3
  401418:	4b52      	ldr	r3, [pc, #328]	; (401564 <pmc_sleep+0x24c>)
  40141a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40141c:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40141e:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401420:	4b51      	ldr	r3, [pc, #324]	; (401568 <pmc_sleep+0x250>)
  401422:	400b      	ands	r3, r1
  401424:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401428:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40142a:	4b50      	ldr	r3, [pc, #320]	; (40156c <pmc_sleep+0x254>)
  40142c:	4033      	ands	r3, r6
  40142e:	2b00      	cmp	r3, #0
  401430:	d06e      	beq.n	401510 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401432:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401436:	4b44      	ldr	r3, [pc, #272]	; (401548 <pmc_sleep+0x230>)
  401438:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40143a:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40143c:	f1b9 0f02 	cmp.w	r9, #2
  401440:	d104      	bne.n	40144c <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401442:	4a41      	ldr	r2, [pc, #260]	; (401548 <pmc_sleep+0x230>)
  401444:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401446:	f013 0f02 	tst.w	r3, #2
  40144a:	d0fb      	beq.n	401444 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  40144c:	4a3e      	ldr	r2, [pc, #248]	; (401548 <pmc_sleep+0x230>)
  40144e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401454:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401458:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40145a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40145c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40145e:	f013 0f08 	tst.w	r3, #8
  401462:	d0fb      	beq.n	40145c <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401464:	4b39      	ldr	r3, [pc, #228]	; (40154c <pmc_sleep+0x234>)
  401466:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40146a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40146e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401470:	461a      	mov	r2, r3
  401472:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401474:	f013 0f08 	tst.w	r3, #8
  401478:	d0fb      	beq.n	401472 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40147a:	4a33      	ldr	r2, [pc, #204]	; (401548 <pmc_sleep+0x230>)
  40147c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40147e:	420b      	tst	r3, r1
  401480:	d0fc      	beq.n	40147c <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401482:	2200      	movs	r2, #0
  401484:	4b2f      	ldr	r3, [pc, #188]	; (401544 <pmc_sleep+0x22c>)
  401486:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401488:	4b39      	ldr	r3, [pc, #228]	; (401570 <pmc_sleep+0x258>)
  40148a:	681b      	ldr	r3, [r3, #0]
  40148c:	b11b      	cbz	r3, 401496 <pmc_sleep+0x17e>
			callback_clocks_restored();
  40148e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401490:	2200      	movs	r2, #0
  401492:	4b37      	ldr	r3, [pc, #220]	; (401570 <pmc_sleep+0x258>)
  401494:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  401496:	2201      	movs	r2, #1
  401498:	4b28      	ldr	r3, [pc, #160]	; (40153c <pmc_sleep+0x224>)
  40149a:	701a      	strb	r2, [r3, #0]
  40149c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4014a0:	b662      	cpsie	i
  4014a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4014a6:	4629      	mov	r1, r5
  4014a8:	e77e      	b.n	4013a8 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4014aa:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4014ae:	6a11      	ldr	r1, [r2, #32]
  4014b0:	4b30      	ldr	r3, [pc, #192]	; (401574 <pmc_sleep+0x25c>)
  4014b2:	400b      	ands	r3, r1
  4014b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014b8:	6213      	str	r3, [r2, #32]
  4014ba:	e799      	b.n	4013f0 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4014bc:	f017 0f01 	tst.w	r7, #1
  4014c0:	d0b3      	beq.n	40142a <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4014c2:	4b21      	ldr	r3, [pc, #132]	; (401548 <pmc_sleep+0x230>)
  4014c4:	6a1b      	ldr	r3, [r3, #32]
  4014c6:	f013 0f01 	tst.w	r3, #1
  4014ca:	d10b      	bne.n	4014e4 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014cc:	491e      	ldr	r1, [pc, #120]	; (401548 <pmc_sleep+0x230>)
  4014ce:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4014d0:	4a29      	ldr	r2, [pc, #164]	; (401578 <pmc_sleep+0x260>)
  4014d2:	401a      	ands	r2, r3
  4014d4:	4b29      	ldr	r3, [pc, #164]	; (40157c <pmc_sleep+0x264>)
  4014d6:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014d8:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4014da:	460a      	mov	r2, r1
  4014dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014de:	f013 0f01 	tst.w	r3, #1
  4014e2:	d0fb      	beq.n	4014dc <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4014e4:	4b18      	ldr	r3, [pc, #96]	; (401548 <pmc_sleep+0x230>)
  4014e6:	6a1b      	ldr	r3, [r3, #32]
  4014e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014ec:	d108      	bne.n	401500 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014ee:	4a16      	ldr	r2, [pc, #88]	; (401548 <pmc_sleep+0x230>)
  4014f0:	6a11      	ldr	r1, [r2, #32]
  4014f2:	4b23      	ldr	r3, [pc, #140]	; (401580 <pmc_sleep+0x268>)
  4014f4:	430b      	orrs	r3, r1
  4014f6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4014f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4014fe:	d0fb      	beq.n	4014f8 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401500:	4a11      	ldr	r2, [pc, #68]	; (401548 <pmc_sleep+0x230>)
  401502:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401504:	4b18      	ldr	r3, [pc, #96]	; (401568 <pmc_sleep+0x250>)
  401506:	400b      	ands	r3, r1
  401508:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40150c:	6213      	str	r3, [r2, #32]
  40150e:	e78c      	b.n	40142a <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401510:	2100      	movs	r1, #0
  401512:	e793      	b.n	40143c <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401514:	4a08      	ldr	r2, [pc, #32]	; (401538 <pmc_sleep+0x220>)
  401516:	6913      	ldr	r3, [r2, #16]
  401518:	f043 0304 	orr.w	r3, r3, #4
  40151c:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40151e:	4a19      	ldr	r2, [pc, #100]	; (401584 <pmc_sleep+0x26c>)
  401520:	4b19      	ldr	r3, [pc, #100]	; (401588 <pmc_sleep+0x270>)
  401522:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401524:	2201      	movs	r2, #1
  401526:	4b05      	ldr	r3, [pc, #20]	; (40153c <pmc_sleep+0x224>)
  401528:	701a      	strb	r2, [r3, #0]
  40152a:	f3bf 8f5f 	dmb	sy
  40152e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401530:	bf30      	wfi
  401532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401536:	bf00      	nop
  401538:	e000ed00 	.word	0xe000ed00
  40153c:	20400018 	.word	0x20400018
  401540:	004012c9 	.word	0x004012c9
  401544:	20400c70 	.word	0x20400c70
  401548:	400e0600 	.word	0x400e0600
  40154c:	400e0c00 	.word	0x400e0c00
  401550:	00370008 	.word	0x00370008
  401554:	00401241 	.word	0x00401241
  401558:	fec8ffff 	.word	0xfec8ffff
  40155c:	004012cd 	.word	0x004012cd
  401560:	fec8fffc 	.word	0xfec8fffc
  401564:	01370002 	.word	0x01370002
  401568:	ffc8ff87 	.word	0xffc8ff87
  40156c:	07ff0000 	.word	0x07ff0000
  401570:	20400c74 	.word	0x20400c74
  401574:	ffc8fffe 	.word	0xffc8fffe
  401578:	ffc8fffc 	.word	0xffc8fffc
  40157c:	00370001 	.word	0x00370001
  401580:	01370000 	.word	0x01370000
  401584:	a5000004 	.word	0xa5000004
  401588:	400e1810 	.word	0x400e1810

0040158c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40158c:	6943      	ldr	r3, [r0, #20]
  40158e:	f013 0f02 	tst.w	r3, #2
  401592:	d002      	beq.n	40159a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401594:	61c1      	str	r1, [r0, #28]
	return 0;
  401596:	2000      	movs	r0, #0
  401598:	4770      	bx	lr
		return 1;
  40159a:	2001      	movs	r0, #1
}
  40159c:	4770      	bx	lr

0040159e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40159e:	6943      	ldr	r3, [r0, #20]
  4015a0:	f013 0f01 	tst.w	r3, #1
  4015a4:	d003      	beq.n	4015ae <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4015a6:	6983      	ldr	r3, [r0, #24]
  4015a8:	700b      	strb	r3, [r1, #0]
	return 0;
  4015aa:	2000      	movs	r0, #0
  4015ac:	4770      	bx	lr
		return 1;
  4015ae:	2001      	movs	r0, #1
}
  4015b0:	4770      	bx	lr

004015b2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4015b2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4015b4:	010b      	lsls	r3, r1, #4
  4015b6:	4293      	cmp	r3, r2
  4015b8:	d914      	bls.n	4015e4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015ba:	00c9      	lsls	r1, r1, #3
  4015bc:	084b      	lsrs	r3, r1, #1
  4015be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4015c2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4015c6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015c8:	1e5c      	subs	r4, r3, #1
  4015ca:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4015ce:	428c      	cmp	r4, r1
  4015d0:	d901      	bls.n	4015d6 <usart_set_async_baudrate+0x24>
		return 1;
  4015d2:	2001      	movs	r0, #1
  4015d4:	e017      	b.n	401606 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4015d6:	6841      	ldr	r1, [r0, #4]
  4015d8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4015dc:	6041      	str	r1, [r0, #4]
  4015de:	e00c      	b.n	4015fa <usart_set_async_baudrate+0x48>
		return 1;
  4015e0:	2001      	movs	r0, #1
  4015e2:	e010      	b.n	401606 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015e4:	0859      	lsrs	r1, r3, #1
  4015e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4015ea:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4015ee:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015f0:	1e5c      	subs	r4, r3, #1
  4015f2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4015f6:	428c      	cmp	r4, r1
  4015f8:	d8f2      	bhi.n	4015e0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4015fa:	0412      	lsls	r2, r2, #16
  4015fc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401600:	431a      	orrs	r2, r3
  401602:	6202      	str	r2, [r0, #32]

	return 0;
  401604:	2000      	movs	r0, #0
}
  401606:	f85d 4b04 	ldr.w	r4, [sp], #4
  40160a:	4770      	bx	lr

0040160c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40160c:	4b08      	ldr	r3, [pc, #32]	; (401630 <usart_reset+0x24>)
  40160e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401612:	2300      	movs	r3, #0
  401614:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401616:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401618:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40161a:	2388      	movs	r3, #136	; 0x88
  40161c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40161e:	2324      	movs	r3, #36	; 0x24
  401620:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401622:	f44f 7380 	mov.w	r3, #256	; 0x100
  401626:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401628:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40162c:	6003      	str	r3, [r0, #0]
  40162e:	4770      	bx	lr
  401630:	55534100 	.word	0x55534100

00401634 <usart_init_rs232>:
{
  401634:	b570      	push	{r4, r5, r6, lr}
  401636:	4605      	mov	r5, r0
  401638:	460c      	mov	r4, r1
  40163a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40163c:	4b0f      	ldr	r3, [pc, #60]	; (40167c <usart_init_rs232+0x48>)
  40163e:	4798      	blx	r3
	ul_reg_val = 0;
  401640:	2200      	movs	r2, #0
  401642:	4b0f      	ldr	r3, [pc, #60]	; (401680 <usart_init_rs232+0x4c>)
  401644:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401646:	b1a4      	cbz	r4, 401672 <usart_init_rs232+0x3e>
  401648:	4632      	mov	r2, r6
  40164a:	6821      	ldr	r1, [r4, #0]
  40164c:	4628      	mov	r0, r5
  40164e:	4b0d      	ldr	r3, [pc, #52]	; (401684 <usart_init_rs232+0x50>)
  401650:	4798      	blx	r3
  401652:	4602      	mov	r2, r0
  401654:	b978      	cbnz	r0, 401676 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401656:	6863      	ldr	r3, [r4, #4]
  401658:	68a1      	ldr	r1, [r4, #8]
  40165a:	430b      	orrs	r3, r1
  40165c:	6921      	ldr	r1, [r4, #16]
  40165e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401660:	68e1      	ldr	r1, [r4, #12]
  401662:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401664:	4906      	ldr	r1, [pc, #24]	; (401680 <usart_init_rs232+0x4c>)
  401666:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401668:	6869      	ldr	r1, [r5, #4]
  40166a:	430b      	orrs	r3, r1
  40166c:	606b      	str	r3, [r5, #4]
}
  40166e:	4610      	mov	r0, r2
  401670:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401672:	2201      	movs	r2, #1
  401674:	e7fb      	b.n	40166e <usart_init_rs232+0x3a>
  401676:	2201      	movs	r2, #1
  401678:	e7f9      	b.n	40166e <usart_init_rs232+0x3a>
  40167a:	bf00      	nop
  40167c:	0040160d 	.word	0x0040160d
  401680:	20400c78 	.word	0x20400c78
  401684:	004015b3 	.word	0x004015b3

00401688 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401688:	2340      	movs	r3, #64	; 0x40
  40168a:	6003      	str	r3, [r0, #0]
  40168c:	4770      	bx	lr

0040168e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40168e:	2310      	movs	r3, #16
  401690:	6003      	str	r3, [r0, #0]
  401692:	4770      	bx	lr

00401694 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401694:	6943      	ldr	r3, [r0, #20]
  401696:	f013 0f02 	tst.w	r3, #2
  40169a:	d004      	beq.n	4016a6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40169c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4016a0:	61c1      	str	r1, [r0, #28]
	return 0;
  4016a2:	2000      	movs	r0, #0
  4016a4:	4770      	bx	lr
		return 1;
  4016a6:	2001      	movs	r0, #1
}
  4016a8:	4770      	bx	lr

004016aa <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4016aa:	6943      	ldr	r3, [r0, #20]
  4016ac:	f013 0f01 	tst.w	r3, #1
  4016b0:	d005      	beq.n	4016be <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016b2:	6983      	ldr	r3, [r0, #24]
  4016b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4016b8:	600b      	str	r3, [r1, #0]
	return 0;
  4016ba:	2000      	movs	r0, #0
  4016bc:	4770      	bx	lr
		return 1;
  4016be:	2001      	movs	r0, #1
}
  4016c0:	4770      	bx	lr

004016c2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4016c2:	e7fe      	b.n	4016c2 <Dummy_Handler>

004016c4 <Reset_Handler>:
{
  4016c4:	b500      	push	{lr}
  4016c6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4016c8:	4b25      	ldr	r3, [pc, #148]	; (401760 <Reset_Handler+0x9c>)
  4016ca:	4a26      	ldr	r2, [pc, #152]	; (401764 <Reset_Handler+0xa0>)
  4016cc:	429a      	cmp	r2, r3
  4016ce:	d010      	beq.n	4016f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4016d0:	4b25      	ldr	r3, [pc, #148]	; (401768 <Reset_Handler+0xa4>)
  4016d2:	4a23      	ldr	r2, [pc, #140]	; (401760 <Reset_Handler+0x9c>)
  4016d4:	429a      	cmp	r2, r3
  4016d6:	d20c      	bcs.n	4016f2 <Reset_Handler+0x2e>
  4016d8:	3b01      	subs	r3, #1
  4016da:	1a9b      	subs	r3, r3, r2
  4016dc:	f023 0303 	bic.w	r3, r3, #3
  4016e0:	3304      	adds	r3, #4
  4016e2:	4413      	add	r3, r2
  4016e4:	491f      	ldr	r1, [pc, #124]	; (401764 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4016e6:	f851 0b04 	ldr.w	r0, [r1], #4
  4016ea:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4016ee:	429a      	cmp	r2, r3
  4016f0:	d1f9      	bne.n	4016e6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4016f2:	4b1e      	ldr	r3, [pc, #120]	; (40176c <Reset_Handler+0xa8>)
  4016f4:	4a1e      	ldr	r2, [pc, #120]	; (401770 <Reset_Handler+0xac>)
  4016f6:	429a      	cmp	r2, r3
  4016f8:	d20a      	bcs.n	401710 <Reset_Handler+0x4c>
  4016fa:	3b01      	subs	r3, #1
  4016fc:	1a9b      	subs	r3, r3, r2
  4016fe:	f023 0303 	bic.w	r3, r3, #3
  401702:	3304      	adds	r3, #4
  401704:	4413      	add	r3, r2
                *pDest++ = 0;
  401706:	2100      	movs	r1, #0
  401708:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40170c:	4293      	cmp	r3, r2
  40170e:	d1fb      	bne.n	401708 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401710:	4a18      	ldr	r2, [pc, #96]	; (401774 <Reset_Handler+0xb0>)
  401712:	4b19      	ldr	r3, [pc, #100]	; (401778 <Reset_Handler+0xb4>)
  401714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401718:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40171a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40171e:	fab3 f383 	clz	r3, r3
  401722:	095b      	lsrs	r3, r3, #5
  401724:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401726:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40172c:	2200      	movs	r2, #0
  40172e:	4b13      	ldr	r3, [pc, #76]	; (40177c <Reset_Handler+0xb8>)
  401730:	701a      	strb	r2, [r3, #0]
	return flags;
  401732:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401734:	4a12      	ldr	r2, [pc, #72]	; (401780 <Reset_Handler+0xbc>)
  401736:	6813      	ldr	r3, [r2, #0]
  401738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40173c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40173e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401742:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401746:	b129      	cbz	r1, 401754 <Reset_Handler+0x90>
		cpu_irq_enable();
  401748:	2201      	movs	r2, #1
  40174a:	4b0c      	ldr	r3, [pc, #48]	; (40177c <Reset_Handler+0xb8>)
  40174c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40174e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401752:	b662      	cpsie	i
        __libc_init_array();
  401754:	4b0b      	ldr	r3, [pc, #44]	; (401784 <Reset_Handler+0xc0>)
  401756:	4798      	blx	r3
        main();
  401758:	4b0b      	ldr	r3, [pc, #44]	; (401788 <Reset_Handler+0xc4>)
  40175a:	4798      	blx	r3
  40175c:	e7fe      	b.n	40175c <Reset_Handler+0x98>
  40175e:	bf00      	nop
  401760:	20400000 	.word	0x20400000
  401764:	0040b730 	.word	0x0040b730
  401768:	204009d8 	.word	0x204009d8
  40176c:	20400e94 	.word	0x20400e94
  401770:	204009d8 	.word	0x204009d8
  401774:	e000ed00 	.word	0xe000ed00
  401778:	00400000 	.word	0x00400000
  40177c:	20400018 	.word	0x20400018
  401780:	e000ed88 	.word	0xe000ed88
  401784:	00404191 	.word	0x00404191
  401788:	00403ee9 	.word	0x00403ee9

0040178c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40178c:	4b3b      	ldr	r3, [pc, #236]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401790:	f003 0303 	and.w	r3, r3, #3
  401794:	2b01      	cmp	r3, #1
  401796:	d01d      	beq.n	4017d4 <SystemCoreClockUpdate+0x48>
  401798:	b183      	cbz	r3, 4017bc <SystemCoreClockUpdate+0x30>
  40179a:	2b02      	cmp	r3, #2
  40179c:	d036      	beq.n	40180c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40179e:	4b37      	ldr	r3, [pc, #220]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017a6:	2b70      	cmp	r3, #112	; 0x70
  4017a8:	d05f      	beq.n	40186a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4017aa:	4b34      	ldr	r3, [pc, #208]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017ae:	4934      	ldr	r1, [pc, #208]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4017b4:	680b      	ldr	r3, [r1, #0]
  4017b6:	40d3      	lsrs	r3, r2
  4017b8:	600b      	str	r3, [r1, #0]
  4017ba:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4017bc:	4b31      	ldr	r3, [pc, #196]	; (401884 <SystemCoreClockUpdate+0xf8>)
  4017be:	695b      	ldr	r3, [r3, #20]
  4017c0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4017c4:	bf14      	ite	ne
  4017c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4017ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4017ce:	4b2c      	ldr	r3, [pc, #176]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017d0:	601a      	str	r2, [r3, #0]
  4017d2:	e7e4      	b.n	40179e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017d4:	4b29      	ldr	r3, [pc, #164]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017d6:	6a1b      	ldr	r3, [r3, #32]
  4017d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4017dc:	d003      	beq.n	4017e6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4017de:	4a2a      	ldr	r2, [pc, #168]	; (401888 <SystemCoreClockUpdate+0xfc>)
  4017e0:	4b27      	ldr	r3, [pc, #156]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017e2:	601a      	str	r2, [r3, #0]
  4017e4:	e7db      	b.n	40179e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017e6:	4a29      	ldr	r2, [pc, #164]	; (40188c <SystemCoreClockUpdate+0x100>)
  4017e8:	4b25      	ldr	r3, [pc, #148]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017ec:	4b23      	ldr	r3, [pc, #140]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017ee:	6a1b      	ldr	r3, [r3, #32]
  4017f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017f4:	2b10      	cmp	r3, #16
  4017f6:	d005      	beq.n	401804 <SystemCoreClockUpdate+0x78>
  4017f8:	2b20      	cmp	r3, #32
  4017fa:	d1d0      	bne.n	40179e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4017fc:	4a22      	ldr	r2, [pc, #136]	; (401888 <SystemCoreClockUpdate+0xfc>)
  4017fe:	4b20      	ldr	r3, [pc, #128]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401800:	601a      	str	r2, [r3, #0]
          break;
  401802:	e7cc      	b.n	40179e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401804:	4a22      	ldr	r2, [pc, #136]	; (401890 <SystemCoreClockUpdate+0x104>)
  401806:	4b1e      	ldr	r3, [pc, #120]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401808:	601a      	str	r2, [r3, #0]
          break;
  40180a:	e7c8      	b.n	40179e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40180c:	4b1b      	ldr	r3, [pc, #108]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40180e:	6a1b      	ldr	r3, [r3, #32]
  401810:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401814:	d016      	beq.n	401844 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401816:	4a1c      	ldr	r2, [pc, #112]	; (401888 <SystemCoreClockUpdate+0xfc>)
  401818:	4b19      	ldr	r3, [pc, #100]	; (401880 <SystemCoreClockUpdate+0xf4>)
  40181a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40181c:	4b17      	ldr	r3, [pc, #92]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401820:	f003 0303 	and.w	r3, r3, #3
  401824:	2b02      	cmp	r3, #2
  401826:	d1ba      	bne.n	40179e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401828:	4a14      	ldr	r2, [pc, #80]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40182a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40182c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40182e:	4814      	ldr	r0, [pc, #80]	; (401880 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401830:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401834:	6803      	ldr	r3, [r0, #0]
  401836:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40183a:	b2d2      	uxtb	r2, r2
  40183c:	fbb3 f3f2 	udiv	r3, r3, r2
  401840:	6003      	str	r3, [r0, #0]
  401842:	e7ac      	b.n	40179e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401844:	4a11      	ldr	r2, [pc, #68]	; (40188c <SystemCoreClockUpdate+0x100>)
  401846:	4b0e      	ldr	r3, [pc, #56]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401848:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40184a:	4b0c      	ldr	r3, [pc, #48]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40184c:	6a1b      	ldr	r3, [r3, #32]
  40184e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401852:	2b10      	cmp	r3, #16
  401854:	d005      	beq.n	401862 <SystemCoreClockUpdate+0xd6>
  401856:	2b20      	cmp	r3, #32
  401858:	d1e0      	bne.n	40181c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40185a:	4a0b      	ldr	r2, [pc, #44]	; (401888 <SystemCoreClockUpdate+0xfc>)
  40185c:	4b08      	ldr	r3, [pc, #32]	; (401880 <SystemCoreClockUpdate+0xf4>)
  40185e:	601a      	str	r2, [r3, #0]
          break;
  401860:	e7dc      	b.n	40181c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401862:	4a0b      	ldr	r2, [pc, #44]	; (401890 <SystemCoreClockUpdate+0x104>)
  401864:	4b06      	ldr	r3, [pc, #24]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401866:	601a      	str	r2, [r3, #0]
          break;
  401868:	e7d8      	b.n	40181c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40186a:	4a05      	ldr	r2, [pc, #20]	; (401880 <SystemCoreClockUpdate+0xf4>)
  40186c:	6813      	ldr	r3, [r2, #0]
  40186e:	4909      	ldr	r1, [pc, #36]	; (401894 <SystemCoreClockUpdate+0x108>)
  401870:	fba1 1303 	umull	r1, r3, r1, r3
  401874:	085b      	lsrs	r3, r3, #1
  401876:	6013      	str	r3, [r2, #0]
  401878:	4770      	bx	lr
  40187a:	bf00      	nop
  40187c:	400e0600 	.word	0x400e0600
  401880:	2040001c 	.word	0x2040001c
  401884:	400e1810 	.word	0x400e1810
  401888:	00b71b00 	.word	0x00b71b00
  40188c:	003d0900 	.word	0x003d0900
  401890:	007a1200 	.word	0x007a1200
  401894:	aaaaaaab 	.word	0xaaaaaaab

00401898 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401898:	4b16      	ldr	r3, [pc, #88]	; (4018f4 <system_init_flash+0x5c>)
  40189a:	4298      	cmp	r0, r3
  40189c:	d913      	bls.n	4018c6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40189e:	4b16      	ldr	r3, [pc, #88]	; (4018f8 <system_init_flash+0x60>)
  4018a0:	4298      	cmp	r0, r3
  4018a2:	d915      	bls.n	4018d0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018a4:	4b15      	ldr	r3, [pc, #84]	; (4018fc <system_init_flash+0x64>)
  4018a6:	4298      	cmp	r0, r3
  4018a8:	d916      	bls.n	4018d8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4018aa:	4b15      	ldr	r3, [pc, #84]	; (401900 <system_init_flash+0x68>)
  4018ac:	4298      	cmp	r0, r3
  4018ae:	d917      	bls.n	4018e0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4018b0:	4b14      	ldr	r3, [pc, #80]	; (401904 <system_init_flash+0x6c>)
  4018b2:	4298      	cmp	r0, r3
  4018b4:	d918      	bls.n	4018e8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4018b6:	4b14      	ldr	r3, [pc, #80]	; (401908 <system_init_flash+0x70>)
  4018b8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4018ba:	bf94      	ite	ls
  4018bc:	4a13      	ldrls	r2, [pc, #76]	; (40190c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4018be:	4a14      	ldrhi	r2, [pc, #80]	; (401910 <system_init_flash+0x78>)
  4018c0:	4b14      	ldr	r3, [pc, #80]	; (401914 <system_init_flash+0x7c>)
  4018c2:	601a      	str	r2, [r3, #0]
  4018c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ca:	4b12      	ldr	r3, [pc, #72]	; (401914 <system_init_flash+0x7c>)
  4018cc:	601a      	str	r2, [r3, #0]
  4018ce:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018d0:	4a11      	ldr	r2, [pc, #68]	; (401918 <system_init_flash+0x80>)
  4018d2:	4b10      	ldr	r3, [pc, #64]	; (401914 <system_init_flash+0x7c>)
  4018d4:	601a      	str	r2, [r3, #0]
  4018d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018d8:	4a10      	ldr	r2, [pc, #64]	; (40191c <system_init_flash+0x84>)
  4018da:	4b0e      	ldr	r3, [pc, #56]	; (401914 <system_init_flash+0x7c>)
  4018dc:	601a      	str	r2, [r3, #0]
  4018de:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4018e0:	4a0f      	ldr	r2, [pc, #60]	; (401920 <system_init_flash+0x88>)
  4018e2:	4b0c      	ldr	r3, [pc, #48]	; (401914 <system_init_flash+0x7c>)
  4018e4:	601a      	str	r2, [r3, #0]
  4018e6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4018e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4018ec:	4b09      	ldr	r3, [pc, #36]	; (401914 <system_init_flash+0x7c>)
  4018ee:	601a      	str	r2, [r3, #0]
  4018f0:	4770      	bx	lr
  4018f2:	bf00      	nop
  4018f4:	015ef3bf 	.word	0x015ef3bf
  4018f8:	02bde77f 	.word	0x02bde77f
  4018fc:	041cdb3f 	.word	0x041cdb3f
  401900:	057bceff 	.word	0x057bceff
  401904:	06dac2bf 	.word	0x06dac2bf
  401908:	0839b67f 	.word	0x0839b67f
  40190c:	04000500 	.word	0x04000500
  401910:	04000600 	.word	0x04000600
  401914:	400e0c00 	.word	0x400e0c00
  401918:	04000100 	.word	0x04000100
  40191c:	04000200 	.word	0x04000200
  401920:	04000300 	.word	0x04000300

00401924 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401924:	4b0a      	ldr	r3, [pc, #40]	; (401950 <_sbrk+0x2c>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	b153      	cbz	r3, 401940 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40192a:	4b09      	ldr	r3, [pc, #36]	; (401950 <_sbrk+0x2c>)
  40192c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40192e:	181a      	adds	r2, r3, r0
  401930:	4908      	ldr	r1, [pc, #32]	; (401954 <_sbrk+0x30>)
  401932:	4291      	cmp	r1, r2
  401934:	db08      	blt.n	401948 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401936:	4610      	mov	r0, r2
  401938:	4a05      	ldr	r2, [pc, #20]	; (401950 <_sbrk+0x2c>)
  40193a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40193c:	4618      	mov	r0, r3
  40193e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401940:	4a05      	ldr	r2, [pc, #20]	; (401958 <_sbrk+0x34>)
  401942:	4b03      	ldr	r3, [pc, #12]	; (401950 <_sbrk+0x2c>)
  401944:	601a      	str	r2, [r3, #0]
  401946:	e7f0      	b.n	40192a <_sbrk+0x6>
		return (caddr_t) -1;	
  401948:	f04f 30ff 	mov.w	r0, #4294967295
}
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop
  401950:	20400c7c 	.word	0x20400c7c
  401954:	2045fffc 	.word	0x2045fffc
  401958:	20403098 	.word	0x20403098

0040195c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40195c:	f04f 30ff 	mov.w	r0, #4294967295
  401960:	4770      	bx	lr

00401962 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401966:	604b      	str	r3, [r1, #4]

	return 0;
}
  401968:	2000      	movs	r0, #0
  40196a:	4770      	bx	lr

0040196c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40196c:	2001      	movs	r0, #1
  40196e:	4770      	bx	lr

00401970 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401970:	2000      	movs	r0, #0
  401972:	4770      	bx	lr

00401974 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401974:	f100 0308 	add.w	r3, r0, #8
  401978:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40197a:	f04f 32ff 	mov.w	r2, #4294967295
  40197e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401980:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401982:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401984:	2300      	movs	r3, #0
  401986:	6003      	str	r3, [r0, #0]
  401988:	4770      	bx	lr

0040198a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40198a:	2300      	movs	r3, #0
  40198c:	6103      	str	r3, [r0, #16]
  40198e:	4770      	bx	lr

00401990 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401990:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401992:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401994:	689a      	ldr	r2, [r3, #8]
  401996:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401998:	689a      	ldr	r2, [r3, #8]
  40199a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40199c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40199e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4019a0:	6803      	ldr	r3, [r0, #0]
  4019a2:	3301      	adds	r3, #1
  4019a4:	6003      	str	r3, [r0, #0]
  4019a6:	4770      	bx	lr

004019a8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4019a8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4019aa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4019ac:	f1b5 3fff 	cmp.w	r5, #4294967295
  4019b0:	d002      	beq.n	4019b8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4019b2:	f100 0208 	add.w	r2, r0, #8
  4019b6:	e002      	b.n	4019be <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4019b8:	6902      	ldr	r2, [r0, #16]
  4019ba:	e004      	b.n	4019c6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4019bc:	461a      	mov	r2, r3
  4019be:	6853      	ldr	r3, [r2, #4]
  4019c0:	681c      	ldr	r4, [r3, #0]
  4019c2:	42a5      	cmp	r5, r4
  4019c4:	d2fa      	bcs.n	4019bc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4019c6:	6853      	ldr	r3, [r2, #4]
  4019c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4019ca:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4019cc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4019ce:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4019d0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4019d2:	6803      	ldr	r3, [r0, #0]
  4019d4:	3301      	adds	r3, #1
  4019d6:	6003      	str	r3, [r0, #0]
}
  4019d8:	bc30      	pop	{r4, r5}
  4019da:	4770      	bx	lr

004019dc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4019dc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4019de:	6842      	ldr	r2, [r0, #4]
  4019e0:	6881      	ldr	r1, [r0, #8]
  4019e2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4019e4:	6882      	ldr	r2, [r0, #8]
  4019e6:	6841      	ldr	r1, [r0, #4]
  4019e8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4019ea:	685a      	ldr	r2, [r3, #4]
  4019ec:	4290      	cmp	r0, r2
  4019ee:	d005      	beq.n	4019fc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4019f0:	2200      	movs	r2, #0
  4019f2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4019f4:	6818      	ldr	r0, [r3, #0]
  4019f6:	3801      	subs	r0, #1
  4019f8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4019fa:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4019fc:	6882      	ldr	r2, [r0, #8]
  4019fe:	605a      	str	r2, [r3, #4]
  401a00:	e7f6      	b.n	4019f0 <uxListRemove+0x14>
	...

00401a04 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401a04:	4b0d      	ldr	r3, [pc, #52]	; (401a3c <prvTaskExitError+0x38>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a0c:	d00a      	beq.n	401a24 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401a0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a12:	b672      	cpsid	i
  401a14:	f383 8811 	msr	BASEPRI, r3
  401a18:	f3bf 8f6f 	isb	sy
  401a1c:	f3bf 8f4f 	dsb	sy
  401a20:	b662      	cpsie	i
  401a22:	e7fe      	b.n	401a22 <prvTaskExitError+0x1e>
  401a24:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a28:	b672      	cpsid	i
  401a2a:	f383 8811 	msr	BASEPRI, r3
  401a2e:	f3bf 8f6f 	isb	sy
  401a32:	f3bf 8f4f 	dsb	sy
  401a36:	b662      	cpsie	i
  401a38:	e7fe      	b.n	401a38 <prvTaskExitError+0x34>
  401a3a:	bf00      	nop
  401a3c:	20400020 	.word	0x20400020

00401a40 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401a40:	4806      	ldr	r0, [pc, #24]	; (401a5c <prvPortStartFirstTask+0x1c>)
  401a42:	6800      	ldr	r0, [r0, #0]
  401a44:	6800      	ldr	r0, [r0, #0]
  401a46:	f380 8808 	msr	MSP, r0
  401a4a:	b662      	cpsie	i
  401a4c:	b661      	cpsie	f
  401a4e:	f3bf 8f4f 	dsb	sy
  401a52:	f3bf 8f6f 	isb	sy
  401a56:	df00      	svc	0
  401a58:	bf00      	nop
  401a5a:	0000      	.short	0x0000
  401a5c:	e000ed08 	.word	0xe000ed08

00401a60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401a60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401a70 <vPortEnableVFP+0x10>
  401a64:	6801      	ldr	r1, [r0, #0]
  401a66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a6a:	6001      	str	r1, [r0, #0]
  401a6c:	4770      	bx	lr
  401a6e:	0000      	.short	0x0000
  401a70:	e000ed88 	.word	0xe000ed88

00401a74 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401a78:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401a7c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <pxPortInitialiseStack+0x24>)
  401a82:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401a86:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401a8a:	f06f 0302 	mvn.w	r3, #2
  401a8e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401a92:	3844      	subs	r0, #68	; 0x44
  401a94:	4770      	bx	lr
  401a96:	bf00      	nop
  401a98:	00401a05 	.word	0x00401a05

00401a9c <SVC_Handler>:
	__asm volatile (
  401a9c:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <pxCurrentTCBConst2>)
  401a9e:	6819      	ldr	r1, [r3, #0]
  401aa0:	6808      	ldr	r0, [r1, #0]
  401aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401aa6:	f380 8809 	msr	PSP, r0
  401aaa:	f3bf 8f6f 	isb	sy
  401aae:	f04f 0000 	mov.w	r0, #0
  401ab2:	f380 8811 	msr	BASEPRI, r0
  401ab6:	4770      	bx	lr

00401ab8 <pxCurrentTCBConst2>:
  401ab8:	20400c88 	.word	0x20400c88
  401abc:	4770      	bx	lr
  401abe:	bf00      	nop

00401ac0 <vPortEnterCritical>:
  401ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac4:	b672      	cpsid	i
  401ac6:	f383 8811 	msr	BASEPRI, r3
  401aca:	f3bf 8f6f 	isb	sy
  401ace:	f3bf 8f4f 	dsb	sy
  401ad2:	b662      	cpsie	i
	uxCriticalNesting++;
  401ad4:	4a0b      	ldr	r2, [pc, #44]	; (401b04 <vPortEnterCritical+0x44>)
  401ad6:	6813      	ldr	r3, [r2, #0]
  401ad8:	3301      	adds	r3, #1
  401ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401adc:	2b01      	cmp	r3, #1
  401ade:	d10f      	bne.n	401b00 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401ae0:	4b09      	ldr	r3, [pc, #36]	; (401b08 <vPortEnterCritical+0x48>)
  401ae2:	681b      	ldr	r3, [r3, #0]
  401ae4:	f013 0fff 	tst.w	r3, #255	; 0xff
  401ae8:	d00a      	beq.n	401b00 <vPortEnterCritical+0x40>
  401aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aee:	b672      	cpsid	i
  401af0:	f383 8811 	msr	BASEPRI, r3
  401af4:	f3bf 8f6f 	isb	sy
  401af8:	f3bf 8f4f 	dsb	sy
  401afc:	b662      	cpsie	i
  401afe:	e7fe      	b.n	401afe <vPortEnterCritical+0x3e>
  401b00:	4770      	bx	lr
  401b02:	bf00      	nop
  401b04:	20400020 	.word	0x20400020
  401b08:	e000ed04 	.word	0xe000ed04

00401b0c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401b0c:	4b0a      	ldr	r3, [pc, #40]	; (401b38 <vPortExitCritical+0x2c>)
  401b0e:	681b      	ldr	r3, [r3, #0]
  401b10:	b953      	cbnz	r3, 401b28 <vPortExitCritical+0x1c>
  401b12:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b16:	b672      	cpsid	i
  401b18:	f383 8811 	msr	BASEPRI, r3
  401b1c:	f3bf 8f6f 	isb	sy
  401b20:	f3bf 8f4f 	dsb	sy
  401b24:	b662      	cpsie	i
  401b26:	e7fe      	b.n	401b26 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401b28:	3b01      	subs	r3, #1
  401b2a:	4a03      	ldr	r2, [pc, #12]	; (401b38 <vPortExitCritical+0x2c>)
  401b2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401b2e:	b90b      	cbnz	r3, 401b34 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401b30:	f383 8811 	msr	BASEPRI, r3
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop
  401b38:	20400020 	.word	0x20400020

00401b3c <PendSV_Handler>:
	__asm volatile
  401b3c:	f3ef 8009 	mrs	r0, PSP
  401b40:	f3bf 8f6f 	isb	sy
  401b44:	4b15      	ldr	r3, [pc, #84]	; (401b9c <pxCurrentTCBConst>)
  401b46:	681a      	ldr	r2, [r3, #0]
  401b48:	f01e 0f10 	tst.w	lr, #16
  401b4c:	bf08      	it	eq
  401b4e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401b52:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b56:	6010      	str	r0, [r2, #0]
  401b58:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401b5c:	f04f 0080 	mov.w	r0, #128	; 0x80
  401b60:	b672      	cpsid	i
  401b62:	f380 8811 	msr	BASEPRI, r0
  401b66:	f3bf 8f4f 	dsb	sy
  401b6a:	f3bf 8f6f 	isb	sy
  401b6e:	b662      	cpsie	i
  401b70:	f001 f900 	bl	402d74 <vTaskSwitchContext>
  401b74:	f04f 0000 	mov.w	r0, #0
  401b78:	f380 8811 	msr	BASEPRI, r0
  401b7c:	bc08      	pop	{r3}
  401b7e:	6819      	ldr	r1, [r3, #0]
  401b80:	6808      	ldr	r0, [r1, #0]
  401b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b86:	f01e 0f10 	tst.w	lr, #16
  401b8a:	bf08      	it	eq
  401b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401b90:	f380 8809 	msr	PSP, r0
  401b94:	f3bf 8f6f 	isb	sy
  401b98:	4770      	bx	lr
  401b9a:	bf00      	nop

00401b9c <pxCurrentTCBConst>:
  401b9c:	20400c88 	.word	0x20400c88
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <SysTick_Handler>:
{
  401ba4:	b508      	push	{r3, lr}
	__asm volatile
  401ba6:	f3ef 8311 	mrs	r3, BASEPRI
  401baa:	f04f 0280 	mov.w	r2, #128	; 0x80
  401bae:	b672      	cpsid	i
  401bb0:	f382 8811 	msr	BASEPRI, r2
  401bb4:	f3bf 8f6f 	isb	sy
  401bb8:	f3bf 8f4f 	dsb	sy
  401bbc:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401bbe:	4b05      	ldr	r3, [pc, #20]	; (401bd4 <SysTick_Handler+0x30>)
  401bc0:	4798      	blx	r3
  401bc2:	b118      	cbz	r0, 401bcc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bc8:	4b03      	ldr	r3, [pc, #12]	; (401bd8 <SysTick_Handler+0x34>)
  401bca:	601a      	str	r2, [r3, #0]
	__asm volatile
  401bcc:	2300      	movs	r3, #0
  401bce:	f383 8811 	msr	BASEPRI, r3
  401bd2:	bd08      	pop	{r3, pc}
  401bd4:	004029e1 	.word	0x004029e1
  401bd8:	e000ed04 	.word	0xe000ed04

00401bdc <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401bdc:	4a03      	ldr	r2, [pc, #12]	; (401bec <vPortSetupTimerInterrupt+0x10>)
  401bde:	4b04      	ldr	r3, [pc, #16]	; (401bf0 <vPortSetupTimerInterrupt+0x14>)
  401be0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401be2:	2207      	movs	r2, #7
  401be4:	3b04      	subs	r3, #4
  401be6:	601a      	str	r2, [r3, #0]
  401be8:	4770      	bx	lr
  401bea:	bf00      	nop
  401bec:	000927bf 	.word	0x000927bf
  401bf0:	e000e014 	.word	0xe000e014

00401bf4 <xPortStartScheduler>:
{
  401bf4:	b500      	push	{lr}
  401bf6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401bf8:	4b25      	ldr	r3, [pc, #148]	; (401c90 <xPortStartScheduler+0x9c>)
  401bfa:	781a      	ldrb	r2, [r3, #0]
  401bfc:	b2d2      	uxtb	r2, r2
  401bfe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401c00:	22ff      	movs	r2, #255	; 0xff
  401c02:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401c04:	781b      	ldrb	r3, [r3, #0]
  401c06:	b2db      	uxtb	r3, r3
  401c08:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401c0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c14:	4a1f      	ldr	r2, [pc, #124]	; (401c94 <xPortStartScheduler+0xa0>)
  401c16:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401c18:	2207      	movs	r2, #7
  401c1a:	4b1f      	ldr	r3, [pc, #124]	; (401c98 <xPortStartScheduler+0xa4>)
  401c1c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401c1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c22:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c26:	d010      	beq.n	401c4a <xPortStartScheduler+0x56>
  401c28:	2206      	movs	r2, #6
  401c2a:	e000      	b.n	401c2e <xPortStartScheduler+0x3a>
  401c2c:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401c2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c32:	005b      	lsls	r3, r3, #1
  401c34:	b2db      	uxtb	r3, r3
  401c36:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401c3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c3e:	1e51      	subs	r1, r2, #1
  401c40:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c44:	d1f2      	bne.n	401c2c <xPortStartScheduler+0x38>
  401c46:	4b14      	ldr	r3, [pc, #80]	; (401c98 <xPortStartScheduler+0xa4>)
  401c48:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401c4a:	4a13      	ldr	r2, [pc, #76]	; (401c98 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401c4c:	6813      	ldr	r3, [r2, #0]
  401c4e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401c54:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401c56:	9b01      	ldr	r3, [sp, #4]
  401c58:	b2db      	uxtb	r3, r3
  401c5a:	4a0d      	ldr	r2, [pc, #52]	; (401c90 <xPortStartScheduler+0x9c>)
  401c5c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401c5e:	4b0f      	ldr	r3, [pc, #60]	; (401c9c <xPortStartScheduler+0xa8>)
  401c60:	681a      	ldr	r2, [r3, #0]
  401c62:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401c66:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401c68:	681a      	ldr	r2, [r3, #0]
  401c6a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401c6e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401c70:	4b0b      	ldr	r3, [pc, #44]	; (401ca0 <xPortStartScheduler+0xac>)
  401c72:	4798      	blx	r3
	uxCriticalNesting = 0;
  401c74:	2200      	movs	r2, #0
  401c76:	4b0b      	ldr	r3, [pc, #44]	; (401ca4 <xPortStartScheduler+0xb0>)
  401c78:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401c7a:	4b0b      	ldr	r3, [pc, #44]	; (401ca8 <xPortStartScheduler+0xb4>)
  401c7c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401c7e:	4a0b      	ldr	r2, [pc, #44]	; (401cac <xPortStartScheduler+0xb8>)
  401c80:	6813      	ldr	r3, [r2, #0]
  401c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401c86:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401c88:	4b09      	ldr	r3, [pc, #36]	; (401cb0 <xPortStartScheduler+0xbc>)
  401c8a:	4798      	blx	r3
	prvTaskExitError();
  401c8c:	4b09      	ldr	r3, [pc, #36]	; (401cb4 <xPortStartScheduler+0xc0>)
  401c8e:	4798      	blx	r3
  401c90:	e000e400 	.word	0xe000e400
  401c94:	20400c80 	.word	0x20400c80
  401c98:	20400c84 	.word	0x20400c84
  401c9c:	e000ed20 	.word	0xe000ed20
  401ca0:	00401bdd 	.word	0x00401bdd
  401ca4:	20400020 	.word	0x20400020
  401ca8:	00401a61 	.word	0x00401a61
  401cac:	e000ef34 	.word	0xe000ef34
  401cb0:	00401a41 	.word	0x00401a41
  401cb4:	00401a05 	.word	0x00401a05

00401cb8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401cb8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401cbc:	2b0f      	cmp	r3, #15
  401cbe:	d911      	bls.n	401ce4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401cc0:	4a12      	ldr	r2, [pc, #72]	; (401d0c <vPortValidateInterruptPriority+0x54>)
  401cc2:	5c9b      	ldrb	r3, [r3, r2]
  401cc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401cc6:	4a12      	ldr	r2, [pc, #72]	; (401d10 <vPortValidateInterruptPriority+0x58>)
  401cc8:	7812      	ldrb	r2, [r2, #0]
  401cca:	429a      	cmp	r2, r3
  401ccc:	d90a      	bls.n	401ce4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401cce:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd2:	b672      	cpsid	i
  401cd4:	f383 8811 	msr	BASEPRI, r3
  401cd8:	f3bf 8f6f 	isb	sy
  401cdc:	f3bf 8f4f 	dsb	sy
  401ce0:	b662      	cpsie	i
  401ce2:	e7fe      	b.n	401ce2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401ce4:	4b0b      	ldr	r3, [pc, #44]	; (401d14 <vPortValidateInterruptPriority+0x5c>)
  401ce6:	681b      	ldr	r3, [r3, #0]
  401ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401cec:	4a0a      	ldr	r2, [pc, #40]	; (401d18 <vPortValidateInterruptPriority+0x60>)
  401cee:	6812      	ldr	r2, [r2, #0]
  401cf0:	4293      	cmp	r3, r2
  401cf2:	d90a      	bls.n	401d0a <vPortValidateInterruptPriority+0x52>
  401cf4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cf8:	b672      	cpsid	i
  401cfa:	f383 8811 	msr	BASEPRI, r3
  401cfe:	f3bf 8f6f 	isb	sy
  401d02:	f3bf 8f4f 	dsb	sy
  401d06:	b662      	cpsie	i
  401d08:	e7fe      	b.n	401d08 <vPortValidateInterruptPriority+0x50>
  401d0a:	4770      	bx	lr
  401d0c:	e000e3f0 	.word	0xe000e3f0
  401d10:	20400c80 	.word	0x20400c80
  401d14:	e000ed0c 	.word	0xe000ed0c
  401d18:	20400c84 	.word	0x20400c84

00401d1c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401d1c:	b510      	push	{r4, lr}
  401d1e:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401d20:	4b06      	ldr	r3, [pc, #24]	; (401d3c <pvPortMalloc+0x20>)
  401d22:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401d24:	4620      	mov	r0, r4
  401d26:	4b06      	ldr	r3, [pc, #24]	; (401d40 <pvPortMalloc+0x24>)
  401d28:	4798      	blx	r3
  401d2a:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401d2c:	4b05      	ldr	r3, [pc, #20]	; (401d44 <pvPortMalloc+0x28>)
  401d2e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401d30:	b10c      	cbz	r4, 401d36 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401d32:	4620      	mov	r0, r4
  401d34:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401d36:	4b04      	ldr	r3, [pc, #16]	; (401d48 <pvPortMalloc+0x2c>)
  401d38:	4798      	blx	r3
	return pvReturn;
  401d3a:	e7fa      	b.n	401d32 <pvPortMalloc+0x16>
  401d3c:	004029c5 	.word	0x004029c5
  401d40:	004041e1 	.word	0x004041e1
  401d44:	00402b2d 	.word	0x00402b2d
  401d48:	00403a27 	.word	0x00403a27

00401d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401d4c:	b148      	cbz	r0, 401d62 <vPortFree+0x16>
{
  401d4e:	b510      	push	{r4, lr}
  401d50:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401d52:	4b04      	ldr	r3, [pc, #16]	; (401d64 <vPortFree+0x18>)
  401d54:	4798      	blx	r3
		{
			free( pv );
  401d56:	4620      	mov	r0, r4
  401d58:	4b03      	ldr	r3, [pc, #12]	; (401d68 <vPortFree+0x1c>)
  401d5a:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401d5c:	4b03      	ldr	r3, [pc, #12]	; (401d6c <vPortFree+0x20>)
  401d5e:	4798      	blx	r3
  401d60:	bd10      	pop	{r4, pc}
  401d62:	4770      	bx	lr
  401d64:	004029c5 	.word	0x004029c5
  401d68:	004041f1 	.word	0x004041f1
  401d6c:	00402b2d 	.word	0x00402b2d

00401d70 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401d70:	b538      	push	{r3, r4, r5, lr}
  401d72:	4604      	mov	r4, r0
  401d74:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401d76:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d78:	b95a      	cbnz	r2, 401d92 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d7a:	6803      	ldr	r3, [r0, #0]
  401d7c:	2b00      	cmp	r3, #0
  401d7e:	d12e      	bne.n	401dde <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401d80:	6840      	ldr	r0, [r0, #4]
  401d82:	4b1b      	ldr	r3, [pc, #108]	; (401df0 <prvCopyDataToQueue+0x80>)
  401d84:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401d86:	2300      	movs	r3, #0
  401d88:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d8c:	3301      	adds	r3, #1
  401d8e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401d90:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401d92:	b96d      	cbnz	r5, 401db0 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401d94:	6880      	ldr	r0, [r0, #8]
  401d96:	4b17      	ldr	r3, [pc, #92]	; (401df4 <prvCopyDataToQueue+0x84>)
  401d98:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401d9a:	68a3      	ldr	r3, [r4, #8]
  401d9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401d9e:	4413      	add	r3, r2
  401da0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401da2:	6862      	ldr	r2, [r4, #4]
  401da4:	4293      	cmp	r3, r2
  401da6:	d31c      	bcc.n	401de2 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401da8:	6823      	ldr	r3, [r4, #0]
  401daa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401dac:	2000      	movs	r0, #0
  401dae:	e7ec      	b.n	401d8a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401db0:	68c0      	ldr	r0, [r0, #12]
  401db2:	4b10      	ldr	r3, [pc, #64]	; (401df4 <prvCopyDataToQueue+0x84>)
  401db4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401db8:	425b      	negs	r3, r3
  401dba:	68e2      	ldr	r2, [r4, #12]
  401dbc:	441a      	add	r2, r3
  401dbe:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401dc0:	6821      	ldr	r1, [r4, #0]
  401dc2:	428a      	cmp	r2, r1
  401dc4:	d202      	bcs.n	401dcc <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401dc6:	6862      	ldr	r2, [r4, #4]
  401dc8:	4413      	add	r3, r2
  401dca:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401dcc:	2d02      	cmp	r5, #2
  401dce:	d10a      	bne.n	401de6 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401dd2:	b153      	cbz	r3, 401dea <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401dd6:	3b01      	subs	r3, #1
  401dd8:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401dda:	2000      	movs	r0, #0
  401ddc:	e7d5      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401dde:	2000      	movs	r0, #0
  401de0:	e7d3      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401de2:	2000      	movs	r0, #0
  401de4:	e7d1      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401de6:	2000      	movs	r0, #0
  401de8:	e7cf      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401dea:	2000      	movs	r0, #0
  401dec:	e7cd      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401dee:	bf00      	nop
  401df0:	00403175 	.word	0x00403175
  401df4:	00404761 	.word	0x00404761

00401df8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401df8:	b530      	push	{r4, r5, lr}
  401dfa:	b083      	sub	sp, #12
  401dfc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401dfe:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401e00:	b174      	cbz	r4, 401e20 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e06:	429a      	cmp	r2, r3
  401e08:	d315      	bcc.n	401e36 <prvNotifyQueueSetContainer+0x3e>
  401e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e0e:	b672      	cpsid	i
  401e10:	f383 8811 	msr	BASEPRI, r3
  401e14:	f3bf 8f6f 	isb	sy
  401e18:	f3bf 8f4f 	dsb	sy
  401e1c:	b662      	cpsie	i
  401e1e:	e7fe      	b.n	401e1e <prvNotifyQueueSetContainer+0x26>
  401e20:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e24:	b672      	cpsid	i
  401e26:	f383 8811 	msr	BASEPRI, r3
  401e2a:	f3bf 8f6f 	isb	sy
  401e2e:	f3bf 8f4f 	dsb	sy
  401e32:	b662      	cpsie	i
  401e34:	e7fe      	b.n	401e34 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e38:	4293      	cmp	r3, r2
  401e3a:	d803      	bhi.n	401e44 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401e3c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401e3e:	4628      	mov	r0, r5
  401e40:	b003      	add	sp, #12
  401e42:	bd30      	pop	{r4, r5, pc}
  401e44:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401e46:	a901      	add	r1, sp, #4
  401e48:	4620      	mov	r0, r4
  401e4a:	4b0b      	ldr	r3, [pc, #44]	; (401e78 <prvNotifyQueueSetContainer+0x80>)
  401e4c:	4798      	blx	r3
  401e4e:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401e50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e56:	d10a      	bne.n	401e6e <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e5a:	2b00      	cmp	r3, #0
  401e5c:	d0ef      	beq.n	401e3e <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e62:	4b06      	ldr	r3, [pc, #24]	; (401e7c <prvNotifyQueueSetContainer+0x84>)
  401e64:	4798      	blx	r3
  401e66:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401e68:	bf18      	it	ne
  401e6a:	2501      	movne	r5, #1
  401e6c:	e7e7      	b.n	401e3e <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401e6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e70:	3301      	adds	r3, #1
  401e72:	64a3      	str	r3, [r4, #72]	; 0x48
  401e74:	e7e3      	b.n	401e3e <prvNotifyQueueSetContainer+0x46>
  401e76:	bf00      	nop
  401e78:	00401d71 	.word	0x00401d71
  401e7c:	00402f49 	.word	0x00402f49

00401e80 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401e80:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401e82:	b172      	cbz	r2, 401ea2 <prvCopyDataFromQueue+0x22>
{
  401e84:	b510      	push	{r4, lr}
  401e86:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401e88:	68c4      	ldr	r4, [r0, #12]
  401e8a:	4414      	add	r4, r2
  401e8c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401e8e:	6840      	ldr	r0, [r0, #4]
  401e90:	4284      	cmp	r4, r0
  401e92:	d301      	bcc.n	401e98 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401e94:	6818      	ldr	r0, [r3, #0]
  401e96:	60d8      	str	r0, [r3, #12]
  401e98:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401e9a:	68d9      	ldr	r1, [r3, #12]
  401e9c:	4b01      	ldr	r3, [pc, #4]	; (401ea4 <prvCopyDataFromQueue+0x24>)
  401e9e:	4798      	blx	r3
  401ea0:	bd10      	pop	{r4, pc}
  401ea2:	4770      	bx	lr
  401ea4:	00404761 	.word	0x00404761

00401ea8 <prvUnlockQueue>:
{
  401ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401eaa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401eac:	4b22      	ldr	r3, [pc, #136]	; (401f38 <prvUnlockQueue+0x90>)
  401eae:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401eb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	dd1b      	ble.n	401eee <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401eb6:	4d21      	ldr	r5, [pc, #132]	; (401f3c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401eb8:	4f21      	ldr	r7, [pc, #132]	; (401f40 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401eba:	4e22      	ldr	r6, [pc, #136]	; (401f44 <prvUnlockQueue+0x9c>)
  401ebc:	e00b      	b.n	401ed6 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ec0:	b1ab      	cbz	r3, 401eee <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ec6:	47b0      	blx	r6
  401ec8:	b978      	cbnz	r0, 401eea <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401eca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ecc:	3b01      	subs	r3, #1
  401ece:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401ed0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	dd0b      	ble.n	401eee <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401ed6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d0f0      	beq.n	401ebe <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401edc:	2100      	movs	r1, #0
  401ede:	4620      	mov	r0, r4
  401ee0:	47a8      	blx	r5
  401ee2:	2801      	cmp	r0, #1
  401ee4:	d1f1      	bne.n	401eca <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401ee6:	47b8      	blx	r7
  401ee8:	e7ef      	b.n	401eca <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401eea:	47b8      	blx	r7
  401eec:	e7ed      	b.n	401eca <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401eee:	f04f 33ff 	mov.w	r3, #4294967295
  401ef2:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401ef4:	4b14      	ldr	r3, [pc, #80]	; (401f48 <prvUnlockQueue+0xa0>)
  401ef6:	4798      	blx	r3
	taskENTER_CRITICAL();
  401ef8:	4b0f      	ldr	r3, [pc, #60]	; (401f38 <prvUnlockQueue+0x90>)
  401efa:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401efe:	2b00      	cmp	r3, #0
  401f00:	dd14      	ble.n	401f2c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f02:	6923      	ldr	r3, [r4, #16]
  401f04:	b193      	cbz	r3, 401f2c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401f06:	f104 0610 	add.w	r6, r4, #16
  401f0a:	4d0e      	ldr	r5, [pc, #56]	; (401f44 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401f0c:	4f0c      	ldr	r7, [pc, #48]	; (401f40 <prvUnlockQueue+0x98>)
  401f0e:	e007      	b.n	401f20 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401f10:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f12:	3b01      	subs	r3, #1
  401f14:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f18:	2b00      	cmp	r3, #0
  401f1a:	dd07      	ble.n	401f2c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f1c:	6923      	ldr	r3, [r4, #16]
  401f1e:	b12b      	cbz	r3, 401f2c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401f20:	4630      	mov	r0, r6
  401f22:	47a8      	blx	r5
  401f24:	2800      	cmp	r0, #0
  401f26:	d0f3      	beq.n	401f10 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401f28:	47b8      	blx	r7
  401f2a:	e7f1      	b.n	401f10 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401f2c:	f04f 33ff 	mov.w	r3, #4294967295
  401f30:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401f32:	4b05      	ldr	r3, [pc, #20]	; (401f48 <prvUnlockQueue+0xa0>)
  401f34:	4798      	blx	r3
  401f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f38:	00401ac1 	.word	0x00401ac1
  401f3c:	00401df9 	.word	0x00401df9
  401f40:	004030a5 	.word	0x004030a5
  401f44:	00402f49 	.word	0x00402f49
  401f48:	00401b0d 	.word	0x00401b0d

00401f4c <xQueueGenericReset>:
{
  401f4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401f4e:	b308      	cbz	r0, 401f94 <xQueueGenericReset+0x48>
  401f50:	4604      	mov	r4, r0
  401f52:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401f54:	4b1d      	ldr	r3, [pc, #116]	; (401fcc <xQueueGenericReset+0x80>)
  401f56:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401f58:	6822      	ldr	r2, [r4, #0]
  401f5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f5e:	fb03 f301 	mul.w	r3, r3, r1
  401f62:	18d0      	adds	r0, r2, r3
  401f64:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401f66:	2000      	movs	r0, #0
  401f68:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401f6a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401f6c:	1a5b      	subs	r3, r3, r1
  401f6e:	4413      	add	r3, r2
  401f70:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401f72:	f04f 33ff 	mov.w	r3, #4294967295
  401f76:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401f78:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401f7a:	b9fd      	cbnz	r5, 401fbc <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f7c:	6923      	ldr	r3, [r4, #16]
  401f7e:	b12b      	cbz	r3, 401f8c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f80:	f104 0010 	add.w	r0, r4, #16
  401f84:	4b12      	ldr	r3, [pc, #72]	; (401fd0 <xQueueGenericReset+0x84>)
  401f86:	4798      	blx	r3
  401f88:	2801      	cmp	r0, #1
  401f8a:	d00e      	beq.n	401faa <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401f8c:	4b11      	ldr	r3, [pc, #68]	; (401fd4 <xQueueGenericReset+0x88>)
  401f8e:	4798      	blx	r3
}
  401f90:	2001      	movs	r0, #1
  401f92:	bd38      	pop	{r3, r4, r5, pc}
  401f94:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f98:	b672      	cpsid	i
  401f9a:	f383 8811 	msr	BASEPRI, r3
  401f9e:	f3bf 8f6f 	isb	sy
  401fa2:	f3bf 8f4f 	dsb	sy
  401fa6:	b662      	cpsie	i
  401fa8:	e7fe      	b.n	401fa8 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fae:	4b0a      	ldr	r3, [pc, #40]	; (401fd8 <xQueueGenericReset+0x8c>)
  401fb0:	601a      	str	r2, [r3, #0]
  401fb2:	f3bf 8f4f 	dsb	sy
  401fb6:	f3bf 8f6f 	isb	sy
  401fba:	e7e7      	b.n	401f8c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401fbc:	f104 0010 	add.w	r0, r4, #16
  401fc0:	4d06      	ldr	r5, [pc, #24]	; (401fdc <xQueueGenericReset+0x90>)
  401fc2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401fc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fc8:	47a8      	blx	r5
  401fca:	e7df      	b.n	401f8c <xQueueGenericReset+0x40>
  401fcc:	00401ac1 	.word	0x00401ac1
  401fd0:	00402f49 	.word	0x00402f49
  401fd4:	00401b0d 	.word	0x00401b0d
  401fd8:	e000ed04 	.word	0xe000ed04
  401fdc:	00401975 	.word	0x00401975

00401fe0 <xQueueGenericCreate>:
{
  401fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401fe2:	b950      	cbnz	r0, 401ffa <xQueueGenericCreate+0x1a>
  401fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe8:	b672      	cpsid	i
  401fea:	f383 8811 	msr	BASEPRI, r3
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	f3bf 8f4f 	dsb	sy
  401ff6:	b662      	cpsie	i
  401ff8:	e7fe      	b.n	401ff8 <xQueueGenericCreate+0x18>
  401ffa:	4606      	mov	r6, r0
  401ffc:	4617      	mov	r7, r2
  401ffe:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402000:	b189      	cbz	r1, 402026 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402002:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402006:	3059      	adds	r0, #89	; 0x59
  402008:	4b12      	ldr	r3, [pc, #72]	; (402054 <xQueueGenericCreate+0x74>)
  40200a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40200c:	4604      	mov	r4, r0
  40200e:	b9e8      	cbnz	r0, 40204c <xQueueGenericCreate+0x6c>
  402010:	f04f 0380 	mov.w	r3, #128	; 0x80
  402014:	b672      	cpsid	i
  402016:	f383 8811 	msr	BASEPRI, r3
  40201a:	f3bf 8f6f 	isb	sy
  40201e:	f3bf 8f4f 	dsb	sy
  402022:	b662      	cpsie	i
  402024:	e7fe      	b.n	402024 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402026:	2058      	movs	r0, #88	; 0x58
  402028:	4b0a      	ldr	r3, [pc, #40]	; (402054 <xQueueGenericCreate+0x74>)
  40202a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40202c:	4604      	mov	r4, r0
  40202e:	2800      	cmp	r0, #0
  402030:	d0ee      	beq.n	402010 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  402032:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402034:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  402036:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402038:	2101      	movs	r1, #1
  40203a:	4620      	mov	r0, r4
  40203c:	4b06      	ldr	r3, [pc, #24]	; (402058 <xQueueGenericCreate+0x78>)
  40203e:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402040:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402044:	2300      	movs	r3, #0
  402046:	6563      	str	r3, [r4, #84]	; 0x54
}
  402048:	4620      	mov	r0, r4
  40204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40204c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402050:	6003      	str	r3, [r0, #0]
  402052:	e7ef      	b.n	402034 <xQueueGenericCreate+0x54>
  402054:	00401d1d 	.word	0x00401d1d
  402058:	00401f4d 	.word	0x00401f4d

0040205c <xQueueGenericSend>:
{
  40205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402060:	b085      	sub	sp, #20
  402062:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402064:	b1b8      	cbz	r0, 402096 <xQueueGenericSend+0x3a>
  402066:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402068:	b301      	cbz	r1, 4020ac <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40206a:	2b02      	cmp	r3, #2
  40206c:	d02c      	beq.n	4020c8 <xQueueGenericSend+0x6c>
  40206e:	461d      	mov	r5, r3
  402070:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402072:	4b66      	ldr	r3, [pc, #408]	; (40220c <xQueueGenericSend+0x1b0>)
  402074:	4798      	blx	r3
  402076:	2800      	cmp	r0, #0
  402078:	d134      	bne.n	4020e4 <xQueueGenericSend+0x88>
  40207a:	9b01      	ldr	r3, [sp, #4]
  40207c:	2b00      	cmp	r3, #0
  40207e:	d038      	beq.n	4020f2 <xQueueGenericSend+0x96>
  402080:	f04f 0380 	mov.w	r3, #128	; 0x80
  402084:	b672      	cpsid	i
  402086:	f383 8811 	msr	BASEPRI, r3
  40208a:	f3bf 8f6f 	isb	sy
  40208e:	f3bf 8f4f 	dsb	sy
  402092:	b662      	cpsie	i
  402094:	e7fe      	b.n	402094 <xQueueGenericSend+0x38>
  402096:	f04f 0380 	mov.w	r3, #128	; 0x80
  40209a:	b672      	cpsid	i
  40209c:	f383 8811 	msr	BASEPRI, r3
  4020a0:	f3bf 8f6f 	isb	sy
  4020a4:	f3bf 8f4f 	dsb	sy
  4020a8:	b662      	cpsie	i
  4020aa:	e7fe      	b.n	4020aa <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4020ae:	2a00      	cmp	r2, #0
  4020b0:	d0db      	beq.n	40206a <xQueueGenericSend+0xe>
  4020b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020b6:	b672      	cpsid	i
  4020b8:	f383 8811 	msr	BASEPRI, r3
  4020bc:	f3bf 8f6f 	isb	sy
  4020c0:	f3bf 8f4f 	dsb	sy
  4020c4:	b662      	cpsie	i
  4020c6:	e7fe      	b.n	4020c6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4020c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4020ca:	2a01      	cmp	r2, #1
  4020cc:	d0cf      	beq.n	40206e <xQueueGenericSend+0x12>
  4020ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d2:	b672      	cpsid	i
  4020d4:	f383 8811 	msr	BASEPRI, r3
  4020d8:	f3bf 8f6f 	isb	sy
  4020dc:	f3bf 8f4f 	dsb	sy
  4020e0:	b662      	cpsie	i
  4020e2:	e7fe      	b.n	4020e2 <xQueueGenericSend+0x86>
  4020e4:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4020e6:	4e4a      	ldr	r6, [pc, #296]	; (402210 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4020e8:	f8df a150 	ldr.w	sl, [pc, #336]	; 40223c <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4020ec:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40221c <xQueueGenericSend+0x1c0>
  4020f0:	e042      	b.n	402178 <xQueueGenericSend+0x11c>
  4020f2:	2700      	movs	r7, #0
  4020f4:	e7f7      	b.n	4020e6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4020f6:	462a      	mov	r2, r5
  4020f8:	4641      	mov	r1, r8
  4020fa:	4620      	mov	r0, r4
  4020fc:	4b45      	ldr	r3, [pc, #276]	; (402214 <xQueueGenericSend+0x1b8>)
  4020fe:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402100:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402102:	b19b      	cbz	r3, 40212c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402104:	4629      	mov	r1, r5
  402106:	4620      	mov	r0, r4
  402108:	4b43      	ldr	r3, [pc, #268]	; (402218 <xQueueGenericSend+0x1bc>)
  40210a:	4798      	blx	r3
  40210c:	2801      	cmp	r0, #1
  40210e:	d107      	bne.n	402120 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402114:	4b41      	ldr	r3, [pc, #260]	; (40221c <xQueueGenericSend+0x1c0>)
  402116:	601a      	str	r2, [r3, #0]
  402118:	f3bf 8f4f 	dsb	sy
  40211c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402120:	4b3f      	ldr	r3, [pc, #252]	; (402220 <xQueueGenericSend+0x1c4>)
  402122:	4798      	blx	r3
				return pdPASS;
  402124:	2001      	movs	r0, #1
}
  402126:	b005      	add	sp, #20
  402128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40212c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40212e:	b173      	cbz	r3, 40214e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402130:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402134:	4b3b      	ldr	r3, [pc, #236]	; (402224 <xQueueGenericSend+0x1c8>)
  402136:	4798      	blx	r3
  402138:	2801      	cmp	r0, #1
  40213a:	d1f1      	bne.n	402120 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40213c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402140:	4b36      	ldr	r3, [pc, #216]	; (40221c <xQueueGenericSend+0x1c0>)
  402142:	601a      	str	r2, [r3, #0]
  402144:	f3bf 8f4f 	dsb	sy
  402148:	f3bf 8f6f 	isb	sy
  40214c:	e7e8      	b.n	402120 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40214e:	2800      	cmp	r0, #0
  402150:	d0e6      	beq.n	402120 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402156:	4b31      	ldr	r3, [pc, #196]	; (40221c <xQueueGenericSend+0x1c0>)
  402158:	601a      	str	r2, [r3, #0]
  40215a:	f3bf 8f4f 	dsb	sy
  40215e:	f3bf 8f6f 	isb	sy
  402162:	e7dd      	b.n	402120 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402164:	4b2e      	ldr	r3, [pc, #184]	; (402220 <xQueueGenericSend+0x1c4>)
  402166:	4798      	blx	r3
					return errQUEUE_FULL;
  402168:	2000      	movs	r0, #0
  40216a:	e7dc      	b.n	402126 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40216c:	4620      	mov	r0, r4
  40216e:	4b2e      	ldr	r3, [pc, #184]	; (402228 <xQueueGenericSend+0x1cc>)
  402170:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402172:	4b2e      	ldr	r3, [pc, #184]	; (40222c <xQueueGenericSend+0x1d0>)
  402174:	4798      	blx	r3
  402176:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402178:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40217a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40217c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40217e:	429a      	cmp	r2, r3
  402180:	d3b9      	bcc.n	4020f6 <xQueueGenericSend+0x9a>
  402182:	2d02      	cmp	r5, #2
  402184:	d0b7      	beq.n	4020f6 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402186:	9b01      	ldr	r3, [sp, #4]
  402188:	2b00      	cmp	r3, #0
  40218a:	d0eb      	beq.n	402164 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  40218c:	b90f      	cbnz	r7, 402192 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40218e:	a802      	add	r0, sp, #8
  402190:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402192:	4b23      	ldr	r3, [pc, #140]	; (402220 <xQueueGenericSend+0x1c4>)
  402194:	4798      	blx	r3
		vTaskSuspendAll();
  402196:	4b26      	ldr	r3, [pc, #152]	; (402230 <xQueueGenericSend+0x1d4>)
  402198:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40219a:	47b0      	blx	r6
  40219c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40219e:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021a2:	d101      	bne.n	4021a8 <xQueueGenericSend+0x14c>
  4021a4:	2300      	movs	r3, #0
  4021a6:	6463      	str	r3, [r4, #68]	; 0x44
  4021a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021ae:	d101      	bne.n	4021b4 <xQueueGenericSend+0x158>
  4021b0:	2300      	movs	r3, #0
  4021b2:	64a3      	str	r3, [r4, #72]	; 0x48
  4021b4:	4b1a      	ldr	r3, [pc, #104]	; (402220 <xQueueGenericSend+0x1c4>)
  4021b6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4021b8:	a901      	add	r1, sp, #4
  4021ba:	a802      	add	r0, sp, #8
  4021bc:	4b1d      	ldr	r3, [pc, #116]	; (402234 <xQueueGenericSend+0x1d8>)
  4021be:	4798      	blx	r3
  4021c0:	b9e0      	cbnz	r0, 4021fc <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4021c2:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4021c4:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4021c8:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4021ca:	4b15      	ldr	r3, [pc, #84]	; (402220 <xQueueGenericSend+0x1c4>)
  4021cc:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4021ce:	45bb      	cmp	fp, r7
  4021d0:	d1cc      	bne.n	40216c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4021d2:	9901      	ldr	r1, [sp, #4]
  4021d4:	f104 0010 	add.w	r0, r4, #16
  4021d8:	4b17      	ldr	r3, [pc, #92]	; (402238 <xQueueGenericSend+0x1dc>)
  4021da:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4021dc:	4620      	mov	r0, r4
  4021de:	4b12      	ldr	r3, [pc, #72]	; (402228 <xQueueGenericSend+0x1cc>)
  4021e0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4021e2:	4b12      	ldr	r3, [pc, #72]	; (40222c <xQueueGenericSend+0x1d0>)
  4021e4:	4798      	blx	r3
  4021e6:	2800      	cmp	r0, #0
  4021e8:	d1c5      	bne.n	402176 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4021ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4021ee:	f8c9 3000 	str.w	r3, [r9]
  4021f2:	f3bf 8f4f 	dsb	sy
  4021f6:	f3bf 8f6f 	isb	sy
  4021fa:	e7bc      	b.n	402176 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4021fc:	4620      	mov	r0, r4
  4021fe:	4b0a      	ldr	r3, [pc, #40]	; (402228 <xQueueGenericSend+0x1cc>)
  402200:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402202:	4b0a      	ldr	r3, [pc, #40]	; (40222c <xQueueGenericSend+0x1d0>)
  402204:	4798      	blx	r3
			return errQUEUE_FULL;
  402206:	2000      	movs	r0, #0
  402208:	e78d      	b.n	402126 <xQueueGenericSend+0xca>
  40220a:	bf00      	nop
  40220c:	004030b1 	.word	0x004030b1
  402210:	00401ac1 	.word	0x00401ac1
  402214:	00401d71 	.word	0x00401d71
  402218:	00401df9 	.word	0x00401df9
  40221c:	e000ed04 	.word	0xe000ed04
  402220:	00401b0d 	.word	0x00401b0d
  402224:	00402f49 	.word	0x00402f49
  402228:	00401ea9 	.word	0x00401ea9
  40222c:	00402b2d 	.word	0x00402b2d
  402230:	004029c5 	.word	0x004029c5
  402234:	00403011 	.word	0x00403011
  402238:	00402e45 	.word	0x00402e45
  40223c:	00402fe1 	.word	0x00402fe1

00402240 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402240:	2800      	cmp	r0, #0
  402242:	d036      	beq.n	4022b2 <xQueueGenericSendFromISR+0x72>
{
  402244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402248:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40224a:	2900      	cmp	r1, #0
  40224c:	d03c      	beq.n	4022c8 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40224e:	2b02      	cmp	r3, #2
  402250:	d048      	beq.n	4022e4 <xQueueGenericSendFromISR+0xa4>
  402252:	461e      	mov	r6, r3
  402254:	4615      	mov	r5, r2
  402256:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402258:	4b35      	ldr	r3, [pc, #212]	; (402330 <xQueueGenericSendFromISR+0xf0>)
  40225a:	4798      	blx	r3
	__asm volatile
  40225c:	f3ef 8711 	mrs	r7, BASEPRI
  402260:	f04f 0380 	mov.w	r3, #128	; 0x80
  402264:	b672      	cpsid	i
  402266:	f383 8811 	msr	BASEPRI, r3
  40226a:	f3bf 8f6f 	isb	sy
  40226e:	f3bf 8f4f 	dsb	sy
  402272:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402274:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402278:	429a      	cmp	r2, r3
  40227a:	d301      	bcc.n	402280 <xQueueGenericSendFromISR+0x40>
  40227c:	2e02      	cmp	r6, #2
  40227e:	d14f      	bne.n	402320 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402280:	4632      	mov	r2, r6
  402282:	4641      	mov	r1, r8
  402284:	4620      	mov	r0, r4
  402286:	4b2b      	ldr	r3, [pc, #172]	; (402334 <xQueueGenericSendFromISR+0xf4>)
  402288:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40228a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40228c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402290:	d141      	bne.n	402316 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402292:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402294:	2b00      	cmp	r3, #0
  402296:	d033      	beq.n	402300 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402298:	4631      	mov	r1, r6
  40229a:	4620      	mov	r0, r4
  40229c:	4b26      	ldr	r3, [pc, #152]	; (402338 <xQueueGenericSendFromISR+0xf8>)
  40229e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4022a0:	2d00      	cmp	r5, #0
  4022a2:	d03f      	beq.n	402324 <xQueueGenericSendFromISR+0xe4>
  4022a4:	2801      	cmp	r0, #1
  4022a6:	d13d      	bne.n	402324 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4022a8:	6028      	str	r0, [r5, #0]
	__asm volatile
  4022aa:	f387 8811 	msr	BASEPRI, r7
}
  4022ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4022b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b6:	b672      	cpsid	i
  4022b8:	f383 8811 	msr	BASEPRI, r3
  4022bc:	f3bf 8f6f 	isb	sy
  4022c0:	f3bf 8f4f 	dsb	sy
  4022c4:	b662      	cpsie	i
  4022c6:	e7fe      	b.n	4022c6 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4022c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4022ca:	2800      	cmp	r0, #0
  4022cc:	d0bf      	beq.n	40224e <xQueueGenericSendFromISR+0xe>
  4022ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022d2:	b672      	cpsid	i
  4022d4:	f383 8811 	msr	BASEPRI, r3
  4022d8:	f3bf 8f6f 	isb	sy
  4022dc:	f3bf 8f4f 	dsb	sy
  4022e0:	b662      	cpsie	i
  4022e2:	e7fe      	b.n	4022e2 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4022e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4022e6:	2801      	cmp	r0, #1
  4022e8:	d0b3      	beq.n	402252 <xQueueGenericSendFromISR+0x12>
  4022ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ee:	b672      	cpsid	i
  4022f0:	f383 8811 	msr	BASEPRI, r3
  4022f4:	f3bf 8f6f 	isb	sy
  4022f8:	f3bf 8f4f 	dsb	sy
  4022fc:	b662      	cpsie	i
  4022fe:	e7fe      	b.n	4022fe <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402300:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402302:	b18b      	cbz	r3, 402328 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402304:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402308:	4b0c      	ldr	r3, [pc, #48]	; (40233c <xQueueGenericSendFromISR+0xfc>)
  40230a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40230c:	b175      	cbz	r5, 40232c <xQueueGenericSendFromISR+0xec>
  40230e:	b168      	cbz	r0, 40232c <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402310:	2001      	movs	r0, #1
  402312:	6028      	str	r0, [r5, #0]
  402314:	e7c9      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402316:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402318:	3301      	adds	r3, #1
  40231a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40231c:	2001      	movs	r0, #1
  40231e:	e7c4      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402320:	2000      	movs	r0, #0
  402322:	e7c2      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402324:	2001      	movs	r0, #1
  402326:	e7c0      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
  402328:	2001      	movs	r0, #1
  40232a:	e7be      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
  40232c:	2001      	movs	r0, #1
  40232e:	e7bc      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
  402330:	00401cb9 	.word	0x00401cb9
  402334:	00401d71 	.word	0x00401d71
  402338:	00401df9 	.word	0x00401df9
  40233c:	00402f49 	.word	0x00402f49

00402340 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402340:	b170      	cbz	r0, 402360 <xQueueGiveFromISR+0x20>
{
  402342:	b570      	push	{r4, r5, r6, lr}
  402344:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402346:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402348:	b1ab      	cbz	r3, 402376 <xQueueGiveFromISR+0x36>
  40234a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40234e:	b672      	cpsid	i
  402350:	f383 8811 	msr	BASEPRI, r3
  402354:	f3bf 8f6f 	isb	sy
  402358:	f3bf 8f4f 	dsb	sy
  40235c:	b662      	cpsie	i
  40235e:	e7fe      	b.n	40235e <xQueueGiveFromISR+0x1e>
  402360:	f04f 0380 	mov.w	r3, #128	; 0x80
  402364:	b672      	cpsid	i
  402366:	f383 8811 	msr	BASEPRI, r3
  40236a:	f3bf 8f6f 	isb	sy
  40236e:	f3bf 8f4f 	dsb	sy
  402372:	b662      	cpsie	i
  402374:	e7fe      	b.n	402374 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402376:	6803      	ldr	r3, [r0, #0]
  402378:	b333      	cbz	r3, 4023c8 <xQueueGiveFromISR+0x88>
  40237a:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40237c:	4b25      	ldr	r3, [pc, #148]	; (402414 <xQueueGiveFromISR+0xd4>)
  40237e:	4798      	blx	r3
	__asm volatile
  402380:	f3ef 8611 	mrs	r6, BASEPRI
  402384:	f04f 0380 	mov.w	r3, #128	; 0x80
  402388:	b672      	cpsid	i
  40238a:	f383 8811 	msr	BASEPRI, r3
  40238e:	f3bf 8f6f 	isb	sy
  402392:	f3bf 8f4f 	dsb	sy
  402396:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402398:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40239a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40239c:	429a      	cmp	r2, r3
  40239e:	d231      	bcs.n	402404 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4023a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023a2:	3301      	adds	r3, #1
  4023a4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4023a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023ac:	d125      	bne.n	4023fa <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4023ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4023b0:	b1c3      	cbz	r3, 4023e4 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4023b2:	2100      	movs	r1, #0
  4023b4:	4620      	mov	r0, r4
  4023b6:	4b18      	ldr	r3, [pc, #96]	; (402418 <xQueueGiveFromISR+0xd8>)
  4023b8:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4023ba:	b32d      	cbz	r5, 402408 <xQueueGiveFromISR+0xc8>
  4023bc:	2801      	cmp	r0, #1
  4023be:	d123      	bne.n	402408 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4023c0:	6028      	str	r0, [r5, #0]
	__asm volatile
  4023c2:	f386 8811 	msr	BASEPRI, r6
}
  4023c6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4023c8:	6843      	ldr	r3, [r0, #4]
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	d0d5      	beq.n	40237a <xQueueGiveFromISR+0x3a>
	__asm volatile
  4023ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023d2:	b672      	cpsid	i
  4023d4:	f383 8811 	msr	BASEPRI, r3
  4023d8:	f3bf 8f6f 	isb	sy
  4023dc:	f3bf 8f4f 	dsb	sy
  4023e0:	b662      	cpsie	i
  4023e2:	e7fe      	b.n	4023e2 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4023e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4023e6:	b18b      	cbz	r3, 40240c <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4023e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4023ec:	4b0b      	ldr	r3, [pc, #44]	; (40241c <xQueueGiveFromISR+0xdc>)
  4023ee:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4023f0:	b175      	cbz	r5, 402410 <xQueueGiveFromISR+0xd0>
  4023f2:	b168      	cbz	r0, 402410 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4023f4:	2001      	movs	r0, #1
  4023f6:	6028      	str	r0, [r5, #0]
  4023f8:	e7e3      	b.n	4023c2 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4023fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023fc:	3301      	adds	r3, #1
  4023fe:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402400:	2001      	movs	r0, #1
  402402:	e7de      	b.n	4023c2 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402404:	2000      	movs	r0, #0
  402406:	e7dc      	b.n	4023c2 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402408:	2001      	movs	r0, #1
  40240a:	e7da      	b.n	4023c2 <xQueueGiveFromISR+0x82>
  40240c:	2001      	movs	r0, #1
  40240e:	e7d8      	b.n	4023c2 <xQueueGiveFromISR+0x82>
  402410:	2001      	movs	r0, #1
  402412:	e7d6      	b.n	4023c2 <xQueueGiveFromISR+0x82>
  402414:	00401cb9 	.word	0x00401cb9
  402418:	00401df9 	.word	0x00401df9
  40241c:	00402f49 	.word	0x00402f49

00402420 <xQueueGenericReceive>:
{
  402420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402424:	b084      	sub	sp, #16
  402426:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402428:	b198      	cbz	r0, 402452 <xQueueGenericReceive+0x32>
  40242a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40242c:	b1e1      	cbz	r1, 402468 <xQueueGenericReceive+0x48>
  40242e:	4698      	mov	r8, r3
  402430:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402432:	4b61      	ldr	r3, [pc, #388]	; (4025b8 <xQueueGenericReceive+0x198>)
  402434:	4798      	blx	r3
  402436:	bb28      	cbnz	r0, 402484 <xQueueGenericReceive+0x64>
  402438:	9b01      	ldr	r3, [sp, #4]
  40243a:	b353      	cbz	r3, 402492 <xQueueGenericReceive+0x72>
  40243c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402440:	b672      	cpsid	i
  402442:	f383 8811 	msr	BASEPRI, r3
  402446:	f3bf 8f6f 	isb	sy
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	b662      	cpsie	i
  402450:	e7fe      	b.n	402450 <xQueueGenericReceive+0x30>
  402452:	f04f 0380 	mov.w	r3, #128	; 0x80
  402456:	b672      	cpsid	i
  402458:	f383 8811 	msr	BASEPRI, r3
  40245c:	f3bf 8f6f 	isb	sy
  402460:	f3bf 8f4f 	dsb	sy
  402464:	b662      	cpsie	i
  402466:	e7fe      	b.n	402466 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402468:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40246a:	2a00      	cmp	r2, #0
  40246c:	d0df      	beq.n	40242e <xQueueGenericReceive+0xe>
  40246e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402472:	b672      	cpsid	i
  402474:	f383 8811 	msr	BASEPRI, r3
  402478:	f3bf 8f6f 	isb	sy
  40247c:	f3bf 8f4f 	dsb	sy
  402480:	b662      	cpsie	i
  402482:	e7fe      	b.n	402482 <xQueueGenericReceive+0x62>
  402484:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402486:	4d4d      	ldr	r5, [pc, #308]	; (4025bc <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402488:	f8df a160 	ldr.w	sl, [pc, #352]	; 4025ec <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  40248c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4025cc <xQueueGenericReceive+0x1ac>
  402490:	e04b      	b.n	40252a <xQueueGenericReceive+0x10a>
  402492:	2600      	movs	r6, #0
  402494:	e7f7      	b.n	402486 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402496:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402498:	4639      	mov	r1, r7
  40249a:	4620      	mov	r0, r4
  40249c:	4b48      	ldr	r3, [pc, #288]	; (4025c0 <xQueueGenericReceive+0x1a0>)
  40249e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4024a0:	f1b8 0f00 	cmp.w	r8, #0
  4024a4:	d11d      	bne.n	4024e2 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4024a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024a8:	3b01      	subs	r3, #1
  4024aa:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4024ac:	6823      	ldr	r3, [r4, #0]
  4024ae:	b913      	cbnz	r3, 4024b6 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4024b0:	4b44      	ldr	r3, [pc, #272]	; (4025c4 <xQueueGenericReceive+0x1a4>)
  4024b2:	4798      	blx	r3
  4024b4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4024b6:	6923      	ldr	r3, [r4, #16]
  4024b8:	b16b      	cbz	r3, 4024d6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4024ba:	f104 0010 	add.w	r0, r4, #16
  4024be:	4b42      	ldr	r3, [pc, #264]	; (4025c8 <xQueueGenericReceive+0x1a8>)
  4024c0:	4798      	blx	r3
  4024c2:	2801      	cmp	r0, #1
  4024c4:	d107      	bne.n	4024d6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024ca:	4b40      	ldr	r3, [pc, #256]	; (4025cc <xQueueGenericReceive+0x1ac>)
  4024cc:	601a      	str	r2, [r3, #0]
  4024ce:	f3bf 8f4f 	dsb	sy
  4024d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4024d6:	4b3e      	ldr	r3, [pc, #248]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  4024d8:	4798      	blx	r3
				return pdPASS;
  4024da:	2001      	movs	r0, #1
}
  4024dc:	b004      	add	sp, #16
  4024de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4024e2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4024e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	d0f5      	beq.n	4024d6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4024ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4024ee:	4b36      	ldr	r3, [pc, #216]	; (4025c8 <xQueueGenericReceive+0x1a8>)
  4024f0:	4798      	blx	r3
  4024f2:	2800      	cmp	r0, #0
  4024f4:	d0ef      	beq.n	4024d6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4024f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024fa:	4b34      	ldr	r3, [pc, #208]	; (4025cc <xQueueGenericReceive+0x1ac>)
  4024fc:	601a      	str	r2, [r3, #0]
  4024fe:	f3bf 8f4f 	dsb	sy
  402502:	f3bf 8f6f 	isb	sy
  402506:	e7e6      	b.n	4024d6 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402508:	4b31      	ldr	r3, [pc, #196]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  40250a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40250c:	2000      	movs	r0, #0
  40250e:	e7e5      	b.n	4024dc <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402510:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402512:	6860      	ldr	r0, [r4, #4]
  402514:	4b2f      	ldr	r3, [pc, #188]	; (4025d4 <xQueueGenericReceive+0x1b4>)
  402516:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402518:	4b2d      	ldr	r3, [pc, #180]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  40251a:	4798      	blx	r3
  40251c:	e030      	b.n	402580 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40251e:	4620      	mov	r0, r4
  402520:	4b2d      	ldr	r3, [pc, #180]	; (4025d8 <xQueueGenericReceive+0x1b8>)
  402522:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402524:	4b2d      	ldr	r3, [pc, #180]	; (4025dc <xQueueGenericReceive+0x1bc>)
  402526:	4798      	blx	r3
  402528:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  40252a:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40252c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40252e:	2b00      	cmp	r3, #0
  402530:	d1b1      	bne.n	402496 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402532:	9b01      	ldr	r3, [sp, #4]
  402534:	2b00      	cmp	r3, #0
  402536:	d0e7      	beq.n	402508 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402538:	b90e      	cbnz	r6, 40253e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40253a:	a802      	add	r0, sp, #8
  40253c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40253e:	4b24      	ldr	r3, [pc, #144]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  402540:	4798      	blx	r3
		vTaskSuspendAll();
  402542:	4b27      	ldr	r3, [pc, #156]	; (4025e0 <xQueueGenericReceive+0x1c0>)
  402544:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402546:	47a8      	blx	r5
  402548:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40254a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40254e:	d101      	bne.n	402554 <xQueueGenericReceive+0x134>
  402550:	2300      	movs	r3, #0
  402552:	6463      	str	r3, [r4, #68]	; 0x44
  402554:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402556:	f1b3 3fff 	cmp.w	r3, #4294967295
  40255a:	d101      	bne.n	402560 <xQueueGenericReceive+0x140>
  40255c:	2300      	movs	r3, #0
  40255e:	64a3      	str	r3, [r4, #72]	; 0x48
  402560:	4b1b      	ldr	r3, [pc, #108]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  402562:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402564:	a901      	add	r1, sp, #4
  402566:	a802      	add	r0, sp, #8
  402568:	4b1e      	ldr	r3, [pc, #120]	; (4025e4 <xQueueGenericReceive+0x1c4>)
  40256a:	4798      	blx	r3
  40256c:	b9e8      	cbnz	r0, 4025aa <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40256e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402570:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402572:	4b17      	ldr	r3, [pc, #92]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  402574:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402576:	2e00      	cmp	r6, #0
  402578:	d1d1      	bne.n	40251e <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40257a:	6823      	ldr	r3, [r4, #0]
  40257c:	2b00      	cmp	r3, #0
  40257e:	d0c7      	beq.n	402510 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402580:	9901      	ldr	r1, [sp, #4]
  402582:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402586:	4b18      	ldr	r3, [pc, #96]	; (4025e8 <xQueueGenericReceive+0x1c8>)
  402588:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40258a:	4620      	mov	r0, r4
  40258c:	4b12      	ldr	r3, [pc, #72]	; (4025d8 <xQueueGenericReceive+0x1b8>)
  40258e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402590:	4b12      	ldr	r3, [pc, #72]	; (4025dc <xQueueGenericReceive+0x1bc>)
  402592:	4798      	blx	r3
  402594:	2800      	cmp	r0, #0
  402596:	d1c7      	bne.n	402528 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40259c:	f8c9 3000 	str.w	r3, [r9]
  4025a0:	f3bf 8f4f 	dsb	sy
  4025a4:	f3bf 8f6f 	isb	sy
  4025a8:	e7be      	b.n	402528 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4025aa:	4620      	mov	r0, r4
  4025ac:	4b0a      	ldr	r3, [pc, #40]	; (4025d8 <xQueueGenericReceive+0x1b8>)
  4025ae:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4025b0:	4b0a      	ldr	r3, [pc, #40]	; (4025dc <xQueueGenericReceive+0x1bc>)
  4025b2:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4025b4:	2000      	movs	r0, #0
  4025b6:	e791      	b.n	4024dc <xQueueGenericReceive+0xbc>
  4025b8:	004030b1 	.word	0x004030b1
  4025bc:	00401ac1 	.word	0x00401ac1
  4025c0:	00401e81 	.word	0x00401e81
  4025c4:	00403231 	.word	0x00403231
  4025c8:	00402f49 	.word	0x00402f49
  4025cc:	e000ed04 	.word	0xe000ed04
  4025d0:	00401b0d 	.word	0x00401b0d
  4025d4:	004030d1 	.word	0x004030d1
  4025d8:	00401ea9 	.word	0x00401ea9
  4025dc:	00402b2d 	.word	0x00402b2d
  4025e0:	004029c5 	.word	0x004029c5
  4025e4:	00403011 	.word	0x00403011
  4025e8:	00402e45 	.word	0x00402e45
  4025ec:	00402fe1 	.word	0x00402fe1

004025f0 <vQueueAddToRegistry>:
	{
  4025f0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4025f2:	4b0b      	ldr	r3, [pc, #44]	; (402620 <vQueueAddToRegistry+0x30>)
  4025f4:	681b      	ldr	r3, [r3, #0]
  4025f6:	b153      	cbz	r3, 40260e <vQueueAddToRegistry+0x1e>
  4025f8:	2301      	movs	r3, #1
  4025fa:	4c09      	ldr	r4, [pc, #36]	; (402620 <vQueueAddToRegistry+0x30>)
  4025fc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402600:	b132      	cbz	r2, 402610 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402602:	3301      	adds	r3, #1
  402604:	2b08      	cmp	r3, #8
  402606:	d1f9      	bne.n	4025fc <vQueueAddToRegistry+0xc>
	}
  402608:	f85d 4b04 	ldr.w	r4, [sp], #4
  40260c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40260e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402610:	4a03      	ldr	r2, [pc, #12]	; (402620 <vQueueAddToRegistry+0x30>)
  402612:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402616:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40261a:	6058      	str	r0, [r3, #4]
				break;
  40261c:	e7f4      	b.n	402608 <vQueueAddToRegistry+0x18>
  40261e:	bf00      	nop
  402620:	20400e04 	.word	0x20400e04

00402624 <vQueueWaitForMessageRestricted>:
	{
  402624:	b570      	push	{r4, r5, r6, lr}
  402626:	4604      	mov	r4, r0
  402628:	460d      	mov	r5, r1
  40262a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40262c:	4b0f      	ldr	r3, [pc, #60]	; (40266c <vQueueWaitForMessageRestricted+0x48>)
  40262e:	4798      	blx	r3
  402630:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402632:	f1b3 3fff 	cmp.w	r3, #4294967295
  402636:	d00b      	beq.n	402650 <vQueueWaitForMessageRestricted+0x2c>
  402638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40263a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40263e:	d00a      	beq.n	402656 <vQueueWaitForMessageRestricted+0x32>
  402640:	4b0b      	ldr	r3, [pc, #44]	; (402670 <vQueueWaitForMessageRestricted+0x4c>)
  402642:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402646:	b14b      	cbz	r3, 40265c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402648:	4620      	mov	r0, r4
  40264a:	4b0a      	ldr	r3, [pc, #40]	; (402674 <vQueueWaitForMessageRestricted+0x50>)
  40264c:	4798      	blx	r3
  40264e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402650:	2300      	movs	r3, #0
  402652:	6463      	str	r3, [r4, #68]	; 0x44
  402654:	e7f0      	b.n	402638 <vQueueWaitForMessageRestricted+0x14>
  402656:	2300      	movs	r3, #0
  402658:	64a3      	str	r3, [r4, #72]	; 0x48
  40265a:	e7f1      	b.n	402640 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40265c:	4632      	mov	r2, r6
  40265e:	4629      	mov	r1, r5
  402660:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402664:	4b04      	ldr	r3, [pc, #16]	; (402678 <vQueueWaitForMessageRestricted+0x54>)
  402666:	4798      	blx	r3
  402668:	e7ee      	b.n	402648 <vQueueWaitForMessageRestricted+0x24>
  40266a:	bf00      	nop
  40266c:	00401ac1 	.word	0x00401ac1
  402670:	00401b0d 	.word	0x00401b0d
  402674:	00401ea9 	.word	0x00401ea9
  402678:	00402ec9 	.word	0x00402ec9

0040267c <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

00402188 <xTaskIncrementTick>:
  402188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40218c:	4b42      	ldr	r3, [pc, #264]	; (402298 <xTaskIncrementTick+0x110>)
  40218e:	681b      	ldr	r3, [r3, #0]
  402190:	2b00      	cmp	r3, #0
  402192:	d178      	bne.n	402286 <xTaskIncrementTick+0xfe>
  402194:	4b41      	ldr	r3, [pc, #260]	; (40229c <xTaskIncrementTick+0x114>)
  402196:	681a      	ldr	r2, [r3, #0]
  402198:	3201      	adds	r2, #1
  40219a:	601a      	str	r2, [r3, #0]
  40219c:	681e      	ldr	r6, [r3, #0]
  40219e:	b9d6      	cbnz	r6, 4021d6 <xTaskIncrementTick+0x4e>
  4021a0:	4b3f      	ldr	r3, [pc, #252]	; (4022a0 <xTaskIncrementTick+0x118>)
  4021a2:	681b      	ldr	r3, [r3, #0]
  4021a4:	681b      	ldr	r3, [r3, #0]
  4021a6:	b153      	cbz	r3, 4021be <xTaskIncrementTick+0x36>
  4021a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ac:	b672      	cpsid	i
  4021ae:	f383 8811 	msr	BASEPRI, r3
  4021b2:	f3bf 8f6f 	isb	sy
  4021b6:	f3bf 8f4f 	dsb	sy
  4021ba:	b662      	cpsie	i
  4021bc:	e7fe      	b.n	4021bc <xTaskIncrementTick+0x34>
  4021be:	4a38      	ldr	r2, [pc, #224]	; (4022a0 <xTaskIncrementTick+0x118>)
  4021c0:	6811      	ldr	r1, [r2, #0]
  4021c2:	4b38      	ldr	r3, [pc, #224]	; (4022a4 <xTaskIncrementTick+0x11c>)
  4021c4:	6818      	ldr	r0, [r3, #0]
  4021c6:	6010      	str	r0, [r2, #0]
  4021c8:	6019      	str	r1, [r3, #0]
  4021ca:	4a37      	ldr	r2, [pc, #220]	; (4022a8 <xTaskIncrementTick+0x120>)
  4021cc:	6813      	ldr	r3, [r2, #0]
  4021ce:	3301      	adds	r3, #1
  4021d0:	6013      	str	r3, [r2, #0]
  4021d2:	4b36      	ldr	r3, [pc, #216]	; (4022ac <xTaskIncrementTick+0x124>)
  4021d4:	4798      	blx	r3
  4021d6:	4b36      	ldr	r3, [pc, #216]	; (4022b0 <xTaskIncrementTick+0x128>)
  4021d8:	681b      	ldr	r3, [r3, #0]
  4021da:	429e      	cmp	r6, r3
  4021dc:	d218      	bcs.n	402210 <xTaskIncrementTick+0x88>
  4021de:	2400      	movs	r4, #0
  4021e0:	4b34      	ldr	r3, [pc, #208]	; (4022b4 <xTaskIncrementTick+0x12c>)
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4021ea:	4a33      	ldr	r2, [pc, #204]	; (4022b8 <xTaskIncrementTick+0x130>)
  4021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4021f0:	2b02      	cmp	r3, #2
  4021f2:	bf28      	it	cs
  4021f4:	2401      	movcs	r4, #1
  4021f6:	4b31      	ldr	r3, [pc, #196]	; (4022bc <xTaskIncrementTick+0x134>)
  4021f8:	681b      	ldr	r3, [r3, #0]
  4021fa:	b90b      	cbnz	r3, 402200 <xTaskIncrementTick+0x78>
  4021fc:	4b30      	ldr	r3, [pc, #192]	; (4022c0 <xTaskIncrementTick+0x138>)
  4021fe:	4798      	blx	r3
  402200:	4b30      	ldr	r3, [pc, #192]	; (4022c4 <xTaskIncrementTick+0x13c>)
  402202:	681b      	ldr	r3, [r3, #0]
  402204:	2b00      	cmp	r3, #0
  402206:	bf0c      	ite	eq
  402208:	4620      	moveq	r0, r4
  40220a:	2001      	movne	r0, #1
  40220c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402210:	2400      	movs	r4, #0
  402212:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4022a0 <xTaskIncrementTick+0x118>
  402216:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4022d0 <xTaskIncrementTick+0x148>
  40221a:	4f2b      	ldr	r7, [pc, #172]	; (4022c8 <xTaskIncrementTick+0x140>)
  40221c:	e01f      	b.n	40225e <xTaskIncrementTick+0xd6>
  40221e:	f04f 32ff 	mov.w	r2, #4294967295
  402222:	4b23      	ldr	r3, [pc, #140]	; (4022b0 <xTaskIncrementTick+0x128>)
  402224:	601a      	str	r2, [r3, #0]
  402226:	e7db      	b.n	4021e0 <xTaskIncrementTick+0x58>
  402228:	4a21      	ldr	r2, [pc, #132]	; (4022b0 <xTaskIncrementTick+0x128>)
  40222a:	6013      	str	r3, [r2, #0]
  40222c:	e7d8      	b.n	4021e0 <xTaskIncrementTick+0x58>
  40222e:	f105 0018 	add.w	r0, r5, #24
  402232:	47c0      	blx	r8
  402234:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402236:	683a      	ldr	r2, [r7, #0]
  402238:	2301      	movs	r3, #1
  40223a:	4083      	lsls	r3, r0
  40223c:	4313      	orrs	r3, r2
  40223e:	603b      	str	r3, [r7, #0]
  402240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402244:	4651      	mov	r1, sl
  402246:	4b1c      	ldr	r3, [pc, #112]	; (4022b8 <xTaskIncrementTick+0x130>)
  402248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40224c:	4b1f      	ldr	r3, [pc, #124]	; (4022cc <xTaskIncrementTick+0x144>)
  40224e:	4798      	blx	r3
  402250:	4b18      	ldr	r3, [pc, #96]	; (4022b4 <xTaskIncrementTick+0x12c>)
  402252:	681b      	ldr	r3, [r3, #0]
  402254:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402258:	429a      	cmp	r2, r3
  40225a:	bf28      	it	cs
  40225c:	2401      	movcs	r4, #1
  40225e:	f8d9 3000 	ldr.w	r3, [r9]
  402262:	681b      	ldr	r3, [r3, #0]
  402264:	2b00      	cmp	r3, #0
  402266:	d0da      	beq.n	40221e <xTaskIncrementTick+0x96>
  402268:	f8d9 3000 	ldr.w	r3, [r9]
  40226c:	68db      	ldr	r3, [r3, #12]
  40226e:	68dd      	ldr	r5, [r3, #12]
  402270:	686b      	ldr	r3, [r5, #4]
  402272:	429e      	cmp	r6, r3
  402274:	d3d8      	bcc.n	402228 <xTaskIncrementTick+0xa0>
  402276:	f105 0a04 	add.w	sl, r5, #4
  40227a:	4650      	mov	r0, sl
  40227c:	47c0      	blx	r8
  40227e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402280:	2b00      	cmp	r3, #0
  402282:	d1d4      	bne.n	40222e <xTaskIncrementTick+0xa6>
  402284:	e7d6      	b.n	402234 <xTaskIncrementTick+0xac>
  402286:	4a0d      	ldr	r2, [pc, #52]	; (4022bc <xTaskIncrementTick+0x134>)
  402288:	6813      	ldr	r3, [r2, #0]
  40228a:	3301      	adds	r3, #1
  40228c:	6013      	str	r3, [r2, #0]
  40228e:	4b0c      	ldr	r3, [pc, #48]	; (4022c0 <xTaskIncrementTick+0x138>)
  402290:	4798      	blx	r3
  402292:	2400      	movs	r4, #0
  402294:	e7b4      	b.n	402200 <xTaskIncrementTick+0x78>
  402296:	bf00      	nop
  402298:	20400ce4 	.word	0x20400ce4
  40229c:	20400d64 	.word	0x20400d64
  4022a0:	20400c70 	.word	0x20400c70
  4022a4:	20400c74 	.word	0x20400c74
  4022a8:	20400d20 	.word	0x20400d20
  4022ac:	00401e25 	.word	0x00401e25
  4022b0:	20400d1c 	.word	0x20400d1c
  4022b4:	20400c6c 	.word	0x20400c6c
  4022b8:	20400c78 	.word	0x20400c78
  4022bc:	20400ce0 	.word	0x20400ce0
  4022c0:	00403105 	.word	0x00403105
  4022c4:	20400d68 	.word	0x20400d68
  4022c8:	20400cf0 	.word	0x20400cf0
  4022cc:	00401139 	.word	0x00401139
  4022d0:	00401185 	.word	0x00401185

<<<<<<< Updated upstream
004022d4 <xTaskResumeAll>:
  4022d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4022d8:	4b38      	ldr	r3, [pc, #224]	; (4023bc <xTaskResumeAll+0xe8>)
  4022da:	681b      	ldr	r3, [r3, #0]
  4022dc:	b953      	cbnz	r3, 4022f4 <xTaskResumeAll+0x20>
  4022de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022e2:	b672      	cpsid	i
  4022e4:	f383 8811 	msr	BASEPRI, r3
  4022e8:	f3bf 8f6f 	isb	sy
  4022ec:	f3bf 8f4f 	dsb	sy
  4022f0:	b662      	cpsie	i
  4022f2:	e7fe      	b.n	4022f2 <xTaskResumeAll+0x1e>
  4022f4:	4b32      	ldr	r3, [pc, #200]	; (4023c0 <xTaskResumeAll+0xec>)
  4022f6:	4798      	blx	r3
  4022f8:	4b30      	ldr	r3, [pc, #192]	; (4023bc <xTaskResumeAll+0xe8>)
  4022fa:	681a      	ldr	r2, [r3, #0]
  4022fc:	3a01      	subs	r2, #1
  4022fe:	601a      	str	r2, [r3, #0]
  402300:	681b      	ldr	r3, [r3, #0]
  402302:	2b00      	cmp	r3, #0
  402304:	d155      	bne.n	4023b2 <xTaskResumeAll+0xde>
  402306:	4b2f      	ldr	r3, [pc, #188]	; (4023c4 <xTaskResumeAll+0xf0>)
  402308:	681b      	ldr	r3, [r3, #0]
  40230a:	2b00      	cmp	r3, #0
  40230c:	d132      	bne.n	402374 <xTaskResumeAll+0xa0>
  40230e:	2400      	movs	r4, #0
  402310:	4b2d      	ldr	r3, [pc, #180]	; (4023c8 <xTaskResumeAll+0xf4>)
  402312:	4798      	blx	r3
  402314:	4620      	mov	r0, r4
  402316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40231a:	68fb      	ldr	r3, [r7, #12]
  40231c:	68dc      	ldr	r4, [r3, #12]
  40231e:	f104 0018 	add.w	r0, r4, #24
  402322:	47b0      	blx	r6
  402324:	f104 0804 	add.w	r8, r4, #4
  402328:	4640      	mov	r0, r8
  40232a:	47b0      	blx	r6
  40232c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40232e:	682a      	ldr	r2, [r5, #0]
  402330:	2301      	movs	r3, #1
  402332:	4083      	lsls	r3, r0
  402334:	4313      	orrs	r3, r2
  402336:	602b      	str	r3, [r5, #0]
  402338:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40233c:	4641      	mov	r1, r8
  40233e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402342:	4b22      	ldr	r3, [pc, #136]	; (4023cc <xTaskResumeAll+0xf8>)
  402344:	4798      	blx	r3
  402346:	4b22      	ldr	r3, [pc, #136]	; (4023d0 <xTaskResumeAll+0xfc>)
  402348:	681b      	ldr	r3, [r3, #0]
  40234a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40234e:	429a      	cmp	r2, r3
  402350:	d20c      	bcs.n	40236c <xTaskResumeAll+0x98>
  402352:	683b      	ldr	r3, [r7, #0]
  402354:	2b00      	cmp	r3, #0
  402356:	d1e0      	bne.n	40231a <xTaskResumeAll+0x46>
  402358:	4b1e      	ldr	r3, [pc, #120]	; (4023d4 <xTaskResumeAll+0x100>)
  40235a:	681b      	ldr	r3, [r3, #0]
  40235c:	b1db      	cbz	r3, 402396 <xTaskResumeAll+0xc2>
  40235e:	4b1d      	ldr	r3, [pc, #116]	; (4023d4 <xTaskResumeAll+0x100>)
  402360:	681b      	ldr	r3, [r3, #0]
  402362:	b1c3      	cbz	r3, 402396 <xTaskResumeAll+0xc2>
  402364:	4e1c      	ldr	r6, [pc, #112]	; (4023d8 <xTaskResumeAll+0x104>)
  402366:	4d1d      	ldr	r5, [pc, #116]	; (4023dc <xTaskResumeAll+0x108>)
  402368:	4c1a      	ldr	r4, [pc, #104]	; (4023d4 <xTaskResumeAll+0x100>)
  40236a:	e00e      	b.n	40238a <xTaskResumeAll+0xb6>
  40236c:	2201      	movs	r2, #1
  40236e:	4b1b      	ldr	r3, [pc, #108]	; (4023dc <xTaskResumeAll+0x108>)
  402370:	601a      	str	r2, [r3, #0]
  402372:	e7ee      	b.n	402352 <xTaskResumeAll+0x7e>
  402374:	4f1a      	ldr	r7, [pc, #104]	; (4023e0 <xTaskResumeAll+0x10c>)
  402376:	4e1b      	ldr	r6, [pc, #108]	; (4023e4 <xTaskResumeAll+0x110>)
  402378:	4d1b      	ldr	r5, [pc, #108]	; (4023e8 <xTaskResumeAll+0x114>)
  40237a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4023f0 <xTaskResumeAll+0x11c>
  40237e:	e7e8      	b.n	402352 <xTaskResumeAll+0x7e>
  402380:	6823      	ldr	r3, [r4, #0]
  402382:	3b01      	subs	r3, #1
  402384:	6023      	str	r3, [r4, #0]
  402386:	6823      	ldr	r3, [r4, #0]
  402388:	b12b      	cbz	r3, 402396 <xTaskResumeAll+0xc2>
  40238a:	47b0      	blx	r6
  40238c:	2800      	cmp	r0, #0
  40238e:	d0f7      	beq.n	402380 <xTaskResumeAll+0xac>
  402390:	2301      	movs	r3, #1
  402392:	602b      	str	r3, [r5, #0]
  402394:	e7f4      	b.n	402380 <xTaskResumeAll+0xac>
  402396:	4b11      	ldr	r3, [pc, #68]	; (4023dc <xTaskResumeAll+0x108>)
  402398:	681b      	ldr	r3, [r3, #0]
  40239a:	2b01      	cmp	r3, #1
  40239c:	d10b      	bne.n	4023b6 <xTaskResumeAll+0xe2>
  40239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4023a2:	4b12      	ldr	r3, [pc, #72]	; (4023ec <xTaskResumeAll+0x118>)
  4023a4:	601a      	str	r2, [r3, #0]
  4023a6:	f3bf 8f4f 	dsb	sy
  4023aa:	f3bf 8f6f 	isb	sy
  4023ae:	2401      	movs	r4, #1
  4023b0:	e7ae      	b.n	402310 <xTaskResumeAll+0x3c>
  4023b2:	2400      	movs	r4, #0
  4023b4:	e7ac      	b.n	402310 <xTaskResumeAll+0x3c>
  4023b6:	2400      	movs	r4, #0
  4023b8:	e7aa      	b.n	402310 <xTaskResumeAll+0x3c>
  4023ba:	bf00      	nop
  4023bc:	20400ce4 	.word	0x20400ce4
  4023c0:	00401269 	.word	0x00401269
  4023c4:	20400cdc 	.word	0x20400cdc
  4023c8:	004012b5 	.word	0x004012b5
  4023cc:	00401139 	.word	0x00401139
  4023d0:	20400c6c 	.word	0x20400c6c
  4023d4:	20400ce0 	.word	0x20400ce0
  4023d8:	00402189 	.word	0x00402189
  4023dc:	20400d68 	.word	0x20400d68
  4023e0:	20400d24 	.word	0x20400d24
  4023e4:	00401185 	.word	0x00401185
  4023e8:	20400cf0 	.word	0x20400cf0
  4023ec:	e000ed04 	.word	0xe000ed04
  4023f0:	20400c78 	.word	0x20400c78

004023f4 <vTaskDelay>:
  4023f4:	b510      	push	{r4, lr}
  4023f6:	2800      	cmp	r0, #0
  4023f8:	d029      	beq.n	40244e <vTaskDelay+0x5a>
  4023fa:	4604      	mov	r4, r0
  4023fc:	4b18      	ldr	r3, [pc, #96]	; (402460 <vTaskDelay+0x6c>)
  4023fe:	681b      	ldr	r3, [r3, #0]
  402400:	b153      	cbz	r3, 402418 <vTaskDelay+0x24>
  402402:	f04f 0380 	mov.w	r3, #128	; 0x80
  402406:	b672      	cpsid	i
  402408:	f383 8811 	msr	BASEPRI, r3
  40240c:	f3bf 8f6f 	isb	sy
  402410:	f3bf 8f4f 	dsb	sy
  402414:	b662      	cpsie	i
  402416:	e7fe      	b.n	402416 <vTaskDelay+0x22>
  402418:	4b12      	ldr	r3, [pc, #72]	; (402464 <vTaskDelay+0x70>)
  40241a:	4798      	blx	r3
  40241c:	4b12      	ldr	r3, [pc, #72]	; (402468 <vTaskDelay+0x74>)
  40241e:	681b      	ldr	r3, [r3, #0]
  402420:	441c      	add	r4, r3
  402422:	4b12      	ldr	r3, [pc, #72]	; (40246c <vTaskDelay+0x78>)
  402424:	6818      	ldr	r0, [r3, #0]
  402426:	3004      	adds	r0, #4
  402428:	4b11      	ldr	r3, [pc, #68]	; (402470 <vTaskDelay+0x7c>)
  40242a:	4798      	blx	r3
  40242c:	b948      	cbnz	r0, 402442 <vTaskDelay+0x4e>
  40242e:	4b0f      	ldr	r3, [pc, #60]	; (40246c <vTaskDelay+0x78>)
  402430:	681a      	ldr	r2, [r3, #0]
  402432:	4910      	ldr	r1, [pc, #64]	; (402474 <vTaskDelay+0x80>)
  402434:	680b      	ldr	r3, [r1, #0]
  402436:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402438:	2201      	movs	r2, #1
  40243a:	4082      	lsls	r2, r0
  40243c:	ea23 0302 	bic.w	r3, r3, r2
  402440:	600b      	str	r3, [r1, #0]
  402442:	4620      	mov	r0, r4
  402444:	4b0c      	ldr	r3, [pc, #48]	; (402478 <vTaskDelay+0x84>)
  402446:	4798      	blx	r3
  402448:	4b0c      	ldr	r3, [pc, #48]	; (40247c <vTaskDelay+0x88>)
  40244a:	4798      	blx	r3
  40244c:	b938      	cbnz	r0, 40245e <vTaskDelay+0x6a>
  40244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402452:	4b0b      	ldr	r3, [pc, #44]	; (402480 <vTaskDelay+0x8c>)
  402454:	601a      	str	r2, [r3, #0]
  402456:	f3bf 8f4f 	dsb	sy
  40245a:	f3bf 8f6f 	isb	sy
  40245e:	bd10      	pop	{r4, pc}
  402460:	20400ce4 	.word	0x20400ce4
  402464:	0040216d 	.word	0x0040216d
  402468:	20400d64 	.word	0x20400d64
  40246c:	20400c6c 	.word	0x20400c6c
  402470:	00401185 	.word	0x00401185
  402474:	20400cf0 	.word	0x20400cf0
  402478:	00401e51 	.word	0x00401e51
  40247c:	004022d5 	.word	0x004022d5
  402480:	e000ed04 	.word	0xe000ed04

00402484 <prvIdleTask>:
  402484:	b580      	push	{r7, lr}
  402486:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402510 <prvIdleTask+0x8c>
  40248a:	4e19      	ldr	r6, [pc, #100]	; (4024f0 <prvIdleTask+0x6c>)
  40248c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402514 <prvIdleTask+0x90>
  402490:	e02a      	b.n	4024e8 <prvIdleTask+0x64>
  402492:	4b18      	ldr	r3, [pc, #96]	; (4024f4 <prvIdleTask+0x70>)
  402494:	681b      	ldr	r3, [r3, #0]
  402496:	2b01      	cmp	r3, #1
  402498:	d81e      	bhi.n	4024d8 <prvIdleTask+0x54>
  40249a:	682b      	ldr	r3, [r5, #0]
  40249c:	2b00      	cmp	r3, #0
  40249e:	d0f8      	beq.n	402492 <prvIdleTask+0xe>
  4024a0:	47c0      	blx	r8
  4024a2:	6834      	ldr	r4, [r6, #0]
  4024a4:	47b8      	blx	r7
  4024a6:	2c00      	cmp	r4, #0
  4024a8:	d0f7      	beq.n	40249a <prvIdleTask+0x16>
  4024aa:	4b13      	ldr	r3, [pc, #76]	; (4024f8 <prvIdleTask+0x74>)
  4024ac:	4798      	blx	r3
  4024ae:	68f3      	ldr	r3, [r6, #12]
  4024b0:	68dc      	ldr	r4, [r3, #12]
  4024b2:	1d20      	adds	r0, r4, #4
  4024b4:	4b11      	ldr	r3, [pc, #68]	; (4024fc <prvIdleTask+0x78>)
  4024b6:	4798      	blx	r3
  4024b8:	4a11      	ldr	r2, [pc, #68]	; (402500 <prvIdleTask+0x7c>)
  4024ba:	6813      	ldr	r3, [r2, #0]
  4024bc:	3b01      	subs	r3, #1
  4024be:	6013      	str	r3, [r2, #0]
  4024c0:	682b      	ldr	r3, [r5, #0]
  4024c2:	3b01      	subs	r3, #1
  4024c4:	602b      	str	r3, [r5, #0]
  4024c6:	4b0f      	ldr	r3, [pc, #60]	; (402504 <prvIdleTask+0x80>)
  4024c8:	4798      	blx	r3
  4024ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4024cc:	f8df a048 	ldr.w	sl, [pc, #72]	; 402518 <prvIdleTask+0x94>
  4024d0:	47d0      	blx	sl
  4024d2:	4620      	mov	r0, r4
  4024d4:	47d0      	blx	sl
  4024d6:	e7e0      	b.n	40249a <prvIdleTask+0x16>
  4024d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4024dc:	f8c9 3000 	str.w	r3, [r9]
  4024e0:	f3bf 8f4f 	dsb	sy
  4024e4:	f3bf 8f6f 	isb	sy
  4024e8:	4d07      	ldr	r5, [pc, #28]	; (402508 <prvIdleTask+0x84>)
  4024ea:	4f08      	ldr	r7, [pc, #32]	; (40250c <prvIdleTask+0x88>)
  4024ec:	e7d5      	b.n	40249a <prvIdleTask+0x16>
  4024ee:	bf00      	nop
  4024f0:	20400d50 	.word	0x20400d50
  4024f4:	20400c78 	.word	0x20400c78
  4024f8:	00401269 	.word	0x00401269
  4024fc:	00401185 	.word	0x00401185
  402500:	20400cdc 	.word	0x20400cdc
  402504:	004012b5 	.word	0x004012b5
  402508:	20400cec 	.word	0x20400cec
  40250c:	004022d5 	.word	0x004022d5
  402510:	0040216d 	.word	0x0040216d
  402514:	e000ed04 	.word	0xe000ed04
  402518:	004014f5 	.word	0x004014f5

0040251c <vTaskSwitchContext>:
  40251c:	4b2d      	ldr	r3, [pc, #180]	; (4025d4 <vTaskSwitchContext+0xb8>)
  40251e:	681b      	ldr	r3, [r3, #0]
  402520:	2b00      	cmp	r3, #0
  402522:	d12c      	bne.n	40257e <vTaskSwitchContext+0x62>
  402524:	b510      	push	{r4, lr}
  402526:	2200      	movs	r2, #0
  402528:	4b2b      	ldr	r3, [pc, #172]	; (4025d8 <vTaskSwitchContext+0xbc>)
  40252a:	601a      	str	r2, [r3, #0]
  40252c:	4b2b      	ldr	r3, [pc, #172]	; (4025dc <vTaskSwitchContext+0xc0>)
  40252e:	681b      	ldr	r3, [r3, #0]
  402530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402532:	681a      	ldr	r2, [r3, #0]
  402534:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402538:	d103      	bne.n	402542 <vTaskSwitchContext+0x26>
  40253a:	685a      	ldr	r2, [r3, #4]
  40253c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402540:	d021      	beq.n	402586 <vTaskSwitchContext+0x6a>
  402542:	4b26      	ldr	r3, [pc, #152]	; (4025dc <vTaskSwitchContext+0xc0>)
  402544:	6818      	ldr	r0, [r3, #0]
  402546:	6819      	ldr	r1, [r3, #0]
  402548:	3134      	adds	r1, #52	; 0x34
  40254a:	4b25      	ldr	r3, [pc, #148]	; (4025e0 <vTaskSwitchContext+0xc4>)
  40254c:	4798      	blx	r3
  40254e:	4b25      	ldr	r3, [pc, #148]	; (4025e4 <vTaskSwitchContext+0xc8>)
  402550:	681b      	ldr	r3, [r3, #0]
  402552:	fab3 f383 	clz	r3, r3
  402556:	b2db      	uxtb	r3, r3
  402558:	f1c3 031f 	rsb	r3, r3, #31
  40255c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402560:	4a21      	ldr	r2, [pc, #132]	; (4025e8 <vTaskSwitchContext+0xcc>)
  402562:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402566:	b9ba      	cbnz	r2, 402598 <vTaskSwitchContext+0x7c>
  402568:	f04f 0380 	mov.w	r3, #128	; 0x80
  40256c:	b672      	cpsid	i
  40256e:	f383 8811 	msr	BASEPRI, r3
  402572:	f3bf 8f6f 	isb	sy
  402576:	f3bf 8f4f 	dsb	sy
  40257a:	b662      	cpsie	i
  40257c:	e7fe      	b.n	40257c <vTaskSwitchContext+0x60>
  40257e:	2201      	movs	r2, #1
  402580:	4b15      	ldr	r3, [pc, #84]	; (4025d8 <vTaskSwitchContext+0xbc>)
  402582:	601a      	str	r2, [r3, #0]
  402584:	4770      	bx	lr
  402586:	689a      	ldr	r2, [r3, #8]
  402588:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40258c:	d1d9      	bne.n	402542 <vTaskSwitchContext+0x26>
  40258e:	68db      	ldr	r3, [r3, #12]
  402590:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402594:	d1d5      	bne.n	402542 <vTaskSwitchContext+0x26>
  402596:	e7da      	b.n	40254e <vTaskSwitchContext+0x32>
  402598:	4a13      	ldr	r2, [pc, #76]	; (4025e8 <vTaskSwitchContext+0xcc>)
  40259a:	0099      	lsls	r1, r3, #2
  40259c:	18c8      	adds	r0, r1, r3
  40259e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4025a2:	6844      	ldr	r4, [r0, #4]
  4025a4:	6864      	ldr	r4, [r4, #4]
  4025a6:	6044      	str	r4, [r0, #4]
  4025a8:	4419      	add	r1, r3
  4025aa:	4602      	mov	r2, r0
  4025ac:	3208      	adds	r2, #8
  4025ae:	4294      	cmp	r4, r2
  4025b0:	d009      	beq.n	4025c6 <vTaskSwitchContext+0xaa>
  4025b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4025b6:	4a0c      	ldr	r2, [pc, #48]	; (4025e8 <vTaskSwitchContext+0xcc>)
  4025b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4025bc:	685b      	ldr	r3, [r3, #4]
  4025be:	68da      	ldr	r2, [r3, #12]
  4025c0:	4b06      	ldr	r3, [pc, #24]	; (4025dc <vTaskSwitchContext+0xc0>)
  4025c2:	601a      	str	r2, [r3, #0]
  4025c4:	bd10      	pop	{r4, pc}
  4025c6:	6860      	ldr	r0, [r4, #4]
  4025c8:	4a07      	ldr	r2, [pc, #28]	; (4025e8 <vTaskSwitchContext+0xcc>)
  4025ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4025ce:	6050      	str	r0, [r2, #4]
  4025d0:	e7ef      	b.n	4025b2 <vTaskSwitchContext+0x96>
  4025d2:	bf00      	nop
  4025d4:	20400ce4 	.word	0x20400ce4
  4025d8:	20400d68 	.word	0x20400d68
  4025dc:	20400c6c 	.word	0x20400c6c
  4025e0:	004030ed 	.word	0x004030ed
  4025e4:	20400cf0 	.word	0x20400cf0
  4025e8:	20400c78 	.word	0x20400c78

004025ec <vTaskPlaceOnEventList>:
  4025ec:	b538      	push	{r3, r4, r5, lr}
  4025ee:	b1e0      	cbz	r0, 40262a <vTaskPlaceOnEventList+0x3e>
  4025f0:	460c      	mov	r4, r1
  4025f2:	4d17      	ldr	r5, [pc, #92]	; (402650 <vTaskPlaceOnEventList+0x64>)
  4025f4:	6829      	ldr	r1, [r5, #0]
  4025f6:	3118      	adds	r1, #24
  4025f8:	4b16      	ldr	r3, [pc, #88]	; (402654 <vTaskPlaceOnEventList+0x68>)
  4025fa:	4798      	blx	r3
  4025fc:	6828      	ldr	r0, [r5, #0]
  4025fe:	3004      	adds	r0, #4
  402600:	4b15      	ldr	r3, [pc, #84]	; (402658 <vTaskPlaceOnEventList+0x6c>)
  402602:	4798      	blx	r3
  402604:	b940      	cbnz	r0, 402618 <vTaskPlaceOnEventList+0x2c>
  402606:	682a      	ldr	r2, [r5, #0]
  402608:	4914      	ldr	r1, [pc, #80]	; (40265c <vTaskPlaceOnEventList+0x70>)
  40260a:	680b      	ldr	r3, [r1, #0]
  40260c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40260e:	2201      	movs	r2, #1
  402610:	4082      	lsls	r2, r0
  402612:	ea23 0302 	bic.w	r3, r3, r2
  402616:	600b      	str	r3, [r1, #0]
  402618:	f1b4 3fff 	cmp.w	r4, #4294967295
  40261c:	d010      	beq.n	402640 <vTaskPlaceOnEventList+0x54>
  40261e:	4b10      	ldr	r3, [pc, #64]	; (402660 <vTaskPlaceOnEventList+0x74>)
  402620:	6818      	ldr	r0, [r3, #0]
  402622:	4420      	add	r0, r4
  402624:	4b0f      	ldr	r3, [pc, #60]	; (402664 <vTaskPlaceOnEventList+0x78>)
  402626:	4798      	blx	r3
  402628:	bd38      	pop	{r3, r4, r5, pc}
  40262a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40262e:	b672      	cpsid	i
  402630:	f383 8811 	msr	BASEPRI, r3
  402634:	f3bf 8f6f 	isb	sy
  402638:	f3bf 8f4f 	dsb	sy
  40263c:	b662      	cpsie	i
  40263e:	e7fe      	b.n	40263e <vTaskPlaceOnEventList+0x52>
  402640:	4b03      	ldr	r3, [pc, #12]	; (402650 <vTaskPlaceOnEventList+0x64>)
  402642:	6819      	ldr	r1, [r3, #0]
  402644:	3104      	adds	r1, #4
  402646:	4808      	ldr	r0, [pc, #32]	; (402668 <vTaskPlaceOnEventList+0x7c>)
  402648:	4b08      	ldr	r3, [pc, #32]	; (40266c <vTaskPlaceOnEventList+0x80>)
  40264a:	4798      	blx	r3
  40264c:	bd38      	pop	{r3, r4, r5, pc}
  40264e:	bf00      	nop
  402650:	20400c6c 	.word	0x20400c6c
  402654:	00401151 	.word	0x00401151
  402658:	00401185 	.word	0x00401185
  40265c:	20400cf0 	.word	0x20400cf0
  402660:	20400d64 	.word	0x20400d64
  402664:	00401e51 	.word	0x00401e51
  402668:	20400d3c 	.word	0x20400d3c
  40266c:	00401139 	.word	0x00401139

00402670 <vTaskPlaceOnEventListRestricted>:
  402670:	b1e8      	cbz	r0, 4026ae <vTaskPlaceOnEventListRestricted+0x3e>
  402672:	b570      	push	{r4, r5, r6, lr}
  402674:	4615      	mov	r5, r2
  402676:	460c      	mov	r4, r1
  402678:	4e16      	ldr	r6, [pc, #88]	; (4026d4 <vTaskPlaceOnEventListRestricted+0x64>)
  40267a:	6831      	ldr	r1, [r6, #0]
  40267c:	3118      	adds	r1, #24
  40267e:	4b16      	ldr	r3, [pc, #88]	; (4026d8 <vTaskPlaceOnEventListRestricted+0x68>)
  402680:	4798      	blx	r3
  402682:	6830      	ldr	r0, [r6, #0]
  402684:	3004      	adds	r0, #4
  402686:	4b15      	ldr	r3, [pc, #84]	; (4026dc <vTaskPlaceOnEventListRestricted+0x6c>)
  402688:	4798      	blx	r3
  40268a:	b940      	cbnz	r0, 40269e <vTaskPlaceOnEventListRestricted+0x2e>
  40268c:	6832      	ldr	r2, [r6, #0]
  40268e:	4914      	ldr	r1, [pc, #80]	; (4026e0 <vTaskPlaceOnEventListRestricted+0x70>)
  402690:	680b      	ldr	r3, [r1, #0]
  402692:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402694:	2201      	movs	r2, #1
  402696:	4082      	lsls	r2, r0
  402698:	ea23 0302 	bic.w	r3, r3, r2
  40269c:	600b      	str	r3, [r1, #0]
  40269e:	2d01      	cmp	r5, #1
  4026a0:	d010      	beq.n	4026c4 <vTaskPlaceOnEventListRestricted+0x54>
  4026a2:	4b10      	ldr	r3, [pc, #64]	; (4026e4 <vTaskPlaceOnEventListRestricted+0x74>)
  4026a4:	6818      	ldr	r0, [r3, #0]
  4026a6:	4420      	add	r0, r4
  4026a8:	4b0f      	ldr	r3, [pc, #60]	; (4026e8 <vTaskPlaceOnEventListRestricted+0x78>)
  4026aa:	4798      	blx	r3
  4026ac:	bd70      	pop	{r4, r5, r6, pc}
  4026ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026b2:	b672      	cpsid	i
  4026b4:	f383 8811 	msr	BASEPRI, r3
  4026b8:	f3bf 8f6f 	isb	sy
  4026bc:	f3bf 8f4f 	dsb	sy
  4026c0:	b662      	cpsie	i
  4026c2:	e7fe      	b.n	4026c2 <vTaskPlaceOnEventListRestricted+0x52>
  4026c4:	4b03      	ldr	r3, [pc, #12]	; (4026d4 <vTaskPlaceOnEventListRestricted+0x64>)
  4026c6:	6819      	ldr	r1, [r3, #0]
  4026c8:	3104      	adds	r1, #4
  4026ca:	4808      	ldr	r0, [pc, #32]	; (4026ec <vTaskPlaceOnEventListRestricted+0x7c>)
  4026cc:	4b02      	ldr	r3, [pc, #8]	; (4026d8 <vTaskPlaceOnEventListRestricted+0x68>)
  4026ce:	4798      	blx	r3
  4026d0:	bd70      	pop	{r4, r5, r6, pc}
  4026d2:	bf00      	nop
  4026d4:	20400c6c 	.word	0x20400c6c
  4026d8:	00401139 	.word	0x00401139
  4026dc:	00401185 	.word	0x00401185
  4026e0:	20400cf0 	.word	0x20400cf0
  4026e4:	20400d64 	.word	0x20400d64
  4026e8:	00401e51 	.word	0x00401e51
  4026ec:	20400d3c 	.word	0x20400d3c

004026f0 <xTaskRemoveFromEventList>:
  4026f0:	b538      	push	{r3, r4, r5, lr}
  4026f2:	68c3      	ldr	r3, [r0, #12]
  4026f4:	68dc      	ldr	r4, [r3, #12]
  4026f6:	b324      	cbz	r4, 402742 <xTaskRemoveFromEventList+0x52>
  4026f8:	f104 0518 	add.w	r5, r4, #24
  4026fc:	4628      	mov	r0, r5
  4026fe:	4b1a      	ldr	r3, [pc, #104]	; (402768 <xTaskRemoveFromEventList+0x78>)
  402700:	4798      	blx	r3
  402702:	4b1a      	ldr	r3, [pc, #104]	; (40276c <xTaskRemoveFromEventList+0x7c>)
  402704:	681b      	ldr	r3, [r3, #0]
  402706:	bb3b      	cbnz	r3, 402758 <xTaskRemoveFromEventList+0x68>
  402708:	1d25      	adds	r5, r4, #4
  40270a:	4628      	mov	r0, r5
  40270c:	4b16      	ldr	r3, [pc, #88]	; (402768 <xTaskRemoveFromEventList+0x78>)
  40270e:	4798      	blx	r3
  402710:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402712:	4a17      	ldr	r2, [pc, #92]	; (402770 <xTaskRemoveFromEventList+0x80>)
  402714:	6811      	ldr	r1, [r2, #0]
  402716:	2301      	movs	r3, #1
  402718:	4083      	lsls	r3, r0
  40271a:	430b      	orrs	r3, r1
  40271c:	6013      	str	r3, [r2, #0]
  40271e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402722:	4629      	mov	r1, r5
  402724:	4b13      	ldr	r3, [pc, #76]	; (402774 <xTaskRemoveFromEventList+0x84>)
  402726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40272a:	4b13      	ldr	r3, [pc, #76]	; (402778 <xTaskRemoveFromEventList+0x88>)
  40272c:	4798      	blx	r3
  40272e:	4b13      	ldr	r3, [pc, #76]	; (40277c <xTaskRemoveFromEventList+0x8c>)
  402730:	681b      	ldr	r3, [r3, #0]
  402732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402736:	429a      	cmp	r2, r3
  402738:	d913      	bls.n	402762 <xTaskRemoveFromEventList+0x72>
  40273a:	2001      	movs	r0, #1
  40273c:	4b10      	ldr	r3, [pc, #64]	; (402780 <xTaskRemoveFromEventList+0x90>)
  40273e:	6018      	str	r0, [r3, #0]
  402740:	bd38      	pop	{r3, r4, r5, pc}
  402742:	f04f 0380 	mov.w	r3, #128	; 0x80
  402746:	b672      	cpsid	i
  402748:	f383 8811 	msr	BASEPRI, r3
  40274c:	f3bf 8f6f 	isb	sy
  402750:	f3bf 8f4f 	dsb	sy
  402754:	b662      	cpsie	i
  402756:	e7fe      	b.n	402756 <xTaskRemoveFromEventList+0x66>
  402758:	4629      	mov	r1, r5
  40275a:	480a      	ldr	r0, [pc, #40]	; (402784 <xTaskRemoveFromEventList+0x94>)
  40275c:	4b06      	ldr	r3, [pc, #24]	; (402778 <xTaskRemoveFromEventList+0x88>)
  40275e:	4798      	blx	r3
  402760:	e7e5      	b.n	40272e <xTaskRemoveFromEventList+0x3e>
  402762:	2000      	movs	r0, #0
  402764:	bd38      	pop	{r3, r4, r5, pc}
  402766:	bf00      	nop
  402768:	00401185 	.word	0x00401185
  40276c:	20400ce4 	.word	0x20400ce4
  402770:	20400cf0 	.word	0x20400cf0
  402774:	20400c78 	.word	0x20400c78
  402778:	00401139 	.word	0x00401139
  40277c:	20400c6c 	.word	0x20400c6c
  402780:	20400d68 	.word	0x20400d68
  402784:	20400d24 	.word	0x20400d24

00402788 <vTaskSetTimeOutState>:
  402788:	b130      	cbz	r0, 402798 <vTaskSetTimeOutState+0x10>
  40278a:	4a09      	ldr	r2, [pc, #36]	; (4027b0 <vTaskSetTimeOutState+0x28>)
  40278c:	6812      	ldr	r2, [r2, #0]
  40278e:	6002      	str	r2, [r0, #0]
  402790:	4a08      	ldr	r2, [pc, #32]	; (4027b4 <vTaskSetTimeOutState+0x2c>)
  402792:	6812      	ldr	r2, [r2, #0]
  402794:	6042      	str	r2, [r0, #4]
  402796:	4770      	bx	lr
  402798:	f04f 0380 	mov.w	r3, #128	; 0x80
  40279c:	b672      	cpsid	i
  40279e:	f383 8811 	msr	BASEPRI, r3
  4027a2:	f3bf 8f6f 	isb	sy
  4027a6:	f3bf 8f4f 	dsb	sy
  4027aa:	b662      	cpsie	i
  4027ac:	e7fe      	b.n	4027ac <vTaskSetTimeOutState+0x24>
  4027ae:	bf00      	nop
  4027b0:	20400d20 	.word	0x20400d20
  4027b4:	20400d64 	.word	0x20400d64

004027b8 <xTaskCheckForTimeOut>:
  4027b8:	b538      	push	{r3, r4, r5, lr}
  4027ba:	b1c0      	cbz	r0, 4027ee <xTaskCheckForTimeOut+0x36>
  4027bc:	4604      	mov	r4, r0
  4027be:	b309      	cbz	r1, 402804 <xTaskCheckForTimeOut+0x4c>
  4027c0:	460d      	mov	r5, r1
  4027c2:	4b1d      	ldr	r3, [pc, #116]	; (402838 <xTaskCheckForTimeOut+0x80>)
  4027c4:	4798      	blx	r3
  4027c6:	4b1d      	ldr	r3, [pc, #116]	; (40283c <xTaskCheckForTimeOut+0x84>)
  4027c8:	681a      	ldr	r2, [r3, #0]
  4027ca:	682b      	ldr	r3, [r5, #0]
  4027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027d0:	d02e      	beq.n	402830 <xTaskCheckForTimeOut+0x78>
  4027d2:	491b      	ldr	r1, [pc, #108]	; (402840 <xTaskCheckForTimeOut+0x88>)
  4027d4:	6809      	ldr	r1, [r1, #0]
  4027d6:	6820      	ldr	r0, [r4, #0]
  4027d8:	4288      	cmp	r0, r1
  4027da:	d002      	beq.n	4027e2 <xTaskCheckForTimeOut+0x2a>
  4027dc:	6861      	ldr	r1, [r4, #4]
  4027de:	428a      	cmp	r2, r1
  4027e0:	d228      	bcs.n	402834 <xTaskCheckForTimeOut+0x7c>
  4027e2:	6861      	ldr	r1, [r4, #4]
  4027e4:	1a50      	subs	r0, r2, r1
  4027e6:	4283      	cmp	r3, r0
  4027e8:	d817      	bhi.n	40281a <xTaskCheckForTimeOut+0x62>
  4027ea:	2401      	movs	r4, #1
  4027ec:	e01c      	b.n	402828 <xTaskCheckForTimeOut+0x70>
  4027ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f2:	b672      	cpsid	i
  4027f4:	f383 8811 	msr	BASEPRI, r3
  4027f8:	f3bf 8f6f 	isb	sy
  4027fc:	f3bf 8f4f 	dsb	sy
  402800:	b662      	cpsie	i
  402802:	e7fe      	b.n	402802 <xTaskCheckForTimeOut+0x4a>
  402804:	f04f 0380 	mov.w	r3, #128	; 0x80
  402808:	b672      	cpsid	i
  40280a:	f383 8811 	msr	BASEPRI, r3
  40280e:	f3bf 8f6f 	isb	sy
  402812:	f3bf 8f4f 	dsb	sy
  402816:	b662      	cpsie	i
  402818:	e7fe      	b.n	402818 <xTaskCheckForTimeOut+0x60>
  40281a:	1a9b      	subs	r3, r3, r2
  40281c:	440b      	add	r3, r1
  40281e:	602b      	str	r3, [r5, #0]
  402820:	4620      	mov	r0, r4
  402822:	4b08      	ldr	r3, [pc, #32]	; (402844 <xTaskCheckForTimeOut+0x8c>)
  402824:	4798      	blx	r3
  402826:	2400      	movs	r4, #0
  402828:	4b07      	ldr	r3, [pc, #28]	; (402848 <xTaskCheckForTimeOut+0x90>)
  40282a:	4798      	blx	r3
  40282c:	4620      	mov	r0, r4
  40282e:	bd38      	pop	{r3, r4, r5, pc}
  402830:	2400      	movs	r4, #0
  402832:	e7f9      	b.n	402828 <xTaskCheckForTimeOut+0x70>
  402834:	2401      	movs	r4, #1
  402836:	e7f7      	b.n	402828 <xTaskCheckForTimeOut+0x70>
  402838:	00401269 	.word	0x00401269
  40283c:	20400d64 	.word	0x20400d64
  402840:	20400d20 	.word	0x20400d20
  402844:	00402789 	.word	0x00402789
  402848:	004012b5 	.word	0x004012b5

0040284c <vTaskMissedYield>:
  40284c:	2201      	movs	r2, #1
  40284e:	4b01      	ldr	r3, [pc, #4]	; (402854 <vTaskMissedYield+0x8>)
  402850:	601a      	str	r2, [r3, #0]
  402852:	4770      	bx	lr
  402854:	20400d68 	.word	0x20400d68

00402858 <xTaskGetSchedulerState>:
  402858:	4b05      	ldr	r3, [pc, #20]	; (402870 <xTaskGetSchedulerState+0x18>)
  40285a:	681b      	ldr	r3, [r3, #0]
  40285c:	b133      	cbz	r3, 40286c <xTaskGetSchedulerState+0x14>
  40285e:	4b05      	ldr	r3, [pc, #20]	; (402874 <xTaskGetSchedulerState+0x1c>)
  402860:	681b      	ldr	r3, [r3, #0]
  402862:	2b00      	cmp	r3, #0
  402864:	bf0c      	ite	eq
  402866:	2002      	moveq	r0, #2
  402868:	2000      	movne	r0, #0
  40286a:	4770      	bx	lr
  40286c:	2001      	movs	r0, #1
  40286e:	4770      	bx	lr
  402870:	20400d38 	.word	0x20400d38
  402874:	20400ce4 	.word	0x20400ce4

00402878 <vTaskPriorityInherit>:
  402878:	2800      	cmp	r0, #0
  40287a:	d044      	beq.n	402906 <vTaskPriorityInherit+0x8e>
  40287c:	b538      	push	{r3, r4, r5, lr}
  40287e:	4604      	mov	r4, r0
  402880:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402882:	4921      	ldr	r1, [pc, #132]	; (402908 <vTaskPriorityInherit+0x90>)
  402884:	6809      	ldr	r1, [r1, #0]
  402886:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402888:	428a      	cmp	r2, r1
  40288a:	d214      	bcs.n	4028b6 <vTaskPriorityInherit+0x3e>
  40288c:	6981      	ldr	r1, [r0, #24]
  40288e:	2900      	cmp	r1, #0
  402890:	db05      	blt.n	40289e <vTaskPriorityInherit+0x26>
  402892:	491d      	ldr	r1, [pc, #116]	; (402908 <vTaskPriorityInherit+0x90>)
  402894:	6809      	ldr	r1, [r1, #0]
  402896:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402898:	f1c1 0105 	rsb	r1, r1, #5
  40289c:	6181      	str	r1, [r0, #24]
  40289e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4028a2:	491a      	ldr	r1, [pc, #104]	; (40290c <vTaskPriorityInherit+0x94>)
  4028a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4028a8:	6961      	ldr	r1, [r4, #20]
  4028aa:	4291      	cmp	r1, r2
  4028ac:	d004      	beq.n	4028b8 <vTaskPriorityInherit+0x40>
  4028ae:	4a16      	ldr	r2, [pc, #88]	; (402908 <vTaskPriorityInherit+0x90>)
  4028b0:	6812      	ldr	r2, [r2, #0]
  4028b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4028b4:	62e2      	str	r2, [r4, #44]	; 0x2c
  4028b6:	bd38      	pop	{r3, r4, r5, pc}
  4028b8:	1d25      	adds	r5, r4, #4
  4028ba:	4628      	mov	r0, r5
  4028bc:	4b14      	ldr	r3, [pc, #80]	; (402910 <vTaskPriorityInherit+0x98>)
  4028be:	4798      	blx	r3
  4028c0:	b970      	cbnz	r0, 4028e0 <vTaskPriorityInherit+0x68>
  4028c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4028c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4028c8:	4a10      	ldr	r2, [pc, #64]	; (40290c <vTaskPriorityInherit+0x94>)
  4028ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4028ce:	b93a      	cbnz	r2, 4028e0 <vTaskPriorityInherit+0x68>
  4028d0:	4810      	ldr	r0, [pc, #64]	; (402914 <vTaskPriorityInherit+0x9c>)
  4028d2:	6802      	ldr	r2, [r0, #0]
  4028d4:	2101      	movs	r1, #1
  4028d6:	fa01 f303 	lsl.w	r3, r1, r3
  4028da:	ea22 0303 	bic.w	r3, r2, r3
  4028de:	6003      	str	r3, [r0, #0]
  4028e0:	4b09      	ldr	r3, [pc, #36]	; (402908 <vTaskPriorityInherit+0x90>)
  4028e2:	681b      	ldr	r3, [r3, #0]
  4028e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4028e6:	62e0      	str	r0, [r4, #44]	; 0x2c
  4028e8:	4a0a      	ldr	r2, [pc, #40]	; (402914 <vTaskPriorityInherit+0x9c>)
  4028ea:	6811      	ldr	r1, [r2, #0]
  4028ec:	2301      	movs	r3, #1
  4028ee:	4083      	lsls	r3, r0
  4028f0:	430b      	orrs	r3, r1
  4028f2:	6013      	str	r3, [r2, #0]
  4028f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028f8:	4629      	mov	r1, r5
  4028fa:	4b04      	ldr	r3, [pc, #16]	; (40290c <vTaskPriorityInherit+0x94>)
  4028fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402900:	4b05      	ldr	r3, [pc, #20]	; (402918 <vTaskPriorityInherit+0xa0>)
  402902:	4798      	blx	r3
  402904:	bd38      	pop	{r3, r4, r5, pc}
  402906:	4770      	bx	lr
  402908:	20400c6c 	.word	0x20400c6c
  40290c:	20400c78 	.word	0x20400c78
  402910:	00401185 	.word	0x00401185
  402914:	20400cf0 	.word	0x20400cf0
  402918:	00401139 	.word	0x00401139

0040291c <xTaskPriorityDisinherit>:
  40291c:	2800      	cmp	r0, #0
  40291e:	d04d      	beq.n	4029bc <xTaskPriorityDisinherit+0xa0>
  402920:	b538      	push	{r3, r4, r5, lr}
  402922:	4604      	mov	r4, r0
  402924:	4a27      	ldr	r2, [pc, #156]	; (4029c4 <xTaskPriorityDisinherit+0xa8>)
  402926:	6812      	ldr	r2, [r2, #0]
  402928:	4290      	cmp	r0, r2
  40292a:	d00a      	beq.n	402942 <xTaskPriorityDisinherit+0x26>
  40292c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402930:	b672      	cpsid	i
  402932:	f383 8811 	msr	BASEPRI, r3
  402936:	f3bf 8f6f 	isb	sy
  40293a:	f3bf 8f4f 	dsb	sy
  40293e:	b662      	cpsie	i
  402940:	e7fe      	b.n	402940 <xTaskPriorityDisinherit+0x24>
  402942:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402944:	b952      	cbnz	r2, 40295c <xTaskPriorityDisinherit+0x40>
  402946:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294a:	b672      	cpsid	i
  40294c:	f383 8811 	msr	BASEPRI, r3
  402950:	f3bf 8f6f 	isb	sy
  402954:	f3bf 8f4f 	dsb	sy
  402958:	b662      	cpsie	i
  40295a:	e7fe      	b.n	40295a <xTaskPriorityDisinherit+0x3e>
  40295c:	3a01      	subs	r2, #1
  40295e:	64c2      	str	r2, [r0, #76]	; 0x4c
  402960:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402962:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  402964:	4288      	cmp	r0, r1
  402966:	d02b      	beq.n	4029c0 <xTaskPriorityDisinherit+0xa4>
  402968:	bb52      	cbnz	r2, 4029c0 <xTaskPriorityDisinherit+0xa4>
  40296a:	1d25      	adds	r5, r4, #4
  40296c:	4628      	mov	r0, r5
  40296e:	4b16      	ldr	r3, [pc, #88]	; (4029c8 <xTaskPriorityDisinherit+0xac>)
  402970:	4798      	blx	r3
  402972:	b968      	cbnz	r0, 402990 <xTaskPriorityDisinherit+0x74>
  402974:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402976:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40297a:	4b14      	ldr	r3, [pc, #80]	; (4029cc <xTaskPriorityDisinherit+0xb0>)
  40297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402980:	b933      	cbnz	r3, 402990 <xTaskPriorityDisinherit+0x74>
  402982:	4813      	ldr	r0, [pc, #76]	; (4029d0 <xTaskPriorityDisinherit+0xb4>)
  402984:	6803      	ldr	r3, [r0, #0]
  402986:	2201      	movs	r2, #1
  402988:	408a      	lsls	r2, r1
  40298a:	ea23 0302 	bic.w	r3, r3, r2
  40298e:	6003      	str	r3, [r0, #0]
  402990:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402992:	62e0      	str	r0, [r4, #44]	; 0x2c
  402994:	f1c0 0305 	rsb	r3, r0, #5
  402998:	61a3      	str	r3, [r4, #24]
  40299a:	4a0d      	ldr	r2, [pc, #52]	; (4029d0 <xTaskPriorityDisinherit+0xb4>)
  40299c:	6811      	ldr	r1, [r2, #0]
  40299e:	2401      	movs	r4, #1
  4029a0:	fa04 f300 	lsl.w	r3, r4, r0
  4029a4:	430b      	orrs	r3, r1
  4029a6:	6013      	str	r3, [r2, #0]
  4029a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4029ac:	4629      	mov	r1, r5
  4029ae:	4b07      	ldr	r3, [pc, #28]	; (4029cc <xTaskPriorityDisinherit+0xb0>)
  4029b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4029b4:	4b07      	ldr	r3, [pc, #28]	; (4029d4 <xTaskPriorityDisinherit+0xb8>)
  4029b6:	4798      	blx	r3
  4029b8:	4620      	mov	r0, r4
  4029ba:	bd38      	pop	{r3, r4, r5, pc}
  4029bc:	2000      	movs	r0, #0
  4029be:	4770      	bx	lr
  4029c0:	2000      	movs	r0, #0
  4029c2:	bd38      	pop	{r3, r4, r5, pc}
  4029c4:	20400c6c 	.word	0x20400c6c
  4029c8:	00401185 	.word	0x00401185
  4029cc:	20400c78 	.word	0x20400c78
  4029d0:	20400cf0 	.word	0x20400cf0
  4029d4:	00401139 	.word	0x00401139

004029d8 <pvTaskIncrementMutexHeldCount>:
  4029d8:	4b05      	ldr	r3, [pc, #20]	; (4029f0 <pvTaskIncrementMutexHeldCount+0x18>)
  4029da:	681b      	ldr	r3, [r3, #0]
  4029dc:	b123      	cbz	r3, 4029e8 <pvTaskIncrementMutexHeldCount+0x10>
  4029de:	4b04      	ldr	r3, [pc, #16]	; (4029f0 <pvTaskIncrementMutexHeldCount+0x18>)
  4029e0:	681a      	ldr	r2, [r3, #0]
  4029e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4029e4:	3301      	adds	r3, #1
  4029e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  4029e8:	4b01      	ldr	r3, [pc, #4]	; (4029f0 <pvTaskIncrementMutexHeldCount+0x18>)
  4029ea:	6818      	ldr	r0, [r3, #0]
  4029ec:	4770      	bx	lr
  4029ee:	bf00      	nop
  4029f0:	20400c6c 	.word	0x20400c6c

004029f4 <prvInsertTimerInActiveList>:
  4029f4:	b508      	push	{r3, lr}
  4029f6:	6041      	str	r1, [r0, #4]
  4029f8:	6100      	str	r0, [r0, #16]
  4029fa:	4291      	cmp	r1, r2
  4029fc:	d80c      	bhi.n	402a18 <prvInsertTimerInActiveList+0x24>
  4029fe:	1ad2      	subs	r2, r2, r3
  402a00:	6983      	ldr	r3, [r0, #24]
  402a02:	429a      	cmp	r2, r3
  402a04:	d301      	bcc.n	402a0a <prvInsertTimerInActiveList+0x16>
  402a06:	2001      	movs	r0, #1
  402a08:	bd08      	pop	{r3, pc}
  402a0a:	1d01      	adds	r1, r0, #4
  402a0c:	4b09      	ldr	r3, [pc, #36]	; (402a34 <prvInsertTimerInActiveList+0x40>)
  402a0e:	6818      	ldr	r0, [r3, #0]
  402a10:	4b09      	ldr	r3, [pc, #36]	; (402a38 <prvInsertTimerInActiveList+0x44>)
  402a12:	4798      	blx	r3
  402a14:	2000      	movs	r0, #0
  402a16:	bd08      	pop	{r3, pc}
  402a18:	429a      	cmp	r2, r3
  402a1a:	d203      	bcs.n	402a24 <prvInsertTimerInActiveList+0x30>
  402a1c:	4299      	cmp	r1, r3
  402a1e:	d301      	bcc.n	402a24 <prvInsertTimerInActiveList+0x30>
  402a20:	2001      	movs	r0, #1
  402a22:	bd08      	pop	{r3, pc}
  402a24:	1d01      	adds	r1, r0, #4
  402a26:	4b05      	ldr	r3, [pc, #20]	; (402a3c <prvInsertTimerInActiveList+0x48>)
  402a28:	6818      	ldr	r0, [r3, #0]
  402a2a:	4b03      	ldr	r3, [pc, #12]	; (402a38 <prvInsertTimerInActiveList+0x44>)
  402a2c:	4798      	blx	r3
  402a2e:	2000      	movs	r0, #0
  402a30:	bd08      	pop	{r3, pc}
  402a32:	bf00      	nop
  402a34:	20400d70 	.word	0x20400d70
  402a38:	00401151 	.word	0x00401151
  402a3c:	20400d6c 	.word	0x20400d6c

00402a40 <prvCheckForValidListAndQueue>:
  402a40:	b570      	push	{r4, r5, r6, lr}
  402a42:	4b15      	ldr	r3, [pc, #84]	; (402a98 <prvCheckForValidListAndQueue+0x58>)
  402a44:	4798      	blx	r3
  402a46:	4b15      	ldr	r3, [pc, #84]	; (402a9c <prvCheckForValidListAndQueue+0x5c>)
  402a48:	681b      	ldr	r3, [r3, #0]
  402a4a:	b113      	cbz	r3, 402a52 <prvCheckForValidListAndQueue+0x12>
  402a4c:	4b14      	ldr	r3, [pc, #80]	; (402aa0 <prvCheckForValidListAndQueue+0x60>)
  402a4e:	4798      	blx	r3
  402a50:	bd70      	pop	{r4, r5, r6, pc}
  402a52:	4d14      	ldr	r5, [pc, #80]	; (402aa4 <prvCheckForValidListAndQueue+0x64>)
  402a54:	4628      	mov	r0, r5
  402a56:	4e14      	ldr	r6, [pc, #80]	; (402aa8 <prvCheckForValidListAndQueue+0x68>)
  402a58:	47b0      	blx	r6
  402a5a:	4c14      	ldr	r4, [pc, #80]	; (402aac <prvCheckForValidListAndQueue+0x6c>)
  402a5c:	4620      	mov	r0, r4
  402a5e:	47b0      	blx	r6
  402a60:	4b13      	ldr	r3, [pc, #76]	; (402ab0 <prvCheckForValidListAndQueue+0x70>)
  402a62:	601d      	str	r5, [r3, #0]
  402a64:	4b13      	ldr	r3, [pc, #76]	; (402ab4 <prvCheckForValidListAndQueue+0x74>)
  402a66:	601c      	str	r4, [r3, #0]
  402a68:	2200      	movs	r2, #0
  402a6a:	2110      	movs	r1, #16
  402a6c:	2005      	movs	r0, #5
  402a6e:	4b12      	ldr	r3, [pc, #72]	; (402ab8 <prvCheckForValidListAndQueue+0x78>)
  402a70:	4798      	blx	r3
  402a72:	4b0a      	ldr	r3, [pc, #40]	; (402a9c <prvCheckForValidListAndQueue+0x5c>)
  402a74:	6018      	str	r0, [r3, #0]
  402a76:	b118      	cbz	r0, 402a80 <prvCheckForValidListAndQueue+0x40>
  402a78:	4910      	ldr	r1, [pc, #64]	; (402abc <prvCheckForValidListAndQueue+0x7c>)
  402a7a:	4b11      	ldr	r3, [pc, #68]	; (402ac0 <prvCheckForValidListAndQueue+0x80>)
  402a7c:	4798      	blx	r3
  402a7e:	e7e5      	b.n	402a4c <prvCheckForValidListAndQueue+0xc>
  402a80:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a84:	b672      	cpsid	i
  402a86:	f383 8811 	msr	BASEPRI, r3
  402a8a:	f3bf 8f6f 	isb	sy
  402a8e:	f3bf 8f4f 	dsb	sy
  402a92:	b662      	cpsie	i
  402a94:	e7fe      	b.n	402a94 <prvCheckForValidListAndQueue+0x54>
  402a96:	bf00      	nop
  402a98:	00401269 	.word	0x00401269
  402a9c:	20400da0 	.word	0x20400da0
  402aa0:	004012b5 	.word	0x004012b5
  402aa4:	20400d74 	.word	0x20400d74
  402aa8:	0040111d 	.word	0x0040111d
  402aac:	20400d88 	.word	0x20400d88
  402ab0:	20400d6c 	.word	0x20400d6c
  402ab4:	20400d70 	.word	0x20400d70
  402ab8:	00401789 	.word	0x00401789
  402abc:	00408c48 	.word	0x00408c48
  402ac0:	00401d99 	.word	0x00401d99

00402ac4 <xTimerCreateTimerTask>:
  402ac4:	b510      	push	{r4, lr}
  402ac6:	b084      	sub	sp, #16
  402ac8:	4b0f      	ldr	r3, [pc, #60]	; (402b08 <xTimerCreateTimerTask+0x44>)
  402aca:	4798      	blx	r3
  402acc:	4b0f      	ldr	r3, [pc, #60]	; (402b0c <xTimerCreateTimerTask+0x48>)
  402ace:	681b      	ldr	r3, [r3, #0]
  402ad0:	b173      	cbz	r3, 402af0 <xTimerCreateTimerTask+0x2c>
  402ad2:	2300      	movs	r3, #0
  402ad4:	9303      	str	r3, [sp, #12]
  402ad6:	9302      	str	r3, [sp, #8]
  402ad8:	9301      	str	r3, [sp, #4]
  402ada:	2204      	movs	r2, #4
  402adc:	9200      	str	r2, [sp, #0]
  402ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402ae2:	490b      	ldr	r1, [pc, #44]	; (402b10 <xTimerCreateTimerTask+0x4c>)
  402ae4:	480b      	ldr	r0, [pc, #44]	; (402b14 <xTimerCreateTimerTask+0x50>)
  402ae6:	4c0c      	ldr	r4, [pc, #48]	; (402b18 <xTimerCreateTimerTask+0x54>)
  402ae8:	47a0      	blx	r4
  402aea:	b108      	cbz	r0, 402af0 <xTimerCreateTimerTask+0x2c>
  402aec:	b004      	add	sp, #16
  402aee:	bd10      	pop	{r4, pc}
  402af0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402af4:	b672      	cpsid	i
  402af6:	f383 8811 	msr	BASEPRI, r3
  402afa:	f3bf 8f6f 	isb	sy
  402afe:	f3bf 8f4f 	dsb	sy
  402b02:	b662      	cpsie	i
  402b04:	e7fe      	b.n	402b04 <xTimerCreateTimerTask+0x40>
  402b06:	bf00      	nop
  402b08:	00402a41 	.word	0x00402a41
  402b0c:	20400da0 	.word	0x20400da0
  402b10:	00408c50 	.word	0x00408c50
  402b14:	00402c45 	.word	0x00402c45
  402b18:	00401ea9 	.word	0x00401ea9

00402b1c <xTimerGenericCommand>:
  402b1c:	b1d8      	cbz	r0, 402b56 <xTimerGenericCommand+0x3a>
  402b1e:	b530      	push	{r4, r5, lr}
  402b20:	b085      	sub	sp, #20
  402b22:	4615      	mov	r5, r2
  402b24:	4604      	mov	r4, r0
  402b26:	4a15      	ldr	r2, [pc, #84]	; (402b7c <xTimerGenericCommand+0x60>)
  402b28:	6810      	ldr	r0, [r2, #0]
  402b2a:	b320      	cbz	r0, 402b76 <xTimerGenericCommand+0x5a>
  402b2c:	461a      	mov	r2, r3
  402b2e:	9100      	str	r1, [sp, #0]
  402b30:	9501      	str	r5, [sp, #4]
  402b32:	9402      	str	r4, [sp, #8]
  402b34:	2905      	cmp	r1, #5
  402b36:	dc19      	bgt.n	402b6c <xTimerGenericCommand+0x50>
  402b38:	4b11      	ldr	r3, [pc, #68]	; (402b80 <xTimerGenericCommand+0x64>)
  402b3a:	4798      	blx	r3
  402b3c:	2802      	cmp	r0, #2
  402b3e:	f04f 0300 	mov.w	r3, #0
  402b42:	bf0c      	ite	eq
  402b44:	9a08      	ldreq	r2, [sp, #32]
  402b46:	461a      	movne	r2, r3
  402b48:	4669      	mov	r1, sp
  402b4a:	480c      	ldr	r0, [pc, #48]	; (402b7c <xTimerGenericCommand+0x60>)
  402b4c:	6800      	ldr	r0, [r0, #0]
  402b4e:	4c0d      	ldr	r4, [pc, #52]	; (402b84 <xTimerGenericCommand+0x68>)
  402b50:	47a0      	blx	r4
  402b52:	b005      	add	sp, #20
  402b54:	bd30      	pop	{r4, r5, pc}
  402b56:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b5a:	b672      	cpsid	i
  402b5c:	f383 8811 	msr	BASEPRI, r3
  402b60:	f3bf 8f6f 	isb	sy
  402b64:	f3bf 8f4f 	dsb	sy
  402b68:	b662      	cpsie	i
  402b6a:	e7fe      	b.n	402b6a <xTimerGenericCommand+0x4e>
  402b6c:	2300      	movs	r3, #0
  402b6e:	4669      	mov	r1, sp
  402b70:	4c05      	ldr	r4, [pc, #20]	; (402b88 <xTimerGenericCommand+0x6c>)
  402b72:	47a0      	blx	r4
  402b74:	e7ed      	b.n	402b52 <xTimerGenericCommand+0x36>
  402b76:	2000      	movs	r0, #0
  402b78:	e7eb      	b.n	402b52 <xTimerGenericCommand+0x36>
  402b7a:	bf00      	nop
  402b7c:	20400da0 	.word	0x20400da0
  402b80:	00402859 	.word	0x00402859
  402b84:	00401805 	.word	0x00401805
  402b88:	004019e9 	.word	0x004019e9

00402b8c <prvSampleTimeNow>:
  402b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b90:	b082      	sub	sp, #8
  402b92:	4680      	mov	r8, r0
  402b94:	4b24      	ldr	r3, [pc, #144]	; (402c28 <prvSampleTimeNow+0x9c>)
  402b96:	4798      	blx	r3
  402b98:	4607      	mov	r7, r0
  402b9a:	4b24      	ldr	r3, [pc, #144]	; (402c2c <prvSampleTimeNow+0xa0>)
  402b9c:	681b      	ldr	r3, [r3, #0]
  402b9e:	4298      	cmp	r0, r3
  402ba0:	d31b      	bcc.n	402bda <prvSampleTimeNow+0x4e>
  402ba2:	2300      	movs	r3, #0
  402ba4:	f8c8 3000 	str.w	r3, [r8]
  402ba8:	4b20      	ldr	r3, [pc, #128]	; (402c2c <prvSampleTimeNow+0xa0>)
  402baa:	601f      	str	r7, [r3, #0]
  402bac:	4638      	mov	r0, r7
  402bae:	b002      	add	sp, #8
  402bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bb4:	2100      	movs	r1, #0
  402bb6:	9100      	str	r1, [sp, #0]
  402bb8:	460b      	mov	r3, r1
  402bba:	4652      	mov	r2, sl
  402bbc:	4620      	mov	r0, r4
  402bbe:	4c1c      	ldr	r4, [pc, #112]	; (402c30 <prvSampleTimeNow+0xa4>)
  402bc0:	47a0      	blx	r4
  402bc2:	b960      	cbnz	r0, 402bde <prvSampleTimeNow+0x52>
  402bc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bc8:	b672      	cpsid	i
  402bca:	f383 8811 	msr	BASEPRI, r3
  402bce:	f3bf 8f6f 	isb	sy
  402bd2:	f3bf 8f4f 	dsb	sy
  402bd6:	b662      	cpsie	i
  402bd8:	e7fe      	b.n	402bd8 <prvSampleTimeNow+0x4c>
  402bda:	4d16      	ldr	r5, [pc, #88]	; (402c34 <prvSampleTimeNow+0xa8>)
  402bdc:	4e16      	ldr	r6, [pc, #88]	; (402c38 <prvSampleTimeNow+0xac>)
  402bde:	682b      	ldr	r3, [r5, #0]
  402be0:	681a      	ldr	r2, [r3, #0]
  402be2:	b1c2      	cbz	r2, 402c16 <prvSampleTimeNow+0x8a>
  402be4:	68db      	ldr	r3, [r3, #12]
  402be6:	f8d3 a000 	ldr.w	sl, [r3]
  402bea:	68dc      	ldr	r4, [r3, #12]
  402bec:	f104 0904 	add.w	r9, r4, #4
  402bf0:	4648      	mov	r0, r9
  402bf2:	47b0      	blx	r6
  402bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402bf6:	4620      	mov	r0, r4
  402bf8:	4798      	blx	r3
  402bfa:	69e3      	ldr	r3, [r4, #28]
  402bfc:	2b01      	cmp	r3, #1
  402bfe:	d1ee      	bne.n	402bde <prvSampleTimeNow+0x52>
  402c00:	69a3      	ldr	r3, [r4, #24]
  402c02:	4453      	add	r3, sl
  402c04:	459a      	cmp	sl, r3
  402c06:	d2d5      	bcs.n	402bb4 <prvSampleTimeNow+0x28>
  402c08:	6063      	str	r3, [r4, #4]
  402c0a:	6124      	str	r4, [r4, #16]
  402c0c:	4649      	mov	r1, r9
  402c0e:	6828      	ldr	r0, [r5, #0]
  402c10:	4b0a      	ldr	r3, [pc, #40]	; (402c3c <prvSampleTimeNow+0xb0>)
  402c12:	4798      	blx	r3
  402c14:	e7e3      	b.n	402bde <prvSampleTimeNow+0x52>
  402c16:	4a0a      	ldr	r2, [pc, #40]	; (402c40 <prvSampleTimeNow+0xb4>)
  402c18:	6810      	ldr	r0, [r2, #0]
  402c1a:	4906      	ldr	r1, [pc, #24]	; (402c34 <prvSampleTimeNow+0xa8>)
  402c1c:	6008      	str	r0, [r1, #0]
  402c1e:	6013      	str	r3, [r2, #0]
  402c20:	2301      	movs	r3, #1
  402c22:	f8c8 3000 	str.w	r3, [r8]
  402c26:	e7bf      	b.n	402ba8 <prvSampleTimeNow+0x1c>
  402c28:	0040217d 	.word	0x0040217d
  402c2c:	20400d9c 	.word	0x20400d9c
  402c30:	00402b1d 	.word	0x00402b1d
  402c34:	20400d6c 	.word	0x20400d6c
  402c38:	00401185 	.word	0x00401185
  402c3c:	00401151 	.word	0x00401151
  402c40:	20400d70 	.word	0x20400d70

00402c44 <prvTimerTask>:
  402c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c48:	b088      	sub	sp, #32
  402c4a:	4e75      	ldr	r6, [pc, #468]	; (402e20 <prvTimerTask+0x1dc>)
  402c4c:	4f75      	ldr	r7, [pc, #468]	; (402e24 <prvTimerTask+0x1e0>)
  402c4e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402e4c <prvTimerTask+0x208>
  402c52:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402e50 <prvTimerTask+0x20c>
  402c56:	6833      	ldr	r3, [r6, #0]
  402c58:	681a      	ldr	r2, [r3, #0]
  402c5a:	2a00      	cmp	r2, #0
  402c5c:	f000 80ce 	beq.w	402dfc <prvTimerTask+0x1b8>
  402c60:	68db      	ldr	r3, [r3, #12]
  402c62:	681c      	ldr	r4, [r3, #0]
  402c64:	47b8      	blx	r7
  402c66:	a804      	add	r0, sp, #16
  402c68:	4b6f      	ldr	r3, [pc, #444]	; (402e28 <prvTimerTask+0x1e4>)
  402c6a:	4798      	blx	r3
  402c6c:	4605      	mov	r5, r0
  402c6e:	9b04      	ldr	r3, [sp, #16]
  402c70:	2b00      	cmp	r3, #0
  402c72:	d144      	bne.n	402cfe <prvTimerTask+0xba>
  402c74:	42a0      	cmp	r0, r4
  402c76:	d212      	bcs.n	402c9e <prvTimerTask+0x5a>
  402c78:	2200      	movs	r2, #0
  402c7a:	1b61      	subs	r1, r4, r5
  402c7c:	4b6b      	ldr	r3, [pc, #428]	; (402e2c <prvTimerTask+0x1e8>)
  402c7e:	6818      	ldr	r0, [r3, #0]
  402c80:	4b6b      	ldr	r3, [pc, #428]	; (402e30 <prvTimerTask+0x1ec>)
  402c82:	4798      	blx	r3
  402c84:	4b6b      	ldr	r3, [pc, #428]	; (402e34 <prvTimerTask+0x1f0>)
  402c86:	4798      	blx	r3
  402c88:	2800      	cmp	r0, #0
  402c8a:	d13a      	bne.n	402d02 <prvTimerTask+0xbe>
  402c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402c90:	f8c9 3000 	str.w	r3, [r9]
  402c94:	f3bf 8f4f 	dsb	sy
  402c98:	f3bf 8f6f 	isb	sy
  402c9c:	e031      	b.n	402d02 <prvTimerTask+0xbe>
  402c9e:	4b65      	ldr	r3, [pc, #404]	; (402e34 <prvTimerTask+0x1f0>)
  402ca0:	4798      	blx	r3
  402ca2:	6833      	ldr	r3, [r6, #0]
  402ca4:	68db      	ldr	r3, [r3, #12]
  402ca6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  402caa:	f10a 0004 	add.w	r0, sl, #4
  402cae:	47c0      	blx	r8
  402cb0:	f8da 301c 	ldr.w	r3, [sl, #28]
  402cb4:	2b01      	cmp	r3, #1
  402cb6:	d004      	beq.n	402cc2 <prvTimerTask+0x7e>
  402cb8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402cbc:	4650      	mov	r0, sl
  402cbe:	4798      	blx	r3
  402cc0:	e01f      	b.n	402d02 <prvTimerTask+0xbe>
  402cc2:	f8da 1018 	ldr.w	r1, [sl, #24]
  402cc6:	4623      	mov	r3, r4
  402cc8:	462a      	mov	r2, r5
  402cca:	4421      	add	r1, r4
  402ccc:	4650      	mov	r0, sl
  402cce:	4d5a      	ldr	r5, [pc, #360]	; (402e38 <prvTimerTask+0x1f4>)
  402cd0:	47a8      	blx	r5
  402cd2:	2801      	cmp	r0, #1
  402cd4:	d1f0      	bne.n	402cb8 <prvTimerTask+0x74>
  402cd6:	2100      	movs	r1, #0
  402cd8:	9100      	str	r1, [sp, #0]
  402cda:	460b      	mov	r3, r1
  402cdc:	4622      	mov	r2, r4
  402cde:	4650      	mov	r0, sl
  402ce0:	4c56      	ldr	r4, [pc, #344]	; (402e3c <prvTimerTask+0x1f8>)
  402ce2:	47a0      	blx	r4
  402ce4:	2800      	cmp	r0, #0
  402ce6:	d1e7      	bne.n	402cb8 <prvTimerTask+0x74>
  402ce8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cec:	b672      	cpsid	i
  402cee:	f383 8811 	msr	BASEPRI, r3
  402cf2:	f3bf 8f6f 	isb	sy
  402cf6:	f3bf 8f4f 	dsb	sy
  402cfa:	b662      	cpsie	i
  402cfc:	e7fe      	b.n	402cfc <prvTimerTask+0xb8>
  402cfe:	4b4d      	ldr	r3, [pc, #308]	; (402e34 <prvTimerTask+0x1f0>)
  402d00:	4798      	blx	r3
  402d02:	4d4a      	ldr	r5, [pc, #296]	; (402e2c <prvTimerTask+0x1e8>)
  402d04:	4c4e      	ldr	r4, [pc, #312]	; (402e40 <prvTimerTask+0x1fc>)
  402d06:	e006      	b.n	402d16 <prvTimerTask+0xd2>
  402d08:	9907      	ldr	r1, [sp, #28]
  402d0a:	9806      	ldr	r0, [sp, #24]
  402d0c:	9b05      	ldr	r3, [sp, #20]
  402d0e:	4798      	blx	r3
  402d10:	9b04      	ldr	r3, [sp, #16]
  402d12:	2b00      	cmp	r3, #0
  402d14:	da09      	bge.n	402d2a <prvTimerTask+0xe6>
  402d16:	2300      	movs	r3, #0
  402d18:	461a      	mov	r2, r3
  402d1a:	a904      	add	r1, sp, #16
  402d1c:	6828      	ldr	r0, [r5, #0]
  402d1e:	47a0      	blx	r4
  402d20:	2800      	cmp	r0, #0
  402d22:	d098      	beq.n	402c56 <prvTimerTask+0x12>
  402d24:	9b04      	ldr	r3, [sp, #16]
  402d26:	2b00      	cmp	r3, #0
  402d28:	dbee      	blt.n	402d08 <prvTimerTask+0xc4>
  402d2a:	f8dd a018 	ldr.w	sl, [sp, #24]
  402d2e:	f8da 3014 	ldr.w	r3, [sl, #20]
  402d32:	b113      	cbz	r3, 402d3a <prvTimerTask+0xf6>
  402d34:	f10a 0004 	add.w	r0, sl, #4
  402d38:	47c0      	blx	r8
  402d3a:	a803      	add	r0, sp, #12
  402d3c:	4b3a      	ldr	r3, [pc, #232]	; (402e28 <prvTimerTask+0x1e4>)
  402d3e:	4798      	blx	r3
  402d40:	9b04      	ldr	r3, [sp, #16]
  402d42:	2b09      	cmp	r3, #9
  402d44:	d8e7      	bhi.n	402d16 <prvTimerTask+0xd2>
  402d46:	a201      	add	r2, pc, #4	; (adr r2, 402d4c <prvTimerTask+0x108>)
  402d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d4c:	00402d75 	.word	0x00402d75
  402d50:	00402d75 	.word	0x00402d75
  402d54:	00402d75 	.word	0x00402d75
  402d58:	00402d17 	.word	0x00402d17
  402d5c:	00402dc9 	.word	0x00402dc9
  402d60:	00402df5 	.word	0x00402df5
  402d64:	00402d75 	.word	0x00402d75
  402d68:	00402d75 	.word	0x00402d75
  402d6c:	00402d17 	.word	0x00402d17
  402d70:	00402dc9 	.word	0x00402dc9
  402d74:	9c05      	ldr	r4, [sp, #20]
  402d76:	f8da 1018 	ldr.w	r1, [sl, #24]
  402d7a:	4623      	mov	r3, r4
  402d7c:	4602      	mov	r2, r0
  402d7e:	4421      	add	r1, r4
  402d80:	4650      	mov	r0, sl
  402d82:	4c2d      	ldr	r4, [pc, #180]	; (402e38 <prvTimerTask+0x1f4>)
  402d84:	47a0      	blx	r4
  402d86:	2801      	cmp	r0, #1
  402d88:	d1bc      	bne.n	402d04 <prvTimerTask+0xc0>
  402d8a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402d8e:	4650      	mov	r0, sl
  402d90:	4798      	blx	r3
  402d92:	f8da 301c 	ldr.w	r3, [sl, #28]
  402d96:	2b01      	cmp	r3, #1
  402d98:	d1b4      	bne.n	402d04 <prvTimerTask+0xc0>
  402d9a:	f8da 2018 	ldr.w	r2, [sl, #24]
  402d9e:	2100      	movs	r1, #0
  402da0:	9100      	str	r1, [sp, #0]
  402da2:	460b      	mov	r3, r1
  402da4:	9805      	ldr	r0, [sp, #20]
  402da6:	4402      	add	r2, r0
  402da8:	4650      	mov	r0, sl
  402daa:	4c24      	ldr	r4, [pc, #144]	; (402e3c <prvTimerTask+0x1f8>)
  402dac:	47a0      	blx	r4
  402dae:	2800      	cmp	r0, #0
  402db0:	d1a8      	bne.n	402d04 <prvTimerTask+0xc0>
  402db2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402db6:	b672      	cpsid	i
  402db8:	f383 8811 	msr	BASEPRI, r3
  402dbc:	f3bf 8f6f 	isb	sy
  402dc0:	f3bf 8f4f 	dsb	sy
  402dc4:	b662      	cpsie	i
  402dc6:	e7fe      	b.n	402dc6 <prvTimerTask+0x182>
  402dc8:	9905      	ldr	r1, [sp, #20]
  402dca:	f8ca 1018 	str.w	r1, [sl, #24]
  402dce:	b131      	cbz	r1, 402dde <prvTimerTask+0x19a>
  402dd0:	4603      	mov	r3, r0
  402dd2:	4602      	mov	r2, r0
  402dd4:	4401      	add	r1, r0
  402dd6:	4650      	mov	r0, sl
  402dd8:	4c17      	ldr	r4, [pc, #92]	; (402e38 <prvTimerTask+0x1f4>)
  402dda:	47a0      	blx	r4
  402ddc:	e792      	b.n	402d04 <prvTimerTask+0xc0>
  402dde:	f04f 0380 	mov.w	r3, #128	; 0x80
  402de2:	b672      	cpsid	i
  402de4:	f383 8811 	msr	BASEPRI, r3
  402de8:	f3bf 8f6f 	isb	sy
  402dec:	f3bf 8f4f 	dsb	sy
  402df0:	b662      	cpsie	i
  402df2:	e7fe      	b.n	402df2 <prvTimerTask+0x1ae>
  402df4:	4650      	mov	r0, sl
  402df6:	4b13      	ldr	r3, [pc, #76]	; (402e44 <prvTimerTask+0x200>)
  402df8:	4798      	blx	r3
  402dfa:	e783      	b.n	402d04 <prvTimerTask+0xc0>
  402dfc:	47b8      	blx	r7
  402dfe:	a804      	add	r0, sp, #16
  402e00:	4b09      	ldr	r3, [pc, #36]	; (402e28 <prvTimerTask+0x1e4>)
  402e02:	4798      	blx	r3
  402e04:	4605      	mov	r5, r0
  402e06:	9b04      	ldr	r3, [sp, #16]
  402e08:	2b00      	cmp	r3, #0
  402e0a:	f47f af78 	bne.w	402cfe <prvTimerTask+0xba>
  402e0e:	4b0e      	ldr	r3, [pc, #56]	; (402e48 <prvTimerTask+0x204>)
  402e10:	681b      	ldr	r3, [r3, #0]
  402e12:	681a      	ldr	r2, [r3, #0]
  402e14:	fab2 f282 	clz	r2, r2
  402e18:	0952      	lsrs	r2, r2, #5
  402e1a:	2400      	movs	r4, #0
  402e1c:	e72d      	b.n	402c7a <prvTimerTask+0x36>
  402e1e:	bf00      	nop
  402e20:	20400d6c 	.word	0x20400d6c
  402e24:	0040216d 	.word	0x0040216d
  402e28:	00402b8d 	.word	0x00402b8d
  402e2c:	20400da0 	.word	0x20400da0
  402e30:	00401dcd 	.word	0x00401dcd
  402e34:	004022d5 	.word	0x004022d5
  402e38:	004029f5 	.word	0x004029f5
  402e3c:	00402b1d 	.word	0x00402b1d
  402e40:	00401bc9 	.word	0x00401bc9
  402e44:	004014f5 	.word	0x004014f5
  402e48:	20400d70 	.word	0x20400d70
  402e4c:	e000ed04 	.word	0xe000ed04
  402e50:	00401185 	.word	0x00401185

00402e54 <RTT_init>:

extern void vApplicationMallocFailedHook(void) {
	configASSERT( ( volatile void * ) NULL );
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  402e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e58:	ed2d 8b02 	vpush	{d8}
  402e5c:	b082      	sub	sp, #8
  402e5e:	eeb0 8a40 	vmov.f32	s16, s0
  402e62:	4680      	mov	r8, r0
  402e64:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
	rtt_sel_source(RTT, false);
  402e66:	4c20      	ldr	r4, [pc, #128]	; (402ee8 <RTT_init+0x94>)
  402e68:	2100      	movs	r1, #0
  402e6a:	4620      	mov	r0, r4
  402e6c:	4b1f      	ldr	r3, [pc, #124]	; (402eec <RTT_init+0x98>)
  402e6e:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  402e70:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 402ef0 <RTT_init+0x9c>
  402e74:	eec7 7a08 	vdiv.f32	s15, s14, s16
  402e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  402e7c:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  402e80:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  402e84:	4620      	mov	r0, r4
  402e86:	4b1b      	ldr	r3, [pc, #108]	; (402ef4 <RTT_init+0xa0>)
  402e88:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  402e8a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  402e8e:	d116      	bne.n	402ebe <RTT_init+0x6a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
>>>>>>> Stashed changes
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

<<<<<<< Updated upstream
004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
=======
	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  402ea4:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  402ea8:	d119      	bne.n	402ede <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  402eaa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  402eae:	480e      	ldr	r0, [pc, #56]	; (402ee8 <RTT_init+0x94>)
  402eb0:	4b12      	ldr	r3, [pc, #72]	; (402efc <RTT_init+0xa8>)
  402eb2:	4798      	blx	r3
}
  402eb4:	b002      	add	sp, #8
  402eb6:	ecbd 8b02 	vpop	{d8}
  402eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  402ebe:	4620      	mov	r0, r4
  402ec0:	4b0f      	ldr	r3, [pc, #60]	; (402f00 <RTT_init+0xac>)
  402ec2:	4798      	blx	r3
  402ec4:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  402ec6:	4e08      	ldr	r6, [pc, #32]	; (402ee8 <RTT_init+0x94>)
  402ec8:	4d0d      	ldr	r5, [pc, #52]	; (402f00 <RTT_init+0xac>)
  402eca:	4630      	mov	r0, r6
  402ecc:	47a8      	blx	r5
  402ece:	4284      	cmp	r4, r0
  402ed0:	d0fb      	beq.n	402eca <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  402ed2:	eb04 0108 	add.w	r1, r4, r8
  402ed6:	4804      	ldr	r0, [pc, #16]	; (402ee8 <RTT_init+0x94>)
  402ed8:	4b0a      	ldr	r3, [pc, #40]	; (402f04 <RTT_init+0xb0>)
  402eda:	4798      	blx	r3
  402edc:	e7d8      	b.n	402e90 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  402ede:	4639      	mov	r1, r7
  402ee0:	4801      	ldr	r0, [pc, #4]	; (402ee8 <RTT_init+0x94>)
  402ee2:	4b09      	ldr	r3, [pc, #36]	; (402f08 <RTT_init+0xb4>)
  402ee4:	4798      	blx	r3
  402ee6:	e7e5      	b.n	402eb4 <RTT_init+0x60>
  402ee8:	400e1830 	.word	0x400e1830
  402eec:	004001c1 	.word	0x004001c1
  402ef0:	47000000 	.word	0x47000000
  402ef4:	004001ad 	.word	0x004001ad
  402ef8:	e000e100 	.word	0xe000e100
  402efc:	00400201 	.word	0x00400201
  402f00:	00400215 	.word	0x00400215
  402f04:	0040022d 	.word	0x0040022d
  402f08:	004001ed 	.word	0x004001ed

00402f0c <task_sensor>:
	for(;;){
		vTaskDelay(500 / portTICK_PERIOD_MS);
	}
}

static void task_sensor(void *pvParameters){
  402f0c:	b508      	push	{r3, lr}
	for (;;)  {
		vTaskDelay(500 / portTICK_PERIOD_MS);
  402f0e:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  402f12:	4c02      	ldr	r4, [pc, #8]	; (402f1c <task_sensor+0x10>)
  402f14:	4628      	mov	r0, r5
  402f16:	47a0      	blx	r4
  402f18:	e7fc      	b.n	402f14 <task_sensor+0x8>
  402f1a:	bf00      	nop
  402f1c:	004023f5 	.word	0x004023f5

00402f20 <task_oled>:
static void task_oled(void *pvParameters){
  402f20:	b508      	push	{r3, lr}
	gfx_mono_ssd1306_init();
  402f22:	4b04      	ldr	r3, [pc, #16]	; (402f34 <task_oled+0x14>)
  402f24:	4798      	blx	r3
		vTaskDelay(500 / portTICK_PERIOD_MS);
  402f26:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  402f2a:	4c03      	ldr	r4, [pc, #12]	; (402f38 <task_oled+0x18>)
  402f2c:	4628      	mov	r0, r5
  402f2e:	47a0      	blx	r4
  402f30:	e7fc      	b.n	402f2c <task_oled+0xc>
  402f32:	bf00      	nop
  402f34:	00400439 	.word	0x00400439
  402f38:	004023f5 	.word	0x004023f5

00402f3c <usart_serial_getchar>:
=======
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40267c:	4b08      	ldr	r3, [pc, #32]	; (4026a0 <prvResetNextTaskUnblockTime+0x24>)
  40267e:	681b      	ldr	r3, [r3, #0]
  402680:	681b      	ldr	r3, [r3, #0]
  402682:	b13b      	cbz	r3, 402694 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402684:	4b06      	ldr	r3, [pc, #24]	; (4026a0 <prvResetNextTaskUnblockTime+0x24>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40268a:	68db      	ldr	r3, [r3, #12]
  40268c:	685a      	ldr	r2, [r3, #4]
  40268e:	4b05      	ldr	r3, [pc, #20]	; (4026a4 <prvResetNextTaskUnblockTime+0x28>)
  402690:	601a      	str	r2, [r3, #0]
  402692:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402694:	f04f 32ff 	mov.w	r2, #4294967295
  402698:	4b02      	ldr	r3, [pc, #8]	; (4026a4 <prvResetNextTaskUnblockTime+0x28>)
  40269a:	601a      	str	r2, [r3, #0]
  40269c:	4770      	bx	lr
  40269e:	bf00      	nop
  4026a0:	20400c8c 	.word	0x20400c8c
  4026a4:	20400d38 	.word	0x20400d38

004026a8 <prvAddCurrentTaskToDelayedList>:
{
  4026a8:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4026aa:	4b0f      	ldr	r3, [pc, #60]	; (4026e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4026ac:	681b      	ldr	r3, [r3, #0]
  4026ae:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4026b0:	4b0e      	ldr	r3, [pc, #56]	; (4026ec <prvAddCurrentTaskToDelayedList+0x44>)
  4026b2:	681b      	ldr	r3, [r3, #0]
  4026b4:	4298      	cmp	r0, r3
  4026b6:	d30e      	bcc.n	4026d6 <prvAddCurrentTaskToDelayedList+0x2e>
  4026b8:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4026ba:	4b0d      	ldr	r3, [pc, #52]	; (4026f0 <prvAddCurrentTaskToDelayedList+0x48>)
  4026bc:	6818      	ldr	r0, [r3, #0]
  4026be:	4b0a      	ldr	r3, [pc, #40]	; (4026e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4026c0:	6819      	ldr	r1, [r3, #0]
  4026c2:	3104      	adds	r1, #4
  4026c4:	4b0b      	ldr	r3, [pc, #44]	; (4026f4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4026c6:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4026c8:	4b0b      	ldr	r3, [pc, #44]	; (4026f8 <prvAddCurrentTaskToDelayedList+0x50>)
  4026ca:	681b      	ldr	r3, [r3, #0]
  4026cc:	429c      	cmp	r4, r3
  4026ce:	d201      	bcs.n	4026d4 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4026d0:	4b09      	ldr	r3, [pc, #36]	; (4026f8 <prvAddCurrentTaskToDelayedList+0x50>)
  4026d2:	601c      	str	r4, [r3, #0]
  4026d4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4026d6:	4b09      	ldr	r3, [pc, #36]	; (4026fc <prvAddCurrentTaskToDelayedList+0x54>)
  4026d8:	6818      	ldr	r0, [r3, #0]
  4026da:	4b03      	ldr	r3, [pc, #12]	; (4026e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4026dc:	6819      	ldr	r1, [r3, #0]
  4026de:	3104      	adds	r1, #4
  4026e0:	4b04      	ldr	r3, [pc, #16]	; (4026f4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4026e2:	4798      	blx	r3
  4026e4:	bd10      	pop	{r4, pc}
  4026e6:	bf00      	nop
  4026e8:	20400c88 	.word	0x20400c88
  4026ec:	20400d80 	.word	0x20400d80
  4026f0:	20400c8c 	.word	0x20400c8c
  4026f4:	004019a9 	.word	0x004019a9
  4026f8:	20400d38 	.word	0x20400d38
  4026fc:	20400c90 	.word	0x20400c90

00402700 <xTaskGenericCreate>:
{
  402700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402704:	b083      	sub	sp, #12
  402706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402708:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40270c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40270e:	b160      	cbz	r0, 40272a <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402710:	2d04      	cmp	r5, #4
  402712:	d915      	bls.n	402740 <xTaskGenericCreate+0x40>
  402714:	f04f 0380 	mov.w	r3, #128	; 0x80
  402718:	b672      	cpsid	i
  40271a:	f383 8811 	msr	BASEPRI, r3
  40271e:	f3bf 8f6f 	isb	sy
  402722:	f3bf 8f4f 	dsb	sy
  402726:	b662      	cpsie	i
  402728:	e7fe      	b.n	402728 <xTaskGenericCreate+0x28>
  40272a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40272e:	b672      	cpsid	i
  402730:	f383 8811 	msr	BASEPRI, r3
  402734:	f3bf 8f6f 	isb	sy
  402738:	f3bf 8f4f 	dsb	sy
  40273c:	b662      	cpsie	i
  40273e:	e7fe      	b.n	40273e <xTaskGenericCreate+0x3e>
  402740:	9001      	str	r0, [sp, #4]
  402742:	4698      	mov	r8, r3
  402744:	4691      	mov	r9, r2
  402746:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402748:	b936      	cbnz	r6, 402758 <xTaskGenericCreate+0x58>
  40274a:	0090      	lsls	r0, r2, #2
  40274c:	4b62      	ldr	r3, [pc, #392]	; (4028d8 <xTaskGenericCreate+0x1d8>)
  40274e:	4798      	blx	r3
		if( pxStack != NULL )
  402750:	4606      	mov	r6, r0
  402752:	2800      	cmp	r0, #0
  402754:	f000 809e 	beq.w	402894 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402758:	2058      	movs	r0, #88	; 0x58
  40275a:	4b5f      	ldr	r3, [pc, #380]	; (4028d8 <xTaskGenericCreate+0x1d8>)
  40275c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40275e:	4604      	mov	r4, r0
  402760:	2800      	cmp	r0, #0
  402762:	f000 8094 	beq.w	40288e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402766:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402768:	ea4f 0289 	mov.w	r2, r9, lsl #2
  40276c:	21a5      	movs	r1, #165	; 0xa5
  40276e:	4630      	mov	r0, r6
  402770:	4b5a      	ldr	r3, [pc, #360]	; (4028dc <xTaskGenericCreate+0x1dc>)
  402772:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402774:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402778:	444e      	add	r6, r9
  40277a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40277c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402780:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402784:	783b      	ldrb	r3, [r7, #0]
  402786:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40278a:	783b      	ldrb	r3, [r7, #0]
  40278c:	2b00      	cmp	r3, #0
  40278e:	f040 8084 	bne.w	40289a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402792:	2700      	movs	r7, #0
  402794:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402798:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40279a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40279c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40279e:	f104 0904 	add.w	r9, r4, #4
  4027a2:	4648      	mov	r0, r9
  4027a4:	f8df b184 	ldr.w	fp, [pc, #388]	; 40292c <xTaskGenericCreate+0x22c>
  4027a8:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4027aa:	f104 0018 	add.w	r0, r4, #24
  4027ae:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4027b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4027b2:	f1c5 0305 	rsb	r3, r5, #5
  4027b6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4027b8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4027ba:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4027bc:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4027c0:	4642      	mov	r2, r8
  4027c2:	9901      	ldr	r1, [sp, #4]
  4027c4:	4630      	mov	r0, r6
  4027c6:	4b46      	ldr	r3, [pc, #280]	; (4028e0 <xTaskGenericCreate+0x1e0>)
  4027c8:	4798      	blx	r3
  4027ca:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4027cc:	f1ba 0f00 	cmp.w	sl, #0
  4027d0:	d001      	beq.n	4027d6 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4027d2:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4027d6:	4b43      	ldr	r3, [pc, #268]	; (4028e4 <xTaskGenericCreate+0x1e4>)
  4027d8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4027da:	4a43      	ldr	r2, [pc, #268]	; (4028e8 <xTaskGenericCreate+0x1e8>)
  4027dc:	6813      	ldr	r3, [r2, #0]
  4027de:	3301      	adds	r3, #1
  4027e0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4027e2:	4b42      	ldr	r3, [pc, #264]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4027e4:	681b      	ldr	r3, [r3, #0]
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	d166      	bne.n	4028b8 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4027ea:	4b40      	ldr	r3, [pc, #256]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4027ec:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4027ee:	6813      	ldr	r3, [r2, #0]
  4027f0:	2b01      	cmp	r3, #1
  4027f2:	d121      	bne.n	402838 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4027f4:	4f3e      	ldr	r7, [pc, #248]	; (4028f0 <xTaskGenericCreate+0x1f0>)
  4027f6:	4638      	mov	r0, r7
  4027f8:	4e3e      	ldr	r6, [pc, #248]	; (4028f4 <xTaskGenericCreate+0x1f4>)
  4027fa:	47b0      	blx	r6
  4027fc:	f107 0014 	add.w	r0, r7, #20
  402800:	47b0      	blx	r6
  402802:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402806:	47b0      	blx	r6
  402808:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  40280c:	47b0      	blx	r6
  40280e:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402812:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402814:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402930 <xTaskGenericCreate+0x230>
  402818:	4640      	mov	r0, r8
  40281a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  40281c:	4f36      	ldr	r7, [pc, #216]	; (4028f8 <xTaskGenericCreate+0x1f8>)
  40281e:	4638      	mov	r0, r7
  402820:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402822:	4836      	ldr	r0, [pc, #216]	; (4028fc <xTaskGenericCreate+0x1fc>)
  402824:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402826:	4836      	ldr	r0, [pc, #216]	; (402900 <xTaskGenericCreate+0x200>)
  402828:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40282a:	4836      	ldr	r0, [pc, #216]	; (402904 <xTaskGenericCreate+0x204>)
  40282c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40282e:	4b36      	ldr	r3, [pc, #216]	; (402908 <xTaskGenericCreate+0x208>)
  402830:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402834:	4b35      	ldr	r3, [pc, #212]	; (40290c <xTaskGenericCreate+0x20c>)
  402836:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402838:	4a35      	ldr	r2, [pc, #212]	; (402910 <xTaskGenericCreate+0x210>)
  40283a:	6813      	ldr	r3, [r2, #0]
  40283c:	3301      	adds	r3, #1
  40283e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402840:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402844:	4a33      	ldr	r2, [pc, #204]	; (402914 <xTaskGenericCreate+0x214>)
  402846:	6811      	ldr	r1, [r2, #0]
  402848:	2301      	movs	r3, #1
  40284a:	4083      	lsls	r3, r0
  40284c:	430b      	orrs	r3, r1
  40284e:	6013      	str	r3, [r2, #0]
  402850:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402854:	4649      	mov	r1, r9
  402856:	4b26      	ldr	r3, [pc, #152]	; (4028f0 <xTaskGenericCreate+0x1f0>)
  402858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40285c:	4b2e      	ldr	r3, [pc, #184]	; (402918 <xTaskGenericCreate+0x218>)
  40285e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402860:	4b2e      	ldr	r3, [pc, #184]	; (40291c <xTaskGenericCreate+0x21c>)
  402862:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402864:	4b2e      	ldr	r3, [pc, #184]	; (402920 <xTaskGenericCreate+0x220>)
  402866:	681b      	ldr	r3, [r3, #0]
  402868:	2b00      	cmp	r3, #0
  40286a:	d031      	beq.n	4028d0 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40286c:	4b1f      	ldr	r3, [pc, #124]	; (4028ec <xTaskGenericCreate+0x1ec>)
  40286e:	681b      	ldr	r3, [r3, #0]
  402870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402872:	429d      	cmp	r5, r3
  402874:	d92e      	bls.n	4028d4 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40287a:	4b2a      	ldr	r3, [pc, #168]	; (402924 <xTaskGenericCreate+0x224>)
  40287c:	601a      	str	r2, [r3, #0]
  40287e:	f3bf 8f4f 	dsb	sy
  402882:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402886:	2001      	movs	r0, #1
}
  402888:	b003      	add	sp, #12
  40288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40288e:	4630      	mov	r0, r6
  402890:	4b25      	ldr	r3, [pc, #148]	; (402928 <xTaskGenericCreate+0x228>)
  402892:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402894:	f04f 30ff 	mov.w	r0, #4294967295
  402898:	e7f6      	b.n	402888 <xTaskGenericCreate+0x188>
  40289a:	463b      	mov	r3, r7
  40289c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4028a0:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4028a2:	7859      	ldrb	r1, [r3, #1]
  4028a4:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4028a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4028ac:	2900      	cmp	r1, #0
  4028ae:	f43f af70 	beq.w	402792 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4028b2:	42bb      	cmp	r3, r7
  4028b4:	d1f5      	bne.n	4028a2 <xTaskGenericCreate+0x1a2>
  4028b6:	e76c      	b.n	402792 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4028b8:	4b19      	ldr	r3, [pc, #100]	; (402920 <xTaskGenericCreate+0x220>)
  4028ba:	681b      	ldr	r3, [r3, #0]
  4028bc:	2b00      	cmp	r3, #0
  4028be:	d1bb      	bne.n	402838 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4028c0:	4b0a      	ldr	r3, [pc, #40]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4028c2:	681b      	ldr	r3, [r3, #0]
  4028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4028c6:	429d      	cmp	r5, r3
  4028c8:	d3b6      	bcc.n	402838 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4028ca:	4b08      	ldr	r3, [pc, #32]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4028cc:	601c      	str	r4, [r3, #0]
  4028ce:	e7b3      	b.n	402838 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4028d0:	2001      	movs	r0, #1
  4028d2:	e7d9      	b.n	402888 <xTaskGenericCreate+0x188>
  4028d4:	2001      	movs	r0, #1
	return xReturn;
  4028d6:	e7d7      	b.n	402888 <xTaskGenericCreate+0x188>
  4028d8:	00401d1d 	.word	0x00401d1d
  4028dc:	00404895 	.word	0x00404895
  4028e0:	00401a75 	.word	0x00401a75
  4028e4:	00401ac1 	.word	0x00401ac1
  4028e8:	20400cf8 	.word	0x20400cf8
  4028ec:	20400c88 	.word	0x20400c88
  4028f0:	20400c94 	.word	0x20400c94
  4028f4:	00401975 	.word	0x00401975
  4028f8:	20400d24 	.word	0x20400d24
  4028fc:	20400d40 	.word	0x20400d40
  402900:	20400d6c 	.word	0x20400d6c
  402904:	20400d58 	.word	0x20400d58
  402908:	20400c8c 	.word	0x20400c8c
  40290c:	20400c90 	.word	0x20400c90
  402910:	20400d04 	.word	0x20400d04
  402914:	20400d0c 	.word	0x20400d0c
  402918:	00401991 	.word	0x00401991
  40291c:	00401b0d 	.word	0x00401b0d
  402920:	20400d54 	.word	0x20400d54
  402924:	e000ed04 	.word	0xe000ed04
  402928:	00401d4d 	.word	0x00401d4d
  40292c:	0040198b 	.word	0x0040198b
  402930:	20400d10 	.word	0x20400d10

00402934 <vTaskStartScheduler>:
{
  402934:	b510      	push	{r4, lr}
  402936:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402938:	2300      	movs	r3, #0
  40293a:	9303      	str	r3, [sp, #12]
  40293c:	9302      	str	r3, [sp, #8]
  40293e:	9301      	str	r3, [sp, #4]
  402940:	9300      	str	r3, [sp, #0]
  402942:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402946:	4917      	ldr	r1, [pc, #92]	; (4029a4 <vTaskStartScheduler+0x70>)
  402948:	4817      	ldr	r0, [pc, #92]	; (4029a8 <vTaskStartScheduler+0x74>)
  40294a:	4c18      	ldr	r4, [pc, #96]	; (4029ac <vTaskStartScheduler+0x78>)
  40294c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40294e:	2801      	cmp	r0, #1
  402950:	d00b      	beq.n	40296a <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  402952:	bb20      	cbnz	r0, 40299e <vTaskStartScheduler+0x6a>
  402954:	f04f 0380 	mov.w	r3, #128	; 0x80
  402958:	b672      	cpsid	i
  40295a:	f383 8811 	msr	BASEPRI, r3
  40295e:	f3bf 8f6f 	isb	sy
  402962:	f3bf 8f4f 	dsb	sy
  402966:	b662      	cpsie	i
  402968:	e7fe      	b.n	402968 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  40296a:	4b11      	ldr	r3, [pc, #68]	; (4029b0 <vTaskStartScheduler+0x7c>)
  40296c:	4798      	blx	r3
	if( xReturn == pdPASS )
  40296e:	2801      	cmp	r0, #1
  402970:	d1ef      	bne.n	402952 <vTaskStartScheduler+0x1e>
  402972:	f04f 0380 	mov.w	r3, #128	; 0x80
  402976:	b672      	cpsid	i
  402978:	f383 8811 	msr	BASEPRI, r3
  40297c:	f3bf 8f6f 	isb	sy
  402980:	f3bf 8f4f 	dsb	sy
  402984:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402986:	f04f 32ff 	mov.w	r2, #4294967295
  40298a:	4b0a      	ldr	r3, [pc, #40]	; (4029b4 <vTaskStartScheduler+0x80>)
  40298c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40298e:	2201      	movs	r2, #1
  402990:	4b09      	ldr	r3, [pc, #36]	; (4029b8 <vTaskStartScheduler+0x84>)
  402992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402994:	2200      	movs	r2, #0
  402996:	4b09      	ldr	r3, [pc, #36]	; (4029bc <vTaskStartScheduler+0x88>)
  402998:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40299a:	4b09      	ldr	r3, [pc, #36]	; (4029c0 <vTaskStartScheduler+0x8c>)
  40299c:	4798      	blx	r3
}
  40299e:	b004      	add	sp, #16
  4029a0:	bd10      	pop	{r4, pc}
  4029a2:	bf00      	nop
  4029a4:	0040b2f0 	.word	0x0040b2f0
  4029a8:	00402cdd 	.word	0x00402cdd
  4029ac:	00402701 	.word	0x00402701
  4029b0:	0040331d 	.word	0x0040331d
  4029b4:	20400d38 	.word	0x20400d38
  4029b8:	20400d54 	.word	0x20400d54
  4029bc:	20400d80 	.word	0x20400d80
  4029c0:	00401bf5 	.word	0x00401bf5

004029c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4029c4:	4a02      	ldr	r2, [pc, #8]	; (4029d0 <vTaskSuspendAll+0xc>)
  4029c6:	6813      	ldr	r3, [r2, #0]
  4029c8:	3301      	adds	r3, #1
  4029ca:	6013      	str	r3, [r2, #0]
  4029cc:	4770      	bx	lr
  4029ce:	bf00      	nop
  4029d0:	20400d00 	.word	0x20400d00

004029d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4029d4:	4b01      	ldr	r3, [pc, #4]	; (4029dc <xTaskGetTickCount+0x8>)
  4029d6:	6818      	ldr	r0, [r3, #0]
}
  4029d8:	4770      	bx	lr
  4029da:	bf00      	nop
  4029dc:	20400d80 	.word	0x20400d80

004029e0 <xTaskIncrementTick>:
{
  4029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4029e4:	4b42      	ldr	r3, [pc, #264]	; (402af0 <xTaskIncrementTick+0x110>)
  4029e6:	681b      	ldr	r3, [r3, #0]
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d178      	bne.n	402ade <xTaskIncrementTick+0xfe>
		++xTickCount;
  4029ec:	4b41      	ldr	r3, [pc, #260]	; (402af4 <xTaskIncrementTick+0x114>)
  4029ee:	681a      	ldr	r2, [r3, #0]
  4029f0:	3201      	adds	r2, #1
  4029f2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4029f4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4029f6:	b9d6      	cbnz	r6, 402a2e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4029f8:	4b3f      	ldr	r3, [pc, #252]	; (402af8 <xTaskIncrementTick+0x118>)
  4029fa:	681b      	ldr	r3, [r3, #0]
  4029fc:	681b      	ldr	r3, [r3, #0]
  4029fe:	b153      	cbz	r3, 402a16 <xTaskIncrementTick+0x36>
  402a00:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a04:	b672      	cpsid	i
  402a06:	f383 8811 	msr	BASEPRI, r3
  402a0a:	f3bf 8f6f 	isb	sy
  402a0e:	f3bf 8f4f 	dsb	sy
  402a12:	b662      	cpsie	i
  402a14:	e7fe      	b.n	402a14 <xTaskIncrementTick+0x34>
  402a16:	4a38      	ldr	r2, [pc, #224]	; (402af8 <xTaskIncrementTick+0x118>)
  402a18:	6811      	ldr	r1, [r2, #0]
  402a1a:	4b38      	ldr	r3, [pc, #224]	; (402afc <xTaskIncrementTick+0x11c>)
  402a1c:	6818      	ldr	r0, [r3, #0]
  402a1e:	6010      	str	r0, [r2, #0]
  402a20:	6019      	str	r1, [r3, #0]
  402a22:	4a37      	ldr	r2, [pc, #220]	; (402b00 <xTaskIncrementTick+0x120>)
  402a24:	6813      	ldr	r3, [r2, #0]
  402a26:	3301      	adds	r3, #1
  402a28:	6013      	str	r3, [r2, #0]
  402a2a:	4b36      	ldr	r3, [pc, #216]	; (402b04 <xTaskIncrementTick+0x124>)
  402a2c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402a2e:	4b36      	ldr	r3, [pc, #216]	; (402b08 <xTaskIncrementTick+0x128>)
  402a30:	681b      	ldr	r3, [r3, #0]
  402a32:	429e      	cmp	r6, r3
  402a34:	d218      	bcs.n	402a68 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402a36:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402a38:	4b34      	ldr	r3, [pc, #208]	; (402b0c <xTaskIncrementTick+0x12c>)
  402a3a:	681b      	ldr	r3, [r3, #0]
  402a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402a42:	4a33      	ldr	r2, [pc, #204]	; (402b10 <xTaskIncrementTick+0x130>)
  402a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402a48:	2b02      	cmp	r3, #2
  402a4a:	bf28      	it	cs
  402a4c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402a4e:	4b31      	ldr	r3, [pc, #196]	; (402b14 <xTaskIncrementTick+0x134>)
  402a50:	681b      	ldr	r3, [r3, #0]
  402a52:	b90b      	cbnz	r3, 402a58 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402a54:	4b30      	ldr	r3, [pc, #192]	; (402b18 <xTaskIncrementTick+0x138>)
  402a56:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402a58:	4b30      	ldr	r3, [pc, #192]	; (402b1c <xTaskIncrementTick+0x13c>)
  402a5a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402a5c:	2b00      	cmp	r3, #0
}
  402a5e:	bf0c      	ite	eq
  402a60:	4620      	moveq	r0, r4
  402a62:	2001      	movne	r0, #1
  402a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a68:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402a6a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402af8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a6e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402b28 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402a72:	4f2b      	ldr	r7, [pc, #172]	; (402b20 <xTaskIncrementTick+0x140>)
  402a74:	e01f      	b.n	402ab6 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402a76:	f04f 32ff 	mov.w	r2, #4294967295
  402a7a:	4b23      	ldr	r3, [pc, #140]	; (402b08 <xTaskIncrementTick+0x128>)
  402a7c:	601a      	str	r2, [r3, #0]
						break;
  402a7e:	e7db      	b.n	402a38 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402a80:	4a21      	ldr	r2, [pc, #132]	; (402b08 <xTaskIncrementTick+0x128>)
  402a82:	6013      	str	r3, [r2, #0]
							break;
  402a84:	e7d8      	b.n	402a38 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402a86:	f105 0018 	add.w	r0, r5, #24
  402a8a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402a8c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402a8e:	683a      	ldr	r2, [r7, #0]
  402a90:	2301      	movs	r3, #1
  402a92:	4083      	lsls	r3, r0
  402a94:	4313      	orrs	r3, r2
  402a96:	603b      	str	r3, [r7, #0]
  402a98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a9c:	4651      	mov	r1, sl
  402a9e:	4b1c      	ldr	r3, [pc, #112]	; (402b10 <xTaskIncrementTick+0x130>)
  402aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402aa4:	4b1f      	ldr	r3, [pc, #124]	; (402b24 <xTaskIncrementTick+0x144>)
  402aa6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402aa8:	4b18      	ldr	r3, [pc, #96]	; (402b0c <xTaskIncrementTick+0x12c>)
  402aaa:	681b      	ldr	r3, [r3, #0]
  402aac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402ab0:	429a      	cmp	r2, r3
  402ab2:	bf28      	it	cs
  402ab4:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402ab6:	f8d9 3000 	ldr.w	r3, [r9]
  402aba:	681b      	ldr	r3, [r3, #0]
  402abc:	2b00      	cmp	r3, #0
  402abe:	d0da      	beq.n	402a76 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402ac0:	f8d9 3000 	ldr.w	r3, [r9]
  402ac4:	68db      	ldr	r3, [r3, #12]
  402ac6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402ac8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402aca:	429e      	cmp	r6, r3
  402acc:	d3d8      	bcc.n	402a80 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402ace:	f105 0a04 	add.w	sl, r5, #4
  402ad2:	4650      	mov	r0, sl
  402ad4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402ad6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402ad8:	2b00      	cmp	r3, #0
  402ada:	d1d4      	bne.n	402a86 <xTaskIncrementTick+0xa6>
  402adc:	e7d6      	b.n	402a8c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402ade:	4a0d      	ldr	r2, [pc, #52]	; (402b14 <xTaskIncrementTick+0x134>)
  402ae0:	6813      	ldr	r3, [r2, #0]
  402ae2:	3301      	adds	r3, #1
  402ae4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402ae6:	4b0c      	ldr	r3, [pc, #48]	; (402b18 <xTaskIncrementTick+0x138>)
  402ae8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402aea:	2400      	movs	r4, #0
  402aec:	e7b4      	b.n	402a58 <xTaskIncrementTick+0x78>
  402aee:	bf00      	nop
  402af0:	20400d00 	.word	0x20400d00
  402af4:	20400d80 	.word	0x20400d80
  402af8:	20400c8c 	.word	0x20400c8c
  402afc:	20400c90 	.word	0x20400c90
  402b00:	20400d3c 	.word	0x20400d3c
  402b04:	0040267d 	.word	0x0040267d
  402b08:	20400d38 	.word	0x20400d38
  402b0c:	20400c88 	.word	0x20400c88
  402b10:	20400c94 	.word	0x20400c94
  402b14:	20400cfc 	.word	0x20400cfc
  402b18:	00403a25 	.word	0x00403a25
  402b1c:	20400d84 	.word	0x20400d84
  402b20:	20400d0c 	.word	0x20400d0c
  402b24:	00401991 	.word	0x00401991
  402b28:	004019dd 	.word	0x004019dd

00402b2c <xTaskResumeAll>:
{
  402b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402b30:	4b38      	ldr	r3, [pc, #224]	; (402c14 <xTaskResumeAll+0xe8>)
  402b32:	681b      	ldr	r3, [r3, #0]
  402b34:	b953      	cbnz	r3, 402b4c <xTaskResumeAll+0x20>
  402b36:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b3a:	b672      	cpsid	i
  402b3c:	f383 8811 	msr	BASEPRI, r3
  402b40:	f3bf 8f6f 	isb	sy
  402b44:	f3bf 8f4f 	dsb	sy
  402b48:	b662      	cpsie	i
  402b4a:	e7fe      	b.n	402b4a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402b4c:	4b32      	ldr	r3, [pc, #200]	; (402c18 <xTaskResumeAll+0xec>)
  402b4e:	4798      	blx	r3
		--uxSchedulerSuspended;
  402b50:	4b30      	ldr	r3, [pc, #192]	; (402c14 <xTaskResumeAll+0xe8>)
  402b52:	681a      	ldr	r2, [r3, #0]
  402b54:	3a01      	subs	r2, #1
  402b56:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b58:	681b      	ldr	r3, [r3, #0]
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d155      	bne.n	402c0a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402b5e:	4b2f      	ldr	r3, [pc, #188]	; (402c1c <xTaskResumeAll+0xf0>)
  402b60:	681b      	ldr	r3, [r3, #0]
  402b62:	2b00      	cmp	r3, #0
  402b64:	d132      	bne.n	402bcc <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402b66:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402b68:	4b2d      	ldr	r3, [pc, #180]	; (402c20 <xTaskResumeAll+0xf4>)
  402b6a:	4798      	blx	r3
}
  402b6c:	4620      	mov	r0, r4
  402b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402b72:	68fb      	ldr	r3, [r7, #12]
  402b74:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402b76:	f104 0018 	add.w	r0, r4, #24
  402b7a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402b7c:	f104 0804 	add.w	r8, r4, #4
  402b80:	4640      	mov	r0, r8
  402b82:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402b84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402b86:	682a      	ldr	r2, [r5, #0]
  402b88:	2301      	movs	r3, #1
  402b8a:	4083      	lsls	r3, r0
  402b8c:	4313      	orrs	r3, r2
  402b8e:	602b      	str	r3, [r5, #0]
  402b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b94:	4641      	mov	r1, r8
  402b96:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402b9a:	4b22      	ldr	r3, [pc, #136]	; (402c24 <xTaskResumeAll+0xf8>)
  402b9c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402b9e:	4b22      	ldr	r3, [pc, #136]	; (402c28 <xTaskResumeAll+0xfc>)
  402ba0:	681b      	ldr	r3, [r3, #0]
  402ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402ba6:	429a      	cmp	r2, r3
  402ba8:	d20c      	bcs.n	402bc4 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402baa:	683b      	ldr	r3, [r7, #0]
  402bac:	2b00      	cmp	r3, #0
  402bae:	d1e0      	bne.n	402b72 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402bb0:	4b1e      	ldr	r3, [pc, #120]	; (402c2c <xTaskResumeAll+0x100>)
  402bb2:	681b      	ldr	r3, [r3, #0]
  402bb4:	b1db      	cbz	r3, 402bee <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402bb6:	4b1d      	ldr	r3, [pc, #116]	; (402c2c <xTaskResumeAll+0x100>)
  402bb8:	681b      	ldr	r3, [r3, #0]
  402bba:	b1c3      	cbz	r3, 402bee <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402bbc:	4e1c      	ldr	r6, [pc, #112]	; (402c30 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402bbe:	4d1d      	ldr	r5, [pc, #116]	; (402c34 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402bc0:	4c1a      	ldr	r4, [pc, #104]	; (402c2c <xTaskResumeAll+0x100>)
  402bc2:	e00e      	b.n	402be2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402bc4:	2201      	movs	r2, #1
  402bc6:	4b1b      	ldr	r3, [pc, #108]	; (402c34 <xTaskResumeAll+0x108>)
  402bc8:	601a      	str	r2, [r3, #0]
  402bca:	e7ee      	b.n	402baa <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402bcc:	4f1a      	ldr	r7, [pc, #104]	; (402c38 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402bce:	4e1b      	ldr	r6, [pc, #108]	; (402c3c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402bd0:	4d1b      	ldr	r5, [pc, #108]	; (402c40 <xTaskResumeAll+0x114>)
  402bd2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402c48 <xTaskResumeAll+0x11c>
  402bd6:	e7e8      	b.n	402baa <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402bd8:	6823      	ldr	r3, [r4, #0]
  402bda:	3b01      	subs	r3, #1
  402bdc:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402bde:	6823      	ldr	r3, [r4, #0]
  402be0:	b12b      	cbz	r3, 402bee <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402be2:	47b0      	blx	r6
  402be4:	2800      	cmp	r0, #0
  402be6:	d0f7      	beq.n	402bd8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402be8:	2301      	movs	r3, #1
  402bea:	602b      	str	r3, [r5, #0]
  402bec:	e7f4      	b.n	402bd8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402bee:	4b11      	ldr	r3, [pc, #68]	; (402c34 <xTaskResumeAll+0x108>)
  402bf0:	681b      	ldr	r3, [r3, #0]
  402bf2:	2b01      	cmp	r3, #1
  402bf4:	d10b      	bne.n	402c0e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402bfa:	4b12      	ldr	r3, [pc, #72]	; (402c44 <xTaskResumeAll+0x118>)
  402bfc:	601a      	str	r2, [r3, #0]
  402bfe:	f3bf 8f4f 	dsb	sy
  402c02:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402c06:	2401      	movs	r4, #1
  402c08:	e7ae      	b.n	402b68 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402c0a:	2400      	movs	r4, #0
  402c0c:	e7ac      	b.n	402b68 <xTaskResumeAll+0x3c>
  402c0e:	2400      	movs	r4, #0
  402c10:	e7aa      	b.n	402b68 <xTaskResumeAll+0x3c>
  402c12:	bf00      	nop
  402c14:	20400d00 	.word	0x20400d00
  402c18:	00401ac1 	.word	0x00401ac1
  402c1c:	20400cf8 	.word	0x20400cf8
  402c20:	00401b0d 	.word	0x00401b0d
  402c24:	00401991 	.word	0x00401991
  402c28:	20400c88 	.word	0x20400c88
  402c2c:	20400cfc 	.word	0x20400cfc
  402c30:	004029e1 	.word	0x004029e1
  402c34:	20400d84 	.word	0x20400d84
  402c38:	20400d40 	.word	0x20400d40
  402c3c:	004019dd 	.word	0x004019dd
  402c40:	20400d0c 	.word	0x20400d0c
  402c44:	e000ed04 	.word	0xe000ed04
  402c48:	20400c94 	.word	0x20400c94

00402c4c <vTaskDelay>:
	{
  402c4c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402c4e:	2800      	cmp	r0, #0
  402c50:	d029      	beq.n	402ca6 <vTaskDelay+0x5a>
  402c52:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402c54:	4b18      	ldr	r3, [pc, #96]	; (402cb8 <vTaskDelay+0x6c>)
  402c56:	681b      	ldr	r3, [r3, #0]
  402c58:	b153      	cbz	r3, 402c70 <vTaskDelay+0x24>
  402c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c5e:	b672      	cpsid	i
  402c60:	f383 8811 	msr	BASEPRI, r3
  402c64:	f3bf 8f6f 	isb	sy
  402c68:	f3bf 8f4f 	dsb	sy
  402c6c:	b662      	cpsie	i
  402c6e:	e7fe      	b.n	402c6e <vTaskDelay+0x22>
			vTaskSuspendAll();
  402c70:	4b12      	ldr	r3, [pc, #72]	; (402cbc <vTaskDelay+0x70>)
  402c72:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402c74:	4b12      	ldr	r3, [pc, #72]	; (402cc0 <vTaskDelay+0x74>)
  402c76:	681b      	ldr	r3, [r3, #0]
  402c78:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c7a:	4b12      	ldr	r3, [pc, #72]	; (402cc4 <vTaskDelay+0x78>)
  402c7c:	6818      	ldr	r0, [r3, #0]
  402c7e:	3004      	adds	r0, #4
  402c80:	4b11      	ldr	r3, [pc, #68]	; (402cc8 <vTaskDelay+0x7c>)
  402c82:	4798      	blx	r3
  402c84:	b948      	cbnz	r0, 402c9a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402c86:	4b0f      	ldr	r3, [pc, #60]	; (402cc4 <vTaskDelay+0x78>)
  402c88:	681a      	ldr	r2, [r3, #0]
  402c8a:	4910      	ldr	r1, [pc, #64]	; (402ccc <vTaskDelay+0x80>)
  402c8c:	680b      	ldr	r3, [r1, #0]
  402c8e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402c90:	2201      	movs	r2, #1
  402c92:	4082      	lsls	r2, r0
  402c94:	ea23 0302 	bic.w	r3, r3, r2
  402c98:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402c9a:	4620      	mov	r0, r4
  402c9c:	4b0c      	ldr	r3, [pc, #48]	; (402cd0 <vTaskDelay+0x84>)
  402c9e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402ca0:	4b0c      	ldr	r3, [pc, #48]	; (402cd4 <vTaskDelay+0x88>)
  402ca2:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402ca4:	b938      	cbnz	r0, 402cb6 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402caa:	4b0b      	ldr	r3, [pc, #44]	; (402cd8 <vTaskDelay+0x8c>)
  402cac:	601a      	str	r2, [r3, #0]
  402cae:	f3bf 8f4f 	dsb	sy
  402cb2:	f3bf 8f6f 	isb	sy
  402cb6:	bd10      	pop	{r4, pc}
  402cb8:	20400d00 	.word	0x20400d00
  402cbc:	004029c5 	.word	0x004029c5
  402cc0:	20400d80 	.word	0x20400d80
  402cc4:	20400c88 	.word	0x20400c88
  402cc8:	004019dd 	.word	0x004019dd
  402ccc:	20400d0c 	.word	0x20400d0c
  402cd0:	004026a9 	.word	0x004026a9
  402cd4:	00402b2d 	.word	0x00402b2d
  402cd8:	e000ed04 	.word	0xe000ed04

00402cdc <prvIdleTask>:
{
  402cdc:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402cde:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402d68 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402ce2:	4e19      	ldr	r6, [pc, #100]	; (402d48 <prvIdleTask+0x6c>)
				taskYIELD();
  402ce4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402d6c <prvIdleTask+0x90>
  402ce8:	e02a      	b.n	402d40 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402cea:	4b18      	ldr	r3, [pc, #96]	; (402d4c <prvIdleTask+0x70>)
  402cec:	681b      	ldr	r3, [r3, #0]
  402cee:	2b01      	cmp	r3, #1
  402cf0:	d81e      	bhi.n	402d30 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402cf2:	682b      	ldr	r3, [r5, #0]
  402cf4:	2b00      	cmp	r3, #0
  402cf6:	d0f8      	beq.n	402cea <prvIdleTask+0xe>
			vTaskSuspendAll();
  402cf8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402cfa:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402cfc:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402cfe:	2c00      	cmp	r4, #0
  402d00:	d0f7      	beq.n	402cf2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402d02:	4b13      	ldr	r3, [pc, #76]	; (402d50 <prvIdleTask+0x74>)
  402d04:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402d06:	68f3      	ldr	r3, [r6, #12]
  402d08:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402d0a:	1d20      	adds	r0, r4, #4
  402d0c:	4b11      	ldr	r3, [pc, #68]	; (402d54 <prvIdleTask+0x78>)
  402d0e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402d10:	4a11      	ldr	r2, [pc, #68]	; (402d58 <prvIdleTask+0x7c>)
  402d12:	6813      	ldr	r3, [r2, #0]
  402d14:	3b01      	subs	r3, #1
  402d16:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402d18:	682b      	ldr	r3, [r5, #0]
  402d1a:	3b01      	subs	r3, #1
  402d1c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402d1e:	4b0f      	ldr	r3, [pc, #60]	; (402d5c <prvIdleTask+0x80>)
  402d20:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402d22:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402d24:	f8df a048 	ldr.w	sl, [pc, #72]	; 402d70 <prvIdleTask+0x94>
  402d28:	47d0      	blx	sl
		vPortFree( pxTCB );
  402d2a:	4620      	mov	r0, r4
  402d2c:	47d0      	blx	sl
  402d2e:	e7e0      	b.n	402cf2 <prvIdleTask+0x16>
				taskYIELD();
  402d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402d34:	f8c9 3000 	str.w	r3, [r9]
  402d38:	f3bf 8f4f 	dsb	sy
  402d3c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402d40:	4d07      	ldr	r5, [pc, #28]	; (402d60 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402d42:	4f08      	ldr	r7, [pc, #32]	; (402d64 <prvIdleTask+0x88>)
  402d44:	e7d5      	b.n	402cf2 <prvIdleTask+0x16>
  402d46:	bf00      	nop
  402d48:	20400d6c 	.word	0x20400d6c
  402d4c:	20400c94 	.word	0x20400c94
  402d50:	00401ac1 	.word	0x00401ac1
  402d54:	004019dd 	.word	0x004019dd
  402d58:	20400cf8 	.word	0x20400cf8
  402d5c:	00401b0d 	.word	0x00401b0d
  402d60:	20400d08 	.word	0x20400d08
  402d64:	00402b2d 	.word	0x00402b2d
  402d68:	004029c5 	.word	0x004029c5
  402d6c:	e000ed04 	.word	0xe000ed04
  402d70:	00401d4d 	.word	0x00401d4d

00402d74 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402d74:	4b2d      	ldr	r3, [pc, #180]	; (402e2c <vTaskSwitchContext+0xb8>)
  402d76:	681b      	ldr	r3, [r3, #0]
  402d78:	2b00      	cmp	r3, #0
  402d7a:	d12c      	bne.n	402dd6 <vTaskSwitchContext+0x62>
{
  402d7c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402d7e:	2200      	movs	r2, #0
  402d80:	4b2b      	ldr	r3, [pc, #172]	; (402e30 <vTaskSwitchContext+0xbc>)
  402d82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402d84:	4b2b      	ldr	r3, [pc, #172]	; (402e34 <vTaskSwitchContext+0xc0>)
  402d86:	681b      	ldr	r3, [r3, #0]
  402d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d8a:	681a      	ldr	r2, [r3, #0]
  402d8c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402d90:	d103      	bne.n	402d9a <vTaskSwitchContext+0x26>
  402d92:	685a      	ldr	r2, [r3, #4]
  402d94:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402d98:	d021      	beq.n	402dde <vTaskSwitchContext+0x6a>
  402d9a:	4b26      	ldr	r3, [pc, #152]	; (402e34 <vTaskSwitchContext+0xc0>)
  402d9c:	6818      	ldr	r0, [r3, #0]
  402d9e:	6819      	ldr	r1, [r3, #0]
  402da0:	3134      	adds	r1, #52	; 0x34
  402da2:	4b25      	ldr	r3, [pc, #148]	; (402e38 <vTaskSwitchContext+0xc4>)
  402da4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402da6:	4b25      	ldr	r3, [pc, #148]	; (402e3c <vTaskSwitchContext+0xc8>)
  402da8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402daa:	fab3 f383 	clz	r3, r3
  402dae:	b2db      	uxtb	r3, r3
  402db0:	f1c3 031f 	rsb	r3, r3, #31
  402db4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402db8:	4a21      	ldr	r2, [pc, #132]	; (402e40 <vTaskSwitchContext+0xcc>)
  402dba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402dbe:	b9ba      	cbnz	r2, 402df0 <vTaskSwitchContext+0x7c>
	__asm volatile
  402dc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dc4:	b672      	cpsid	i
  402dc6:	f383 8811 	msr	BASEPRI, r3
  402dca:	f3bf 8f6f 	isb	sy
  402dce:	f3bf 8f4f 	dsb	sy
  402dd2:	b662      	cpsie	i
  402dd4:	e7fe      	b.n	402dd4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402dd6:	2201      	movs	r2, #1
  402dd8:	4b15      	ldr	r3, [pc, #84]	; (402e30 <vTaskSwitchContext+0xbc>)
  402dda:	601a      	str	r2, [r3, #0]
  402ddc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402dde:	689a      	ldr	r2, [r3, #8]
  402de0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402de4:	d1d9      	bne.n	402d9a <vTaskSwitchContext+0x26>
  402de6:	68db      	ldr	r3, [r3, #12]
  402de8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402dec:	d1d5      	bne.n	402d9a <vTaskSwitchContext+0x26>
  402dee:	e7da      	b.n	402da6 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402df0:	4a13      	ldr	r2, [pc, #76]	; (402e40 <vTaskSwitchContext+0xcc>)
  402df2:	0099      	lsls	r1, r3, #2
  402df4:	18c8      	adds	r0, r1, r3
  402df6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402dfa:	6844      	ldr	r4, [r0, #4]
  402dfc:	6864      	ldr	r4, [r4, #4]
  402dfe:	6044      	str	r4, [r0, #4]
  402e00:	4419      	add	r1, r3
  402e02:	4602      	mov	r2, r0
  402e04:	3208      	adds	r2, #8
  402e06:	4294      	cmp	r4, r2
  402e08:	d009      	beq.n	402e1e <vTaskSwitchContext+0xaa>
  402e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e0e:	4a0c      	ldr	r2, [pc, #48]	; (402e40 <vTaskSwitchContext+0xcc>)
  402e10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402e14:	685b      	ldr	r3, [r3, #4]
  402e16:	68da      	ldr	r2, [r3, #12]
  402e18:	4b06      	ldr	r3, [pc, #24]	; (402e34 <vTaskSwitchContext+0xc0>)
  402e1a:	601a      	str	r2, [r3, #0]
  402e1c:	bd10      	pop	{r4, pc}
  402e1e:	6860      	ldr	r0, [r4, #4]
  402e20:	4a07      	ldr	r2, [pc, #28]	; (402e40 <vTaskSwitchContext+0xcc>)
  402e22:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402e26:	6050      	str	r0, [r2, #4]
  402e28:	e7ef      	b.n	402e0a <vTaskSwitchContext+0x96>
  402e2a:	bf00      	nop
  402e2c:	20400d00 	.word	0x20400d00
  402e30:	20400d84 	.word	0x20400d84
  402e34:	20400c88 	.word	0x20400c88
  402e38:	00403a0d 	.word	0x00403a0d
  402e3c:	20400d0c 	.word	0x20400d0c
  402e40:	20400c94 	.word	0x20400c94

00402e44 <vTaskPlaceOnEventList>:
{
  402e44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402e46:	b1e0      	cbz	r0, 402e82 <vTaskPlaceOnEventList+0x3e>
  402e48:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402e4a:	4d17      	ldr	r5, [pc, #92]	; (402ea8 <vTaskPlaceOnEventList+0x64>)
  402e4c:	6829      	ldr	r1, [r5, #0]
  402e4e:	3118      	adds	r1, #24
  402e50:	4b16      	ldr	r3, [pc, #88]	; (402eac <vTaskPlaceOnEventList+0x68>)
  402e52:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e54:	6828      	ldr	r0, [r5, #0]
  402e56:	3004      	adds	r0, #4
  402e58:	4b15      	ldr	r3, [pc, #84]	; (402eb0 <vTaskPlaceOnEventList+0x6c>)
  402e5a:	4798      	blx	r3
  402e5c:	b940      	cbnz	r0, 402e70 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402e5e:	682a      	ldr	r2, [r5, #0]
  402e60:	4914      	ldr	r1, [pc, #80]	; (402eb4 <vTaskPlaceOnEventList+0x70>)
  402e62:	680b      	ldr	r3, [r1, #0]
  402e64:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402e66:	2201      	movs	r2, #1
  402e68:	4082      	lsls	r2, r0
  402e6a:	ea23 0302 	bic.w	r3, r3, r2
  402e6e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402e70:	f1b4 3fff 	cmp.w	r4, #4294967295
  402e74:	d010      	beq.n	402e98 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402e76:	4b10      	ldr	r3, [pc, #64]	; (402eb8 <vTaskPlaceOnEventList+0x74>)
  402e78:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402e7a:	4420      	add	r0, r4
  402e7c:	4b0f      	ldr	r3, [pc, #60]	; (402ebc <vTaskPlaceOnEventList+0x78>)
  402e7e:	4798      	blx	r3
  402e80:	bd38      	pop	{r3, r4, r5, pc}
  402e82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e86:	b672      	cpsid	i
  402e88:	f383 8811 	msr	BASEPRI, r3
  402e8c:	f3bf 8f6f 	isb	sy
  402e90:	f3bf 8f4f 	dsb	sy
  402e94:	b662      	cpsie	i
  402e96:	e7fe      	b.n	402e96 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402e98:	4b03      	ldr	r3, [pc, #12]	; (402ea8 <vTaskPlaceOnEventList+0x64>)
  402e9a:	6819      	ldr	r1, [r3, #0]
  402e9c:	3104      	adds	r1, #4
  402e9e:	4808      	ldr	r0, [pc, #32]	; (402ec0 <vTaskPlaceOnEventList+0x7c>)
  402ea0:	4b08      	ldr	r3, [pc, #32]	; (402ec4 <vTaskPlaceOnEventList+0x80>)
  402ea2:	4798      	blx	r3
  402ea4:	bd38      	pop	{r3, r4, r5, pc}
  402ea6:	bf00      	nop
  402ea8:	20400c88 	.word	0x20400c88
  402eac:	004019a9 	.word	0x004019a9
  402eb0:	004019dd 	.word	0x004019dd
  402eb4:	20400d0c 	.word	0x20400d0c
  402eb8:	20400d80 	.word	0x20400d80
  402ebc:	004026a9 	.word	0x004026a9
  402ec0:	20400d58 	.word	0x20400d58
  402ec4:	00401991 	.word	0x00401991

00402ec8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402ec8:	b1e8      	cbz	r0, 402f06 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402eca:	b570      	push	{r4, r5, r6, lr}
  402ecc:	4615      	mov	r5, r2
  402ece:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402ed0:	4e16      	ldr	r6, [pc, #88]	; (402f2c <vTaskPlaceOnEventListRestricted+0x64>)
  402ed2:	6831      	ldr	r1, [r6, #0]
  402ed4:	3118      	adds	r1, #24
  402ed6:	4b16      	ldr	r3, [pc, #88]	; (402f30 <vTaskPlaceOnEventListRestricted+0x68>)
  402ed8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402eda:	6830      	ldr	r0, [r6, #0]
  402edc:	3004      	adds	r0, #4
  402ede:	4b15      	ldr	r3, [pc, #84]	; (402f34 <vTaskPlaceOnEventListRestricted+0x6c>)
  402ee0:	4798      	blx	r3
  402ee2:	b940      	cbnz	r0, 402ef6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402ee4:	6832      	ldr	r2, [r6, #0]
  402ee6:	4914      	ldr	r1, [pc, #80]	; (402f38 <vTaskPlaceOnEventListRestricted+0x70>)
  402ee8:	680b      	ldr	r3, [r1, #0]
  402eea:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402eec:	2201      	movs	r2, #1
  402eee:	4082      	lsls	r2, r0
  402ef0:	ea23 0302 	bic.w	r3, r3, r2
  402ef4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402ef6:	2d01      	cmp	r5, #1
  402ef8:	d010      	beq.n	402f1c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402efa:	4b10      	ldr	r3, [pc, #64]	; (402f3c <vTaskPlaceOnEventListRestricted+0x74>)
  402efc:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402efe:	4420      	add	r0, r4
  402f00:	4b0f      	ldr	r3, [pc, #60]	; (402f40 <vTaskPlaceOnEventListRestricted+0x78>)
  402f02:	4798      	blx	r3
  402f04:	bd70      	pop	{r4, r5, r6, pc}
  402f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f0a:	b672      	cpsid	i
  402f0c:	f383 8811 	msr	BASEPRI, r3
  402f10:	f3bf 8f6f 	isb	sy
  402f14:	f3bf 8f4f 	dsb	sy
  402f18:	b662      	cpsie	i
  402f1a:	e7fe      	b.n	402f1a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402f1c:	4b03      	ldr	r3, [pc, #12]	; (402f2c <vTaskPlaceOnEventListRestricted+0x64>)
  402f1e:	6819      	ldr	r1, [r3, #0]
  402f20:	3104      	adds	r1, #4
  402f22:	4808      	ldr	r0, [pc, #32]	; (402f44 <vTaskPlaceOnEventListRestricted+0x7c>)
  402f24:	4b02      	ldr	r3, [pc, #8]	; (402f30 <vTaskPlaceOnEventListRestricted+0x68>)
  402f26:	4798      	blx	r3
  402f28:	bd70      	pop	{r4, r5, r6, pc}
  402f2a:	bf00      	nop
  402f2c:	20400c88 	.word	0x20400c88
  402f30:	00401991 	.word	0x00401991
  402f34:	004019dd 	.word	0x004019dd
  402f38:	20400d0c 	.word	0x20400d0c
  402f3c:	20400d80 	.word	0x20400d80
  402f40:	004026a9 	.word	0x004026a9
  402f44:	20400d58 	.word	0x20400d58

00402f48 <xTaskRemoveFromEventList>:
{
  402f48:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402f4a:	68c3      	ldr	r3, [r0, #12]
  402f4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402f4e:	b324      	cbz	r4, 402f9a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402f50:	f104 0518 	add.w	r5, r4, #24
  402f54:	4628      	mov	r0, r5
  402f56:	4b1a      	ldr	r3, [pc, #104]	; (402fc0 <xTaskRemoveFromEventList+0x78>)
  402f58:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f5a:	4b1a      	ldr	r3, [pc, #104]	; (402fc4 <xTaskRemoveFromEventList+0x7c>)
  402f5c:	681b      	ldr	r3, [r3, #0]
  402f5e:	bb3b      	cbnz	r3, 402fb0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402f60:	1d25      	adds	r5, r4, #4
  402f62:	4628      	mov	r0, r5
  402f64:	4b16      	ldr	r3, [pc, #88]	; (402fc0 <xTaskRemoveFromEventList+0x78>)
  402f66:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402f6a:	4a17      	ldr	r2, [pc, #92]	; (402fc8 <xTaskRemoveFromEventList+0x80>)
  402f6c:	6811      	ldr	r1, [r2, #0]
  402f6e:	2301      	movs	r3, #1
  402f70:	4083      	lsls	r3, r0
  402f72:	430b      	orrs	r3, r1
  402f74:	6013      	str	r3, [r2, #0]
  402f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f7a:	4629      	mov	r1, r5
  402f7c:	4b13      	ldr	r3, [pc, #76]	; (402fcc <xTaskRemoveFromEventList+0x84>)
  402f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f82:	4b13      	ldr	r3, [pc, #76]	; (402fd0 <xTaskRemoveFromEventList+0x88>)
  402f84:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402f86:	4b13      	ldr	r3, [pc, #76]	; (402fd4 <xTaskRemoveFromEventList+0x8c>)
  402f88:	681b      	ldr	r3, [r3, #0]
  402f8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402f8e:	429a      	cmp	r2, r3
  402f90:	d913      	bls.n	402fba <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402f92:	2001      	movs	r0, #1
  402f94:	4b10      	ldr	r3, [pc, #64]	; (402fd8 <xTaskRemoveFromEventList+0x90>)
  402f96:	6018      	str	r0, [r3, #0]
  402f98:	bd38      	pop	{r3, r4, r5, pc}
  402f9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f9e:	b672      	cpsid	i
  402fa0:	f383 8811 	msr	BASEPRI, r3
  402fa4:	f3bf 8f6f 	isb	sy
  402fa8:	f3bf 8f4f 	dsb	sy
  402fac:	b662      	cpsie	i
  402fae:	e7fe      	b.n	402fae <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402fb0:	4629      	mov	r1, r5
  402fb2:	480a      	ldr	r0, [pc, #40]	; (402fdc <xTaskRemoveFromEventList+0x94>)
  402fb4:	4b06      	ldr	r3, [pc, #24]	; (402fd0 <xTaskRemoveFromEventList+0x88>)
  402fb6:	4798      	blx	r3
  402fb8:	e7e5      	b.n	402f86 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402fba:	2000      	movs	r0, #0
}
  402fbc:	bd38      	pop	{r3, r4, r5, pc}
  402fbe:	bf00      	nop
  402fc0:	004019dd 	.word	0x004019dd
  402fc4:	20400d00 	.word	0x20400d00
  402fc8:	20400d0c 	.word	0x20400d0c
  402fcc:	20400c94 	.word	0x20400c94
  402fd0:	00401991 	.word	0x00401991
  402fd4:	20400c88 	.word	0x20400c88
  402fd8:	20400d84 	.word	0x20400d84
  402fdc:	20400d40 	.word	0x20400d40

00402fe0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402fe0:	b130      	cbz	r0, 402ff0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402fe2:	4a09      	ldr	r2, [pc, #36]	; (403008 <vTaskSetTimeOutState+0x28>)
  402fe4:	6812      	ldr	r2, [r2, #0]
  402fe6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402fe8:	4a08      	ldr	r2, [pc, #32]	; (40300c <vTaskSetTimeOutState+0x2c>)
  402fea:	6812      	ldr	r2, [r2, #0]
  402fec:	6042      	str	r2, [r0, #4]
  402fee:	4770      	bx	lr
  402ff0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ff4:	b672      	cpsid	i
  402ff6:	f383 8811 	msr	BASEPRI, r3
  402ffa:	f3bf 8f6f 	isb	sy
  402ffe:	f3bf 8f4f 	dsb	sy
  403002:	b662      	cpsie	i
  403004:	e7fe      	b.n	403004 <vTaskSetTimeOutState+0x24>
  403006:	bf00      	nop
  403008:	20400d3c 	.word	0x20400d3c
  40300c:	20400d80 	.word	0x20400d80

00403010 <xTaskCheckForTimeOut>:
{
  403010:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403012:	b1c0      	cbz	r0, 403046 <xTaskCheckForTimeOut+0x36>
  403014:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403016:	b309      	cbz	r1, 40305c <xTaskCheckForTimeOut+0x4c>
  403018:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40301a:	4b1d      	ldr	r3, [pc, #116]	; (403090 <xTaskCheckForTimeOut+0x80>)
  40301c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40301e:	4b1d      	ldr	r3, [pc, #116]	; (403094 <xTaskCheckForTimeOut+0x84>)
  403020:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403022:	682b      	ldr	r3, [r5, #0]
  403024:	f1b3 3fff 	cmp.w	r3, #4294967295
  403028:	d02e      	beq.n	403088 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40302a:	491b      	ldr	r1, [pc, #108]	; (403098 <xTaskCheckForTimeOut+0x88>)
  40302c:	6809      	ldr	r1, [r1, #0]
  40302e:	6820      	ldr	r0, [r4, #0]
  403030:	4288      	cmp	r0, r1
  403032:	d002      	beq.n	40303a <xTaskCheckForTimeOut+0x2a>
  403034:	6861      	ldr	r1, [r4, #4]
  403036:	428a      	cmp	r2, r1
  403038:	d228      	bcs.n	40308c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40303a:	6861      	ldr	r1, [r4, #4]
  40303c:	1a50      	subs	r0, r2, r1
  40303e:	4283      	cmp	r3, r0
  403040:	d817      	bhi.n	403072 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403042:	2401      	movs	r4, #1
  403044:	e01c      	b.n	403080 <xTaskCheckForTimeOut+0x70>
  403046:	f04f 0380 	mov.w	r3, #128	; 0x80
  40304a:	b672      	cpsid	i
  40304c:	f383 8811 	msr	BASEPRI, r3
  403050:	f3bf 8f6f 	isb	sy
  403054:	f3bf 8f4f 	dsb	sy
  403058:	b662      	cpsie	i
  40305a:	e7fe      	b.n	40305a <xTaskCheckForTimeOut+0x4a>
  40305c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403060:	b672      	cpsid	i
  403062:	f383 8811 	msr	BASEPRI, r3
  403066:	f3bf 8f6f 	isb	sy
  40306a:	f3bf 8f4f 	dsb	sy
  40306e:	b662      	cpsie	i
  403070:	e7fe      	b.n	403070 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403072:	1a9b      	subs	r3, r3, r2
  403074:	440b      	add	r3, r1
  403076:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403078:	4620      	mov	r0, r4
  40307a:	4b08      	ldr	r3, [pc, #32]	; (40309c <xTaskCheckForTimeOut+0x8c>)
  40307c:	4798      	blx	r3
			xReturn = pdFALSE;
  40307e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403080:	4b07      	ldr	r3, [pc, #28]	; (4030a0 <xTaskCheckForTimeOut+0x90>)
  403082:	4798      	blx	r3
}
  403084:	4620      	mov	r0, r4
  403086:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403088:	2400      	movs	r4, #0
  40308a:	e7f9      	b.n	403080 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40308c:	2401      	movs	r4, #1
  40308e:	e7f7      	b.n	403080 <xTaskCheckForTimeOut+0x70>
  403090:	00401ac1 	.word	0x00401ac1
  403094:	20400d80 	.word	0x20400d80
  403098:	20400d3c 	.word	0x20400d3c
  40309c:	00402fe1 	.word	0x00402fe1
  4030a0:	00401b0d 	.word	0x00401b0d

004030a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4030a4:	2201      	movs	r2, #1
  4030a6:	4b01      	ldr	r3, [pc, #4]	; (4030ac <vTaskMissedYield+0x8>)
  4030a8:	601a      	str	r2, [r3, #0]
  4030aa:	4770      	bx	lr
  4030ac:	20400d84 	.word	0x20400d84

004030b0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4030b0:	4b05      	ldr	r3, [pc, #20]	; (4030c8 <xTaskGetSchedulerState+0x18>)
  4030b2:	681b      	ldr	r3, [r3, #0]
  4030b4:	b133      	cbz	r3, 4030c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4030b6:	4b05      	ldr	r3, [pc, #20]	; (4030cc <xTaskGetSchedulerState+0x1c>)
  4030b8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	bf0c      	ite	eq
  4030be:	2002      	moveq	r0, #2
  4030c0:	2000      	movne	r0, #0
  4030c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4030c4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4030c6:	4770      	bx	lr
  4030c8:	20400d54 	.word	0x20400d54
  4030cc:	20400d00 	.word	0x20400d00

004030d0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4030d0:	2800      	cmp	r0, #0
  4030d2:	d044      	beq.n	40315e <vTaskPriorityInherit+0x8e>
	{
  4030d4:	b538      	push	{r3, r4, r5, lr}
  4030d6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4030d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4030da:	4921      	ldr	r1, [pc, #132]	; (403160 <vTaskPriorityInherit+0x90>)
  4030dc:	6809      	ldr	r1, [r1, #0]
  4030de:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4030e0:	428a      	cmp	r2, r1
  4030e2:	d214      	bcs.n	40310e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4030e4:	6981      	ldr	r1, [r0, #24]
  4030e6:	2900      	cmp	r1, #0
  4030e8:	db05      	blt.n	4030f6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4030ea:	491d      	ldr	r1, [pc, #116]	; (403160 <vTaskPriorityInherit+0x90>)
  4030ec:	6809      	ldr	r1, [r1, #0]
  4030ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4030f0:	f1c1 0105 	rsb	r1, r1, #5
  4030f4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4030f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4030fa:	491a      	ldr	r1, [pc, #104]	; (403164 <vTaskPriorityInherit+0x94>)
  4030fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403100:	6961      	ldr	r1, [r4, #20]
  403102:	4291      	cmp	r1, r2
  403104:	d004      	beq.n	403110 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403106:	4a16      	ldr	r2, [pc, #88]	; (403160 <vTaskPriorityInherit+0x90>)
  403108:	6812      	ldr	r2, [r2, #0]
  40310a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40310c:	62e2      	str	r2, [r4, #44]	; 0x2c
  40310e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403110:	1d25      	adds	r5, r4, #4
  403112:	4628      	mov	r0, r5
  403114:	4b14      	ldr	r3, [pc, #80]	; (403168 <vTaskPriorityInherit+0x98>)
  403116:	4798      	blx	r3
  403118:	b970      	cbnz	r0, 403138 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40311a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40311c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403120:	4a10      	ldr	r2, [pc, #64]	; (403164 <vTaskPriorityInherit+0x94>)
  403122:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403126:	b93a      	cbnz	r2, 403138 <vTaskPriorityInherit+0x68>
  403128:	4810      	ldr	r0, [pc, #64]	; (40316c <vTaskPriorityInherit+0x9c>)
  40312a:	6802      	ldr	r2, [r0, #0]
  40312c:	2101      	movs	r1, #1
  40312e:	fa01 f303 	lsl.w	r3, r1, r3
  403132:	ea22 0303 	bic.w	r3, r2, r3
  403136:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403138:	4b09      	ldr	r3, [pc, #36]	; (403160 <vTaskPriorityInherit+0x90>)
  40313a:	681b      	ldr	r3, [r3, #0]
  40313c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40313e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403140:	4a0a      	ldr	r2, [pc, #40]	; (40316c <vTaskPriorityInherit+0x9c>)
  403142:	6811      	ldr	r1, [r2, #0]
  403144:	2301      	movs	r3, #1
  403146:	4083      	lsls	r3, r0
  403148:	430b      	orrs	r3, r1
  40314a:	6013      	str	r3, [r2, #0]
  40314c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403150:	4629      	mov	r1, r5
  403152:	4b04      	ldr	r3, [pc, #16]	; (403164 <vTaskPriorityInherit+0x94>)
  403154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403158:	4b05      	ldr	r3, [pc, #20]	; (403170 <vTaskPriorityInherit+0xa0>)
  40315a:	4798      	blx	r3
  40315c:	bd38      	pop	{r3, r4, r5, pc}
  40315e:	4770      	bx	lr
  403160:	20400c88 	.word	0x20400c88
  403164:	20400c94 	.word	0x20400c94
  403168:	004019dd 	.word	0x004019dd
  40316c:	20400d0c 	.word	0x20400d0c
  403170:	00401991 	.word	0x00401991

00403174 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403174:	2800      	cmp	r0, #0
  403176:	d04d      	beq.n	403214 <xTaskPriorityDisinherit+0xa0>
	{
  403178:	b538      	push	{r3, r4, r5, lr}
  40317a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40317c:	4a27      	ldr	r2, [pc, #156]	; (40321c <xTaskPriorityDisinherit+0xa8>)
  40317e:	6812      	ldr	r2, [r2, #0]
  403180:	4290      	cmp	r0, r2
  403182:	d00a      	beq.n	40319a <xTaskPriorityDisinherit+0x26>
  403184:	f04f 0380 	mov.w	r3, #128	; 0x80
  403188:	b672      	cpsid	i
  40318a:	f383 8811 	msr	BASEPRI, r3
  40318e:	f3bf 8f6f 	isb	sy
  403192:	f3bf 8f4f 	dsb	sy
  403196:	b662      	cpsie	i
  403198:	e7fe      	b.n	403198 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40319a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40319c:	b952      	cbnz	r2, 4031b4 <xTaskPriorityDisinherit+0x40>
  40319e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031a2:	b672      	cpsid	i
  4031a4:	f383 8811 	msr	BASEPRI, r3
  4031a8:	f3bf 8f6f 	isb	sy
  4031ac:	f3bf 8f4f 	dsb	sy
  4031b0:	b662      	cpsie	i
  4031b2:	e7fe      	b.n	4031b2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4031b4:	3a01      	subs	r2, #1
  4031b6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4031b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4031ba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4031bc:	4288      	cmp	r0, r1
  4031be:	d02b      	beq.n	403218 <xTaskPriorityDisinherit+0xa4>
  4031c0:	bb52      	cbnz	r2, 403218 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4031c2:	1d25      	adds	r5, r4, #4
  4031c4:	4628      	mov	r0, r5
  4031c6:	4b16      	ldr	r3, [pc, #88]	; (403220 <xTaskPriorityDisinherit+0xac>)
  4031c8:	4798      	blx	r3
  4031ca:	b968      	cbnz	r0, 4031e8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4031cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4031ce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4031d2:	4b14      	ldr	r3, [pc, #80]	; (403224 <xTaskPriorityDisinherit+0xb0>)
  4031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4031d8:	b933      	cbnz	r3, 4031e8 <xTaskPriorityDisinherit+0x74>
  4031da:	4813      	ldr	r0, [pc, #76]	; (403228 <xTaskPriorityDisinherit+0xb4>)
  4031dc:	6803      	ldr	r3, [r0, #0]
  4031de:	2201      	movs	r2, #1
  4031e0:	408a      	lsls	r2, r1
  4031e2:	ea23 0302 	bic.w	r3, r3, r2
  4031e6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4031e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4031ea:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4031ec:	f1c0 0305 	rsb	r3, r0, #5
  4031f0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4031f2:	4a0d      	ldr	r2, [pc, #52]	; (403228 <xTaskPriorityDisinherit+0xb4>)
  4031f4:	6811      	ldr	r1, [r2, #0]
  4031f6:	2401      	movs	r4, #1
  4031f8:	fa04 f300 	lsl.w	r3, r4, r0
  4031fc:	430b      	orrs	r3, r1
  4031fe:	6013      	str	r3, [r2, #0]
  403200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403204:	4629      	mov	r1, r5
  403206:	4b07      	ldr	r3, [pc, #28]	; (403224 <xTaskPriorityDisinherit+0xb0>)
  403208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40320c:	4b07      	ldr	r3, [pc, #28]	; (40322c <xTaskPriorityDisinherit+0xb8>)
  40320e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403210:	4620      	mov	r0, r4
  403212:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403214:	2000      	movs	r0, #0
  403216:	4770      	bx	lr
  403218:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40321a:	bd38      	pop	{r3, r4, r5, pc}
  40321c:	20400c88 	.word	0x20400c88
  403220:	004019dd 	.word	0x004019dd
  403224:	20400c94 	.word	0x20400c94
  403228:	20400d0c 	.word	0x20400d0c
  40322c:	00401991 	.word	0x00401991

00403230 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403230:	4b05      	ldr	r3, [pc, #20]	; (403248 <pvTaskIncrementMutexHeldCount+0x18>)
  403232:	681b      	ldr	r3, [r3, #0]
  403234:	b123      	cbz	r3, 403240 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403236:	4b04      	ldr	r3, [pc, #16]	; (403248 <pvTaskIncrementMutexHeldCount+0x18>)
  403238:	681a      	ldr	r2, [r3, #0]
  40323a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40323c:	3301      	adds	r3, #1
  40323e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403240:	4b01      	ldr	r3, [pc, #4]	; (403248 <pvTaskIncrementMutexHeldCount+0x18>)
  403242:	6818      	ldr	r0, [r3, #0]
	}
  403244:	4770      	bx	lr
  403246:	bf00      	nop
  403248:	20400c88 	.word	0x20400c88

0040324c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40324c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40324e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403250:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403252:	4291      	cmp	r1, r2
  403254:	d80c      	bhi.n	403270 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403256:	1ad2      	subs	r2, r2, r3
  403258:	6983      	ldr	r3, [r0, #24]
  40325a:	429a      	cmp	r2, r3
  40325c:	d301      	bcc.n	403262 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40325e:	2001      	movs	r0, #1
  403260:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403262:	1d01      	adds	r1, r0, #4
  403264:	4b09      	ldr	r3, [pc, #36]	; (40328c <prvInsertTimerInActiveList+0x40>)
  403266:	6818      	ldr	r0, [r3, #0]
  403268:	4b09      	ldr	r3, [pc, #36]	; (403290 <prvInsertTimerInActiveList+0x44>)
  40326a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40326c:	2000      	movs	r0, #0
  40326e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403270:	429a      	cmp	r2, r3
  403272:	d203      	bcs.n	40327c <prvInsertTimerInActiveList+0x30>
  403274:	4299      	cmp	r1, r3
  403276:	d301      	bcc.n	40327c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403278:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40327a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40327c:	1d01      	adds	r1, r0, #4
  40327e:	4b05      	ldr	r3, [pc, #20]	; (403294 <prvInsertTimerInActiveList+0x48>)
  403280:	6818      	ldr	r0, [r3, #0]
  403282:	4b03      	ldr	r3, [pc, #12]	; (403290 <prvInsertTimerInActiveList+0x44>)
  403284:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403286:	2000      	movs	r0, #0
  403288:	bd08      	pop	{r3, pc}
  40328a:	bf00      	nop
  40328c:	20400d8c 	.word	0x20400d8c
  403290:	004019a9 	.word	0x004019a9
  403294:	20400d88 	.word	0x20400d88

00403298 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403298:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40329a:	4b15      	ldr	r3, [pc, #84]	; (4032f0 <prvCheckForValidListAndQueue+0x58>)
  40329c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40329e:	4b15      	ldr	r3, [pc, #84]	; (4032f4 <prvCheckForValidListAndQueue+0x5c>)
  4032a0:	681b      	ldr	r3, [r3, #0]
  4032a2:	b113      	cbz	r3, 4032aa <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4032a4:	4b14      	ldr	r3, [pc, #80]	; (4032f8 <prvCheckForValidListAndQueue+0x60>)
  4032a6:	4798      	blx	r3
  4032a8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4032aa:	4d14      	ldr	r5, [pc, #80]	; (4032fc <prvCheckForValidListAndQueue+0x64>)
  4032ac:	4628      	mov	r0, r5
  4032ae:	4e14      	ldr	r6, [pc, #80]	; (403300 <prvCheckForValidListAndQueue+0x68>)
  4032b0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4032b2:	4c14      	ldr	r4, [pc, #80]	; (403304 <prvCheckForValidListAndQueue+0x6c>)
  4032b4:	4620      	mov	r0, r4
  4032b6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4032b8:	4b13      	ldr	r3, [pc, #76]	; (403308 <prvCheckForValidListAndQueue+0x70>)
  4032ba:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4032bc:	4b13      	ldr	r3, [pc, #76]	; (40330c <prvCheckForValidListAndQueue+0x74>)
  4032be:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4032c0:	2200      	movs	r2, #0
  4032c2:	2110      	movs	r1, #16
  4032c4:	2005      	movs	r0, #5
  4032c6:	4b12      	ldr	r3, [pc, #72]	; (403310 <prvCheckForValidListAndQueue+0x78>)
  4032c8:	4798      	blx	r3
  4032ca:	4b0a      	ldr	r3, [pc, #40]	; (4032f4 <prvCheckForValidListAndQueue+0x5c>)
  4032cc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4032ce:	b118      	cbz	r0, 4032d8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4032d0:	4910      	ldr	r1, [pc, #64]	; (403314 <prvCheckForValidListAndQueue+0x7c>)
  4032d2:	4b11      	ldr	r3, [pc, #68]	; (403318 <prvCheckForValidListAndQueue+0x80>)
  4032d4:	4798      	blx	r3
  4032d6:	e7e5      	b.n	4032a4 <prvCheckForValidListAndQueue+0xc>
  4032d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032dc:	b672      	cpsid	i
  4032de:	f383 8811 	msr	BASEPRI, r3
  4032e2:	f3bf 8f6f 	isb	sy
  4032e6:	f3bf 8f4f 	dsb	sy
  4032ea:	b662      	cpsie	i
  4032ec:	e7fe      	b.n	4032ec <prvCheckForValidListAndQueue+0x54>
  4032ee:	bf00      	nop
  4032f0:	00401ac1 	.word	0x00401ac1
  4032f4:	20400dbc 	.word	0x20400dbc
  4032f8:	00401b0d 	.word	0x00401b0d
  4032fc:	20400d90 	.word	0x20400d90
  403300:	00401975 	.word	0x00401975
  403304:	20400da4 	.word	0x20400da4
  403308:	20400d88 	.word	0x20400d88
  40330c:	20400d8c 	.word	0x20400d8c
  403310:	00401fe1 	.word	0x00401fe1
  403314:	0040b2f8 	.word	0x0040b2f8
  403318:	004025f1 	.word	0x004025f1

0040331c <xTimerCreateTimerTask>:
{
  40331c:	b510      	push	{r4, lr}
  40331e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403320:	4b0f      	ldr	r3, [pc, #60]	; (403360 <xTimerCreateTimerTask+0x44>)
  403322:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403324:	4b0f      	ldr	r3, [pc, #60]	; (403364 <xTimerCreateTimerTask+0x48>)
  403326:	681b      	ldr	r3, [r3, #0]
  403328:	b173      	cbz	r3, 403348 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40332a:	2300      	movs	r3, #0
  40332c:	9303      	str	r3, [sp, #12]
  40332e:	9302      	str	r3, [sp, #8]
  403330:	9301      	str	r3, [sp, #4]
  403332:	2204      	movs	r2, #4
  403334:	9200      	str	r2, [sp, #0]
  403336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40333a:	490b      	ldr	r1, [pc, #44]	; (403368 <xTimerCreateTimerTask+0x4c>)
  40333c:	480b      	ldr	r0, [pc, #44]	; (40336c <xTimerCreateTimerTask+0x50>)
  40333e:	4c0c      	ldr	r4, [pc, #48]	; (403370 <xTimerCreateTimerTask+0x54>)
  403340:	47a0      	blx	r4
	configASSERT( xReturn );
  403342:	b108      	cbz	r0, 403348 <xTimerCreateTimerTask+0x2c>
}
  403344:	b004      	add	sp, #16
  403346:	bd10      	pop	{r4, pc}
  403348:	f04f 0380 	mov.w	r3, #128	; 0x80
  40334c:	b672      	cpsid	i
  40334e:	f383 8811 	msr	BASEPRI, r3
  403352:	f3bf 8f6f 	isb	sy
  403356:	f3bf 8f4f 	dsb	sy
  40335a:	b662      	cpsie	i
  40335c:	e7fe      	b.n	40335c <xTimerCreateTimerTask+0x40>
  40335e:	bf00      	nop
  403360:	00403299 	.word	0x00403299
  403364:	20400dbc 	.word	0x20400dbc
  403368:	0040b300 	.word	0x0040b300
  40336c:	0040349d 	.word	0x0040349d
  403370:	00402701 	.word	0x00402701

00403374 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403374:	b1d8      	cbz	r0, 4033ae <xTimerGenericCommand+0x3a>
{
  403376:	b530      	push	{r4, r5, lr}
  403378:	b085      	sub	sp, #20
  40337a:	4615      	mov	r5, r2
  40337c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40337e:	4a15      	ldr	r2, [pc, #84]	; (4033d4 <xTimerGenericCommand+0x60>)
  403380:	6810      	ldr	r0, [r2, #0]
  403382:	b320      	cbz	r0, 4033ce <xTimerGenericCommand+0x5a>
  403384:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403386:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403388:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40338a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40338c:	2905      	cmp	r1, #5
  40338e:	dc19      	bgt.n	4033c4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403390:	4b11      	ldr	r3, [pc, #68]	; (4033d8 <xTimerGenericCommand+0x64>)
  403392:	4798      	blx	r3
  403394:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403396:	f04f 0300 	mov.w	r3, #0
  40339a:	bf0c      	ite	eq
  40339c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40339e:	461a      	movne	r2, r3
  4033a0:	4669      	mov	r1, sp
  4033a2:	480c      	ldr	r0, [pc, #48]	; (4033d4 <xTimerGenericCommand+0x60>)
  4033a4:	6800      	ldr	r0, [r0, #0]
  4033a6:	4c0d      	ldr	r4, [pc, #52]	; (4033dc <xTimerGenericCommand+0x68>)
  4033a8:	47a0      	blx	r4
}
  4033aa:	b005      	add	sp, #20
  4033ac:	bd30      	pop	{r4, r5, pc}
  4033ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033b2:	b672      	cpsid	i
  4033b4:	f383 8811 	msr	BASEPRI, r3
  4033b8:	f3bf 8f6f 	isb	sy
  4033bc:	f3bf 8f4f 	dsb	sy
  4033c0:	b662      	cpsie	i
  4033c2:	e7fe      	b.n	4033c2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4033c4:	2300      	movs	r3, #0
  4033c6:	4669      	mov	r1, sp
  4033c8:	4c05      	ldr	r4, [pc, #20]	; (4033e0 <xTimerGenericCommand+0x6c>)
  4033ca:	47a0      	blx	r4
  4033cc:	e7ed      	b.n	4033aa <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4033ce:	2000      	movs	r0, #0
	return xReturn;
  4033d0:	e7eb      	b.n	4033aa <xTimerGenericCommand+0x36>
  4033d2:	bf00      	nop
  4033d4:	20400dbc 	.word	0x20400dbc
  4033d8:	004030b1 	.word	0x004030b1
  4033dc:	0040205d 	.word	0x0040205d
  4033e0:	00402241 	.word	0x00402241

004033e4 <prvSampleTimeNow>:
{
  4033e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033e8:	b082      	sub	sp, #8
  4033ea:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4033ec:	4b24      	ldr	r3, [pc, #144]	; (403480 <prvSampleTimeNow+0x9c>)
  4033ee:	4798      	blx	r3
  4033f0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4033f2:	4b24      	ldr	r3, [pc, #144]	; (403484 <prvSampleTimeNow+0xa0>)
  4033f4:	681b      	ldr	r3, [r3, #0]
  4033f6:	4298      	cmp	r0, r3
  4033f8:	d31b      	bcc.n	403432 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4033fa:	2300      	movs	r3, #0
  4033fc:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403400:	4b20      	ldr	r3, [pc, #128]	; (403484 <prvSampleTimeNow+0xa0>)
  403402:	601f      	str	r7, [r3, #0]
}
  403404:	4638      	mov	r0, r7
  403406:	b002      	add	sp, #8
  403408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40340c:	2100      	movs	r1, #0
  40340e:	9100      	str	r1, [sp, #0]
  403410:	460b      	mov	r3, r1
  403412:	4652      	mov	r2, sl
  403414:	4620      	mov	r0, r4
  403416:	4c1c      	ldr	r4, [pc, #112]	; (403488 <prvSampleTimeNow+0xa4>)
  403418:	47a0      	blx	r4
				configASSERT( xResult );
  40341a:	b960      	cbnz	r0, 403436 <prvSampleTimeNow+0x52>
  40341c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403420:	b672      	cpsid	i
  403422:	f383 8811 	msr	BASEPRI, r3
  403426:	f3bf 8f6f 	isb	sy
  40342a:	f3bf 8f4f 	dsb	sy
  40342e:	b662      	cpsie	i
  403430:	e7fe      	b.n	403430 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403432:	4d16      	ldr	r5, [pc, #88]	; (40348c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403434:	4e16      	ldr	r6, [pc, #88]	; (403490 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403436:	682b      	ldr	r3, [r5, #0]
  403438:	681a      	ldr	r2, [r3, #0]
  40343a:	b1c2      	cbz	r2, 40346e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40343c:	68db      	ldr	r3, [r3, #12]
  40343e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403442:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403444:	f104 0904 	add.w	r9, r4, #4
  403448:	4648      	mov	r0, r9
  40344a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40344c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40344e:	4620      	mov	r0, r4
  403450:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403452:	69e3      	ldr	r3, [r4, #28]
  403454:	2b01      	cmp	r3, #1
  403456:	d1ee      	bne.n	403436 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403458:	69a3      	ldr	r3, [r4, #24]
  40345a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  40345c:	459a      	cmp	sl, r3
  40345e:	d2d5      	bcs.n	40340c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403460:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403462:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403464:	4649      	mov	r1, r9
  403466:	6828      	ldr	r0, [r5, #0]
  403468:	4b0a      	ldr	r3, [pc, #40]	; (403494 <prvSampleTimeNow+0xb0>)
  40346a:	4798      	blx	r3
  40346c:	e7e3      	b.n	403436 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40346e:	4a0a      	ldr	r2, [pc, #40]	; (403498 <prvSampleTimeNow+0xb4>)
  403470:	6810      	ldr	r0, [r2, #0]
  403472:	4906      	ldr	r1, [pc, #24]	; (40348c <prvSampleTimeNow+0xa8>)
  403474:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403476:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403478:	2301      	movs	r3, #1
  40347a:	f8c8 3000 	str.w	r3, [r8]
  40347e:	e7bf      	b.n	403400 <prvSampleTimeNow+0x1c>
  403480:	004029d5 	.word	0x004029d5
  403484:	20400db8 	.word	0x20400db8
  403488:	00403375 	.word	0x00403375
  40348c:	20400d88 	.word	0x20400d88
  403490:	004019dd 	.word	0x004019dd
  403494:	004019a9 	.word	0x004019a9
  403498:	20400d8c 	.word	0x20400d8c

0040349c <prvTimerTask>:
{
  40349c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4034a0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4034a2:	4e75      	ldr	r6, [pc, #468]	; (403678 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4034a4:	4f75      	ldr	r7, [pc, #468]	; (40367c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4034a6:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4036a4 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4034aa:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4036a8 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4034ae:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4034b0:	681a      	ldr	r2, [r3, #0]
  4034b2:	2a00      	cmp	r2, #0
  4034b4:	f000 80ce 	beq.w	403654 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4034b8:	68db      	ldr	r3, [r3, #12]
  4034ba:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4034bc:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4034be:	a804      	add	r0, sp, #16
  4034c0:	4b6f      	ldr	r3, [pc, #444]	; (403680 <prvTimerTask+0x1e4>)
  4034c2:	4798      	blx	r3
  4034c4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4034c6:	9b04      	ldr	r3, [sp, #16]
  4034c8:	2b00      	cmp	r3, #0
  4034ca:	d144      	bne.n	403556 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4034cc:	42a0      	cmp	r0, r4
  4034ce:	d212      	bcs.n	4034f6 <prvTimerTask+0x5a>
  4034d0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4034d2:	1b61      	subs	r1, r4, r5
  4034d4:	4b6b      	ldr	r3, [pc, #428]	; (403684 <prvTimerTask+0x1e8>)
  4034d6:	6818      	ldr	r0, [r3, #0]
  4034d8:	4b6b      	ldr	r3, [pc, #428]	; (403688 <prvTimerTask+0x1ec>)
  4034da:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4034dc:	4b6b      	ldr	r3, [pc, #428]	; (40368c <prvTimerTask+0x1f0>)
  4034de:	4798      	blx	r3
  4034e0:	2800      	cmp	r0, #0
  4034e2:	d13a      	bne.n	40355a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4034e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4034e8:	f8c9 3000 	str.w	r3, [r9]
  4034ec:	f3bf 8f4f 	dsb	sy
  4034f0:	f3bf 8f6f 	isb	sy
  4034f4:	e031      	b.n	40355a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4034f6:	4b65      	ldr	r3, [pc, #404]	; (40368c <prvTimerTask+0x1f0>)
  4034f8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4034fa:	6833      	ldr	r3, [r6, #0]
  4034fc:	68db      	ldr	r3, [r3, #12]
  4034fe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403502:	f10a 0004 	add.w	r0, sl, #4
  403506:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403508:	f8da 301c 	ldr.w	r3, [sl, #28]
  40350c:	2b01      	cmp	r3, #1
  40350e:	d004      	beq.n	40351a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403510:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403514:	4650      	mov	r0, sl
  403516:	4798      	blx	r3
  403518:	e01f      	b.n	40355a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40351a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40351e:	4623      	mov	r3, r4
  403520:	462a      	mov	r2, r5
  403522:	4421      	add	r1, r4
  403524:	4650      	mov	r0, sl
  403526:	4d5a      	ldr	r5, [pc, #360]	; (403690 <prvTimerTask+0x1f4>)
  403528:	47a8      	blx	r5
  40352a:	2801      	cmp	r0, #1
  40352c:	d1f0      	bne.n	403510 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40352e:	2100      	movs	r1, #0
  403530:	9100      	str	r1, [sp, #0]
  403532:	460b      	mov	r3, r1
  403534:	4622      	mov	r2, r4
  403536:	4650      	mov	r0, sl
  403538:	4c56      	ldr	r4, [pc, #344]	; (403694 <prvTimerTask+0x1f8>)
  40353a:	47a0      	blx	r4
			configASSERT( xResult );
  40353c:	2800      	cmp	r0, #0
  40353e:	d1e7      	bne.n	403510 <prvTimerTask+0x74>
  403540:	f04f 0380 	mov.w	r3, #128	; 0x80
  403544:	b672      	cpsid	i
  403546:	f383 8811 	msr	BASEPRI, r3
  40354a:	f3bf 8f6f 	isb	sy
  40354e:	f3bf 8f4f 	dsb	sy
  403552:	b662      	cpsie	i
  403554:	e7fe      	b.n	403554 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403556:	4b4d      	ldr	r3, [pc, #308]	; (40368c <prvTimerTask+0x1f0>)
  403558:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40355a:	4d4a      	ldr	r5, [pc, #296]	; (403684 <prvTimerTask+0x1e8>)
  40355c:	4c4e      	ldr	r4, [pc, #312]	; (403698 <prvTimerTask+0x1fc>)
  40355e:	e006      	b.n	40356e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403560:	9907      	ldr	r1, [sp, #28]
  403562:	9806      	ldr	r0, [sp, #24]
  403564:	9b05      	ldr	r3, [sp, #20]
  403566:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403568:	9b04      	ldr	r3, [sp, #16]
  40356a:	2b00      	cmp	r3, #0
  40356c:	da09      	bge.n	403582 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40356e:	2300      	movs	r3, #0
  403570:	461a      	mov	r2, r3
  403572:	a904      	add	r1, sp, #16
  403574:	6828      	ldr	r0, [r5, #0]
  403576:	47a0      	blx	r4
  403578:	2800      	cmp	r0, #0
  40357a:	d098      	beq.n	4034ae <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40357c:	9b04      	ldr	r3, [sp, #16]
  40357e:	2b00      	cmp	r3, #0
  403580:	dbee      	blt.n	403560 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403582:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403586:	f8da 3014 	ldr.w	r3, [sl, #20]
  40358a:	b113      	cbz	r3, 403592 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40358c:	f10a 0004 	add.w	r0, sl, #4
  403590:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403592:	a803      	add	r0, sp, #12
  403594:	4b3a      	ldr	r3, [pc, #232]	; (403680 <prvTimerTask+0x1e4>)
  403596:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403598:	9b04      	ldr	r3, [sp, #16]
  40359a:	2b09      	cmp	r3, #9
  40359c:	d8e7      	bhi.n	40356e <prvTimerTask+0xd2>
  40359e:	a201      	add	r2, pc, #4	; (adr r2, 4035a4 <prvTimerTask+0x108>)
  4035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4035a4:	004035cd 	.word	0x004035cd
  4035a8:	004035cd 	.word	0x004035cd
  4035ac:	004035cd 	.word	0x004035cd
  4035b0:	0040356f 	.word	0x0040356f
  4035b4:	00403621 	.word	0x00403621
  4035b8:	0040364d 	.word	0x0040364d
  4035bc:	004035cd 	.word	0x004035cd
  4035c0:	004035cd 	.word	0x004035cd
  4035c4:	0040356f 	.word	0x0040356f
  4035c8:	00403621 	.word	0x00403621
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4035cc:	9c05      	ldr	r4, [sp, #20]
  4035ce:	f8da 1018 	ldr.w	r1, [sl, #24]
  4035d2:	4623      	mov	r3, r4
  4035d4:	4602      	mov	r2, r0
  4035d6:	4421      	add	r1, r4
  4035d8:	4650      	mov	r0, sl
  4035da:	4c2d      	ldr	r4, [pc, #180]	; (403690 <prvTimerTask+0x1f4>)
  4035dc:	47a0      	blx	r4
  4035de:	2801      	cmp	r0, #1
  4035e0:	d1bc      	bne.n	40355c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4035e2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4035e6:	4650      	mov	r0, sl
  4035e8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4035ea:	f8da 301c 	ldr.w	r3, [sl, #28]
  4035ee:	2b01      	cmp	r3, #1
  4035f0:	d1b4      	bne.n	40355c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4035f2:	f8da 2018 	ldr.w	r2, [sl, #24]
  4035f6:	2100      	movs	r1, #0
  4035f8:	9100      	str	r1, [sp, #0]
  4035fa:	460b      	mov	r3, r1
  4035fc:	9805      	ldr	r0, [sp, #20]
  4035fe:	4402      	add	r2, r0
  403600:	4650      	mov	r0, sl
  403602:	4c24      	ldr	r4, [pc, #144]	; (403694 <prvTimerTask+0x1f8>)
  403604:	47a0      	blx	r4
							configASSERT( xResult );
  403606:	2800      	cmp	r0, #0
  403608:	d1a8      	bne.n	40355c <prvTimerTask+0xc0>
  40360a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40360e:	b672      	cpsid	i
  403610:	f383 8811 	msr	BASEPRI, r3
  403614:	f3bf 8f6f 	isb	sy
  403618:	f3bf 8f4f 	dsb	sy
  40361c:	b662      	cpsie	i
  40361e:	e7fe      	b.n	40361e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403620:	9905      	ldr	r1, [sp, #20]
  403622:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403626:	b131      	cbz	r1, 403636 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403628:	4603      	mov	r3, r0
  40362a:	4602      	mov	r2, r0
  40362c:	4401      	add	r1, r0
  40362e:	4650      	mov	r0, sl
  403630:	4c17      	ldr	r4, [pc, #92]	; (403690 <prvTimerTask+0x1f4>)
  403632:	47a0      	blx	r4
  403634:	e792      	b.n	40355c <prvTimerTask+0xc0>
  403636:	f04f 0380 	mov.w	r3, #128	; 0x80
  40363a:	b672      	cpsid	i
  40363c:	f383 8811 	msr	BASEPRI, r3
  403640:	f3bf 8f6f 	isb	sy
  403644:	f3bf 8f4f 	dsb	sy
  403648:	b662      	cpsie	i
  40364a:	e7fe      	b.n	40364a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  40364c:	4650      	mov	r0, sl
  40364e:	4b13      	ldr	r3, [pc, #76]	; (40369c <prvTimerTask+0x200>)
  403650:	4798      	blx	r3
  403652:	e783      	b.n	40355c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403654:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403656:	a804      	add	r0, sp, #16
  403658:	4b09      	ldr	r3, [pc, #36]	; (403680 <prvTimerTask+0x1e4>)
  40365a:	4798      	blx	r3
  40365c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40365e:	9b04      	ldr	r3, [sp, #16]
  403660:	2b00      	cmp	r3, #0
  403662:	f47f af78 	bne.w	403556 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403666:	4b0e      	ldr	r3, [pc, #56]	; (4036a0 <prvTimerTask+0x204>)
  403668:	681b      	ldr	r3, [r3, #0]
  40366a:	681a      	ldr	r2, [r3, #0]
  40366c:	fab2 f282 	clz	r2, r2
  403670:	0952      	lsrs	r2, r2, #5
  403672:	2400      	movs	r4, #0
  403674:	e72d      	b.n	4034d2 <prvTimerTask+0x36>
  403676:	bf00      	nop
  403678:	20400d88 	.word	0x20400d88
  40367c:	004029c5 	.word	0x004029c5
  403680:	004033e5 	.word	0x004033e5
  403684:	20400dbc 	.word	0x20400dbc
  403688:	00402625 	.word	0x00402625
  40368c:	00402b2d 	.word	0x00402b2d
  403690:	0040324d 	.word	0x0040324d
  403694:	00403375 	.word	0x00403375
  403698:	00402421 	.word	0x00402421
  40369c:	00401d4d 	.word	0x00401d4d
  4036a0:	20400d8c 	.word	0x20400d8c
  4036a4:	e000ed04 	.word	0xe000ed04
  4036a8:	004019dd 	.word	0x004019dd

004036ac <but_callback1>:
	pio_set(LED2_PIO, LED2_MASK);
	pio_set(LED3_PIO, LED3_MASK);
}

void but_callback1(void){
	flag_tc_button = 1;
  4036ac:	2201      	movs	r2, #1
  4036ae:	4b03      	ldr	r3, [pc, #12]	; (4036bc <but_callback1+0x10>)
  4036b0:	601a      	str	r2, [r3, #0]
	flag_tc_count = 0;
  4036b2:	2200      	movs	r2, #0
  4036b4:	4b02      	ldr	r3, [pc, #8]	; (4036c0 <but_callback1+0x14>)
  4036b6:	601a      	str	r2, [r3, #0]
  4036b8:	4770      	bx	lr
  4036ba:	bf00      	nop
  4036bc:	20400dc0 	.word	0x20400dc0
  4036c0:	20400e48 	.word	0x20400e48

004036c4 <RTT_init>:
static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4036c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036c8:	ed2d 8b02 	vpush	{d8}
  4036cc:	b082      	sub	sp, #8
  4036ce:	eeb0 8a40 	vmov.f32	s16, s0
  4036d2:	4680      	mov	r8, r0
  4036d4:	460f      	mov	r7, r1
	rtt_sel_source(RTT, false);
  4036d6:	4c20      	ldr	r4, [pc, #128]	; (403758 <RTT_init+0x94>)
  4036d8:	2100      	movs	r1, #0
  4036da:	4620      	mov	r0, r4
  4036dc:	4b1f      	ldr	r3, [pc, #124]	; (40375c <RTT_init+0x98>)
  4036de:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  4036e0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 403760 <RTT_init+0x9c>
  4036e4:	eec7 7a08 	vdiv.f32	s15, s14, s16
  4036e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4036ec:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  4036f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  4036f4:	4620      	mov	r0, r4
  4036f6:	4b1b      	ldr	r3, [pc, #108]	; (403764 <RTT_init+0xa0>)
  4036f8:	4798      	blx	r3
	if (rttIRQSource & RTT_MR_ALMIEN) {
  4036fa:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  4036fe:	d116      	bne.n	40372e <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403700:	4b19      	ldr	r3, [pc, #100]	; (403768 <RTT_init+0xa4>)
  403702:	2208      	movs	r2, #8
  403704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403708:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40370c:	2180      	movs	r1, #128	; 0x80
  40370e:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403712:	601a      	str	r2, [r3, #0]
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  403714:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  403718:	d119      	bne.n	40374e <RTT_init+0x8a>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  40371a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  40371e:	480e      	ldr	r0, [pc, #56]	; (403758 <RTT_init+0x94>)
  403720:	4b12      	ldr	r3, [pc, #72]	; (40376c <RTT_init+0xa8>)
  403722:	4798      	blx	r3
}
  403724:	b002      	add	sp, #8
  403726:	ecbd 8b02 	vpop	{d8}
  40372a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  40372e:	4620      	mov	r0, r4
  403730:	4b0f      	ldr	r3, [pc, #60]	; (403770 <RTT_init+0xac>)
  403732:	4798      	blx	r3
  403734:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  403736:	4e08      	ldr	r6, [pc, #32]	; (403758 <RTT_init+0x94>)
  403738:	4d0d      	ldr	r5, [pc, #52]	; (403770 <RTT_init+0xac>)
  40373a:	4630      	mov	r0, r6
  40373c:	47a8      	blx	r5
  40373e:	4284      	cmp	r4, r0
  403740:	d0fb      	beq.n	40373a <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  403742:	eb04 0108 	add.w	r1, r4, r8
  403746:	4804      	ldr	r0, [pc, #16]	; (403758 <RTT_init+0x94>)
  403748:	4b0a      	ldr	r3, [pc, #40]	; (403774 <RTT_init+0xb0>)
  40374a:	4798      	blx	r3
  40374c:	e7d8      	b.n	403700 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  40374e:	4639      	mov	r1, r7
  403750:	4801      	ldr	r0, [pc, #4]	; (403758 <RTT_init+0x94>)
  403752:	4b09      	ldr	r3, [pc, #36]	; (403778 <RTT_init+0xb4>)
  403754:	4798      	blx	r3
  403756:	e7e5      	b.n	403724 <RTT_init+0x60>
  403758:	400e1830 	.word	0x400e1830
  40375c:	00400385 	.word	0x00400385
  403760:	47000000 	.word	0x47000000
  403764:	00400371 	.word	0x00400371
  403768:	e000e100 	.word	0xe000e100
  40376c:	004003c5 	.word	0x004003c5
  403770:	004003d9 	.word	0x004003d9
  403774:	004003f1 	.word	0x004003f1
  403778:	004003b1 	.word	0x004003b1

0040377c <task_sensor>:
static void task_sensor(void *pvParameters){
  40377c:	b508      	push	{r3, lr}
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  40377e:	2502      	movs	r5, #2
  403780:	4c01      	ldr	r4, [pc, #4]	; (403788 <task_sensor+0xc>)
  403782:	4628      	mov	r0, r5
  403784:	47a0      	blx	r4
  403786:	e7fc      	b.n	403782 <task_sensor+0x6>
  403788:	00401319 	.word	0x00401319

0040378c <task_oled>:
static void task_oled(void *pvParameters){
  40378c:	b580      	push	{r7, lr}
  40378e:	b086      	sub	sp, #24
	gfx_mono_ssd1306_init();
  403790:	4b23      	ldr	r3, [pc, #140]	; (403820 <task_oled+0x94>)
  403792:	4798      	blx	r3
	char char_minutes[3] = "";
  403794:	4b23      	ldr	r3, [pc, #140]	; (403824 <task_oled+0x98>)
  403796:	781a      	ldrb	r2, [r3, #0]
  403798:	f88d 2014 	strb.w	r2, [sp, #20]
  40379c:	2300      	movs	r3, #0
  40379e:	f8ad 3015 	strh.w	r3, [sp, #21]
	char char_seconds[3] = "";
  4037a2:	f88d 2010 	strb.w	r2, [sp, #16]
  4037a6:	f8ad 3011 	strh.w	r3, [sp, #17]
	char char_hours[12] = "";
  4037aa:	9301      	str	r3, [sp, #4]
  4037ac:	9302      	str	r3, [sp, #8]
  4037ae:	9303      	str	r3, [sp, #12]
		rtc_get_time(RTC, &global_hours, &global_minutes, &global_seconds);
  4037b0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 403850 <task_oled+0xc4>
  4037b4:	4f1c      	ldr	r7, [pc, #112]	; (403828 <task_oled+0x9c>)
  4037b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 403854 <task_oled+0xc8>
  4037ba:	4c1c      	ldr	r4, [pc, #112]	; (40382c <task_oled+0xa0>)
  4037bc:	4643      	mov	r3, r8
  4037be:	463a      	mov	r2, r7
  4037c0:	4621      	mov	r1, r4
  4037c2:	4648      	mov	r0, r9
  4037c4:	4d1a      	ldr	r5, [pc, #104]	; (403830 <task_oled+0xa4>)
  4037c6:	47a8      	blx	r5
		sprintf(char_minutes, "%d", global_minutes);
  4037c8:	683a      	ldr	r2, [r7, #0]
  4037ca:	4e1a      	ldr	r6, [pc, #104]	; (403834 <task_oled+0xa8>)
  4037cc:	4631      	mov	r1, r6
  4037ce:	a805      	add	r0, sp, #20
  4037d0:	4d19      	ldr	r5, [pc, #100]	; (403838 <task_oled+0xac>)
  4037d2:	47a8      	blx	r5
		sprintf(char_seconds, "%d", global_seconds);
  4037d4:	f8d8 2000 	ldr.w	r2, [r8]
  4037d8:	4631      	mov	r1, r6
  4037da:	a804      	add	r0, sp, #16
  4037dc:	47a8      	blx	r5
		sprintf(char_hours, "%d", global_hours);
  4037de:	6822      	ldr	r2, [r4, #0]
  4037e0:	ac01      	add	r4, sp, #4
  4037e2:	4631      	mov	r1, r6
  4037e4:	4620      	mov	r0, r4
  4037e6:	47a8      	blx	r5
		strcat(char_hours, ":");
  4037e8:	4620      	mov	r0, r4
  4037ea:	f8df a06c 	ldr.w	sl, [pc, #108]	; 403858 <task_oled+0xcc>
  4037ee:	47d0      	blx	sl
  4037f0:	4b12      	ldr	r3, [pc, #72]	; (40383c <task_oled+0xb0>)
  4037f2:	881e      	ldrh	r6, [r3, #0]
  4037f4:	5226      	strh	r6, [r4, r0]
		strcat(char_hours, char_minutes);
  4037f6:	a905      	add	r1, sp, #20
  4037f8:	4620      	mov	r0, r4
  4037fa:	4d11      	ldr	r5, [pc, #68]	; (403840 <task_oled+0xb4>)
  4037fc:	47a8      	blx	r5
		strcat(char_hours, ":");
  4037fe:	4620      	mov	r0, r4
  403800:	47d0      	blx	sl
  403802:	5226      	strh	r6, [r4, r0]
		strcat(char_hours, char_seconds);
  403804:	a904      	add	r1, sp, #16
  403806:	4620      	mov	r0, r4
  403808:	47a8      	blx	r5
		gfx_mono_draw_string(char_hours, 0, 0, &sysfont);
  40380a:	4b0e      	ldr	r3, [pc, #56]	; (403844 <task_oled+0xb8>)
  40380c:	2200      	movs	r2, #0
  40380e:	4611      	mov	r1, r2
  403810:	4620      	mov	r0, r4
  403812:	4c0d      	ldr	r4, [pc, #52]	; (403848 <task_oled+0xbc>)
  403814:	47a0      	blx	r4
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403816:	2002      	movs	r0, #2
  403818:	4b0c      	ldr	r3, [pc, #48]	; (40384c <task_oled+0xc0>)
  40381a:	4798      	blx	r3
  40381c:	e7cd      	b.n	4037ba <task_oled+0x2e>
  40381e:	bf00      	nop
  403820:	004008a1 	.word	0x004008a1
  403824:	0040b308 	.word	0x0040b308
  403828:	20400e4c 	.word	0x20400e4c
  40382c:	20400e50 	.word	0x20400e50
  403830:	004001c7 	.word	0x004001c7
  403834:	0040b43c 	.word	0x0040b43c
  403838:	00404be1 	.word	0x00404be1
  40383c:	0040b440 	.word	0x0040b440
  403840:	00404c2d 	.word	0x00404c2d
  403844:	2040000c 	.word	0x2040000c
  403848:	00400809 	.word	0x00400809
  40384c:	00401319 	.word	0x00401319
  403850:	20400e68 	.word	0x20400e68
  403854:	400e1860 	.word	0x400e1860
  403858:	00404d41 	.word	0x00404d41

0040385c <usart_serial_getchar>:
>>>>>>> Stashed changes
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
>>>>>>> Stashed changes
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
<<<<<<< Updated upstream
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
=======
<<<<<<< Updated upstream
  402f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f3e:	b083      	sub	sp, #12
  402f40:	4605      	mov	r5, r0
  402f42:	460c      	mov	r4, r1
	uint32_t val = 0;
  402f44:	2300      	movs	r3, #0
  402f46:	9301      	str	r3, [sp, #4]
=======
  40385c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40385e:	b083      	sub	sp, #12
  403860:	4605      	mov	r5, r0
  403862:	460c      	mov	r4, r1
	uint32_t val = 0;
  403864:	2300      	movs	r3, #0
  403866:	9301      	str	r3, [sp, #4]
>>>>>>> Stashed changes
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
<<<<<<< Updated upstream
  402f48:	4b2a      	ldr	r3, [pc, #168]	; (402ff4 <usart_serial_getchar+0xb8>)
  402f4a:	4298      	cmp	r0, r3
  402f4c:	d013      	beq.n	402f76 <usart_serial_getchar+0x3a>
=======
  403868:	4b2a      	ldr	r3, [pc, #168]	; (403914 <usart_serial_getchar+0xb8>)
  40386a:	4298      	cmp	r0, r3
  40386c:	d013      	beq.n	403896 <usart_serial_getchar+0x3a>
>>>>>>> Stashed changes
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
<<<<<<< Updated upstream
  402f4e:	4b2a      	ldr	r3, [pc, #168]	; (402ff8 <usart_serial_getchar+0xbc>)
  402f50:	4298      	cmp	r0, r3
  402f52:	d018      	beq.n	402f86 <usart_serial_getchar+0x4a>
=======
  40386e:	4b2a      	ldr	r3, [pc, #168]	; (403918 <usart_serial_getchar+0xbc>)
  403870:	4298      	cmp	r0, r3
  403872:	d018      	beq.n	4038a6 <usart_serial_getchar+0x4a>
>>>>>>> Stashed changes
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
<<<<<<< Updated upstream
  402f54:	4b29      	ldr	r3, [pc, #164]	; (402ffc <usart_serial_getchar+0xc0>)
  402f56:	4298      	cmp	r0, r3
  402f58:	d01d      	beq.n	402f96 <usart_serial_getchar+0x5a>
=======
  403874:	4b29      	ldr	r3, [pc, #164]	; (40391c <usart_serial_getchar+0xc0>)
  403876:	4298      	cmp	r0, r3
  403878:	d01d      	beq.n	4038b6 <usart_serial_getchar+0x5a>
>>>>>>> Stashed changes
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
<<<<<<< Updated upstream
  402f5a:	4b29      	ldr	r3, [pc, #164]	; (403000 <usart_serial_getchar+0xc4>)
  402f5c:	429d      	cmp	r5, r3
  402f5e:	d022      	beq.n	402fa6 <usart_serial_getchar+0x6a>
=======
  40387a:	4b29      	ldr	r3, [pc, #164]	; (403920 <usart_serial_getchar+0xc4>)
  40387c:	429d      	cmp	r5, r3
  40387e:	d022      	beq.n	4038c6 <usart_serial_getchar+0x6a>
>>>>>>> Stashed changes
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
<<<<<<< Updated upstream
  402f60:	4b28      	ldr	r3, [pc, #160]	; (403004 <usart_serial_getchar+0xc8>)
  402f62:	429d      	cmp	r5, r3
  402f64:	d027      	beq.n	402fb6 <usart_serial_getchar+0x7a>
=======
  403880:	4b28      	ldr	r3, [pc, #160]	; (403924 <usart_serial_getchar+0xc8>)
  403882:	429d      	cmp	r5, r3
  403884:	d027      	beq.n	4038d6 <usart_serial_getchar+0x7a>
>>>>>>> Stashed changes
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
<<<<<<< Updated upstream
  402f66:	4b28      	ldr	r3, [pc, #160]	; (403008 <usart_serial_getchar+0xcc>)
  402f68:	429d      	cmp	r5, r3
  402f6a:	d02e      	beq.n	402fca <usart_serial_getchar+0x8e>
=======
  403886:	4b28      	ldr	r3, [pc, #160]	; (403928 <usart_serial_getchar+0xcc>)
  403888:	429d      	cmp	r5, r3
  40388a:	d02e      	beq.n	4038ea <usart_serial_getchar+0x8e>
>>>>>>> Stashed changes
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
<<<<<<< Updated upstream
  402f6c:	4b27      	ldr	r3, [pc, #156]	; (40300c <usart_serial_getchar+0xd0>)
  402f6e:	429d      	cmp	r5, r3
  402f70:	d035      	beq.n	402fde <usart_serial_getchar+0xa2>
=======
  40388c:	4b27      	ldr	r3, [pc, #156]	; (40392c <usart_serial_getchar+0xd0>)
  40388e:	429d      	cmp	r5, r3
  403890:	d035      	beq.n	4038fe <usart_serial_getchar+0xa2>
>>>>>>> Stashed changes
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
<<<<<<< Updated upstream
  402f72:	b003      	add	sp, #12
  402f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402f76:	461f      	mov	r7, r3
  402f78:	4e25      	ldr	r6, [pc, #148]	; (403010 <usart_serial_getchar+0xd4>)
  402f7a:	4621      	mov	r1, r4
  402f7c:	4638      	mov	r0, r7
  402f7e:	47b0      	blx	r6
  402f80:	2800      	cmp	r0, #0
  402f82:	d1fa      	bne.n	402f7a <usart_serial_getchar+0x3e>
  402f84:	e7e9      	b.n	402f5a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402f86:	461f      	mov	r7, r3
  402f88:	4e21      	ldr	r6, [pc, #132]	; (403010 <usart_serial_getchar+0xd4>)
  402f8a:	4621      	mov	r1, r4
  402f8c:	4638      	mov	r0, r7
  402f8e:	47b0      	blx	r6
  402f90:	2800      	cmp	r0, #0
  402f92:	d1fa      	bne.n	402f8a <usart_serial_getchar+0x4e>
  402f94:	e7e4      	b.n	402f60 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402f96:	461f      	mov	r7, r3
  402f98:	4e1d      	ldr	r6, [pc, #116]	; (403010 <usart_serial_getchar+0xd4>)
  402f9a:	4621      	mov	r1, r4
  402f9c:	4638      	mov	r0, r7
  402f9e:	47b0      	blx	r6
  402fa0:	2800      	cmp	r0, #0
  402fa2:	d1fa      	bne.n	402f9a <usart_serial_getchar+0x5e>
  402fa4:	e7df      	b.n	402f66 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402fa6:	461f      	mov	r7, r3
  402fa8:	4e19      	ldr	r6, [pc, #100]	; (403010 <usart_serial_getchar+0xd4>)
  402faa:	4621      	mov	r1, r4
  402fac:	4638      	mov	r0, r7
  402fae:	47b0      	blx	r6
  402fb0:	2800      	cmp	r0, #0
  402fb2:	d1fa      	bne.n	402faa <usart_serial_getchar+0x6e>
  402fb4:	e7da      	b.n	402f6c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402fb6:	461e      	mov	r6, r3
  402fb8:	4d16      	ldr	r5, [pc, #88]	; (403014 <usart_serial_getchar+0xd8>)
  402fba:	a901      	add	r1, sp, #4
  402fbc:	4630      	mov	r0, r6
  402fbe:	47a8      	blx	r5
  402fc0:	2800      	cmp	r0, #0
  402fc2:	d1fa      	bne.n	402fba <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402fc4:	9b01      	ldr	r3, [sp, #4]
  402fc6:	7023      	strb	r3, [r4, #0]
  402fc8:	e7d3      	b.n	402f72 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402fca:	461e      	mov	r6, r3
  402fcc:	4d11      	ldr	r5, [pc, #68]	; (403014 <usart_serial_getchar+0xd8>)
  402fce:	a901      	add	r1, sp, #4
  402fd0:	4630      	mov	r0, r6
  402fd2:	47a8      	blx	r5
  402fd4:	2800      	cmp	r0, #0
  402fd6:	d1fa      	bne.n	402fce <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402fd8:	9b01      	ldr	r3, [sp, #4]
  402fda:	7023      	strb	r3, [r4, #0]
  402fdc:	e7c9      	b.n	402f72 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402fde:	461e      	mov	r6, r3
  402fe0:	4d0c      	ldr	r5, [pc, #48]	; (403014 <usart_serial_getchar+0xd8>)
  402fe2:	a901      	add	r1, sp, #4
  402fe4:	4630      	mov	r0, r6
  402fe6:	47a8      	blx	r5
  402fe8:	2800      	cmp	r0, #0
  402fea:	d1fa      	bne.n	402fe2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402fec:	9b01      	ldr	r3, [sp, #4]
  402fee:	7023      	strb	r3, [r4, #0]
}
  402ff0:	e7bf      	b.n	402f72 <usart_serial_getchar+0x36>
  402ff2:	bf00      	nop
  402ff4:	400e0800 	.word	0x400e0800
  402ff8:	400e0a00 	.word	0x400e0a00
  402ffc:	400e1a00 	.word	0x400e1a00
  403000:	400e1c00 	.word	0x400e1c00
  403004:	40024000 	.word	0x40024000
  403008:	40028000 	.word	0x40028000
  40300c:	4002c000 	.word	0x4002c000
  403010:	00400d47 	.word	0x00400d47
  403014:	00400e53 	.word	0x00400e53
>>>>>>> Stashed changes

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

<<<<<<< Updated upstream
00400220 <rtc_set_time>:
=======
int main(void) {
  403234:	b500      	push	{lr}
  403236:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  403238:	4b53      	ldr	r3, [pc, #332]	; (403388 <main+0x154>)
  40323a:	4798      	blx	r3
	board_init();
  40323c:	4b53      	ldr	r3, [pc, #332]	; (40338c <main+0x158>)
  40323e:	4798      	blx	r3
	led_init();
  403240:	4b53      	ldr	r3, [pc, #332]	; (403390 <main+0x15c>)
  403242:	4798      	blx	r3
=======
  403892:	b003      	add	sp, #12
  403894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403896:	461f      	mov	r7, r3
  403898:	4e25      	ldr	r6, [pc, #148]	; (403930 <usart_serial_getchar+0xd4>)
  40389a:	4621      	mov	r1, r4
  40389c:	4638      	mov	r0, r7
  40389e:	47b0      	blx	r6
  4038a0:	2800      	cmp	r0, #0
  4038a2:	d1fa      	bne.n	40389a <usart_serial_getchar+0x3e>
  4038a4:	e7e9      	b.n	40387a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4038a6:	461f      	mov	r7, r3
  4038a8:	4e21      	ldr	r6, [pc, #132]	; (403930 <usart_serial_getchar+0xd4>)
  4038aa:	4621      	mov	r1, r4
  4038ac:	4638      	mov	r0, r7
  4038ae:	47b0      	blx	r6
  4038b0:	2800      	cmp	r0, #0
  4038b2:	d1fa      	bne.n	4038aa <usart_serial_getchar+0x4e>
  4038b4:	e7e4      	b.n	403880 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4038b6:	461f      	mov	r7, r3
  4038b8:	4e1d      	ldr	r6, [pc, #116]	; (403930 <usart_serial_getchar+0xd4>)
  4038ba:	4621      	mov	r1, r4
  4038bc:	4638      	mov	r0, r7
  4038be:	47b0      	blx	r6
  4038c0:	2800      	cmp	r0, #0
  4038c2:	d1fa      	bne.n	4038ba <usart_serial_getchar+0x5e>
  4038c4:	e7df      	b.n	403886 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4038c6:	461f      	mov	r7, r3
  4038c8:	4e19      	ldr	r6, [pc, #100]	; (403930 <usart_serial_getchar+0xd4>)
  4038ca:	4621      	mov	r1, r4
  4038cc:	4638      	mov	r0, r7
  4038ce:	47b0      	blx	r6
  4038d0:	2800      	cmp	r0, #0
  4038d2:	d1fa      	bne.n	4038ca <usart_serial_getchar+0x6e>
  4038d4:	e7da      	b.n	40388c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4038d6:	461e      	mov	r6, r3
  4038d8:	4d16      	ldr	r5, [pc, #88]	; (403934 <usart_serial_getchar+0xd8>)
  4038da:	a901      	add	r1, sp, #4
  4038dc:	4630      	mov	r0, r6
  4038de:	47a8      	blx	r5
  4038e0:	2800      	cmp	r0, #0
  4038e2:	d1fa      	bne.n	4038da <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4038e4:	9b01      	ldr	r3, [sp, #4]
  4038e6:	7023      	strb	r3, [r4, #0]
  4038e8:	e7d3      	b.n	403892 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4038ea:	461e      	mov	r6, r3
  4038ec:	4d11      	ldr	r5, [pc, #68]	; (403934 <usart_serial_getchar+0xd8>)
  4038ee:	a901      	add	r1, sp, #4
  4038f0:	4630      	mov	r0, r6
  4038f2:	47a8      	blx	r5
  4038f4:	2800      	cmp	r0, #0
  4038f6:	d1fa      	bne.n	4038ee <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4038f8:	9b01      	ldr	r3, [sp, #4]
  4038fa:	7023      	strb	r3, [r4, #0]
  4038fc:	e7c9      	b.n	403892 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4038fe:	461e      	mov	r6, r3
  403900:	4d0c      	ldr	r5, [pc, #48]	; (403934 <usart_serial_getchar+0xd8>)
  403902:	a901      	add	r1, sp, #4
  403904:	4630      	mov	r0, r6
  403906:	47a8      	blx	r5
  403908:	2800      	cmp	r0, #0
  40390a:	d1fa      	bne.n	403902 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40390c:	9b01      	ldr	r3, [sp, #4]
  40390e:	7023      	strb	r3, [r4, #0]
}
  403910:	e7bf      	b.n	403892 <usart_serial_getchar+0x36>
  403912:	bf00      	nop
  403914:	400e0800 	.word	0x400e0800
  403918:	400e0a00 	.word	0x400e0a00
  40391c:	400e1a00 	.word	0x400e1a00
  403920:	400e1c00 	.word	0x400e1c00
  403924:	40024000 	.word	0x40024000
  403928:	40028000 	.word	0x40028000
  40392c:	4002c000 	.word	0x4002c000
  403930:	0040159f 	.word	0x0040159f
  403934:	004016ab 	.word	0x004016ab

00403938 <usart_serial_putchar>:
{
  403938:	b570      	push	{r4, r5, r6, lr}
  40393a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40393c:	4b2a      	ldr	r3, [pc, #168]	; (4039e8 <usart_serial_putchar+0xb0>)
  40393e:	4298      	cmp	r0, r3
  403940:	d013      	beq.n	40396a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403942:	4b2a      	ldr	r3, [pc, #168]	; (4039ec <usart_serial_putchar+0xb4>)
  403944:	4298      	cmp	r0, r3
  403946:	d019      	beq.n	40397c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403948:	4b29      	ldr	r3, [pc, #164]	; (4039f0 <usart_serial_putchar+0xb8>)
  40394a:	4298      	cmp	r0, r3
  40394c:	d01f      	beq.n	40398e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40394e:	4b29      	ldr	r3, [pc, #164]	; (4039f4 <usart_serial_putchar+0xbc>)
  403950:	4298      	cmp	r0, r3
  403952:	d025      	beq.n	4039a0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403954:	4b28      	ldr	r3, [pc, #160]	; (4039f8 <usart_serial_putchar+0xc0>)
  403956:	4298      	cmp	r0, r3
  403958:	d02b      	beq.n	4039b2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40395a:	4b28      	ldr	r3, [pc, #160]	; (4039fc <usart_serial_putchar+0xc4>)
  40395c:	4298      	cmp	r0, r3
  40395e:	d031      	beq.n	4039c4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403960:	4b27      	ldr	r3, [pc, #156]	; (403a00 <usart_serial_putchar+0xc8>)
  403962:	4298      	cmp	r0, r3
  403964:	d037      	beq.n	4039d6 <usart_serial_putchar+0x9e>
	return 0;
  403966:	2000      	movs	r0, #0
}
  403968:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40396a:	461e      	mov	r6, r3
  40396c:	4d25      	ldr	r5, [pc, #148]	; (403a04 <usart_serial_putchar+0xcc>)
  40396e:	4621      	mov	r1, r4
  403970:	4630      	mov	r0, r6
  403972:	47a8      	blx	r5
  403974:	2800      	cmp	r0, #0
  403976:	d1fa      	bne.n	40396e <usart_serial_putchar+0x36>
		return 1;
  403978:	2001      	movs	r0, #1
  40397a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40397c:	461e      	mov	r6, r3
  40397e:	4d21      	ldr	r5, [pc, #132]	; (403a04 <usart_serial_putchar+0xcc>)
  403980:	4621      	mov	r1, r4
  403982:	4630      	mov	r0, r6
  403984:	47a8      	blx	r5
  403986:	2800      	cmp	r0, #0
  403988:	d1fa      	bne.n	403980 <usart_serial_putchar+0x48>
		return 1;
  40398a:	2001      	movs	r0, #1
  40398c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40398e:	461e      	mov	r6, r3
  403990:	4d1c      	ldr	r5, [pc, #112]	; (403a04 <usart_serial_putchar+0xcc>)
  403992:	4621      	mov	r1, r4
  403994:	4630      	mov	r0, r6
  403996:	47a8      	blx	r5
  403998:	2800      	cmp	r0, #0
  40399a:	d1fa      	bne.n	403992 <usart_serial_putchar+0x5a>
		return 1;
  40399c:	2001      	movs	r0, #1
  40399e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4039a0:	461e      	mov	r6, r3
  4039a2:	4d18      	ldr	r5, [pc, #96]	; (403a04 <usart_serial_putchar+0xcc>)
  4039a4:	4621      	mov	r1, r4
  4039a6:	4630      	mov	r0, r6
  4039a8:	47a8      	blx	r5
  4039aa:	2800      	cmp	r0, #0
  4039ac:	d1fa      	bne.n	4039a4 <usart_serial_putchar+0x6c>
		return 1;
  4039ae:	2001      	movs	r0, #1
  4039b0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4039b2:	461e      	mov	r6, r3
  4039b4:	4d14      	ldr	r5, [pc, #80]	; (403a08 <usart_serial_putchar+0xd0>)
  4039b6:	4621      	mov	r1, r4
  4039b8:	4630      	mov	r0, r6
  4039ba:	47a8      	blx	r5
  4039bc:	2800      	cmp	r0, #0
  4039be:	d1fa      	bne.n	4039b6 <usart_serial_putchar+0x7e>
		return 1;
  4039c0:	2001      	movs	r0, #1
  4039c2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4039c4:	461e      	mov	r6, r3
  4039c6:	4d10      	ldr	r5, [pc, #64]	; (403a08 <usart_serial_putchar+0xd0>)
  4039c8:	4621      	mov	r1, r4
  4039ca:	4630      	mov	r0, r6
  4039cc:	47a8      	blx	r5
  4039ce:	2800      	cmp	r0, #0
  4039d0:	d1fa      	bne.n	4039c8 <usart_serial_putchar+0x90>
		return 1;
  4039d2:	2001      	movs	r0, #1
  4039d4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4039d6:	461e      	mov	r6, r3
  4039d8:	4d0b      	ldr	r5, [pc, #44]	; (403a08 <usart_serial_putchar+0xd0>)
  4039da:	4621      	mov	r1, r4
  4039dc:	4630      	mov	r0, r6
  4039de:	47a8      	blx	r5
  4039e0:	2800      	cmp	r0, #0
  4039e2:	d1fa      	bne.n	4039da <usart_serial_putchar+0xa2>
		return 1;
  4039e4:	2001      	movs	r0, #1
  4039e6:	bd70      	pop	{r4, r5, r6, pc}
  4039e8:	400e0800 	.word	0x400e0800
  4039ec:	400e0a00 	.word	0x400e0a00
  4039f0:	400e1a00 	.word	0x400e1a00
  4039f4:	400e1c00 	.word	0x400e1c00
  4039f8:	40024000 	.word	0x40024000
  4039fc:	40028000 	.word	0x40028000
  403a00:	4002c000 	.word	0x4002c000
  403a04:	0040158d 	.word	0x0040158d
  403a08:	00401695 	.word	0x00401695

00403a0c <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403a0c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403a0e:	460a      	mov	r2, r1
  403a10:	4601      	mov	r1, r0
  403a12:	4802      	ldr	r0, [pc, #8]	; (403a1c <vApplicationStackOverflowHook+0x10>)
  403a14:	4b02      	ldr	r3, [pc, #8]	; (403a20 <vApplicationStackOverflowHook+0x14>)
  403a16:	4798      	blx	r3
  403a18:	e7fe      	b.n	403a18 <vApplicationStackOverflowHook+0xc>
  403a1a:	bf00      	nop
  403a1c:	0040b444 	.word	0x0040b444
  403a20:	00404949 	.word	0x00404949

00403a24 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403a24:	4770      	bx	lr

00403a26 <vApplicationMallocFailedHook>:
  403a26:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a2a:	b672      	cpsid	i
  403a2c:	f383 8811 	msr	BASEPRI, r3
  403a30:	f3bf 8f6f 	isb	sy
  403a34:	f3bf 8f4f 	dsb	sy
  403a38:	b662      	cpsie	i
  403a3a:	e7fe      	b.n	403a3a <vApplicationMallocFailedHook+0x14>

00403a3c <RTT_Handler>:
void RTT_Handler(void){
  403a3c:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  403a3e:	480a      	ldr	r0, [pc, #40]	; (403a68 <RTT_Handler+0x2c>)
  403a40:	4b0a      	ldr	r3, [pc, #40]	; (403a6c <RTT_Handler+0x30>)
  403a42:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS){
  403a44:	f010 0f01 	tst.w	r0, #1
  403a48:	d100      	bne.n	403a4c <RTT_Handler+0x10>
  403a4a:	bd08      	pop	{r3, pc}
		xSemaphoreGiveFromISR(xSemaphoreRTT, &xHigherPriorityTaskWoken);
  403a4c:	4908      	ldr	r1, [pc, #32]	; (403a70 <RTT_Handler+0x34>)
  403a4e:	4b09      	ldr	r3, [pc, #36]	; (403a74 <RTT_Handler+0x38>)
  403a50:	6818      	ldr	r0, [r3, #0]
  403a52:	4b09      	ldr	r3, [pc, #36]	; (403a78 <RTT_Handler+0x3c>)
  403a54:	4798      	blx	r3
		RTT_init(4, 16, RTT_MR_ALMIEN);
  403a56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403a5a:	2010      	movs	r0, #16
  403a5c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  403a60:	4b06      	ldr	r3, [pc, #24]	; (403a7c <RTT_Handler+0x40>)
  403a62:	4798      	blx	r3
}
  403a64:	e7f1      	b.n	403a4a <RTT_Handler+0xe>
  403a66:	bf00      	nop
  403a68:	400e1830 	.word	0x400e1830
  403a6c:	004003ed 	.word	0x004003ed
  403a70:	20400024 	.word	0x20400024
  403a74:	20400e5c 	.word	0x20400e5c
  403a78:	00402341 	.word	0x00402341
  403a7c:	004036c5 	.word	0x004036c5

00403a80 <TC7_Handler>:
void TC7_Handler(void) {
  403a80:	b500      	push	{lr}
  403a82:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC2, 1);
  403a84:	2101      	movs	r1, #1
  403a86:	4806      	ldr	r0, [pc, #24]	; (403aa0 <TC7_Handler+0x20>)
  403a88:	4b06      	ldr	r3, [pc, #24]	; (403aa4 <TC7_Handler+0x24>)
  403a8a:	4798      	blx	r3
  403a8c:	9001      	str	r0, [sp, #4]
	xSemaphoreGiveFromISR(xSemaphoreTC, &xHigherPriorityTaskWoken);
  403a8e:	4906      	ldr	r1, [pc, #24]	; (403aa8 <TC7_Handler+0x28>)
  403a90:	4b06      	ldr	r3, [pc, #24]	; (403aac <TC7_Handler+0x2c>)
  403a92:	6818      	ldr	r0, [r3, #0]
  403a94:	4b06      	ldr	r3, [pc, #24]	; (403ab0 <TC7_Handler+0x30>)
  403a96:	4798      	blx	r3
}
  403a98:	b003      	add	sp, #12
  403a9a:	f85d fb04 	ldr.w	pc, [sp], #4
  403a9e:	bf00      	nop
  403aa0:	40014000 	.word	0x40014000
  403aa4:	004005b1 	.word	0x004005b1
  403aa8:	20400024 	.word	0x20400024
  403aac:	20400e64 	.word	0x20400e64
  403ab0:	00402341 	.word	0x00402341

00403ab4 <TC4_Handler>:
void TC4_Handler(void) {
  403ab4:	b500      	push	{lr}
  403ab6:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC1, 1);
  403ab8:	2101      	movs	r1, #1
  403aba:	4811      	ldr	r0, [pc, #68]	; (403b00 <TC4_Handler+0x4c>)
  403abc:	4b11      	ldr	r3, [pc, #68]	; (403b04 <TC4_Handler+0x50>)
  403abe:	4798      	blx	r3
  403ac0:	9001      	str	r0, [sp, #4]
	if (flag_tc_button == 1){
  403ac2:	4b11      	ldr	r3, [pc, #68]	; (403b08 <TC4_Handler+0x54>)
  403ac4:	681b      	ldr	r3, [r3, #0]
  403ac6:	2b01      	cmp	r3, #1
  403ac8:	d002      	beq.n	403ad0 <TC4_Handler+0x1c>
}
  403aca:	b003      	add	sp, #12
  403acc:	f85d fb04 	ldr.w	pc, [sp], #4
		flag_tc_count ++;
  403ad0:	4b0e      	ldr	r3, [pc, #56]	; (403b0c <TC4_Handler+0x58>)
  403ad2:	681a      	ldr	r2, [r3, #0]
  403ad4:	3201      	adds	r2, #1
  403ad6:	601a      	str	r2, [r3, #0]
		if (flag_tc_count > 20){
  403ad8:	681b      	ldr	r3, [r3, #0]
  403ada:	2b14      	cmp	r3, #20
  403adc:	ddf5      	ble.n	403aca <TC4_Handler+0x16>
			flag_tc_button = 0;
  403ade:	4a0a      	ldr	r2, [pc, #40]	; (403b08 <TC4_Handler+0x54>)
  403ae0:	2100      	movs	r1, #0
  403ae2:	6011      	str	r1, [r2, #0]
			flag_tc_count = 0;
  403ae4:	4b09      	ldr	r3, [pc, #36]	; (403b0c <TC4_Handler+0x58>)
  403ae6:	6019      	str	r1, [r3, #0]
			printf("%d %d\n", flag_tc_button, flag_tc_count);
  403ae8:	6811      	ldr	r1, [r2, #0]
  403aea:	681a      	ldr	r2, [r3, #0]
  403aec:	4808      	ldr	r0, [pc, #32]	; (403b10 <TC4_Handler+0x5c>)
  403aee:	4b09      	ldr	r3, [pc, #36]	; (403b14 <TC4_Handler+0x60>)
  403af0:	4798      	blx	r3
			xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  403af2:	4909      	ldr	r1, [pc, #36]	; (403b18 <TC4_Handler+0x64>)
  403af4:	4b09      	ldr	r3, [pc, #36]	; (403b1c <TC4_Handler+0x68>)
  403af6:	6818      	ldr	r0, [r3, #0]
  403af8:	4b09      	ldr	r3, [pc, #36]	; (403b20 <TC4_Handler+0x6c>)
  403afa:	4798      	blx	r3
}
  403afc:	e7e5      	b.n	403aca <TC4_Handler+0x16>
  403afe:	bf00      	nop
  403b00:	40010000 	.word	0x40010000
  403b04:	004005b1 	.word	0x004005b1
  403b08:	20400dc0 	.word	0x20400dc0
  403b0c:	20400e48 	.word	0x20400e48
  403b10:	0040b328 	.word	0x0040b328
  403b14:	00404949 	.word	0x00404949
  403b18:	20400024 	.word	0x20400024
  403b1c:	20400e58 	.word	0x20400e58
  403b20:	00402341 	.word	0x00402341

00403b24 <RTC_Handler>:
void RTC_Handler(void) {
  403b24:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  403b26:	4810      	ldr	r0, [pc, #64]	; (403b68 <RTC_Handler+0x44>)
  403b28:	4b10      	ldr	r3, [pc, #64]	; (403b6c <RTC_Handler+0x48>)
  403b2a:	4798      	blx	r3
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  403b2c:	f010 0f02 	tst.w	r0, #2
  403b30:	d114      	bne.n	403b5c <RTC_Handler+0x38>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403b32:	4d0d      	ldr	r5, [pc, #52]	; (403b68 <RTC_Handler+0x44>)
  403b34:	2104      	movs	r1, #4
  403b36:	4628      	mov	r0, r5
  403b38:	4c0d      	ldr	r4, [pc, #52]	; (403b70 <RTC_Handler+0x4c>)
  403b3a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  403b3c:	2102      	movs	r1, #2
  403b3e:	4628      	mov	r0, r5
  403b40:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  403b42:	2101      	movs	r1, #1
  403b44:	4628      	mov	r0, r5
  403b46:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403b48:	2108      	movs	r1, #8
  403b4a:	4628      	mov	r0, r5
  403b4c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  403b4e:	2110      	movs	r1, #16
  403b50:	4628      	mov	r0, r5
  403b52:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  403b54:	2120      	movs	r1, #32
  403b56:	4628      	mov	r0, r5
  403b58:	47a0      	blx	r4
  403b5a:	bd38      	pop	{r3, r4, r5, pc}
		xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  403b5c:	4905      	ldr	r1, [pc, #20]	; (403b74 <RTC_Handler+0x50>)
  403b5e:	4b06      	ldr	r3, [pc, #24]	; (403b78 <RTC_Handler+0x54>)
  403b60:	6818      	ldr	r0, [r3, #0]
  403b62:	4b06      	ldr	r3, [pc, #24]	; (403b7c <RTC_Handler+0x58>)
  403b64:	4798      	blx	r3
  403b66:	e7e4      	b.n	403b32 <RTC_Handler+0xe>
  403b68:	400e1860 	.word	0x400e1860
  403b6c:	00400369 	.word	0x00400369
  403b70:	0040036d 	.word	0x0040036d
  403b74:	20400024 	.word	0x20400024
  403b78:	20400e58 	.word	0x20400e58
  403b7c:	00402341 	.word	0x00402341

00403b80 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b84:	b084      	sub	sp, #16
  403b86:	4605      	mov	r5, r0
  403b88:	460c      	mov	r4, r1
  403b8a:	4616      	mov	r6, r2
  403b8c:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ID_TC);
  403b8e:	4608      	mov	r0, r1
  403b90:	4b1f      	ldr	r3, [pc, #124]	; (403c10 <TC_init+0x90>)
  403b92:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403b94:	491f      	ldr	r1, [pc, #124]	; (403c14 <TC_init+0x94>)
  403b96:	9100      	str	r1, [sp, #0]
  403b98:	ab02      	add	r3, sp, #8
  403b9a:	aa03      	add	r2, sp, #12
  403b9c:	4638      	mov	r0, r7
  403b9e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 403c34 <TC_init+0xb4>
  403ba2:	47c0      	blx	r8
	if(ul_tcclks == 0 )
  403ba4:	9b02      	ldr	r3, [sp, #8]
  403ba6:	b33b      	cbz	r3, 403bf8 <TC_init+0x78>
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  403ba8:	9a02      	ldr	r2, [sp, #8]
  403baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403bae:	4631      	mov	r1, r6
  403bb0:	4628      	mov	r0, r5
  403bb2:	4b19      	ldr	r3, [pc, #100]	; (403c18 <TC_init+0x98>)
  403bb4:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  403bb6:	9b03      	ldr	r3, [sp, #12]
  403bb8:	4a16      	ldr	r2, [pc, #88]	; (403c14 <TC_init+0x94>)
  403bba:	fbb2 f2f3 	udiv	r2, r2, r3
  403bbe:	fbb2 f2f7 	udiv	r2, r2, r7
  403bc2:	4631      	mov	r1, r6
  403bc4:	4628      	mov	r0, r5
  403bc6:	4b15      	ldr	r3, [pc, #84]	; (403c1c <TC_init+0x9c>)
  403bc8:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  403bca:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  403bcc:	2b00      	cmp	r3, #0
  403bce:	db17      	blt.n	403c00 <TC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403bd0:	4a13      	ldr	r2, [pc, #76]	; (403c20 <TC_init+0xa0>)
  403bd2:	2180      	movs	r1, #128	; 0x80
  403bd4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403bd6:	095b      	lsrs	r3, r3, #5
  403bd8:	f004 041f 	and.w	r4, r4, #31
  403bdc:	2201      	movs	r2, #1
  403bde:	fa02 f404 	lsl.w	r4, r2, r4
  403be2:	4a10      	ldr	r2, [pc, #64]	; (403c24 <TC_init+0xa4>)
  403be4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  403be8:	2210      	movs	r2, #16
  403bea:	4631      	mov	r1, r6
  403bec:	4628      	mov	r0, r5
  403bee:	4b0e      	ldr	r3, [pc, #56]	; (403c28 <TC_init+0xa8>)
  403bf0:	4798      	blx	r3
}
  403bf2:	b004      	add	sp, #16
  403bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pmc_enable_pck(PMC_PCK_6);
  403bf8:	2006      	movs	r0, #6
  403bfa:	4b0c      	ldr	r3, [pc, #48]	; (403c2c <TC_init+0xac>)
  403bfc:	4798      	blx	r3
  403bfe:	e7d3      	b.n	403ba8 <TC_init+0x28>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403c00:	f004 010f 	and.w	r1, r4, #15
  403c04:	4a0a      	ldr	r2, [pc, #40]	; (403c30 <TC_init+0xb0>)
  403c06:	440a      	add	r2, r1
  403c08:	2180      	movs	r1, #128	; 0x80
  403c0a:	7611      	strb	r1, [r2, #24]
  403c0c:	e7e3      	b.n	403bd6 <TC_init+0x56>
  403c0e:	bf00      	nop
  403c10:	00401261 	.word	0x00401261
  403c14:	11e1a300 	.word	0x11e1a300
  403c18:	0040057f 	.word	0x0040057f
  403c1c:	004005a1 	.word	0x004005a1
  403c20:	e000e400 	.word	0xe000e400
  403c24:	e000e100 	.word	0xe000e100
  403c28:	004005a9 	.word	0x004005a9
  403c2c:	004012b5 	.word	0x004012b5
  403c30:	e000ecfc 	.word	0xe000ecfc
  403c34:	004005b9 	.word	0x004005b9

00403c38 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  403c38:	b082      	sub	sp, #8
  403c3a:	b570      	push	{r4, r5, r6, lr}
  403c3c:	b082      	sub	sp, #8
  403c3e:	4605      	mov	r5, r0
  403c40:	460c      	mov	r4, r1
  403c42:	a906      	add	r1, sp, #24
  403c44:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  403c48:	2002      	movs	r0, #2
  403c4a:	4b1d      	ldr	r3, [pc, #116]	; (403cc0 <RTC_init+0x88>)
  403c4c:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  403c4e:	2100      	movs	r1, #0
  403c50:	4628      	mov	r0, r5
  403c52:	4b1c      	ldr	r3, [pc, #112]	; (403cc4 <RTC_init+0x8c>)
  403c54:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  403c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c58:	9300      	str	r3, [sp, #0]
  403c5a:	9b08      	ldr	r3, [sp, #32]
  403c5c:	9a07      	ldr	r2, [sp, #28]
  403c5e:	9906      	ldr	r1, [sp, #24]
  403c60:	4628      	mov	r0, r5
  403c62:	4e19      	ldr	r6, [pc, #100]	; (403cc8 <RTC_init+0x90>)
  403c64:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  403c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c6c:	4628      	mov	r0, r5
  403c6e:	4e17      	ldr	r6, [pc, #92]	; (403ccc <RTC_init+0x94>)
  403c70:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  403c72:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403c74:	b2e4      	uxtb	r4, r4
  403c76:	f004 011f 	and.w	r1, r4, #31
  403c7a:	2301      	movs	r3, #1
  403c7c:	408b      	lsls	r3, r1
  403c7e:	0956      	lsrs	r6, r2, #5
  403c80:	4813      	ldr	r0, [pc, #76]	; (403cd0 <RTC_init+0x98>)
  403c82:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  403c86:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403c8a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  403c8e:	2a00      	cmp	r2, #0
  403c90:	db0f      	blt.n	403cb2 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403c92:	490f      	ldr	r1, [pc, #60]	; (403cd0 <RTC_init+0x98>)
  403c94:	4411      	add	r1, r2
  403c96:	2280      	movs	r2, #128	; 0x80
  403c98:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403c9c:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  403ca0:	990d      	ldr	r1, [sp, #52]	; 0x34
  403ca2:	4628      	mov	r0, r5
  403ca4:	4b0b      	ldr	r3, [pc, #44]	; (403cd4 <RTC_init+0x9c>)
  403ca6:	4798      	blx	r3
}
  403ca8:	b002      	add	sp, #8
  403caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  403cae:	b002      	add	sp, #8
  403cb0:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403cb2:	f004 040f 	and.w	r4, r4, #15
  403cb6:	4a08      	ldr	r2, [pc, #32]	; (403cd8 <RTC_init+0xa0>)
  403cb8:	2180      	movs	r1, #128	; 0x80
  403cba:	5511      	strb	r1, [r2, r4]
  403cbc:	e7ee      	b.n	403c9c <RTC_init+0x64>
  403cbe:	bf00      	nop
  403cc0:	00401261 	.word	0x00401261
  403cc4:	004001ad 	.word	0x004001ad
  403cc8:	004002b1 	.word	0x004002b1
  403ccc:	00400221 	.word	0x00400221
  403cd0:	e000e100 	.word	0xe000e100
  403cd4:	004001c3 	.word	0x004001c3
  403cd8:	e000ed14 	.word	0xe000ed14

00403cdc <led_pisca>:
void led_pisca(int led){
  403cdc:	b510      	push	{r4, lr}
	if (led == 1){
  403cde:	2801      	cmp	r0, #1
  403ce0:	d004      	beq.n	403cec <led_pisca+0x10>
	if (led == 2){
  403ce2:	2802      	cmp	r0, #2
  403ce4:	d00f      	beq.n	403d06 <led_pisca+0x2a>
	if (led == 3){
  403ce6:	2803      	cmp	r0, #3
  403ce8:	d01c      	beq.n	403d24 <led_pisca+0x48>
  403cea:	bd10      	pop	{r4, pc}
		pio_clear(LED1_PIO, LED1_MASK);
  403cec:	4c14      	ldr	r4, [pc, #80]	; (403d40 <led_pisca+0x64>)
  403cee:	2101      	movs	r1, #1
  403cf0:	4620      	mov	r0, r4
  403cf2:	4b14      	ldr	r3, [pc, #80]	; (403d44 <led_pisca+0x68>)
  403cf4:	4798      	blx	r3
		vTaskDelay(50);
  403cf6:	2032      	movs	r0, #50	; 0x32
  403cf8:	4b13      	ldr	r3, [pc, #76]	; (403d48 <led_pisca+0x6c>)
  403cfa:	4798      	blx	r3
		pio_set(LED1_PIO, LED1_MASK);
  403cfc:	2101      	movs	r1, #1
  403cfe:	4620      	mov	r0, r4
  403d00:	4b12      	ldr	r3, [pc, #72]	; (403d4c <led_pisca+0x70>)
  403d02:	4798      	blx	r3
  403d04:	bd10      	pop	{r4, pc}
		pio_clear(LED2_PIO, LED2_MASK);
  403d06:	4c12      	ldr	r4, [pc, #72]	; (403d50 <led_pisca+0x74>)
  403d08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403d0c:	4620      	mov	r0, r4
  403d0e:	4b0d      	ldr	r3, [pc, #52]	; (403d44 <led_pisca+0x68>)
  403d10:	4798      	blx	r3
		vTaskDelay(50);
  403d12:	2032      	movs	r0, #50	; 0x32
  403d14:	4b0c      	ldr	r3, [pc, #48]	; (403d48 <led_pisca+0x6c>)
  403d16:	4798      	blx	r3
		pio_set(LED2_PIO, LED2_MASK);
  403d18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403d1c:	4620      	mov	r0, r4
  403d1e:	4b0b      	ldr	r3, [pc, #44]	; (403d4c <led_pisca+0x70>)
  403d20:	4798      	blx	r3
  403d22:	bd10      	pop	{r4, pc}
		pio_clear(LED3_PIO, LED3_MASK);
  403d24:	4c0b      	ldr	r4, [pc, #44]	; (403d54 <led_pisca+0x78>)
  403d26:	2104      	movs	r1, #4
  403d28:	4620      	mov	r0, r4
  403d2a:	4b06      	ldr	r3, [pc, #24]	; (403d44 <led_pisca+0x68>)
  403d2c:	4798      	blx	r3
		vTaskDelay(50);
  403d2e:	2032      	movs	r0, #50	; 0x32
  403d30:	4b05      	ldr	r3, [pc, #20]	; (403d48 <led_pisca+0x6c>)
  403d32:	4798      	blx	r3
		pio_set(LED3_PIO, LED3_MASK);
  403d34:	2104      	movs	r1, #4
  403d36:	4620      	mov	r0, r4
  403d38:	4b04      	ldr	r3, [pc, #16]	; (403d4c <led_pisca+0x70>)
  403d3a:	4798      	blx	r3
}
  403d3c:	e7d5      	b.n	403cea <led_pisca+0xe>
  403d3e:	bf00      	nop
  403d40:	400e0e00 	.word	0x400e0e00
  403d44:	00400e59 	.word	0x00400e59
  403d48:	00402c4d 	.word	0x00402c4d
  403d4c:	00400e55 	.word	0x00400e55
  403d50:	400e1200 	.word	0x400e1200
  403d54:	400e1000 	.word	0x400e1000

00403d58 <task_rtc>:
static void task_rtc(void *pvParameters){
  403d58:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreRTC, 100)){
  403d5a:	4d08      	ldr	r5, [pc, #32]	; (403d7c <task_rtc+0x24>)
  403d5c:	4c08      	ldr	r4, [pc, #32]	; (403d80 <task_rtc+0x28>)
			led_pisca(3);
  403d5e:	4e09      	ldr	r6, [pc, #36]	; (403d84 <task_rtc+0x2c>)
  403d60:	e002      	b.n	403d68 <task_rtc+0x10>
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403d62:	2002      	movs	r0, #2
  403d64:	4b08      	ldr	r3, [pc, #32]	; (403d88 <task_rtc+0x30>)
  403d66:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreRTC, 100)){
  403d68:	2300      	movs	r3, #0
  403d6a:	2264      	movs	r2, #100	; 0x64
  403d6c:	4619      	mov	r1, r3
  403d6e:	6828      	ldr	r0, [r5, #0]
  403d70:	47a0      	blx	r4
  403d72:	2800      	cmp	r0, #0
  403d74:	d0f5      	beq.n	403d62 <task_rtc+0xa>
			led_pisca(3);
  403d76:	2003      	movs	r0, #3
  403d78:	47b0      	blx	r6
  403d7a:	e7f2      	b.n	403d62 <task_rtc+0xa>
  403d7c:	20400e58 	.word	0x20400e58
  403d80:	00402421 	.word	0x00402421
  403d84:	00403cdd 	.word	0x00403cdd
  403d88:	00401319 	.word	0x00401319

00403d8c <task_tc>:
static void task_tc(void *pvParameters){
  403d8c:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreTC, 100)){
  403d8e:	4d08      	ldr	r5, [pc, #32]	; (403db0 <task_tc+0x24>)
  403d90:	4c08      	ldr	r4, [pc, #32]	; (403db4 <task_tc+0x28>)
			led_pisca(1);
  403d92:	4e09      	ldr	r6, [pc, #36]	; (403db8 <task_tc+0x2c>)
  403d94:	e002      	b.n	403d9c <task_tc+0x10>
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403d96:	2002      	movs	r0, #2
  403d98:	4b08      	ldr	r3, [pc, #32]	; (403dbc <task_tc+0x30>)
  403d9a:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreTC, 100)){
  403d9c:	2300      	movs	r3, #0
  403d9e:	2264      	movs	r2, #100	; 0x64
  403da0:	4619      	mov	r1, r3
  403da2:	6828      	ldr	r0, [r5, #0]
  403da4:	47a0      	blx	r4
  403da6:	2800      	cmp	r0, #0
  403da8:	d0f5      	beq.n	403d96 <task_tc+0xa>
			led_pisca(1);
  403daa:	2001      	movs	r0, #1
  403dac:	47b0      	blx	r6
  403dae:	e7f2      	b.n	403d96 <task_tc+0xa>
  403db0:	20400e64 	.word	0x20400e64
  403db4:	00402421 	.word	0x00402421
  403db8:	00403cdd 	.word	0x00403cdd
  403dbc:	00401319 	.word	0x00401319

00403dc0 <task_rtt>:
static void task_rtt(void *pvParameters){
  403dc0:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreRTT, 100)){
  403dc2:	4e0c      	ldr	r6, [pc, #48]	; (403df4 <task_rtt+0x34>)
  403dc4:	4d0c      	ldr	r5, [pc, #48]	; (403df8 <task_rtt+0x38>)
			led_pisca(2);
  403dc6:	2402      	movs	r4, #2
  403dc8:	e002      	b.n	403dd0 <task_rtt+0x10>
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403dca:	4620      	mov	r0, r4
  403dcc:	4b0b      	ldr	r3, [pc, #44]	; (403dfc <task_rtt+0x3c>)
  403dce:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreRTT, 100)){
  403dd0:	2300      	movs	r3, #0
  403dd2:	2264      	movs	r2, #100	; 0x64
  403dd4:	4619      	mov	r1, r3
  403dd6:	6830      	ldr	r0, [r6, #0]
  403dd8:	47a8      	blx	r5
  403dda:	2800      	cmp	r0, #0
  403ddc:	d0f5      	beq.n	403dca <task_rtt+0xa>
			led_pisca(2);
  403dde:	4620      	mov	r0, r4
  403de0:	4b07      	ldr	r3, [pc, #28]	; (403e00 <task_rtt+0x40>)
  403de2:	4798      	blx	r3
			RTT_init(4, 16, RTT_MR_ALMIEN);
  403de4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403de8:	2010      	movs	r0, #16
  403dea:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  403dee:	4b05      	ldr	r3, [pc, #20]	; (403e04 <task_rtt+0x44>)
  403df0:	4798      	blx	r3
  403df2:	e7ea      	b.n	403dca <task_rtt+0xa>
  403df4:	20400e5c 	.word	0x20400e5c
  403df8:	00402421 	.word	0x00402421
  403dfc:	00401319 	.word	0x00401319
  403e00:	00403cdd 	.word	0x00403cdd
  403e04:	004036c5 	.word	0x004036c5

00403e08 <led_init>:
void led_init(){
  403e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pmc_enable_periph_clk(LED1_ID);
  403e0a:	200a      	movs	r0, #10
  403e0c:	4d14      	ldr	r5, [pc, #80]	; (403e60 <led_init+0x58>)
  403e0e:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403e10:	4f14      	ldr	r7, [pc, #80]	; (403e64 <led_init+0x5c>)
  403e12:	2308      	movs	r3, #8
  403e14:	2201      	movs	r2, #1
  403e16:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e1a:	4638      	mov	r0, r7
  403e1c:	4c12      	ldr	r4, [pc, #72]	; (403e68 <led_init+0x60>)
  403e1e:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_ID);
  403e20:	200c      	movs	r0, #12
  403e22:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403e24:	4e11      	ldr	r6, [pc, #68]	; (403e6c <led_init+0x64>)
  403e26:	2308      	movs	r3, #8
  403e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403e2c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e30:	4630      	mov	r0, r6
  403e32:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_ID);
  403e34:	200b      	movs	r0, #11
  403e36:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403e38:	4d0d      	ldr	r5, [pc, #52]	; (403e70 <led_init+0x68>)
  403e3a:	2308      	movs	r3, #8
  403e3c:	2204      	movs	r2, #4
  403e3e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e42:	4628      	mov	r0, r5
  403e44:	47a0      	blx	r4
	pio_set(LED1_PIO, LED1_MASK);
  403e46:	2101      	movs	r1, #1
  403e48:	4638      	mov	r0, r7
  403e4a:	4c0a      	ldr	r4, [pc, #40]	; (403e74 <led_init+0x6c>)
  403e4c:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_MASK);
  403e4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403e52:	4630      	mov	r0, r6
  403e54:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_MASK);
  403e56:	2104      	movs	r1, #4
  403e58:	4628      	mov	r0, r5
  403e5a:	47a0      	blx	r4
  403e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e5e:	bf00      	nop
  403e60:	00401261 	.word	0x00401261
  403e64:	400e0e00 	.word	0x400e0e00
  403e68:	00400f4d 	.word	0x00400f4d
  403e6c:	400e1200 	.word	0x400e1200
  403e70:	400e1000 	.word	0x400e1000
  403e74:	00400e55 	.word	0x00400e55

00403e78 <button_init>:
}

void button_init(void){
  403e78:	b530      	push	{r4, r5, lr}
  403e7a:	b083      	sub	sp, #12
	pmc_enable_periph_clk(BUT1_ID);					
  403e7c:	2010      	movs	r0, #16
  403e7e:	4b12      	ldr	r3, [pc, #72]	; (403ec8 <button_init+0x50>)
  403e80:	4798      	blx	r3
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403e82:	4c12      	ldr	r4, [pc, #72]	; (403ecc <button_init+0x54>)
  403e84:	2309      	movs	r3, #9
  403e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e8a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403e8e:	4620      	mov	r0, r4
  403e90:	4d0f      	ldr	r5, [pc, #60]	; (403ed0 <button_init+0x58>)
  403e92:	47a8      	blx	r5
	pio_handler_set(BUT1_PIO, BUT1_ID, BUT1_MASK, PIO_IT_FALL_EDGE, &but_callback1);
  403e94:	4b0f      	ldr	r3, [pc, #60]	; (403ed4 <button_init+0x5c>)
  403e96:	9300      	str	r3, [sp, #0]
  403e98:	2350      	movs	r3, #80	; 0x50
  403e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e9e:	2110      	movs	r1, #16
  403ea0:	4620      	mov	r0, r4
  403ea2:	4d0d      	ldr	r5, [pc, #52]	; (403ed8 <button_init+0x60>)
  403ea4:	47a8      	blx	r5
	pio_enable_interrupt(BUT1_PIO, BUT1_MASK);
  403ea6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403eaa:	4620      	mov	r0, r4
  403eac:	4b0b      	ldr	r3, [pc, #44]	; (403edc <button_init+0x64>)
  403eae:	4798      	blx	r3
	pio_get_interrupt_status(BUT1_PIO);
  403eb0:	4620      	mov	r0, r4
  403eb2:	4b0b      	ldr	r3, [pc, #44]	; (403ee0 <button_init+0x68>)
  403eb4:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403eb6:	4b0b      	ldr	r3, [pc, #44]	; (403ee4 <button_init+0x6c>)
  403eb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403ebc:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403ebe:	2280      	movs	r2, #128	; 0x80
  403ec0:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ(BUT1_ID);
	NVIC_SetPriority(BUT1_ID, 4);
	
}
  403ec4:	b003      	add	sp, #12
  403ec6:	bd30      	pop	{r4, r5, pc}
  403ec8:	00401261 	.word	0x00401261
  403ecc:	400e1400 	.word	0x400e1400
  403ed0:	00400f4d 	.word	0x00400f4d
  403ed4:	004036ad 	.word	0x004036ad
  403ed8:	0040106d 	.word	0x0040106d
  403edc:	0040100f 	.word	0x0040100f
  403ee0:	00401013 	.word	0x00401013
  403ee4:	e000e100 	.word	0xe000e100

00403ee8 <main>:

int main(void) {
  403ee8:	b500      	push	{lr}
  403eea:	b095      	sub	sp, #84	; 0x54
	/* Initialize the SAM system */
	sysclk_init();
  403eec:	4b75      	ldr	r3, [pc, #468]	; (4040c4 <main+0x1dc>)
  403eee:	4798      	blx	r3
	board_init();
  403ef0:	4b75      	ldr	r3, [pc, #468]	; (4040c8 <main+0x1e0>)
  403ef2:	4798      	blx	r3
	led_init();
  403ef4:	4b75      	ldr	r3, [pc, #468]	; (4040cc <main+0x1e4>)
  403ef6:	4798      	blx	r3
	button_init();
  403ef8:	4b75      	ldr	r3, [pc, #468]	; (4040d0 <main+0x1e8>)
  403efa:	4798      	blx	r3
>>>>>>> Stashed changes
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
>>>>>>> Stashed changes
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
<<<<<<< Updated upstream
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002b2:	4d2a      	ldr	r5, [pc, #168]	; (40035c <rtc_set_date+0xac>)
  4002b4:	fba5 4603 	umull	r4, r6, r5, r3
  4002b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002ba:	9c03      	ldr	r4, [sp, #12]
  4002bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4002c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4002ce:	fba5 6402 	umull	r6, r4, r5, r2
  4002d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4002d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4002dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4002e4:	4b1e      	ldr	r3, [pc, #120]	; (400360 <rtc_set_date+0xb0>)
  4002e6:	fba3 4301 	umull	r4, r3, r3, r1
  4002ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4002f0:	4b1c      	ldr	r3, [pc, #112]	; (400364 <rtc_set_date+0xb4>)
  4002f2:	fba3 4301 	umull	r4, r3, r3, r1
  4002f6:	095b      	lsrs	r3, r3, #5
  4002f8:	fba5 6403 	umull	r6, r4, r5, r3
  4002fc:	08e4      	lsrs	r4, r4, #3
  4002fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400302:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400308:	fba5 4301 	umull	r4, r3, r5, r1
  40030c:	08db      	lsrs	r3, r3, #3
  40030e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400312:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40031a:	fba5 1503 	umull	r1, r5, r5, r3
  40031e:	08ed      	lsrs	r5, r5, #3
  400320:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400324:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40032c:	6983      	ldr	r3, [r0, #24]
  40032e:	f013 0f04 	tst.w	r3, #4
  400332:	d0fb      	beq.n	40032c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400334:	6803      	ldr	r3, [r0, #0]
  400336:	f043 0302 	orr.w	r3, r3, #2
  40033a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40033c:	6983      	ldr	r3, [r0, #24]
  40033e:	f013 0f01 	tst.w	r3, #1
  400342:	d0fb      	beq.n	40033c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400344:	2301      	movs	r3, #1
  400346:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400348:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40034a:	6803      	ldr	r3, [r0, #0]
  40034c:	f023 0302 	bic.w	r3, r3, #2
  400350:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400352:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400354:	f000 0002 	and.w	r0, r0, #2
  400358:	bc70      	pop	{r4, r5, r6}
  40035a:	4770      	bx	lr
  40035c:	cccccccd 	.word	0xcccccccd
  400360:	10624dd3 	.word	0x10624dd3
  400364:	51eb851f 	.word	0x51eb851f

00400368 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400368:	6980      	ldr	r0, [r0, #24]
}
  40036a:	4770      	bx	lr

0040036c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40036c:	61c1      	str	r1, [r0, #28]
  40036e:	4770      	bx	lr

00400370 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400370:	4b03      	ldr	r3, [pc, #12]	; (400380 <rtt_init+0x10>)
  400372:	681b      	ldr	r3, [r3, #0]
  400374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400378:	4319      	orrs	r1, r3
  40037a:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  40037c:	2000      	movs	r0, #0
  40037e:	4770      	bx	lr
  400380:	204009f4 	.word	0x204009f4

00400384 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400384:	b941      	cbnz	r1, 400398 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400386:	4a09      	ldr	r2, [pc, #36]	; (4003ac <rtt_sel_source+0x28>)
  400388:	6813      	ldr	r3, [r2, #0]
  40038a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40038e:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400390:	6802      	ldr	r2, [r0, #0]
  400392:	4313      	orrs	r3, r2
  400394:	6003      	str	r3, [r0, #0]
  400396:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400398:	4a04      	ldr	r2, [pc, #16]	; (4003ac <rtt_sel_source+0x28>)
  40039a:	6813      	ldr	r3, [r2, #0]
  40039c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4003a0:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4003a2:	6802      	ldr	r2, [r0, #0]
  4003a4:	4313      	orrs	r3, r2
  4003a6:	6003      	str	r3, [r0, #0]
  4003a8:	4770      	bx	lr
  4003aa:	bf00      	nop
  4003ac:	204009f4 	.word	0x204009f4

004003b0 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4003b0:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003b2:	4b03      	ldr	r3, [pc, #12]	; (4003c0 <rtt_enable_interrupt+0x10>)
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	4319      	orrs	r1, r3
  4003b8:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4003ba:	6001      	str	r1, [r0, #0]
  4003bc:	4770      	bx	lr
  4003be:	bf00      	nop
  4003c0:	204009f4 	.word	0x204009f4

004003c4 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4003c4:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4003c6:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4003ca:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <rtt_disable_interrupt+0x10>)
  4003cc:	681b      	ldr	r3, [r3, #0]
  4003ce:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4003d0:	6001      	str	r1, [r0, #0]
  4003d2:	4770      	bx	lr
  4003d4:	204009f4 	.word	0x204009f4

004003d8 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4003d8:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4003da:	6883      	ldr	r3, [r0, #8]
  4003dc:	429a      	cmp	r2, r3
  4003de:	d003      	beq.n	4003e8 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4003e0:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4003e2:	6883      	ldr	r3, [r0, #8]
  4003e4:	4293      	cmp	r3, r2
  4003e6:	d1fb      	bne.n	4003e0 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	4770      	bx	lr

004003ec <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4003ec:	68c0      	ldr	r0, [r0, #12]
}
  4003ee:	4770      	bx	lr

004003f0 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4606      	mov	r6, r0
  4003f4:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4003f6:	6804      	ldr	r4, [r0, #0]
  4003f8:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4003fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400400:	4809      	ldr	r0, [pc, #36]	; (400428 <rtt_write_alarm_time+0x38>)
  400402:	4b0a      	ldr	r3, [pc, #40]	; (40042c <rtt_write_alarm_time+0x3c>)
  400404:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400406:	b92d      	cbnz	r5, 400414 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400408:	f04f 33ff 	mov.w	r3, #4294967295
  40040c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40040e:	b924      	cbnz	r4, 40041a <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400410:	2000      	movs	r0, #0
  400412:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400414:	3d01      	subs	r5, #1
  400416:	6075      	str	r5, [r6, #4]
  400418:	e7f9      	b.n	40040e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40041a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40041e:	4802      	ldr	r0, [pc, #8]	; (400428 <rtt_write_alarm_time+0x38>)
  400420:	4b03      	ldr	r3, [pc, #12]	; (400430 <rtt_write_alarm_time+0x40>)
  400422:	4798      	blx	r3
  400424:	e7f4      	b.n	400410 <rtt_write_alarm_time+0x20>
  400426:	bf00      	nop
  400428:	400e1830 	.word	0x400e1830
  40042c:	004003c5 	.word	0x004003c5
  400430:	004003b1 	.word	0x004003b1

00400434 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400434:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <spi_enable_clock+0x20>)
  400438:	4298      	cmp	r0, r3
  40043a:	d003      	beq.n	400444 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40043c:	4b06      	ldr	r3, [pc, #24]	; (400458 <spi_enable_clock+0x24>)
  40043e:	4298      	cmp	r0, r3
  400440:	d004      	beq.n	40044c <spi_enable_clock+0x18>
  400442:	bd08      	pop	{r3, pc}
=======
	stdio_base = (void *)usart;
<<<<<<< Updated upstream
  403244:	4d53      	ldr	r5, [pc, #332]	; (403394 <main+0x160>)
  403246:	4b54      	ldr	r3, [pc, #336]	; (403398 <main+0x164>)
  403248:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40324a:	4a54      	ldr	r2, [pc, #336]	; (40339c <main+0x168>)
  40324c:	4b54      	ldr	r3, [pc, #336]	; (4033a0 <main+0x16c>)
  40324e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403250:	4a54      	ldr	r2, [pc, #336]	; (4033a4 <main+0x170>)
  403252:	4b55      	ldr	r3, [pc, #340]	; (4033a8 <main+0x174>)
  403254:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403256:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40325a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40325c:	23c0      	movs	r3, #192	; 0xc0
  40325e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403260:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403264:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403266:	2400      	movs	r4, #0
  403268:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40326a:	9408      	str	r4, [sp, #32]
>>>>>>> Stashed changes
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400444:	2015      	movs	r0, #21
  400446:	4b05      	ldr	r3, [pc, #20]	; (40045c <spi_enable_clock+0x28>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	202a      	movs	r0, #42	; 0x2a
  40044e:	4b03      	ldr	r3, [pc, #12]	; (40045c <spi_enable_clock+0x28>)
  400450:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400452:	e7f6      	b.n	400442 <spi_enable_clock+0xe>
  400454:	40008000 	.word	0x40008000
  400458:	40058000 	.word	0x40058000
  40045c:	00401261 	.word	0x00401261

00400460 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400460:	6843      	ldr	r3, [r0, #4]
  400462:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400466:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400468:	6843      	ldr	r3, [r0, #4]
  40046a:	0409      	lsls	r1, r1, #16
  40046c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400470:	4319      	orrs	r1, r3
  400472:	6041      	str	r1, [r0, #4]
  400474:	4770      	bx	lr

00400476 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400476:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400478:	f643 2499 	movw	r4, #15001	; 0x3a99
  40047c:	6905      	ldr	r5, [r0, #16]
  40047e:	f015 0f02 	tst.w	r5, #2
  400482:	d103      	bne.n	40048c <spi_write+0x16>
		if (!timeout--) {
  400484:	3c01      	subs	r4, #1
  400486:	d1f9      	bne.n	40047c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400488:	2001      	movs	r0, #1
  40048a:	e00c      	b.n	4004a6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40048c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40048e:	f014 0f02 	tst.w	r4, #2
  400492:	d006      	beq.n	4004a2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400494:	0412      	lsls	r2, r2, #16
  400496:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40049a:	4311      	orrs	r1, r2
		if (uc_last) {
  40049c:	b10b      	cbz	r3, 4004a2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40049e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4004a2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	bc30      	pop	{r4, r5}
  4004a8:	4770      	bx	lr

004004aa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4004aa:	b932      	cbnz	r2, 4004ba <spi_set_clock_polarity+0x10>
  4004ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b2:	f023 0301 	bic.w	r3, r3, #1
  4004b6:	6303      	str	r3, [r0, #48]	; 0x30
  4004b8:	4770      	bx	lr
  4004ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4004be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004c0:	f043 0301 	orr.w	r3, r3, #1
  4004c4:	6303      	str	r3, [r0, #48]	; 0x30
  4004c6:	4770      	bx	lr

004004c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4004c8:	b932      	cbnz	r2, 4004d8 <spi_set_clock_phase+0x10>
  4004ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4004ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004d0:	f023 0302 	bic.w	r3, r3, #2
  4004d4:	6303      	str	r3, [r0, #48]	; 0x30
  4004d6:	4770      	bx	lr
  4004d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004de:	f043 0302 	orr.w	r3, r3, #2
  4004e2:	6303      	str	r3, [r0, #48]	; 0x30
  4004e4:	4770      	bx	lr

004004e6 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4004e6:	2a04      	cmp	r2, #4
  4004e8:	d003      	beq.n	4004f2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4004ea:	b16a      	cbz	r2, 400508 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4004ec:	2a08      	cmp	r2, #8
  4004ee:	d016      	beq.n	40051e <spi_configure_cs_behavior+0x38>
  4004f0:	4770      	bx	lr
  4004f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004f8:	f023 0308 	bic.w	r3, r3, #8
  4004fc:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400500:	f043 0304 	orr.w	r3, r3, #4
  400504:	6303      	str	r3, [r0, #48]	; 0x30
  400506:	4770      	bx	lr
  400508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40050c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40050e:	f023 0308 	bic.w	r3, r3, #8
  400512:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400514:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400516:	f023 0304 	bic.w	r3, r3, #4
  40051a:	6303      	str	r3, [r0, #48]	; 0x30
  40051c:	4770      	bx	lr
  40051e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400522:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400524:	f043 0308 	orr.w	r3, r3, #8
  400528:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40052a:	e7e1      	b.n	4004f0 <spi_configure_cs_behavior+0xa>

0040052c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40052c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400530:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400536:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400538:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40053a:	431a      	orrs	r2, r3
  40053c:	630a      	str	r2, [r1, #48]	; 0x30
  40053e:	4770      	bx	lr

00400540 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400540:	1e43      	subs	r3, r0, #1
  400542:	4419      	add	r1, r3
  400544:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400548:	1e43      	subs	r3, r0, #1
  40054a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40054c:	bf94      	ite	ls
  40054e:	b200      	sxthls	r0, r0
		return -1;
  400550:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400554:	4770      	bx	lr

00400556 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400556:	b17a      	cbz	r2, 400578 <spi_set_baudrate_div+0x22>
{
  400558:	b410      	push	{r4}
  40055a:	4614      	mov	r4, r2
  40055c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400560:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400566:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400568:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40056a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40056e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400570:	2000      	movs	r0, #0
}
  400572:	f85d 4b04 	ldr.w	r4, [sp], #4
  400576:	4770      	bx	lr
        return -1;
  400578:	f04f 30ff 	mov.w	r0, #4294967295
  40057c:	4770      	bx	lr

0040057e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40057e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400580:	0189      	lsls	r1, r1, #6
  400582:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400584:	2402      	movs	r4, #2
  400586:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400588:	f04f 31ff 	mov.w	r1, #4294967295
  40058c:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40058e:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400590:	605a      	str	r2, [r3, #4]
}
  400592:	f85d 4b04 	ldr.w	r4, [sp], #4
  400596:	4770      	bx	lr

00400598 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400598:	0189      	lsls	r1, r1, #6
  40059a:	2305      	movs	r3, #5
  40059c:	5043      	str	r3, [r0, r1]
  40059e:	4770      	bx	lr

004005a0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4005a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4005a4:	61ca      	str	r2, [r1, #28]
  4005a6:	4770      	bx	lr

004005a8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4005ac:	624a      	str	r2, [r1, #36]	; 0x24
  4005ae:	4770      	bx	lr

004005b0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4005b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4005b4:	6a08      	ldr	r0, [r1, #32]
}
  4005b6:	4770      	bx	lr

004005b8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4005b8:	b4f0      	push	{r4, r5, r6, r7}
  4005ba:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005bc:	2402      	movs	r4, #2
  4005be:	9401      	str	r4, [sp, #4]
  4005c0:	2408      	movs	r4, #8
  4005c2:	9402      	str	r4, [sp, #8]
  4005c4:	2420      	movs	r4, #32
  4005c6:	9403      	str	r4, [sp, #12]
  4005c8:	2480      	movs	r4, #128	; 0x80
  4005ca:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4005cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4005ce:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4005d0:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4005d2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4005d6:	d814      	bhi.n	400602 <tc_find_mck_divisor+0x4a>
  4005d8:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4005da:	42a0      	cmp	r0, r4
  4005dc:	d217      	bcs.n	40060e <tc_find_mck_divisor+0x56>
  4005de:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4005e0:	af01      	add	r7, sp, #4
  4005e2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4005e6:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4005ea:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4005ec:	4284      	cmp	r4, r0
  4005ee:	d30a      	bcc.n	400606 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4005f0:	4286      	cmp	r6, r0
  4005f2:	d90d      	bls.n	400610 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4005f4:	3501      	adds	r5, #1
	for (ul_index = 0;
  4005f6:	2d05      	cmp	r5, #5
  4005f8:	d1f3      	bne.n	4005e2 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005fa:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005fc:	b006      	add	sp, #24
  4005fe:	bcf0      	pop	{r4, r5, r6, r7}
  400600:	4770      	bx	lr
			return 0;
  400602:	2000      	movs	r0, #0
  400604:	e7fa      	b.n	4005fc <tc_find_mck_divisor+0x44>
  400606:	2000      	movs	r0, #0
  400608:	e7f8      	b.n	4005fc <tc_find_mck_divisor+0x44>
	return 1;
  40060a:	2001      	movs	r0, #1
  40060c:	e7f6      	b.n	4005fc <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40060e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400610:	b12a      	cbz	r2, 40061e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400612:	a906      	add	r1, sp, #24
  400614:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400618:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40061c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40061e:	2b00      	cmp	r3, #0
  400620:	d0f3      	beq.n	40060a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400622:	601d      	str	r5, [r3, #0]
	return 1;
  400624:	2001      	movs	r0, #1
  400626:	e7e9      	b.n	4005fc <tc_find_mck_divisor+0x44>

00400628 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400628:	4b01      	ldr	r3, [pc, #4]	; (400630 <gfx_mono_set_framebuffer+0x8>)
  40062a:	6018      	str	r0, [r3, #0]
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009f8 	.word	0x204009f8

00400634 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400634:	4b02      	ldr	r3, [pc, #8]	; (400640 <gfx_mono_framebuffer_put_byte+0xc>)
  400636:	681b      	ldr	r3, [r3, #0]
  400638:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40063c:	5442      	strb	r2, [r0, r1]
  40063e:	4770      	bx	lr
  400640:	204009f8 	.word	0x204009f8

00400644 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <gfx_mono_framebuffer_get_byte+0xc>)
  400646:	681b      	ldr	r3, [r3, #0]
  400648:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40064c:	5c40      	ldrb	r0, [r0, r1]
  40064e:	4770      	bx	lr
  400650:	204009f8 	.word	0x204009f8

00400654 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400658:	1884      	adds	r4, r0, r2
  40065a:	2c80      	cmp	r4, #128	; 0x80
  40065c:	dd02      	ble.n	400664 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40065e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400662:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400664:	b322      	cbz	r2, 4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400666:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400668:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40066c:	2601      	movs	r6, #1
  40066e:	fa06 f101 	lsl.w	r1, r6, r1
  400672:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400674:	2b01      	cmp	r3, #1
  400676:	d01d      	beq.n	4006b4 <gfx_mono_generic_draw_horizontal_line+0x60>
  400678:	2b00      	cmp	r3, #0
  40067a:	d035      	beq.n	4006e8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40067c:	2b02      	cmp	r3, #2
  40067e:	d117      	bne.n	4006b0 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400680:	3801      	subs	r0, #1
  400682:	b2c7      	uxtb	r7, r0
  400684:	19d4      	adds	r4, r2, r7
  400686:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400688:	f8df a090 	ldr.w	sl, [pc, #144]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40068c:	f04f 0900 	mov.w	r9, #0
  400690:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400694:	4621      	mov	r1, r4
  400696:	4628      	mov	r0, r5
  400698:	47d0      	blx	sl
			temp ^= pixelmask;
  40069a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40069e:	464b      	mov	r3, r9
  4006a0:	b2d2      	uxtb	r2, r2
  4006a2:	4621      	mov	r1, r4
  4006a4:	4628      	mov	r0, r5
  4006a6:	47c0      	blx	r8
  4006a8:	3c01      	subs	r4, #1
  4006aa:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ac:	42bc      	cmp	r4, r7
  4006ae:	d1f1      	bne.n	400694 <gfx_mono_generic_draw_horizontal_line+0x40>
  4006b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006b4:	3801      	subs	r0, #1
  4006b6:	b2c7      	uxtb	r7, r0
  4006b8:	19d4      	adds	r4, r2, r7
  4006ba:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006bc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4006c0:	f04f 0900 	mov.w	r9, #0
  4006c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006c8:	4621      	mov	r1, r4
  4006ca:	4628      	mov	r0, r5
  4006cc:	47d0      	blx	sl
			temp |= pixelmask;
  4006ce:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006d2:	464b      	mov	r3, r9
  4006d4:	b2d2      	uxtb	r2, r2
  4006d6:	4621      	mov	r1, r4
  4006d8:	4628      	mov	r0, r5
  4006da:	47c0      	blx	r8
  4006dc:	3c01      	subs	r4, #1
  4006de:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006e0:	42bc      	cmp	r4, r7
  4006e2:	d1f1      	bne.n	4006c8 <gfx_mono_generic_draw_horizontal_line+0x74>
  4006e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006e8:	3801      	subs	r0, #1
  4006ea:	b2c7      	uxtb	r7, r0
  4006ec:	19d4      	adds	r4, r2, r7
  4006ee:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4006f0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40071c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4006f4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4006f6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400720 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006fa:	4621      	mov	r1, r4
  4006fc:	4628      	mov	r0, r5
  4006fe:	47c0      	blx	r8
			temp &= ~pixelmask;
  400700:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400704:	2300      	movs	r3, #0
  400706:	b2d2      	uxtb	r2, r2
  400708:	4621      	mov	r1, r4
  40070a:	4628      	mov	r0, r5
  40070c:	47c8      	blx	r9
  40070e:	3c01      	subs	r4, #1
  400710:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400712:	42bc      	cmp	r4, r7
  400714:	d1f1      	bne.n	4006fa <gfx_mono_generic_draw_horizontal_line+0xa6>
  400716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40071a:	bf00      	nop
  40071c:	00400955 	.word	0x00400955
  400720:	00400851 	.word	0x00400851

00400724 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400728:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40072c:	b18b      	cbz	r3, 400752 <gfx_mono_generic_draw_filled_rect+0x2e>
  40072e:	461c      	mov	r4, r3
  400730:	4690      	mov	r8, r2
  400732:	4606      	mov	r6, r0
  400734:	1e4d      	subs	r5, r1, #1
  400736:	b2ed      	uxtb	r5, r5
  400738:	442c      	add	r4, r5
  40073a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40073c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400758 <gfx_mono_generic_draw_filled_rect+0x34>
  400740:	463b      	mov	r3, r7
  400742:	4642      	mov	r2, r8
  400744:	4621      	mov	r1, r4
  400746:	4630      	mov	r0, r6
  400748:	47c8      	blx	r9
  40074a:	3c01      	subs	r4, #1
  40074c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40074e:	42ac      	cmp	r4, r5
  400750:	d1f6      	bne.n	400740 <gfx_mono_generic_draw_filled_rect+0x1c>
  400752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400756:	bf00      	nop
  400758:	00400655 	.word	0x00400655

0040075c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400760:	b083      	sub	sp, #12
  400762:	4604      	mov	r4, r0
  400764:	4688      	mov	r8, r1
  400766:	4691      	mov	r9, r2
  400768:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40076a:	7a5b      	ldrb	r3, [r3, #9]
  40076c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400770:	2100      	movs	r1, #0
  400772:	9100      	str	r1, [sp, #0]
  400774:	4649      	mov	r1, r9
  400776:	4640      	mov	r0, r8
  400778:	4d21      	ldr	r5, [pc, #132]	; (400800 <gfx_mono_draw_char+0xa4>)
  40077a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  40077c:	f89b 3000 	ldrb.w	r3, [fp]
  400780:	b113      	cbz	r3, 400788 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400782:	b003      	add	sp, #12
  400784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400788:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40078c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40078e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400792:	bf18      	it	ne
  400794:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400796:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40079a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40079e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4007a0:	fb17 f70a 	smulbb	r7, r7, sl
  4007a4:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4007a8:	f8db 3004 	ldr.w	r3, [fp, #4]
  4007ac:	fa13 f787 	uxtah	r7, r3, r7
  4007b0:	e01f      	b.n	4007f2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4007b2:	0064      	lsls	r4, r4, #1
  4007b4:	b2e4      	uxtb	r4, r4
  4007b6:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4007b8:	b2eb      	uxtb	r3, r5
  4007ba:	429e      	cmp	r6, r3
  4007bc:	d910      	bls.n	4007e0 <gfx_mono_draw_char+0x84>
  4007be:	b2eb      	uxtb	r3, r5
  4007c0:	eb08 0003 	add.w	r0, r8, r3
  4007c4:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4007c6:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4007ca:	bf08      	it	eq
  4007cc:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4007d0:	f014 0f80 	tst.w	r4, #128	; 0x80
  4007d4:	d0ed      	beq.n	4007b2 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007d6:	2201      	movs	r2, #1
  4007d8:	4649      	mov	r1, r9
  4007da:	4b0a      	ldr	r3, [pc, #40]	; (400804 <gfx_mono_draw_char+0xa8>)
  4007dc:	4798      	blx	r3
  4007de:	e7e8      	b.n	4007b2 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4007e0:	f109 0901 	add.w	r9, r9, #1
  4007e4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4007e8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4007ec:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4007f0:	d0c7      	beq.n	400782 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4007f2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4007f6:	2e00      	cmp	r6, #0
  4007f8:	d0f2      	beq.n	4007e0 <gfx_mono_draw_char+0x84>
  4007fa:	2500      	movs	r5, #0
  4007fc:	462c      	mov	r4, r5
  4007fe:	e7de      	b.n	4007be <gfx_mono_draw_char+0x62>
  400800:	00400725 	.word	0x00400725
  400804:	004008f1 	.word	0x004008f1

00400808 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40080c:	4604      	mov	r4, r0
  40080e:	4690      	mov	r8, r2
  400810:	461d      	mov	r5, r3
  400812:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400814:	4f0d      	ldr	r7, [pc, #52]	; (40084c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400816:	460e      	mov	r6, r1
  400818:	e008      	b.n	40082c <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40081a:	7a6a      	ldrb	r2, [r5, #9]
  40081c:	3201      	adds	r2, #1
  40081e:	4442      	add	r2, r8
  400820:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400824:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400826:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40082a:	b16b      	cbz	r3, 400848 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  40082c:	7820      	ldrb	r0, [r4, #0]
  40082e:	280a      	cmp	r0, #10
  400830:	d0f3      	beq.n	40081a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400832:	280d      	cmp	r0, #13
  400834:	d0f7      	beq.n	400826 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400836:	462b      	mov	r3, r5
  400838:	4642      	mov	r2, r8
  40083a:	4649      	mov	r1, r9
  40083c:	47b8      	blx	r7
			x += font->width;
  40083e:	7a2b      	ldrb	r3, [r5, #8]
  400840:	4499      	add	r9, r3
  400842:	fa5f f989 	uxtb.w	r9, r9
  400846:	e7ee      	b.n	400826 <gfx_mono_draw_string+0x1e>
}
  400848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40084c:	0040075d 	.word	0x0040075d

00400850 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400850:	b570      	push	{r4, r5, r6, lr}
  400852:	4604      	mov	r4, r0
  400854:	460d      	mov	r5, r1
  400856:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400858:	b91b      	cbnz	r3, 400862 <gfx_mono_ssd1306_put_byte+0x12>
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <gfx_mono_ssd1306_put_byte+0x40>)
  40085c:	4798      	blx	r3
  40085e:	42b0      	cmp	r0, r6
  400860:	d015      	beq.n	40088e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400862:	4632      	mov	r2, r6
  400864:	4629      	mov	r1, r5
  400866:	4620      	mov	r0, r4
  400868:	4b0a      	ldr	r3, [pc, #40]	; (400894 <gfx_mono_ssd1306_put_byte+0x44>)
  40086a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40086c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400870:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400874:	4c08      	ldr	r4, [pc, #32]	; (400898 <gfx_mono_ssd1306_put_byte+0x48>)
  400876:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400878:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40087c:	f040 0010 	orr.w	r0, r0, #16
  400880:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400882:	f005 000f 	and.w	r0, r5, #15
  400886:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400888:	4630      	mov	r0, r6
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <gfx_mono_ssd1306_put_byte+0x4c>)
  40088c:	4798      	blx	r3
  40088e:	bd70      	pop	{r4, r5, r6, pc}
  400890:	00400645 	.word	0x00400645
  400894:	00400635 	.word	0x00400635
  400898:	00400961 	.word	0x00400961
  40089c:	00400b81 	.word	0x00400b81

004008a0 <gfx_mono_ssd1306_init>:
{
  4008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4008a4:	480d      	ldr	r0, [pc, #52]	; (4008dc <gfx_mono_ssd1306_init+0x3c>)
  4008a6:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <gfx_mono_ssd1306_init+0x40>)
  4008a8:	4798      	blx	r3
	ssd1306_init();
  4008aa:	4b0e      	ldr	r3, [pc, #56]	; (4008e4 <gfx_mono_ssd1306_init+0x44>)
  4008ac:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4008ae:	2040      	movs	r0, #64	; 0x40
  4008b0:	4b0d      	ldr	r3, [pc, #52]	; (4008e8 <gfx_mono_ssd1306_init+0x48>)
  4008b2:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008b4:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008b6:	f04f 0801 	mov.w	r8, #1
  4008ba:	462f      	mov	r7, r5
  4008bc:	4e0b      	ldr	r6, [pc, #44]	; (4008ec <gfx_mono_ssd1306_init+0x4c>)
{
  4008be:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4008c0:	4643      	mov	r3, r8
  4008c2:	463a      	mov	r2, r7
  4008c4:	b2e1      	uxtb	r1, r4
  4008c6:	4628      	mov	r0, r5
  4008c8:	47b0      	blx	r6
  4008ca:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4008cc:	2c80      	cmp	r4, #128	; 0x80
  4008ce:	d1f7      	bne.n	4008c0 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4008d0:	3501      	adds	r5, #1
  4008d2:	b2ed      	uxtb	r5, r5
  4008d4:	2d04      	cmp	r5, #4
  4008d6:	d1f2      	bne.n	4008be <gfx_mono_ssd1306_init+0x1e>
  4008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008dc:	204009fc 	.word	0x204009fc
  4008e0:	00400629 	.word	0x00400629
  4008e4:	004009a1 	.word	0x004009a1
  4008e8:	00400961 	.word	0x00400961
  4008ec:	00400851 	.word	0x00400851

004008f0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4008f0:	09c3      	lsrs	r3, r0, #7
  4008f2:	d12a      	bne.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
  4008f4:	291f      	cmp	r1, #31
  4008f6:	d828      	bhi.n	40094a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008fc:	4614      	mov	r4, r2
  4008fe:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400900:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400902:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400906:	2201      	movs	r2, #1
  400908:	fa02 f701 	lsl.w	r7, r2, r1
  40090c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400910:	4601      	mov	r1, r0
  400912:	4630      	mov	r0, r6
  400914:	4b0d      	ldr	r3, [pc, #52]	; (40094c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400916:	4798      	blx	r3
  400918:	4602      	mov	r2, r0
	switch (color) {
  40091a:	2c01      	cmp	r4, #1
  40091c:	d009      	beq.n	400932 <gfx_mono_ssd1306_draw_pixel+0x42>
  40091e:	b164      	cbz	r4, 40093a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400920:	2c02      	cmp	r4, #2
  400922:	d00e      	beq.n	400942 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400924:	2300      	movs	r3, #0
  400926:	4629      	mov	r1, r5
  400928:	4630      	mov	r0, r6
  40092a:	4c09      	ldr	r4, [pc, #36]	; (400950 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40092c:	47a0      	blx	r4
  40092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400932:	ea48 0200 	orr.w	r2, r8, r0
  400936:	b2d2      	uxtb	r2, r2
		break;
  400938:	e7f4      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40093a:	ea20 0207 	bic.w	r2, r0, r7
  40093e:	b2d2      	uxtb	r2, r2
		break;
  400940:	e7f0      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400942:	ea88 0200 	eor.w	r2, r8, r0
  400946:	b2d2      	uxtb	r2, r2
		break;
  400948:	e7ec      	b.n	400924 <gfx_mono_ssd1306_draw_pixel+0x34>
  40094a:	4770      	bx	lr
  40094c:	00400645 	.word	0x00400645
  400950:	00400851 	.word	0x00400851

00400954 <gfx_mono_ssd1306_get_byte>:
{
  400954:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400956:	4b01      	ldr	r3, [pc, #4]	; (40095c <gfx_mono_ssd1306_get_byte+0x8>)
  400958:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40095a:	bd08      	pop	{r3, pc}
  40095c:	00400645 	.word	0x00400645

00400960 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400960:	b538      	push	{r3, r4, r5, lr}
  400962:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400964:	2208      	movs	r2, #8
  400966:	4b09      	ldr	r3, [pc, #36]	; (40098c <ssd1306_write_command+0x2c>)
  400968:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40096a:	4c09      	ldr	r4, [pc, #36]	; (400990 <ssd1306_write_command+0x30>)
  40096c:	2101      	movs	r1, #1
  40096e:	4620      	mov	r0, r4
  400970:	4b08      	ldr	r3, [pc, #32]	; (400994 <ssd1306_write_command+0x34>)
  400972:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400974:	2301      	movs	r3, #1
  400976:	461a      	mov	r2, r3
  400978:	4629      	mov	r1, r5
  40097a:	4620      	mov	r0, r4
  40097c:	4c06      	ldr	r4, [pc, #24]	; (400998 <ssd1306_write_command+0x38>)
  40097e:	47a0      	blx	r4
	delay_us(10);
  400980:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <ssd1306_write_command+0x3c>)
  400986:	4798      	blx	r3
  400988:	bd38      	pop	{r3, r4, r5, pc}
  40098a:	bf00      	nop
  40098c:	400e1000 	.word	0x400e1000
  400990:	40008000 	.word	0x40008000
  400994:	00400461 	.word	0x00400461
  400998:	00400477 	.word	0x00400477
  40099c:	20400001 	.word	0x20400001

004009a0 <ssd1306_init>:
{
  4009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009a4:	4d66      	ldr	r5, [pc, #408]	; (400b40 <ssd1306_init+0x1a0>)
  4009a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4009aa:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009ac:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009b0:	4b64      	ldr	r3, [pc, #400]	; (400b44 <ssd1306_init+0x1a4>)
  4009b2:	2708      	movs	r7, #8
  4009b4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009ba:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009bc:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009c4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009c8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4009ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009ce:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4009d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4009d6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4009d8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009da:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009de:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009e0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009e2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009e8:	f022 0208 	bic.w	r2, r2, #8
  4009ec:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009f0:	f022 0208 	bic.w	r2, r2, #8
  4009f4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4009f6:	601f      	str	r7, [r3, #0]
  4009f8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009fa:	631f      	str	r7, [r3, #48]	; 0x30
  4009fc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4009fe:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400b7c <ssd1306_init+0x1dc>
  400a02:	2300      	movs	r3, #0
  400a04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a0c:	4640      	mov	r0, r8
  400a0e:	4c4e      	ldr	r4, [pc, #312]	; (400b48 <ssd1306_init+0x1a8>)
  400a10:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a12:	2300      	movs	r3, #0
  400a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a1c:	4640      	mov	r0, r8
  400a1e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a20:	2300      	movs	r3, #0
  400a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a2a:	4640      	mov	r0, r8
  400a2c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a2e:	2300      	movs	r3, #0
  400a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a38:	4640      	mov	r0, r8
  400a3a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a3c:	2300      	movs	r3, #0
  400a3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a46:	4640      	mov	r0, r8
  400a48:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a4a:	2300      	movs	r3, #0
  400a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a54:	4640      	mov	r0, r8
  400a56:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400a58:	4c3c      	ldr	r4, [pc, #240]	; (400b4c <ssd1306_init+0x1ac>)
  400a5a:	f04f 0902 	mov.w	r9, #2
  400a5e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a62:	f04f 0880 	mov.w	r8, #128	; 0x80
  400a66:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a6a:	6863      	ldr	r3, [r4, #4]
  400a6c:	f043 0301 	orr.w	r3, r3, #1
  400a70:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400a72:	463a      	mov	r2, r7
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b35      	ldr	r3, [pc, #212]	; (400b50 <ssd1306_init+0x1b0>)
  400a7a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400a7c:	2200      	movs	r2, #0
  400a7e:	2101      	movs	r1, #1
  400a80:	4620      	mov	r0, r4
  400a82:	4b34      	ldr	r3, [pc, #208]	; (400b54 <ssd1306_init+0x1b4>)
  400a84:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400a86:	2200      	movs	r2, #0
  400a88:	2101      	movs	r1, #1
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b32      	ldr	r3, [pc, #200]	; (400b58 <ssd1306_init+0x1b8>)
  400a8e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a90:	6863      	ldr	r3, [r4, #4]
  400a92:	f023 0302 	bic.w	r3, r3, #2
  400a96:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400a98:	2200      	movs	r2, #0
  400a9a:	2101      	movs	r1, #1
  400a9c:	4620      	mov	r0, r4
  400a9e:	4b2f      	ldr	r3, [pc, #188]	; (400b5c <ssd1306_init+0x1bc>)
  400aa0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400aa8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400aaa:	6863      	ldr	r3, [r4, #4]
  400aac:	f043 0310 	orr.w	r3, r3, #16
  400ab0:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400ab2:	492b      	ldr	r1, [pc, #172]	; (400b60 <ssd1306_init+0x1c0>)
  400ab4:	482b      	ldr	r0, [pc, #172]	; (400b64 <ssd1306_init+0x1c4>)
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ssd1306_init+0x1c8>)
  400ab8:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400aba:	b2c2      	uxtb	r2, r0
  400abc:	2101      	movs	r1, #1
  400abe:	4620      	mov	r0, r4
  400ac0:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <ssd1306_init+0x1cc>)
  400ac2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ssd1306_init+0x1d0>)
  400ac8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400aca:	2301      	movs	r3, #1
  400acc:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400ace:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ad4:	4c27      	ldr	r4, [pc, #156]	; (400b74 <ssd1306_init+0x1d4>)
  400ad6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ad8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400ade:	47a0      	blx	r4
  400ae0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400ae2:	20a8      	movs	r0, #168	; 0xa8
  400ae4:	4c24      	ldr	r4, [pc, #144]	; (400b78 <ssd1306_init+0x1d8>)
  400ae6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ae8:	201f      	movs	r0, #31
  400aea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400aec:	20d3      	movs	r0, #211	; 0xd3
  400aee:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400af0:	2000      	movs	r0, #0
  400af2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400af4:	2040      	movs	r0, #64	; 0x40
  400af6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400af8:	20a1      	movs	r0, #161	; 0xa1
  400afa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400afc:	20c8      	movs	r0, #200	; 0xc8
  400afe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b00:	20da      	movs	r0, #218	; 0xda
  400b02:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b04:	4648      	mov	r0, r9
  400b06:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b08:	2081      	movs	r0, #129	; 0x81
  400b0a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b0c:	208f      	movs	r0, #143	; 0x8f
  400b0e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b10:	20a4      	movs	r0, #164	; 0xa4
  400b12:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b14:	20a6      	movs	r0, #166	; 0xa6
  400b16:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b18:	20d5      	movs	r0, #213	; 0xd5
  400b1a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b1c:	4640      	mov	r0, r8
  400b1e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b20:	208d      	movs	r0, #141	; 0x8d
  400b22:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b24:	2014      	movs	r0, #20
  400b26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b28:	20db      	movs	r0, #219	; 0xdb
  400b2a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b2c:	2040      	movs	r0, #64	; 0x40
  400b2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b30:	20d9      	movs	r0, #217	; 0xd9
  400b32:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b34:	20f1      	movs	r0, #241	; 0xf1
  400b36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400b38:	20af      	movs	r0, #175	; 0xaf
  400b3a:	47a0      	blx	r4
  400b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b40:	400e1200 	.word	0x400e1200
  400b44:	400e1000 	.word	0x400e1000
  400b48:	00400f4d 	.word	0x00400f4d
  400b4c:	40008000 	.word	0x40008000
  400b50:	004004e7 	.word	0x004004e7
  400b54:	004004ab 	.word	0x004004ab
  400b58:	004004c9 	.word	0x004004c9
  400b5c:	0040052d 	.word	0x0040052d
  400b60:	08f0d180 	.word	0x08f0d180
  400b64:	001e8480 	.word	0x001e8480
  400b68:	00400541 	.word	0x00400541
  400b6c:	00400557 	.word	0x00400557
  400b70:	00400435 	.word	0x00400435
  400b74:	20400001 	.word	0x20400001
  400b78:	00400961 	.word	0x00400961
  400b7c:	400e1400 	.word	0x400e1400

00400b80 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400b80:	b538      	push	{r3, r4, r5, lr}
  400b82:	4605      	mov	r5, r0
  400b84:	2208      	movs	r2, #8
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <ssd1306_write_data+0x2c>)
  400b88:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b8a:	4c09      	ldr	r4, [pc, #36]	; (400bb0 <ssd1306_write_data+0x30>)
  400b8c:	2101      	movs	r1, #1
  400b8e:	4620      	mov	r0, r4
  400b90:	4b08      	ldr	r3, [pc, #32]	; (400bb4 <ssd1306_write_data+0x34>)
  400b92:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400b94:	2301      	movs	r3, #1
  400b96:	461a      	mov	r2, r3
  400b98:	4629      	mov	r1, r5
  400b9a:	4620      	mov	r0, r4
  400b9c:	4c06      	ldr	r4, [pc, #24]	; (400bb8 <ssd1306_write_data+0x38>)
  400b9e:	47a0      	blx	r4
	delay_us(10);
  400ba0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <ssd1306_write_data+0x3c>)
  400ba6:	4798      	blx	r3
  400ba8:	bd38      	pop	{r3, r4, r5, pc}
  400baa:	bf00      	nop
  400bac:	400e1000 	.word	0x400e1000
  400bb0:	40008000 	.word	0x40008000
  400bb4:	00400461 	.word	0x00400461
  400bb8:	00400477 	.word	0x00400477
  400bbc:	20400001 	.word	0x20400001

00400bc0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bc0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bc2:	4810      	ldr	r0, [pc, #64]	; (400c04 <sysclk_init+0x44>)
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <sysclk_init+0x48>)
  400bc6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bc8:	213e      	movs	r1, #62	; 0x3e
  400bca:	2000      	movs	r0, #0
  400bcc:	4b0f      	ldr	r3, [pc, #60]	; (400c0c <sysclk_init+0x4c>)
  400bce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400bd0:	4c0f      	ldr	r4, [pc, #60]	; (400c10 <sysclk_init+0x50>)
  400bd2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d0fc      	beq.n	400bd2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400bd8:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <sysclk_init+0x54>)
  400bda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400bdc:	4a0e      	ldr	r2, [pc, #56]	; (400c18 <sysclk_init+0x58>)
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <sysclk_init+0x5c>)
  400be0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400be2:	4c0f      	ldr	r4, [pc, #60]	; (400c20 <sysclk_init+0x60>)
  400be4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400be6:	2800      	cmp	r0, #0
  400be8:	d0fc      	beq.n	400be4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400bea:	2002      	movs	r0, #2
  400bec:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <sysclk_init+0x64>)
  400bee:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400bf0:	2000      	movs	r0, #0
  400bf2:	4b0d      	ldr	r3, [pc, #52]	; (400c28 <sysclk_init+0x68>)
  400bf4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400bf6:	4b0d      	ldr	r3, [pc, #52]	; (400c2c <sysclk_init+0x6c>)
  400bf8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400bfa:	4802      	ldr	r0, [pc, #8]	; (400c04 <sysclk_init+0x44>)
  400bfc:	4b02      	ldr	r3, [pc, #8]	; (400c08 <sysclk_init+0x48>)
  400bfe:	4798      	blx	r3
  400c00:	bd10      	pop	{r4, pc}
  400c02:	bf00      	nop
  400c04:	11e1a300 	.word	0x11e1a300
  400c08:	00401899 	.word	0x00401899
  400c0c:	004011dd 	.word	0x004011dd
  400c10:	00401231 	.word	0x00401231
  400c14:	00401241 	.word	0x00401241
  400c18:	20183f01 	.word	0x20183f01
  400c1c:	400e0600 	.word	0x400e0600
  400c20:	00401251 	.word	0x00401251
  400c24:	00401141 	.word	0x00401141
  400c28:	00401179 	.word	0x00401179
  400c2c:	0040178d 	.word	0x0040178d

00400c30 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400c34:	b980      	cbnz	r0, 400c58 <_read+0x28>
  400c36:	460c      	mov	r4, r1
  400c38:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400c3a:	2a00      	cmp	r2, #0
  400c3c:	dd0f      	ble.n	400c5e <_read+0x2e>
  400c3e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400c40:	4e08      	ldr	r6, [pc, #32]	; (400c64 <_read+0x34>)
  400c42:	4d09      	ldr	r5, [pc, #36]	; (400c68 <_read+0x38>)
  400c44:	6830      	ldr	r0, [r6, #0]
  400c46:	4621      	mov	r1, r4
  400c48:	682b      	ldr	r3, [r5, #0]
  400c4a:	4798      	blx	r3
		ptr++;
  400c4c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400c4e:	42bc      	cmp	r4, r7
  400c50:	d1f8      	bne.n	400c44 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400c52:	4640      	mov	r0, r8
  400c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c58:	f04f 38ff 	mov.w	r8, #4294967295
  400c5c:	e7f9      	b.n	400c52 <_read+0x22>
	for (; len > 0; --len) {
  400c5e:	4680      	mov	r8, r0
  400c60:	e7f7      	b.n	400c52 <_read+0x22>
  400c62:	bf00      	nop
  400c64:	20400e00 	.word	0x20400e00
  400c68:	20400df8 	.word	0x20400df8

00400c6c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400c6c:	3801      	subs	r0, #1
  400c6e:	2802      	cmp	r0, #2
  400c70:	d815      	bhi.n	400c9e <_write+0x32>
{
  400c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c76:	460e      	mov	r6, r1
  400c78:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400c7a:	b19a      	cbz	r2, 400ca4 <_write+0x38>
  400c7c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400c7e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400cb8 <_write+0x4c>
  400c82:	4f0c      	ldr	r7, [pc, #48]	; (400cb4 <_write+0x48>)
  400c84:	f8d8 0000 	ldr.w	r0, [r8]
  400c88:	f815 1b01 	ldrb.w	r1, [r5], #1
  400c8c:	683b      	ldr	r3, [r7, #0]
  400c8e:	4798      	blx	r3
  400c90:	2800      	cmp	r0, #0
  400c92:	db0a      	blt.n	400caa <_write+0x3e>
  400c94:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400c96:	3c01      	subs	r4, #1
  400c98:	d1f4      	bne.n	400c84 <_write+0x18>
  400c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c9e:	f04f 30ff 	mov.w	r0, #4294967295
  400ca2:	4770      	bx	lr
	for (; len != 0; --len) {
  400ca4:	4610      	mov	r0, r2
  400ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400caa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cb2:	bf00      	nop
  400cb4:	20400dfc 	.word	0x20400dfc
  400cb8:	20400e00 	.word	0x20400e00

00400cbc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400cbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cc2:	4b5c      	ldr	r3, [pc, #368]	; (400e34 <board_init+0x178>)
  400cc4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400cca:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400cce:	4b5a      	ldr	r3, [pc, #360]	; (400e38 <board_init+0x17c>)
  400cd0:	2200      	movs	r2, #0
  400cd2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400cd6:	695a      	ldr	r2, [r3, #20]
  400cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400cdc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ce2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ce6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400cea:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400cee:	f007 0007 	and.w	r0, r7, #7
  400cf2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400cf4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400cf8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400cfc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d00:	f3bf 8f4f 	dsb	sy
  400d04:	f04f 34ff 	mov.w	r4, #4294967295
  400d08:	fa04 fc00 	lsl.w	ip, r4, r0
  400d0c:	fa06 f000 	lsl.w	r0, r6, r0
  400d10:	fa04 f40e 	lsl.w	r4, r4, lr
  400d14:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d18:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d1a:	463a      	mov	r2, r7
  400d1c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d1e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400d22:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400d26:	3a01      	subs	r2, #1
  400d28:	4423      	add	r3, r4
  400d2a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400d2e:	d1f6      	bne.n	400d1e <board_init+0x62>
        } while(sets--);
  400d30:	3e01      	subs	r6, #1
  400d32:	4460      	add	r0, ip
  400d34:	f1b6 3fff 	cmp.w	r6, #4294967295
  400d38:	d1ef      	bne.n	400d1a <board_init+0x5e>
  400d3a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400d3e:	4b3e      	ldr	r3, [pc, #248]	; (400e38 <board_init+0x17c>)
  400d40:	695a      	ldr	r2, [r3, #20]
  400d42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400d46:	615a      	str	r2, [r3, #20]
  400d48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d4c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d50:	4a3a      	ldr	r2, [pc, #232]	; (400e3c <board_init+0x180>)
  400d52:	493b      	ldr	r1, [pc, #236]	; (400e40 <board_init+0x184>)
  400d54:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d56:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400d5a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d60:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d64:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d68:	f022 0201 	bic.w	r2, r2, #1
  400d6c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d70:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d74:	f022 0201 	bic.w	r2, r2, #1
  400d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d80:	f3bf 8f6f 	isb	sy
  400d84:	200a      	movs	r0, #10
  400d86:	4c2f      	ldr	r4, [pc, #188]	; (400e44 <board_init+0x188>)
  400d88:	47a0      	blx	r4
  400d8a:	200b      	movs	r0, #11
  400d8c:	47a0      	blx	r4
  400d8e:	200c      	movs	r0, #12
  400d90:	47a0      	blx	r4
  400d92:	2010      	movs	r0, #16
  400d94:	47a0      	blx	r4
  400d96:	2011      	movs	r0, #17
  400d98:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d9a:	4b2b      	ldr	r3, [pc, #172]	; (400e48 <board_init+0x18c>)
  400d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400da0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400da2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400da6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400da8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400db0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400db6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dbc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400dbe:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400dc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400dc6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dca:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dcc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400dd2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400dd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400dd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400de0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400de4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dea:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dec:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400df2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400df4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400df8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dfa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dfc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400e00:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e02:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e04:	4a11      	ldr	r2, [pc, #68]	; (400e4c <board_init+0x190>)
  400e06:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400e0a:	f043 0310 	orr.w	r3, r3, #16
  400e0e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e12:	4b0f      	ldr	r3, [pc, #60]	; (400e50 <board_init+0x194>)
  400e14:	2210      	movs	r2, #16
  400e16:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e1c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e1e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e24:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e26:	4311      	orrs	r1, r2
  400e28:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e2a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e2c:	4311      	orrs	r1, r2
  400e2e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e30:	605a      	str	r2, [r3, #4]
  400e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e34:	400e1850 	.word	0x400e1850
  400e38:	e000ed00 	.word	0xe000ed00
  400e3c:	400e0c00 	.word	0x400e0c00
  400e40:	5a00080c 	.word	0x5a00080c
  400e44:	00401261 	.word	0x00401261
  400e48:	400e1200 	.word	0x400e1200
  400e4c:	40088000 	.word	0x40088000
  400e50:	400e1000 	.word	0x400e1000

00400e54 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400e54:	6301      	str	r1, [r0, #48]	; 0x30
  400e56:	4770      	bx	lr

00400e58 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400e58:	6341      	str	r1, [r0, #52]	; 0x34
  400e5a:	4770      	bx	lr

00400e5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e5c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e5e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e62:	d03a      	beq.n	400eda <pio_set_peripheral+0x7e>
  400e64:	d813      	bhi.n	400e8e <pio_set_peripheral+0x32>
  400e66:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e6a:	d025      	beq.n	400eb8 <pio_set_peripheral+0x5c>
  400e6c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e70:	d10a      	bne.n	400e88 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e72:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e74:	4313      	orrs	r3, r2
  400e76:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e78:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e7a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e7c:	400b      	ands	r3, r1
  400e7e:	ea23 0302 	bic.w	r3, r3, r2
  400e82:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e84:	6042      	str	r2, [r0, #4]
  400e86:	4770      	bx	lr
	switch (ul_type) {
  400e88:	2900      	cmp	r1, #0
  400e8a:	d1fb      	bne.n	400e84 <pio_set_peripheral+0x28>
  400e8c:	4770      	bx	lr
  400e8e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e92:	d021      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400e94:	d809      	bhi.n	400eaa <pio_set_peripheral+0x4e>
  400e96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e9a:	d1f3      	bne.n	400e84 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e9e:	4313      	orrs	r3, r2
  400ea0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ea2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ea4:	4313      	orrs	r3, r2
  400ea6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ea8:	e7ec      	b.n	400e84 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400eaa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400eae:	d013      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400eb0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400eb4:	d010      	beq.n	400ed8 <pio_set_peripheral+0x7c>
  400eb6:	e7e5      	b.n	400e84 <pio_set_peripheral+0x28>
{
  400eb8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eba:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ebc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ebe:	43d3      	mvns	r3, r2
  400ec0:	4021      	ands	r1, r4
  400ec2:	461c      	mov	r4, r3
  400ec4:	4019      	ands	r1, r3
  400ec6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ec8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400eca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ecc:	400b      	ands	r3, r1
  400ece:	4023      	ands	r3, r4
  400ed0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400ed2:	6042      	str	r2, [r0, #4]
}
  400ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ed8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eda:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400edc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400ede:	400b      	ands	r3, r1
  400ee0:	ea23 0302 	bic.w	r3, r3, r2
  400ee4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ee6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ee8:	4313      	orrs	r3, r2
  400eea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400eec:	e7ca      	b.n	400e84 <pio_set_peripheral+0x28>

00400eee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400eee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ef0:	f012 0f01 	tst.w	r2, #1
  400ef4:	d10d      	bne.n	400f12 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400ef6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ef8:	f012 0f0a 	tst.w	r2, #10
  400efc:	d00b      	beq.n	400f16 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400efe:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400f00:	f012 0f02 	tst.w	r2, #2
  400f04:	d109      	bne.n	400f1a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400f06:	f012 0f08 	tst.w	r2, #8
  400f0a:	d008      	beq.n	400f1e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400f0c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400f10:	e005      	b.n	400f1e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400f12:	6641      	str	r1, [r0, #100]	; 0x64
  400f14:	e7f0      	b.n	400ef8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400f16:	6241      	str	r1, [r0, #36]	; 0x24
  400f18:	e7f2      	b.n	400f00 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400f1a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400f1e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400f20:	6001      	str	r1, [r0, #0]
  400f22:	4770      	bx	lr

00400f24 <pio_set_output>:
{
  400f24:	b410      	push	{r4}
  400f26:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400f28:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f2a:	b94c      	cbnz	r4, 400f40 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400f2c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400f2e:	b14b      	cbz	r3, 400f44 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400f30:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400f32:	b94a      	cbnz	r2, 400f48 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400f34:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400f36:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400f38:	6001      	str	r1, [r0, #0]
}
  400f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f3e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400f40:	6641      	str	r1, [r0, #100]	; 0x64
  400f42:	e7f4      	b.n	400f2e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400f44:	6541      	str	r1, [r0, #84]	; 0x54
  400f46:	e7f4      	b.n	400f32 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400f48:	6301      	str	r1, [r0, #48]	; 0x30
  400f4a:	e7f4      	b.n	400f36 <pio_set_output+0x12>

00400f4c <pio_configure>:
{
  400f4c:	b570      	push	{r4, r5, r6, lr}
  400f4e:	b082      	sub	sp, #8
  400f50:	4605      	mov	r5, r0
  400f52:	4616      	mov	r6, r2
  400f54:	461c      	mov	r4, r3
	switch (ul_type) {
  400f56:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f5a:	d014      	beq.n	400f86 <pio_configure+0x3a>
  400f5c:	d90a      	bls.n	400f74 <pio_configure+0x28>
  400f5e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f62:	d024      	beq.n	400fae <pio_configure+0x62>
  400f64:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f68:	d021      	beq.n	400fae <pio_configure+0x62>
  400f6a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f6e:	d017      	beq.n	400fa0 <pio_configure+0x54>
		return 0;
  400f70:	2000      	movs	r0, #0
  400f72:	e01a      	b.n	400faa <pio_configure+0x5e>
	switch (ul_type) {
  400f74:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f78:	d005      	beq.n	400f86 <pio_configure+0x3a>
  400f7a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f7e:	d002      	beq.n	400f86 <pio_configure+0x3a>
  400f80:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f84:	d1f4      	bne.n	400f70 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400f86:	4632      	mov	r2, r6
  400f88:	4628      	mov	r0, r5
  400f8a:	4b11      	ldr	r3, [pc, #68]	; (400fd0 <pio_configure+0x84>)
  400f8c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f8e:	f014 0f01 	tst.w	r4, #1
  400f92:	d102      	bne.n	400f9a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400f94:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400f96:	2001      	movs	r0, #1
  400f98:	e007      	b.n	400faa <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400f9a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400f9c:	2001      	movs	r0, #1
  400f9e:	e004      	b.n	400faa <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400fa0:	461a      	mov	r2, r3
  400fa2:	4631      	mov	r1, r6
  400fa4:	4b0b      	ldr	r3, [pc, #44]	; (400fd4 <pio_configure+0x88>)
  400fa6:	4798      	blx	r3
	return 1;
  400fa8:	2001      	movs	r0, #1
}
  400faa:	b002      	add	sp, #8
  400fac:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400fae:	f004 0301 	and.w	r3, r4, #1
  400fb2:	9300      	str	r3, [sp, #0]
  400fb4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400fb8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fbc:	bf14      	ite	ne
  400fbe:	2200      	movne	r2, #0
  400fc0:	2201      	moveq	r2, #1
  400fc2:	4631      	mov	r1, r6
  400fc4:	4628      	mov	r0, r5
  400fc6:	4c04      	ldr	r4, [pc, #16]	; (400fd8 <pio_configure+0x8c>)
  400fc8:	47a0      	blx	r4
	return 1;
  400fca:	2001      	movs	r0, #1
		break;
  400fcc:	e7ed      	b.n	400faa <pio_configure+0x5e>
  400fce:	bf00      	nop
  400fd0:	00400e5d 	.word	0x00400e5d
  400fd4:	00400eef 	.word	0x00400eef
  400fd8:	00400f25 	.word	0x00400f25

00400fdc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400fdc:	f012 0f10 	tst.w	r2, #16
  400fe0:	d012      	beq.n	401008 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400fe2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400fe6:	f012 0f20 	tst.w	r2, #32
  400fea:	d007      	beq.n	400ffc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400fec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400ff0:	f012 0f40 	tst.w	r2, #64	; 0x40
  400ff4:	d005      	beq.n	401002 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400ff6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400ffa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400ffc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401000:	e7f6      	b.n	400ff0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401002:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401006:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401008:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40100c:	4770      	bx	lr

0040100e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40100e:	6401      	str	r1, [r0, #64]	; 0x40
  401010:	4770      	bx	lr

00401012 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401012:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401014:	4770      	bx	lr

00401016 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401016:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401018:	4770      	bx	lr
	...

0040101c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401020:	4604      	mov	r4, r0
  401022:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401024:	4b0e      	ldr	r3, [pc, #56]	; (401060 <pio_handler_process+0x44>)
  401026:	4798      	blx	r3
  401028:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40102a:	4620      	mov	r0, r4
  40102c:	4b0d      	ldr	r3, [pc, #52]	; (401064 <pio_handler_process+0x48>)
  40102e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401030:	4005      	ands	r5, r0
  401032:	d013      	beq.n	40105c <pio_handler_process+0x40>
  401034:	4c0c      	ldr	r4, [pc, #48]	; (401068 <pio_handler_process+0x4c>)
  401036:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40103a:	e003      	b.n	401044 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40103c:	42b4      	cmp	r4, r6
  40103e:	d00d      	beq.n	40105c <pio_handler_process+0x40>
  401040:	3410      	adds	r4, #16
		while (status != 0) {
  401042:	b15d      	cbz	r5, 40105c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401044:	6820      	ldr	r0, [r4, #0]
  401046:	4540      	cmp	r0, r8
  401048:	d1f8      	bne.n	40103c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40104a:	6861      	ldr	r1, [r4, #4]
  40104c:	4229      	tst	r1, r5
  40104e:	d0f5      	beq.n	40103c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401050:	68e3      	ldr	r3, [r4, #12]
  401052:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401054:	6863      	ldr	r3, [r4, #4]
  401056:	ea25 0503 	bic.w	r5, r5, r3
  40105a:	e7ef      	b.n	40103c <pio_handler_process+0x20>
  40105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401060:	00401013 	.word	0x00401013
  401064:	00401017 	.word	0x00401017
  401068:	20400bfc 	.word	0x20400bfc

0040106c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40106e:	4c18      	ldr	r4, [pc, #96]	; (4010d0 <pio_handler_set+0x64>)
  401070:	6826      	ldr	r6, [r4, #0]
  401072:	2e06      	cmp	r6, #6
  401074:	d82a      	bhi.n	4010cc <pio_handler_set+0x60>
  401076:	f04f 0c00 	mov.w	ip, #0
  40107a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40107c:	4f15      	ldr	r7, [pc, #84]	; (4010d4 <pio_handler_set+0x68>)
  40107e:	e004      	b.n	40108a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401080:	3401      	adds	r4, #1
  401082:	b2e4      	uxtb	r4, r4
  401084:	46a4      	mov	ip, r4
  401086:	42a6      	cmp	r6, r4
  401088:	d309      	bcc.n	40109e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40108a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40108c:	0125      	lsls	r5, r4, #4
  40108e:	597d      	ldr	r5, [r7, r5]
  401090:	428d      	cmp	r5, r1
  401092:	d1f5      	bne.n	401080 <pio_handler_set+0x14>
  401094:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401098:	686d      	ldr	r5, [r5, #4]
  40109a:	4295      	cmp	r5, r2
  40109c:	d1f0      	bne.n	401080 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40109e:	4d0d      	ldr	r5, [pc, #52]	; (4010d4 <pio_handler_set+0x68>)
  4010a0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4010a4:	eb05 040e 	add.w	r4, r5, lr
  4010a8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4010ac:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4010ae:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4010b0:	9906      	ldr	r1, [sp, #24]
  4010b2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4010b4:	3601      	adds	r6, #1
  4010b6:	4566      	cmp	r6, ip
  4010b8:	d005      	beq.n	4010c6 <pio_handler_set+0x5a>
  4010ba:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4010bc:	461a      	mov	r2, r3
  4010be:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <pio_handler_set+0x6c>)
  4010c0:	4798      	blx	r3

	return 0;
  4010c2:	2000      	movs	r0, #0
  4010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4010c6:	4902      	ldr	r1, [pc, #8]	; (4010d0 <pio_handler_set+0x64>)
  4010c8:	600e      	str	r6, [r1, #0]
  4010ca:	e7f6      	b.n	4010ba <pio_handler_set+0x4e>
		return 1;
  4010cc:	2001      	movs	r0, #1
}
  4010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010d0:	20400c6c 	.word	0x20400c6c
  4010d4:	20400bfc 	.word	0x20400bfc
  4010d8:	00400fdd 	.word	0x00400fdd

004010dc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010de:	210a      	movs	r1, #10
  4010e0:	4801      	ldr	r0, [pc, #4]	; (4010e8 <PIOA_Handler+0xc>)
  4010e2:	4b02      	ldr	r3, [pc, #8]	; (4010ec <PIOA_Handler+0x10>)
  4010e4:	4798      	blx	r3
  4010e6:	bd08      	pop	{r3, pc}
  4010e8:	400e0e00 	.word	0x400e0e00
  4010ec:	0040101d 	.word	0x0040101d

004010f0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010f0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010f2:	210b      	movs	r1, #11
  4010f4:	4801      	ldr	r0, [pc, #4]	; (4010fc <PIOB_Handler+0xc>)
  4010f6:	4b02      	ldr	r3, [pc, #8]	; (401100 <PIOB_Handler+0x10>)
  4010f8:	4798      	blx	r3
  4010fa:	bd08      	pop	{r3, pc}
  4010fc:	400e1000 	.word	0x400e1000
  401100:	0040101d 	.word	0x0040101d

00401104 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401104:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401106:	210c      	movs	r1, #12
  401108:	4801      	ldr	r0, [pc, #4]	; (401110 <PIOC_Handler+0xc>)
  40110a:	4b02      	ldr	r3, [pc, #8]	; (401114 <PIOC_Handler+0x10>)
  40110c:	4798      	blx	r3
  40110e:	bd08      	pop	{r3, pc}
  401110:	400e1200 	.word	0x400e1200
  401114:	0040101d 	.word	0x0040101d

00401118 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401118:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40111a:	2110      	movs	r1, #16
  40111c:	4801      	ldr	r0, [pc, #4]	; (401124 <PIOD_Handler+0xc>)
  40111e:	4b02      	ldr	r3, [pc, #8]	; (401128 <PIOD_Handler+0x10>)
  401120:	4798      	blx	r3
  401122:	bd08      	pop	{r3, pc}
  401124:	400e1400 	.word	0x400e1400
  401128:	0040101d 	.word	0x0040101d

0040112c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40112c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40112e:	2111      	movs	r1, #17
  401130:	4801      	ldr	r0, [pc, #4]	; (401138 <PIOE_Handler+0xc>)
  401132:	4b02      	ldr	r3, [pc, #8]	; (40113c <PIOE_Handler+0x10>)
  401134:	4798      	blx	r3
  401136:	bd08      	pop	{r3, pc}
  401138:	400e1600 	.word	0x400e1600
  40113c:	0040101d 	.word	0x0040101d

00401140 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401140:	2803      	cmp	r0, #3
  401142:	d011      	beq.n	401168 <pmc_mck_set_division+0x28>
  401144:	2804      	cmp	r0, #4
  401146:	d012      	beq.n	40116e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401148:	2802      	cmp	r0, #2
  40114a:	bf0c      	ite	eq
  40114c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401150:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401152:	4a08      	ldr	r2, [pc, #32]	; (401174 <pmc_mck_set_division+0x34>)
  401154:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40115a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40115c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40115e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401160:	f013 0f08 	tst.w	r3, #8
  401164:	d0fb      	beq.n	40115e <pmc_mck_set_division+0x1e>
}
  401166:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401168:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40116c:	e7f1      	b.n	401152 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40116e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401172:	e7ee      	b.n	401152 <pmc_mck_set_division+0x12>
  401174:	400e0600 	.word	0x400e0600

00401178 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401178:	4a17      	ldr	r2, [pc, #92]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  40117a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40117c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401180:	4318      	orrs	r0, r3
  401182:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401184:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401186:	f013 0f08 	tst.w	r3, #8
  40118a:	d10a      	bne.n	4011a2 <pmc_switch_mck_to_pllack+0x2a>
  40118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401190:	4911      	ldr	r1, [pc, #68]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  401192:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401194:	f012 0f08 	tst.w	r2, #8
  401198:	d103      	bne.n	4011a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40119a:	3b01      	subs	r3, #1
  40119c:	d1f9      	bne.n	401192 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40119e:	2001      	movs	r0, #1
  4011a0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011a2:	4a0d      	ldr	r2, [pc, #52]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  4011a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011a6:	f023 0303 	bic.w	r3, r3, #3
  4011aa:	f043 0302 	orr.w	r3, r3, #2
  4011ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011b2:	f013 0f08 	tst.w	r3, #8
  4011b6:	d10a      	bne.n	4011ce <pmc_switch_mck_to_pllack+0x56>
  4011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011bc:	4906      	ldr	r1, [pc, #24]	; (4011d8 <pmc_switch_mck_to_pllack+0x60>)
  4011be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011c0:	f012 0f08 	tst.w	r2, #8
  4011c4:	d105      	bne.n	4011d2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011c6:	3b01      	subs	r3, #1
  4011c8:	d1f9      	bne.n	4011be <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011cc:	4770      	bx	lr
	return 0;
  4011ce:	2000      	movs	r0, #0
  4011d0:	4770      	bx	lr
  4011d2:	2000      	movs	r0, #0
  4011d4:	4770      	bx	lr
  4011d6:	bf00      	nop
  4011d8:	400e0600 	.word	0x400e0600

004011dc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011dc:	b9a0      	cbnz	r0, 401208 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011de:	480e      	ldr	r0, [pc, #56]	; (401218 <pmc_switch_mainck_to_xtal+0x3c>)
  4011e0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011e2:	0209      	lsls	r1, r1, #8
  4011e4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011e6:	4a0d      	ldr	r2, [pc, #52]	; (40121c <pmc_switch_mainck_to_xtal+0x40>)
  4011e8:	401a      	ands	r2, r3
  4011ea:	4b0d      	ldr	r3, [pc, #52]	; (401220 <pmc_switch_mainck_to_xtal+0x44>)
  4011ec:	4313      	orrs	r3, r2
  4011ee:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011f0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011f2:	4602      	mov	r2, r0
  4011f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011f6:	f013 0f01 	tst.w	r3, #1
  4011fa:	d0fb      	beq.n	4011f4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011fc:	4a06      	ldr	r2, [pc, #24]	; (401218 <pmc_switch_mainck_to_xtal+0x3c>)
  4011fe:	6a11      	ldr	r1, [r2, #32]
  401200:	4b08      	ldr	r3, [pc, #32]	; (401224 <pmc_switch_mainck_to_xtal+0x48>)
  401202:	430b      	orrs	r3, r1
  401204:	6213      	str	r3, [r2, #32]
  401206:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401208:	4903      	ldr	r1, [pc, #12]	; (401218 <pmc_switch_mainck_to_xtal+0x3c>)
  40120a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40120c:	4a06      	ldr	r2, [pc, #24]	; (401228 <pmc_switch_mainck_to_xtal+0x4c>)
  40120e:	401a      	ands	r2, r3
  401210:	4b06      	ldr	r3, [pc, #24]	; (40122c <pmc_switch_mainck_to_xtal+0x50>)
  401212:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401214:	620b      	str	r3, [r1, #32]
  401216:	4770      	bx	lr
  401218:	400e0600 	.word	0x400e0600
  40121c:	ffc8fffc 	.word	0xffc8fffc
  401220:	00370001 	.word	0x00370001
  401224:	01370000 	.word	0x01370000
  401228:	fec8fffc 	.word	0xfec8fffc
  40122c:	01370002 	.word	0x01370002

00401230 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401230:	4b02      	ldr	r3, [pc, #8]	; (40123c <pmc_osc_is_ready_mainck+0xc>)
  401232:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401234:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	400e0600 	.word	0x400e0600

00401240 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401240:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401244:	4b01      	ldr	r3, [pc, #4]	; (40124c <pmc_disable_pllack+0xc>)
  401246:	629a      	str	r2, [r3, #40]	; 0x28
  401248:	4770      	bx	lr
  40124a:	bf00      	nop
  40124c:	400e0600 	.word	0x400e0600

00401250 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401250:	4b02      	ldr	r3, [pc, #8]	; (40125c <pmc_is_locked_pllack+0xc>)
  401252:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401254:	f000 0002 	and.w	r0, r0, #2
  401258:	4770      	bx	lr
  40125a:	bf00      	nop
  40125c:	400e0600 	.word	0x400e0600

00401260 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401260:	283f      	cmp	r0, #63	; 0x3f
  401262:	d81e      	bhi.n	4012a2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401264:	281f      	cmp	r0, #31
  401266:	d80c      	bhi.n	401282 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401268:	4b11      	ldr	r3, [pc, #68]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  40126a:	699a      	ldr	r2, [r3, #24]
  40126c:	2301      	movs	r3, #1
  40126e:	4083      	lsls	r3, r0
  401270:	4393      	bics	r3, r2
  401272:	d018      	beq.n	4012a6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401274:	2301      	movs	r3, #1
  401276:	fa03 f000 	lsl.w	r0, r3, r0
  40127a:	4b0d      	ldr	r3, [pc, #52]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  40127c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40127e:	2000      	movs	r0, #0
  401280:	4770      	bx	lr
		ul_id -= 32;
  401282:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401284:	4b0a      	ldr	r3, [pc, #40]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  401286:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40128a:	2301      	movs	r3, #1
  40128c:	4083      	lsls	r3, r0
  40128e:	4393      	bics	r3, r2
  401290:	d00b      	beq.n	4012aa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401292:	2301      	movs	r3, #1
  401294:	fa03 f000 	lsl.w	r0, r3, r0
  401298:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <pmc_enable_periph_clk+0x50>)
  40129a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40129e:	2000      	movs	r0, #0
  4012a0:	4770      	bx	lr
		return 1;
  4012a2:	2001      	movs	r0, #1
  4012a4:	4770      	bx	lr
	return 0;
  4012a6:	2000      	movs	r0, #0
  4012a8:	4770      	bx	lr
  4012aa:	2000      	movs	r0, #0
}
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop
  4012b0:	400e0600 	.word	0x400e0600

004012b4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012b8:	fa03 f000 	lsl.w	r0, r3, r0
  4012bc:	4b01      	ldr	r3, [pc, #4]	; (4012c4 <pmc_enable_pck+0x10>)
  4012be:	6018      	str	r0, [r3, #0]
  4012c0:	4770      	bx	lr
  4012c2:	bf00      	nop
  4012c4:	400e0600 	.word	0x400e0600

004012c8 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4012c8:	4770      	bx	lr
	...

004012cc <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4012cc:	4a10      	ldr	r2, [pc, #64]	; (401310 <pmc_enable_waitmode+0x44>)
  4012ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4012d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4012d8:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4012da:	6a11      	ldr	r1, [r2, #32]
  4012dc:	4b0d      	ldr	r3, [pc, #52]	; (401314 <pmc_enable_waitmode+0x48>)
  4012de:	430b      	orrs	r3, r1
  4012e0:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012e4:	f013 0f08 	tst.w	r3, #8
  4012e8:	d0fb      	beq.n	4012e2 <pmc_enable_waitmode+0x16>
  4012ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4012ee:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4012f0:	3b01      	subs	r3, #1
  4012f2:	d1fc      	bne.n	4012ee <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4012f4:	4a06      	ldr	r2, [pc, #24]	; (401310 <pmc_enable_waitmode+0x44>)
  4012f6:	6a13      	ldr	r3, [r2, #32]
  4012f8:	f013 0f08 	tst.w	r3, #8
  4012fc:	d0fb      	beq.n	4012f6 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4012fe:	4a04      	ldr	r2, [pc, #16]	; (401310 <pmc_enable_waitmode+0x44>)
  401300:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401302:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40130a:	6713      	str	r3, [r2, #112]	; 0x70
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop
  401310:	400e0600 	.word	0x400e0600
  401314:	00370004 	.word	0x00370004

00401318 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  40131c:	1e43      	subs	r3, r0, #1
  40131e:	2b04      	cmp	r3, #4
  401320:	f200 8107 	bhi.w	401532 <pmc_sleep+0x21a>
  401324:	e8df f013 	tbh	[pc, r3, lsl #1]
  401328:	00050005 	.word	0x00050005
  40132c:	00150015 	.word	0x00150015
  401330:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401332:	4a81      	ldr	r2, [pc, #516]	; (401538 <pmc_sleep+0x220>)
  401334:	6913      	ldr	r3, [r2, #16]
  401336:	f023 0304 	bic.w	r3, r3, #4
  40133a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40133c:	2201      	movs	r2, #1
  40133e:	4b7f      	ldr	r3, [pc, #508]	; (40153c <pmc_sleep+0x224>)
  401340:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401342:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401346:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  40134c:	bf30      	wfi
  40134e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401352:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401354:	2803      	cmp	r0, #3
  401356:	bf0c      	ite	eq
  401358:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40135a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40135e:	4b78      	ldr	r3, [pc, #480]	; (401540 <pmc_sleep+0x228>)
  401360:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401362:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401364:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401368:	2200      	movs	r2, #0
  40136a:	4b74      	ldr	r3, [pc, #464]	; (40153c <pmc_sleep+0x224>)
  40136c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40136e:	2201      	movs	r2, #1
  401370:	4b74      	ldr	r3, [pc, #464]	; (401544 <pmc_sleep+0x22c>)
  401372:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401374:	4b74      	ldr	r3, [pc, #464]	; (401548 <pmc_sleep+0x230>)
  401376:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401378:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40137a:	4a74      	ldr	r2, [pc, #464]	; (40154c <pmc_sleep+0x234>)
  40137c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401380:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401382:	4a73      	ldr	r2, [pc, #460]	; (401550 <pmc_sleep+0x238>)
  401384:	433a      	orrs	r2, r7
  401386:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401388:	f005 0903 	and.w	r9, r5, #3
  40138c:	f1b9 0f01 	cmp.w	r9, #1
  401390:	f240 8089 	bls.w	4014a6 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401394:	f025 0103 	bic.w	r1, r5, #3
  401398:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40139c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40139e:	461a      	mov	r2, r3
  4013a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013a2:	f013 0f08 	tst.w	r3, #8
  4013a6:	d0fb      	beq.n	4013a0 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4013a8:	f011 0f70 	tst.w	r1, #112	; 0x70
  4013ac:	d008      	beq.n	4013c0 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4013ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4013b2:	4b65      	ldr	r3, [pc, #404]	; (401548 <pmc_sleep+0x230>)
  4013b4:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013b6:	461a      	mov	r2, r3
  4013b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ba:	f013 0f08 	tst.w	r3, #8
  4013be:	d0fb      	beq.n	4013b8 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4013c0:	4b64      	ldr	r3, [pc, #400]	; (401554 <pmc_sleep+0x23c>)
  4013c2:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4013c4:	4a60      	ldr	r2, [pc, #384]	; (401548 <pmc_sleep+0x230>)
  4013c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4013cc:	d0fb      	beq.n	4013c6 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4013ce:	4a5e      	ldr	r2, [pc, #376]	; (401548 <pmc_sleep+0x230>)
  4013d0:	6a11      	ldr	r1, [r2, #32]
  4013d2:	4b61      	ldr	r3, [pc, #388]	; (401558 <pmc_sleep+0x240>)
  4013d4:	400b      	ands	r3, r1
  4013d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013da:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4013dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013e2:	d0fb      	beq.n	4013dc <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4013e4:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4013e8:	4a58      	ldr	r2, [pc, #352]	; (40154c <pmc_sleep+0x234>)
  4013ea:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4013ec:	2c04      	cmp	r4, #4
  4013ee:	d05c      	beq.n	4014aa <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4013f0:	4c52      	ldr	r4, [pc, #328]	; (40153c <pmc_sleep+0x224>)
  4013f2:	2301      	movs	r3, #1
  4013f4:	7023      	strb	r3, [r4, #0]
  4013f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013fa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4013fc:	4b57      	ldr	r3, [pc, #348]	; (40155c <pmc_sleep+0x244>)
  4013fe:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401400:	b672      	cpsid	i
  401402:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  401406:	2300      	movs	r3, #0
  401408:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40140a:	f017 0f02 	tst.w	r7, #2
  40140e:	d055      	beq.n	4014bc <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401410:	4a4d      	ldr	r2, [pc, #308]	; (401548 <pmc_sleep+0x230>)
  401412:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401414:	4952      	ldr	r1, [pc, #328]	; (401560 <pmc_sleep+0x248>)
  401416:	4019      	ands	r1, r3
  401418:	4b52      	ldr	r3, [pc, #328]	; (401564 <pmc_sleep+0x24c>)
  40141a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40141c:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40141e:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401420:	4b51      	ldr	r3, [pc, #324]	; (401568 <pmc_sleep+0x250>)
  401422:	400b      	ands	r3, r1
  401424:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401428:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40142a:	4b50      	ldr	r3, [pc, #320]	; (40156c <pmc_sleep+0x254>)
  40142c:	4033      	ands	r3, r6
  40142e:	2b00      	cmp	r3, #0
  401430:	d06e      	beq.n	401510 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401432:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401436:	4b44      	ldr	r3, [pc, #272]	; (401548 <pmc_sleep+0x230>)
  401438:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40143a:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40143c:	f1b9 0f02 	cmp.w	r9, #2
  401440:	d104      	bne.n	40144c <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401442:	4a41      	ldr	r2, [pc, #260]	; (401548 <pmc_sleep+0x230>)
  401444:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401446:	f013 0f02 	tst.w	r3, #2
  40144a:	d0fb      	beq.n	401444 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  40144c:	4a3e      	ldr	r2, [pc, #248]	; (401548 <pmc_sleep+0x230>)
  40144e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401454:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401458:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40145a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40145c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40145e:	f013 0f08 	tst.w	r3, #8
  401462:	d0fb      	beq.n	40145c <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401464:	4b39      	ldr	r3, [pc, #228]	; (40154c <pmc_sleep+0x234>)
  401466:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40146a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40146e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401470:	461a      	mov	r2, r3
  401472:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401474:	f013 0f08 	tst.w	r3, #8
  401478:	d0fb      	beq.n	401472 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40147a:	4a33      	ldr	r2, [pc, #204]	; (401548 <pmc_sleep+0x230>)
  40147c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40147e:	420b      	tst	r3, r1
  401480:	d0fc      	beq.n	40147c <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401482:	2200      	movs	r2, #0
  401484:	4b2f      	ldr	r3, [pc, #188]	; (401544 <pmc_sleep+0x22c>)
  401486:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401488:	4b39      	ldr	r3, [pc, #228]	; (401570 <pmc_sleep+0x258>)
  40148a:	681b      	ldr	r3, [r3, #0]
  40148c:	b11b      	cbz	r3, 401496 <pmc_sleep+0x17e>
			callback_clocks_restored();
  40148e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401490:	2200      	movs	r2, #0
  401492:	4b37      	ldr	r3, [pc, #220]	; (401570 <pmc_sleep+0x258>)
  401494:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  401496:	2201      	movs	r2, #1
  401498:	4b28      	ldr	r3, [pc, #160]	; (40153c <pmc_sleep+0x224>)
  40149a:	701a      	strb	r2, [r3, #0]
  40149c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4014a0:	b662      	cpsie	i
  4014a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4014a6:	4629      	mov	r1, r5
  4014a8:	e77e      	b.n	4013a8 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4014aa:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4014ae:	6a11      	ldr	r1, [r2, #32]
  4014b0:	4b30      	ldr	r3, [pc, #192]	; (401574 <pmc_sleep+0x25c>)
  4014b2:	400b      	ands	r3, r1
  4014b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014b8:	6213      	str	r3, [r2, #32]
  4014ba:	e799      	b.n	4013f0 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4014bc:	f017 0f01 	tst.w	r7, #1
  4014c0:	d0b3      	beq.n	40142a <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4014c2:	4b21      	ldr	r3, [pc, #132]	; (401548 <pmc_sleep+0x230>)
  4014c4:	6a1b      	ldr	r3, [r3, #32]
  4014c6:	f013 0f01 	tst.w	r3, #1
  4014ca:	d10b      	bne.n	4014e4 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014cc:	491e      	ldr	r1, [pc, #120]	; (401548 <pmc_sleep+0x230>)
  4014ce:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4014d0:	4a29      	ldr	r2, [pc, #164]	; (401578 <pmc_sleep+0x260>)
  4014d2:	401a      	ands	r2, r3
  4014d4:	4b29      	ldr	r3, [pc, #164]	; (40157c <pmc_sleep+0x264>)
  4014d6:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014d8:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4014da:	460a      	mov	r2, r1
  4014dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014de:	f013 0f01 	tst.w	r3, #1
  4014e2:	d0fb      	beq.n	4014dc <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4014e4:	4b18      	ldr	r3, [pc, #96]	; (401548 <pmc_sleep+0x230>)
  4014e6:	6a1b      	ldr	r3, [r3, #32]
  4014e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014ec:	d108      	bne.n	401500 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014ee:	4a16      	ldr	r2, [pc, #88]	; (401548 <pmc_sleep+0x230>)
  4014f0:	6a11      	ldr	r1, [r2, #32]
  4014f2:	4b23      	ldr	r3, [pc, #140]	; (401580 <pmc_sleep+0x268>)
  4014f4:	430b      	orrs	r3, r1
  4014f6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4014f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4014fe:	d0fb      	beq.n	4014f8 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401500:	4a11      	ldr	r2, [pc, #68]	; (401548 <pmc_sleep+0x230>)
  401502:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401504:	4b18      	ldr	r3, [pc, #96]	; (401568 <pmc_sleep+0x250>)
  401506:	400b      	ands	r3, r1
  401508:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40150c:	6213      	str	r3, [r2, #32]
  40150e:	e78c      	b.n	40142a <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401510:	2100      	movs	r1, #0
  401512:	e793      	b.n	40143c <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401514:	4a08      	ldr	r2, [pc, #32]	; (401538 <pmc_sleep+0x220>)
  401516:	6913      	ldr	r3, [r2, #16]
  401518:	f043 0304 	orr.w	r3, r3, #4
  40151c:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40151e:	4a19      	ldr	r2, [pc, #100]	; (401584 <pmc_sleep+0x26c>)
  401520:	4b19      	ldr	r3, [pc, #100]	; (401588 <pmc_sleep+0x270>)
  401522:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401524:	2201      	movs	r2, #1
  401526:	4b05      	ldr	r3, [pc, #20]	; (40153c <pmc_sleep+0x224>)
  401528:	701a      	strb	r2, [r3, #0]
  40152a:	f3bf 8f5f 	dmb	sy
  40152e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401530:	bf30      	wfi
  401532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401536:	bf00      	nop
  401538:	e000ed00 	.word	0xe000ed00
  40153c:	20400018 	.word	0x20400018
  401540:	004012c9 	.word	0x004012c9
  401544:	20400c70 	.word	0x20400c70
  401548:	400e0600 	.word	0x400e0600
  40154c:	400e0c00 	.word	0x400e0c00
  401550:	00370008 	.word	0x00370008
  401554:	00401241 	.word	0x00401241
  401558:	fec8ffff 	.word	0xfec8ffff
  40155c:	004012cd 	.word	0x004012cd
  401560:	fec8fffc 	.word	0xfec8fffc
  401564:	01370002 	.word	0x01370002
  401568:	ffc8ff87 	.word	0xffc8ff87
  40156c:	07ff0000 	.word	0x07ff0000
  401570:	20400c74 	.word	0x20400c74
  401574:	ffc8fffe 	.word	0xffc8fffe
  401578:	ffc8fffc 	.word	0xffc8fffc
  40157c:	00370001 	.word	0x00370001
  401580:	01370000 	.word	0x01370000
  401584:	a5000004 	.word	0xa5000004
  401588:	400e1810 	.word	0x400e1810

0040158c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40158c:	6943      	ldr	r3, [r0, #20]
  40158e:	f013 0f02 	tst.w	r3, #2
  401592:	d002      	beq.n	40159a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401594:	61c1      	str	r1, [r0, #28]
	return 0;
  401596:	2000      	movs	r0, #0
  401598:	4770      	bx	lr
		return 1;
  40159a:	2001      	movs	r0, #1
}
  40159c:	4770      	bx	lr

0040159e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40159e:	6943      	ldr	r3, [r0, #20]
  4015a0:	f013 0f01 	tst.w	r3, #1
  4015a4:	d003      	beq.n	4015ae <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4015a6:	6983      	ldr	r3, [r0, #24]
  4015a8:	700b      	strb	r3, [r1, #0]
	return 0;
  4015aa:	2000      	movs	r0, #0
  4015ac:	4770      	bx	lr
		return 1;
  4015ae:	2001      	movs	r0, #1
}
  4015b0:	4770      	bx	lr

004015b2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4015b2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4015b4:	010b      	lsls	r3, r1, #4
  4015b6:	4293      	cmp	r3, r2
  4015b8:	d914      	bls.n	4015e4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015ba:	00c9      	lsls	r1, r1, #3
  4015bc:	084b      	lsrs	r3, r1, #1
  4015be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4015c2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4015c6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015c8:	1e5c      	subs	r4, r3, #1
  4015ca:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4015ce:	428c      	cmp	r4, r1
  4015d0:	d901      	bls.n	4015d6 <usart_set_async_baudrate+0x24>
		return 1;
  4015d2:	2001      	movs	r0, #1
  4015d4:	e017      	b.n	401606 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4015d6:	6841      	ldr	r1, [r0, #4]
  4015d8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4015dc:	6041      	str	r1, [r0, #4]
  4015de:	e00c      	b.n	4015fa <usart_set_async_baudrate+0x48>
		return 1;
  4015e0:	2001      	movs	r0, #1
  4015e2:	e010      	b.n	401606 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015e4:	0859      	lsrs	r1, r3, #1
  4015e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4015ea:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4015ee:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015f0:	1e5c      	subs	r4, r3, #1
  4015f2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4015f6:	428c      	cmp	r4, r1
  4015f8:	d8f2      	bhi.n	4015e0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4015fa:	0412      	lsls	r2, r2, #16
  4015fc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401600:	431a      	orrs	r2, r3
  401602:	6202      	str	r2, [r0, #32]

	return 0;
  401604:	2000      	movs	r0, #0
}
  401606:	f85d 4b04 	ldr.w	r4, [sp], #4
  40160a:	4770      	bx	lr

0040160c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40160c:	4b08      	ldr	r3, [pc, #32]	; (401630 <usart_reset+0x24>)
  40160e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401612:	2300      	movs	r3, #0
  401614:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401616:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401618:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40161a:	2388      	movs	r3, #136	; 0x88
  40161c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40161e:	2324      	movs	r3, #36	; 0x24
  401620:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401622:	f44f 7380 	mov.w	r3, #256	; 0x100
  401626:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401628:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40162c:	6003      	str	r3, [r0, #0]
  40162e:	4770      	bx	lr
  401630:	55534100 	.word	0x55534100

00401634 <usart_init_rs232>:
{
  401634:	b570      	push	{r4, r5, r6, lr}
  401636:	4605      	mov	r5, r0
  401638:	460c      	mov	r4, r1
  40163a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40163c:	4b0f      	ldr	r3, [pc, #60]	; (40167c <usart_init_rs232+0x48>)
  40163e:	4798      	blx	r3
	ul_reg_val = 0;
  401640:	2200      	movs	r2, #0
  401642:	4b0f      	ldr	r3, [pc, #60]	; (401680 <usart_init_rs232+0x4c>)
  401644:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401646:	b1a4      	cbz	r4, 401672 <usart_init_rs232+0x3e>
  401648:	4632      	mov	r2, r6
  40164a:	6821      	ldr	r1, [r4, #0]
  40164c:	4628      	mov	r0, r5
  40164e:	4b0d      	ldr	r3, [pc, #52]	; (401684 <usart_init_rs232+0x50>)
  401650:	4798      	blx	r3
  401652:	4602      	mov	r2, r0
  401654:	b978      	cbnz	r0, 401676 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401656:	6863      	ldr	r3, [r4, #4]
  401658:	68a1      	ldr	r1, [r4, #8]
  40165a:	430b      	orrs	r3, r1
  40165c:	6921      	ldr	r1, [r4, #16]
  40165e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401660:	68e1      	ldr	r1, [r4, #12]
  401662:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401664:	4906      	ldr	r1, [pc, #24]	; (401680 <usart_init_rs232+0x4c>)
  401666:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401668:	6869      	ldr	r1, [r5, #4]
  40166a:	430b      	orrs	r3, r1
  40166c:	606b      	str	r3, [r5, #4]
}
  40166e:	4610      	mov	r0, r2
  401670:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401672:	2201      	movs	r2, #1
  401674:	e7fb      	b.n	40166e <usart_init_rs232+0x3a>
  401676:	2201      	movs	r2, #1
  401678:	e7f9      	b.n	40166e <usart_init_rs232+0x3a>
  40167a:	bf00      	nop
  40167c:	0040160d 	.word	0x0040160d
  401680:	20400c78 	.word	0x20400c78
  401684:	004015b3 	.word	0x004015b3

00401688 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401688:	2340      	movs	r3, #64	; 0x40
  40168a:	6003      	str	r3, [r0, #0]
  40168c:	4770      	bx	lr

0040168e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40168e:	2310      	movs	r3, #16
  401690:	6003      	str	r3, [r0, #0]
  401692:	4770      	bx	lr

00401694 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401694:	6943      	ldr	r3, [r0, #20]
  401696:	f013 0f02 	tst.w	r3, #2
  40169a:	d004      	beq.n	4016a6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40169c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4016a0:	61c1      	str	r1, [r0, #28]
	return 0;
  4016a2:	2000      	movs	r0, #0
  4016a4:	4770      	bx	lr
		return 1;
  4016a6:	2001      	movs	r0, #1
}
  4016a8:	4770      	bx	lr

004016aa <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4016aa:	6943      	ldr	r3, [r0, #20]
  4016ac:	f013 0f01 	tst.w	r3, #1
  4016b0:	d005      	beq.n	4016be <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016b2:	6983      	ldr	r3, [r0, #24]
  4016b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4016b8:	600b      	str	r3, [r1, #0]
	return 0;
  4016ba:	2000      	movs	r0, #0
  4016bc:	4770      	bx	lr
		return 1;
  4016be:	2001      	movs	r0, #1
}
  4016c0:	4770      	bx	lr

004016c2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4016c2:	e7fe      	b.n	4016c2 <Dummy_Handler>

004016c4 <Reset_Handler>:
{
  4016c4:	b500      	push	{lr}
  4016c6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4016c8:	4b25      	ldr	r3, [pc, #148]	; (401760 <Reset_Handler+0x9c>)
  4016ca:	4a26      	ldr	r2, [pc, #152]	; (401764 <Reset_Handler+0xa0>)
  4016cc:	429a      	cmp	r2, r3
  4016ce:	d010      	beq.n	4016f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4016d0:	4b25      	ldr	r3, [pc, #148]	; (401768 <Reset_Handler+0xa4>)
  4016d2:	4a23      	ldr	r2, [pc, #140]	; (401760 <Reset_Handler+0x9c>)
  4016d4:	429a      	cmp	r2, r3
  4016d6:	d20c      	bcs.n	4016f2 <Reset_Handler+0x2e>
  4016d8:	3b01      	subs	r3, #1
  4016da:	1a9b      	subs	r3, r3, r2
  4016dc:	f023 0303 	bic.w	r3, r3, #3
  4016e0:	3304      	adds	r3, #4
  4016e2:	4413      	add	r3, r2
  4016e4:	491f      	ldr	r1, [pc, #124]	; (401764 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4016e6:	f851 0b04 	ldr.w	r0, [r1], #4
  4016ea:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4016ee:	429a      	cmp	r2, r3
  4016f0:	d1f9      	bne.n	4016e6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4016f2:	4b1e      	ldr	r3, [pc, #120]	; (40176c <Reset_Handler+0xa8>)
  4016f4:	4a1e      	ldr	r2, [pc, #120]	; (401770 <Reset_Handler+0xac>)
  4016f6:	429a      	cmp	r2, r3
  4016f8:	d20a      	bcs.n	401710 <Reset_Handler+0x4c>
  4016fa:	3b01      	subs	r3, #1
  4016fc:	1a9b      	subs	r3, r3, r2
  4016fe:	f023 0303 	bic.w	r3, r3, #3
  401702:	3304      	adds	r3, #4
  401704:	4413      	add	r3, r2
                *pDest++ = 0;
  401706:	2100      	movs	r1, #0
  401708:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40170c:	4293      	cmp	r3, r2
  40170e:	d1fb      	bne.n	401708 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401710:	4a18      	ldr	r2, [pc, #96]	; (401774 <Reset_Handler+0xb0>)
  401712:	4b19      	ldr	r3, [pc, #100]	; (401778 <Reset_Handler+0xb4>)
  401714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401718:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40171a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40171e:	fab3 f383 	clz	r3, r3
  401722:	095b      	lsrs	r3, r3, #5
  401724:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401726:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40172c:	2200      	movs	r2, #0
  40172e:	4b13      	ldr	r3, [pc, #76]	; (40177c <Reset_Handler+0xb8>)
  401730:	701a      	strb	r2, [r3, #0]
	return flags;
  401732:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401734:	4a12      	ldr	r2, [pc, #72]	; (401780 <Reset_Handler+0xbc>)
  401736:	6813      	ldr	r3, [r2, #0]
  401738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40173c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40173e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401742:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401746:	b129      	cbz	r1, 401754 <Reset_Handler+0x90>
		cpu_irq_enable();
  401748:	2201      	movs	r2, #1
  40174a:	4b0c      	ldr	r3, [pc, #48]	; (40177c <Reset_Handler+0xb8>)
  40174c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40174e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401752:	b662      	cpsie	i
        __libc_init_array();
  401754:	4b0b      	ldr	r3, [pc, #44]	; (401784 <Reset_Handler+0xc0>)
  401756:	4798      	blx	r3
        main();
  401758:	4b0b      	ldr	r3, [pc, #44]	; (401788 <Reset_Handler+0xc4>)
  40175a:	4798      	blx	r3
  40175c:	e7fe      	b.n	40175c <Reset_Handler+0x98>
  40175e:	bf00      	nop
  401760:	20400000 	.word	0x20400000
  401764:	0040b728 	.word	0x0040b728
  401768:	204009d8 	.word	0x204009d8
  40176c:	20400e94 	.word	0x20400e94
  401770:	204009d8 	.word	0x204009d8
  401774:	e000ed00 	.word	0xe000ed00
  401778:	00400000 	.word	0x00400000
  40177c:	20400018 	.word	0x20400018
  401780:	e000ed88 	.word	0xe000ed88
  401784:	0040417d 	.word	0x0040417d
  401788:	00403ed5 	.word	0x00403ed5

0040178c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40178c:	4b3b      	ldr	r3, [pc, #236]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401790:	f003 0303 	and.w	r3, r3, #3
  401794:	2b01      	cmp	r3, #1
  401796:	d01d      	beq.n	4017d4 <SystemCoreClockUpdate+0x48>
  401798:	b183      	cbz	r3, 4017bc <SystemCoreClockUpdate+0x30>
  40179a:	2b02      	cmp	r3, #2
  40179c:	d036      	beq.n	40180c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40179e:	4b37      	ldr	r3, [pc, #220]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017a6:	2b70      	cmp	r3, #112	; 0x70
  4017a8:	d05f      	beq.n	40186a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4017aa:	4b34      	ldr	r3, [pc, #208]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017ae:	4934      	ldr	r1, [pc, #208]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4017b4:	680b      	ldr	r3, [r1, #0]
  4017b6:	40d3      	lsrs	r3, r2
  4017b8:	600b      	str	r3, [r1, #0]
  4017ba:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4017bc:	4b31      	ldr	r3, [pc, #196]	; (401884 <SystemCoreClockUpdate+0xf8>)
  4017be:	695b      	ldr	r3, [r3, #20]
  4017c0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4017c4:	bf14      	ite	ne
  4017c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4017ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4017ce:	4b2c      	ldr	r3, [pc, #176]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017d0:	601a      	str	r2, [r3, #0]
  4017d2:	e7e4      	b.n	40179e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017d4:	4b29      	ldr	r3, [pc, #164]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017d6:	6a1b      	ldr	r3, [r3, #32]
  4017d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4017dc:	d003      	beq.n	4017e6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4017de:	4a2a      	ldr	r2, [pc, #168]	; (401888 <SystemCoreClockUpdate+0xfc>)
  4017e0:	4b27      	ldr	r3, [pc, #156]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017e2:	601a      	str	r2, [r3, #0]
  4017e4:	e7db      	b.n	40179e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017e6:	4a29      	ldr	r2, [pc, #164]	; (40188c <SystemCoreClockUpdate+0x100>)
  4017e8:	4b25      	ldr	r3, [pc, #148]	; (401880 <SystemCoreClockUpdate+0xf4>)
  4017ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017ec:	4b23      	ldr	r3, [pc, #140]	; (40187c <SystemCoreClockUpdate+0xf0>)
  4017ee:	6a1b      	ldr	r3, [r3, #32]
  4017f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017f4:	2b10      	cmp	r3, #16
  4017f6:	d005      	beq.n	401804 <SystemCoreClockUpdate+0x78>
  4017f8:	2b20      	cmp	r3, #32
  4017fa:	d1d0      	bne.n	40179e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4017fc:	4a22      	ldr	r2, [pc, #136]	; (401888 <SystemCoreClockUpdate+0xfc>)
  4017fe:	4b20      	ldr	r3, [pc, #128]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401800:	601a      	str	r2, [r3, #0]
          break;
  401802:	e7cc      	b.n	40179e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401804:	4a22      	ldr	r2, [pc, #136]	; (401890 <SystemCoreClockUpdate+0x104>)
  401806:	4b1e      	ldr	r3, [pc, #120]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401808:	601a      	str	r2, [r3, #0]
          break;
  40180a:	e7c8      	b.n	40179e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40180c:	4b1b      	ldr	r3, [pc, #108]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40180e:	6a1b      	ldr	r3, [r3, #32]
  401810:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401814:	d016      	beq.n	401844 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401816:	4a1c      	ldr	r2, [pc, #112]	; (401888 <SystemCoreClockUpdate+0xfc>)
  401818:	4b19      	ldr	r3, [pc, #100]	; (401880 <SystemCoreClockUpdate+0xf4>)
  40181a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40181c:	4b17      	ldr	r3, [pc, #92]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401820:	f003 0303 	and.w	r3, r3, #3
  401824:	2b02      	cmp	r3, #2
  401826:	d1ba      	bne.n	40179e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401828:	4a14      	ldr	r2, [pc, #80]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40182a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40182c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40182e:	4814      	ldr	r0, [pc, #80]	; (401880 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401830:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401834:	6803      	ldr	r3, [r0, #0]
  401836:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40183a:	b2d2      	uxtb	r2, r2
  40183c:	fbb3 f3f2 	udiv	r3, r3, r2
  401840:	6003      	str	r3, [r0, #0]
  401842:	e7ac      	b.n	40179e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401844:	4a11      	ldr	r2, [pc, #68]	; (40188c <SystemCoreClockUpdate+0x100>)
  401846:	4b0e      	ldr	r3, [pc, #56]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401848:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40184a:	4b0c      	ldr	r3, [pc, #48]	; (40187c <SystemCoreClockUpdate+0xf0>)
  40184c:	6a1b      	ldr	r3, [r3, #32]
  40184e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401852:	2b10      	cmp	r3, #16
  401854:	d005      	beq.n	401862 <SystemCoreClockUpdate+0xd6>
  401856:	2b20      	cmp	r3, #32
  401858:	d1e0      	bne.n	40181c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40185a:	4a0b      	ldr	r2, [pc, #44]	; (401888 <SystemCoreClockUpdate+0xfc>)
  40185c:	4b08      	ldr	r3, [pc, #32]	; (401880 <SystemCoreClockUpdate+0xf4>)
  40185e:	601a      	str	r2, [r3, #0]
          break;
  401860:	e7dc      	b.n	40181c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401862:	4a0b      	ldr	r2, [pc, #44]	; (401890 <SystemCoreClockUpdate+0x104>)
  401864:	4b06      	ldr	r3, [pc, #24]	; (401880 <SystemCoreClockUpdate+0xf4>)
  401866:	601a      	str	r2, [r3, #0]
          break;
  401868:	e7d8      	b.n	40181c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40186a:	4a05      	ldr	r2, [pc, #20]	; (401880 <SystemCoreClockUpdate+0xf4>)
  40186c:	6813      	ldr	r3, [r2, #0]
  40186e:	4909      	ldr	r1, [pc, #36]	; (401894 <SystemCoreClockUpdate+0x108>)
  401870:	fba1 1303 	umull	r1, r3, r1, r3
  401874:	085b      	lsrs	r3, r3, #1
  401876:	6013      	str	r3, [r2, #0]
  401878:	4770      	bx	lr
  40187a:	bf00      	nop
  40187c:	400e0600 	.word	0x400e0600
  401880:	2040001c 	.word	0x2040001c
  401884:	400e1810 	.word	0x400e1810
  401888:	00b71b00 	.word	0x00b71b00
  40188c:	003d0900 	.word	0x003d0900
  401890:	007a1200 	.word	0x007a1200
  401894:	aaaaaaab 	.word	0xaaaaaaab

00401898 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401898:	4b16      	ldr	r3, [pc, #88]	; (4018f4 <system_init_flash+0x5c>)
  40189a:	4298      	cmp	r0, r3
  40189c:	d913      	bls.n	4018c6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40189e:	4b16      	ldr	r3, [pc, #88]	; (4018f8 <system_init_flash+0x60>)
  4018a0:	4298      	cmp	r0, r3
  4018a2:	d915      	bls.n	4018d0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018a4:	4b15      	ldr	r3, [pc, #84]	; (4018fc <system_init_flash+0x64>)
  4018a6:	4298      	cmp	r0, r3
  4018a8:	d916      	bls.n	4018d8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4018aa:	4b15      	ldr	r3, [pc, #84]	; (401900 <system_init_flash+0x68>)
  4018ac:	4298      	cmp	r0, r3
  4018ae:	d917      	bls.n	4018e0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4018b0:	4b14      	ldr	r3, [pc, #80]	; (401904 <system_init_flash+0x6c>)
  4018b2:	4298      	cmp	r0, r3
  4018b4:	d918      	bls.n	4018e8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4018b6:	4b14      	ldr	r3, [pc, #80]	; (401908 <system_init_flash+0x70>)
  4018b8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4018ba:	bf94      	ite	ls
  4018bc:	4a13      	ldrls	r2, [pc, #76]	; (40190c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4018be:	4a14      	ldrhi	r2, [pc, #80]	; (401910 <system_init_flash+0x78>)
  4018c0:	4b14      	ldr	r3, [pc, #80]	; (401914 <system_init_flash+0x7c>)
  4018c2:	601a      	str	r2, [r3, #0]
  4018c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ca:	4b12      	ldr	r3, [pc, #72]	; (401914 <system_init_flash+0x7c>)
  4018cc:	601a      	str	r2, [r3, #0]
  4018ce:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018d0:	4a11      	ldr	r2, [pc, #68]	; (401918 <system_init_flash+0x80>)
  4018d2:	4b10      	ldr	r3, [pc, #64]	; (401914 <system_init_flash+0x7c>)
  4018d4:	601a      	str	r2, [r3, #0]
  4018d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018d8:	4a10      	ldr	r2, [pc, #64]	; (40191c <system_init_flash+0x84>)
  4018da:	4b0e      	ldr	r3, [pc, #56]	; (401914 <system_init_flash+0x7c>)
  4018dc:	601a      	str	r2, [r3, #0]
  4018de:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4018e0:	4a0f      	ldr	r2, [pc, #60]	; (401920 <system_init_flash+0x88>)
  4018e2:	4b0c      	ldr	r3, [pc, #48]	; (401914 <system_init_flash+0x7c>)
  4018e4:	601a      	str	r2, [r3, #0]
  4018e6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4018e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4018ec:	4b09      	ldr	r3, [pc, #36]	; (401914 <system_init_flash+0x7c>)
  4018ee:	601a      	str	r2, [r3, #0]
  4018f0:	4770      	bx	lr
  4018f2:	bf00      	nop
  4018f4:	015ef3bf 	.word	0x015ef3bf
  4018f8:	02bde77f 	.word	0x02bde77f
  4018fc:	041cdb3f 	.word	0x041cdb3f
  401900:	057bceff 	.word	0x057bceff
  401904:	06dac2bf 	.word	0x06dac2bf
  401908:	0839b67f 	.word	0x0839b67f
  40190c:	04000500 	.word	0x04000500
  401910:	04000600 	.word	0x04000600
  401914:	400e0c00 	.word	0x400e0c00
  401918:	04000100 	.word	0x04000100
  40191c:	04000200 	.word	0x04000200
  401920:	04000300 	.word	0x04000300

00401924 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401924:	4b0a      	ldr	r3, [pc, #40]	; (401950 <_sbrk+0x2c>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	b153      	cbz	r3, 401940 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40192a:	4b09      	ldr	r3, [pc, #36]	; (401950 <_sbrk+0x2c>)
  40192c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40192e:	181a      	adds	r2, r3, r0
  401930:	4908      	ldr	r1, [pc, #32]	; (401954 <_sbrk+0x30>)
  401932:	4291      	cmp	r1, r2
  401934:	db08      	blt.n	401948 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401936:	4610      	mov	r0, r2
  401938:	4a05      	ldr	r2, [pc, #20]	; (401950 <_sbrk+0x2c>)
  40193a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40193c:	4618      	mov	r0, r3
  40193e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401940:	4a05      	ldr	r2, [pc, #20]	; (401958 <_sbrk+0x34>)
  401942:	4b03      	ldr	r3, [pc, #12]	; (401950 <_sbrk+0x2c>)
  401944:	601a      	str	r2, [r3, #0]
  401946:	e7f0      	b.n	40192a <_sbrk+0x6>
		return (caddr_t) -1;	
  401948:	f04f 30ff 	mov.w	r0, #4294967295
}
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop
  401950:	20400c7c 	.word	0x20400c7c
  401954:	2045fffc 	.word	0x2045fffc
  401958:	20403098 	.word	0x20403098

0040195c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40195c:	f04f 30ff 	mov.w	r0, #4294967295
  401960:	4770      	bx	lr

00401962 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401966:	604b      	str	r3, [r1, #4]

	return 0;
}
  401968:	2000      	movs	r0, #0
  40196a:	4770      	bx	lr

0040196c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40196c:	2001      	movs	r0, #1
  40196e:	4770      	bx	lr

00401970 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401970:	2000      	movs	r0, #0
  401972:	4770      	bx	lr

00401974 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401974:	f100 0308 	add.w	r3, r0, #8
  401978:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40197a:	f04f 32ff 	mov.w	r2, #4294967295
  40197e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401980:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401982:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401984:	2300      	movs	r3, #0
  401986:	6003      	str	r3, [r0, #0]
  401988:	4770      	bx	lr

0040198a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40198a:	2300      	movs	r3, #0
  40198c:	6103      	str	r3, [r0, #16]
  40198e:	4770      	bx	lr

00401990 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401990:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401992:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401994:	689a      	ldr	r2, [r3, #8]
  401996:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401998:	689a      	ldr	r2, [r3, #8]
  40199a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40199c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40199e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4019a0:	6803      	ldr	r3, [r0, #0]
  4019a2:	3301      	adds	r3, #1
  4019a4:	6003      	str	r3, [r0, #0]
  4019a6:	4770      	bx	lr

004019a8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4019a8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4019aa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4019ac:	f1b5 3fff 	cmp.w	r5, #4294967295
  4019b0:	d002      	beq.n	4019b8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4019b2:	f100 0208 	add.w	r2, r0, #8
  4019b6:	e002      	b.n	4019be <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4019b8:	6902      	ldr	r2, [r0, #16]
  4019ba:	e004      	b.n	4019c6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4019bc:	461a      	mov	r2, r3
  4019be:	6853      	ldr	r3, [r2, #4]
  4019c0:	681c      	ldr	r4, [r3, #0]
  4019c2:	42a5      	cmp	r5, r4
  4019c4:	d2fa      	bcs.n	4019bc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4019c6:	6853      	ldr	r3, [r2, #4]
  4019c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4019ca:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4019cc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4019ce:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4019d0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4019d2:	6803      	ldr	r3, [r0, #0]
  4019d4:	3301      	adds	r3, #1
  4019d6:	6003      	str	r3, [r0, #0]
}
  4019d8:	bc30      	pop	{r4, r5}
  4019da:	4770      	bx	lr

004019dc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4019dc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4019de:	6842      	ldr	r2, [r0, #4]
  4019e0:	6881      	ldr	r1, [r0, #8]
  4019e2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4019e4:	6882      	ldr	r2, [r0, #8]
  4019e6:	6841      	ldr	r1, [r0, #4]
  4019e8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4019ea:	685a      	ldr	r2, [r3, #4]
  4019ec:	4290      	cmp	r0, r2
  4019ee:	d005      	beq.n	4019fc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4019f0:	2200      	movs	r2, #0
  4019f2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4019f4:	6818      	ldr	r0, [r3, #0]
  4019f6:	3801      	subs	r0, #1
  4019f8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4019fa:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4019fc:	6882      	ldr	r2, [r0, #8]
  4019fe:	605a      	str	r2, [r3, #4]
  401a00:	e7f6      	b.n	4019f0 <uxListRemove+0x14>
	...

00401a04 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401a04:	4b0d      	ldr	r3, [pc, #52]	; (401a3c <prvTaskExitError+0x38>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a0c:	d00a      	beq.n	401a24 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401a0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a12:	b672      	cpsid	i
  401a14:	f383 8811 	msr	BASEPRI, r3
  401a18:	f3bf 8f6f 	isb	sy
  401a1c:	f3bf 8f4f 	dsb	sy
  401a20:	b662      	cpsie	i
  401a22:	e7fe      	b.n	401a22 <prvTaskExitError+0x1e>
  401a24:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a28:	b672      	cpsid	i
  401a2a:	f383 8811 	msr	BASEPRI, r3
  401a2e:	f3bf 8f6f 	isb	sy
  401a32:	f3bf 8f4f 	dsb	sy
  401a36:	b662      	cpsie	i
  401a38:	e7fe      	b.n	401a38 <prvTaskExitError+0x34>
  401a3a:	bf00      	nop
  401a3c:	20400020 	.word	0x20400020

00401a40 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401a40:	4806      	ldr	r0, [pc, #24]	; (401a5c <prvPortStartFirstTask+0x1c>)
  401a42:	6800      	ldr	r0, [r0, #0]
  401a44:	6800      	ldr	r0, [r0, #0]
  401a46:	f380 8808 	msr	MSP, r0
  401a4a:	b662      	cpsie	i
  401a4c:	b661      	cpsie	f
  401a4e:	f3bf 8f4f 	dsb	sy
  401a52:	f3bf 8f6f 	isb	sy
  401a56:	df00      	svc	0
  401a58:	bf00      	nop
  401a5a:	0000      	.short	0x0000
  401a5c:	e000ed08 	.word	0xe000ed08

00401a60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401a60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401a70 <vPortEnableVFP+0x10>
  401a64:	6801      	ldr	r1, [r0, #0]
  401a66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a6a:	6001      	str	r1, [r0, #0]
  401a6c:	4770      	bx	lr
  401a6e:	0000      	.short	0x0000
  401a70:	e000ed88 	.word	0xe000ed88

00401a74 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401a78:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401a7c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <pxPortInitialiseStack+0x24>)
  401a82:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401a86:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401a8a:	f06f 0302 	mvn.w	r3, #2
  401a8e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401a92:	3844      	subs	r0, #68	; 0x44
  401a94:	4770      	bx	lr
  401a96:	bf00      	nop
  401a98:	00401a05 	.word	0x00401a05

00401a9c <SVC_Handler>:
	__asm volatile (
  401a9c:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <pxCurrentTCBConst2>)
  401a9e:	6819      	ldr	r1, [r3, #0]
  401aa0:	6808      	ldr	r0, [r1, #0]
  401aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401aa6:	f380 8809 	msr	PSP, r0
  401aaa:	f3bf 8f6f 	isb	sy
  401aae:	f04f 0000 	mov.w	r0, #0
  401ab2:	f380 8811 	msr	BASEPRI, r0
  401ab6:	4770      	bx	lr

00401ab8 <pxCurrentTCBConst2>:
  401ab8:	20400c88 	.word	0x20400c88
  401abc:	4770      	bx	lr
  401abe:	bf00      	nop

00401ac0 <vPortEnterCritical>:
  401ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac4:	b672      	cpsid	i
  401ac6:	f383 8811 	msr	BASEPRI, r3
  401aca:	f3bf 8f6f 	isb	sy
  401ace:	f3bf 8f4f 	dsb	sy
  401ad2:	b662      	cpsie	i
	uxCriticalNesting++;
  401ad4:	4a0b      	ldr	r2, [pc, #44]	; (401b04 <vPortEnterCritical+0x44>)
  401ad6:	6813      	ldr	r3, [r2, #0]
  401ad8:	3301      	adds	r3, #1
  401ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401adc:	2b01      	cmp	r3, #1
  401ade:	d10f      	bne.n	401b00 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401ae0:	4b09      	ldr	r3, [pc, #36]	; (401b08 <vPortEnterCritical+0x48>)
  401ae2:	681b      	ldr	r3, [r3, #0]
  401ae4:	f013 0fff 	tst.w	r3, #255	; 0xff
  401ae8:	d00a      	beq.n	401b00 <vPortEnterCritical+0x40>
  401aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aee:	b672      	cpsid	i
  401af0:	f383 8811 	msr	BASEPRI, r3
  401af4:	f3bf 8f6f 	isb	sy
  401af8:	f3bf 8f4f 	dsb	sy
  401afc:	b662      	cpsie	i
  401afe:	e7fe      	b.n	401afe <vPortEnterCritical+0x3e>
  401b00:	4770      	bx	lr
  401b02:	bf00      	nop
  401b04:	20400020 	.word	0x20400020
  401b08:	e000ed04 	.word	0xe000ed04

00401b0c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401b0c:	4b0a      	ldr	r3, [pc, #40]	; (401b38 <vPortExitCritical+0x2c>)
  401b0e:	681b      	ldr	r3, [r3, #0]
  401b10:	b953      	cbnz	r3, 401b28 <vPortExitCritical+0x1c>
  401b12:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b16:	b672      	cpsid	i
  401b18:	f383 8811 	msr	BASEPRI, r3
  401b1c:	f3bf 8f6f 	isb	sy
  401b20:	f3bf 8f4f 	dsb	sy
  401b24:	b662      	cpsie	i
  401b26:	e7fe      	b.n	401b26 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401b28:	3b01      	subs	r3, #1
  401b2a:	4a03      	ldr	r2, [pc, #12]	; (401b38 <vPortExitCritical+0x2c>)
  401b2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401b2e:	b90b      	cbnz	r3, 401b34 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401b30:	f383 8811 	msr	BASEPRI, r3
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop
  401b38:	20400020 	.word	0x20400020

00401b3c <PendSV_Handler>:
	__asm volatile
  401b3c:	f3ef 8009 	mrs	r0, PSP
  401b40:	f3bf 8f6f 	isb	sy
  401b44:	4b15      	ldr	r3, [pc, #84]	; (401b9c <pxCurrentTCBConst>)
  401b46:	681a      	ldr	r2, [r3, #0]
  401b48:	f01e 0f10 	tst.w	lr, #16
  401b4c:	bf08      	it	eq
  401b4e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401b52:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b56:	6010      	str	r0, [r2, #0]
  401b58:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401b5c:	f04f 0080 	mov.w	r0, #128	; 0x80
  401b60:	b672      	cpsid	i
  401b62:	f380 8811 	msr	BASEPRI, r0
  401b66:	f3bf 8f4f 	dsb	sy
  401b6a:	f3bf 8f6f 	isb	sy
  401b6e:	b662      	cpsie	i
  401b70:	f001 f900 	bl	402d74 <vTaskSwitchContext>
  401b74:	f04f 0000 	mov.w	r0, #0
  401b78:	f380 8811 	msr	BASEPRI, r0
  401b7c:	bc08      	pop	{r3}
  401b7e:	6819      	ldr	r1, [r3, #0]
  401b80:	6808      	ldr	r0, [r1, #0]
  401b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b86:	f01e 0f10 	tst.w	lr, #16
  401b8a:	bf08      	it	eq
  401b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401b90:	f380 8809 	msr	PSP, r0
  401b94:	f3bf 8f6f 	isb	sy
  401b98:	4770      	bx	lr
  401b9a:	bf00      	nop

00401b9c <pxCurrentTCBConst>:
  401b9c:	20400c88 	.word	0x20400c88
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <SysTick_Handler>:
{
  401ba4:	b508      	push	{r3, lr}
	__asm volatile
  401ba6:	f3ef 8311 	mrs	r3, BASEPRI
  401baa:	f04f 0280 	mov.w	r2, #128	; 0x80
  401bae:	b672      	cpsid	i
  401bb0:	f382 8811 	msr	BASEPRI, r2
  401bb4:	f3bf 8f6f 	isb	sy
  401bb8:	f3bf 8f4f 	dsb	sy
  401bbc:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401bbe:	4b05      	ldr	r3, [pc, #20]	; (401bd4 <SysTick_Handler+0x30>)
  401bc0:	4798      	blx	r3
  401bc2:	b118      	cbz	r0, 401bcc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bc8:	4b03      	ldr	r3, [pc, #12]	; (401bd8 <SysTick_Handler+0x34>)
  401bca:	601a      	str	r2, [r3, #0]
	__asm volatile
  401bcc:	2300      	movs	r3, #0
  401bce:	f383 8811 	msr	BASEPRI, r3
  401bd2:	bd08      	pop	{r3, pc}
  401bd4:	004029e1 	.word	0x004029e1
  401bd8:	e000ed04 	.word	0xe000ed04

00401bdc <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401bdc:	4a03      	ldr	r2, [pc, #12]	; (401bec <vPortSetupTimerInterrupt+0x10>)
  401bde:	4b04      	ldr	r3, [pc, #16]	; (401bf0 <vPortSetupTimerInterrupt+0x14>)
  401be0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401be2:	2207      	movs	r2, #7
  401be4:	3b04      	subs	r3, #4
  401be6:	601a      	str	r2, [r3, #0]
  401be8:	4770      	bx	lr
  401bea:	bf00      	nop
  401bec:	000927bf 	.word	0x000927bf
  401bf0:	e000e014 	.word	0xe000e014

00401bf4 <xPortStartScheduler>:
{
  401bf4:	b500      	push	{lr}
  401bf6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401bf8:	4b25      	ldr	r3, [pc, #148]	; (401c90 <xPortStartScheduler+0x9c>)
  401bfa:	781a      	ldrb	r2, [r3, #0]
  401bfc:	b2d2      	uxtb	r2, r2
  401bfe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401c00:	22ff      	movs	r2, #255	; 0xff
  401c02:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401c04:	781b      	ldrb	r3, [r3, #0]
  401c06:	b2db      	uxtb	r3, r3
  401c08:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401c0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c14:	4a1f      	ldr	r2, [pc, #124]	; (401c94 <xPortStartScheduler+0xa0>)
  401c16:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401c18:	2207      	movs	r2, #7
  401c1a:	4b1f      	ldr	r3, [pc, #124]	; (401c98 <xPortStartScheduler+0xa4>)
  401c1c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401c1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c22:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c26:	d010      	beq.n	401c4a <xPortStartScheduler+0x56>
  401c28:	2206      	movs	r2, #6
  401c2a:	e000      	b.n	401c2e <xPortStartScheduler+0x3a>
  401c2c:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401c2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c32:	005b      	lsls	r3, r3, #1
  401c34:	b2db      	uxtb	r3, r3
  401c36:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401c3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c3e:	1e51      	subs	r1, r2, #1
  401c40:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c44:	d1f2      	bne.n	401c2c <xPortStartScheduler+0x38>
  401c46:	4b14      	ldr	r3, [pc, #80]	; (401c98 <xPortStartScheduler+0xa4>)
  401c48:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401c4a:	4a13      	ldr	r2, [pc, #76]	; (401c98 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401c4c:	6813      	ldr	r3, [r2, #0]
  401c4e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401c54:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401c56:	9b01      	ldr	r3, [sp, #4]
  401c58:	b2db      	uxtb	r3, r3
  401c5a:	4a0d      	ldr	r2, [pc, #52]	; (401c90 <xPortStartScheduler+0x9c>)
  401c5c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401c5e:	4b0f      	ldr	r3, [pc, #60]	; (401c9c <xPortStartScheduler+0xa8>)
  401c60:	681a      	ldr	r2, [r3, #0]
  401c62:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401c66:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401c68:	681a      	ldr	r2, [r3, #0]
  401c6a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401c6e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401c70:	4b0b      	ldr	r3, [pc, #44]	; (401ca0 <xPortStartScheduler+0xac>)
  401c72:	4798      	blx	r3
	uxCriticalNesting = 0;
  401c74:	2200      	movs	r2, #0
  401c76:	4b0b      	ldr	r3, [pc, #44]	; (401ca4 <xPortStartScheduler+0xb0>)
  401c78:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401c7a:	4b0b      	ldr	r3, [pc, #44]	; (401ca8 <xPortStartScheduler+0xb4>)
  401c7c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401c7e:	4a0b      	ldr	r2, [pc, #44]	; (401cac <xPortStartScheduler+0xb8>)
  401c80:	6813      	ldr	r3, [r2, #0]
  401c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401c86:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401c88:	4b09      	ldr	r3, [pc, #36]	; (401cb0 <xPortStartScheduler+0xbc>)
  401c8a:	4798      	blx	r3
	prvTaskExitError();
  401c8c:	4b09      	ldr	r3, [pc, #36]	; (401cb4 <xPortStartScheduler+0xc0>)
  401c8e:	4798      	blx	r3
  401c90:	e000e400 	.word	0xe000e400
  401c94:	20400c80 	.word	0x20400c80
  401c98:	20400c84 	.word	0x20400c84
  401c9c:	e000ed20 	.word	0xe000ed20
  401ca0:	00401bdd 	.word	0x00401bdd
  401ca4:	20400020 	.word	0x20400020
  401ca8:	00401a61 	.word	0x00401a61
  401cac:	e000ef34 	.word	0xe000ef34
  401cb0:	00401a41 	.word	0x00401a41
  401cb4:	00401a05 	.word	0x00401a05

00401cb8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401cb8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401cbc:	2b0f      	cmp	r3, #15
  401cbe:	d911      	bls.n	401ce4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401cc0:	4a12      	ldr	r2, [pc, #72]	; (401d0c <vPortValidateInterruptPriority+0x54>)
  401cc2:	5c9b      	ldrb	r3, [r3, r2]
  401cc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401cc6:	4a12      	ldr	r2, [pc, #72]	; (401d10 <vPortValidateInterruptPriority+0x58>)
  401cc8:	7812      	ldrb	r2, [r2, #0]
  401cca:	429a      	cmp	r2, r3
  401ccc:	d90a      	bls.n	401ce4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401cce:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd2:	b672      	cpsid	i
  401cd4:	f383 8811 	msr	BASEPRI, r3
  401cd8:	f3bf 8f6f 	isb	sy
  401cdc:	f3bf 8f4f 	dsb	sy
  401ce0:	b662      	cpsie	i
  401ce2:	e7fe      	b.n	401ce2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401ce4:	4b0b      	ldr	r3, [pc, #44]	; (401d14 <vPortValidateInterruptPriority+0x5c>)
  401ce6:	681b      	ldr	r3, [r3, #0]
  401ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401cec:	4a0a      	ldr	r2, [pc, #40]	; (401d18 <vPortValidateInterruptPriority+0x60>)
  401cee:	6812      	ldr	r2, [r2, #0]
  401cf0:	4293      	cmp	r3, r2
  401cf2:	d90a      	bls.n	401d0a <vPortValidateInterruptPriority+0x52>
  401cf4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cf8:	b672      	cpsid	i
  401cfa:	f383 8811 	msr	BASEPRI, r3
  401cfe:	f3bf 8f6f 	isb	sy
  401d02:	f3bf 8f4f 	dsb	sy
  401d06:	b662      	cpsie	i
  401d08:	e7fe      	b.n	401d08 <vPortValidateInterruptPriority+0x50>
  401d0a:	4770      	bx	lr
  401d0c:	e000e3f0 	.word	0xe000e3f0
  401d10:	20400c80 	.word	0x20400c80
  401d14:	e000ed0c 	.word	0xe000ed0c
  401d18:	20400c84 	.word	0x20400c84

00401d1c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401d1c:	b510      	push	{r4, lr}
  401d1e:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401d20:	4b06      	ldr	r3, [pc, #24]	; (401d3c <pvPortMalloc+0x20>)
  401d22:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401d24:	4620      	mov	r0, r4
  401d26:	4b06      	ldr	r3, [pc, #24]	; (401d40 <pvPortMalloc+0x24>)
  401d28:	4798      	blx	r3
  401d2a:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401d2c:	4b05      	ldr	r3, [pc, #20]	; (401d44 <pvPortMalloc+0x28>)
  401d2e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401d30:	b10c      	cbz	r4, 401d36 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401d32:	4620      	mov	r0, r4
  401d34:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401d36:	4b04      	ldr	r3, [pc, #16]	; (401d48 <pvPortMalloc+0x2c>)
  401d38:	4798      	blx	r3
	return pvReturn;
  401d3a:	e7fa      	b.n	401d32 <pvPortMalloc+0x16>
  401d3c:	004029c5 	.word	0x004029c5
  401d40:	004041cd 	.word	0x004041cd
  401d44:	00402b2d 	.word	0x00402b2d
  401d48:	00403a27 	.word	0x00403a27

00401d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401d4c:	b148      	cbz	r0, 401d62 <vPortFree+0x16>
{
  401d4e:	b510      	push	{r4, lr}
  401d50:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401d52:	4b04      	ldr	r3, [pc, #16]	; (401d64 <vPortFree+0x18>)
  401d54:	4798      	blx	r3
		{
			free( pv );
  401d56:	4620      	mov	r0, r4
  401d58:	4b03      	ldr	r3, [pc, #12]	; (401d68 <vPortFree+0x1c>)
  401d5a:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401d5c:	4b03      	ldr	r3, [pc, #12]	; (401d6c <vPortFree+0x20>)
  401d5e:	4798      	blx	r3
  401d60:	bd10      	pop	{r4, pc}
  401d62:	4770      	bx	lr
  401d64:	004029c5 	.word	0x004029c5
  401d68:	004041dd 	.word	0x004041dd
  401d6c:	00402b2d 	.word	0x00402b2d

00401d70 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401d70:	b538      	push	{r3, r4, r5, lr}
  401d72:	4604      	mov	r4, r0
  401d74:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401d76:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d78:	b95a      	cbnz	r2, 401d92 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d7a:	6803      	ldr	r3, [r0, #0]
  401d7c:	2b00      	cmp	r3, #0
  401d7e:	d12e      	bne.n	401dde <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401d80:	6840      	ldr	r0, [r0, #4]
  401d82:	4b1b      	ldr	r3, [pc, #108]	; (401df0 <prvCopyDataToQueue+0x80>)
  401d84:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401d86:	2300      	movs	r3, #0
  401d88:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d8c:	3301      	adds	r3, #1
  401d8e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401d90:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401d92:	b96d      	cbnz	r5, 401db0 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401d94:	6880      	ldr	r0, [r0, #8]
  401d96:	4b17      	ldr	r3, [pc, #92]	; (401df4 <prvCopyDataToQueue+0x84>)
  401d98:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401d9a:	68a3      	ldr	r3, [r4, #8]
  401d9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401d9e:	4413      	add	r3, r2
  401da0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401da2:	6862      	ldr	r2, [r4, #4]
  401da4:	4293      	cmp	r3, r2
  401da6:	d31c      	bcc.n	401de2 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401da8:	6823      	ldr	r3, [r4, #0]
  401daa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401dac:	2000      	movs	r0, #0
  401dae:	e7ec      	b.n	401d8a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401db0:	68c0      	ldr	r0, [r0, #12]
  401db2:	4b10      	ldr	r3, [pc, #64]	; (401df4 <prvCopyDataToQueue+0x84>)
  401db4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401db8:	425b      	negs	r3, r3
  401dba:	68e2      	ldr	r2, [r4, #12]
  401dbc:	441a      	add	r2, r3
  401dbe:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401dc0:	6821      	ldr	r1, [r4, #0]
  401dc2:	428a      	cmp	r2, r1
  401dc4:	d202      	bcs.n	401dcc <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401dc6:	6862      	ldr	r2, [r4, #4]
  401dc8:	4413      	add	r3, r2
  401dca:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401dcc:	2d02      	cmp	r5, #2
  401dce:	d10a      	bne.n	401de6 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401dd2:	b153      	cbz	r3, 401dea <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401dd6:	3b01      	subs	r3, #1
  401dd8:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401dda:	2000      	movs	r0, #0
  401ddc:	e7d5      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401dde:	2000      	movs	r0, #0
  401de0:	e7d3      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401de2:	2000      	movs	r0, #0
  401de4:	e7d1      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401de6:	2000      	movs	r0, #0
  401de8:	e7cf      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401dea:	2000      	movs	r0, #0
  401dec:	e7cd      	b.n	401d8a <prvCopyDataToQueue+0x1a>
  401dee:	bf00      	nop
  401df0:	00403175 	.word	0x00403175
  401df4:	0040474d 	.word	0x0040474d

00401df8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401df8:	b530      	push	{r4, r5, lr}
  401dfa:	b083      	sub	sp, #12
  401dfc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401dfe:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401e00:	b174      	cbz	r4, 401e20 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e06:	429a      	cmp	r2, r3
  401e08:	d315      	bcc.n	401e36 <prvNotifyQueueSetContainer+0x3e>
  401e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e0e:	b672      	cpsid	i
  401e10:	f383 8811 	msr	BASEPRI, r3
  401e14:	f3bf 8f6f 	isb	sy
  401e18:	f3bf 8f4f 	dsb	sy
  401e1c:	b662      	cpsie	i
  401e1e:	e7fe      	b.n	401e1e <prvNotifyQueueSetContainer+0x26>
  401e20:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e24:	b672      	cpsid	i
  401e26:	f383 8811 	msr	BASEPRI, r3
  401e2a:	f3bf 8f6f 	isb	sy
  401e2e:	f3bf 8f4f 	dsb	sy
  401e32:	b662      	cpsie	i
  401e34:	e7fe      	b.n	401e34 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e38:	4293      	cmp	r3, r2
  401e3a:	d803      	bhi.n	401e44 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401e3c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401e3e:	4628      	mov	r0, r5
  401e40:	b003      	add	sp, #12
  401e42:	bd30      	pop	{r4, r5, pc}
  401e44:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401e46:	a901      	add	r1, sp, #4
  401e48:	4620      	mov	r0, r4
  401e4a:	4b0b      	ldr	r3, [pc, #44]	; (401e78 <prvNotifyQueueSetContainer+0x80>)
  401e4c:	4798      	blx	r3
  401e4e:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401e50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e56:	d10a      	bne.n	401e6e <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e5a:	2b00      	cmp	r3, #0
  401e5c:	d0ef      	beq.n	401e3e <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e62:	4b06      	ldr	r3, [pc, #24]	; (401e7c <prvNotifyQueueSetContainer+0x84>)
  401e64:	4798      	blx	r3
  401e66:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401e68:	bf18      	it	ne
  401e6a:	2501      	movne	r5, #1
  401e6c:	e7e7      	b.n	401e3e <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401e6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e70:	3301      	adds	r3, #1
  401e72:	64a3      	str	r3, [r4, #72]	; 0x48
  401e74:	e7e3      	b.n	401e3e <prvNotifyQueueSetContainer+0x46>
  401e76:	bf00      	nop
  401e78:	00401d71 	.word	0x00401d71
  401e7c:	00402f49 	.word	0x00402f49

00401e80 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401e80:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401e82:	b172      	cbz	r2, 401ea2 <prvCopyDataFromQueue+0x22>
{
  401e84:	b510      	push	{r4, lr}
  401e86:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401e88:	68c4      	ldr	r4, [r0, #12]
  401e8a:	4414      	add	r4, r2
  401e8c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401e8e:	6840      	ldr	r0, [r0, #4]
  401e90:	4284      	cmp	r4, r0
  401e92:	d301      	bcc.n	401e98 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401e94:	6818      	ldr	r0, [r3, #0]
  401e96:	60d8      	str	r0, [r3, #12]
  401e98:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401e9a:	68d9      	ldr	r1, [r3, #12]
  401e9c:	4b01      	ldr	r3, [pc, #4]	; (401ea4 <prvCopyDataFromQueue+0x24>)
  401e9e:	4798      	blx	r3
  401ea0:	bd10      	pop	{r4, pc}
  401ea2:	4770      	bx	lr
  401ea4:	0040474d 	.word	0x0040474d

00401ea8 <prvUnlockQueue>:
{
  401ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401eaa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401eac:	4b22      	ldr	r3, [pc, #136]	; (401f38 <prvUnlockQueue+0x90>)
  401eae:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401eb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	dd1b      	ble.n	401eee <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401eb6:	4d21      	ldr	r5, [pc, #132]	; (401f3c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401eb8:	4f21      	ldr	r7, [pc, #132]	; (401f40 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401eba:	4e22      	ldr	r6, [pc, #136]	; (401f44 <prvUnlockQueue+0x9c>)
  401ebc:	e00b      	b.n	401ed6 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ec0:	b1ab      	cbz	r3, 401eee <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ec6:	47b0      	blx	r6
  401ec8:	b978      	cbnz	r0, 401eea <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401eca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ecc:	3b01      	subs	r3, #1
  401ece:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401ed0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	dd0b      	ble.n	401eee <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401ed6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d0f0      	beq.n	401ebe <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401edc:	2100      	movs	r1, #0
  401ede:	4620      	mov	r0, r4
  401ee0:	47a8      	blx	r5
  401ee2:	2801      	cmp	r0, #1
  401ee4:	d1f1      	bne.n	401eca <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401ee6:	47b8      	blx	r7
  401ee8:	e7ef      	b.n	401eca <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401eea:	47b8      	blx	r7
  401eec:	e7ed      	b.n	401eca <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401eee:	f04f 33ff 	mov.w	r3, #4294967295
  401ef2:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401ef4:	4b14      	ldr	r3, [pc, #80]	; (401f48 <prvUnlockQueue+0xa0>)
  401ef6:	4798      	blx	r3
	taskENTER_CRITICAL();
  401ef8:	4b0f      	ldr	r3, [pc, #60]	; (401f38 <prvUnlockQueue+0x90>)
  401efa:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401efe:	2b00      	cmp	r3, #0
  401f00:	dd14      	ble.n	401f2c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f02:	6923      	ldr	r3, [r4, #16]
  401f04:	b193      	cbz	r3, 401f2c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401f06:	f104 0610 	add.w	r6, r4, #16
  401f0a:	4d0e      	ldr	r5, [pc, #56]	; (401f44 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401f0c:	4f0c      	ldr	r7, [pc, #48]	; (401f40 <prvUnlockQueue+0x98>)
  401f0e:	e007      	b.n	401f20 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401f10:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f12:	3b01      	subs	r3, #1
  401f14:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f18:	2b00      	cmp	r3, #0
  401f1a:	dd07      	ble.n	401f2c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f1c:	6923      	ldr	r3, [r4, #16]
  401f1e:	b12b      	cbz	r3, 401f2c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401f20:	4630      	mov	r0, r6
  401f22:	47a8      	blx	r5
  401f24:	2800      	cmp	r0, #0
  401f26:	d0f3      	beq.n	401f10 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401f28:	47b8      	blx	r7
  401f2a:	e7f1      	b.n	401f10 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401f2c:	f04f 33ff 	mov.w	r3, #4294967295
  401f30:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401f32:	4b05      	ldr	r3, [pc, #20]	; (401f48 <prvUnlockQueue+0xa0>)
  401f34:	4798      	blx	r3
  401f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f38:	00401ac1 	.word	0x00401ac1
  401f3c:	00401df9 	.word	0x00401df9
  401f40:	004030a5 	.word	0x004030a5
  401f44:	00402f49 	.word	0x00402f49
  401f48:	00401b0d 	.word	0x00401b0d

00401f4c <xQueueGenericReset>:
{
  401f4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401f4e:	b308      	cbz	r0, 401f94 <xQueueGenericReset+0x48>
  401f50:	4604      	mov	r4, r0
  401f52:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401f54:	4b1d      	ldr	r3, [pc, #116]	; (401fcc <xQueueGenericReset+0x80>)
  401f56:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401f58:	6822      	ldr	r2, [r4, #0]
  401f5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f5e:	fb03 f301 	mul.w	r3, r3, r1
  401f62:	18d0      	adds	r0, r2, r3
  401f64:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401f66:	2000      	movs	r0, #0
  401f68:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401f6a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401f6c:	1a5b      	subs	r3, r3, r1
  401f6e:	4413      	add	r3, r2
  401f70:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401f72:	f04f 33ff 	mov.w	r3, #4294967295
  401f76:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401f78:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401f7a:	b9fd      	cbnz	r5, 401fbc <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f7c:	6923      	ldr	r3, [r4, #16]
  401f7e:	b12b      	cbz	r3, 401f8c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f80:	f104 0010 	add.w	r0, r4, #16
  401f84:	4b12      	ldr	r3, [pc, #72]	; (401fd0 <xQueueGenericReset+0x84>)
  401f86:	4798      	blx	r3
  401f88:	2801      	cmp	r0, #1
  401f8a:	d00e      	beq.n	401faa <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401f8c:	4b11      	ldr	r3, [pc, #68]	; (401fd4 <xQueueGenericReset+0x88>)
  401f8e:	4798      	blx	r3
}
  401f90:	2001      	movs	r0, #1
  401f92:	bd38      	pop	{r3, r4, r5, pc}
  401f94:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f98:	b672      	cpsid	i
  401f9a:	f383 8811 	msr	BASEPRI, r3
  401f9e:	f3bf 8f6f 	isb	sy
  401fa2:	f3bf 8f4f 	dsb	sy
  401fa6:	b662      	cpsie	i
  401fa8:	e7fe      	b.n	401fa8 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fae:	4b0a      	ldr	r3, [pc, #40]	; (401fd8 <xQueueGenericReset+0x8c>)
  401fb0:	601a      	str	r2, [r3, #0]
  401fb2:	f3bf 8f4f 	dsb	sy
  401fb6:	f3bf 8f6f 	isb	sy
  401fba:	e7e7      	b.n	401f8c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401fbc:	f104 0010 	add.w	r0, r4, #16
  401fc0:	4d06      	ldr	r5, [pc, #24]	; (401fdc <xQueueGenericReset+0x90>)
  401fc2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401fc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fc8:	47a8      	blx	r5
  401fca:	e7df      	b.n	401f8c <xQueueGenericReset+0x40>
  401fcc:	00401ac1 	.word	0x00401ac1
  401fd0:	00402f49 	.word	0x00402f49
  401fd4:	00401b0d 	.word	0x00401b0d
  401fd8:	e000ed04 	.word	0xe000ed04
  401fdc:	00401975 	.word	0x00401975

00401fe0 <xQueueGenericCreate>:
{
  401fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401fe2:	b950      	cbnz	r0, 401ffa <xQueueGenericCreate+0x1a>
  401fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe8:	b672      	cpsid	i
  401fea:	f383 8811 	msr	BASEPRI, r3
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	f3bf 8f4f 	dsb	sy
  401ff6:	b662      	cpsie	i
  401ff8:	e7fe      	b.n	401ff8 <xQueueGenericCreate+0x18>
  401ffa:	4606      	mov	r6, r0
  401ffc:	4617      	mov	r7, r2
  401ffe:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402000:	b189      	cbz	r1, 402026 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402002:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402006:	3059      	adds	r0, #89	; 0x59
  402008:	4b12      	ldr	r3, [pc, #72]	; (402054 <xQueueGenericCreate+0x74>)
  40200a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40200c:	4604      	mov	r4, r0
  40200e:	b9e8      	cbnz	r0, 40204c <xQueueGenericCreate+0x6c>
  402010:	f04f 0380 	mov.w	r3, #128	; 0x80
  402014:	b672      	cpsid	i
  402016:	f383 8811 	msr	BASEPRI, r3
  40201a:	f3bf 8f6f 	isb	sy
  40201e:	f3bf 8f4f 	dsb	sy
  402022:	b662      	cpsie	i
  402024:	e7fe      	b.n	402024 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402026:	2058      	movs	r0, #88	; 0x58
  402028:	4b0a      	ldr	r3, [pc, #40]	; (402054 <xQueueGenericCreate+0x74>)
  40202a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40202c:	4604      	mov	r4, r0
  40202e:	2800      	cmp	r0, #0
  402030:	d0ee      	beq.n	402010 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  402032:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402034:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  402036:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402038:	2101      	movs	r1, #1
  40203a:	4620      	mov	r0, r4
  40203c:	4b06      	ldr	r3, [pc, #24]	; (402058 <xQueueGenericCreate+0x78>)
  40203e:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402040:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402044:	2300      	movs	r3, #0
  402046:	6563      	str	r3, [r4, #84]	; 0x54
}
  402048:	4620      	mov	r0, r4
  40204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40204c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402050:	6003      	str	r3, [r0, #0]
  402052:	e7ef      	b.n	402034 <xQueueGenericCreate+0x54>
  402054:	00401d1d 	.word	0x00401d1d
  402058:	00401f4d 	.word	0x00401f4d

0040205c <xQueueGenericSend>:
{
  40205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402060:	b085      	sub	sp, #20
  402062:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402064:	b1b8      	cbz	r0, 402096 <xQueueGenericSend+0x3a>
  402066:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402068:	b301      	cbz	r1, 4020ac <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40206a:	2b02      	cmp	r3, #2
  40206c:	d02c      	beq.n	4020c8 <xQueueGenericSend+0x6c>
  40206e:	461d      	mov	r5, r3
  402070:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402072:	4b66      	ldr	r3, [pc, #408]	; (40220c <xQueueGenericSend+0x1b0>)
  402074:	4798      	blx	r3
  402076:	2800      	cmp	r0, #0
  402078:	d134      	bne.n	4020e4 <xQueueGenericSend+0x88>
  40207a:	9b01      	ldr	r3, [sp, #4]
  40207c:	2b00      	cmp	r3, #0
  40207e:	d038      	beq.n	4020f2 <xQueueGenericSend+0x96>
  402080:	f04f 0380 	mov.w	r3, #128	; 0x80
  402084:	b672      	cpsid	i
  402086:	f383 8811 	msr	BASEPRI, r3
  40208a:	f3bf 8f6f 	isb	sy
  40208e:	f3bf 8f4f 	dsb	sy
  402092:	b662      	cpsie	i
  402094:	e7fe      	b.n	402094 <xQueueGenericSend+0x38>
  402096:	f04f 0380 	mov.w	r3, #128	; 0x80
  40209a:	b672      	cpsid	i
  40209c:	f383 8811 	msr	BASEPRI, r3
  4020a0:	f3bf 8f6f 	isb	sy
  4020a4:	f3bf 8f4f 	dsb	sy
  4020a8:	b662      	cpsie	i
  4020aa:	e7fe      	b.n	4020aa <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4020ae:	2a00      	cmp	r2, #0
  4020b0:	d0db      	beq.n	40206a <xQueueGenericSend+0xe>
  4020b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020b6:	b672      	cpsid	i
  4020b8:	f383 8811 	msr	BASEPRI, r3
  4020bc:	f3bf 8f6f 	isb	sy
  4020c0:	f3bf 8f4f 	dsb	sy
  4020c4:	b662      	cpsie	i
  4020c6:	e7fe      	b.n	4020c6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4020c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4020ca:	2a01      	cmp	r2, #1
  4020cc:	d0cf      	beq.n	40206e <xQueueGenericSend+0x12>
  4020ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d2:	b672      	cpsid	i
  4020d4:	f383 8811 	msr	BASEPRI, r3
  4020d8:	f3bf 8f6f 	isb	sy
  4020dc:	f3bf 8f4f 	dsb	sy
  4020e0:	b662      	cpsie	i
  4020e2:	e7fe      	b.n	4020e2 <xQueueGenericSend+0x86>
  4020e4:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4020e6:	4e4a      	ldr	r6, [pc, #296]	; (402210 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4020e8:	f8df a150 	ldr.w	sl, [pc, #336]	; 40223c <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4020ec:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40221c <xQueueGenericSend+0x1c0>
  4020f0:	e042      	b.n	402178 <xQueueGenericSend+0x11c>
  4020f2:	2700      	movs	r7, #0
  4020f4:	e7f7      	b.n	4020e6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4020f6:	462a      	mov	r2, r5
  4020f8:	4641      	mov	r1, r8
  4020fa:	4620      	mov	r0, r4
  4020fc:	4b45      	ldr	r3, [pc, #276]	; (402214 <xQueueGenericSend+0x1b8>)
  4020fe:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402100:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402102:	b19b      	cbz	r3, 40212c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402104:	4629      	mov	r1, r5
  402106:	4620      	mov	r0, r4
  402108:	4b43      	ldr	r3, [pc, #268]	; (402218 <xQueueGenericSend+0x1bc>)
  40210a:	4798      	blx	r3
  40210c:	2801      	cmp	r0, #1
  40210e:	d107      	bne.n	402120 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402114:	4b41      	ldr	r3, [pc, #260]	; (40221c <xQueueGenericSend+0x1c0>)
  402116:	601a      	str	r2, [r3, #0]
  402118:	f3bf 8f4f 	dsb	sy
  40211c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402120:	4b3f      	ldr	r3, [pc, #252]	; (402220 <xQueueGenericSend+0x1c4>)
  402122:	4798      	blx	r3
				return pdPASS;
  402124:	2001      	movs	r0, #1
}
  402126:	b005      	add	sp, #20
  402128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40212c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40212e:	b173      	cbz	r3, 40214e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402130:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402134:	4b3b      	ldr	r3, [pc, #236]	; (402224 <xQueueGenericSend+0x1c8>)
  402136:	4798      	blx	r3
  402138:	2801      	cmp	r0, #1
  40213a:	d1f1      	bne.n	402120 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40213c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402140:	4b36      	ldr	r3, [pc, #216]	; (40221c <xQueueGenericSend+0x1c0>)
  402142:	601a      	str	r2, [r3, #0]
  402144:	f3bf 8f4f 	dsb	sy
  402148:	f3bf 8f6f 	isb	sy
  40214c:	e7e8      	b.n	402120 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40214e:	2800      	cmp	r0, #0
  402150:	d0e6      	beq.n	402120 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402156:	4b31      	ldr	r3, [pc, #196]	; (40221c <xQueueGenericSend+0x1c0>)
  402158:	601a      	str	r2, [r3, #0]
  40215a:	f3bf 8f4f 	dsb	sy
  40215e:	f3bf 8f6f 	isb	sy
  402162:	e7dd      	b.n	402120 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402164:	4b2e      	ldr	r3, [pc, #184]	; (402220 <xQueueGenericSend+0x1c4>)
  402166:	4798      	blx	r3
					return errQUEUE_FULL;
  402168:	2000      	movs	r0, #0
  40216a:	e7dc      	b.n	402126 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40216c:	4620      	mov	r0, r4
  40216e:	4b2e      	ldr	r3, [pc, #184]	; (402228 <xQueueGenericSend+0x1cc>)
  402170:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402172:	4b2e      	ldr	r3, [pc, #184]	; (40222c <xQueueGenericSend+0x1d0>)
  402174:	4798      	blx	r3
  402176:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402178:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40217a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40217c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40217e:	429a      	cmp	r2, r3
  402180:	d3b9      	bcc.n	4020f6 <xQueueGenericSend+0x9a>
  402182:	2d02      	cmp	r5, #2
  402184:	d0b7      	beq.n	4020f6 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402186:	9b01      	ldr	r3, [sp, #4]
  402188:	2b00      	cmp	r3, #0
  40218a:	d0eb      	beq.n	402164 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  40218c:	b90f      	cbnz	r7, 402192 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40218e:	a802      	add	r0, sp, #8
  402190:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402192:	4b23      	ldr	r3, [pc, #140]	; (402220 <xQueueGenericSend+0x1c4>)
  402194:	4798      	blx	r3
		vTaskSuspendAll();
  402196:	4b26      	ldr	r3, [pc, #152]	; (402230 <xQueueGenericSend+0x1d4>)
  402198:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40219a:	47b0      	blx	r6
  40219c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40219e:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021a2:	d101      	bne.n	4021a8 <xQueueGenericSend+0x14c>
  4021a4:	2300      	movs	r3, #0
  4021a6:	6463      	str	r3, [r4, #68]	; 0x44
  4021a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021ae:	d101      	bne.n	4021b4 <xQueueGenericSend+0x158>
  4021b0:	2300      	movs	r3, #0
  4021b2:	64a3      	str	r3, [r4, #72]	; 0x48
  4021b4:	4b1a      	ldr	r3, [pc, #104]	; (402220 <xQueueGenericSend+0x1c4>)
  4021b6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4021b8:	a901      	add	r1, sp, #4
  4021ba:	a802      	add	r0, sp, #8
  4021bc:	4b1d      	ldr	r3, [pc, #116]	; (402234 <xQueueGenericSend+0x1d8>)
  4021be:	4798      	blx	r3
  4021c0:	b9e0      	cbnz	r0, 4021fc <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4021c2:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4021c4:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4021c8:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4021ca:	4b15      	ldr	r3, [pc, #84]	; (402220 <xQueueGenericSend+0x1c4>)
  4021cc:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4021ce:	45bb      	cmp	fp, r7
  4021d0:	d1cc      	bne.n	40216c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4021d2:	9901      	ldr	r1, [sp, #4]
  4021d4:	f104 0010 	add.w	r0, r4, #16
  4021d8:	4b17      	ldr	r3, [pc, #92]	; (402238 <xQueueGenericSend+0x1dc>)
  4021da:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4021dc:	4620      	mov	r0, r4
  4021de:	4b12      	ldr	r3, [pc, #72]	; (402228 <xQueueGenericSend+0x1cc>)
  4021e0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4021e2:	4b12      	ldr	r3, [pc, #72]	; (40222c <xQueueGenericSend+0x1d0>)
  4021e4:	4798      	blx	r3
  4021e6:	2800      	cmp	r0, #0
  4021e8:	d1c5      	bne.n	402176 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4021ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4021ee:	f8c9 3000 	str.w	r3, [r9]
  4021f2:	f3bf 8f4f 	dsb	sy
  4021f6:	f3bf 8f6f 	isb	sy
  4021fa:	e7bc      	b.n	402176 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4021fc:	4620      	mov	r0, r4
  4021fe:	4b0a      	ldr	r3, [pc, #40]	; (402228 <xQueueGenericSend+0x1cc>)
  402200:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402202:	4b0a      	ldr	r3, [pc, #40]	; (40222c <xQueueGenericSend+0x1d0>)
  402204:	4798      	blx	r3
			return errQUEUE_FULL;
  402206:	2000      	movs	r0, #0
  402208:	e78d      	b.n	402126 <xQueueGenericSend+0xca>
  40220a:	bf00      	nop
  40220c:	004030b1 	.word	0x004030b1
  402210:	00401ac1 	.word	0x00401ac1
  402214:	00401d71 	.word	0x00401d71
  402218:	00401df9 	.word	0x00401df9
  40221c:	e000ed04 	.word	0xe000ed04
  402220:	00401b0d 	.word	0x00401b0d
  402224:	00402f49 	.word	0x00402f49
  402228:	00401ea9 	.word	0x00401ea9
  40222c:	00402b2d 	.word	0x00402b2d
  402230:	004029c5 	.word	0x004029c5
  402234:	00403011 	.word	0x00403011
  402238:	00402e45 	.word	0x00402e45
  40223c:	00402fe1 	.word	0x00402fe1

00402240 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402240:	2800      	cmp	r0, #0
  402242:	d036      	beq.n	4022b2 <xQueueGenericSendFromISR+0x72>
{
  402244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402248:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40224a:	2900      	cmp	r1, #0
  40224c:	d03c      	beq.n	4022c8 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40224e:	2b02      	cmp	r3, #2
  402250:	d048      	beq.n	4022e4 <xQueueGenericSendFromISR+0xa4>
  402252:	461e      	mov	r6, r3
  402254:	4615      	mov	r5, r2
  402256:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402258:	4b35      	ldr	r3, [pc, #212]	; (402330 <xQueueGenericSendFromISR+0xf0>)
  40225a:	4798      	blx	r3
	__asm volatile
  40225c:	f3ef 8711 	mrs	r7, BASEPRI
  402260:	f04f 0380 	mov.w	r3, #128	; 0x80
  402264:	b672      	cpsid	i
  402266:	f383 8811 	msr	BASEPRI, r3
  40226a:	f3bf 8f6f 	isb	sy
  40226e:	f3bf 8f4f 	dsb	sy
  402272:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402274:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402278:	429a      	cmp	r2, r3
  40227a:	d301      	bcc.n	402280 <xQueueGenericSendFromISR+0x40>
  40227c:	2e02      	cmp	r6, #2
  40227e:	d14f      	bne.n	402320 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402280:	4632      	mov	r2, r6
  402282:	4641      	mov	r1, r8
  402284:	4620      	mov	r0, r4
  402286:	4b2b      	ldr	r3, [pc, #172]	; (402334 <xQueueGenericSendFromISR+0xf4>)
  402288:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40228a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40228c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402290:	d141      	bne.n	402316 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402292:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402294:	2b00      	cmp	r3, #0
  402296:	d033      	beq.n	402300 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402298:	4631      	mov	r1, r6
  40229a:	4620      	mov	r0, r4
  40229c:	4b26      	ldr	r3, [pc, #152]	; (402338 <xQueueGenericSendFromISR+0xf8>)
  40229e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4022a0:	2d00      	cmp	r5, #0
  4022a2:	d03f      	beq.n	402324 <xQueueGenericSendFromISR+0xe4>
  4022a4:	2801      	cmp	r0, #1
  4022a6:	d13d      	bne.n	402324 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4022a8:	6028      	str	r0, [r5, #0]
	__asm volatile
  4022aa:	f387 8811 	msr	BASEPRI, r7
}
  4022ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4022b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b6:	b672      	cpsid	i
  4022b8:	f383 8811 	msr	BASEPRI, r3
  4022bc:	f3bf 8f6f 	isb	sy
  4022c0:	f3bf 8f4f 	dsb	sy
  4022c4:	b662      	cpsie	i
  4022c6:	e7fe      	b.n	4022c6 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4022c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4022ca:	2800      	cmp	r0, #0
  4022cc:	d0bf      	beq.n	40224e <xQueueGenericSendFromISR+0xe>
  4022ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022d2:	b672      	cpsid	i
  4022d4:	f383 8811 	msr	BASEPRI, r3
  4022d8:	f3bf 8f6f 	isb	sy
  4022dc:	f3bf 8f4f 	dsb	sy
  4022e0:	b662      	cpsie	i
  4022e2:	e7fe      	b.n	4022e2 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4022e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4022e6:	2801      	cmp	r0, #1
  4022e8:	d0b3      	beq.n	402252 <xQueueGenericSendFromISR+0x12>
  4022ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ee:	b672      	cpsid	i
  4022f0:	f383 8811 	msr	BASEPRI, r3
  4022f4:	f3bf 8f6f 	isb	sy
  4022f8:	f3bf 8f4f 	dsb	sy
  4022fc:	b662      	cpsie	i
  4022fe:	e7fe      	b.n	4022fe <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402300:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402302:	b18b      	cbz	r3, 402328 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402304:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402308:	4b0c      	ldr	r3, [pc, #48]	; (40233c <xQueueGenericSendFromISR+0xfc>)
  40230a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40230c:	b175      	cbz	r5, 40232c <xQueueGenericSendFromISR+0xec>
  40230e:	b168      	cbz	r0, 40232c <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402310:	2001      	movs	r0, #1
  402312:	6028      	str	r0, [r5, #0]
  402314:	e7c9      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402316:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402318:	3301      	adds	r3, #1
  40231a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40231c:	2001      	movs	r0, #1
  40231e:	e7c4      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402320:	2000      	movs	r0, #0
  402322:	e7c2      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402324:	2001      	movs	r0, #1
  402326:	e7c0      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
  402328:	2001      	movs	r0, #1
  40232a:	e7be      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
  40232c:	2001      	movs	r0, #1
  40232e:	e7bc      	b.n	4022aa <xQueueGenericSendFromISR+0x6a>
  402330:	00401cb9 	.word	0x00401cb9
  402334:	00401d71 	.word	0x00401d71
  402338:	00401df9 	.word	0x00401df9
  40233c:	00402f49 	.word	0x00402f49

00402340 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402340:	b170      	cbz	r0, 402360 <xQueueGiveFromISR+0x20>
{
  402342:	b570      	push	{r4, r5, r6, lr}
  402344:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402346:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402348:	b1ab      	cbz	r3, 402376 <xQueueGiveFromISR+0x36>
  40234a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40234e:	b672      	cpsid	i
  402350:	f383 8811 	msr	BASEPRI, r3
  402354:	f3bf 8f6f 	isb	sy
  402358:	f3bf 8f4f 	dsb	sy
  40235c:	b662      	cpsie	i
  40235e:	e7fe      	b.n	40235e <xQueueGiveFromISR+0x1e>
  402360:	f04f 0380 	mov.w	r3, #128	; 0x80
  402364:	b672      	cpsid	i
  402366:	f383 8811 	msr	BASEPRI, r3
  40236a:	f3bf 8f6f 	isb	sy
  40236e:	f3bf 8f4f 	dsb	sy
  402372:	b662      	cpsie	i
  402374:	e7fe      	b.n	402374 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402376:	6803      	ldr	r3, [r0, #0]
  402378:	b333      	cbz	r3, 4023c8 <xQueueGiveFromISR+0x88>
  40237a:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40237c:	4b25      	ldr	r3, [pc, #148]	; (402414 <xQueueGiveFromISR+0xd4>)
  40237e:	4798      	blx	r3
	__asm volatile
  402380:	f3ef 8611 	mrs	r6, BASEPRI
  402384:	f04f 0380 	mov.w	r3, #128	; 0x80
  402388:	b672      	cpsid	i
  40238a:	f383 8811 	msr	BASEPRI, r3
  40238e:	f3bf 8f6f 	isb	sy
  402392:	f3bf 8f4f 	dsb	sy
  402396:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402398:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40239a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40239c:	429a      	cmp	r2, r3
  40239e:	d231      	bcs.n	402404 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4023a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023a2:	3301      	adds	r3, #1
  4023a4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4023a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023ac:	d125      	bne.n	4023fa <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4023ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4023b0:	b1c3      	cbz	r3, 4023e4 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4023b2:	2100      	movs	r1, #0
  4023b4:	4620      	mov	r0, r4
  4023b6:	4b18      	ldr	r3, [pc, #96]	; (402418 <xQueueGiveFromISR+0xd8>)
  4023b8:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4023ba:	b32d      	cbz	r5, 402408 <xQueueGiveFromISR+0xc8>
  4023bc:	2801      	cmp	r0, #1
  4023be:	d123      	bne.n	402408 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4023c0:	6028      	str	r0, [r5, #0]
	__asm volatile
  4023c2:	f386 8811 	msr	BASEPRI, r6
}
  4023c6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4023c8:	6843      	ldr	r3, [r0, #4]
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	d0d5      	beq.n	40237a <xQueueGiveFromISR+0x3a>
	__asm volatile
  4023ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023d2:	b672      	cpsid	i
  4023d4:	f383 8811 	msr	BASEPRI, r3
  4023d8:	f3bf 8f6f 	isb	sy
  4023dc:	f3bf 8f4f 	dsb	sy
  4023e0:	b662      	cpsie	i
  4023e2:	e7fe      	b.n	4023e2 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4023e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4023e6:	b18b      	cbz	r3, 40240c <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4023e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4023ec:	4b0b      	ldr	r3, [pc, #44]	; (40241c <xQueueGiveFromISR+0xdc>)
  4023ee:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4023f0:	b175      	cbz	r5, 402410 <xQueueGiveFromISR+0xd0>
  4023f2:	b168      	cbz	r0, 402410 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4023f4:	2001      	movs	r0, #1
  4023f6:	6028      	str	r0, [r5, #0]
  4023f8:	e7e3      	b.n	4023c2 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4023fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023fc:	3301      	adds	r3, #1
  4023fe:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402400:	2001      	movs	r0, #1
  402402:	e7de      	b.n	4023c2 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402404:	2000      	movs	r0, #0
  402406:	e7dc      	b.n	4023c2 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402408:	2001      	movs	r0, #1
  40240a:	e7da      	b.n	4023c2 <xQueueGiveFromISR+0x82>
  40240c:	2001      	movs	r0, #1
  40240e:	e7d8      	b.n	4023c2 <xQueueGiveFromISR+0x82>
  402410:	2001      	movs	r0, #1
  402412:	e7d6      	b.n	4023c2 <xQueueGiveFromISR+0x82>
  402414:	00401cb9 	.word	0x00401cb9
  402418:	00401df9 	.word	0x00401df9
  40241c:	00402f49 	.word	0x00402f49

00402420 <xQueueGenericReceive>:
{
  402420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402424:	b084      	sub	sp, #16
  402426:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402428:	b198      	cbz	r0, 402452 <xQueueGenericReceive+0x32>
  40242a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40242c:	b1e1      	cbz	r1, 402468 <xQueueGenericReceive+0x48>
  40242e:	4698      	mov	r8, r3
  402430:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402432:	4b61      	ldr	r3, [pc, #388]	; (4025b8 <xQueueGenericReceive+0x198>)
  402434:	4798      	blx	r3
  402436:	bb28      	cbnz	r0, 402484 <xQueueGenericReceive+0x64>
  402438:	9b01      	ldr	r3, [sp, #4]
  40243a:	b353      	cbz	r3, 402492 <xQueueGenericReceive+0x72>
  40243c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402440:	b672      	cpsid	i
  402442:	f383 8811 	msr	BASEPRI, r3
  402446:	f3bf 8f6f 	isb	sy
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	b662      	cpsie	i
  402450:	e7fe      	b.n	402450 <xQueueGenericReceive+0x30>
  402452:	f04f 0380 	mov.w	r3, #128	; 0x80
  402456:	b672      	cpsid	i
  402458:	f383 8811 	msr	BASEPRI, r3
  40245c:	f3bf 8f6f 	isb	sy
  402460:	f3bf 8f4f 	dsb	sy
  402464:	b662      	cpsie	i
  402466:	e7fe      	b.n	402466 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402468:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40246a:	2a00      	cmp	r2, #0
  40246c:	d0df      	beq.n	40242e <xQueueGenericReceive+0xe>
  40246e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402472:	b672      	cpsid	i
  402474:	f383 8811 	msr	BASEPRI, r3
  402478:	f3bf 8f6f 	isb	sy
  40247c:	f3bf 8f4f 	dsb	sy
  402480:	b662      	cpsie	i
  402482:	e7fe      	b.n	402482 <xQueueGenericReceive+0x62>
  402484:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402486:	4d4d      	ldr	r5, [pc, #308]	; (4025bc <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402488:	f8df a160 	ldr.w	sl, [pc, #352]	; 4025ec <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  40248c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4025cc <xQueueGenericReceive+0x1ac>
  402490:	e04b      	b.n	40252a <xQueueGenericReceive+0x10a>
  402492:	2600      	movs	r6, #0
  402494:	e7f7      	b.n	402486 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402496:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402498:	4639      	mov	r1, r7
  40249a:	4620      	mov	r0, r4
  40249c:	4b48      	ldr	r3, [pc, #288]	; (4025c0 <xQueueGenericReceive+0x1a0>)
  40249e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4024a0:	f1b8 0f00 	cmp.w	r8, #0
  4024a4:	d11d      	bne.n	4024e2 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4024a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024a8:	3b01      	subs	r3, #1
  4024aa:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4024ac:	6823      	ldr	r3, [r4, #0]
  4024ae:	b913      	cbnz	r3, 4024b6 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4024b0:	4b44      	ldr	r3, [pc, #272]	; (4025c4 <xQueueGenericReceive+0x1a4>)
  4024b2:	4798      	blx	r3
  4024b4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4024b6:	6923      	ldr	r3, [r4, #16]
  4024b8:	b16b      	cbz	r3, 4024d6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4024ba:	f104 0010 	add.w	r0, r4, #16
  4024be:	4b42      	ldr	r3, [pc, #264]	; (4025c8 <xQueueGenericReceive+0x1a8>)
  4024c0:	4798      	blx	r3
  4024c2:	2801      	cmp	r0, #1
  4024c4:	d107      	bne.n	4024d6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024ca:	4b40      	ldr	r3, [pc, #256]	; (4025cc <xQueueGenericReceive+0x1ac>)
  4024cc:	601a      	str	r2, [r3, #0]
  4024ce:	f3bf 8f4f 	dsb	sy
  4024d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4024d6:	4b3e      	ldr	r3, [pc, #248]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  4024d8:	4798      	blx	r3
				return pdPASS;
  4024da:	2001      	movs	r0, #1
}
  4024dc:	b004      	add	sp, #16
  4024de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4024e2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4024e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	d0f5      	beq.n	4024d6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4024ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4024ee:	4b36      	ldr	r3, [pc, #216]	; (4025c8 <xQueueGenericReceive+0x1a8>)
  4024f0:	4798      	blx	r3
  4024f2:	2800      	cmp	r0, #0
  4024f4:	d0ef      	beq.n	4024d6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4024f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024fa:	4b34      	ldr	r3, [pc, #208]	; (4025cc <xQueueGenericReceive+0x1ac>)
  4024fc:	601a      	str	r2, [r3, #0]
  4024fe:	f3bf 8f4f 	dsb	sy
  402502:	f3bf 8f6f 	isb	sy
  402506:	e7e6      	b.n	4024d6 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402508:	4b31      	ldr	r3, [pc, #196]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  40250a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40250c:	2000      	movs	r0, #0
  40250e:	e7e5      	b.n	4024dc <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402510:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402512:	6860      	ldr	r0, [r4, #4]
  402514:	4b2f      	ldr	r3, [pc, #188]	; (4025d4 <xQueueGenericReceive+0x1b4>)
  402516:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402518:	4b2d      	ldr	r3, [pc, #180]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  40251a:	4798      	blx	r3
  40251c:	e030      	b.n	402580 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40251e:	4620      	mov	r0, r4
  402520:	4b2d      	ldr	r3, [pc, #180]	; (4025d8 <xQueueGenericReceive+0x1b8>)
  402522:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402524:	4b2d      	ldr	r3, [pc, #180]	; (4025dc <xQueueGenericReceive+0x1bc>)
  402526:	4798      	blx	r3
  402528:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  40252a:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40252c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40252e:	2b00      	cmp	r3, #0
  402530:	d1b1      	bne.n	402496 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402532:	9b01      	ldr	r3, [sp, #4]
  402534:	2b00      	cmp	r3, #0
  402536:	d0e7      	beq.n	402508 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402538:	b90e      	cbnz	r6, 40253e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40253a:	a802      	add	r0, sp, #8
  40253c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40253e:	4b24      	ldr	r3, [pc, #144]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  402540:	4798      	blx	r3
		vTaskSuspendAll();
  402542:	4b27      	ldr	r3, [pc, #156]	; (4025e0 <xQueueGenericReceive+0x1c0>)
  402544:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402546:	47a8      	blx	r5
  402548:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40254a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40254e:	d101      	bne.n	402554 <xQueueGenericReceive+0x134>
  402550:	2300      	movs	r3, #0
  402552:	6463      	str	r3, [r4, #68]	; 0x44
  402554:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402556:	f1b3 3fff 	cmp.w	r3, #4294967295
  40255a:	d101      	bne.n	402560 <xQueueGenericReceive+0x140>
  40255c:	2300      	movs	r3, #0
  40255e:	64a3      	str	r3, [r4, #72]	; 0x48
  402560:	4b1b      	ldr	r3, [pc, #108]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  402562:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402564:	a901      	add	r1, sp, #4
  402566:	a802      	add	r0, sp, #8
  402568:	4b1e      	ldr	r3, [pc, #120]	; (4025e4 <xQueueGenericReceive+0x1c4>)
  40256a:	4798      	blx	r3
  40256c:	b9e8      	cbnz	r0, 4025aa <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40256e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402570:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402572:	4b17      	ldr	r3, [pc, #92]	; (4025d0 <xQueueGenericReceive+0x1b0>)
  402574:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402576:	2e00      	cmp	r6, #0
  402578:	d1d1      	bne.n	40251e <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40257a:	6823      	ldr	r3, [r4, #0]
  40257c:	2b00      	cmp	r3, #0
  40257e:	d0c7      	beq.n	402510 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402580:	9901      	ldr	r1, [sp, #4]
  402582:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402586:	4b18      	ldr	r3, [pc, #96]	; (4025e8 <xQueueGenericReceive+0x1c8>)
  402588:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40258a:	4620      	mov	r0, r4
  40258c:	4b12      	ldr	r3, [pc, #72]	; (4025d8 <xQueueGenericReceive+0x1b8>)
  40258e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402590:	4b12      	ldr	r3, [pc, #72]	; (4025dc <xQueueGenericReceive+0x1bc>)
  402592:	4798      	blx	r3
  402594:	2800      	cmp	r0, #0
  402596:	d1c7      	bne.n	402528 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40259c:	f8c9 3000 	str.w	r3, [r9]
  4025a0:	f3bf 8f4f 	dsb	sy
  4025a4:	f3bf 8f6f 	isb	sy
  4025a8:	e7be      	b.n	402528 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4025aa:	4620      	mov	r0, r4
  4025ac:	4b0a      	ldr	r3, [pc, #40]	; (4025d8 <xQueueGenericReceive+0x1b8>)
  4025ae:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4025b0:	4b0a      	ldr	r3, [pc, #40]	; (4025dc <xQueueGenericReceive+0x1bc>)
  4025b2:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4025b4:	2000      	movs	r0, #0
  4025b6:	e791      	b.n	4024dc <xQueueGenericReceive+0xbc>
  4025b8:	004030b1 	.word	0x004030b1
  4025bc:	00401ac1 	.word	0x00401ac1
  4025c0:	00401e81 	.word	0x00401e81
  4025c4:	00403231 	.word	0x00403231
  4025c8:	00402f49 	.word	0x00402f49
  4025cc:	e000ed04 	.word	0xe000ed04
  4025d0:	00401b0d 	.word	0x00401b0d
  4025d4:	004030d1 	.word	0x004030d1
  4025d8:	00401ea9 	.word	0x00401ea9
  4025dc:	00402b2d 	.word	0x00402b2d
  4025e0:	004029c5 	.word	0x004029c5
  4025e4:	00403011 	.word	0x00403011
  4025e8:	00402e45 	.word	0x00402e45
  4025ec:	00402fe1 	.word	0x00402fe1

004025f0 <vQueueAddToRegistry>:
	{
  4025f0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4025f2:	4b0b      	ldr	r3, [pc, #44]	; (402620 <vQueueAddToRegistry+0x30>)
  4025f4:	681b      	ldr	r3, [r3, #0]
  4025f6:	b153      	cbz	r3, 40260e <vQueueAddToRegistry+0x1e>
  4025f8:	2301      	movs	r3, #1
  4025fa:	4c09      	ldr	r4, [pc, #36]	; (402620 <vQueueAddToRegistry+0x30>)
  4025fc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402600:	b132      	cbz	r2, 402610 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402602:	3301      	adds	r3, #1
  402604:	2b08      	cmp	r3, #8
  402606:	d1f9      	bne.n	4025fc <vQueueAddToRegistry+0xc>
	}
  402608:	f85d 4b04 	ldr.w	r4, [sp], #4
  40260c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40260e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402610:	4a03      	ldr	r2, [pc, #12]	; (402620 <vQueueAddToRegistry+0x30>)
  402612:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402616:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40261a:	6058      	str	r0, [r3, #4]
				break;
  40261c:	e7f4      	b.n	402608 <vQueueAddToRegistry+0x18>
  40261e:	bf00      	nop
  402620:	20400e04 	.word	0x20400e04

00402624 <vQueueWaitForMessageRestricted>:
	{
  402624:	b570      	push	{r4, r5, r6, lr}
  402626:	4604      	mov	r4, r0
  402628:	460d      	mov	r5, r1
  40262a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40262c:	4b0f      	ldr	r3, [pc, #60]	; (40266c <vQueueWaitForMessageRestricted+0x48>)
  40262e:	4798      	blx	r3
  402630:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402632:	f1b3 3fff 	cmp.w	r3, #4294967295
  402636:	d00b      	beq.n	402650 <vQueueWaitForMessageRestricted+0x2c>
  402638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40263a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40263e:	d00a      	beq.n	402656 <vQueueWaitForMessageRestricted+0x32>
  402640:	4b0b      	ldr	r3, [pc, #44]	; (402670 <vQueueWaitForMessageRestricted+0x4c>)
  402642:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402646:	b14b      	cbz	r3, 40265c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402648:	4620      	mov	r0, r4
  40264a:	4b0a      	ldr	r3, [pc, #40]	; (402674 <vQueueWaitForMessageRestricted+0x50>)
  40264c:	4798      	blx	r3
  40264e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402650:	2300      	movs	r3, #0
  402652:	6463      	str	r3, [r4, #68]	; 0x44
  402654:	e7f0      	b.n	402638 <vQueueWaitForMessageRestricted+0x14>
  402656:	2300      	movs	r3, #0
  402658:	64a3      	str	r3, [r4, #72]	; 0x48
  40265a:	e7f1      	b.n	402640 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40265c:	4632      	mov	r2, r6
  40265e:	4629      	mov	r1, r5
  402660:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402664:	4b04      	ldr	r3, [pc, #16]	; (402678 <vQueueWaitForMessageRestricted+0x54>)
  402666:	4798      	blx	r3
  402668:	e7ee      	b.n	402648 <vQueueWaitForMessageRestricted+0x24>
  40266a:	bf00      	nop
  40266c:	00401ac1 	.word	0x00401ac1
  402670:	00401b0d 	.word	0x00401b0d
  402674:	00401ea9 	.word	0x00401ea9
  402678:	00402ec9 	.word	0x00402ec9

0040267c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40267c:	4b08      	ldr	r3, [pc, #32]	; (4026a0 <prvResetNextTaskUnblockTime+0x24>)
  40267e:	681b      	ldr	r3, [r3, #0]
  402680:	681b      	ldr	r3, [r3, #0]
  402682:	b13b      	cbz	r3, 402694 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402684:	4b06      	ldr	r3, [pc, #24]	; (4026a0 <prvResetNextTaskUnblockTime+0x24>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40268a:	68db      	ldr	r3, [r3, #12]
  40268c:	685a      	ldr	r2, [r3, #4]
  40268e:	4b05      	ldr	r3, [pc, #20]	; (4026a4 <prvResetNextTaskUnblockTime+0x28>)
  402690:	601a      	str	r2, [r3, #0]
  402692:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402694:	f04f 32ff 	mov.w	r2, #4294967295
  402698:	4b02      	ldr	r3, [pc, #8]	; (4026a4 <prvResetNextTaskUnblockTime+0x28>)
  40269a:	601a      	str	r2, [r3, #0]
  40269c:	4770      	bx	lr
  40269e:	bf00      	nop
  4026a0:	20400c8c 	.word	0x20400c8c
  4026a4:	20400d38 	.word	0x20400d38

004026a8 <prvAddCurrentTaskToDelayedList>:
{
  4026a8:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4026aa:	4b0f      	ldr	r3, [pc, #60]	; (4026e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4026ac:	681b      	ldr	r3, [r3, #0]
  4026ae:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4026b0:	4b0e      	ldr	r3, [pc, #56]	; (4026ec <prvAddCurrentTaskToDelayedList+0x44>)
  4026b2:	681b      	ldr	r3, [r3, #0]
  4026b4:	4298      	cmp	r0, r3
  4026b6:	d30e      	bcc.n	4026d6 <prvAddCurrentTaskToDelayedList+0x2e>
  4026b8:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4026ba:	4b0d      	ldr	r3, [pc, #52]	; (4026f0 <prvAddCurrentTaskToDelayedList+0x48>)
  4026bc:	6818      	ldr	r0, [r3, #0]
  4026be:	4b0a      	ldr	r3, [pc, #40]	; (4026e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4026c0:	6819      	ldr	r1, [r3, #0]
  4026c2:	3104      	adds	r1, #4
  4026c4:	4b0b      	ldr	r3, [pc, #44]	; (4026f4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4026c6:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4026c8:	4b0b      	ldr	r3, [pc, #44]	; (4026f8 <prvAddCurrentTaskToDelayedList+0x50>)
  4026ca:	681b      	ldr	r3, [r3, #0]
  4026cc:	429c      	cmp	r4, r3
  4026ce:	d201      	bcs.n	4026d4 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4026d0:	4b09      	ldr	r3, [pc, #36]	; (4026f8 <prvAddCurrentTaskToDelayedList+0x50>)
  4026d2:	601c      	str	r4, [r3, #0]
  4026d4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4026d6:	4b09      	ldr	r3, [pc, #36]	; (4026fc <prvAddCurrentTaskToDelayedList+0x54>)
  4026d8:	6818      	ldr	r0, [r3, #0]
  4026da:	4b03      	ldr	r3, [pc, #12]	; (4026e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4026dc:	6819      	ldr	r1, [r3, #0]
  4026de:	3104      	adds	r1, #4
  4026e0:	4b04      	ldr	r3, [pc, #16]	; (4026f4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4026e2:	4798      	blx	r3
  4026e4:	bd10      	pop	{r4, pc}
  4026e6:	bf00      	nop
  4026e8:	20400c88 	.word	0x20400c88
  4026ec:	20400d80 	.word	0x20400d80
  4026f0:	20400c8c 	.word	0x20400c8c
  4026f4:	004019a9 	.word	0x004019a9
  4026f8:	20400d38 	.word	0x20400d38
  4026fc:	20400c90 	.word	0x20400c90

00402700 <xTaskGenericCreate>:
{
  402700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402704:	b083      	sub	sp, #12
  402706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402708:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40270c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40270e:	b160      	cbz	r0, 40272a <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402710:	2d04      	cmp	r5, #4
  402712:	d915      	bls.n	402740 <xTaskGenericCreate+0x40>
  402714:	f04f 0380 	mov.w	r3, #128	; 0x80
  402718:	b672      	cpsid	i
  40271a:	f383 8811 	msr	BASEPRI, r3
  40271e:	f3bf 8f6f 	isb	sy
  402722:	f3bf 8f4f 	dsb	sy
  402726:	b662      	cpsie	i
  402728:	e7fe      	b.n	402728 <xTaskGenericCreate+0x28>
  40272a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40272e:	b672      	cpsid	i
  402730:	f383 8811 	msr	BASEPRI, r3
  402734:	f3bf 8f6f 	isb	sy
  402738:	f3bf 8f4f 	dsb	sy
  40273c:	b662      	cpsie	i
  40273e:	e7fe      	b.n	40273e <xTaskGenericCreate+0x3e>
  402740:	9001      	str	r0, [sp, #4]
  402742:	4698      	mov	r8, r3
  402744:	4691      	mov	r9, r2
  402746:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402748:	b936      	cbnz	r6, 402758 <xTaskGenericCreate+0x58>
  40274a:	0090      	lsls	r0, r2, #2
  40274c:	4b62      	ldr	r3, [pc, #392]	; (4028d8 <xTaskGenericCreate+0x1d8>)
  40274e:	4798      	blx	r3
		if( pxStack != NULL )
  402750:	4606      	mov	r6, r0
  402752:	2800      	cmp	r0, #0
  402754:	f000 809e 	beq.w	402894 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402758:	2058      	movs	r0, #88	; 0x58
  40275a:	4b5f      	ldr	r3, [pc, #380]	; (4028d8 <xTaskGenericCreate+0x1d8>)
  40275c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40275e:	4604      	mov	r4, r0
  402760:	2800      	cmp	r0, #0
  402762:	f000 8094 	beq.w	40288e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402766:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402768:	ea4f 0289 	mov.w	r2, r9, lsl #2
  40276c:	21a5      	movs	r1, #165	; 0xa5
  40276e:	4630      	mov	r0, r6
  402770:	4b5a      	ldr	r3, [pc, #360]	; (4028dc <xTaskGenericCreate+0x1dc>)
  402772:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402774:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402778:	444e      	add	r6, r9
  40277a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40277c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402780:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402784:	783b      	ldrb	r3, [r7, #0]
  402786:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40278a:	783b      	ldrb	r3, [r7, #0]
  40278c:	2b00      	cmp	r3, #0
  40278e:	f040 8084 	bne.w	40289a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402792:	2700      	movs	r7, #0
  402794:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402798:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40279a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40279c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40279e:	f104 0904 	add.w	r9, r4, #4
  4027a2:	4648      	mov	r0, r9
  4027a4:	f8df b184 	ldr.w	fp, [pc, #388]	; 40292c <xTaskGenericCreate+0x22c>
  4027a8:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4027aa:	f104 0018 	add.w	r0, r4, #24
  4027ae:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4027b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4027b2:	f1c5 0305 	rsb	r3, r5, #5
  4027b6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4027b8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4027ba:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4027bc:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4027c0:	4642      	mov	r2, r8
  4027c2:	9901      	ldr	r1, [sp, #4]
  4027c4:	4630      	mov	r0, r6
  4027c6:	4b46      	ldr	r3, [pc, #280]	; (4028e0 <xTaskGenericCreate+0x1e0>)
  4027c8:	4798      	blx	r3
  4027ca:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4027cc:	f1ba 0f00 	cmp.w	sl, #0
  4027d0:	d001      	beq.n	4027d6 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4027d2:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4027d6:	4b43      	ldr	r3, [pc, #268]	; (4028e4 <xTaskGenericCreate+0x1e4>)
  4027d8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4027da:	4a43      	ldr	r2, [pc, #268]	; (4028e8 <xTaskGenericCreate+0x1e8>)
  4027dc:	6813      	ldr	r3, [r2, #0]
  4027de:	3301      	adds	r3, #1
  4027e0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4027e2:	4b42      	ldr	r3, [pc, #264]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4027e4:	681b      	ldr	r3, [r3, #0]
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	d166      	bne.n	4028b8 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4027ea:	4b40      	ldr	r3, [pc, #256]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4027ec:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4027ee:	6813      	ldr	r3, [r2, #0]
  4027f0:	2b01      	cmp	r3, #1
  4027f2:	d121      	bne.n	402838 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4027f4:	4f3e      	ldr	r7, [pc, #248]	; (4028f0 <xTaskGenericCreate+0x1f0>)
  4027f6:	4638      	mov	r0, r7
  4027f8:	4e3e      	ldr	r6, [pc, #248]	; (4028f4 <xTaskGenericCreate+0x1f4>)
  4027fa:	47b0      	blx	r6
  4027fc:	f107 0014 	add.w	r0, r7, #20
  402800:	47b0      	blx	r6
  402802:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402806:	47b0      	blx	r6
  402808:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  40280c:	47b0      	blx	r6
  40280e:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402812:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402814:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402930 <xTaskGenericCreate+0x230>
  402818:	4640      	mov	r0, r8
  40281a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  40281c:	4f36      	ldr	r7, [pc, #216]	; (4028f8 <xTaskGenericCreate+0x1f8>)
  40281e:	4638      	mov	r0, r7
  402820:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402822:	4836      	ldr	r0, [pc, #216]	; (4028fc <xTaskGenericCreate+0x1fc>)
  402824:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402826:	4836      	ldr	r0, [pc, #216]	; (402900 <xTaskGenericCreate+0x200>)
  402828:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40282a:	4836      	ldr	r0, [pc, #216]	; (402904 <xTaskGenericCreate+0x204>)
  40282c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40282e:	4b36      	ldr	r3, [pc, #216]	; (402908 <xTaskGenericCreate+0x208>)
  402830:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402834:	4b35      	ldr	r3, [pc, #212]	; (40290c <xTaskGenericCreate+0x20c>)
  402836:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402838:	4a35      	ldr	r2, [pc, #212]	; (402910 <xTaskGenericCreate+0x210>)
  40283a:	6813      	ldr	r3, [r2, #0]
  40283c:	3301      	adds	r3, #1
  40283e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402840:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402844:	4a33      	ldr	r2, [pc, #204]	; (402914 <xTaskGenericCreate+0x214>)
  402846:	6811      	ldr	r1, [r2, #0]
  402848:	2301      	movs	r3, #1
  40284a:	4083      	lsls	r3, r0
  40284c:	430b      	orrs	r3, r1
  40284e:	6013      	str	r3, [r2, #0]
  402850:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402854:	4649      	mov	r1, r9
  402856:	4b26      	ldr	r3, [pc, #152]	; (4028f0 <xTaskGenericCreate+0x1f0>)
  402858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40285c:	4b2e      	ldr	r3, [pc, #184]	; (402918 <xTaskGenericCreate+0x218>)
  40285e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402860:	4b2e      	ldr	r3, [pc, #184]	; (40291c <xTaskGenericCreate+0x21c>)
  402862:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402864:	4b2e      	ldr	r3, [pc, #184]	; (402920 <xTaskGenericCreate+0x220>)
  402866:	681b      	ldr	r3, [r3, #0]
  402868:	2b00      	cmp	r3, #0
  40286a:	d031      	beq.n	4028d0 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40286c:	4b1f      	ldr	r3, [pc, #124]	; (4028ec <xTaskGenericCreate+0x1ec>)
  40286e:	681b      	ldr	r3, [r3, #0]
  402870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402872:	429d      	cmp	r5, r3
  402874:	d92e      	bls.n	4028d4 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40287a:	4b2a      	ldr	r3, [pc, #168]	; (402924 <xTaskGenericCreate+0x224>)
  40287c:	601a      	str	r2, [r3, #0]
  40287e:	f3bf 8f4f 	dsb	sy
  402882:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402886:	2001      	movs	r0, #1
}
  402888:	b003      	add	sp, #12
  40288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40288e:	4630      	mov	r0, r6
  402890:	4b25      	ldr	r3, [pc, #148]	; (402928 <xTaskGenericCreate+0x228>)
  402892:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402894:	f04f 30ff 	mov.w	r0, #4294967295
  402898:	e7f6      	b.n	402888 <xTaskGenericCreate+0x188>
  40289a:	463b      	mov	r3, r7
  40289c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4028a0:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4028a2:	7859      	ldrb	r1, [r3, #1]
  4028a4:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4028a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4028ac:	2900      	cmp	r1, #0
  4028ae:	f43f af70 	beq.w	402792 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4028b2:	42bb      	cmp	r3, r7
  4028b4:	d1f5      	bne.n	4028a2 <xTaskGenericCreate+0x1a2>
  4028b6:	e76c      	b.n	402792 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4028b8:	4b19      	ldr	r3, [pc, #100]	; (402920 <xTaskGenericCreate+0x220>)
  4028ba:	681b      	ldr	r3, [r3, #0]
  4028bc:	2b00      	cmp	r3, #0
  4028be:	d1bb      	bne.n	402838 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4028c0:	4b0a      	ldr	r3, [pc, #40]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4028c2:	681b      	ldr	r3, [r3, #0]
  4028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4028c6:	429d      	cmp	r5, r3
  4028c8:	d3b6      	bcc.n	402838 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4028ca:	4b08      	ldr	r3, [pc, #32]	; (4028ec <xTaskGenericCreate+0x1ec>)
  4028cc:	601c      	str	r4, [r3, #0]
  4028ce:	e7b3      	b.n	402838 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4028d0:	2001      	movs	r0, #1
  4028d2:	e7d9      	b.n	402888 <xTaskGenericCreate+0x188>
  4028d4:	2001      	movs	r0, #1
	return xReturn;
  4028d6:	e7d7      	b.n	402888 <xTaskGenericCreate+0x188>
  4028d8:	00401d1d 	.word	0x00401d1d
  4028dc:	00404881 	.word	0x00404881
  4028e0:	00401a75 	.word	0x00401a75
  4028e4:	00401ac1 	.word	0x00401ac1
  4028e8:	20400cf8 	.word	0x20400cf8
  4028ec:	20400c88 	.word	0x20400c88
  4028f0:	20400c94 	.word	0x20400c94
  4028f4:	00401975 	.word	0x00401975
  4028f8:	20400d24 	.word	0x20400d24
  4028fc:	20400d40 	.word	0x20400d40
  402900:	20400d6c 	.word	0x20400d6c
  402904:	20400d58 	.word	0x20400d58
  402908:	20400c8c 	.word	0x20400c8c
  40290c:	20400c90 	.word	0x20400c90
  402910:	20400d04 	.word	0x20400d04
  402914:	20400d0c 	.word	0x20400d0c
  402918:	00401991 	.word	0x00401991
  40291c:	00401b0d 	.word	0x00401b0d
  402920:	20400d54 	.word	0x20400d54
  402924:	e000ed04 	.word	0xe000ed04
  402928:	00401d4d 	.word	0x00401d4d
  40292c:	0040198b 	.word	0x0040198b
  402930:	20400d10 	.word	0x20400d10

00402934 <vTaskStartScheduler>:
{
  402934:	b510      	push	{r4, lr}
  402936:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402938:	2300      	movs	r3, #0
  40293a:	9303      	str	r3, [sp, #12]
  40293c:	9302      	str	r3, [sp, #8]
  40293e:	9301      	str	r3, [sp, #4]
  402940:	9300      	str	r3, [sp, #0]
  402942:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402946:	4917      	ldr	r1, [pc, #92]	; (4029a4 <vTaskStartScheduler+0x70>)
  402948:	4817      	ldr	r0, [pc, #92]	; (4029a8 <vTaskStartScheduler+0x74>)
  40294a:	4c18      	ldr	r4, [pc, #96]	; (4029ac <vTaskStartScheduler+0x78>)
  40294c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40294e:	2801      	cmp	r0, #1
  402950:	d00b      	beq.n	40296a <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  402952:	bb20      	cbnz	r0, 40299e <vTaskStartScheduler+0x6a>
  402954:	f04f 0380 	mov.w	r3, #128	; 0x80
  402958:	b672      	cpsid	i
  40295a:	f383 8811 	msr	BASEPRI, r3
  40295e:	f3bf 8f6f 	isb	sy
  402962:	f3bf 8f4f 	dsb	sy
  402966:	b662      	cpsie	i
  402968:	e7fe      	b.n	402968 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  40296a:	4b11      	ldr	r3, [pc, #68]	; (4029b0 <vTaskStartScheduler+0x7c>)
  40296c:	4798      	blx	r3
	if( xReturn == pdPASS )
  40296e:	2801      	cmp	r0, #1
  402970:	d1ef      	bne.n	402952 <vTaskStartScheduler+0x1e>
  402972:	f04f 0380 	mov.w	r3, #128	; 0x80
  402976:	b672      	cpsid	i
  402978:	f383 8811 	msr	BASEPRI, r3
  40297c:	f3bf 8f6f 	isb	sy
  402980:	f3bf 8f4f 	dsb	sy
  402984:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402986:	f04f 32ff 	mov.w	r2, #4294967295
  40298a:	4b0a      	ldr	r3, [pc, #40]	; (4029b4 <vTaskStartScheduler+0x80>)
  40298c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40298e:	2201      	movs	r2, #1
  402990:	4b09      	ldr	r3, [pc, #36]	; (4029b8 <vTaskStartScheduler+0x84>)
  402992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402994:	2200      	movs	r2, #0
  402996:	4b09      	ldr	r3, [pc, #36]	; (4029bc <vTaskStartScheduler+0x88>)
  402998:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40299a:	4b09      	ldr	r3, [pc, #36]	; (4029c0 <vTaskStartScheduler+0x8c>)
  40299c:	4798      	blx	r3
}
  40299e:	b004      	add	sp, #16
  4029a0:	bd10      	pop	{r4, pc}
  4029a2:	bf00      	nop
  4029a4:	0040b2f0 	.word	0x0040b2f0
  4029a8:	00402cdd 	.word	0x00402cdd
  4029ac:	00402701 	.word	0x00402701
  4029b0:	0040331d 	.word	0x0040331d
  4029b4:	20400d38 	.word	0x20400d38
  4029b8:	20400d54 	.word	0x20400d54
  4029bc:	20400d80 	.word	0x20400d80
  4029c0:	00401bf5 	.word	0x00401bf5

004029c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4029c4:	4a02      	ldr	r2, [pc, #8]	; (4029d0 <vTaskSuspendAll+0xc>)
  4029c6:	6813      	ldr	r3, [r2, #0]
  4029c8:	3301      	adds	r3, #1
  4029ca:	6013      	str	r3, [r2, #0]
  4029cc:	4770      	bx	lr
  4029ce:	bf00      	nop
  4029d0:	20400d00 	.word	0x20400d00

004029d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4029d4:	4b01      	ldr	r3, [pc, #4]	; (4029dc <xTaskGetTickCount+0x8>)
  4029d6:	6818      	ldr	r0, [r3, #0]
}
  4029d8:	4770      	bx	lr
  4029da:	bf00      	nop
  4029dc:	20400d80 	.word	0x20400d80

004029e0 <xTaskIncrementTick>:
{
  4029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4029e4:	4b42      	ldr	r3, [pc, #264]	; (402af0 <xTaskIncrementTick+0x110>)
  4029e6:	681b      	ldr	r3, [r3, #0]
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d178      	bne.n	402ade <xTaskIncrementTick+0xfe>
		++xTickCount;
  4029ec:	4b41      	ldr	r3, [pc, #260]	; (402af4 <xTaskIncrementTick+0x114>)
  4029ee:	681a      	ldr	r2, [r3, #0]
  4029f0:	3201      	adds	r2, #1
  4029f2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4029f4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4029f6:	b9d6      	cbnz	r6, 402a2e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4029f8:	4b3f      	ldr	r3, [pc, #252]	; (402af8 <xTaskIncrementTick+0x118>)
  4029fa:	681b      	ldr	r3, [r3, #0]
  4029fc:	681b      	ldr	r3, [r3, #0]
  4029fe:	b153      	cbz	r3, 402a16 <xTaskIncrementTick+0x36>
  402a00:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a04:	b672      	cpsid	i
  402a06:	f383 8811 	msr	BASEPRI, r3
  402a0a:	f3bf 8f6f 	isb	sy
  402a0e:	f3bf 8f4f 	dsb	sy
  402a12:	b662      	cpsie	i
  402a14:	e7fe      	b.n	402a14 <xTaskIncrementTick+0x34>
  402a16:	4a38      	ldr	r2, [pc, #224]	; (402af8 <xTaskIncrementTick+0x118>)
  402a18:	6811      	ldr	r1, [r2, #0]
  402a1a:	4b38      	ldr	r3, [pc, #224]	; (402afc <xTaskIncrementTick+0x11c>)
  402a1c:	6818      	ldr	r0, [r3, #0]
  402a1e:	6010      	str	r0, [r2, #0]
  402a20:	6019      	str	r1, [r3, #0]
  402a22:	4a37      	ldr	r2, [pc, #220]	; (402b00 <xTaskIncrementTick+0x120>)
  402a24:	6813      	ldr	r3, [r2, #0]
  402a26:	3301      	adds	r3, #1
  402a28:	6013      	str	r3, [r2, #0]
  402a2a:	4b36      	ldr	r3, [pc, #216]	; (402b04 <xTaskIncrementTick+0x124>)
  402a2c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402a2e:	4b36      	ldr	r3, [pc, #216]	; (402b08 <xTaskIncrementTick+0x128>)
  402a30:	681b      	ldr	r3, [r3, #0]
  402a32:	429e      	cmp	r6, r3
  402a34:	d218      	bcs.n	402a68 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402a36:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402a38:	4b34      	ldr	r3, [pc, #208]	; (402b0c <xTaskIncrementTick+0x12c>)
  402a3a:	681b      	ldr	r3, [r3, #0]
  402a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402a42:	4a33      	ldr	r2, [pc, #204]	; (402b10 <xTaskIncrementTick+0x130>)
  402a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402a48:	2b02      	cmp	r3, #2
  402a4a:	bf28      	it	cs
  402a4c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402a4e:	4b31      	ldr	r3, [pc, #196]	; (402b14 <xTaskIncrementTick+0x134>)
  402a50:	681b      	ldr	r3, [r3, #0]
  402a52:	b90b      	cbnz	r3, 402a58 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402a54:	4b30      	ldr	r3, [pc, #192]	; (402b18 <xTaskIncrementTick+0x138>)
  402a56:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402a58:	4b30      	ldr	r3, [pc, #192]	; (402b1c <xTaskIncrementTick+0x13c>)
  402a5a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402a5c:	2b00      	cmp	r3, #0
}
  402a5e:	bf0c      	ite	eq
  402a60:	4620      	moveq	r0, r4
  402a62:	2001      	movne	r0, #1
  402a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a68:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402a6a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402af8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a6e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402b28 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402a72:	4f2b      	ldr	r7, [pc, #172]	; (402b20 <xTaskIncrementTick+0x140>)
  402a74:	e01f      	b.n	402ab6 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402a76:	f04f 32ff 	mov.w	r2, #4294967295
  402a7a:	4b23      	ldr	r3, [pc, #140]	; (402b08 <xTaskIncrementTick+0x128>)
  402a7c:	601a      	str	r2, [r3, #0]
						break;
  402a7e:	e7db      	b.n	402a38 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402a80:	4a21      	ldr	r2, [pc, #132]	; (402b08 <xTaskIncrementTick+0x128>)
  402a82:	6013      	str	r3, [r2, #0]
							break;
  402a84:	e7d8      	b.n	402a38 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402a86:	f105 0018 	add.w	r0, r5, #24
  402a8a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402a8c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402a8e:	683a      	ldr	r2, [r7, #0]
  402a90:	2301      	movs	r3, #1
  402a92:	4083      	lsls	r3, r0
  402a94:	4313      	orrs	r3, r2
  402a96:	603b      	str	r3, [r7, #0]
  402a98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a9c:	4651      	mov	r1, sl
  402a9e:	4b1c      	ldr	r3, [pc, #112]	; (402b10 <xTaskIncrementTick+0x130>)
  402aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402aa4:	4b1f      	ldr	r3, [pc, #124]	; (402b24 <xTaskIncrementTick+0x144>)
  402aa6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402aa8:	4b18      	ldr	r3, [pc, #96]	; (402b0c <xTaskIncrementTick+0x12c>)
  402aaa:	681b      	ldr	r3, [r3, #0]
  402aac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402ab0:	429a      	cmp	r2, r3
  402ab2:	bf28      	it	cs
  402ab4:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402ab6:	f8d9 3000 	ldr.w	r3, [r9]
  402aba:	681b      	ldr	r3, [r3, #0]
  402abc:	2b00      	cmp	r3, #0
  402abe:	d0da      	beq.n	402a76 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402ac0:	f8d9 3000 	ldr.w	r3, [r9]
  402ac4:	68db      	ldr	r3, [r3, #12]
  402ac6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402ac8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402aca:	429e      	cmp	r6, r3
  402acc:	d3d8      	bcc.n	402a80 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402ace:	f105 0a04 	add.w	sl, r5, #4
  402ad2:	4650      	mov	r0, sl
  402ad4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402ad6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402ad8:	2b00      	cmp	r3, #0
  402ada:	d1d4      	bne.n	402a86 <xTaskIncrementTick+0xa6>
  402adc:	e7d6      	b.n	402a8c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402ade:	4a0d      	ldr	r2, [pc, #52]	; (402b14 <xTaskIncrementTick+0x134>)
  402ae0:	6813      	ldr	r3, [r2, #0]
  402ae2:	3301      	adds	r3, #1
  402ae4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402ae6:	4b0c      	ldr	r3, [pc, #48]	; (402b18 <xTaskIncrementTick+0x138>)
  402ae8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402aea:	2400      	movs	r4, #0
  402aec:	e7b4      	b.n	402a58 <xTaskIncrementTick+0x78>
  402aee:	bf00      	nop
  402af0:	20400d00 	.word	0x20400d00
  402af4:	20400d80 	.word	0x20400d80
  402af8:	20400c8c 	.word	0x20400c8c
  402afc:	20400c90 	.word	0x20400c90
  402b00:	20400d3c 	.word	0x20400d3c
  402b04:	0040267d 	.word	0x0040267d
  402b08:	20400d38 	.word	0x20400d38
  402b0c:	20400c88 	.word	0x20400c88
  402b10:	20400c94 	.word	0x20400c94
  402b14:	20400cfc 	.word	0x20400cfc
  402b18:	00403a25 	.word	0x00403a25
  402b1c:	20400d84 	.word	0x20400d84
  402b20:	20400d0c 	.word	0x20400d0c
  402b24:	00401991 	.word	0x00401991
  402b28:	004019dd 	.word	0x004019dd

00402b2c <xTaskResumeAll>:
{
  402b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402b30:	4b38      	ldr	r3, [pc, #224]	; (402c14 <xTaskResumeAll+0xe8>)
  402b32:	681b      	ldr	r3, [r3, #0]
  402b34:	b953      	cbnz	r3, 402b4c <xTaskResumeAll+0x20>
  402b36:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b3a:	b672      	cpsid	i
  402b3c:	f383 8811 	msr	BASEPRI, r3
  402b40:	f3bf 8f6f 	isb	sy
  402b44:	f3bf 8f4f 	dsb	sy
  402b48:	b662      	cpsie	i
  402b4a:	e7fe      	b.n	402b4a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402b4c:	4b32      	ldr	r3, [pc, #200]	; (402c18 <xTaskResumeAll+0xec>)
  402b4e:	4798      	blx	r3
		--uxSchedulerSuspended;
  402b50:	4b30      	ldr	r3, [pc, #192]	; (402c14 <xTaskResumeAll+0xe8>)
  402b52:	681a      	ldr	r2, [r3, #0]
  402b54:	3a01      	subs	r2, #1
  402b56:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b58:	681b      	ldr	r3, [r3, #0]
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d155      	bne.n	402c0a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402b5e:	4b2f      	ldr	r3, [pc, #188]	; (402c1c <xTaskResumeAll+0xf0>)
  402b60:	681b      	ldr	r3, [r3, #0]
  402b62:	2b00      	cmp	r3, #0
  402b64:	d132      	bne.n	402bcc <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402b66:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402b68:	4b2d      	ldr	r3, [pc, #180]	; (402c20 <xTaskResumeAll+0xf4>)
  402b6a:	4798      	blx	r3
}
  402b6c:	4620      	mov	r0, r4
  402b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402b72:	68fb      	ldr	r3, [r7, #12]
  402b74:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402b76:	f104 0018 	add.w	r0, r4, #24
  402b7a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402b7c:	f104 0804 	add.w	r8, r4, #4
  402b80:	4640      	mov	r0, r8
  402b82:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402b84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402b86:	682a      	ldr	r2, [r5, #0]
  402b88:	2301      	movs	r3, #1
  402b8a:	4083      	lsls	r3, r0
  402b8c:	4313      	orrs	r3, r2
  402b8e:	602b      	str	r3, [r5, #0]
  402b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b94:	4641      	mov	r1, r8
  402b96:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402b9a:	4b22      	ldr	r3, [pc, #136]	; (402c24 <xTaskResumeAll+0xf8>)
  402b9c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402b9e:	4b22      	ldr	r3, [pc, #136]	; (402c28 <xTaskResumeAll+0xfc>)
  402ba0:	681b      	ldr	r3, [r3, #0]
  402ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402ba6:	429a      	cmp	r2, r3
  402ba8:	d20c      	bcs.n	402bc4 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402baa:	683b      	ldr	r3, [r7, #0]
  402bac:	2b00      	cmp	r3, #0
  402bae:	d1e0      	bne.n	402b72 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402bb0:	4b1e      	ldr	r3, [pc, #120]	; (402c2c <xTaskResumeAll+0x100>)
  402bb2:	681b      	ldr	r3, [r3, #0]
  402bb4:	b1db      	cbz	r3, 402bee <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402bb6:	4b1d      	ldr	r3, [pc, #116]	; (402c2c <xTaskResumeAll+0x100>)
  402bb8:	681b      	ldr	r3, [r3, #0]
  402bba:	b1c3      	cbz	r3, 402bee <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402bbc:	4e1c      	ldr	r6, [pc, #112]	; (402c30 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402bbe:	4d1d      	ldr	r5, [pc, #116]	; (402c34 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402bc0:	4c1a      	ldr	r4, [pc, #104]	; (402c2c <xTaskResumeAll+0x100>)
  402bc2:	e00e      	b.n	402be2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402bc4:	2201      	movs	r2, #1
  402bc6:	4b1b      	ldr	r3, [pc, #108]	; (402c34 <xTaskResumeAll+0x108>)
  402bc8:	601a      	str	r2, [r3, #0]
  402bca:	e7ee      	b.n	402baa <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402bcc:	4f1a      	ldr	r7, [pc, #104]	; (402c38 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402bce:	4e1b      	ldr	r6, [pc, #108]	; (402c3c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402bd0:	4d1b      	ldr	r5, [pc, #108]	; (402c40 <xTaskResumeAll+0x114>)
  402bd2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402c48 <xTaskResumeAll+0x11c>
  402bd6:	e7e8      	b.n	402baa <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402bd8:	6823      	ldr	r3, [r4, #0]
  402bda:	3b01      	subs	r3, #1
  402bdc:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402bde:	6823      	ldr	r3, [r4, #0]
  402be0:	b12b      	cbz	r3, 402bee <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402be2:	47b0      	blx	r6
  402be4:	2800      	cmp	r0, #0
  402be6:	d0f7      	beq.n	402bd8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402be8:	2301      	movs	r3, #1
  402bea:	602b      	str	r3, [r5, #0]
  402bec:	e7f4      	b.n	402bd8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402bee:	4b11      	ldr	r3, [pc, #68]	; (402c34 <xTaskResumeAll+0x108>)
  402bf0:	681b      	ldr	r3, [r3, #0]
  402bf2:	2b01      	cmp	r3, #1
  402bf4:	d10b      	bne.n	402c0e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402bfa:	4b12      	ldr	r3, [pc, #72]	; (402c44 <xTaskResumeAll+0x118>)
  402bfc:	601a      	str	r2, [r3, #0]
  402bfe:	f3bf 8f4f 	dsb	sy
  402c02:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402c06:	2401      	movs	r4, #1
  402c08:	e7ae      	b.n	402b68 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402c0a:	2400      	movs	r4, #0
  402c0c:	e7ac      	b.n	402b68 <xTaskResumeAll+0x3c>
  402c0e:	2400      	movs	r4, #0
  402c10:	e7aa      	b.n	402b68 <xTaskResumeAll+0x3c>
  402c12:	bf00      	nop
  402c14:	20400d00 	.word	0x20400d00
  402c18:	00401ac1 	.word	0x00401ac1
  402c1c:	20400cf8 	.word	0x20400cf8
  402c20:	00401b0d 	.word	0x00401b0d
  402c24:	00401991 	.word	0x00401991
  402c28:	20400c88 	.word	0x20400c88
  402c2c:	20400cfc 	.word	0x20400cfc
  402c30:	004029e1 	.word	0x004029e1
  402c34:	20400d84 	.word	0x20400d84
  402c38:	20400d40 	.word	0x20400d40
  402c3c:	004019dd 	.word	0x004019dd
  402c40:	20400d0c 	.word	0x20400d0c
  402c44:	e000ed04 	.word	0xe000ed04
  402c48:	20400c94 	.word	0x20400c94

00402c4c <vTaskDelay>:
	{
  402c4c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402c4e:	2800      	cmp	r0, #0
  402c50:	d029      	beq.n	402ca6 <vTaskDelay+0x5a>
  402c52:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402c54:	4b18      	ldr	r3, [pc, #96]	; (402cb8 <vTaskDelay+0x6c>)
  402c56:	681b      	ldr	r3, [r3, #0]
  402c58:	b153      	cbz	r3, 402c70 <vTaskDelay+0x24>
  402c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c5e:	b672      	cpsid	i
  402c60:	f383 8811 	msr	BASEPRI, r3
  402c64:	f3bf 8f6f 	isb	sy
  402c68:	f3bf 8f4f 	dsb	sy
  402c6c:	b662      	cpsie	i
  402c6e:	e7fe      	b.n	402c6e <vTaskDelay+0x22>
			vTaskSuspendAll();
  402c70:	4b12      	ldr	r3, [pc, #72]	; (402cbc <vTaskDelay+0x70>)
  402c72:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402c74:	4b12      	ldr	r3, [pc, #72]	; (402cc0 <vTaskDelay+0x74>)
  402c76:	681b      	ldr	r3, [r3, #0]
  402c78:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c7a:	4b12      	ldr	r3, [pc, #72]	; (402cc4 <vTaskDelay+0x78>)
  402c7c:	6818      	ldr	r0, [r3, #0]
  402c7e:	3004      	adds	r0, #4
  402c80:	4b11      	ldr	r3, [pc, #68]	; (402cc8 <vTaskDelay+0x7c>)
  402c82:	4798      	blx	r3
  402c84:	b948      	cbnz	r0, 402c9a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402c86:	4b0f      	ldr	r3, [pc, #60]	; (402cc4 <vTaskDelay+0x78>)
  402c88:	681a      	ldr	r2, [r3, #0]
  402c8a:	4910      	ldr	r1, [pc, #64]	; (402ccc <vTaskDelay+0x80>)
  402c8c:	680b      	ldr	r3, [r1, #0]
  402c8e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402c90:	2201      	movs	r2, #1
  402c92:	4082      	lsls	r2, r0
  402c94:	ea23 0302 	bic.w	r3, r3, r2
  402c98:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402c9a:	4620      	mov	r0, r4
  402c9c:	4b0c      	ldr	r3, [pc, #48]	; (402cd0 <vTaskDelay+0x84>)
  402c9e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402ca0:	4b0c      	ldr	r3, [pc, #48]	; (402cd4 <vTaskDelay+0x88>)
  402ca2:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402ca4:	b938      	cbnz	r0, 402cb6 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402caa:	4b0b      	ldr	r3, [pc, #44]	; (402cd8 <vTaskDelay+0x8c>)
  402cac:	601a      	str	r2, [r3, #0]
  402cae:	f3bf 8f4f 	dsb	sy
  402cb2:	f3bf 8f6f 	isb	sy
  402cb6:	bd10      	pop	{r4, pc}
  402cb8:	20400d00 	.word	0x20400d00
  402cbc:	004029c5 	.word	0x004029c5
  402cc0:	20400d80 	.word	0x20400d80
  402cc4:	20400c88 	.word	0x20400c88
  402cc8:	004019dd 	.word	0x004019dd
  402ccc:	20400d0c 	.word	0x20400d0c
  402cd0:	004026a9 	.word	0x004026a9
  402cd4:	00402b2d 	.word	0x00402b2d
  402cd8:	e000ed04 	.word	0xe000ed04

00402cdc <prvIdleTask>:
{
  402cdc:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402cde:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402d68 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402ce2:	4e19      	ldr	r6, [pc, #100]	; (402d48 <prvIdleTask+0x6c>)
				taskYIELD();
  402ce4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402d6c <prvIdleTask+0x90>
  402ce8:	e02a      	b.n	402d40 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402cea:	4b18      	ldr	r3, [pc, #96]	; (402d4c <prvIdleTask+0x70>)
  402cec:	681b      	ldr	r3, [r3, #0]
  402cee:	2b01      	cmp	r3, #1
  402cf0:	d81e      	bhi.n	402d30 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402cf2:	682b      	ldr	r3, [r5, #0]
  402cf4:	2b00      	cmp	r3, #0
  402cf6:	d0f8      	beq.n	402cea <prvIdleTask+0xe>
			vTaskSuspendAll();
  402cf8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402cfa:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402cfc:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402cfe:	2c00      	cmp	r4, #0
  402d00:	d0f7      	beq.n	402cf2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402d02:	4b13      	ldr	r3, [pc, #76]	; (402d50 <prvIdleTask+0x74>)
  402d04:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402d06:	68f3      	ldr	r3, [r6, #12]
  402d08:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402d0a:	1d20      	adds	r0, r4, #4
  402d0c:	4b11      	ldr	r3, [pc, #68]	; (402d54 <prvIdleTask+0x78>)
  402d0e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402d10:	4a11      	ldr	r2, [pc, #68]	; (402d58 <prvIdleTask+0x7c>)
  402d12:	6813      	ldr	r3, [r2, #0]
  402d14:	3b01      	subs	r3, #1
  402d16:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402d18:	682b      	ldr	r3, [r5, #0]
  402d1a:	3b01      	subs	r3, #1
  402d1c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402d1e:	4b0f      	ldr	r3, [pc, #60]	; (402d5c <prvIdleTask+0x80>)
  402d20:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402d22:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402d24:	f8df a048 	ldr.w	sl, [pc, #72]	; 402d70 <prvIdleTask+0x94>
  402d28:	47d0      	blx	sl
		vPortFree( pxTCB );
  402d2a:	4620      	mov	r0, r4
  402d2c:	47d0      	blx	sl
  402d2e:	e7e0      	b.n	402cf2 <prvIdleTask+0x16>
				taskYIELD();
  402d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402d34:	f8c9 3000 	str.w	r3, [r9]
  402d38:	f3bf 8f4f 	dsb	sy
  402d3c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402d40:	4d07      	ldr	r5, [pc, #28]	; (402d60 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402d42:	4f08      	ldr	r7, [pc, #32]	; (402d64 <prvIdleTask+0x88>)
  402d44:	e7d5      	b.n	402cf2 <prvIdleTask+0x16>
  402d46:	bf00      	nop
  402d48:	20400d6c 	.word	0x20400d6c
  402d4c:	20400c94 	.word	0x20400c94
  402d50:	00401ac1 	.word	0x00401ac1
  402d54:	004019dd 	.word	0x004019dd
  402d58:	20400cf8 	.word	0x20400cf8
  402d5c:	00401b0d 	.word	0x00401b0d
  402d60:	20400d08 	.word	0x20400d08
  402d64:	00402b2d 	.word	0x00402b2d
  402d68:	004029c5 	.word	0x004029c5
  402d6c:	e000ed04 	.word	0xe000ed04
  402d70:	00401d4d 	.word	0x00401d4d

00402d74 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402d74:	4b2d      	ldr	r3, [pc, #180]	; (402e2c <vTaskSwitchContext+0xb8>)
  402d76:	681b      	ldr	r3, [r3, #0]
  402d78:	2b00      	cmp	r3, #0
  402d7a:	d12c      	bne.n	402dd6 <vTaskSwitchContext+0x62>
{
  402d7c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402d7e:	2200      	movs	r2, #0
  402d80:	4b2b      	ldr	r3, [pc, #172]	; (402e30 <vTaskSwitchContext+0xbc>)
  402d82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402d84:	4b2b      	ldr	r3, [pc, #172]	; (402e34 <vTaskSwitchContext+0xc0>)
  402d86:	681b      	ldr	r3, [r3, #0]
  402d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d8a:	681a      	ldr	r2, [r3, #0]
  402d8c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402d90:	d103      	bne.n	402d9a <vTaskSwitchContext+0x26>
  402d92:	685a      	ldr	r2, [r3, #4]
  402d94:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402d98:	d021      	beq.n	402dde <vTaskSwitchContext+0x6a>
  402d9a:	4b26      	ldr	r3, [pc, #152]	; (402e34 <vTaskSwitchContext+0xc0>)
  402d9c:	6818      	ldr	r0, [r3, #0]
  402d9e:	6819      	ldr	r1, [r3, #0]
  402da0:	3134      	adds	r1, #52	; 0x34
  402da2:	4b25      	ldr	r3, [pc, #148]	; (402e38 <vTaskSwitchContext+0xc4>)
  402da4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402da6:	4b25      	ldr	r3, [pc, #148]	; (402e3c <vTaskSwitchContext+0xc8>)
  402da8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402daa:	fab3 f383 	clz	r3, r3
  402dae:	b2db      	uxtb	r3, r3
  402db0:	f1c3 031f 	rsb	r3, r3, #31
  402db4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402db8:	4a21      	ldr	r2, [pc, #132]	; (402e40 <vTaskSwitchContext+0xcc>)
  402dba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402dbe:	b9ba      	cbnz	r2, 402df0 <vTaskSwitchContext+0x7c>
	__asm volatile
  402dc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dc4:	b672      	cpsid	i
  402dc6:	f383 8811 	msr	BASEPRI, r3
  402dca:	f3bf 8f6f 	isb	sy
  402dce:	f3bf 8f4f 	dsb	sy
  402dd2:	b662      	cpsie	i
  402dd4:	e7fe      	b.n	402dd4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402dd6:	2201      	movs	r2, #1
  402dd8:	4b15      	ldr	r3, [pc, #84]	; (402e30 <vTaskSwitchContext+0xbc>)
  402dda:	601a      	str	r2, [r3, #0]
  402ddc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402dde:	689a      	ldr	r2, [r3, #8]
  402de0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402de4:	d1d9      	bne.n	402d9a <vTaskSwitchContext+0x26>
  402de6:	68db      	ldr	r3, [r3, #12]
  402de8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402dec:	d1d5      	bne.n	402d9a <vTaskSwitchContext+0x26>
  402dee:	e7da      	b.n	402da6 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402df0:	4a13      	ldr	r2, [pc, #76]	; (402e40 <vTaskSwitchContext+0xcc>)
  402df2:	0099      	lsls	r1, r3, #2
  402df4:	18c8      	adds	r0, r1, r3
  402df6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402dfa:	6844      	ldr	r4, [r0, #4]
  402dfc:	6864      	ldr	r4, [r4, #4]
  402dfe:	6044      	str	r4, [r0, #4]
  402e00:	4419      	add	r1, r3
  402e02:	4602      	mov	r2, r0
  402e04:	3208      	adds	r2, #8
  402e06:	4294      	cmp	r4, r2
  402e08:	d009      	beq.n	402e1e <vTaskSwitchContext+0xaa>
  402e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e0e:	4a0c      	ldr	r2, [pc, #48]	; (402e40 <vTaskSwitchContext+0xcc>)
  402e10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402e14:	685b      	ldr	r3, [r3, #4]
  402e16:	68da      	ldr	r2, [r3, #12]
  402e18:	4b06      	ldr	r3, [pc, #24]	; (402e34 <vTaskSwitchContext+0xc0>)
  402e1a:	601a      	str	r2, [r3, #0]
  402e1c:	bd10      	pop	{r4, pc}
  402e1e:	6860      	ldr	r0, [r4, #4]
  402e20:	4a07      	ldr	r2, [pc, #28]	; (402e40 <vTaskSwitchContext+0xcc>)
  402e22:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402e26:	6050      	str	r0, [r2, #4]
  402e28:	e7ef      	b.n	402e0a <vTaskSwitchContext+0x96>
  402e2a:	bf00      	nop
  402e2c:	20400d00 	.word	0x20400d00
  402e30:	20400d84 	.word	0x20400d84
  402e34:	20400c88 	.word	0x20400c88
  402e38:	00403a0d 	.word	0x00403a0d
  402e3c:	20400d0c 	.word	0x20400d0c
  402e40:	20400c94 	.word	0x20400c94

00402e44 <vTaskPlaceOnEventList>:
{
  402e44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402e46:	b1e0      	cbz	r0, 402e82 <vTaskPlaceOnEventList+0x3e>
  402e48:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402e4a:	4d17      	ldr	r5, [pc, #92]	; (402ea8 <vTaskPlaceOnEventList+0x64>)
  402e4c:	6829      	ldr	r1, [r5, #0]
  402e4e:	3118      	adds	r1, #24
  402e50:	4b16      	ldr	r3, [pc, #88]	; (402eac <vTaskPlaceOnEventList+0x68>)
  402e52:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e54:	6828      	ldr	r0, [r5, #0]
  402e56:	3004      	adds	r0, #4
  402e58:	4b15      	ldr	r3, [pc, #84]	; (402eb0 <vTaskPlaceOnEventList+0x6c>)
  402e5a:	4798      	blx	r3
  402e5c:	b940      	cbnz	r0, 402e70 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402e5e:	682a      	ldr	r2, [r5, #0]
  402e60:	4914      	ldr	r1, [pc, #80]	; (402eb4 <vTaskPlaceOnEventList+0x70>)
  402e62:	680b      	ldr	r3, [r1, #0]
  402e64:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402e66:	2201      	movs	r2, #1
  402e68:	4082      	lsls	r2, r0
  402e6a:	ea23 0302 	bic.w	r3, r3, r2
  402e6e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402e70:	f1b4 3fff 	cmp.w	r4, #4294967295
  402e74:	d010      	beq.n	402e98 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402e76:	4b10      	ldr	r3, [pc, #64]	; (402eb8 <vTaskPlaceOnEventList+0x74>)
  402e78:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402e7a:	4420      	add	r0, r4
  402e7c:	4b0f      	ldr	r3, [pc, #60]	; (402ebc <vTaskPlaceOnEventList+0x78>)
  402e7e:	4798      	blx	r3
  402e80:	bd38      	pop	{r3, r4, r5, pc}
  402e82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e86:	b672      	cpsid	i
  402e88:	f383 8811 	msr	BASEPRI, r3
  402e8c:	f3bf 8f6f 	isb	sy
  402e90:	f3bf 8f4f 	dsb	sy
  402e94:	b662      	cpsie	i
  402e96:	e7fe      	b.n	402e96 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402e98:	4b03      	ldr	r3, [pc, #12]	; (402ea8 <vTaskPlaceOnEventList+0x64>)
  402e9a:	6819      	ldr	r1, [r3, #0]
  402e9c:	3104      	adds	r1, #4
  402e9e:	4808      	ldr	r0, [pc, #32]	; (402ec0 <vTaskPlaceOnEventList+0x7c>)
  402ea0:	4b08      	ldr	r3, [pc, #32]	; (402ec4 <vTaskPlaceOnEventList+0x80>)
  402ea2:	4798      	blx	r3
  402ea4:	bd38      	pop	{r3, r4, r5, pc}
  402ea6:	bf00      	nop
  402ea8:	20400c88 	.word	0x20400c88
  402eac:	004019a9 	.word	0x004019a9
  402eb0:	004019dd 	.word	0x004019dd
  402eb4:	20400d0c 	.word	0x20400d0c
  402eb8:	20400d80 	.word	0x20400d80
  402ebc:	004026a9 	.word	0x004026a9
  402ec0:	20400d58 	.word	0x20400d58
  402ec4:	00401991 	.word	0x00401991

00402ec8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402ec8:	b1e8      	cbz	r0, 402f06 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402eca:	b570      	push	{r4, r5, r6, lr}
  402ecc:	4615      	mov	r5, r2
  402ece:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402ed0:	4e16      	ldr	r6, [pc, #88]	; (402f2c <vTaskPlaceOnEventListRestricted+0x64>)
  402ed2:	6831      	ldr	r1, [r6, #0]
  402ed4:	3118      	adds	r1, #24
  402ed6:	4b16      	ldr	r3, [pc, #88]	; (402f30 <vTaskPlaceOnEventListRestricted+0x68>)
  402ed8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402eda:	6830      	ldr	r0, [r6, #0]
  402edc:	3004      	adds	r0, #4
  402ede:	4b15      	ldr	r3, [pc, #84]	; (402f34 <vTaskPlaceOnEventListRestricted+0x6c>)
  402ee0:	4798      	blx	r3
  402ee2:	b940      	cbnz	r0, 402ef6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402ee4:	6832      	ldr	r2, [r6, #0]
  402ee6:	4914      	ldr	r1, [pc, #80]	; (402f38 <vTaskPlaceOnEventListRestricted+0x70>)
  402ee8:	680b      	ldr	r3, [r1, #0]
  402eea:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402eec:	2201      	movs	r2, #1
  402eee:	4082      	lsls	r2, r0
  402ef0:	ea23 0302 	bic.w	r3, r3, r2
  402ef4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402ef6:	2d01      	cmp	r5, #1
  402ef8:	d010      	beq.n	402f1c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402efa:	4b10      	ldr	r3, [pc, #64]	; (402f3c <vTaskPlaceOnEventListRestricted+0x74>)
  402efc:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402efe:	4420      	add	r0, r4
  402f00:	4b0f      	ldr	r3, [pc, #60]	; (402f40 <vTaskPlaceOnEventListRestricted+0x78>)
  402f02:	4798      	blx	r3
  402f04:	bd70      	pop	{r4, r5, r6, pc}
  402f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f0a:	b672      	cpsid	i
  402f0c:	f383 8811 	msr	BASEPRI, r3
  402f10:	f3bf 8f6f 	isb	sy
  402f14:	f3bf 8f4f 	dsb	sy
  402f18:	b662      	cpsie	i
  402f1a:	e7fe      	b.n	402f1a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402f1c:	4b03      	ldr	r3, [pc, #12]	; (402f2c <vTaskPlaceOnEventListRestricted+0x64>)
  402f1e:	6819      	ldr	r1, [r3, #0]
  402f20:	3104      	adds	r1, #4
  402f22:	4808      	ldr	r0, [pc, #32]	; (402f44 <vTaskPlaceOnEventListRestricted+0x7c>)
  402f24:	4b02      	ldr	r3, [pc, #8]	; (402f30 <vTaskPlaceOnEventListRestricted+0x68>)
  402f26:	4798      	blx	r3
  402f28:	bd70      	pop	{r4, r5, r6, pc}
  402f2a:	bf00      	nop
  402f2c:	20400c88 	.word	0x20400c88
  402f30:	00401991 	.word	0x00401991
  402f34:	004019dd 	.word	0x004019dd
  402f38:	20400d0c 	.word	0x20400d0c
  402f3c:	20400d80 	.word	0x20400d80
  402f40:	004026a9 	.word	0x004026a9
  402f44:	20400d58 	.word	0x20400d58

00402f48 <xTaskRemoveFromEventList>:
{
  402f48:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402f4a:	68c3      	ldr	r3, [r0, #12]
  402f4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402f4e:	b324      	cbz	r4, 402f9a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402f50:	f104 0518 	add.w	r5, r4, #24
  402f54:	4628      	mov	r0, r5
  402f56:	4b1a      	ldr	r3, [pc, #104]	; (402fc0 <xTaskRemoveFromEventList+0x78>)
  402f58:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f5a:	4b1a      	ldr	r3, [pc, #104]	; (402fc4 <xTaskRemoveFromEventList+0x7c>)
  402f5c:	681b      	ldr	r3, [r3, #0]
  402f5e:	bb3b      	cbnz	r3, 402fb0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402f60:	1d25      	adds	r5, r4, #4
  402f62:	4628      	mov	r0, r5
  402f64:	4b16      	ldr	r3, [pc, #88]	; (402fc0 <xTaskRemoveFromEventList+0x78>)
  402f66:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402f6a:	4a17      	ldr	r2, [pc, #92]	; (402fc8 <xTaskRemoveFromEventList+0x80>)
  402f6c:	6811      	ldr	r1, [r2, #0]
  402f6e:	2301      	movs	r3, #1
  402f70:	4083      	lsls	r3, r0
  402f72:	430b      	orrs	r3, r1
  402f74:	6013      	str	r3, [r2, #0]
  402f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f7a:	4629      	mov	r1, r5
  402f7c:	4b13      	ldr	r3, [pc, #76]	; (402fcc <xTaskRemoveFromEventList+0x84>)
  402f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f82:	4b13      	ldr	r3, [pc, #76]	; (402fd0 <xTaskRemoveFromEventList+0x88>)
  402f84:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402f86:	4b13      	ldr	r3, [pc, #76]	; (402fd4 <xTaskRemoveFromEventList+0x8c>)
  402f88:	681b      	ldr	r3, [r3, #0]
  402f8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402f8e:	429a      	cmp	r2, r3
  402f90:	d913      	bls.n	402fba <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402f92:	2001      	movs	r0, #1
  402f94:	4b10      	ldr	r3, [pc, #64]	; (402fd8 <xTaskRemoveFromEventList+0x90>)
  402f96:	6018      	str	r0, [r3, #0]
  402f98:	bd38      	pop	{r3, r4, r5, pc}
  402f9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f9e:	b672      	cpsid	i
  402fa0:	f383 8811 	msr	BASEPRI, r3
  402fa4:	f3bf 8f6f 	isb	sy
  402fa8:	f3bf 8f4f 	dsb	sy
  402fac:	b662      	cpsie	i
  402fae:	e7fe      	b.n	402fae <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402fb0:	4629      	mov	r1, r5
  402fb2:	480a      	ldr	r0, [pc, #40]	; (402fdc <xTaskRemoveFromEventList+0x94>)
  402fb4:	4b06      	ldr	r3, [pc, #24]	; (402fd0 <xTaskRemoveFromEventList+0x88>)
  402fb6:	4798      	blx	r3
  402fb8:	e7e5      	b.n	402f86 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402fba:	2000      	movs	r0, #0
}
  402fbc:	bd38      	pop	{r3, r4, r5, pc}
  402fbe:	bf00      	nop
  402fc0:	004019dd 	.word	0x004019dd
  402fc4:	20400d00 	.word	0x20400d00
  402fc8:	20400d0c 	.word	0x20400d0c
  402fcc:	20400c94 	.word	0x20400c94
  402fd0:	00401991 	.word	0x00401991
  402fd4:	20400c88 	.word	0x20400c88
  402fd8:	20400d84 	.word	0x20400d84
  402fdc:	20400d40 	.word	0x20400d40

00402fe0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402fe0:	b130      	cbz	r0, 402ff0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402fe2:	4a09      	ldr	r2, [pc, #36]	; (403008 <vTaskSetTimeOutState+0x28>)
  402fe4:	6812      	ldr	r2, [r2, #0]
  402fe6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402fe8:	4a08      	ldr	r2, [pc, #32]	; (40300c <vTaskSetTimeOutState+0x2c>)
  402fea:	6812      	ldr	r2, [r2, #0]
  402fec:	6042      	str	r2, [r0, #4]
  402fee:	4770      	bx	lr
  402ff0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ff4:	b672      	cpsid	i
  402ff6:	f383 8811 	msr	BASEPRI, r3
  402ffa:	f3bf 8f6f 	isb	sy
  402ffe:	f3bf 8f4f 	dsb	sy
  403002:	b662      	cpsie	i
  403004:	e7fe      	b.n	403004 <vTaskSetTimeOutState+0x24>
  403006:	bf00      	nop
  403008:	20400d3c 	.word	0x20400d3c
  40300c:	20400d80 	.word	0x20400d80

00403010 <xTaskCheckForTimeOut>:
{
  403010:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403012:	b1c0      	cbz	r0, 403046 <xTaskCheckForTimeOut+0x36>
  403014:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403016:	b309      	cbz	r1, 40305c <xTaskCheckForTimeOut+0x4c>
  403018:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40301a:	4b1d      	ldr	r3, [pc, #116]	; (403090 <xTaskCheckForTimeOut+0x80>)
  40301c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40301e:	4b1d      	ldr	r3, [pc, #116]	; (403094 <xTaskCheckForTimeOut+0x84>)
  403020:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403022:	682b      	ldr	r3, [r5, #0]
  403024:	f1b3 3fff 	cmp.w	r3, #4294967295
  403028:	d02e      	beq.n	403088 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40302a:	491b      	ldr	r1, [pc, #108]	; (403098 <xTaskCheckForTimeOut+0x88>)
  40302c:	6809      	ldr	r1, [r1, #0]
  40302e:	6820      	ldr	r0, [r4, #0]
  403030:	4288      	cmp	r0, r1
  403032:	d002      	beq.n	40303a <xTaskCheckForTimeOut+0x2a>
  403034:	6861      	ldr	r1, [r4, #4]
  403036:	428a      	cmp	r2, r1
  403038:	d228      	bcs.n	40308c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40303a:	6861      	ldr	r1, [r4, #4]
  40303c:	1a50      	subs	r0, r2, r1
  40303e:	4283      	cmp	r3, r0
  403040:	d817      	bhi.n	403072 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403042:	2401      	movs	r4, #1
  403044:	e01c      	b.n	403080 <xTaskCheckForTimeOut+0x70>
  403046:	f04f 0380 	mov.w	r3, #128	; 0x80
  40304a:	b672      	cpsid	i
  40304c:	f383 8811 	msr	BASEPRI, r3
  403050:	f3bf 8f6f 	isb	sy
  403054:	f3bf 8f4f 	dsb	sy
  403058:	b662      	cpsie	i
  40305a:	e7fe      	b.n	40305a <xTaskCheckForTimeOut+0x4a>
  40305c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403060:	b672      	cpsid	i
  403062:	f383 8811 	msr	BASEPRI, r3
  403066:	f3bf 8f6f 	isb	sy
  40306a:	f3bf 8f4f 	dsb	sy
  40306e:	b662      	cpsie	i
  403070:	e7fe      	b.n	403070 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403072:	1a9b      	subs	r3, r3, r2
  403074:	440b      	add	r3, r1
  403076:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403078:	4620      	mov	r0, r4
  40307a:	4b08      	ldr	r3, [pc, #32]	; (40309c <xTaskCheckForTimeOut+0x8c>)
  40307c:	4798      	blx	r3
			xReturn = pdFALSE;
  40307e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403080:	4b07      	ldr	r3, [pc, #28]	; (4030a0 <xTaskCheckForTimeOut+0x90>)
  403082:	4798      	blx	r3
}
  403084:	4620      	mov	r0, r4
  403086:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403088:	2400      	movs	r4, #0
  40308a:	e7f9      	b.n	403080 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40308c:	2401      	movs	r4, #1
  40308e:	e7f7      	b.n	403080 <xTaskCheckForTimeOut+0x70>
  403090:	00401ac1 	.word	0x00401ac1
  403094:	20400d80 	.word	0x20400d80
  403098:	20400d3c 	.word	0x20400d3c
  40309c:	00402fe1 	.word	0x00402fe1
  4030a0:	00401b0d 	.word	0x00401b0d

004030a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4030a4:	2201      	movs	r2, #1
  4030a6:	4b01      	ldr	r3, [pc, #4]	; (4030ac <vTaskMissedYield+0x8>)
  4030a8:	601a      	str	r2, [r3, #0]
  4030aa:	4770      	bx	lr
  4030ac:	20400d84 	.word	0x20400d84

004030b0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4030b0:	4b05      	ldr	r3, [pc, #20]	; (4030c8 <xTaskGetSchedulerState+0x18>)
  4030b2:	681b      	ldr	r3, [r3, #0]
  4030b4:	b133      	cbz	r3, 4030c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4030b6:	4b05      	ldr	r3, [pc, #20]	; (4030cc <xTaskGetSchedulerState+0x1c>)
  4030b8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	bf0c      	ite	eq
  4030be:	2002      	moveq	r0, #2
  4030c0:	2000      	movne	r0, #0
  4030c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4030c4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4030c6:	4770      	bx	lr
  4030c8:	20400d54 	.word	0x20400d54
  4030cc:	20400d00 	.word	0x20400d00

004030d0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4030d0:	2800      	cmp	r0, #0
  4030d2:	d044      	beq.n	40315e <vTaskPriorityInherit+0x8e>
	{
  4030d4:	b538      	push	{r3, r4, r5, lr}
  4030d6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4030d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4030da:	4921      	ldr	r1, [pc, #132]	; (403160 <vTaskPriorityInherit+0x90>)
  4030dc:	6809      	ldr	r1, [r1, #0]
  4030de:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4030e0:	428a      	cmp	r2, r1
  4030e2:	d214      	bcs.n	40310e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4030e4:	6981      	ldr	r1, [r0, #24]
  4030e6:	2900      	cmp	r1, #0
  4030e8:	db05      	blt.n	4030f6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4030ea:	491d      	ldr	r1, [pc, #116]	; (403160 <vTaskPriorityInherit+0x90>)
  4030ec:	6809      	ldr	r1, [r1, #0]
  4030ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4030f0:	f1c1 0105 	rsb	r1, r1, #5
  4030f4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4030f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4030fa:	491a      	ldr	r1, [pc, #104]	; (403164 <vTaskPriorityInherit+0x94>)
  4030fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403100:	6961      	ldr	r1, [r4, #20]
  403102:	4291      	cmp	r1, r2
  403104:	d004      	beq.n	403110 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403106:	4a16      	ldr	r2, [pc, #88]	; (403160 <vTaskPriorityInherit+0x90>)
  403108:	6812      	ldr	r2, [r2, #0]
  40310a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40310c:	62e2      	str	r2, [r4, #44]	; 0x2c
  40310e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403110:	1d25      	adds	r5, r4, #4
  403112:	4628      	mov	r0, r5
  403114:	4b14      	ldr	r3, [pc, #80]	; (403168 <vTaskPriorityInherit+0x98>)
  403116:	4798      	blx	r3
  403118:	b970      	cbnz	r0, 403138 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40311a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40311c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403120:	4a10      	ldr	r2, [pc, #64]	; (403164 <vTaskPriorityInherit+0x94>)
  403122:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403126:	b93a      	cbnz	r2, 403138 <vTaskPriorityInherit+0x68>
  403128:	4810      	ldr	r0, [pc, #64]	; (40316c <vTaskPriorityInherit+0x9c>)
  40312a:	6802      	ldr	r2, [r0, #0]
  40312c:	2101      	movs	r1, #1
  40312e:	fa01 f303 	lsl.w	r3, r1, r3
  403132:	ea22 0303 	bic.w	r3, r2, r3
  403136:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403138:	4b09      	ldr	r3, [pc, #36]	; (403160 <vTaskPriorityInherit+0x90>)
  40313a:	681b      	ldr	r3, [r3, #0]
  40313c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40313e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403140:	4a0a      	ldr	r2, [pc, #40]	; (40316c <vTaskPriorityInherit+0x9c>)
  403142:	6811      	ldr	r1, [r2, #0]
  403144:	2301      	movs	r3, #1
  403146:	4083      	lsls	r3, r0
  403148:	430b      	orrs	r3, r1
  40314a:	6013      	str	r3, [r2, #0]
  40314c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403150:	4629      	mov	r1, r5
  403152:	4b04      	ldr	r3, [pc, #16]	; (403164 <vTaskPriorityInherit+0x94>)
  403154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403158:	4b05      	ldr	r3, [pc, #20]	; (403170 <vTaskPriorityInherit+0xa0>)
  40315a:	4798      	blx	r3
  40315c:	bd38      	pop	{r3, r4, r5, pc}
  40315e:	4770      	bx	lr
  403160:	20400c88 	.word	0x20400c88
  403164:	20400c94 	.word	0x20400c94
  403168:	004019dd 	.word	0x004019dd
  40316c:	20400d0c 	.word	0x20400d0c
  403170:	00401991 	.word	0x00401991

00403174 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403174:	2800      	cmp	r0, #0
  403176:	d04d      	beq.n	403214 <xTaskPriorityDisinherit+0xa0>
	{
  403178:	b538      	push	{r3, r4, r5, lr}
  40317a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40317c:	4a27      	ldr	r2, [pc, #156]	; (40321c <xTaskPriorityDisinherit+0xa8>)
  40317e:	6812      	ldr	r2, [r2, #0]
  403180:	4290      	cmp	r0, r2
  403182:	d00a      	beq.n	40319a <xTaskPriorityDisinherit+0x26>
  403184:	f04f 0380 	mov.w	r3, #128	; 0x80
  403188:	b672      	cpsid	i
  40318a:	f383 8811 	msr	BASEPRI, r3
  40318e:	f3bf 8f6f 	isb	sy
  403192:	f3bf 8f4f 	dsb	sy
  403196:	b662      	cpsie	i
  403198:	e7fe      	b.n	403198 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40319a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40319c:	b952      	cbnz	r2, 4031b4 <xTaskPriorityDisinherit+0x40>
  40319e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031a2:	b672      	cpsid	i
  4031a4:	f383 8811 	msr	BASEPRI, r3
  4031a8:	f3bf 8f6f 	isb	sy
  4031ac:	f3bf 8f4f 	dsb	sy
  4031b0:	b662      	cpsie	i
  4031b2:	e7fe      	b.n	4031b2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4031b4:	3a01      	subs	r2, #1
  4031b6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4031b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4031ba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4031bc:	4288      	cmp	r0, r1
  4031be:	d02b      	beq.n	403218 <xTaskPriorityDisinherit+0xa4>
  4031c0:	bb52      	cbnz	r2, 403218 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4031c2:	1d25      	adds	r5, r4, #4
  4031c4:	4628      	mov	r0, r5
  4031c6:	4b16      	ldr	r3, [pc, #88]	; (403220 <xTaskPriorityDisinherit+0xac>)
  4031c8:	4798      	blx	r3
  4031ca:	b968      	cbnz	r0, 4031e8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4031cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4031ce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4031d2:	4b14      	ldr	r3, [pc, #80]	; (403224 <xTaskPriorityDisinherit+0xb0>)
  4031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4031d8:	b933      	cbnz	r3, 4031e8 <xTaskPriorityDisinherit+0x74>
  4031da:	4813      	ldr	r0, [pc, #76]	; (403228 <xTaskPriorityDisinherit+0xb4>)
  4031dc:	6803      	ldr	r3, [r0, #0]
  4031de:	2201      	movs	r2, #1
  4031e0:	408a      	lsls	r2, r1
  4031e2:	ea23 0302 	bic.w	r3, r3, r2
  4031e6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4031e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4031ea:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4031ec:	f1c0 0305 	rsb	r3, r0, #5
  4031f0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4031f2:	4a0d      	ldr	r2, [pc, #52]	; (403228 <xTaskPriorityDisinherit+0xb4>)
  4031f4:	6811      	ldr	r1, [r2, #0]
  4031f6:	2401      	movs	r4, #1
  4031f8:	fa04 f300 	lsl.w	r3, r4, r0
  4031fc:	430b      	orrs	r3, r1
  4031fe:	6013      	str	r3, [r2, #0]
  403200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403204:	4629      	mov	r1, r5
  403206:	4b07      	ldr	r3, [pc, #28]	; (403224 <xTaskPriorityDisinherit+0xb0>)
  403208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40320c:	4b07      	ldr	r3, [pc, #28]	; (40322c <xTaskPriorityDisinherit+0xb8>)
  40320e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403210:	4620      	mov	r0, r4
  403212:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403214:	2000      	movs	r0, #0
  403216:	4770      	bx	lr
  403218:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40321a:	bd38      	pop	{r3, r4, r5, pc}
  40321c:	20400c88 	.word	0x20400c88
  403220:	004019dd 	.word	0x004019dd
  403224:	20400c94 	.word	0x20400c94
  403228:	20400d0c 	.word	0x20400d0c
  40322c:	00401991 	.word	0x00401991

00403230 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403230:	4b05      	ldr	r3, [pc, #20]	; (403248 <pvTaskIncrementMutexHeldCount+0x18>)
  403232:	681b      	ldr	r3, [r3, #0]
  403234:	b123      	cbz	r3, 403240 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403236:	4b04      	ldr	r3, [pc, #16]	; (403248 <pvTaskIncrementMutexHeldCount+0x18>)
  403238:	681a      	ldr	r2, [r3, #0]
  40323a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40323c:	3301      	adds	r3, #1
  40323e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403240:	4b01      	ldr	r3, [pc, #4]	; (403248 <pvTaskIncrementMutexHeldCount+0x18>)
  403242:	6818      	ldr	r0, [r3, #0]
	}
  403244:	4770      	bx	lr
  403246:	bf00      	nop
  403248:	20400c88 	.word	0x20400c88

0040324c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40324c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40324e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403250:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403252:	4291      	cmp	r1, r2
  403254:	d80c      	bhi.n	403270 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403256:	1ad2      	subs	r2, r2, r3
  403258:	6983      	ldr	r3, [r0, #24]
  40325a:	429a      	cmp	r2, r3
  40325c:	d301      	bcc.n	403262 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40325e:	2001      	movs	r0, #1
  403260:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403262:	1d01      	adds	r1, r0, #4
  403264:	4b09      	ldr	r3, [pc, #36]	; (40328c <prvInsertTimerInActiveList+0x40>)
  403266:	6818      	ldr	r0, [r3, #0]
  403268:	4b09      	ldr	r3, [pc, #36]	; (403290 <prvInsertTimerInActiveList+0x44>)
  40326a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40326c:	2000      	movs	r0, #0
  40326e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403270:	429a      	cmp	r2, r3
  403272:	d203      	bcs.n	40327c <prvInsertTimerInActiveList+0x30>
  403274:	4299      	cmp	r1, r3
  403276:	d301      	bcc.n	40327c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403278:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40327a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40327c:	1d01      	adds	r1, r0, #4
  40327e:	4b05      	ldr	r3, [pc, #20]	; (403294 <prvInsertTimerInActiveList+0x48>)
  403280:	6818      	ldr	r0, [r3, #0]
  403282:	4b03      	ldr	r3, [pc, #12]	; (403290 <prvInsertTimerInActiveList+0x44>)
  403284:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403286:	2000      	movs	r0, #0
  403288:	bd08      	pop	{r3, pc}
  40328a:	bf00      	nop
  40328c:	20400d8c 	.word	0x20400d8c
  403290:	004019a9 	.word	0x004019a9
  403294:	20400d88 	.word	0x20400d88

00403298 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403298:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40329a:	4b15      	ldr	r3, [pc, #84]	; (4032f0 <prvCheckForValidListAndQueue+0x58>)
  40329c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40329e:	4b15      	ldr	r3, [pc, #84]	; (4032f4 <prvCheckForValidListAndQueue+0x5c>)
  4032a0:	681b      	ldr	r3, [r3, #0]
  4032a2:	b113      	cbz	r3, 4032aa <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4032a4:	4b14      	ldr	r3, [pc, #80]	; (4032f8 <prvCheckForValidListAndQueue+0x60>)
  4032a6:	4798      	blx	r3
  4032a8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4032aa:	4d14      	ldr	r5, [pc, #80]	; (4032fc <prvCheckForValidListAndQueue+0x64>)
  4032ac:	4628      	mov	r0, r5
  4032ae:	4e14      	ldr	r6, [pc, #80]	; (403300 <prvCheckForValidListAndQueue+0x68>)
  4032b0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4032b2:	4c14      	ldr	r4, [pc, #80]	; (403304 <prvCheckForValidListAndQueue+0x6c>)
  4032b4:	4620      	mov	r0, r4
  4032b6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4032b8:	4b13      	ldr	r3, [pc, #76]	; (403308 <prvCheckForValidListAndQueue+0x70>)
  4032ba:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4032bc:	4b13      	ldr	r3, [pc, #76]	; (40330c <prvCheckForValidListAndQueue+0x74>)
  4032be:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4032c0:	2200      	movs	r2, #0
  4032c2:	2110      	movs	r1, #16
  4032c4:	2005      	movs	r0, #5
  4032c6:	4b12      	ldr	r3, [pc, #72]	; (403310 <prvCheckForValidListAndQueue+0x78>)
  4032c8:	4798      	blx	r3
  4032ca:	4b0a      	ldr	r3, [pc, #40]	; (4032f4 <prvCheckForValidListAndQueue+0x5c>)
  4032cc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4032ce:	b118      	cbz	r0, 4032d8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4032d0:	4910      	ldr	r1, [pc, #64]	; (403314 <prvCheckForValidListAndQueue+0x7c>)
  4032d2:	4b11      	ldr	r3, [pc, #68]	; (403318 <prvCheckForValidListAndQueue+0x80>)
  4032d4:	4798      	blx	r3
  4032d6:	e7e5      	b.n	4032a4 <prvCheckForValidListAndQueue+0xc>
  4032d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032dc:	b672      	cpsid	i
  4032de:	f383 8811 	msr	BASEPRI, r3
  4032e2:	f3bf 8f6f 	isb	sy
  4032e6:	f3bf 8f4f 	dsb	sy
  4032ea:	b662      	cpsie	i
  4032ec:	e7fe      	b.n	4032ec <prvCheckForValidListAndQueue+0x54>
  4032ee:	bf00      	nop
  4032f0:	00401ac1 	.word	0x00401ac1
  4032f4:	20400dbc 	.word	0x20400dbc
  4032f8:	00401b0d 	.word	0x00401b0d
  4032fc:	20400d90 	.word	0x20400d90
  403300:	00401975 	.word	0x00401975
  403304:	20400da4 	.word	0x20400da4
  403308:	20400d88 	.word	0x20400d88
  40330c:	20400d8c 	.word	0x20400d8c
  403310:	00401fe1 	.word	0x00401fe1
  403314:	0040b2f8 	.word	0x0040b2f8
  403318:	004025f1 	.word	0x004025f1

0040331c <xTimerCreateTimerTask>:
{
  40331c:	b510      	push	{r4, lr}
  40331e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403320:	4b0f      	ldr	r3, [pc, #60]	; (403360 <xTimerCreateTimerTask+0x44>)
  403322:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403324:	4b0f      	ldr	r3, [pc, #60]	; (403364 <xTimerCreateTimerTask+0x48>)
  403326:	681b      	ldr	r3, [r3, #0]
  403328:	b173      	cbz	r3, 403348 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40332a:	2300      	movs	r3, #0
  40332c:	9303      	str	r3, [sp, #12]
  40332e:	9302      	str	r3, [sp, #8]
  403330:	9301      	str	r3, [sp, #4]
  403332:	2204      	movs	r2, #4
  403334:	9200      	str	r2, [sp, #0]
  403336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40333a:	490b      	ldr	r1, [pc, #44]	; (403368 <xTimerCreateTimerTask+0x4c>)
  40333c:	480b      	ldr	r0, [pc, #44]	; (40336c <xTimerCreateTimerTask+0x50>)
  40333e:	4c0c      	ldr	r4, [pc, #48]	; (403370 <xTimerCreateTimerTask+0x54>)
  403340:	47a0      	blx	r4
	configASSERT( xReturn );
  403342:	b108      	cbz	r0, 403348 <xTimerCreateTimerTask+0x2c>
}
  403344:	b004      	add	sp, #16
  403346:	bd10      	pop	{r4, pc}
  403348:	f04f 0380 	mov.w	r3, #128	; 0x80
  40334c:	b672      	cpsid	i
  40334e:	f383 8811 	msr	BASEPRI, r3
  403352:	f3bf 8f6f 	isb	sy
  403356:	f3bf 8f4f 	dsb	sy
  40335a:	b662      	cpsie	i
  40335c:	e7fe      	b.n	40335c <xTimerCreateTimerTask+0x40>
  40335e:	bf00      	nop
  403360:	00403299 	.word	0x00403299
  403364:	20400dbc 	.word	0x20400dbc
  403368:	0040b300 	.word	0x0040b300
  40336c:	0040349d 	.word	0x0040349d
  403370:	00402701 	.word	0x00402701

00403374 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403374:	b1d8      	cbz	r0, 4033ae <xTimerGenericCommand+0x3a>
{
  403376:	b530      	push	{r4, r5, lr}
  403378:	b085      	sub	sp, #20
  40337a:	4615      	mov	r5, r2
  40337c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40337e:	4a15      	ldr	r2, [pc, #84]	; (4033d4 <xTimerGenericCommand+0x60>)
  403380:	6810      	ldr	r0, [r2, #0]
  403382:	b320      	cbz	r0, 4033ce <xTimerGenericCommand+0x5a>
  403384:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403386:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403388:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40338a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40338c:	2905      	cmp	r1, #5
  40338e:	dc19      	bgt.n	4033c4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403390:	4b11      	ldr	r3, [pc, #68]	; (4033d8 <xTimerGenericCommand+0x64>)
  403392:	4798      	blx	r3
  403394:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403396:	f04f 0300 	mov.w	r3, #0
  40339a:	bf0c      	ite	eq
  40339c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40339e:	461a      	movne	r2, r3
  4033a0:	4669      	mov	r1, sp
  4033a2:	480c      	ldr	r0, [pc, #48]	; (4033d4 <xTimerGenericCommand+0x60>)
  4033a4:	6800      	ldr	r0, [r0, #0]
  4033a6:	4c0d      	ldr	r4, [pc, #52]	; (4033dc <xTimerGenericCommand+0x68>)
  4033a8:	47a0      	blx	r4
}
  4033aa:	b005      	add	sp, #20
  4033ac:	bd30      	pop	{r4, r5, pc}
  4033ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033b2:	b672      	cpsid	i
  4033b4:	f383 8811 	msr	BASEPRI, r3
  4033b8:	f3bf 8f6f 	isb	sy
  4033bc:	f3bf 8f4f 	dsb	sy
  4033c0:	b662      	cpsie	i
  4033c2:	e7fe      	b.n	4033c2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4033c4:	2300      	movs	r3, #0
  4033c6:	4669      	mov	r1, sp
  4033c8:	4c05      	ldr	r4, [pc, #20]	; (4033e0 <xTimerGenericCommand+0x6c>)
  4033ca:	47a0      	blx	r4
  4033cc:	e7ed      	b.n	4033aa <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4033ce:	2000      	movs	r0, #0
	return xReturn;
  4033d0:	e7eb      	b.n	4033aa <xTimerGenericCommand+0x36>
  4033d2:	bf00      	nop
  4033d4:	20400dbc 	.word	0x20400dbc
  4033d8:	004030b1 	.word	0x004030b1
  4033dc:	0040205d 	.word	0x0040205d
  4033e0:	00402241 	.word	0x00402241

004033e4 <prvSampleTimeNow>:
{
  4033e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033e8:	b082      	sub	sp, #8
  4033ea:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4033ec:	4b24      	ldr	r3, [pc, #144]	; (403480 <prvSampleTimeNow+0x9c>)
  4033ee:	4798      	blx	r3
  4033f0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4033f2:	4b24      	ldr	r3, [pc, #144]	; (403484 <prvSampleTimeNow+0xa0>)
  4033f4:	681b      	ldr	r3, [r3, #0]
  4033f6:	4298      	cmp	r0, r3
  4033f8:	d31b      	bcc.n	403432 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4033fa:	2300      	movs	r3, #0
  4033fc:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403400:	4b20      	ldr	r3, [pc, #128]	; (403484 <prvSampleTimeNow+0xa0>)
  403402:	601f      	str	r7, [r3, #0]
}
  403404:	4638      	mov	r0, r7
  403406:	b002      	add	sp, #8
  403408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40340c:	2100      	movs	r1, #0
  40340e:	9100      	str	r1, [sp, #0]
  403410:	460b      	mov	r3, r1
  403412:	4652      	mov	r2, sl
  403414:	4620      	mov	r0, r4
  403416:	4c1c      	ldr	r4, [pc, #112]	; (403488 <prvSampleTimeNow+0xa4>)
  403418:	47a0      	blx	r4
				configASSERT( xResult );
  40341a:	b960      	cbnz	r0, 403436 <prvSampleTimeNow+0x52>
  40341c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403420:	b672      	cpsid	i
  403422:	f383 8811 	msr	BASEPRI, r3
  403426:	f3bf 8f6f 	isb	sy
  40342a:	f3bf 8f4f 	dsb	sy
  40342e:	b662      	cpsie	i
  403430:	e7fe      	b.n	403430 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403432:	4d16      	ldr	r5, [pc, #88]	; (40348c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403434:	4e16      	ldr	r6, [pc, #88]	; (403490 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403436:	682b      	ldr	r3, [r5, #0]
  403438:	681a      	ldr	r2, [r3, #0]
  40343a:	b1c2      	cbz	r2, 40346e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40343c:	68db      	ldr	r3, [r3, #12]
  40343e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403442:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403444:	f104 0904 	add.w	r9, r4, #4
  403448:	4648      	mov	r0, r9
  40344a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40344c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40344e:	4620      	mov	r0, r4
  403450:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403452:	69e3      	ldr	r3, [r4, #28]
  403454:	2b01      	cmp	r3, #1
  403456:	d1ee      	bne.n	403436 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403458:	69a3      	ldr	r3, [r4, #24]
  40345a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  40345c:	459a      	cmp	sl, r3
  40345e:	d2d5      	bcs.n	40340c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403460:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403462:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403464:	4649      	mov	r1, r9
  403466:	6828      	ldr	r0, [r5, #0]
  403468:	4b0a      	ldr	r3, [pc, #40]	; (403494 <prvSampleTimeNow+0xb0>)
  40346a:	4798      	blx	r3
  40346c:	e7e3      	b.n	403436 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40346e:	4a0a      	ldr	r2, [pc, #40]	; (403498 <prvSampleTimeNow+0xb4>)
  403470:	6810      	ldr	r0, [r2, #0]
  403472:	4906      	ldr	r1, [pc, #24]	; (40348c <prvSampleTimeNow+0xa8>)
  403474:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403476:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403478:	2301      	movs	r3, #1
  40347a:	f8c8 3000 	str.w	r3, [r8]
  40347e:	e7bf      	b.n	403400 <prvSampleTimeNow+0x1c>
  403480:	004029d5 	.word	0x004029d5
  403484:	20400db8 	.word	0x20400db8
  403488:	00403375 	.word	0x00403375
  40348c:	20400d88 	.word	0x20400d88
  403490:	004019dd 	.word	0x004019dd
  403494:	004019a9 	.word	0x004019a9
  403498:	20400d8c 	.word	0x20400d8c

0040349c <prvTimerTask>:
{
  40349c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4034a0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4034a2:	4e75      	ldr	r6, [pc, #468]	; (403678 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4034a4:	4f75      	ldr	r7, [pc, #468]	; (40367c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4034a6:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4036a4 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4034aa:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4036a8 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4034ae:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4034b0:	681a      	ldr	r2, [r3, #0]
  4034b2:	2a00      	cmp	r2, #0
  4034b4:	f000 80ce 	beq.w	403654 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4034b8:	68db      	ldr	r3, [r3, #12]
  4034ba:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4034bc:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4034be:	a804      	add	r0, sp, #16
  4034c0:	4b6f      	ldr	r3, [pc, #444]	; (403680 <prvTimerTask+0x1e4>)
  4034c2:	4798      	blx	r3
  4034c4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4034c6:	9b04      	ldr	r3, [sp, #16]
  4034c8:	2b00      	cmp	r3, #0
  4034ca:	d144      	bne.n	403556 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4034cc:	42a0      	cmp	r0, r4
  4034ce:	d212      	bcs.n	4034f6 <prvTimerTask+0x5a>
  4034d0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4034d2:	1b61      	subs	r1, r4, r5
  4034d4:	4b6b      	ldr	r3, [pc, #428]	; (403684 <prvTimerTask+0x1e8>)
  4034d6:	6818      	ldr	r0, [r3, #0]
  4034d8:	4b6b      	ldr	r3, [pc, #428]	; (403688 <prvTimerTask+0x1ec>)
  4034da:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4034dc:	4b6b      	ldr	r3, [pc, #428]	; (40368c <prvTimerTask+0x1f0>)
  4034de:	4798      	blx	r3
  4034e0:	2800      	cmp	r0, #0
  4034e2:	d13a      	bne.n	40355a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4034e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4034e8:	f8c9 3000 	str.w	r3, [r9]
  4034ec:	f3bf 8f4f 	dsb	sy
  4034f0:	f3bf 8f6f 	isb	sy
  4034f4:	e031      	b.n	40355a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4034f6:	4b65      	ldr	r3, [pc, #404]	; (40368c <prvTimerTask+0x1f0>)
  4034f8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4034fa:	6833      	ldr	r3, [r6, #0]
  4034fc:	68db      	ldr	r3, [r3, #12]
  4034fe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403502:	f10a 0004 	add.w	r0, sl, #4
  403506:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403508:	f8da 301c 	ldr.w	r3, [sl, #28]
  40350c:	2b01      	cmp	r3, #1
  40350e:	d004      	beq.n	40351a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403510:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403514:	4650      	mov	r0, sl
  403516:	4798      	blx	r3
  403518:	e01f      	b.n	40355a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40351a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40351e:	4623      	mov	r3, r4
  403520:	462a      	mov	r2, r5
  403522:	4421      	add	r1, r4
  403524:	4650      	mov	r0, sl
  403526:	4d5a      	ldr	r5, [pc, #360]	; (403690 <prvTimerTask+0x1f4>)
  403528:	47a8      	blx	r5
  40352a:	2801      	cmp	r0, #1
  40352c:	d1f0      	bne.n	403510 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40352e:	2100      	movs	r1, #0
  403530:	9100      	str	r1, [sp, #0]
  403532:	460b      	mov	r3, r1
  403534:	4622      	mov	r2, r4
  403536:	4650      	mov	r0, sl
  403538:	4c56      	ldr	r4, [pc, #344]	; (403694 <prvTimerTask+0x1f8>)
  40353a:	47a0      	blx	r4
			configASSERT( xResult );
  40353c:	2800      	cmp	r0, #0
  40353e:	d1e7      	bne.n	403510 <prvTimerTask+0x74>
  403540:	f04f 0380 	mov.w	r3, #128	; 0x80
  403544:	b672      	cpsid	i
  403546:	f383 8811 	msr	BASEPRI, r3
  40354a:	f3bf 8f6f 	isb	sy
  40354e:	f3bf 8f4f 	dsb	sy
  403552:	b662      	cpsie	i
  403554:	e7fe      	b.n	403554 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403556:	4b4d      	ldr	r3, [pc, #308]	; (40368c <prvTimerTask+0x1f0>)
  403558:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40355a:	4d4a      	ldr	r5, [pc, #296]	; (403684 <prvTimerTask+0x1e8>)
  40355c:	4c4e      	ldr	r4, [pc, #312]	; (403698 <prvTimerTask+0x1fc>)
  40355e:	e006      	b.n	40356e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403560:	9907      	ldr	r1, [sp, #28]
  403562:	9806      	ldr	r0, [sp, #24]
  403564:	9b05      	ldr	r3, [sp, #20]
  403566:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403568:	9b04      	ldr	r3, [sp, #16]
  40356a:	2b00      	cmp	r3, #0
  40356c:	da09      	bge.n	403582 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40356e:	2300      	movs	r3, #0
  403570:	461a      	mov	r2, r3
  403572:	a904      	add	r1, sp, #16
  403574:	6828      	ldr	r0, [r5, #0]
  403576:	47a0      	blx	r4
  403578:	2800      	cmp	r0, #0
  40357a:	d098      	beq.n	4034ae <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40357c:	9b04      	ldr	r3, [sp, #16]
  40357e:	2b00      	cmp	r3, #0
  403580:	dbee      	blt.n	403560 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403582:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403586:	f8da 3014 	ldr.w	r3, [sl, #20]
  40358a:	b113      	cbz	r3, 403592 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40358c:	f10a 0004 	add.w	r0, sl, #4
  403590:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403592:	a803      	add	r0, sp, #12
  403594:	4b3a      	ldr	r3, [pc, #232]	; (403680 <prvTimerTask+0x1e4>)
  403596:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403598:	9b04      	ldr	r3, [sp, #16]
  40359a:	2b09      	cmp	r3, #9
  40359c:	d8e7      	bhi.n	40356e <prvTimerTask+0xd2>
  40359e:	a201      	add	r2, pc, #4	; (adr r2, 4035a4 <prvTimerTask+0x108>)
  4035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4035a4:	004035cd 	.word	0x004035cd
  4035a8:	004035cd 	.word	0x004035cd
  4035ac:	004035cd 	.word	0x004035cd
  4035b0:	0040356f 	.word	0x0040356f
  4035b4:	00403621 	.word	0x00403621
  4035b8:	0040364d 	.word	0x0040364d
  4035bc:	004035cd 	.word	0x004035cd
  4035c0:	004035cd 	.word	0x004035cd
  4035c4:	0040356f 	.word	0x0040356f
  4035c8:	00403621 	.word	0x00403621
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4035cc:	9c05      	ldr	r4, [sp, #20]
  4035ce:	f8da 1018 	ldr.w	r1, [sl, #24]
  4035d2:	4623      	mov	r3, r4
  4035d4:	4602      	mov	r2, r0
  4035d6:	4421      	add	r1, r4
  4035d8:	4650      	mov	r0, sl
  4035da:	4c2d      	ldr	r4, [pc, #180]	; (403690 <prvTimerTask+0x1f4>)
  4035dc:	47a0      	blx	r4
  4035de:	2801      	cmp	r0, #1
  4035e0:	d1bc      	bne.n	40355c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4035e2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4035e6:	4650      	mov	r0, sl
  4035e8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4035ea:	f8da 301c 	ldr.w	r3, [sl, #28]
  4035ee:	2b01      	cmp	r3, #1
  4035f0:	d1b4      	bne.n	40355c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4035f2:	f8da 2018 	ldr.w	r2, [sl, #24]
  4035f6:	2100      	movs	r1, #0
  4035f8:	9100      	str	r1, [sp, #0]
  4035fa:	460b      	mov	r3, r1
  4035fc:	9805      	ldr	r0, [sp, #20]
  4035fe:	4402      	add	r2, r0
  403600:	4650      	mov	r0, sl
  403602:	4c24      	ldr	r4, [pc, #144]	; (403694 <prvTimerTask+0x1f8>)
  403604:	47a0      	blx	r4
							configASSERT( xResult );
  403606:	2800      	cmp	r0, #0
  403608:	d1a8      	bne.n	40355c <prvTimerTask+0xc0>
  40360a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40360e:	b672      	cpsid	i
  403610:	f383 8811 	msr	BASEPRI, r3
  403614:	f3bf 8f6f 	isb	sy
  403618:	f3bf 8f4f 	dsb	sy
  40361c:	b662      	cpsie	i
  40361e:	e7fe      	b.n	40361e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403620:	9905      	ldr	r1, [sp, #20]
  403622:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403626:	b131      	cbz	r1, 403636 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403628:	4603      	mov	r3, r0
  40362a:	4602      	mov	r2, r0
  40362c:	4401      	add	r1, r0
  40362e:	4650      	mov	r0, sl
  403630:	4c17      	ldr	r4, [pc, #92]	; (403690 <prvTimerTask+0x1f4>)
  403632:	47a0      	blx	r4
  403634:	e792      	b.n	40355c <prvTimerTask+0xc0>
  403636:	f04f 0380 	mov.w	r3, #128	; 0x80
  40363a:	b672      	cpsid	i
  40363c:	f383 8811 	msr	BASEPRI, r3
  403640:	f3bf 8f6f 	isb	sy
  403644:	f3bf 8f4f 	dsb	sy
  403648:	b662      	cpsie	i
  40364a:	e7fe      	b.n	40364a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  40364c:	4650      	mov	r0, sl
  40364e:	4b13      	ldr	r3, [pc, #76]	; (40369c <prvTimerTask+0x200>)
  403650:	4798      	blx	r3
  403652:	e783      	b.n	40355c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403654:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403656:	a804      	add	r0, sp, #16
  403658:	4b09      	ldr	r3, [pc, #36]	; (403680 <prvTimerTask+0x1e4>)
  40365a:	4798      	blx	r3
  40365c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40365e:	9b04      	ldr	r3, [sp, #16]
  403660:	2b00      	cmp	r3, #0
  403662:	f47f af78 	bne.w	403556 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403666:	4b0e      	ldr	r3, [pc, #56]	; (4036a0 <prvTimerTask+0x204>)
  403668:	681b      	ldr	r3, [r3, #0]
  40366a:	681a      	ldr	r2, [r3, #0]
  40366c:	fab2 f282 	clz	r2, r2
  403670:	0952      	lsrs	r2, r2, #5
  403672:	2400      	movs	r4, #0
  403674:	e72d      	b.n	4034d2 <prvTimerTask+0x36>
  403676:	bf00      	nop
  403678:	20400d88 	.word	0x20400d88
  40367c:	004029c5 	.word	0x004029c5
  403680:	004033e5 	.word	0x004033e5
  403684:	20400dbc 	.word	0x20400dbc
  403688:	00402625 	.word	0x00402625
  40368c:	00402b2d 	.word	0x00402b2d
  403690:	0040324d 	.word	0x0040324d
  403694:	00403375 	.word	0x00403375
  403698:	00402421 	.word	0x00402421
  40369c:	00401d4d 	.word	0x00401d4d
  4036a0:	20400d8c 	.word	0x20400d8c
  4036a4:	e000ed04 	.word	0xe000ed04
  4036a8:	004019dd 	.word	0x004019dd

004036ac <but_callback1>:
	pio_set(LED2_PIO, LED2_MASK);
	pio_set(LED3_PIO, LED3_MASK);
}

void but_callback1(void){
	flag_tc_button = 1;
  4036ac:	2201      	movs	r2, #1
  4036ae:	4b03      	ldr	r3, [pc, #12]	; (4036bc <but_callback1+0x10>)
  4036b0:	601a      	str	r2, [r3, #0]
	flag_tc_count = 0;
  4036b2:	2200      	movs	r2, #0
  4036b4:	4b02      	ldr	r3, [pc, #8]	; (4036c0 <but_callback1+0x14>)
  4036b6:	601a      	str	r2, [r3, #0]
  4036b8:	4770      	bx	lr
  4036ba:	bf00      	nop
  4036bc:	20400dc0 	.word	0x20400dc0
  4036c0:	20400e48 	.word	0x20400e48

004036c4 <RTT_init>:
static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4036c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036c8:	ed2d 8b02 	vpush	{d8}
  4036cc:	b082      	sub	sp, #8
  4036ce:	eeb0 8a40 	vmov.f32	s16, s0
  4036d2:	4680      	mov	r8, r0
  4036d4:	460f      	mov	r7, r1
	rtt_sel_source(RTT, false);
  4036d6:	4c20      	ldr	r4, [pc, #128]	; (403758 <RTT_init+0x94>)
  4036d8:	2100      	movs	r1, #0
  4036da:	4620      	mov	r0, r4
  4036dc:	4b1f      	ldr	r3, [pc, #124]	; (40375c <RTT_init+0x98>)
  4036de:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  4036e0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 403760 <RTT_init+0x9c>
  4036e4:	eec7 7a08 	vdiv.f32	s15, s14, s16
  4036e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4036ec:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  4036f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  4036f4:	4620      	mov	r0, r4
  4036f6:	4b1b      	ldr	r3, [pc, #108]	; (403764 <RTT_init+0xa0>)
  4036f8:	4798      	blx	r3
	if (rttIRQSource & RTT_MR_ALMIEN) {
  4036fa:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  4036fe:	d116      	bne.n	40372e <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403700:	4b19      	ldr	r3, [pc, #100]	; (403768 <RTT_init+0xa4>)
  403702:	2208      	movs	r2, #8
  403704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403708:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40370c:	2180      	movs	r1, #128	; 0x80
  40370e:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403712:	601a      	str	r2, [r3, #0]
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  403714:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  403718:	d119      	bne.n	40374e <RTT_init+0x8a>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  40371a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  40371e:	480e      	ldr	r0, [pc, #56]	; (403758 <RTT_init+0x94>)
  403720:	4b12      	ldr	r3, [pc, #72]	; (40376c <RTT_init+0xa8>)
  403722:	4798      	blx	r3
}
  403724:	b002      	add	sp, #8
  403726:	ecbd 8b02 	vpop	{d8}
  40372a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  40372e:	4620      	mov	r0, r4
  403730:	4b0f      	ldr	r3, [pc, #60]	; (403770 <RTT_init+0xac>)
  403732:	4798      	blx	r3
  403734:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  403736:	4e08      	ldr	r6, [pc, #32]	; (403758 <RTT_init+0x94>)
  403738:	4d0d      	ldr	r5, [pc, #52]	; (403770 <RTT_init+0xac>)
  40373a:	4630      	mov	r0, r6
  40373c:	47a8      	blx	r5
  40373e:	4284      	cmp	r4, r0
  403740:	d0fb      	beq.n	40373a <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  403742:	eb04 0108 	add.w	r1, r4, r8
  403746:	4804      	ldr	r0, [pc, #16]	; (403758 <RTT_init+0x94>)
  403748:	4b0a      	ldr	r3, [pc, #40]	; (403774 <RTT_init+0xb0>)
  40374a:	4798      	blx	r3
  40374c:	e7d8      	b.n	403700 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  40374e:	4639      	mov	r1, r7
  403750:	4801      	ldr	r0, [pc, #4]	; (403758 <RTT_init+0x94>)
  403752:	4b09      	ldr	r3, [pc, #36]	; (403778 <RTT_init+0xb4>)
  403754:	4798      	blx	r3
  403756:	e7e5      	b.n	403724 <RTT_init+0x60>
  403758:	400e1830 	.word	0x400e1830
  40375c:	00400385 	.word	0x00400385
  403760:	47000000 	.word	0x47000000
  403764:	00400371 	.word	0x00400371
  403768:	e000e100 	.word	0xe000e100
  40376c:	004003c5 	.word	0x004003c5
  403770:	004003d9 	.word	0x004003d9
  403774:	004003f1 	.word	0x004003f1
  403778:	004003b1 	.word	0x004003b1

0040377c <task_sensor>:
static void task_sensor(void *pvParameters){
  40377c:	b508      	push	{r3, lr}
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  40377e:	2502      	movs	r5, #2
  403780:	4c01      	ldr	r4, [pc, #4]	; (403788 <task_sensor+0xc>)
  403782:	4628      	mov	r0, r5
  403784:	47a0      	blx	r4
  403786:	e7fc      	b.n	403782 <task_sensor+0x6>
  403788:	00401319 	.word	0x00401319

0040378c <task_oled>:
static void task_oled(void *pvParameters){
  40378c:	b580      	push	{r7, lr}
  40378e:	b086      	sub	sp, #24
	gfx_mono_ssd1306_init();
  403790:	4b23      	ldr	r3, [pc, #140]	; (403820 <task_oled+0x94>)
  403792:	4798      	blx	r3
	char char_minutes[3] = "";
  403794:	4b23      	ldr	r3, [pc, #140]	; (403824 <task_oled+0x98>)
  403796:	781a      	ldrb	r2, [r3, #0]
  403798:	f88d 2014 	strb.w	r2, [sp, #20]
  40379c:	2300      	movs	r3, #0
  40379e:	f8ad 3015 	strh.w	r3, [sp, #21]
	char char_seconds[3] = "";
  4037a2:	f88d 2010 	strb.w	r2, [sp, #16]
  4037a6:	f8ad 3011 	strh.w	r3, [sp, #17]
	char char_hours[12] = "";
  4037aa:	9301      	str	r3, [sp, #4]
  4037ac:	9302      	str	r3, [sp, #8]
  4037ae:	9303      	str	r3, [sp, #12]
		rtc_get_time(RTC, &global_hours, &global_minutes, &global_seconds);
  4037b0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 403850 <task_oled+0xc4>
  4037b4:	4f1c      	ldr	r7, [pc, #112]	; (403828 <task_oled+0x9c>)
  4037b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 403854 <task_oled+0xc8>
  4037ba:	4c1c      	ldr	r4, [pc, #112]	; (40382c <task_oled+0xa0>)
  4037bc:	4643      	mov	r3, r8
  4037be:	463a      	mov	r2, r7
  4037c0:	4621      	mov	r1, r4
  4037c2:	4648      	mov	r0, r9
  4037c4:	4d1a      	ldr	r5, [pc, #104]	; (403830 <task_oled+0xa4>)
  4037c6:	47a8      	blx	r5
		sprintf(char_minutes, "%d", global_minutes);
  4037c8:	683a      	ldr	r2, [r7, #0]
  4037ca:	4e1a      	ldr	r6, [pc, #104]	; (403834 <task_oled+0xa8>)
  4037cc:	4631      	mov	r1, r6
  4037ce:	a805      	add	r0, sp, #20
  4037d0:	4d19      	ldr	r5, [pc, #100]	; (403838 <task_oled+0xac>)
  4037d2:	47a8      	blx	r5
		sprintf(char_seconds, "%d", global_seconds);
  4037d4:	f8d8 2000 	ldr.w	r2, [r8]
  4037d8:	4631      	mov	r1, r6
  4037da:	a804      	add	r0, sp, #16
  4037dc:	47a8      	blx	r5
		sprintf(char_hours, "%d", global_hours);
  4037de:	6822      	ldr	r2, [r4, #0]
  4037e0:	ac01      	add	r4, sp, #4
  4037e2:	4631      	mov	r1, r6
  4037e4:	4620      	mov	r0, r4
  4037e6:	47a8      	blx	r5
		strcat(char_hours, ":");
  4037e8:	4620      	mov	r0, r4
  4037ea:	f8df a06c 	ldr.w	sl, [pc, #108]	; 403858 <task_oled+0xcc>
  4037ee:	47d0      	blx	sl
  4037f0:	4b12      	ldr	r3, [pc, #72]	; (40383c <task_oled+0xb0>)
  4037f2:	881e      	ldrh	r6, [r3, #0]
  4037f4:	5226      	strh	r6, [r4, r0]
		strcat(char_hours, char_minutes);
  4037f6:	a905      	add	r1, sp, #20
  4037f8:	4620      	mov	r0, r4
  4037fa:	4d11      	ldr	r5, [pc, #68]	; (403840 <task_oled+0xb4>)
  4037fc:	47a8      	blx	r5
		strcat(char_hours, ":");
  4037fe:	4620      	mov	r0, r4
  403800:	47d0      	blx	sl
  403802:	5226      	strh	r6, [r4, r0]
		strcat(char_hours, char_seconds);
  403804:	a904      	add	r1, sp, #16
  403806:	4620      	mov	r0, r4
  403808:	47a8      	blx	r5
		gfx_mono_draw_string(char_hours, 0, 0, &sysfont);
  40380a:	4b0e      	ldr	r3, [pc, #56]	; (403844 <task_oled+0xb8>)
  40380c:	2200      	movs	r2, #0
  40380e:	4611      	mov	r1, r2
  403810:	4620      	mov	r0, r4
  403812:	4c0d      	ldr	r4, [pc, #52]	; (403848 <task_oled+0xbc>)
  403814:	47a0      	blx	r4
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403816:	2002      	movs	r0, #2
  403818:	4b0c      	ldr	r3, [pc, #48]	; (40384c <task_oled+0xc0>)
  40381a:	4798      	blx	r3
  40381c:	e7cd      	b.n	4037ba <task_oled+0x2e>
  40381e:	bf00      	nop
  403820:	004008a1 	.word	0x004008a1
  403824:	0040b308 	.word	0x0040b308
  403828:	20400e4c 	.word	0x20400e4c
  40382c:	20400e50 	.word	0x20400e50
  403830:	004001c7 	.word	0x004001c7
  403834:	0040b434 	.word	0x0040b434
  403838:	00404bcd 	.word	0x00404bcd
  40383c:	0040b438 	.word	0x0040b438
  403840:	00404c19 	.word	0x00404c19
  403844:	2040000c 	.word	0x2040000c
  403848:	00400809 	.word	0x00400809
  40384c:	00401319 	.word	0x00401319
  403850:	20400e68 	.word	0x20400e68
  403854:	400e1860 	.word	0x400e1860
  403858:	00404d41 	.word	0x00404d41

0040385c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40385c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40385e:	b083      	sub	sp, #12
  403860:	4605      	mov	r5, r0
  403862:	460c      	mov	r4, r1
	uint32_t val = 0;
  403864:	2300      	movs	r3, #0
  403866:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403868:	4b2a      	ldr	r3, [pc, #168]	; (403914 <usart_serial_getchar+0xb8>)
  40386a:	4298      	cmp	r0, r3
  40386c:	d013      	beq.n	403896 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40386e:	4b2a      	ldr	r3, [pc, #168]	; (403918 <usart_serial_getchar+0xbc>)
  403870:	4298      	cmp	r0, r3
  403872:	d018      	beq.n	4038a6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403874:	4b29      	ldr	r3, [pc, #164]	; (40391c <usart_serial_getchar+0xc0>)
  403876:	4298      	cmp	r0, r3
  403878:	d01d      	beq.n	4038b6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40387a:	4b29      	ldr	r3, [pc, #164]	; (403920 <usart_serial_getchar+0xc4>)
  40387c:	429d      	cmp	r5, r3
  40387e:	d022      	beq.n	4038c6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403880:	4b28      	ldr	r3, [pc, #160]	; (403924 <usart_serial_getchar+0xc8>)
  403882:	429d      	cmp	r5, r3
  403884:	d027      	beq.n	4038d6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403886:	4b28      	ldr	r3, [pc, #160]	; (403928 <usart_serial_getchar+0xcc>)
  403888:	429d      	cmp	r5, r3
  40388a:	d02e      	beq.n	4038ea <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40388c:	4b27      	ldr	r3, [pc, #156]	; (40392c <usart_serial_getchar+0xd0>)
  40388e:	429d      	cmp	r5, r3
  403890:	d035      	beq.n	4038fe <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403892:	b003      	add	sp, #12
  403894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403896:	461f      	mov	r7, r3
  403898:	4e25      	ldr	r6, [pc, #148]	; (403930 <usart_serial_getchar+0xd4>)
  40389a:	4621      	mov	r1, r4
  40389c:	4638      	mov	r0, r7
  40389e:	47b0      	blx	r6
  4038a0:	2800      	cmp	r0, #0
  4038a2:	d1fa      	bne.n	40389a <usart_serial_getchar+0x3e>
  4038a4:	e7e9      	b.n	40387a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4038a6:	461f      	mov	r7, r3
  4038a8:	4e21      	ldr	r6, [pc, #132]	; (403930 <usart_serial_getchar+0xd4>)
  4038aa:	4621      	mov	r1, r4
  4038ac:	4638      	mov	r0, r7
  4038ae:	47b0      	blx	r6
  4038b0:	2800      	cmp	r0, #0
  4038b2:	d1fa      	bne.n	4038aa <usart_serial_getchar+0x4e>
  4038b4:	e7e4      	b.n	403880 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4038b6:	461f      	mov	r7, r3
  4038b8:	4e1d      	ldr	r6, [pc, #116]	; (403930 <usart_serial_getchar+0xd4>)
  4038ba:	4621      	mov	r1, r4
  4038bc:	4638      	mov	r0, r7
  4038be:	47b0      	blx	r6
  4038c0:	2800      	cmp	r0, #0
  4038c2:	d1fa      	bne.n	4038ba <usart_serial_getchar+0x5e>
  4038c4:	e7df      	b.n	403886 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4038c6:	461f      	mov	r7, r3
  4038c8:	4e19      	ldr	r6, [pc, #100]	; (403930 <usart_serial_getchar+0xd4>)
  4038ca:	4621      	mov	r1, r4
  4038cc:	4638      	mov	r0, r7
  4038ce:	47b0      	blx	r6
  4038d0:	2800      	cmp	r0, #0
  4038d2:	d1fa      	bne.n	4038ca <usart_serial_getchar+0x6e>
  4038d4:	e7da      	b.n	40388c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4038d6:	461e      	mov	r6, r3
  4038d8:	4d16      	ldr	r5, [pc, #88]	; (403934 <usart_serial_getchar+0xd8>)
  4038da:	a901      	add	r1, sp, #4
  4038dc:	4630      	mov	r0, r6
  4038de:	47a8      	blx	r5
  4038e0:	2800      	cmp	r0, #0
  4038e2:	d1fa      	bne.n	4038da <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4038e4:	9b01      	ldr	r3, [sp, #4]
  4038e6:	7023      	strb	r3, [r4, #0]
  4038e8:	e7d3      	b.n	403892 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4038ea:	461e      	mov	r6, r3
  4038ec:	4d11      	ldr	r5, [pc, #68]	; (403934 <usart_serial_getchar+0xd8>)
  4038ee:	a901      	add	r1, sp, #4
  4038f0:	4630      	mov	r0, r6
  4038f2:	47a8      	blx	r5
  4038f4:	2800      	cmp	r0, #0
  4038f6:	d1fa      	bne.n	4038ee <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4038f8:	9b01      	ldr	r3, [sp, #4]
  4038fa:	7023      	strb	r3, [r4, #0]
  4038fc:	e7c9      	b.n	403892 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4038fe:	461e      	mov	r6, r3
  403900:	4d0c      	ldr	r5, [pc, #48]	; (403934 <usart_serial_getchar+0xd8>)
  403902:	a901      	add	r1, sp, #4
  403904:	4630      	mov	r0, r6
  403906:	47a8      	blx	r5
  403908:	2800      	cmp	r0, #0
  40390a:	d1fa      	bne.n	403902 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40390c:	9b01      	ldr	r3, [sp, #4]
  40390e:	7023      	strb	r3, [r4, #0]
}
  403910:	e7bf      	b.n	403892 <usart_serial_getchar+0x36>
  403912:	bf00      	nop
  403914:	400e0800 	.word	0x400e0800
  403918:	400e0a00 	.word	0x400e0a00
  40391c:	400e1a00 	.word	0x400e1a00
  403920:	400e1c00 	.word	0x400e1c00
  403924:	40024000 	.word	0x40024000
  403928:	40028000 	.word	0x40028000
  40392c:	4002c000 	.word	0x4002c000
  403930:	0040159f 	.word	0x0040159f
  403934:	004016ab 	.word	0x004016ab

00403938 <usart_serial_putchar>:
{
  403938:	b570      	push	{r4, r5, r6, lr}
  40393a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40393c:	4b2a      	ldr	r3, [pc, #168]	; (4039e8 <usart_serial_putchar+0xb0>)
  40393e:	4298      	cmp	r0, r3
  403940:	d013      	beq.n	40396a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403942:	4b2a      	ldr	r3, [pc, #168]	; (4039ec <usart_serial_putchar+0xb4>)
  403944:	4298      	cmp	r0, r3
  403946:	d019      	beq.n	40397c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403948:	4b29      	ldr	r3, [pc, #164]	; (4039f0 <usart_serial_putchar+0xb8>)
  40394a:	4298      	cmp	r0, r3
  40394c:	d01f      	beq.n	40398e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40394e:	4b29      	ldr	r3, [pc, #164]	; (4039f4 <usart_serial_putchar+0xbc>)
  403950:	4298      	cmp	r0, r3
  403952:	d025      	beq.n	4039a0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403954:	4b28      	ldr	r3, [pc, #160]	; (4039f8 <usart_serial_putchar+0xc0>)
  403956:	4298      	cmp	r0, r3
  403958:	d02b      	beq.n	4039b2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40395a:	4b28      	ldr	r3, [pc, #160]	; (4039fc <usart_serial_putchar+0xc4>)
  40395c:	4298      	cmp	r0, r3
  40395e:	d031      	beq.n	4039c4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403960:	4b27      	ldr	r3, [pc, #156]	; (403a00 <usart_serial_putchar+0xc8>)
  403962:	4298      	cmp	r0, r3
  403964:	d037      	beq.n	4039d6 <usart_serial_putchar+0x9e>
	return 0;
  403966:	2000      	movs	r0, #0
}
  403968:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40396a:	461e      	mov	r6, r3
  40396c:	4d25      	ldr	r5, [pc, #148]	; (403a04 <usart_serial_putchar+0xcc>)
  40396e:	4621      	mov	r1, r4
  403970:	4630      	mov	r0, r6
  403972:	47a8      	blx	r5
  403974:	2800      	cmp	r0, #0
  403976:	d1fa      	bne.n	40396e <usart_serial_putchar+0x36>
		return 1;
  403978:	2001      	movs	r0, #1
  40397a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40397c:	461e      	mov	r6, r3
  40397e:	4d21      	ldr	r5, [pc, #132]	; (403a04 <usart_serial_putchar+0xcc>)
  403980:	4621      	mov	r1, r4
  403982:	4630      	mov	r0, r6
  403984:	47a8      	blx	r5
  403986:	2800      	cmp	r0, #0
  403988:	d1fa      	bne.n	403980 <usart_serial_putchar+0x48>
		return 1;
  40398a:	2001      	movs	r0, #1
  40398c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40398e:	461e      	mov	r6, r3
  403990:	4d1c      	ldr	r5, [pc, #112]	; (403a04 <usart_serial_putchar+0xcc>)
  403992:	4621      	mov	r1, r4
  403994:	4630      	mov	r0, r6
  403996:	47a8      	blx	r5
  403998:	2800      	cmp	r0, #0
  40399a:	d1fa      	bne.n	403992 <usart_serial_putchar+0x5a>
		return 1;
  40399c:	2001      	movs	r0, #1
  40399e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4039a0:	461e      	mov	r6, r3
  4039a2:	4d18      	ldr	r5, [pc, #96]	; (403a04 <usart_serial_putchar+0xcc>)
  4039a4:	4621      	mov	r1, r4
  4039a6:	4630      	mov	r0, r6
  4039a8:	47a8      	blx	r5
  4039aa:	2800      	cmp	r0, #0
  4039ac:	d1fa      	bne.n	4039a4 <usart_serial_putchar+0x6c>
		return 1;
  4039ae:	2001      	movs	r0, #1
  4039b0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4039b2:	461e      	mov	r6, r3
  4039b4:	4d14      	ldr	r5, [pc, #80]	; (403a08 <usart_serial_putchar+0xd0>)
  4039b6:	4621      	mov	r1, r4
  4039b8:	4630      	mov	r0, r6
  4039ba:	47a8      	blx	r5
  4039bc:	2800      	cmp	r0, #0
  4039be:	d1fa      	bne.n	4039b6 <usart_serial_putchar+0x7e>
		return 1;
  4039c0:	2001      	movs	r0, #1
  4039c2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4039c4:	461e      	mov	r6, r3
  4039c6:	4d10      	ldr	r5, [pc, #64]	; (403a08 <usart_serial_putchar+0xd0>)
  4039c8:	4621      	mov	r1, r4
  4039ca:	4630      	mov	r0, r6
  4039cc:	47a8      	blx	r5
  4039ce:	2800      	cmp	r0, #0
  4039d0:	d1fa      	bne.n	4039c8 <usart_serial_putchar+0x90>
		return 1;
  4039d2:	2001      	movs	r0, #1
  4039d4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4039d6:	461e      	mov	r6, r3
  4039d8:	4d0b      	ldr	r5, [pc, #44]	; (403a08 <usart_serial_putchar+0xd0>)
  4039da:	4621      	mov	r1, r4
  4039dc:	4630      	mov	r0, r6
  4039de:	47a8      	blx	r5
  4039e0:	2800      	cmp	r0, #0
  4039e2:	d1fa      	bne.n	4039da <usart_serial_putchar+0xa2>
		return 1;
  4039e4:	2001      	movs	r0, #1
  4039e6:	bd70      	pop	{r4, r5, r6, pc}
  4039e8:	400e0800 	.word	0x400e0800
  4039ec:	400e0a00 	.word	0x400e0a00
  4039f0:	400e1a00 	.word	0x400e1a00
  4039f4:	400e1c00 	.word	0x400e1c00
  4039f8:	40024000 	.word	0x40024000
  4039fc:	40028000 	.word	0x40028000
  403a00:	4002c000 	.word	0x4002c000
  403a04:	0040158d 	.word	0x0040158d
  403a08:	00401695 	.word	0x00401695

00403a0c <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403a0c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403a0e:	460a      	mov	r2, r1
  403a10:	4601      	mov	r1, r0
  403a12:	4802      	ldr	r0, [pc, #8]	; (403a1c <vApplicationStackOverflowHook+0x10>)
  403a14:	4b02      	ldr	r3, [pc, #8]	; (403a20 <vApplicationStackOverflowHook+0x14>)
  403a16:	4798      	blx	r3
  403a18:	e7fe      	b.n	403a18 <vApplicationStackOverflowHook+0xc>
  403a1a:	bf00      	nop
  403a1c:	0040b43c 	.word	0x0040b43c
  403a20:	00404935 	.word	0x00404935

00403a24 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403a24:	4770      	bx	lr

00403a26 <vApplicationMallocFailedHook>:
  403a26:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a2a:	b672      	cpsid	i
  403a2c:	f383 8811 	msr	BASEPRI, r3
  403a30:	f3bf 8f6f 	isb	sy
  403a34:	f3bf 8f4f 	dsb	sy
  403a38:	b662      	cpsie	i
  403a3a:	e7fe      	b.n	403a3a <vApplicationMallocFailedHook+0x14>

00403a3c <RTT_Handler>:
void RTT_Handler(void){
  403a3c:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  403a3e:	480a      	ldr	r0, [pc, #40]	; (403a68 <RTT_Handler+0x2c>)
  403a40:	4b0a      	ldr	r3, [pc, #40]	; (403a6c <RTT_Handler+0x30>)
  403a42:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS){
  403a44:	f010 0f01 	tst.w	r0, #1
  403a48:	d100      	bne.n	403a4c <RTT_Handler+0x10>
  403a4a:	bd08      	pop	{r3, pc}
		xSemaphoreGiveFromISR(xSemaphoreRTT, &xHigherPriorityTaskWoken);
  403a4c:	4908      	ldr	r1, [pc, #32]	; (403a70 <RTT_Handler+0x34>)
  403a4e:	4b09      	ldr	r3, [pc, #36]	; (403a74 <RTT_Handler+0x38>)
  403a50:	6818      	ldr	r0, [r3, #0]
  403a52:	4b09      	ldr	r3, [pc, #36]	; (403a78 <RTT_Handler+0x3c>)
  403a54:	4798      	blx	r3
		RTT_init(4, 16, RTT_MR_ALMIEN);
  403a56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403a5a:	2010      	movs	r0, #16
  403a5c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  403a60:	4b06      	ldr	r3, [pc, #24]	; (403a7c <RTT_Handler+0x40>)
  403a62:	4798      	blx	r3
}
  403a64:	e7f1      	b.n	403a4a <RTT_Handler+0xe>
  403a66:	bf00      	nop
  403a68:	400e1830 	.word	0x400e1830
  403a6c:	004003ed 	.word	0x004003ed
  403a70:	20400024 	.word	0x20400024
  403a74:	20400e5c 	.word	0x20400e5c
  403a78:	00402341 	.word	0x00402341
  403a7c:	004036c5 	.word	0x004036c5

00403a80 <TC7_Handler>:
void TC7_Handler(void) {
  403a80:	b500      	push	{lr}
  403a82:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC2, 1);
  403a84:	2101      	movs	r1, #1
  403a86:	4806      	ldr	r0, [pc, #24]	; (403aa0 <TC7_Handler+0x20>)
  403a88:	4b06      	ldr	r3, [pc, #24]	; (403aa4 <TC7_Handler+0x24>)
  403a8a:	4798      	blx	r3
  403a8c:	9001      	str	r0, [sp, #4]
	xSemaphoreGiveFromISR(xSemaphoreTC, &xHigherPriorityTaskWoken);
  403a8e:	4906      	ldr	r1, [pc, #24]	; (403aa8 <TC7_Handler+0x28>)
  403a90:	4b06      	ldr	r3, [pc, #24]	; (403aac <TC7_Handler+0x2c>)
  403a92:	6818      	ldr	r0, [r3, #0]
  403a94:	4b06      	ldr	r3, [pc, #24]	; (403ab0 <TC7_Handler+0x30>)
  403a96:	4798      	blx	r3
}
  403a98:	b003      	add	sp, #12
  403a9a:	f85d fb04 	ldr.w	pc, [sp], #4
  403a9e:	bf00      	nop
  403aa0:	40014000 	.word	0x40014000
  403aa4:	004005b1 	.word	0x004005b1
  403aa8:	20400024 	.word	0x20400024
  403aac:	20400e64 	.word	0x20400e64
  403ab0:	00402341 	.word	0x00402341

00403ab4 <TC4_Handler>:
void TC4_Handler(void) {
  403ab4:	b500      	push	{lr}
  403ab6:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC1, 1);
  403ab8:	2101      	movs	r1, #1
  403aba:	480e      	ldr	r0, [pc, #56]	; (403af4 <TC4_Handler+0x40>)
  403abc:	4b0e      	ldr	r3, [pc, #56]	; (403af8 <TC4_Handler+0x44>)
  403abe:	4798      	blx	r3
  403ac0:	9001      	str	r0, [sp, #4]
	if (flag_tc_button == 1){
  403ac2:	4b0e      	ldr	r3, [pc, #56]	; (403afc <TC4_Handler+0x48>)
  403ac4:	681b      	ldr	r3, [r3, #0]
  403ac6:	2b01      	cmp	r3, #1
  403ac8:	d002      	beq.n	403ad0 <TC4_Handler+0x1c>
}
  403aca:	b003      	add	sp, #12
  403acc:	f85d fb04 	ldr.w	pc, [sp], #4
		flag_tc_count ++;
  403ad0:	4b0b      	ldr	r3, [pc, #44]	; (403b00 <TC4_Handler+0x4c>)
  403ad2:	681a      	ldr	r2, [r3, #0]
  403ad4:	3201      	adds	r2, #1
  403ad6:	601a      	str	r2, [r3, #0]
		if (flag_tc_count > 20){
  403ad8:	681b      	ldr	r3, [r3, #0]
  403ada:	2b14      	cmp	r3, #20
  403adc:	ddf5      	ble.n	403aca <TC4_Handler+0x16>
			flag_tc_button = 0;
  403ade:	2300      	movs	r3, #0
  403ae0:	4a06      	ldr	r2, [pc, #24]	; (403afc <TC4_Handler+0x48>)
  403ae2:	6013      	str	r3, [r2, #0]
			flag_tc_count = 0;
  403ae4:	4a06      	ldr	r2, [pc, #24]	; (403b00 <TC4_Handler+0x4c>)
  403ae6:	6013      	str	r3, [r2, #0]
			xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  403ae8:	4906      	ldr	r1, [pc, #24]	; (403b04 <TC4_Handler+0x50>)
  403aea:	4b07      	ldr	r3, [pc, #28]	; (403b08 <TC4_Handler+0x54>)
  403aec:	6818      	ldr	r0, [r3, #0]
  403aee:	4b07      	ldr	r3, [pc, #28]	; (403b0c <TC4_Handler+0x58>)
  403af0:	4798      	blx	r3
}
  403af2:	e7ea      	b.n	403aca <TC4_Handler+0x16>
  403af4:	40010000 	.word	0x40010000
  403af8:	004005b1 	.word	0x004005b1
  403afc:	20400dc0 	.word	0x20400dc0
  403b00:	20400e48 	.word	0x20400e48
  403b04:	20400024 	.word	0x20400024
  403b08:	20400e58 	.word	0x20400e58
  403b0c:	00402341 	.word	0x00402341

00403b10 <RTC_Handler>:
void RTC_Handler(void) {
  403b10:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  403b12:	4810      	ldr	r0, [pc, #64]	; (403b54 <RTC_Handler+0x44>)
  403b14:	4b10      	ldr	r3, [pc, #64]	; (403b58 <RTC_Handler+0x48>)
  403b16:	4798      	blx	r3
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  403b18:	f010 0f02 	tst.w	r0, #2
  403b1c:	d114      	bne.n	403b48 <RTC_Handler+0x38>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403b1e:	4d0d      	ldr	r5, [pc, #52]	; (403b54 <RTC_Handler+0x44>)
  403b20:	2104      	movs	r1, #4
  403b22:	4628      	mov	r0, r5
  403b24:	4c0d      	ldr	r4, [pc, #52]	; (403b5c <RTC_Handler+0x4c>)
  403b26:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  403b28:	2102      	movs	r1, #2
  403b2a:	4628      	mov	r0, r5
  403b2c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  403b2e:	2101      	movs	r1, #1
  403b30:	4628      	mov	r0, r5
  403b32:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403b34:	2108      	movs	r1, #8
  403b36:	4628      	mov	r0, r5
  403b38:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  403b3a:	2110      	movs	r1, #16
  403b3c:	4628      	mov	r0, r5
  403b3e:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  403b40:	2120      	movs	r1, #32
  403b42:	4628      	mov	r0, r5
  403b44:	47a0      	blx	r4
  403b46:	bd38      	pop	{r3, r4, r5, pc}
		xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  403b48:	4905      	ldr	r1, [pc, #20]	; (403b60 <RTC_Handler+0x50>)
  403b4a:	4b06      	ldr	r3, [pc, #24]	; (403b64 <RTC_Handler+0x54>)
  403b4c:	6818      	ldr	r0, [r3, #0]
  403b4e:	4b06      	ldr	r3, [pc, #24]	; (403b68 <RTC_Handler+0x58>)
  403b50:	4798      	blx	r3
  403b52:	e7e4      	b.n	403b1e <RTC_Handler+0xe>
  403b54:	400e1860 	.word	0x400e1860
  403b58:	00400369 	.word	0x00400369
  403b5c:	0040036d 	.word	0x0040036d
  403b60:	20400024 	.word	0x20400024
  403b64:	20400e58 	.word	0x20400e58
  403b68:	00402341 	.word	0x00402341

00403b6c <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b70:	b084      	sub	sp, #16
  403b72:	4605      	mov	r5, r0
  403b74:	460c      	mov	r4, r1
  403b76:	4616      	mov	r6, r2
  403b78:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ID_TC);
  403b7a:	4608      	mov	r0, r1
  403b7c:	4b1f      	ldr	r3, [pc, #124]	; (403bfc <TC_init+0x90>)
  403b7e:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403b80:	491f      	ldr	r1, [pc, #124]	; (403c00 <TC_init+0x94>)
  403b82:	9100      	str	r1, [sp, #0]
  403b84:	ab02      	add	r3, sp, #8
  403b86:	aa03      	add	r2, sp, #12
  403b88:	4638      	mov	r0, r7
  403b8a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 403c20 <TC_init+0xb4>
  403b8e:	47c0      	blx	r8
	if(ul_tcclks == 0 )
  403b90:	9b02      	ldr	r3, [sp, #8]
  403b92:	b33b      	cbz	r3, 403be4 <TC_init+0x78>
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  403b94:	9a02      	ldr	r2, [sp, #8]
  403b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403b9a:	4631      	mov	r1, r6
  403b9c:	4628      	mov	r0, r5
  403b9e:	4b19      	ldr	r3, [pc, #100]	; (403c04 <TC_init+0x98>)
  403ba0:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  403ba2:	9b03      	ldr	r3, [sp, #12]
  403ba4:	4a16      	ldr	r2, [pc, #88]	; (403c00 <TC_init+0x94>)
  403ba6:	fbb2 f2f3 	udiv	r2, r2, r3
  403baa:	fbb2 f2f7 	udiv	r2, r2, r7
  403bae:	4631      	mov	r1, r6
  403bb0:	4628      	mov	r0, r5
  403bb2:	4b15      	ldr	r3, [pc, #84]	; (403c08 <TC_init+0x9c>)
  403bb4:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  403bb6:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  403bb8:	2b00      	cmp	r3, #0
  403bba:	db17      	blt.n	403bec <TC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403bbc:	4a13      	ldr	r2, [pc, #76]	; (403c0c <TC_init+0xa0>)
  403bbe:	2180      	movs	r1, #128	; 0x80
  403bc0:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403bc2:	095b      	lsrs	r3, r3, #5
  403bc4:	f004 041f 	and.w	r4, r4, #31
  403bc8:	2201      	movs	r2, #1
  403bca:	fa02 f404 	lsl.w	r4, r2, r4
  403bce:	4a10      	ldr	r2, [pc, #64]	; (403c10 <TC_init+0xa4>)
  403bd0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  403bd4:	2210      	movs	r2, #16
  403bd6:	4631      	mov	r1, r6
  403bd8:	4628      	mov	r0, r5
  403bda:	4b0e      	ldr	r3, [pc, #56]	; (403c14 <TC_init+0xa8>)
  403bdc:	4798      	blx	r3
}
  403bde:	b004      	add	sp, #16
  403be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pmc_enable_pck(PMC_PCK_6);
  403be4:	2006      	movs	r0, #6
  403be6:	4b0c      	ldr	r3, [pc, #48]	; (403c18 <TC_init+0xac>)
  403be8:	4798      	blx	r3
  403bea:	e7d3      	b.n	403b94 <TC_init+0x28>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403bec:	f004 010f 	and.w	r1, r4, #15
  403bf0:	4a0a      	ldr	r2, [pc, #40]	; (403c1c <TC_init+0xb0>)
  403bf2:	440a      	add	r2, r1
  403bf4:	2180      	movs	r1, #128	; 0x80
  403bf6:	7611      	strb	r1, [r2, #24]
  403bf8:	e7e3      	b.n	403bc2 <TC_init+0x56>
  403bfa:	bf00      	nop
  403bfc:	00401261 	.word	0x00401261
  403c00:	11e1a300 	.word	0x11e1a300
  403c04:	0040057f 	.word	0x0040057f
  403c08:	004005a1 	.word	0x004005a1
  403c0c:	e000e400 	.word	0xe000e400
  403c10:	e000e100 	.word	0xe000e100
  403c14:	004005a9 	.word	0x004005a9
  403c18:	004012b5 	.word	0x004012b5
  403c1c:	e000ecfc 	.word	0xe000ecfc
  403c20:	004005b9 	.word	0x004005b9

00403c24 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  403c24:	b082      	sub	sp, #8
  403c26:	b570      	push	{r4, r5, r6, lr}
  403c28:	b082      	sub	sp, #8
  403c2a:	4605      	mov	r5, r0
  403c2c:	460c      	mov	r4, r1
  403c2e:	a906      	add	r1, sp, #24
  403c30:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  403c34:	2002      	movs	r0, #2
  403c36:	4b1d      	ldr	r3, [pc, #116]	; (403cac <RTC_init+0x88>)
  403c38:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  403c3a:	2100      	movs	r1, #0
  403c3c:	4628      	mov	r0, r5
  403c3e:	4b1c      	ldr	r3, [pc, #112]	; (403cb0 <RTC_init+0x8c>)
  403c40:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  403c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c44:	9300      	str	r3, [sp, #0]
  403c46:	9b08      	ldr	r3, [sp, #32]
  403c48:	9a07      	ldr	r2, [sp, #28]
  403c4a:	9906      	ldr	r1, [sp, #24]
  403c4c:	4628      	mov	r0, r5
  403c4e:	4e19      	ldr	r6, [pc, #100]	; (403cb4 <RTC_init+0x90>)
  403c50:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  403c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403c56:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c58:	4628      	mov	r0, r5
  403c5a:	4e17      	ldr	r6, [pc, #92]	; (403cb8 <RTC_init+0x94>)
  403c5c:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  403c5e:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403c60:	b2e4      	uxtb	r4, r4
  403c62:	f004 011f 	and.w	r1, r4, #31
  403c66:	2301      	movs	r3, #1
  403c68:	408b      	lsls	r3, r1
  403c6a:	0956      	lsrs	r6, r2, #5
  403c6c:	4813      	ldr	r0, [pc, #76]	; (403cbc <RTC_init+0x98>)
  403c6e:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  403c72:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403c76:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  403c7a:	2a00      	cmp	r2, #0
  403c7c:	db0f      	blt.n	403c9e <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403c7e:	490f      	ldr	r1, [pc, #60]	; (403cbc <RTC_init+0x98>)
  403c80:	4411      	add	r1, r2
  403c82:	2280      	movs	r2, #128	; 0x80
  403c84:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403c88:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  403c8c:	990d      	ldr	r1, [sp, #52]	; 0x34
  403c8e:	4628      	mov	r0, r5
  403c90:	4b0b      	ldr	r3, [pc, #44]	; (403cc0 <RTC_init+0x9c>)
  403c92:	4798      	blx	r3
}
  403c94:	b002      	add	sp, #8
  403c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  403c9a:	b002      	add	sp, #8
  403c9c:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403c9e:	f004 040f 	and.w	r4, r4, #15
  403ca2:	4a08      	ldr	r2, [pc, #32]	; (403cc4 <RTC_init+0xa0>)
  403ca4:	2180      	movs	r1, #128	; 0x80
  403ca6:	5511      	strb	r1, [r2, r4]
  403ca8:	e7ee      	b.n	403c88 <RTC_init+0x64>
  403caa:	bf00      	nop
  403cac:	00401261 	.word	0x00401261
  403cb0:	004001ad 	.word	0x004001ad
  403cb4:	004002b1 	.word	0x004002b1
  403cb8:	00400221 	.word	0x00400221
  403cbc:	e000e100 	.word	0xe000e100
  403cc0:	004001c3 	.word	0x004001c3
  403cc4:	e000ed14 	.word	0xe000ed14

00403cc8 <led_pisca>:
void led_pisca(int led){
  403cc8:	b510      	push	{r4, lr}
	if (led == 1){
  403cca:	2801      	cmp	r0, #1
  403ccc:	d004      	beq.n	403cd8 <led_pisca+0x10>
	if (led == 2){
  403cce:	2802      	cmp	r0, #2
  403cd0:	d00f      	beq.n	403cf2 <led_pisca+0x2a>
	if (led == 3){
  403cd2:	2803      	cmp	r0, #3
  403cd4:	d01c      	beq.n	403d10 <led_pisca+0x48>
  403cd6:	bd10      	pop	{r4, pc}
		pio_clear(LED1_PIO, LED1_MASK);
  403cd8:	4c14      	ldr	r4, [pc, #80]	; (403d2c <led_pisca+0x64>)
  403cda:	2101      	movs	r1, #1
  403cdc:	4620      	mov	r0, r4
  403cde:	4b14      	ldr	r3, [pc, #80]	; (403d30 <led_pisca+0x68>)
  403ce0:	4798      	blx	r3
		vTaskDelay(50);
  403ce2:	2032      	movs	r0, #50	; 0x32
  403ce4:	4b13      	ldr	r3, [pc, #76]	; (403d34 <led_pisca+0x6c>)
  403ce6:	4798      	blx	r3
		pio_set(LED1_PIO, LED1_MASK);
  403ce8:	2101      	movs	r1, #1
  403cea:	4620      	mov	r0, r4
  403cec:	4b12      	ldr	r3, [pc, #72]	; (403d38 <led_pisca+0x70>)
  403cee:	4798      	blx	r3
  403cf0:	bd10      	pop	{r4, pc}
		pio_clear(LED2_PIO, LED2_MASK);
  403cf2:	4c12      	ldr	r4, [pc, #72]	; (403d3c <led_pisca+0x74>)
  403cf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403cf8:	4620      	mov	r0, r4
  403cfa:	4b0d      	ldr	r3, [pc, #52]	; (403d30 <led_pisca+0x68>)
  403cfc:	4798      	blx	r3
		vTaskDelay(50);
  403cfe:	2032      	movs	r0, #50	; 0x32
  403d00:	4b0c      	ldr	r3, [pc, #48]	; (403d34 <led_pisca+0x6c>)
  403d02:	4798      	blx	r3
		pio_set(LED2_PIO, LED2_MASK);
  403d04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403d08:	4620      	mov	r0, r4
  403d0a:	4b0b      	ldr	r3, [pc, #44]	; (403d38 <led_pisca+0x70>)
  403d0c:	4798      	blx	r3
  403d0e:	bd10      	pop	{r4, pc}
		pio_clear(LED3_PIO, LED3_MASK);
  403d10:	4c0b      	ldr	r4, [pc, #44]	; (403d40 <led_pisca+0x78>)
  403d12:	2104      	movs	r1, #4
  403d14:	4620      	mov	r0, r4
  403d16:	4b06      	ldr	r3, [pc, #24]	; (403d30 <led_pisca+0x68>)
  403d18:	4798      	blx	r3
		vTaskDelay(50);
  403d1a:	2032      	movs	r0, #50	; 0x32
  403d1c:	4b05      	ldr	r3, [pc, #20]	; (403d34 <led_pisca+0x6c>)
  403d1e:	4798      	blx	r3
		pio_set(LED3_PIO, LED3_MASK);
  403d20:	2104      	movs	r1, #4
  403d22:	4620      	mov	r0, r4
  403d24:	4b04      	ldr	r3, [pc, #16]	; (403d38 <led_pisca+0x70>)
  403d26:	4798      	blx	r3
}
  403d28:	e7d5      	b.n	403cd6 <led_pisca+0xe>
  403d2a:	bf00      	nop
  403d2c:	400e0e00 	.word	0x400e0e00
  403d30:	00400e59 	.word	0x00400e59
  403d34:	00402c4d 	.word	0x00402c4d
  403d38:	00400e55 	.word	0x00400e55
  403d3c:	400e1200 	.word	0x400e1200
  403d40:	400e1000 	.word	0x400e1000

00403d44 <task_rtc>:
static void task_rtc(void *pvParameters){
  403d44:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreRTC, 100)){
  403d46:	4d08      	ldr	r5, [pc, #32]	; (403d68 <task_rtc+0x24>)
  403d48:	4c08      	ldr	r4, [pc, #32]	; (403d6c <task_rtc+0x28>)
			led_pisca(3);
  403d4a:	4e09      	ldr	r6, [pc, #36]	; (403d70 <task_rtc+0x2c>)
  403d4c:	e002      	b.n	403d54 <task_rtc+0x10>
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403d4e:	2002      	movs	r0, #2
  403d50:	4b08      	ldr	r3, [pc, #32]	; (403d74 <task_rtc+0x30>)
  403d52:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreRTC, 100)){
  403d54:	2300      	movs	r3, #0
  403d56:	2264      	movs	r2, #100	; 0x64
  403d58:	4619      	mov	r1, r3
  403d5a:	6828      	ldr	r0, [r5, #0]
  403d5c:	47a0      	blx	r4
  403d5e:	2800      	cmp	r0, #0
  403d60:	d0f5      	beq.n	403d4e <task_rtc+0xa>
			led_pisca(3);
  403d62:	2003      	movs	r0, #3
  403d64:	47b0      	blx	r6
  403d66:	e7f2      	b.n	403d4e <task_rtc+0xa>
  403d68:	20400e58 	.word	0x20400e58
  403d6c:	00402421 	.word	0x00402421
  403d70:	00403cc9 	.word	0x00403cc9
  403d74:	00401319 	.word	0x00401319

00403d78 <task_tc>:
static void task_tc(void *pvParameters){
  403d78:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreTC, 100)){
  403d7a:	4d08      	ldr	r5, [pc, #32]	; (403d9c <task_tc+0x24>)
  403d7c:	4c08      	ldr	r4, [pc, #32]	; (403da0 <task_tc+0x28>)
			led_pisca(1);
  403d7e:	4e09      	ldr	r6, [pc, #36]	; (403da4 <task_tc+0x2c>)
  403d80:	e002      	b.n	403d88 <task_tc+0x10>
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403d82:	2002      	movs	r0, #2
  403d84:	4b08      	ldr	r3, [pc, #32]	; (403da8 <task_tc+0x30>)
  403d86:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreTC, 100)){
  403d88:	2300      	movs	r3, #0
  403d8a:	2264      	movs	r2, #100	; 0x64
  403d8c:	4619      	mov	r1, r3
  403d8e:	6828      	ldr	r0, [r5, #0]
  403d90:	47a0      	blx	r4
  403d92:	2800      	cmp	r0, #0
  403d94:	d0f5      	beq.n	403d82 <task_tc+0xa>
			led_pisca(1);
  403d96:	2001      	movs	r0, #1
  403d98:	47b0      	blx	r6
  403d9a:	e7f2      	b.n	403d82 <task_tc+0xa>
  403d9c:	20400e64 	.word	0x20400e64
  403da0:	00402421 	.word	0x00402421
  403da4:	00403cc9 	.word	0x00403cc9
  403da8:	00401319 	.word	0x00401319

00403dac <task_rtt>:
static void task_rtt(void *pvParameters){
  403dac:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xSemaphoreRTT, 100)){
  403dae:	4e0c      	ldr	r6, [pc, #48]	; (403de0 <task_rtt+0x34>)
  403db0:	4d0c      	ldr	r5, [pc, #48]	; (403de4 <task_rtt+0x38>)
			led_pisca(2);
  403db2:	2402      	movs	r4, #2
  403db4:	e002      	b.n	403dbc <task_rtt+0x10>
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  403db6:	4620      	mov	r0, r4
  403db8:	4b0b      	ldr	r3, [pc, #44]	; (403de8 <task_rtt+0x3c>)
  403dba:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreRTT, 100)){
  403dbc:	2300      	movs	r3, #0
  403dbe:	2264      	movs	r2, #100	; 0x64
  403dc0:	4619      	mov	r1, r3
  403dc2:	6830      	ldr	r0, [r6, #0]
  403dc4:	47a8      	blx	r5
  403dc6:	2800      	cmp	r0, #0
  403dc8:	d0f5      	beq.n	403db6 <task_rtt+0xa>
			led_pisca(2);
  403dca:	4620      	mov	r0, r4
  403dcc:	4b07      	ldr	r3, [pc, #28]	; (403dec <task_rtt+0x40>)
  403dce:	4798      	blx	r3
			RTT_init(4, 16, RTT_MR_ALMIEN);
  403dd0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403dd4:	2010      	movs	r0, #16
  403dd6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  403dda:	4b05      	ldr	r3, [pc, #20]	; (403df0 <task_rtt+0x44>)
  403ddc:	4798      	blx	r3
  403dde:	e7ea      	b.n	403db6 <task_rtt+0xa>
  403de0:	20400e5c 	.word	0x20400e5c
  403de4:	00402421 	.word	0x00402421
  403de8:	00401319 	.word	0x00401319
  403dec:	00403cc9 	.word	0x00403cc9
  403df0:	004036c5 	.word	0x004036c5

00403df4 <led_init>:
void led_init(){
  403df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pmc_enable_periph_clk(LED1_ID);
  403df6:	200a      	movs	r0, #10
  403df8:	4d14      	ldr	r5, [pc, #80]	; (403e4c <led_init+0x58>)
  403dfa:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403dfc:	4f14      	ldr	r7, [pc, #80]	; (403e50 <led_init+0x5c>)
  403dfe:	2308      	movs	r3, #8
  403e00:	2201      	movs	r2, #1
  403e02:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e06:	4638      	mov	r0, r7
  403e08:	4c12      	ldr	r4, [pc, #72]	; (403e54 <led_init+0x60>)
  403e0a:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_ID);
  403e0c:	200c      	movs	r0, #12
  403e0e:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403e10:	4e11      	ldr	r6, [pc, #68]	; (403e58 <led_init+0x64>)
  403e12:	2308      	movs	r3, #8
  403e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403e18:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e1c:	4630      	mov	r0, r6
  403e1e:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_ID);
  403e20:	200b      	movs	r0, #11
  403e22:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403e24:	4d0d      	ldr	r5, [pc, #52]	; (403e5c <led_init+0x68>)
  403e26:	2308      	movs	r3, #8
  403e28:	2204      	movs	r2, #4
  403e2a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e2e:	4628      	mov	r0, r5
  403e30:	47a0      	blx	r4
	pio_set(LED1_PIO, LED1_MASK);
  403e32:	2101      	movs	r1, #1
  403e34:	4638      	mov	r0, r7
  403e36:	4c0a      	ldr	r4, [pc, #40]	; (403e60 <led_init+0x6c>)
  403e38:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_MASK);
  403e3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403e3e:	4630      	mov	r0, r6
  403e40:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_MASK);
  403e42:	2104      	movs	r1, #4
  403e44:	4628      	mov	r0, r5
  403e46:	47a0      	blx	r4
  403e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e4a:	bf00      	nop
  403e4c:	00401261 	.word	0x00401261
  403e50:	400e0e00 	.word	0x400e0e00
  403e54:	00400f4d 	.word	0x00400f4d
  403e58:	400e1200 	.word	0x400e1200
  403e5c:	400e1000 	.word	0x400e1000
  403e60:	00400e55 	.word	0x00400e55

00403e64 <button_init>:
}

void button_init(void){
  403e64:	b530      	push	{r4, r5, lr}
  403e66:	b083      	sub	sp, #12
	pmc_enable_periph_clk(BUT1_ID);					
  403e68:	2010      	movs	r0, #16
  403e6a:	4b12      	ldr	r3, [pc, #72]	; (403eb4 <button_init+0x50>)
  403e6c:	4798      	blx	r3
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403e6e:	4c12      	ldr	r4, [pc, #72]	; (403eb8 <button_init+0x54>)
  403e70:	2309      	movs	r3, #9
  403e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e76:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403e7a:	4620      	mov	r0, r4
  403e7c:	4d0f      	ldr	r5, [pc, #60]	; (403ebc <button_init+0x58>)
  403e7e:	47a8      	blx	r5
	pio_handler_set(BUT1_PIO, BUT1_ID, BUT1_MASK, PIO_IT_FALL_EDGE, &but_callback1);
  403e80:	4b0f      	ldr	r3, [pc, #60]	; (403ec0 <button_init+0x5c>)
  403e82:	9300      	str	r3, [sp, #0]
  403e84:	2350      	movs	r3, #80	; 0x50
  403e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e8a:	2110      	movs	r1, #16
  403e8c:	4620      	mov	r0, r4
  403e8e:	4d0d      	ldr	r5, [pc, #52]	; (403ec4 <button_init+0x60>)
  403e90:	47a8      	blx	r5
	pio_enable_interrupt(BUT1_PIO, BUT1_MASK);
  403e92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403e96:	4620      	mov	r0, r4
  403e98:	4b0b      	ldr	r3, [pc, #44]	; (403ec8 <button_init+0x64>)
  403e9a:	4798      	blx	r3
	pio_get_interrupt_status(BUT1_PIO);
  403e9c:	4620      	mov	r0, r4
  403e9e:	4b0b      	ldr	r3, [pc, #44]	; (403ecc <button_init+0x68>)
  403ea0:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403ea2:	4b0b      	ldr	r3, [pc, #44]	; (403ed0 <button_init+0x6c>)
  403ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403ea8:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403eaa:	2280      	movs	r2, #128	; 0x80
  403eac:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ(BUT1_ID);
	NVIC_SetPriority(BUT1_ID, 4);
	
}
  403eb0:	b003      	add	sp, #12
  403eb2:	bd30      	pop	{r4, r5, pc}
  403eb4:	00401261 	.word	0x00401261
  403eb8:	400e1400 	.word	0x400e1400
  403ebc:	00400f4d 	.word	0x00400f4d
  403ec0:	004036ad 	.word	0x004036ad
  403ec4:	0040106d 	.word	0x0040106d
  403ec8:	0040100f 	.word	0x0040100f
  403ecc:	00401013 	.word	0x00401013
  403ed0:	e000e100 	.word	0xe000e100

00403ed4 <main>:

int main(void) {
  403ed4:	b500      	push	{lr}
  403ed6:	b095      	sub	sp, #84	; 0x54
	/* Initialize the SAM system */
	sysclk_init();
  403ed8:	4b75      	ldr	r3, [pc, #468]	; (4040b0 <main+0x1dc>)
  403eda:	4798      	blx	r3
	board_init();
  403edc:	4b75      	ldr	r3, [pc, #468]	; (4040b4 <main+0x1e0>)
  403ede:	4798      	blx	r3
	led_init();
  403ee0:	4b75      	ldr	r3, [pc, #468]	; (4040b8 <main+0x1e4>)
  403ee2:	4798      	blx	r3
	button_init();
  403ee4:	4b75      	ldr	r3, [pc, #468]	; (4040bc <main+0x1e8>)
  403ee6:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403ee8:	4d75      	ldr	r5, [pc, #468]	; (4040c0 <main+0x1ec>)
  403eea:	4b76      	ldr	r3, [pc, #472]	; (4040c4 <main+0x1f0>)
  403eec:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403eee:	4a76      	ldr	r2, [pc, #472]	; (4040c8 <main+0x1f4>)
  403ef0:	4b76      	ldr	r3, [pc, #472]	; (4040cc <main+0x1f8>)
  403ef2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403ef4:	4a76      	ldr	r2, [pc, #472]	; (4040d0 <main+0x1fc>)
  403ef6:	4b77      	ldr	r3, [pc, #476]	; (4040d4 <main+0x200>)
  403ef8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403efa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403efe:	9307      	str	r3, [sp, #28]
	usart_settings.char_length = opt->charlength;
  403f00:	23c0      	movs	r3, #192	; 0xc0
  403f02:	9308      	str	r3, [sp, #32]
	usart_settings.parity_type = opt->paritytype;
  403f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403f08:	9309      	str	r3, [sp, #36]	; 0x24
	usart_settings.stop_bits= opt->stopbits;
  403f0a:	2400      	movs	r4, #0
  403f0c:	940a      	str	r4, [sp, #40]	; 0x28
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403f0e:	940b      	str	r4, [sp, #44]	; 0x2c
  403f10:	200e      	movs	r0, #14
  403f12:	4b71      	ldr	r3, [pc, #452]	; (4040d8 <main+0x204>)
  403f14:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403f16:	4a71      	ldr	r2, [pc, #452]	; (4040dc <main+0x208>)
  403f18:	a907      	add	r1, sp, #28
  403f1a:	4628      	mov	r0, r5
  403f1c:	4b70      	ldr	r3, [pc, #448]	; (4040e0 <main+0x20c>)
  403f1e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403f20:	4628      	mov	r0, r5
  403f22:	4b70      	ldr	r3, [pc, #448]	; (4040e4 <main+0x210>)
  403f24:	4798      	blx	r3
		usart_enable_rx(p_usart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  403c52:	4628      	mov	r0, r5
  403c54:	4b6e      	ldr	r3, [pc, #440]	; (403e10 <main+0x210>)
  403c56:	4798      	blx	r3
=======
  403282:	4628      	mov	r0, r5
  403284:	4b4d      	ldr	r3, [pc, #308]	; (4033bc <main+0x188>)
  403286:	4798      	blx	r3
=======
  403efc:	4d75      	ldr	r5, [pc, #468]	; (4040d4 <main+0x1ec>)
  403efe:	4b76      	ldr	r3, [pc, #472]	; (4040d8 <main+0x1f0>)
  403f00:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403f02:	4a76      	ldr	r2, [pc, #472]	; (4040dc <main+0x1f4>)
  403f04:	4b76      	ldr	r3, [pc, #472]	; (4040e0 <main+0x1f8>)
  403f06:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403f08:	4a76      	ldr	r2, [pc, #472]	; (4040e4 <main+0x1fc>)
  403f0a:	4b77      	ldr	r3, [pc, #476]	; (4040e8 <main+0x200>)
  403f0c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403f0e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403f12:	9307      	str	r3, [sp, #28]
	usart_settings.char_length = opt->charlength;
  403f14:	23c0      	movs	r3, #192	; 0xc0
  403f16:	9308      	str	r3, [sp, #32]
	usart_settings.parity_type = opt->paritytype;
  403f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403f1c:	9309      	str	r3, [sp, #36]	; 0x24
	usart_settings.stop_bits= opt->stopbits;
  403f1e:	2400      	movs	r4, #0
  403f20:	940a      	str	r4, [sp, #40]	; 0x28
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403f22:	940b      	str	r4, [sp, #44]	; 0x2c
  403f24:	200e      	movs	r0, #14
  403f26:	4b71      	ldr	r3, [pc, #452]	; (4040ec <main+0x204>)
  403f28:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403f2a:	4a71      	ldr	r2, [pc, #452]	; (4040f0 <main+0x208>)
  403f2c:	a907      	add	r1, sp, #28
  403f2e:	4628      	mov	r0, r5
  403f30:	4b70      	ldr	r3, [pc, #448]	; (4040f4 <main+0x20c>)
  403f32:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403f34:	4628      	mov	r0, r5
  403f36:	4b70      	ldr	r3, [pc, #448]	; (4040f8 <main+0x210>)
  403f38:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403f3a:	4628      	mov	r0, r5
  403f3c:	4b6f      	ldr	r3, [pc, #444]	; (4040fc <main+0x214>)
  403f3e:	4798      	blx	r3
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
  403f26:	4628      	mov	r0, r5
  403f28:	4b6f      	ldr	r3, [pc, #444]	; (4040e8 <main+0x214>)
  403f2a:	4798      	blx	r3
>>>>>>> Stashed changes
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  403c58:	4e6e      	ldr	r6, [pc, #440]	; (403e14 <main+0x214>)
  403c5a:	6833      	ldr	r3, [r6, #0]
  403c5c:	4621      	mov	r1, r4
  403c5e:	6898      	ldr	r0, [r3, #8]
  403c60:	4d6d      	ldr	r5, [pc, #436]	; (403e18 <main+0x218>)
  403c62:	47a8      	blx	r5
=======
<<<<<<< Updated upstream
  403288:	4e4d      	ldr	r6, [pc, #308]	; (4033c0 <main+0x18c>)
  40328a:	6833      	ldr	r3, [r6, #0]
  40328c:	4621      	mov	r1, r4
  40328e:	6898      	ldr	r0, [r3, #8]
  403290:	4d4c      	ldr	r5, [pc, #304]	; (4033c4 <main+0x190>)
  403292:	47a8      	blx	r5
>>>>>>> Stashed changes
=======
  403f2c:	4e6f      	ldr	r6, [pc, #444]	; (4040ec <main+0x218>)
  403f2e:	6833      	ldr	r3, [r6, #0]
  403f30:	4621      	mov	r1, r4
  403f32:	6898      	ldr	r0, [r3, #8]
  403f34:	4d6e      	ldr	r5, [pc, #440]	; (4040f0 <main+0x21c>)
  403f36:	47a8      	blx	r5
>>>>>>> Stashed changes
	setbuf(stdin, NULL);
  403f38:	6833      	ldr	r3, [r6, #0]
  403f3a:	4621      	mov	r1, r4
  403f3c:	6858      	ldr	r0, [r3, #4]
  403f3e:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403f40:	6833      	ldr	r3, [r6, #0]
  403f42:	4621      	mov	r1, r4
  403f44:	6898      	ldr	r0, [r3, #8]
  403f46:	47a8      	blx	r5
	/* Initialize the console uart */
	configure_console();
	
	WDT->WDT_MR = WDT_MR_WDDIS;  
  403f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403f4c:	4b69      	ldr	r3, [pc, #420]	; (4040f4 <main+0x220>)
  403f4e:	605a      	str	r2, [r3, #4]
	
	xSemaphoreRTT = xSemaphoreCreateBinary();
  403f50:	2203      	movs	r2, #3
  403f52:	4621      	mov	r1, r4
  403f54:	2001      	movs	r0, #1
  403f56:	4d68      	ldr	r5, [pc, #416]	; (4040f8 <main+0x224>)
  403f58:	47a8      	blx	r5
  403f5a:	4b68      	ldr	r3, [pc, #416]	; (4040fc <main+0x228>)
  403f5c:	6018      	str	r0, [r3, #0]
	xSemaphoreRTC = xSemaphoreCreateBinary();
  403f5e:	2203      	movs	r2, #3
  403f60:	4621      	mov	r1, r4
  403f62:	2001      	movs	r0, #1
  403f64:	47a8      	blx	r5
  403f66:	4b66      	ldr	r3, [pc, #408]	; (404100 <main+0x22c>)
  403f68:	6018      	str	r0, [r3, #0]
	xSemaphoreTC = xSemaphoreCreateBinary();
  403f6a:	2203      	movs	r2, #3
  403f6c:	4621      	mov	r1, r4
  403f6e:	2001      	movs	r0, #1
  403f70:	47a8      	blx	r5
  403f72:	4b64      	ldr	r3, [pc, #400]	; (404104 <main+0x230>)
  403f74:	6018      	str	r0, [r3, #0]
	
	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403f76:	9403      	str	r4, [sp, #12]
  403f78:	9402      	str	r4, [sp, #8]
  403f7a:	9401      	str	r4, [sp, #4]
  403f7c:	9400      	str	r4, [sp, #0]
  403f7e:	4623      	mov	r3, r4
  403f80:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403f84:	4960      	ldr	r1, [pc, #384]	; (404108 <main+0x234>)
  403f86:	4861      	ldr	r0, [pc, #388]	; (40410c <main+0x238>)
  403f88:	4c61      	ldr	r4, [pc, #388]	; (404110 <main+0x23c>)
  403f8a:	47a0      	blx	r4
  403f8c:	2801      	cmp	r0, #1
  403f8e:	d002      	beq.n	403f96 <main+0xc2>
		printf("Failed to create oled task\r\n");
  403f90:	4860      	ldr	r0, [pc, #384]	; (404114 <main+0x240>)
  403f92:	4b61      	ldr	r3, [pc, #388]	; (404118 <main+0x244>)
  403f94:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_sensor, "sensor", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403f96:	2300      	movs	r3, #0
  403f98:	9303      	str	r3, [sp, #12]
  403f9a:	9302      	str	r3, [sp, #8]
  403f9c:	9301      	str	r3, [sp, #4]
  403f9e:	9300      	str	r3, [sp, #0]
  403fa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403fa4:	495d      	ldr	r1, [pc, #372]	; (40411c <main+0x248>)
  403fa6:	485e      	ldr	r0, [pc, #376]	; (404120 <main+0x24c>)
  403fa8:	4c59      	ldr	r4, [pc, #356]	; (404110 <main+0x23c>)
  403faa:	47a0      	blx	r4
  403fac:	2801      	cmp	r0, #1
  403fae:	d002      	beq.n	403fb6 <main+0xe2>
		printf("Failed to create sensor task\r\n");
  403fb0:	485c      	ldr	r0, [pc, #368]	; (404124 <main+0x250>)
  403fb2:	4b59      	ldr	r3, [pc, #356]	; (404118 <main+0x244>)
  403fb4:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_rtt, "rtt", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403fb6:	2300      	movs	r3, #0
  403fb8:	9303      	str	r3, [sp, #12]
  403fba:	9302      	str	r3, [sp, #8]
  403fbc:	9301      	str	r3, [sp, #4]
  403fbe:	9300      	str	r3, [sp, #0]
  403fc0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403fc4:	4958      	ldr	r1, [pc, #352]	; (404128 <main+0x254>)
  403fc6:	4859      	ldr	r0, [pc, #356]	; (40412c <main+0x258>)
  403fc8:	4c51      	ldr	r4, [pc, #324]	; (404110 <main+0x23c>)
  403fca:	47a0      	blx	r4
  403fcc:	2801      	cmp	r0, #1
  403fce:	d002      	beq.n	403fd6 <main+0x102>
		printf("Failed to create rtt task\r\n");
  403fd0:	4857      	ldr	r0, [pc, #348]	; (404130 <main+0x25c>)
  403fd2:	4b51      	ldr	r3, [pc, #324]	; (404118 <main+0x244>)
  403fd4:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_tc, "tc", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403fd6:	2300      	movs	r3, #0
  403fd8:	9303      	str	r3, [sp, #12]
  403fda:	9302      	str	r3, [sp, #8]
  403fdc:	9301      	str	r3, [sp, #4]
  403fde:	9300      	str	r3, [sp, #0]
  403fe0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403fe4:	4953      	ldr	r1, [pc, #332]	; (404134 <main+0x260>)
  403fe6:	4854      	ldr	r0, [pc, #336]	; (404138 <main+0x264>)
  403fe8:	4c49      	ldr	r4, [pc, #292]	; (404110 <main+0x23c>)
  403fea:	47a0      	blx	r4
  403fec:	2801      	cmp	r0, #1
  403fee:	d002      	beq.n	403ff6 <main+0x122>
		printf("Failed to create tc task\r\n");
  403ff0:	4852      	ldr	r0, [pc, #328]	; (40413c <main+0x268>)
  403ff2:	4b49      	ldr	r3, [pc, #292]	; (404118 <main+0x244>)
  403ff4:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_rtc, "rtc", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403ff6:	2300      	movs	r3, #0
  403ff8:	9303      	str	r3, [sp, #12]
  403ffa:	9302      	str	r3, [sp, #8]
  403ffc:	9301      	str	r3, [sp, #4]
  403ffe:	9300      	str	r3, [sp, #0]
  404000:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404004:	494e      	ldr	r1, [pc, #312]	; (404140 <main+0x26c>)
  404006:	484f      	ldr	r0, [pc, #316]	; (404144 <main+0x270>)
  404008:	4c41      	ldr	r4, [pc, #260]	; (404110 <main+0x23c>)
  40400a:	47a0      	blx	r4
  40400c:	2801      	cmp	r0, #1
  40400e:	d002      	beq.n	404016 <main+0x142>
		printf("Failed to create rtc task\r\n");
  404010:	484d      	ldr	r0, [pc, #308]	; (404148 <main+0x274>)
  404012:	4b41      	ldr	r3, [pc, #260]	; (404118 <main+0x244>)
  404014:	4798      	blx	r3
	}
	
	if (xSemaphoreRTT == NULL){
  404016:	4b39      	ldr	r3, [pc, #228]	; (4040fc <main+0x228>)
  404018:	681b      	ldr	r3, [r3, #0]
  40401a:	2b00      	cmp	r3, #0
  40401c:	d03b      	beq.n	404096 <main+0x1c2>
		printf("Failed to create semaphore RTT\n");
	}
	if (xSemaphoreTC == NULL){
  40401e:	4b39      	ldr	r3, [pc, #228]	; (404104 <main+0x230>)
  404020:	681b      	ldr	r3, [r3, #0]
  404022:	2b00      	cmp	r3, #0
  404024:	d03b      	beq.n	40409e <main+0x1ca>
		printf("Failed to create semaphore TC\n");
	}
	if (xSemaphoreRTC == NULL){
  404026:	4b36      	ldr	r3, [pc, #216]	; (404100 <main+0x22c>)
  404028:	681b      	ldr	r3, [r3, #0]
  40402a:	2b00      	cmp	r3, #0
  40402c:	d03b      	beq.n	4040a6 <main+0x1d2>

		printf("Failed to create semaphore RTC\n");
	}

	TC_init(TC2, ID_TC7, 1, 4);
  40402e:	4c47      	ldr	r4, [pc, #284]	; (40414c <main+0x278>)
  404030:	2304      	movs	r3, #4
  404032:	2201      	movs	r2, #1
  404034:	2130      	movs	r1, #48	; 0x30
  404036:	4620      	mov	r0, r4
  404038:	4e45      	ldr	r6, [pc, #276]	; (404150 <main+0x27c>)
  40403a:	47b0      	blx	r6
	tc_start(TC2, 1);
  40403c:	2101      	movs	r1, #1
  40403e:	4620      	mov	r0, r4
  404040:	4c44      	ldr	r4, [pc, #272]	; (404154 <main+0x280>)
  404042:	47a0      	blx	r4
	
	TC_init(TC1, ID_TC4, 1, 4);
  404044:	4d44      	ldr	r5, [pc, #272]	; (404158 <main+0x284>)
  404046:	2304      	movs	r3, #4
  404048:	2201      	movs	r2, #1
  40404a:	211b      	movs	r1, #27
  40404c:	4628      	mov	r0, r5
  40404e:	47b0      	blx	r6
	tc_start(TC1, 1);
  404050:	2101      	movs	r1, #1
  404052:	4628      	mov	r0, r5
  404054:	47a0      	blx	r4
	
	
	RTT_init(4, 16, RTT_MR_ALMIEN);
  404056:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40405a:	2010      	movs	r0, #16
  40405c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  404060:	4b3e      	ldr	r3, [pc, #248]	; (40415c <main+0x288>)
  404062:	4798      	blx	r3
	calendar rtc_initial = {2023, 4, 24, 17, 8, 55 ,1};
  404064:	ac0d      	add	r4, sp, #52	; 0x34
  404066:	4d3e      	ldr	r5, [pc, #248]	; (404160 <main+0x28c>)
  404068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40406a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40406c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  404070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_SECEN);
  404074:	2304      	movs	r3, #4
  404076:	9305      	str	r3, [sp, #20]
  404078:	466c      	mov	r4, sp
  40407a:	ad0f      	add	r5, sp, #60	; 0x3c
  40407c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40407e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404080:	682b      	ldr	r3, [r5, #0]
  404082:	6023      	str	r3, [r4, #0]
  404084:	ab0d      	add	r3, sp, #52	; 0x34
  404086:	cb0c      	ldmia	r3, {r2, r3}
  404088:	2102      	movs	r1, #2
  40408a:	4836      	ldr	r0, [pc, #216]	; (404164 <main+0x290>)
  40408c:	4c36      	ldr	r4, [pc, #216]	; (404168 <main+0x294>)
  40408e:	47a0      	blx	r4
	/* Start the scheduler. */
	vTaskStartScheduler();
  404090:	4b36      	ldr	r3, [pc, #216]	; (40416c <main+0x298>)
  404092:	4798      	blx	r3
  404094:	e7fe      	b.n	404094 <main+0x1c0>
		printf("Failed to create semaphore RTT\n");
  404096:	4836      	ldr	r0, [pc, #216]	; (404170 <main+0x29c>)
  404098:	4b1f      	ldr	r3, [pc, #124]	; (404118 <main+0x244>)
  40409a:	4798      	blx	r3
  40409c:	e7bf      	b.n	40401e <main+0x14a>
		printf("Failed to create semaphore TC\n");
  40409e:	4835      	ldr	r0, [pc, #212]	; (404174 <main+0x2a0>)
  4040a0:	4b1d      	ldr	r3, [pc, #116]	; (404118 <main+0x244>)
  4040a2:	4798      	blx	r3
  4040a4:	e7bf      	b.n	404026 <main+0x152>
		printf("Failed to create semaphore RTC\n");
  4040a6:	4834      	ldr	r0, [pc, #208]	; (404178 <main+0x2a4>)
  4040a8:	4b1b      	ldr	r3, [pc, #108]	; (404118 <main+0x244>)
  4040aa:	4798      	blx	r3
  4040ac:	e7bf      	b.n	40402e <main+0x15a>
  4040ae:	bf00      	nop
  4040b0:	00400bc1 	.word	0x00400bc1
  4040b4:	00400cbd 	.word	0x00400cbd
  4040b8:	00403df5 	.word	0x00403df5
  4040bc:	00403e65 	.word	0x00403e65
  4040c0:	40028000 	.word	0x40028000
  4040c4:	20400e00 	.word	0x20400e00
  4040c8:	00403939 	.word	0x00403939
  4040cc:	20400dfc 	.word	0x20400dfc
  4040d0:	0040385d 	.word	0x0040385d
  4040d4:	20400df8 	.word	0x20400df8
  4040d8:	00401261 	.word	0x00401261
  4040dc:	08f0d180 	.word	0x08f0d180
  4040e0:	00401635 	.word	0x00401635
  4040e4:	00401689 	.word	0x00401689
  4040e8:	0040168f 	.word	0x0040168f
  4040ec:	20400028 	.word	0x20400028
  4040f0:	00404a2d 	.word	0x00404a2d
  4040f4:	400e1850 	.word	0x400e1850
  4040f8:	00401fe1 	.word	0x00401fe1
  4040fc:	20400e5c 	.word	0x20400e5c
  404100:	20400e58 	.word	0x20400e58
  404104:	20400e64 	.word	0x20400e64
  404108:	0040b328 	.word	0x0040b328
  40410c:	0040378d 	.word	0x0040378d
  404110:	00402701 	.word	0x00402701
  404114:	0040b330 	.word	0x0040b330
  404118:	004049f9 	.word	0x004049f9
  40411c:	0040b34c 	.word	0x0040b34c
  404120:	0040377d 	.word	0x0040377d
  404124:	0040b354 	.word	0x0040b354
  404128:	0040b374 	.word	0x0040b374
  40412c:	00403dad 	.word	0x00403dad
  404130:	0040b378 	.word	0x0040b378
  404134:	0040b394 	.word	0x0040b394
  404138:	00403d79 	.word	0x00403d79
  40413c:	0040b398 	.word	0x0040b398
  404140:	0040b3b4 	.word	0x0040b3b4
  404144:	00403d45 	.word	0x00403d45
  404148:	0040b3b8 	.word	0x0040b3b8
  40414c:	40014000 	.word	0x40014000
  404150:	00403b6d 	.word	0x00403b6d
  404154:	00400599 	.word	0x00400599
  404158:	40010000 	.word	0x40010000
  40415c:	004036c5 	.word	0x004036c5
  404160:	0040b30c 	.word	0x0040b30c
  404164:	400e1860 	.word	0x400e1860
  404168:	00403c25 	.word	0x00403c25
  40416c:	00402935 	.word	0x00402935
  404170:	0040b3d4 	.word	0x0040b3d4
  404174:	0040b3f4 	.word	0x0040b3f4
  404178:	0040b414 	.word	0x0040b414

0040417c <__libc_init_array>:
  40417c:	b570      	push	{r4, r5, r6, lr}
  40417e:	4e0f      	ldr	r6, [pc, #60]	; (4041bc <__libc_init_array+0x40>)
  404180:	4d0f      	ldr	r5, [pc, #60]	; (4041c0 <__libc_init_array+0x44>)
  404182:	1b76      	subs	r6, r6, r5
  404184:	10b6      	asrs	r6, r6, #2
  404186:	bf18      	it	ne
  404188:	2400      	movne	r4, #0
  40418a:	d005      	beq.n	404198 <__libc_init_array+0x1c>
  40418c:	3401      	adds	r4, #1
  40418e:	f855 3b04 	ldr.w	r3, [r5], #4
  404192:	4798      	blx	r3
  404194:	42a6      	cmp	r6, r4
  404196:	d1f9      	bne.n	40418c <__libc_init_array+0x10>
  404198:	4e0a      	ldr	r6, [pc, #40]	; (4041c4 <__libc_init_array+0x48>)
  40419a:	4d0b      	ldr	r5, [pc, #44]	; (4041c8 <__libc_init_array+0x4c>)
  40419c:	1b76      	subs	r6, r6, r5
  40419e:	f007 faad 	bl	40b6fc <_init>
  4041a2:	10b6      	asrs	r6, r6, #2
  4041a4:	bf18      	it	ne
  4041a6:	2400      	movne	r4, #0
  4041a8:	d006      	beq.n	4041b8 <__libc_init_array+0x3c>
  4041aa:	3401      	adds	r4, #1
  4041ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4041b0:	4798      	blx	r3
  4041b2:	42a6      	cmp	r6, r4
  4041b4:	d1f9      	bne.n	4041aa <__libc_init_array+0x2e>
  4041b6:	bd70      	pop	{r4, r5, r6, pc}
  4041b8:	bd70      	pop	{r4, r5, r6, pc}
  4041ba:	bf00      	nop
  4041bc:	0040b708 	.word	0x0040b708
  4041c0:	0040b708 	.word	0x0040b708
  4041c4:	0040b710 	.word	0x0040b710
  4041c8:	0040b708 	.word	0x0040b708

004041cc <malloc>:
  4041cc:	4b02      	ldr	r3, [pc, #8]	; (4041d8 <malloc+0xc>)
  4041ce:	4601      	mov	r1, r0
  4041d0:	6818      	ldr	r0, [r3, #0]
  4041d2:	f000 b80b 	b.w	4041ec <_malloc_r>
  4041d6:	bf00      	nop
  4041d8:	20400028 	.word	0x20400028

004041dc <free>:
  4041dc:	4b02      	ldr	r3, [pc, #8]	; (4041e8 <free+0xc>)
  4041de:	4601      	mov	r1, r0
  4041e0:	6818      	ldr	r0, [r3, #0]
  4041e2:	f004 bd05 	b.w	408bf0 <_free_r>
  4041e6:	bf00      	nop
  4041e8:	20400028 	.word	0x20400028

004041ec <_malloc_r>:
  4041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041f0:	f101 060b 	add.w	r6, r1, #11
  4041f4:	2e16      	cmp	r6, #22
  4041f6:	b083      	sub	sp, #12
  4041f8:	4605      	mov	r5, r0
  4041fa:	f240 809e 	bls.w	40433a <_malloc_r+0x14e>
  4041fe:	f036 0607 	bics.w	r6, r6, #7
  404202:	f100 80bd 	bmi.w	404380 <_malloc_r+0x194>
  404206:	42b1      	cmp	r1, r6
  404208:	f200 80ba 	bhi.w	404380 <_malloc_r+0x194>
  40420c:	f000 fb86 	bl	40491c <__malloc_lock>
  404210:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404214:	f0c0 8293 	bcc.w	40473e <_malloc_r+0x552>
  404218:	0a73      	lsrs	r3, r6, #9
  40421a:	f000 80b8 	beq.w	40438e <_malloc_r+0x1a2>
  40421e:	2b04      	cmp	r3, #4
  404220:	f200 8179 	bhi.w	404516 <_malloc_r+0x32a>
  404224:	09b3      	lsrs	r3, r6, #6
  404226:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40422a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40422e:	00c3      	lsls	r3, r0, #3
  404230:	4fbf      	ldr	r7, [pc, #764]	; (404530 <_malloc_r+0x344>)
  404232:	443b      	add	r3, r7
  404234:	f1a3 0108 	sub.w	r1, r3, #8
  404238:	685c      	ldr	r4, [r3, #4]
  40423a:	42a1      	cmp	r1, r4
  40423c:	d106      	bne.n	40424c <_malloc_r+0x60>
  40423e:	e00c      	b.n	40425a <_malloc_r+0x6e>
  404240:	2a00      	cmp	r2, #0
  404242:	f280 80aa 	bge.w	40439a <_malloc_r+0x1ae>
  404246:	68e4      	ldr	r4, [r4, #12]
  404248:	42a1      	cmp	r1, r4
  40424a:	d006      	beq.n	40425a <_malloc_r+0x6e>
  40424c:	6863      	ldr	r3, [r4, #4]
  40424e:	f023 0303 	bic.w	r3, r3, #3
  404252:	1b9a      	subs	r2, r3, r6
  404254:	2a0f      	cmp	r2, #15
  404256:	ddf3      	ble.n	404240 <_malloc_r+0x54>
  404258:	4670      	mov	r0, lr
  40425a:	693c      	ldr	r4, [r7, #16]
  40425c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404544 <_malloc_r+0x358>
  404260:	4574      	cmp	r4, lr
  404262:	f000 81ab 	beq.w	4045bc <_malloc_r+0x3d0>
  404266:	6863      	ldr	r3, [r4, #4]
  404268:	f023 0303 	bic.w	r3, r3, #3
  40426c:	1b9a      	subs	r2, r3, r6
  40426e:	2a0f      	cmp	r2, #15
  404270:	f300 8190 	bgt.w	404594 <_malloc_r+0x3a8>
  404274:	2a00      	cmp	r2, #0
  404276:	f8c7 e014 	str.w	lr, [r7, #20]
  40427a:	f8c7 e010 	str.w	lr, [r7, #16]
  40427e:	f280 809d 	bge.w	4043bc <_malloc_r+0x1d0>
  404282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404286:	f080 8161 	bcs.w	40454c <_malloc_r+0x360>
  40428a:	08db      	lsrs	r3, r3, #3
  40428c:	f103 0c01 	add.w	ip, r3, #1
  404290:	1099      	asrs	r1, r3, #2
  404292:	687a      	ldr	r2, [r7, #4]
  404294:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404298:	f8c4 8008 	str.w	r8, [r4, #8]
  40429c:	2301      	movs	r3, #1
  40429e:	408b      	lsls	r3, r1
  4042a0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4042a4:	4313      	orrs	r3, r2
  4042a6:	3908      	subs	r1, #8
  4042a8:	60e1      	str	r1, [r4, #12]
  4042aa:	607b      	str	r3, [r7, #4]
  4042ac:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4042b0:	f8c8 400c 	str.w	r4, [r8, #12]
  4042b4:	1082      	asrs	r2, r0, #2
  4042b6:	2401      	movs	r4, #1
  4042b8:	4094      	lsls	r4, r2
  4042ba:	429c      	cmp	r4, r3
  4042bc:	f200 808b 	bhi.w	4043d6 <_malloc_r+0x1ea>
  4042c0:	421c      	tst	r4, r3
  4042c2:	d106      	bne.n	4042d2 <_malloc_r+0xe6>
  4042c4:	f020 0003 	bic.w	r0, r0, #3
  4042c8:	0064      	lsls	r4, r4, #1
  4042ca:	421c      	tst	r4, r3
  4042cc:	f100 0004 	add.w	r0, r0, #4
  4042d0:	d0fa      	beq.n	4042c8 <_malloc_r+0xdc>
  4042d2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4042d6:	46cc      	mov	ip, r9
  4042d8:	4680      	mov	r8, r0
  4042da:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4042de:	459c      	cmp	ip, r3
  4042e0:	d107      	bne.n	4042f2 <_malloc_r+0x106>
  4042e2:	e16d      	b.n	4045c0 <_malloc_r+0x3d4>
  4042e4:	2a00      	cmp	r2, #0
  4042e6:	f280 817b 	bge.w	4045e0 <_malloc_r+0x3f4>
  4042ea:	68db      	ldr	r3, [r3, #12]
  4042ec:	459c      	cmp	ip, r3
  4042ee:	f000 8167 	beq.w	4045c0 <_malloc_r+0x3d4>
  4042f2:	6859      	ldr	r1, [r3, #4]
  4042f4:	f021 0103 	bic.w	r1, r1, #3
  4042f8:	1b8a      	subs	r2, r1, r6
  4042fa:	2a0f      	cmp	r2, #15
  4042fc:	ddf2      	ble.n	4042e4 <_malloc_r+0xf8>
  4042fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404302:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404306:	9300      	str	r3, [sp, #0]
  404308:	199c      	adds	r4, r3, r6
  40430a:	4628      	mov	r0, r5
  40430c:	f046 0601 	orr.w	r6, r6, #1
  404310:	f042 0501 	orr.w	r5, r2, #1
  404314:	605e      	str	r6, [r3, #4]
  404316:	f8c8 c00c 	str.w	ip, [r8, #12]
  40431a:	f8cc 8008 	str.w	r8, [ip, #8]
  40431e:	617c      	str	r4, [r7, #20]
  404320:	613c      	str	r4, [r7, #16]
  404322:	f8c4 e00c 	str.w	lr, [r4, #12]
  404326:	f8c4 e008 	str.w	lr, [r4, #8]
  40432a:	6065      	str	r5, [r4, #4]
  40432c:	505a      	str	r2, [r3, r1]
  40432e:	f000 fafb 	bl	404928 <__malloc_unlock>
  404332:	9b00      	ldr	r3, [sp, #0]
  404334:	f103 0408 	add.w	r4, r3, #8
  404338:	e01e      	b.n	404378 <_malloc_r+0x18c>
  40433a:	2910      	cmp	r1, #16
  40433c:	d820      	bhi.n	404380 <_malloc_r+0x194>
  40433e:	f000 faed 	bl	40491c <__malloc_lock>
  404342:	2610      	movs	r6, #16
  404344:	2318      	movs	r3, #24
  404346:	2002      	movs	r0, #2
  404348:	4f79      	ldr	r7, [pc, #484]	; (404530 <_malloc_r+0x344>)
  40434a:	443b      	add	r3, r7
  40434c:	f1a3 0208 	sub.w	r2, r3, #8
  404350:	685c      	ldr	r4, [r3, #4]
  404352:	4294      	cmp	r4, r2
  404354:	f000 813d 	beq.w	4045d2 <_malloc_r+0x3e6>
  404358:	6863      	ldr	r3, [r4, #4]
  40435a:	68e1      	ldr	r1, [r4, #12]
  40435c:	68a6      	ldr	r6, [r4, #8]
  40435e:	f023 0303 	bic.w	r3, r3, #3
  404362:	4423      	add	r3, r4
  404364:	4628      	mov	r0, r5
  404366:	685a      	ldr	r2, [r3, #4]
  404368:	60f1      	str	r1, [r6, #12]
  40436a:	f042 0201 	orr.w	r2, r2, #1
  40436e:	608e      	str	r6, [r1, #8]
  404370:	605a      	str	r2, [r3, #4]
  404372:	f000 fad9 	bl	404928 <__malloc_unlock>
  404376:	3408      	adds	r4, #8
  404378:	4620      	mov	r0, r4
  40437a:	b003      	add	sp, #12
  40437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404380:	2400      	movs	r4, #0
  404382:	230c      	movs	r3, #12
  404384:	4620      	mov	r0, r4
  404386:	602b      	str	r3, [r5, #0]
  404388:	b003      	add	sp, #12
  40438a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40438e:	2040      	movs	r0, #64	; 0x40
  404390:	f44f 7300 	mov.w	r3, #512	; 0x200
  404394:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404398:	e74a      	b.n	404230 <_malloc_r+0x44>
  40439a:	4423      	add	r3, r4
  40439c:	68e1      	ldr	r1, [r4, #12]
  40439e:	685a      	ldr	r2, [r3, #4]
  4043a0:	68a6      	ldr	r6, [r4, #8]
  4043a2:	f042 0201 	orr.w	r2, r2, #1
  4043a6:	60f1      	str	r1, [r6, #12]
  4043a8:	4628      	mov	r0, r5
  4043aa:	608e      	str	r6, [r1, #8]
  4043ac:	605a      	str	r2, [r3, #4]
  4043ae:	f000 fabb 	bl	404928 <__malloc_unlock>
  4043b2:	3408      	adds	r4, #8
  4043b4:	4620      	mov	r0, r4
  4043b6:	b003      	add	sp, #12
  4043b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043bc:	4423      	add	r3, r4
  4043be:	4628      	mov	r0, r5
  4043c0:	685a      	ldr	r2, [r3, #4]
  4043c2:	f042 0201 	orr.w	r2, r2, #1
  4043c6:	605a      	str	r2, [r3, #4]
  4043c8:	f000 faae 	bl	404928 <__malloc_unlock>
  4043cc:	3408      	adds	r4, #8
  4043ce:	4620      	mov	r0, r4
  4043d0:	b003      	add	sp, #12
  4043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043d6:	68bc      	ldr	r4, [r7, #8]
  4043d8:	6863      	ldr	r3, [r4, #4]
  4043da:	f023 0803 	bic.w	r8, r3, #3
  4043de:	45b0      	cmp	r8, r6
  4043e0:	d304      	bcc.n	4043ec <_malloc_r+0x200>
  4043e2:	eba8 0306 	sub.w	r3, r8, r6
  4043e6:	2b0f      	cmp	r3, #15
  4043e8:	f300 8085 	bgt.w	4044f6 <_malloc_r+0x30a>
  4043ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404548 <_malloc_r+0x35c>
  4043f0:	4b50      	ldr	r3, [pc, #320]	; (404534 <_malloc_r+0x348>)
  4043f2:	f8d9 2000 	ldr.w	r2, [r9]
  4043f6:	681b      	ldr	r3, [r3, #0]
  4043f8:	3201      	adds	r2, #1
  4043fa:	4433      	add	r3, r6
  4043fc:	eb04 0a08 	add.w	sl, r4, r8
  404400:	f000 8155 	beq.w	4046ae <_malloc_r+0x4c2>
  404404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404408:	330f      	adds	r3, #15
  40440a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40440e:	f02b 0b0f 	bic.w	fp, fp, #15
  404412:	4659      	mov	r1, fp
  404414:	4628      	mov	r0, r5
  404416:	f000 faf7 	bl	404a08 <_sbrk_r>
  40441a:	1c41      	adds	r1, r0, #1
  40441c:	4602      	mov	r2, r0
  40441e:	f000 80fc 	beq.w	40461a <_malloc_r+0x42e>
  404422:	4582      	cmp	sl, r0
  404424:	f200 80f7 	bhi.w	404616 <_malloc_r+0x42a>
  404428:	4b43      	ldr	r3, [pc, #268]	; (404538 <_malloc_r+0x34c>)
  40442a:	6819      	ldr	r1, [r3, #0]
  40442c:	4459      	add	r1, fp
  40442e:	6019      	str	r1, [r3, #0]
  404430:	f000 814d 	beq.w	4046ce <_malloc_r+0x4e2>
  404434:	f8d9 0000 	ldr.w	r0, [r9]
  404438:	3001      	adds	r0, #1
  40443a:	bf1b      	ittet	ne
  40443c:	eba2 0a0a 	subne.w	sl, r2, sl
  404440:	4451      	addne	r1, sl
  404442:	f8c9 2000 	streq.w	r2, [r9]
  404446:	6019      	strne	r1, [r3, #0]
  404448:	f012 0107 	ands.w	r1, r2, #7
  40444c:	f000 8115 	beq.w	40467a <_malloc_r+0x48e>
  404450:	f1c1 0008 	rsb	r0, r1, #8
  404454:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404458:	4402      	add	r2, r0
  40445a:	3108      	adds	r1, #8
  40445c:	eb02 090b 	add.w	r9, r2, fp
  404460:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404464:	eba1 0909 	sub.w	r9, r1, r9
  404468:	4649      	mov	r1, r9
  40446a:	4628      	mov	r0, r5
  40446c:	9301      	str	r3, [sp, #4]
  40446e:	9200      	str	r2, [sp, #0]
  404470:	f000 faca 	bl	404a08 <_sbrk_r>
  404474:	1c43      	adds	r3, r0, #1
  404476:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40447a:	f000 8143 	beq.w	404704 <_malloc_r+0x518>
  40447e:	1a80      	subs	r0, r0, r2
  404480:	4448      	add	r0, r9
  404482:	f040 0001 	orr.w	r0, r0, #1
  404486:	6819      	ldr	r1, [r3, #0]
  404488:	60ba      	str	r2, [r7, #8]
  40448a:	4449      	add	r1, r9
  40448c:	42bc      	cmp	r4, r7
  40448e:	6050      	str	r0, [r2, #4]
  404490:	6019      	str	r1, [r3, #0]
  404492:	d017      	beq.n	4044c4 <_malloc_r+0x2d8>
  404494:	f1b8 0f0f 	cmp.w	r8, #15
  404498:	f240 80fb 	bls.w	404692 <_malloc_r+0x4a6>
  40449c:	6860      	ldr	r0, [r4, #4]
  40449e:	f1a8 020c 	sub.w	r2, r8, #12
  4044a2:	f022 0207 	bic.w	r2, r2, #7
  4044a6:	eb04 0e02 	add.w	lr, r4, r2
  4044aa:	f000 0001 	and.w	r0, r0, #1
  4044ae:	f04f 0c05 	mov.w	ip, #5
  4044b2:	4310      	orrs	r0, r2
  4044b4:	2a0f      	cmp	r2, #15
  4044b6:	6060      	str	r0, [r4, #4]
  4044b8:	f8ce c004 	str.w	ip, [lr, #4]
  4044bc:	f8ce c008 	str.w	ip, [lr, #8]
  4044c0:	f200 8117 	bhi.w	4046f2 <_malloc_r+0x506>
  4044c4:	4b1d      	ldr	r3, [pc, #116]	; (40453c <_malloc_r+0x350>)
  4044c6:	68bc      	ldr	r4, [r7, #8]
  4044c8:	681a      	ldr	r2, [r3, #0]
  4044ca:	4291      	cmp	r1, r2
  4044cc:	bf88      	it	hi
  4044ce:	6019      	strhi	r1, [r3, #0]
  4044d0:	4b1b      	ldr	r3, [pc, #108]	; (404540 <_malloc_r+0x354>)
  4044d2:	681a      	ldr	r2, [r3, #0]
  4044d4:	4291      	cmp	r1, r2
  4044d6:	6862      	ldr	r2, [r4, #4]
  4044d8:	bf88      	it	hi
  4044da:	6019      	strhi	r1, [r3, #0]
  4044dc:	f022 0203 	bic.w	r2, r2, #3
  4044e0:	4296      	cmp	r6, r2
  4044e2:	eba2 0306 	sub.w	r3, r2, r6
  4044e6:	d801      	bhi.n	4044ec <_malloc_r+0x300>
  4044e8:	2b0f      	cmp	r3, #15
  4044ea:	dc04      	bgt.n	4044f6 <_malloc_r+0x30a>
  4044ec:	4628      	mov	r0, r5
  4044ee:	f000 fa1b 	bl	404928 <__malloc_unlock>
  4044f2:	2400      	movs	r4, #0
  4044f4:	e740      	b.n	404378 <_malloc_r+0x18c>
  4044f6:	19a2      	adds	r2, r4, r6
  4044f8:	f043 0301 	orr.w	r3, r3, #1
  4044fc:	f046 0601 	orr.w	r6, r6, #1
  404500:	6066      	str	r6, [r4, #4]
  404502:	4628      	mov	r0, r5
  404504:	60ba      	str	r2, [r7, #8]
  404506:	6053      	str	r3, [r2, #4]
  404508:	f000 fa0e 	bl	404928 <__malloc_unlock>
  40450c:	3408      	adds	r4, #8
  40450e:	4620      	mov	r0, r4
  404510:	b003      	add	sp, #12
  404512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404516:	2b14      	cmp	r3, #20
  404518:	d971      	bls.n	4045fe <_malloc_r+0x412>
  40451a:	2b54      	cmp	r3, #84	; 0x54
  40451c:	f200 80a3 	bhi.w	404666 <_malloc_r+0x47a>
  404520:	0b33      	lsrs	r3, r6, #12
  404522:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404526:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40452a:	00c3      	lsls	r3, r0, #3
  40452c:	e680      	b.n	404230 <_malloc_r+0x44>
  40452e:	bf00      	nop
  404530:	20400458 	.word	0x20400458
  404534:	20400df4 	.word	0x20400df4
  404538:	20400dc4 	.word	0x20400dc4
  40453c:	20400dec 	.word	0x20400dec
  404540:	20400df0 	.word	0x20400df0
  404544:	20400460 	.word	0x20400460
  404548:	20400860 	.word	0x20400860
  40454c:	0a5a      	lsrs	r2, r3, #9
  40454e:	2a04      	cmp	r2, #4
  404550:	d95b      	bls.n	40460a <_malloc_r+0x41e>
  404552:	2a14      	cmp	r2, #20
  404554:	f200 80ae 	bhi.w	4046b4 <_malloc_r+0x4c8>
  404558:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40455c:	00c9      	lsls	r1, r1, #3
  40455e:	325b      	adds	r2, #91	; 0x5b
  404560:	eb07 0c01 	add.w	ip, r7, r1
  404564:	5879      	ldr	r1, [r7, r1]
  404566:	f1ac 0c08 	sub.w	ip, ip, #8
  40456a:	458c      	cmp	ip, r1
  40456c:	f000 8088 	beq.w	404680 <_malloc_r+0x494>
  404570:	684a      	ldr	r2, [r1, #4]
  404572:	f022 0203 	bic.w	r2, r2, #3
  404576:	4293      	cmp	r3, r2
  404578:	d273      	bcs.n	404662 <_malloc_r+0x476>
  40457a:	6889      	ldr	r1, [r1, #8]
  40457c:	458c      	cmp	ip, r1
  40457e:	d1f7      	bne.n	404570 <_malloc_r+0x384>
  404580:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404584:	687b      	ldr	r3, [r7, #4]
  404586:	60e2      	str	r2, [r4, #12]
  404588:	f8c4 c008 	str.w	ip, [r4, #8]
  40458c:	6094      	str	r4, [r2, #8]
  40458e:	f8cc 400c 	str.w	r4, [ip, #12]
  404592:	e68f      	b.n	4042b4 <_malloc_r+0xc8>
  404594:	19a1      	adds	r1, r4, r6
  404596:	f046 0c01 	orr.w	ip, r6, #1
  40459a:	f042 0601 	orr.w	r6, r2, #1
  40459e:	f8c4 c004 	str.w	ip, [r4, #4]
  4045a2:	4628      	mov	r0, r5
  4045a4:	6179      	str	r1, [r7, #20]
  4045a6:	6139      	str	r1, [r7, #16]
  4045a8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4045ac:	f8c1 e008 	str.w	lr, [r1, #8]
  4045b0:	604e      	str	r6, [r1, #4]
  4045b2:	50e2      	str	r2, [r4, r3]
  4045b4:	f000 f9b8 	bl	404928 <__malloc_unlock>
  4045b8:	3408      	adds	r4, #8
  4045ba:	e6dd      	b.n	404378 <_malloc_r+0x18c>
  4045bc:	687b      	ldr	r3, [r7, #4]
  4045be:	e679      	b.n	4042b4 <_malloc_r+0xc8>
  4045c0:	f108 0801 	add.w	r8, r8, #1
  4045c4:	f018 0f03 	tst.w	r8, #3
  4045c8:	f10c 0c08 	add.w	ip, ip, #8
  4045cc:	f47f ae85 	bne.w	4042da <_malloc_r+0xee>
  4045d0:	e02d      	b.n	40462e <_malloc_r+0x442>
  4045d2:	68dc      	ldr	r4, [r3, #12]
  4045d4:	42a3      	cmp	r3, r4
  4045d6:	bf08      	it	eq
  4045d8:	3002      	addeq	r0, #2
  4045da:	f43f ae3e 	beq.w	40425a <_malloc_r+0x6e>
  4045de:	e6bb      	b.n	404358 <_malloc_r+0x16c>
  4045e0:	4419      	add	r1, r3
  4045e2:	461c      	mov	r4, r3
  4045e4:	684a      	ldr	r2, [r1, #4]
  4045e6:	68db      	ldr	r3, [r3, #12]
  4045e8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4045ec:	f042 0201 	orr.w	r2, r2, #1
  4045f0:	604a      	str	r2, [r1, #4]
  4045f2:	4628      	mov	r0, r5
  4045f4:	60f3      	str	r3, [r6, #12]
  4045f6:	609e      	str	r6, [r3, #8]
  4045f8:	f000 f996 	bl	404928 <__malloc_unlock>
  4045fc:	e6bc      	b.n	404378 <_malloc_r+0x18c>
  4045fe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404602:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404606:	00c3      	lsls	r3, r0, #3
  404608:	e612      	b.n	404230 <_malloc_r+0x44>
  40460a:	099a      	lsrs	r2, r3, #6
  40460c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404610:	00c9      	lsls	r1, r1, #3
  404612:	3238      	adds	r2, #56	; 0x38
  404614:	e7a4      	b.n	404560 <_malloc_r+0x374>
  404616:	42bc      	cmp	r4, r7
  404618:	d054      	beq.n	4046c4 <_malloc_r+0x4d8>
  40461a:	68bc      	ldr	r4, [r7, #8]
  40461c:	6862      	ldr	r2, [r4, #4]
  40461e:	f022 0203 	bic.w	r2, r2, #3
  404622:	e75d      	b.n	4044e0 <_malloc_r+0x2f4>
  404624:	f859 3908 	ldr.w	r3, [r9], #-8
  404628:	4599      	cmp	r9, r3
  40462a:	f040 8086 	bne.w	40473a <_malloc_r+0x54e>
  40462e:	f010 0f03 	tst.w	r0, #3
  404632:	f100 30ff 	add.w	r0, r0, #4294967295
  404636:	d1f5      	bne.n	404624 <_malloc_r+0x438>
  404638:	687b      	ldr	r3, [r7, #4]
  40463a:	ea23 0304 	bic.w	r3, r3, r4
  40463e:	607b      	str	r3, [r7, #4]
  404640:	0064      	lsls	r4, r4, #1
  404642:	429c      	cmp	r4, r3
  404644:	f63f aec7 	bhi.w	4043d6 <_malloc_r+0x1ea>
  404648:	2c00      	cmp	r4, #0
  40464a:	f43f aec4 	beq.w	4043d6 <_malloc_r+0x1ea>
  40464e:	421c      	tst	r4, r3
  404650:	4640      	mov	r0, r8
  404652:	f47f ae3e 	bne.w	4042d2 <_malloc_r+0xe6>
  404656:	0064      	lsls	r4, r4, #1
  404658:	421c      	tst	r4, r3
  40465a:	f100 0004 	add.w	r0, r0, #4
  40465e:	d0fa      	beq.n	404656 <_malloc_r+0x46a>
  404660:	e637      	b.n	4042d2 <_malloc_r+0xe6>
  404662:	468c      	mov	ip, r1
  404664:	e78c      	b.n	404580 <_malloc_r+0x394>
  404666:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40466a:	d815      	bhi.n	404698 <_malloc_r+0x4ac>
  40466c:	0bf3      	lsrs	r3, r6, #15
  40466e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404672:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404676:	00c3      	lsls	r3, r0, #3
  404678:	e5da      	b.n	404230 <_malloc_r+0x44>
  40467a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40467e:	e6ed      	b.n	40445c <_malloc_r+0x270>
  404680:	687b      	ldr	r3, [r7, #4]
  404682:	1092      	asrs	r2, r2, #2
  404684:	2101      	movs	r1, #1
  404686:	fa01 f202 	lsl.w	r2, r1, r2
  40468a:	4313      	orrs	r3, r2
  40468c:	607b      	str	r3, [r7, #4]
  40468e:	4662      	mov	r2, ip
  404690:	e779      	b.n	404586 <_malloc_r+0x39a>
  404692:	2301      	movs	r3, #1
  404694:	6053      	str	r3, [r2, #4]
  404696:	e729      	b.n	4044ec <_malloc_r+0x300>
  404698:	f240 5254 	movw	r2, #1364	; 0x554
  40469c:	4293      	cmp	r3, r2
  40469e:	d822      	bhi.n	4046e6 <_malloc_r+0x4fa>
  4046a0:	0cb3      	lsrs	r3, r6, #18
  4046a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4046a6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4046aa:	00c3      	lsls	r3, r0, #3
  4046ac:	e5c0      	b.n	404230 <_malloc_r+0x44>
  4046ae:	f103 0b10 	add.w	fp, r3, #16
  4046b2:	e6ae      	b.n	404412 <_malloc_r+0x226>
  4046b4:	2a54      	cmp	r2, #84	; 0x54
  4046b6:	d829      	bhi.n	40470c <_malloc_r+0x520>
  4046b8:	0b1a      	lsrs	r2, r3, #12
  4046ba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4046be:	00c9      	lsls	r1, r1, #3
  4046c0:	326e      	adds	r2, #110	; 0x6e
  4046c2:	e74d      	b.n	404560 <_malloc_r+0x374>
  4046c4:	4b20      	ldr	r3, [pc, #128]	; (404748 <_malloc_r+0x55c>)
  4046c6:	6819      	ldr	r1, [r3, #0]
  4046c8:	4459      	add	r1, fp
  4046ca:	6019      	str	r1, [r3, #0]
  4046cc:	e6b2      	b.n	404434 <_malloc_r+0x248>
  4046ce:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4046d2:	2800      	cmp	r0, #0
  4046d4:	f47f aeae 	bne.w	404434 <_malloc_r+0x248>
  4046d8:	eb08 030b 	add.w	r3, r8, fp
  4046dc:	68ba      	ldr	r2, [r7, #8]
  4046de:	f043 0301 	orr.w	r3, r3, #1
  4046e2:	6053      	str	r3, [r2, #4]
  4046e4:	e6ee      	b.n	4044c4 <_malloc_r+0x2d8>
  4046e6:	207f      	movs	r0, #127	; 0x7f
  4046e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4046ec:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4046f0:	e59e      	b.n	404230 <_malloc_r+0x44>
  4046f2:	f104 0108 	add.w	r1, r4, #8
  4046f6:	4628      	mov	r0, r5
  4046f8:	9300      	str	r3, [sp, #0]
  4046fa:	f004 fa79 	bl	408bf0 <_free_r>
  4046fe:	9b00      	ldr	r3, [sp, #0]
  404700:	6819      	ldr	r1, [r3, #0]
  404702:	e6df      	b.n	4044c4 <_malloc_r+0x2d8>
  404704:	2001      	movs	r0, #1
  404706:	f04f 0900 	mov.w	r9, #0
  40470a:	e6bc      	b.n	404486 <_malloc_r+0x29a>
  40470c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404710:	d805      	bhi.n	40471e <_malloc_r+0x532>
  404712:	0bda      	lsrs	r2, r3, #15
  404714:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404718:	00c9      	lsls	r1, r1, #3
  40471a:	3277      	adds	r2, #119	; 0x77
  40471c:	e720      	b.n	404560 <_malloc_r+0x374>
  40471e:	f240 5154 	movw	r1, #1364	; 0x554
  404722:	428a      	cmp	r2, r1
  404724:	d805      	bhi.n	404732 <_malloc_r+0x546>
  404726:	0c9a      	lsrs	r2, r3, #18
  404728:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40472c:	00c9      	lsls	r1, r1, #3
  40472e:	327c      	adds	r2, #124	; 0x7c
  404730:	e716      	b.n	404560 <_malloc_r+0x374>
  404732:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404736:	227e      	movs	r2, #126	; 0x7e
  404738:	e712      	b.n	404560 <_malloc_r+0x374>
  40473a:	687b      	ldr	r3, [r7, #4]
  40473c:	e780      	b.n	404640 <_malloc_r+0x454>
  40473e:	08f0      	lsrs	r0, r6, #3
  404740:	f106 0308 	add.w	r3, r6, #8
  404744:	e600      	b.n	404348 <_malloc_r+0x15c>
  404746:	bf00      	nop
  404748:	20400dc4 	.word	0x20400dc4

0040474c <memcpy>:
  40474c:	4684      	mov	ip, r0
  40474e:	ea41 0300 	orr.w	r3, r1, r0
  404752:	f013 0303 	ands.w	r3, r3, #3
  404756:	d16d      	bne.n	404834 <memcpy+0xe8>
  404758:	3a40      	subs	r2, #64	; 0x40
  40475a:	d341      	bcc.n	4047e0 <memcpy+0x94>
  40475c:	f851 3b04 	ldr.w	r3, [r1], #4
  404760:	f840 3b04 	str.w	r3, [r0], #4
  404764:	f851 3b04 	ldr.w	r3, [r1], #4
  404768:	f840 3b04 	str.w	r3, [r0], #4
  40476c:	f851 3b04 	ldr.w	r3, [r1], #4
  404770:	f840 3b04 	str.w	r3, [r0], #4
  404774:	f851 3b04 	ldr.w	r3, [r1], #4
  404778:	f840 3b04 	str.w	r3, [r0], #4
  40477c:	f851 3b04 	ldr.w	r3, [r1], #4
  404780:	f840 3b04 	str.w	r3, [r0], #4
  404784:	f851 3b04 	ldr.w	r3, [r1], #4
  404788:	f840 3b04 	str.w	r3, [r0], #4
  40478c:	f851 3b04 	ldr.w	r3, [r1], #4
  404790:	f840 3b04 	str.w	r3, [r0], #4
  404794:	f851 3b04 	ldr.w	r3, [r1], #4
  404798:	f840 3b04 	str.w	r3, [r0], #4
  40479c:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a0:	f840 3b04 	str.w	r3, [r0], #4
  4047a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a8:	f840 3b04 	str.w	r3, [r0], #4
  4047ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b0:	f840 3b04 	str.w	r3, [r0], #4
  4047b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b8:	f840 3b04 	str.w	r3, [r0], #4
  4047bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c0:	f840 3b04 	str.w	r3, [r0], #4
  4047c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c8:	f840 3b04 	str.w	r3, [r0], #4
  4047cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d0:	f840 3b04 	str.w	r3, [r0], #4
  4047d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d8:	f840 3b04 	str.w	r3, [r0], #4
  4047dc:	3a40      	subs	r2, #64	; 0x40
  4047de:	d2bd      	bcs.n	40475c <memcpy+0x10>
  4047e0:	3230      	adds	r2, #48	; 0x30
  4047e2:	d311      	bcc.n	404808 <memcpy+0xbc>
  4047e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047e8:	f840 3b04 	str.w	r3, [r0], #4
  4047ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4047f0:	f840 3b04 	str.w	r3, [r0], #4
  4047f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047f8:	f840 3b04 	str.w	r3, [r0], #4
  4047fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404800:	f840 3b04 	str.w	r3, [r0], #4
  404804:	3a10      	subs	r2, #16
  404806:	d2ed      	bcs.n	4047e4 <memcpy+0x98>
  404808:	320c      	adds	r2, #12
  40480a:	d305      	bcc.n	404818 <memcpy+0xcc>
  40480c:	f851 3b04 	ldr.w	r3, [r1], #4
  404810:	f840 3b04 	str.w	r3, [r0], #4
  404814:	3a04      	subs	r2, #4
  404816:	d2f9      	bcs.n	40480c <memcpy+0xc0>
  404818:	3204      	adds	r2, #4
  40481a:	d008      	beq.n	40482e <memcpy+0xe2>
  40481c:	07d2      	lsls	r2, r2, #31
  40481e:	bf1c      	itt	ne
  404820:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404824:	f800 3b01 	strbne.w	r3, [r0], #1
  404828:	d301      	bcc.n	40482e <memcpy+0xe2>
  40482a:	880b      	ldrh	r3, [r1, #0]
  40482c:	8003      	strh	r3, [r0, #0]
  40482e:	4660      	mov	r0, ip
  404830:	4770      	bx	lr
  404832:	bf00      	nop
  404834:	2a08      	cmp	r2, #8
  404836:	d313      	bcc.n	404860 <memcpy+0x114>
  404838:	078b      	lsls	r3, r1, #30
  40483a:	d08d      	beq.n	404758 <memcpy+0xc>
  40483c:	f010 0303 	ands.w	r3, r0, #3
  404840:	d08a      	beq.n	404758 <memcpy+0xc>
  404842:	f1c3 0304 	rsb	r3, r3, #4
  404846:	1ad2      	subs	r2, r2, r3
  404848:	07db      	lsls	r3, r3, #31
  40484a:	bf1c      	itt	ne
  40484c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404850:	f800 3b01 	strbne.w	r3, [r0], #1
  404854:	d380      	bcc.n	404758 <memcpy+0xc>
  404856:	f831 3b02 	ldrh.w	r3, [r1], #2
  40485a:	f820 3b02 	strh.w	r3, [r0], #2
  40485e:	e77b      	b.n	404758 <memcpy+0xc>
  404860:	3a04      	subs	r2, #4
  404862:	d3d9      	bcc.n	404818 <memcpy+0xcc>
  404864:	3a01      	subs	r2, #1
  404866:	f811 3b01 	ldrb.w	r3, [r1], #1
  40486a:	f800 3b01 	strb.w	r3, [r0], #1
  40486e:	d2f9      	bcs.n	404864 <memcpy+0x118>
  404870:	780b      	ldrb	r3, [r1, #0]
  404872:	7003      	strb	r3, [r0, #0]
  404874:	784b      	ldrb	r3, [r1, #1]
  404876:	7043      	strb	r3, [r0, #1]
  404878:	788b      	ldrb	r3, [r1, #2]
  40487a:	7083      	strb	r3, [r0, #2]
  40487c:	4660      	mov	r0, ip
  40487e:	4770      	bx	lr

00404880 <memset>:
  404880:	b470      	push	{r4, r5, r6}
  404882:	0786      	lsls	r6, r0, #30
  404884:	d046      	beq.n	404914 <memset+0x94>
  404886:	1e54      	subs	r4, r2, #1
  404888:	2a00      	cmp	r2, #0
  40488a:	d041      	beq.n	404910 <memset+0x90>
  40488c:	b2ca      	uxtb	r2, r1
  40488e:	4603      	mov	r3, r0
  404890:	e002      	b.n	404898 <memset+0x18>
  404892:	f114 34ff 	adds.w	r4, r4, #4294967295
  404896:	d33b      	bcc.n	404910 <memset+0x90>
  404898:	f803 2b01 	strb.w	r2, [r3], #1
  40489c:	079d      	lsls	r5, r3, #30
  40489e:	d1f8      	bne.n	404892 <memset+0x12>
  4048a0:	2c03      	cmp	r4, #3
  4048a2:	d92e      	bls.n	404902 <memset+0x82>
  4048a4:	b2cd      	uxtb	r5, r1
  4048a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4048aa:	2c0f      	cmp	r4, #15
  4048ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4048b0:	d919      	bls.n	4048e6 <memset+0x66>
  4048b2:	f103 0210 	add.w	r2, r3, #16
  4048b6:	4626      	mov	r6, r4
  4048b8:	3e10      	subs	r6, #16
  4048ba:	2e0f      	cmp	r6, #15
  4048bc:	f842 5c10 	str.w	r5, [r2, #-16]
  4048c0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4048c4:	f842 5c08 	str.w	r5, [r2, #-8]
  4048c8:	f842 5c04 	str.w	r5, [r2, #-4]
  4048cc:	f102 0210 	add.w	r2, r2, #16
  4048d0:	d8f2      	bhi.n	4048b8 <memset+0x38>
  4048d2:	f1a4 0210 	sub.w	r2, r4, #16
  4048d6:	f022 020f 	bic.w	r2, r2, #15
  4048da:	f004 040f 	and.w	r4, r4, #15
  4048de:	3210      	adds	r2, #16
  4048e0:	2c03      	cmp	r4, #3
  4048e2:	4413      	add	r3, r2
  4048e4:	d90d      	bls.n	404902 <memset+0x82>
  4048e6:	461e      	mov	r6, r3
  4048e8:	4622      	mov	r2, r4
  4048ea:	3a04      	subs	r2, #4
  4048ec:	2a03      	cmp	r2, #3
  4048ee:	f846 5b04 	str.w	r5, [r6], #4
  4048f2:	d8fa      	bhi.n	4048ea <memset+0x6a>
  4048f4:	1f22      	subs	r2, r4, #4
  4048f6:	f022 0203 	bic.w	r2, r2, #3
  4048fa:	3204      	adds	r2, #4
  4048fc:	4413      	add	r3, r2
  4048fe:	f004 0403 	and.w	r4, r4, #3
  404902:	b12c      	cbz	r4, 404910 <memset+0x90>
  404904:	b2c9      	uxtb	r1, r1
  404906:	441c      	add	r4, r3
  404908:	f803 1b01 	strb.w	r1, [r3], #1
  40490c:	429c      	cmp	r4, r3
  40490e:	d1fb      	bne.n	404908 <memset+0x88>
  404910:	bc70      	pop	{r4, r5, r6}
  404912:	4770      	bx	lr
  404914:	4614      	mov	r4, r2
  404916:	4603      	mov	r3, r0
  404918:	e7c2      	b.n	4048a0 <memset+0x20>
  40491a:	bf00      	nop

0040491c <__malloc_lock>:
  40491c:	4801      	ldr	r0, [pc, #4]	; (404924 <__malloc_lock+0x8>)
  40491e:	f004 bc01 	b.w	409124 <__retarget_lock_acquire_recursive>
  404922:	bf00      	nop
  404924:	20400e7c 	.word	0x20400e7c

00404928 <__malloc_unlock>:
  404928:	4801      	ldr	r0, [pc, #4]	; (404930 <__malloc_unlock+0x8>)
  40492a:	f004 bbfd 	b.w	409128 <__retarget_lock_release_recursive>
  40492e:	bf00      	nop
  404930:	20400e7c 	.word	0x20400e7c

00404934 <printf>:
  404934:	b40f      	push	{r0, r1, r2, r3}
  404936:	b500      	push	{lr}
  404938:	4907      	ldr	r1, [pc, #28]	; (404958 <printf+0x24>)
  40493a:	b083      	sub	sp, #12
  40493c:	ab04      	add	r3, sp, #16
  40493e:	6808      	ldr	r0, [r1, #0]
  404940:	f853 2b04 	ldr.w	r2, [r3], #4
  404944:	6881      	ldr	r1, [r0, #8]
  404946:	9301      	str	r3, [sp, #4]
  404948:	f001 fc96 	bl	406278 <_vfprintf_r>
  40494c:	b003      	add	sp, #12
  40494e:	f85d eb04 	ldr.w	lr, [sp], #4
  404952:	b004      	add	sp, #16
  404954:	4770      	bx	lr
  404956:	bf00      	nop
  404958:	20400028 	.word	0x20400028

0040495c <_puts_r>:
  40495c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40495e:	4605      	mov	r5, r0
  404960:	b089      	sub	sp, #36	; 0x24
  404962:	4608      	mov	r0, r1
  404964:	460c      	mov	r4, r1
  404966:	f000 f9eb 	bl	404d40 <strlen>
  40496a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40496c:	4f21      	ldr	r7, [pc, #132]	; (4049f4 <_puts_r+0x98>)
  40496e:	9404      	str	r4, [sp, #16]
  404970:	2601      	movs	r6, #1
  404972:	1c44      	adds	r4, r0, #1
  404974:	a904      	add	r1, sp, #16
  404976:	2202      	movs	r2, #2
  404978:	9403      	str	r4, [sp, #12]
  40497a:	9005      	str	r0, [sp, #20]
  40497c:	68ac      	ldr	r4, [r5, #8]
  40497e:	9706      	str	r7, [sp, #24]
  404980:	9607      	str	r6, [sp, #28]
  404982:	9101      	str	r1, [sp, #4]
  404984:	9202      	str	r2, [sp, #8]
  404986:	b353      	cbz	r3, 4049de <_puts_r+0x82>
  404988:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40498a:	f013 0f01 	tst.w	r3, #1
  40498e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404992:	b29a      	uxth	r2, r3
  404994:	d101      	bne.n	40499a <_puts_r+0x3e>
  404996:	0590      	lsls	r0, r2, #22
  404998:	d525      	bpl.n	4049e6 <_puts_r+0x8a>
  40499a:	0491      	lsls	r1, r2, #18
  40499c:	d406      	bmi.n	4049ac <_puts_r+0x50>
  40499e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4049a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4049a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4049a8:	81a3      	strh	r3, [r4, #12]
  4049aa:	6662      	str	r2, [r4, #100]	; 0x64
  4049ac:	4628      	mov	r0, r5
  4049ae:	aa01      	add	r2, sp, #4
  4049b0:	4621      	mov	r1, r4
  4049b2:	f004 fa03 	bl	408dbc <__sfvwrite_r>
  4049b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4049b8:	2800      	cmp	r0, #0
  4049ba:	bf0c      	ite	eq
  4049bc:	250a      	moveq	r5, #10
  4049be:	f04f 35ff 	movne.w	r5, #4294967295
  4049c2:	07da      	lsls	r2, r3, #31
  4049c4:	d402      	bmi.n	4049cc <_puts_r+0x70>
  4049c6:	89a3      	ldrh	r3, [r4, #12]
  4049c8:	059b      	lsls	r3, r3, #22
  4049ca:	d502      	bpl.n	4049d2 <_puts_r+0x76>
  4049cc:	4628      	mov	r0, r5
  4049ce:	b009      	add	sp, #36	; 0x24
  4049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049d4:	f004 fba8 	bl	409128 <__retarget_lock_release_recursive>
  4049d8:	4628      	mov	r0, r5
  4049da:	b009      	add	sp, #36	; 0x24
  4049dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049de:	4628      	mov	r0, r5
  4049e0:	f004 f864 	bl	408aac <__sinit>
  4049e4:	e7d0      	b.n	404988 <_puts_r+0x2c>
  4049e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049e8:	f004 fb9c 	bl	409124 <__retarget_lock_acquire_recursive>
  4049ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049f0:	b29a      	uxth	r2, r3
  4049f2:	e7d2      	b.n	40499a <_puts_r+0x3e>
  4049f4:	0040b458 	.word	0x0040b458

004049f8 <puts>:
  4049f8:	4b02      	ldr	r3, [pc, #8]	; (404a04 <puts+0xc>)
  4049fa:	4601      	mov	r1, r0
  4049fc:	6818      	ldr	r0, [r3, #0]
  4049fe:	f7ff bfad 	b.w	40495c <_puts_r>
  404a02:	bf00      	nop
  404a04:	20400028 	.word	0x20400028

00404a08 <_sbrk_r>:
  404a08:	b538      	push	{r3, r4, r5, lr}
  404a0a:	4c07      	ldr	r4, [pc, #28]	; (404a28 <_sbrk_r+0x20>)
  404a0c:	2300      	movs	r3, #0
  404a0e:	4605      	mov	r5, r0
  404a10:	4608      	mov	r0, r1
  404a12:	6023      	str	r3, [r4, #0]
  404a14:	f7fc ff86 	bl	401924 <_sbrk>
  404a18:	1c43      	adds	r3, r0, #1
  404a1a:	d000      	beq.n	404a1e <_sbrk_r+0x16>
  404a1c:	bd38      	pop	{r3, r4, r5, pc}
  404a1e:	6823      	ldr	r3, [r4, #0]
  404a20:	2b00      	cmp	r3, #0
  404a22:	d0fb      	beq.n	404a1c <_sbrk_r+0x14>
  404a24:	602b      	str	r3, [r5, #0]
  404a26:	bd38      	pop	{r3, r4, r5, pc}
  404a28:	20400e90 	.word	0x20400e90

00404a2c <setbuf>:
  404a2c:	2900      	cmp	r1, #0
  404a2e:	bf0c      	ite	eq
  404a30:	2202      	moveq	r2, #2
  404a32:	2200      	movne	r2, #0
  404a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a38:	f000 b800 	b.w	404a3c <setvbuf>

00404a3c <setvbuf>:
  404a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a40:	4c61      	ldr	r4, [pc, #388]	; (404bc8 <setvbuf+0x18c>)
  404a42:	6825      	ldr	r5, [r4, #0]
  404a44:	b083      	sub	sp, #12
  404a46:	4604      	mov	r4, r0
  404a48:	460f      	mov	r7, r1
  404a4a:	4690      	mov	r8, r2
  404a4c:	461e      	mov	r6, r3
  404a4e:	b115      	cbz	r5, 404a56 <setvbuf+0x1a>
  404a50:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a52:	2b00      	cmp	r3, #0
  404a54:	d064      	beq.n	404b20 <setvbuf+0xe4>
  404a56:	f1b8 0f02 	cmp.w	r8, #2
  404a5a:	d006      	beq.n	404a6a <setvbuf+0x2e>
  404a5c:	f1b8 0f01 	cmp.w	r8, #1
  404a60:	f200 809f 	bhi.w	404ba2 <setvbuf+0x166>
  404a64:	2e00      	cmp	r6, #0
  404a66:	f2c0 809c 	blt.w	404ba2 <setvbuf+0x166>
  404a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a6c:	07d8      	lsls	r0, r3, #31
  404a6e:	d534      	bpl.n	404ada <setvbuf+0x9e>
  404a70:	4621      	mov	r1, r4
  404a72:	4628      	mov	r0, r5
  404a74:	f003 ffc2 	bl	4089fc <_fflush_r>
  404a78:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a7a:	b141      	cbz	r1, 404a8e <setvbuf+0x52>
  404a7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a80:	4299      	cmp	r1, r3
  404a82:	d002      	beq.n	404a8a <setvbuf+0x4e>
  404a84:	4628      	mov	r0, r5
  404a86:	f004 f8b3 	bl	408bf0 <_free_r>
  404a8a:	2300      	movs	r3, #0
  404a8c:	6323      	str	r3, [r4, #48]	; 0x30
  404a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a92:	2200      	movs	r2, #0
  404a94:	61a2      	str	r2, [r4, #24]
  404a96:	6062      	str	r2, [r4, #4]
  404a98:	061a      	lsls	r2, r3, #24
  404a9a:	d43a      	bmi.n	404b12 <setvbuf+0xd6>
  404a9c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404aa0:	f023 0303 	bic.w	r3, r3, #3
  404aa4:	f1b8 0f02 	cmp.w	r8, #2
  404aa8:	81a3      	strh	r3, [r4, #12]
  404aaa:	d01d      	beq.n	404ae8 <setvbuf+0xac>
  404aac:	ab01      	add	r3, sp, #4
  404aae:	466a      	mov	r2, sp
  404ab0:	4621      	mov	r1, r4
  404ab2:	4628      	mov	r0, r5
  404ab4:	f004 fb3a 	bl	40912c <__swhatbuf_r>
  404ab8:	89a3      	ldrh	r3, [r4, #12]
  404aba:	4318      	orrs	r0, r3
  404abc:	81a0      	strh	r0, [r4, #12]
  404abe:	2e00      	cmp	r6, #0
  404ac0:	d132      	bne.n	404b28 <setvbuf+0xec>
  404ac2:	9e00      	ldr	r6, [sp, #0]
  404ac4:	4630      	mov	r0, r6
  404ac6:	f7ff fb81 	bl	4041cc <malloc>
  404aca:	4607      	mov	r7, r0
  404acc:	2800      	cmp	r0, #0
  404ace:	d06b      	beq.n	404ba8 <setvbuf+0x16c>
  404ad0:	89a3      	ldrh	r3, [r4, #12]
  404ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404ad6:	81a3      	strh	r3, [r4, #12]
  404ad8:	e028      	b.n	404b2c <setvbuf+0xf0>
  404ada:	89a3      	ldrh	r3, [r4, #12]
  404adc:	0599      	lsls	r1, r3, #22
  404ade:	d4c7      	bmi.n	404a70 <setvbuf+0x34>
  404ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404ae2:	f004 fb1f 	bl	409124 <__retarget_lock_acquire_recursive>
  404ae6:	e7c3      	b.n	404a70 <setvbuf+0x34>
  404ae8:	2500      	movs	r5, #0
  404aea:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404aec:	2600      	movs	r6, #0
  404aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404af2:	f043 0302 	orr.w	r3, r3, #2
  404af6:	2001      	movs	r0, #1
  404af8:	60a6      	str	r6, [r4, #8]
  404afa:	07ce      	lsls	r6, r1, #31
  404afc:	81a3      	strh	r3, [r4, #12]
  404afe:	6022      	str	r2, [r4, #0]
  404b00:	6122      	str	r2, [r4, #16]
  404b02:	6160      	str	r0, [r4, #20]
  404b04:	d401      	bmi.n	404b0a <setvbuf+0xce>
  404b06:	0598      	lsls	r0, r3, #22
  404b08:	d53e      	bpl.n	404b88 <setvbuf+0x14c>
  404b0a:	4628      	mov	r0, r5
  404b0c:	b003      	add	sp, #12
  404b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b12:	6921      	ldr	r1, [r4, #16]
  404b14:	4628      	mov	r0, r5
  404b16:	f004 f86b 	bl	408bf0 <_free_r>
  404b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b1e:	e7bd      	b.n	404a9c <setvbuf+0x60>
  404b20:	4628      	mov	r0, r5
  404b22:	f003 ffc3 	bl	408aac <__sinit>
  404b26:	e796      	b.n	404a56 <setvbuf+0x1a>
  404b28:	2f00      	cmp	r7, #0
  404b2a:	d0cb      	beq.n	404ac4 <setvbuf+0x88>
  404b2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404b2e:	2b00      	cmp	r3, #0
  404b30:	d033      	beq.n	404b9a <setvbuf+0x15e>
  404b32:	9b00      	ldr	r3, [sp, #0]
  404b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b38:	6027      	str	r7, [r4, #0]
  404b3a:	429e      	cmp	r6, r3
  404b3c:	bf1c      	itt	ne
  404b3e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404b42:	81a2      	strhne	r2, [r4, #12]
  404b44:	f1b8 0f01 	cmp.w	r8, #1
  404b48:	bf04      	itt	eq
  404b4a:	f042 0201 	orreq.w	r2, r2, #1
  404b4e:	81a2      	strheq	r2, [r4, #12]
  404b50:	b292      	uxth	r2, r2
  404b52:	f012 0308 	ands.w	r3, r2, #8
  404b56:	6127      	str	r7, [r4, #16]
  404b58:	6166      	str	r6, [r4, #20]
  404b5a:	d00e      	beq.n	404b7a <setvbuf+0x13e>
  404b5c:	07d1      	lsls	r1, r2, #31
  404b5e:	d51a      	bpl.n	404b96 <setvbuf+0x15a>
  404b60:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b62:	4276      	negs	r6, r6
  404b64:	2300      	movs	r3, #0
  404b66:	f015 0501 	ands.w	r5, r5, #1
  404b6a:	61a6      	str	r6, [r4, #24]
  404b6c:	60a3      	str	r3, [r4, #8]
  404b6e:	d009      	beq.n	404b84 <setvbuf+0x148>
  404b70:	2500      	movs	r5, #0
  404b72:	4628      	mov	r0, r5
  404b74:	b003      	add	sp, #12
  404b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b7a:	60a3      	str	r3, [r4, #8]
  404b7c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b7e:	f015 0501 	ands.w	r5, r5, #1
  404b82:	d1f5      	bne.n	404b70 <setvbuf+0x134>
  404b84:	0593      	lsls	r3, r2, #22
  404b86:	d4c0      	bmi.n	404b0a <setvbuf+0xce>
  404b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b8a:	f004 facd 	bl	409128 <__retarget_lock_release_recursive>
  404b8e:	4628      	mov	r0, r5
  404b90:	b003      	add	sp, #12
  404b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b96:	60a6      	str	r6, [r4, #8]
  404b98:	e7f0      	b.n	404b7c <setvbuf+0x140>
  404b9a:	4628      	mov	r0, r5
  404b9c:	f003 ff86 	bl	408aac <__sinit>
  404ba0:	e7c7      	b.n	404b32 <setvbuf+0xf6>
  404ba2:	f04f 35ff 	mov.w	r5, #4294967295
  404ba6:	e7b0      	b.n	404b0a <setvbuf+0xce>
  404ba8:	f8dd 9000 	ldr.w	r9, [sp]
  404bac:	45b1      	cmp	r9, r6
  404bae:	d004      	beq.n	404bba <setvbuf+0x17e>
  404bb0:	4648      	mov	r0, r9
  404bb2:	f7ff fb0b 	bl	4041cc <malloc>
  404bb6:	4607      	mov	r7, r0
  404bb8:	b920      	cbnz	r0, 404bc4 <setvbuf+0x188>
  404bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bbe:	f04f 35ff 	mov.w	r5, #4294967295
  404bc2:	e792      	b.n	404aea <setvbuf+0xae>
  404bc4:	464e      	mov	r6, r9
  404bc6:	e783      	b.n	404ad0 <setvbuf+0x94>
  404bc8:	20400028 	.word	0x20400028

00404bcc <sprintf>:
  404bcc:	b40e      	push	{r1, r2, r3}
  404bce:	b5f0      	push	{r4, r5, r6, r7, lr}
  404bd0:	b09c      	sub	sp, #112	; 0x70
  404bd2:	ab21      	add	r3, sp, #132	; 0x84
  404bd4:	490f      	ldr	r1, [pc, #60]	; (404c14 <sprintf+0x48>)
  404bd6:	f853 2b04 	ldr.w	r2, [r3], #4
  404bda:	9301      	str	r3, [sp, #4]
  404bdc:	4605      	mov	r5, r0
  404bde:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404be2:	6808      	ldr	r0, [r1, #0]
  404be4:	9502      	str	r5, [sp, #8]
  404be6:	f44f 7702 	mov.w	r7, #520	; 0x208
  404bea:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404bee:	a902      	add	r1, sp, #8
  404bf0:	9506      	str	r5, [sp, #24]
  404bf2:	f8ad 7014 	strh.w	r7, [sp, #20]
  404bf6:	9404      	str	r4, [sp, #16]
  404bf8:	9407      	str	r4, [sp, #28]
  404bfa:	f8ad 6016 	strh.w	r6, [sp, #22]
  404bfe:	f000 f90d 	bl	404e1c <_svfprintf_r>
  404c02:	9b02      	ldr	r3, [sp, #8]
  404c04:	2200      	movs	r2, #0
  404c06:	701a      	strb	r2, [r3, #0]
  404c08:	b01c      	add	sp, #112	; 0x70
  404c0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404c0e:	b003      	add	sp, #12
  404c10:	4770      	bx	lr
  404c12:	bf00      	nop
  404c14:	20400028 	.word	0x20400028

00404c18 <strcat>:
  404c18:	0783      	lsls	r3, r0, #30
  404c1a:	b510      	push	{r4, lr}
  404c1c:	4604      	mov	r4, r0
  404c1e:	d110      	bne.n	404c42 <strcat+0x2a>
  404c20:	6802      	ldr	r2, [r0, #0]
  404c22:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404c26:	ea23 0302 	bic.w	r3, r3, r2
  404c2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404c2e:	d108      	bne.n	404c42 <strcat+0x2a>
  404c30:	f850 2f04 	ldr.w	r2, [r0, #4]!
  404c34:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404c38:	ea23 0302 	bic.w	r3, r3, r2
  404c3c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404c40:	d0f6      	beq.n	404c30 <strcat+0x18>
  404c42:	7803      	ldrb	r3, [r0, #0]
  404c44:	b11b      	cbz	r3, 404c4e <strcat+0x36>
  404c46:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404c4a:	2b00      	cmp	r3, #0
  404c4c:	d1fb      	bne.n	404c46 <strcat+0x2e>
  404c4e:	f000 f803 	bl	404c58 <strcpy>
  404c52:	4620      	mov	r0, r4
  404c54:	bd10      	pop	{r4, pc}
  404c56:	bf00      	nop

00404c58 <strcpy>:
  404c58:	ea80 0201 	eor.w	r2, r0, r1
  404c5c:	4684      	mov	ip, r0
  404c5e:	f012 0f03 	tst.w	r2, #3
  404c62:	d14f      	bne.n	404d04 <strcpy+0xac>
  404c64:	f011 0f03 	tst.w	r1, #3
  404c68:	d132      	bne.n	404cd0 <strcpy+0x78>
  404c6a:	f84d 4d04 	str.w	r4, [sp, #-4]!
  404c6e:	f011 0f04 	tst.w	r1, #4
  404c72:	f851 3b04 	ldr.w	r3, [r1], #4
  404c76:	d00b      	beq.n	404c90 <strcpy+0x38>
  404c78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404c7c:	439a      	bics	r2, r3
  404c7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404c82:	bf04      	itt	eq
  404c84:	f84c 3b04 	streq.w	r3, [ip], #4
  404c88:	f851 3b04 	ldreq.w	r3, [r1], #4
  404c8c:	d116      	bne.n	404cbc <strcpy+0x64>
  404c8e:	bf00      	nop
  404c90:	f851 4b04 	ldr.w	r4, [r1], #4
  404c94:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404c98:	439a      	bics	r2, r3
  404c9a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404c9e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  404ca2:	d10b      	bne.n	404cbc <strcpy+0x64>
  404ca4:	f84c 3b04 	str.w	r3, [ip], #4
  404ca8:	43a2      	bics	r2, r4
  404caa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404cae:	bf04      	itt	eq
  404cb0:	f851 3b04 	ldreq.w	r3, [r1], #4
  404cb4:	f84c 4b04 	streq.w	r4, [ip], #4
  404cb8:	d0ea      	beq.n	404c90 <strcpy+0x38>
  404cba:	4623      	mov	r3, r4
  404cbc:	f80c 3b01 	strb.w	r3, [ip], #1
  404cc0:	f013 0fff 	tst.w	r3, #255	; 0xff
  404cc4:	ea4f 2333 	mov.w	r3, r3, ror #8
  404cc8:	d1f8      	bne.n	404cbc <strcpy+0x64>
  404cca:	f85d 4b04 	ldr.w	r4, [sp], #4
  404cce:	4770      	bx	lr
  404cd0:	f011 0f01 	tst.w	r1, #1
  404cd4:	d006      	beq.n	404ce4 <strcpy+0x8c>
  404cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
  404cda:	f80c 2b01 	strb.w	r2, [ip], #1
  404cde:	2a00      	cmp	r2, #0
  404ce0:	bf08      	it	eq
  404ce2:	4770      	bxeq	lr
  404ce4:	f011 0f02 	tst.w	r1, #2
  404ce8:	d0bf      	beq.n	404c6a <strcpy+0x12>
  404cea:	f831 2b02 	ldrh.w	r2, [r1], #2
  404cee:	f012 0fff 	tst.w	r2, #255	; 0xff
  404cf2:	bf16      	itet	ne
  404cf4:	f82c 2b02 	strhne.w	r2, [ip], #2
  404cf8:	f88c 2000 	strbeq.w	r2, [ip]
  404cfc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404d00:	d1b3      	bne.n	404c6a <strcpy+0x12>
  404d02:	4770      	bx	lr
  404d04:	f811 2b01 	ldrb.w	r2, [r1], #1
  404d08:	f80c 2b01 	strb.w	r2, [ip], #1
  404d0c:	2a00      	cmp	r2, #0
  404d0e:	d1f9      	bne.n	404d04 <strcpy+0xac>
  404d10:	4770      	bx	lr
  404d12:	bf00      	nop
	...

00404d40 <strlen>:
  404d40:	f890 f000 	pld	[r0]
  404d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404d48:	f020 0107 	bic.w	r1, r0, #7
  404d4c:	f06f 0c00 	mvn.w	ip, #0
  404d50:	f010 0407 	ands.w	r4, r0, #7
  404d54:	f891 f020 	pld	[r1, #32]
  404d58:	f040 8049 	bne.w	404dee <strlen+0xae>
  404d5c:	f04f 0400 	mov.w	r4, #0
  404d60:	f06f 0007 	mvn.w	r0, #7
  404d64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404d68:	f891 f040 	pld	[r1, #64]	; 0x40
  404d6c:	f100 0008 	add.w	r0, r0, #8
  404d70:	fa82 f24c 	uadd8	r2, r2, ip
  404d74:	faa4 f28c 	sel	r2, r4, ip
  404d78:	fa83 f34c 	uadd8	r3, r3, ip
  404d7c:	faa2 f38c 	sel	r3, r2, ip
  404d80:	bb4b      	cbnz	r3, 404dd6 <strlen+0x96>
  404d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404d86:	fa82 f24c 	uadd8	r2, r2, ip
  404d8a:	f100 0008 	add.w	r0, r0, #8
  404d8e:	faa4 f28c 	sel	r2, r4, ip
  404d92:	fa83 f34c 	uadd8	r3, r3, ip
  404d96:	faa2 f38c 	sel	r3, r2, ip
  404d9a:	b9e3      	cbnz	r3, 404dd6 <strlen+0x96>
  404d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404da0:	fa82 f24c 	uadd8	r2, r2, ip
  404da4:	f100 0008 	add.w	r0, r0, #8
  404da8:	faa4 f28c 	sel	r2, r4, ip
  404dac:	fa83 f34c 	uadd8	r3, r3, ip
  404db0:	faa2 f38c 	sel	r3, r2, ip
  404db4:	b97b      	cbnz	r3, 404dd6 <strlen+0x96>
  404db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404dba:	f101 0120 	add.w	r1, r1, #32
  404dbe:	fa82 f24c 	uadd8	r2, r2, ip
  404dc2:	f100 0008 	add.w	r0, r0, #8
  404dc6:	faa4 f28c 	sel	r2, r4, ip
  404dca:	fa83 f34c 	uadd8	r3, r3, ip
  404dce:	faa2 f38c 	sel	r3, r2, ip
  404dd2:	2b00      	cmp	r3, #0
  404dd4:	d0c6      	beq.n	404d64 <strlen+0x24>
  404dd6:	2a00      	cmp	r2, #0
  404dd8:	bf04      	itt	eq
  404dda:	3004      	addeq	r0, #4
  404ddc:	461a      	moveq	r2, r3
  404dde:	ba12      	rev	r2, r2
  404de0:	fab2 f282 	clz	r2, r2
  404de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404dec:	4770      	bx	lr
  404dee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404df2:	f004 0503 	and.w	r5, r4, #3
  404df6:	f1c4 0000 	rsb	r0, r4, #0
  404dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404dfe:	f014 0f04 	tst.w	r4, #4
  404e02:	f891 f040 	pld	[r1, #64]	; 0x40
  404e06:	fa0c f505 	lsl.w	r5, ip, r5
  404e0a:	ea62 0205 	orn	r2, r2, r5
  404e0e:	bf1c      	itt	ne
  404e10:	ea63 0305 	ornne	r3, r3, r5
  404e14:	4662      	movne	r2, ip
  404e16:	f04f 0400 	mov.w	r4, #0
  404e1a:	e7a9      	b.n	404d70 <strlen+0x30>

00404e1c <_svfprintf_r>:
  404e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e20:	b0c3      	sub	sp, #268	; 0x10c
  404e22:	460c      	mov	r4, r1
  404e24:	910b      	str	r1, [sp, #44]	; 0x2c
  404e26:	4692      	mov	sl, r2
  404e28:	930f      	str	r3, [sp, #60]	; 0x3c
  404e2a:	900c      	str	r0, [sp, #48]	; 0x30
  404e2c:	f004 f968 	bl	409100 <_localeconv_r>
  404e30:	6803      	ldr	r3, [r0, #0]
  404e32:	931a      	str	r3, [sp, #104]	; 0x68
  404e34:	4618      	mov	r0, r3
  404e36:	f7ff ff83 	bl	404d40 <strlen>
  404e3a:	89a3      	ldrh	r3, [r4, #12]
  404e3c:	9019      	str	r0, [sp, #100]	; 0x64
  404e3e:	0619      	lsls	r1, r3, #24
  404e40:	d503      	bpl.n	404e4a <_svfprintf_r+0x2e>
  404e42:	6923      	ldr	r3, [r4, #16]
  404e44:	2b00      	cmp	r3, #0
  404e46:	f001 8003 	beq.w	405e50 <_svfprintf_r+0x1034>
  404e4a:	2300      	movs	r3, #0
  404e4c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404e50:	9313      	str	r3, [sp, #76]	; 0x4c
  404e52:	9315      	str	r3, [sp, #84]	; 0x54
  404e54:	9314      	str	r3, [sp, #80]	; 0x50
  404e56:	9327      	str	r3, [sp, #156]	; 0x9c
  404e58:	9326      	str	r3, [sp, #152]	; 0x98
  404e5a:	9318      	str	r3, [sp, #96]	; 0x60
  404e5c:	931b      	str	r3, [sp, #108]	; 0x6c
  404e5e:	9309      	str	r3, [sp, #36]	; 0x24
  404e60:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404e64:	46c8      	mov	r8, r9
  404e66:	9316      	str	r3, [sp, #88]	; 0x58
  404e68:	9317      	str	r3, [sp, #92]	; 0x5c
  404e6a:	f89a 3000 	ldrb.w	r3, [sl]
  404e6e:	4654      	mov	r4, sl
  404e70:	b1e3      	cbz	r3, 404eac <_svfprintf_r+0x90>
  404e72:	2b25      	cmp	r3, #37	; 0x25
  404e74:	d102      	bne.n	404e7c <_svfprintf_r+0x60>
  404e76:	e019      	b.n	404eac <_svfprintf_r+0x90>
  404e78:	2b25      	cmp	r3, #37	; 0x25
  404e7a:	d003      	beq.n	404e84 <_svfprintf_r+0x68>
  404e7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404e80:	2b00      	cmp	r3, #0
  404e82:	d1f9      	bne.n	404e78 <_svfprintf_r+0x5c>
  404e84:	eba4 050a 	sub.w	r5, r4, sl
  404e88:	b185      	cbz	r5, 404eac <_svfprintf_r+0x90>
  404e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e8e:	f8c8 a000 	str.w	sl, [r8]
  404e92:	3301      	adds	r3, #1
  404e94:	442a      	add	r2, r5
  404e96:	2b07      	cmp	r3, #7
  404e98:	f8c8 5004 	str.w	r5, [r8, #4]
  404e9c:	9227      	str	r2, [sp, #156]	; 0x9c
  404e9e:	9326      	str	r3, [sp, #152]	; 0x98
  404ea0:	dc7f      	bgt.n	404fa2 <_svfprintf_r+0x186>
  404ea2:	f108 0808 	add.w	r8, r8, #8
  404ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ea8:	442b      	add	r3, r5
  404eaa:	9309      	str	r3, [sp, #36]	; 0x24
  404eac:	7823      	ldrb	r3, [r4, #0]
  404eae:	2b00      	cmp	r3, #0
  404eb0:	d07f      	beq.n	404fb2 <_svfprintf_r+0x196>
  404eb2:	2300      	movs	r3, #0
  404eb4:	461a      	mov	r2, r3
  404eb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404eba:	4619      	mov	r1, r3
  404ebc:	930d      	str	r3, [sp, #52]	; 0x34
  404ebe:	469b      	mov	fp, r3
  404ec0:	f04f 30ff 	mov.w	r0, #4294967295
  404ec4:	7863      	ldrb	r3, [r4, #1]
  404ec6:	900a      	str	r0, [sp, #40]	; 0x28
  404ec8:	f104 0a01 	add.w	sl, r4, #1
  404ecc:	f10a 0a01 	add.w	sl, sl, #1
  404ed0:	f1a3 0020 	sub.w	r0, r3, #32
  404ed4:	2858      	cmp	r0, #88	; 0x58
  404ed6:	f200 83c1 	bhi.w	40565c <_svfprintf_r+0x840>
  404eda:	e8df f010 	tbh	[pc, r0, lsl #1]
  404ede:	0238      	.short	0x0238
  404ee0:	03bf03bf 	.word	0x03bf03bf
  404ee4:	03bf0240 	.word	0x03bf0240
  404ee8:	03bf03bf 	.word	0x03bf03bf
  404eec:	03bf03bf 	.word	0x03bf03bf
  404ef0:	024503bf 	.word	0x024503bf
  404ef4:	03bf0203 	.word	0x03bf0203
  404ef8:	026b005d 	.word	0x026b005d
  404efc:	028603bf 	.word	0x028603bf
  404f00:	039d039d 	.word	0x039d039d
  404f04:	039d039d 	.word	0x039d039d
  404f08:	039d039d 	.word	0x039d039d
  404f0c:	039d039d 	.word	0x039d039d
  404f10:	03bf039d 	.word	0x03bf039d
  404f14:	03bf03bf 	.word	0x03bf03bf
  404f18:	03bf03bf 	.word	0x03bf03bf
  404f1c:	03bf03bf 	.word	0x03bf03bf
  404f20:	03bf03bf 	.word	0x03bf03bf
  404f24:	033703bf 	.word	0x033703bf
  404f28:	03bf0357 	.word	0x03bf0357
  404f2c:	03bf0357 	.word	0x03bf0357
  404f30:	03bf03bf 	.word	0x03bf03bf
  404f34:	039803bf 	.word	0x039803bf
  404f38:	03bf03bf 	.word	0x03bf03bf
  404f3c:	03bf03ad 	.word	0x03bf03ad
  404f40:	03bf03bf 	.word	0x03bf03bf
  404f44:	03bf03bf 	.word	0x03bf03bf
  404f48:	03bf0259 	.word	0x03bf0259
  404f4c:	031e03bf 	.word	0x031e03bf
  404f50:	03bf03bf 	.word	0x03bf03bf
  404f54:	03bf03bf 	.word	0x03bf03bf
  404f58:	03bf03bf 	.word	0x03bf03bf
  404f5c:	03bf03bf 	.word	0x03bf03bf
  404f60:	03bf03bf 	.word	0x03bf03bf
  404f64:	02db02c6 	.word	0x02db02c6
  404f68:	03570357 	.word	0x03570357
  404f6c:	028b0357 	.word	0x028b0357
  404f70:	03bf02db 	.word	0x03bf02db
  404f74:	029003bf 	.word	0x029003bf
  404f78:	029d03bf 	.word	0x029d03bf
  404f7c:	02b401cc 	.word	0x02b401cc
  404f80:	03bf0208 	.word	0x03bf0208
  404f84:	03bf01e1 	.word	0x03bf01e1
  404f88:	03bf007e 	.word	0x03bf007e
  404f8c:	020d03bf 	.word	0x020d03bf
  404f90:	980d      	ldr	r0, [sp, #52]	; 0x34
  404f92:	930f      	str	r3, [sp, #60]	; 0x3c
  404f94:	4240      	negs	r0, r0
  404f96:	900d      	str	r0, [sp, #52]	; 0x34
  404f98:	f04b 0b04 	orr.w	fp, fp, #4
  404f9c:	f89a 3000 	ldrb.w	r3, [sl]
  404fa0:	e794      	b.n	404ecc <_svfprintf_r+0xb0>
  404fa2:	aa25      	add	r2, sp, #148	; 0x94
  404fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fa8:	f004 fed2 	bl	409d50 <__ssprint_r>
  404fac:	b940      	cbnz	r0, 404fc0 <_svfprintf_r+0x1a4>
  404fae:	46c8      	mov	r8, r9
  404fb0:	e779      	b.n	404ea6 <_svfprintf_r+0x8a>
  404fb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404fb4:	b123      	cbz	r3, 404fc0 <_svfprintf_r+0x1a4>
  404fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fba:	aa25      	add	r2, sp, #148	; 0x94
  404fbc:	f004 fec8 	bl	409d50 <__ssprint_r>
  404fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fc2:	899b      	ldrh	r3, [r3, #12]
  404fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  404fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fca:	bf18      	it	ne
  404fcc:	f04f 33ff 	movne.w	r3, #4294967295
  404fd0:	9309      	str	r3, [sp, #36]	; 0x24
  404fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fd4:	b043      	add	sp, #268	; 0x10c
  404fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fda:	f01b 0f20 	tst.w	fp, #32
  404fde:	9311      	str	r3, [sp, #68]	; 0x44
  404fe0:	f040 81dd 	bne.w	40539e <_svfprintf_r+0x582>
  404fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fe6:	f01b 0f10 	tst.w	fp, #16
  404fea:	4613      	mov	r3, r2
  404fec:	f040 856e 	bne.w	405acc <_svfprintf_r+0xcb0>
  404ff0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404ff4:	f000 856a 	beq.w	405acc <_svfprintf_r+0xcb0>
  404ff8:	8814      	ldrh	r4, [r2, #0]
  404ffa:	3204      	adds	r2, #4
  404ffc:	2500      	movs	r5, #0
  404ffe:	2301      	movs	r3, #1
  405000:	920f      	str	r2, [sp, #60]	; 0x3c
  405002:	2700      	movs	r7, #0
  405004:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405008:	990a      	ldr	r1, [sp, #40]	; 0x28
  40500a:	1c4a      	adds	r2, r1, #1
  40500c:	f000 8265 	beq.w	4054da <_svfprintf_r+0x6be>
  405010:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405014:	9207      	str	r2, [sp, #28]
  405016:	ea54 0205 	orrs.w	r2, r4, r5
  40501a:	f040 8264 	bne.w	4054e6 <_svfprintf_r+0x6ca>
  40501e:	2900      	cmp	r1, #0
  405020:	f040 843c 	bne.w	40589c <_svfprintf_r+0xa80>
  405024:	2b00      	cmp	r3, #0
  405026:	f040 84d7 	bne.w	4059d8 <_svfprintf_r+0xbbc>
  40502a:	f01b 0301 	ands.w	r3, fp, #1
  40502e:	930e      	str	r3, [sp, #56]	; 0x38
  405030:	f000 8604 	beq.w	405c3c <_svfprintf_r+0xe20>
  405034:	ae42      	add	r6, sp, #264	; 0x108
  405036:	2330      	movs	r3, #48	; 0x30
  405038:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40503e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405040:	4293      	cmp	r3, r2
  405042:	bfb8      	it	lt
  405044:	4613      	movlt	r3, r2
  405046:	9308      	str	r3, [sp, #32]
  405048:	2300      	movs	r3, #0
  40504a:	9312      	str	r3, [sp, #72]	; 0x48
  40504c:	b117      	cbz	r7, 405054 <_svfprintf_r+0x238>
  40504e:	9b08      	ldr	r3, [sp, #32]
  405050:	3301      	adds	r3, #1
  405052:	9308      	str	r3, [sp, #32]
  405054:	9b07      	ldr	r3, [sp, #28]
  405056:	f013 0302 	ands.w	r3, r3, #2
  40505a:	9310      	str	r3, [sp, #64]	; 0x40
  40505c:	d002      	beq.n	405064 <_svfprintf_r+0x248>
  40505e:	9b08      	ldr	r3, [sp, #32]
  405060:	3302      	adds	r3, #2
  405062:	9308      	str	r3, [sp, #32]
  405064:	9b07      	ldr	r3, [sp, #28]
  405066:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40506a:	f040 830e 	bne.w	40568a <_svfprintf_r+0x86e>
  40506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405070:	9a08      	ldr	r2, [sp, #32]
  405072:	eba3 0b02 	sub.w	fp, r3, r2
  405076:	f1bb 0f00 	cmp.w	fp, #0
  40507a:	f340 8306 	ble.w	40568a <_svfprintf_r+0x86e>
  40507e:	f1bb 0f10 	cmp.w	fp, #16
  405082:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405084:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405086:	dd29      	ble.n	4050dc <_svfprintf_r+0x2c0>
  405088:	4643      	mov	r3, r8
  40508a:	4621      	mov	r1, r4
  40508c:	46a8      	mov	r8, r5
  40508e:	2710      	movs	r7, #16
  405090:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405092:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405094:	e006      	b.n	4050a4 <_svfprintf_r+0x288>
  405096:	f1ab 0b10 	sub.w	fp, fp, #16
  40509a:	f1bb 0f10 	cmp.w	fp, #16
  40509e:	f103 0308 	add.w	r3, r3, #8
  4050a2:	dd18      	ble.n	4050d6 <_svfprintf_r+0x2ba>
  4050a4:	3201      	adds	r2, #1
  4050a6:	48b7      	ldr	r0, [pc, #732]	; (405384 <_svfprintf_r+0x568>)
  4050a8:	9226      	str	r2, [sp, #152]	; 0x98
  4050aa:	3110      	adds	r1, #16
  4050ac:	2a07      	cmp	r2, #7
  4050ae:	9127      	str	r1, [sp, #156]	; 0x9c
  4050b0:	e883 0081 	stmia.w	r3, {r0, r7}
  4050b4:	ddef      	ble.n	405096 <_svfprintf_r+0x27a>
  4050b6:	aa25      	add	r2, sp, #148	; 0x94
  4050b8:	4629      	mov	r1, r5
  4050ba:	4620      	mov	r0, r4
  4050bc:	f004 fe48 	bl	409d50 <__ssprint_r>
  4050c0:	2800      	cmp	r0, #0
  4050c2:	f47f af7d 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4050c6:	f1ab 0b10 	sub.w	fp, fp, #16
  4050ca:	f1bb 0f10 	cmp.w	fp, #16
  4050ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4050d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4050d2:	464b      	mov	r3, r9
  4050d4:	dce6      	bgt.n	4050a4 <_svfprintf_r+0x288>
  4050d6:	4645      	mov	r5, r8
  4050d8:	460c      	mov	r4, r1
  4050da:	4698      	mov	r8, r3
  4050dc:	3201      	adds	r2, #1
  4050de:	4ba9      	ldr	r3, [pc, #676]	; (405384 <_svfprintf_r+0x568>)
  4050e0:	9226      	str	r2, [sp, #152]	; 0x98
  4050e2:	445c      	add	r4, fp
  4050e4:	2a07      	cmp	r2, #7
  4050e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4050e8:	e888 0808 	stmia.w	r8, {r3, fp}
  4050ec:	f300 8498 	bgt.w	405a20 <_svfprintf_r+0xc04>
  4050f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4050f4:	f108 0808 	add.w	r8, r8, #8
  4050f8:	b177      	cbz	r7, 405118 <_svfprintf_r+0x2fc>
  4050fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050fc:	3301      	adds	r3, #1
  4050fe:	3401      	adds	r4, #1
  405100:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  405104:	2201      	movs	r2, #1
  405106:	2b07      	cmp	r3, #7
  405108:	9427      	str	r4, [sp, #156]	; 0x9c
  40510a:	9326      	str	r3, [sp, #152]	; 0x98
  40510c:	e888 0006 	stmia.w	r8, {r1, r2}
  405110:	f300 83db 	bgt.w	4058ca <_svfprintf_r+0xaae>
  405114:	f108 0808 	add.w	r8, r8, #8
  405118:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40511a:	b16b      	cbz	r3, 405138 <_svfprintf_r+0x31c>
  40511c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40511e:	3301      	adds	r3, #1
  405120:	3402      	adds	r4, #2
  405122:	a91e      	add	r1, sp, #120	; 0x78
  405124:	2202      	movs	r2, #2
  405126:	2b07      	cmp	r3, #7
  405128:	9427      	str	r4, [sp, #156]	; 0x9c
  40512a:	9326      	str	r3, [sp, #152]	; 0x98
  40512c:	e888 0006 	stmia.w	r8, {r1, r2}
  405130:	f300 83d6 	bgt.w	4058e0 <_svfprintf_r+0xac4>
  405134:	f108 0808 	add.w	r8, r8, #8
  405138:	2d80      	cmp	r5, #128	; 0x80
  40513a:	f000 8315 	beq.w	405768 <_svfprintf_r+0x94c>
  40513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405142:	1a9f      	subs	r7, r3, r2
  405144:	2f00      	cmp	r7, #0
  405146:	dd36      	ble.n	4051b6 <_svfprintf_r+0x39a>
  405148:	2f10      	cmp	r7, #16
  40514a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40514c:	4d8e      	ldr	r5, [pc, #568]	; (405388 <_svfprintf_r+0x56c>)
  40514e:	dd27      	ble.n	4051a0 <_svfprintf_r+0x384>
  405150:	4642      	mov	r2, r8
  405152:	4621      	mov	r1, r4
  405154:	46b0      	mov	r8, r6
  405156:	f04f 0b10 	mov.w	fp, #16
  40515a:	462e      	mov	r6, r5
  40515c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40515e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405160:	e004      	b.n	40516c <_svfprintf_r+0x350>
  405162:	3f10      	subs	r7, #16
  405164:	2f10      	cmp	r7, #16
  405166:	f102 0208 	add.w	r2, r2, #8
  40516a:	dd15      	ble.n	405198 <_svfprintf_r+0x37c>
  40516c:	3301      	adds	r3, #1
  40516e:	3110      	adds	r1, #16
  405170:	2b07      	cmp	r3, #7
  405172:	9127      	str	r1, [sp, #156]	; 0x9c
  405174:	9326      	str	r3, [sp, #152]	; 0x98
  405176:	e882 0840 	stmia.w	r2, {r6, fp}
  40517a:	ddf2      	ble.n	405162 <_svfprintf_r+0x346>
  40517c:	aa25      	add	r2, sp, #148	; 0x94
  40517e:	4629      	mov	r1, r5
  405180:	4620      	mov	r0, r4
  405182:	f004 fde5 	bl	409d50 <__ssprint_r>
  405186:	2800      	cmp	r0, #0
  405188:	f47f af1a 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  40518c:	3f10      	subs	r7, #16
  40518e:	2f10      	cmp	r7, #16
  405190:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405192:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405194:	464a      	mov	r2, r9
  405196:	dce9      	bgt.n	40516c <_svfprintf_r+0x350>
  405198:	4635      	mov	r5, r6
  40519a:	460c      	mov	r4, r1
  40519c:	4646      	mov	r6, r8
  40519e:	4690      	mov	r8, r2
  4051a0:	3301      	adds	r3, #1
  4051a2:	443c      	add	r4, r7
  4051a4:	2b07      	cmp	r3, #7
  4051a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4051a8:	9326      	str	r3, [sp, #152]	; 0x98
  4051aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051ae:	f300 8381 	bgt.w	4058b4 <_svfprintf_r+0xa98>
  4051b2:	f108 0808 	add.w	r8, r8, #8
  4051b6:	9b07      	ldr	r3, [sp, #28]
  4051b8:	05df      	lsls	r7, r3, #23
  4051ba:	f100 8268 	bmi.w	40568e <_svfprintf_r+0x872>
  4051be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051c0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4051c2:	f8c8 6000 	str.w	r6, [r8]
  4051c6:	3301      	adds	r3, #1
  4051c8:	440c      	add	r4, r1
  4051ca:	2b07      	cmp	r3, #7
  4051cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4051ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4051d2:	9326      	str	r3, [sp, #152]	; 0x98
  4051d4:	f300 834d 	bgt.w	405872 <_svfprintf_r+0xa56>
  4051d8:	f108 0808 	add.w	r8, r8, #8
  4051dc:	9b07      	ldr	r3, [sp, #28]
  4051de:	075b      	lsls	r3, r3, #29
  4051e0:	d53a      	bpl.n	405258 <_svfprintf_r+0x43c>
  4051e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051e4:	9a08      	ldr	r2, [sp, #32]
  4051e6:	1a9d      	subs	r5, r3, r2
  4051e8:	2d00      	cmp	r5, #0
  4051ea:	dd35      	ble.n	405258 <_svfprintf_r+0x43c>
  4051ec:	2d10      	cmp	r5, #16
  4051ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051f0:	dd20      	ble.n	405234 <_svfprintf_r+0x418>
  4051f2:	2610      	movs	r6, #16
  4051f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4051f6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4051fa:	e004      	b.n	405206 <_svfprintf_r+0x3ea>
  4051fc:	3d10      	subs	r5, #16
  4051fe:	2d10      	cmp	r5, #16
  405200:	f108 0808 	add.w	r8, r8, #8
  405204:	dd16      	ble.n	405234 <_svfprintf_r+0x418>
  405206:	3301      	adds	r3, #1
  405208:	4a5e      	ldr	r2, [pc, #376]	; (405384 <_svfprintf_r+0x568>)
  40520a:	9326      	str	r3, [sp, #152]	; 0x98
  40520c:	3410      	adds	r4, #16
  40520e:	2b07      	cmp	r3, #7
  405210:	9427      	str	r4, [sp, #156]	; 0x9c
  405212:	e888 0044 	stmia.w	r8, {r2, r6}
  405216:	ddf1      	ble.n	4051fc <_svfprintf_r+0x3e0>
  405218:	aa25      	add	r2, sp, #148	; 0x94
  40521a:	4659      	mov	r1, fp
  40521c:	4638      	mov	r0, r7
  40521e:	f004 fd97 	bl	409d50 <__ssprint_r>
  405222:	2800      	cmp	r0, #0
  405224:	f47f aecc 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405228:	3d10      	subs	r5, #16
  40522a:	2d10      	cmp	r5, #16
  40522c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40522e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405230:	46c8      	mov	r8, r9
  405232:	dce8      	bgt.n	405206 <_svfprintf_r+0x3ea>
  405234:	3301      	adds	r3, #1
  405236:	4a53      	ldr	r2, [pc, #332]	; (405384 <_svfprintf_r+0x568>)
  405238:	9326      	str	r3, [sp, #152]	; 0x98
  40523a:	442c      	add	r4, r5
  40523c:	2b07      	cmp	r3, #7
  40523e:	9427      	str	r4, [sp, #156]	; 0x9c
  405240:	e888 0024 	stmia.w	r8, {r2, r5}
  405244:	dd08      	ble.n	405258 <_svfprintf_r+0x43c>
  405246:	aa25      	add	r2, sp, #148	; 0x94
  405248:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40524a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40524c:	f004 fd80 	bl	409d50 <__ssprint_r>
  405250:	2800      	cmp	r0, #0
  405252:	f47f aeb5 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405256:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405258:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40525a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40525c:	9908      	ldr	r1, [sp, #32]
  40525e:	428a      	cmp	r2, r1
  405260:	bfac      	ite	ge
  405262:	189b      	addge	r3, r3, r2
  405264:	185b      	addlt	r3, r3, r1
  405266:	9309      	str	r3, [sp, #36]	; 0x24
  405268:	2c00      	cmp	r4, #0
  40526a:	f040 830d 	bne.w	405888 <_svfprintf_r+0xa6c>
  40526e:	2300      	movs	r3, #0
  405270:	9326      	str	r3, [sp, #152]	; 0x98
  405272:	46c8      	mov	r8, r9
  405274:	e5f9      	b.n	404e6a <_svfprintf_r+0x4e>
  405276:	9311      	str	r3, [sp, #68]	; 0x44
  405278:	f01b 0320 	ands.w	r3, fp, #32
  40527c:	f040 81e3 	bne.w	405646 <_svfprintf_r+0x82a>
  405280:	f01b 0210 	ands.w	r2, fp, #16
  405284:	f040 842e 	bne.w	405ae4 <_svfprintf_r+0xcc8>
  405288:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40528c:	f000 842a 	beq.w	405ae4 <_svfprintf_r+0xcc8>
  405290:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405292:	4613      	mov	r3, r2
  405294:	460a      	mov	r2, r1
  405296:	3204      	adds	r2, #4
  405298:	880c      	ldrh	r4, [r1, #0]
  40529a:	920f      	str	r2, [sp, #60]	; 0x3c
  40529c:	2500      	movs	r5, #0
  40529e:	e6b0      	b.n	405002 <_svfprintf_r+0x1e6>
  4052a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052a2:	9311      	str	r3, [sp, #68]	; 0x44
  4052a4:	6816      	ldr	r6, [r2, #0]
  4052a6:	2400      	movs	r4, #0
  4052a8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4052ac:	1d15      	adds	r5, r2, #4
  4052ae:	2e00      	cmp	r6, #0
  4052b0:	f000 86a7 	beq.w	406002 <_svfprintf_r+0x11e6>
  4052b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052b6:	1c53      	adds	r3, r2, #1
  4052b8:	f000 8609 	beq.w	405ece <_svfprintf_r+0x10b2>
  4052bc:	4621      	mov	r1, r4
  4052be:	4630      	mov	r0, r6
  4052c0:	f003 ffae 	bl	409220 <memchr>
  4052c4:	2800      	cmp	r0, #0
  4052c6:	f000 86e1 	beq.w	40608c <_svfprintf_r+0x1270>
  4052ca:	1b83      	subs	r3, r0, r6
  4052cc:	930e      	str	r3, [sp, #56]	; 0x38
  4052ce:	940a      	str	r4, [sp, #40]	; 0x28
  4052d0:	950f      	str	r5, [sp, #60]	; 0x3c
  4052d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4052d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052da:	9308      	str	r3, [sp, #32]
  4052dc:	9412      	str	r4, [sp, #72]	; 0x48
  4052de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4052e2:	e6b3      	b.n	40504c <_svfprintf_r+0x230>
  4052e4:	f89a 3000 	ldrb.w	r3, [sl]
  4052e8:	2201      	movs	r2, #1
  4052ea:	212b      	movs	r1, #43	; 0x2b
  4052ec:	e5ee      	b.n	404ecc <_svfprintf_r+0xb0>
  4052ee:	f04b 0b20 	orr.w	fp, fp, #32
  4052f2:	f89a 3000 	ldrb.w	r3, [sl]
  4052f6:	e5e9      	b.n	404ecc <_svfprintf_r+0xb0>
  4052f8:	9311      	str	r3, [sp, #68]	; 0x44
  4052fa:	2a00      	cmp	r2, #0
  4052fc:	f040 8795 	bne.w	40622a <_svfprintf_r+0x140e>
  405300:	4b22      	ldr	r3, [pc, #136]	; (40538c <_svfprintf_r+0x570>)
  405302:	9318      	str	r3, [sp, #96]	; 0x60
  405304:	f01b 0f20 	tst.w	fp, #32
  405308:	f040 8111 	bne.w	40552e <_svfprintf_r+0x712>
  40530c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40530e:	f01b 0f10 	tst.w	fp, #16
  405312:	4613      	mov	r3, r2
  405314:	f040 83e1 	bne.w	405ada <_svfprintf_r+0xcbe>
  405318:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40531c:	f000 83dd 	beq.w	405ada <_svfprintf_r+0xcbe>
  405320:	3304      	adds	r3, #4
  405322:	8814      	ldrh	r4, [r2, #0]
  405324:	930f      	str	r3, [sp, #60]	; 0x3c
  405326:	2500      	movs	r5, #0
  405328:	f01b 0f01 	tst.w	fp, #1
  40532c:	f000 810c 	beq.w	405548 <_svfprintf_r+0x72c>
  405330:	ea54 0305 	orrs.w	r3, r4, r5
  405334:	f000 8108 	beq.w	405548 <_svfprintf_r+0x72c>
  405338:	2330      	movs	r3, #48	; 0x30
  40533a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40533e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  405342:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405346:	f04b 0b02 	orr.w	fp, fp, #2
  40534a:	2302      	movs	r3, #2
  40534c:	e659      	b.n	405002 <_svfprintf_r+0x1e6>
  40534e:	f89a 3000 	ldrb.w	r3, [sl]
  405352:	2900      	cmp	r1, #0
  405354:	f47f adba 	bne.w	404ecc <_svfprintf_r+0xb0>
  405358:	2201      	movs	r2, #1
  40535a:	2120      	movs	r1, #32
  40535c:	e5b6      	b.n	404ecc <_svfprintf_r+0xb0>
  40535e:	f04b 0b01 	orr.w	fp, fp, #1
  405362:	f89a 3000 	ldrb.w	r3, [sl]
  405366:	e5b1      	b.n	404ecc <_svfprintf_r+0xb0>
  405368:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40536a:	6823      	ldr	r3, [r4, #0]
  40536c:	930d      	str	r3, [sp, #52]	; 0x34
  40536e:	4618      	mov	r0, r3
  405370:	2800      	cmp	r0, #0
  405372:	4623      	mov	r3, r4
  405374:	f103 0304 	add.w	r3, r3, #4
  405378:	f6ff ae0a 	blt.w	404f90 <_svfprintf_r+0x174>
  40537c:	930f      	str	r3, [sp, #60]	; 0x3c
  40537e:	f89a 3000 	ldrb.w	r3, [sl]
  405382:	e5a3      	b.n	404ecc <_svfprintf_r+0xb0>
  405384:	0040b4a0 	.word	0x0040b4a0
  405388:	0040b4b0 	.word	0x0040b4b0
  40538c:	0040b480 	.word	0x0040b480
  405390:	f04b 0b10 	orr.w	fp, fp, #16
  405394:	f01b 0f20 	tst.w	fp, #32
  405398:	9311      	str	r3, [sp, #68]	; 0x44
  40539a:	f43f ae23 	beq.w	404fe4 <_svfprintf_r+0x1c8>
  40539e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4053a0:	3507      	adds	r5, #7
  4053a2:	f025 0307 	bic.w	r3, r5, #7
  4053a6:	f103 0208 	add.w	r2, r3, #8
  4053aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4053ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4053b0:	2301      	movs	r3, #1
  4053b2:	e626      	b.n	405002 <_svfprintf_r+0x1e6>
  4053b4:	f89a 3000 	ldrb.w	r3, [sl]
  4053b8:	2b2a      	cmp	r3, #42	; 0x2a
  4053ba:	f10a 0401 	add.w	r4, sl, #1
  4053be:	f000 8727 	beq.w	406210 <_svfprintf_r+0x13f4>
  4053c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4053c6:	2809      	cmp	r0, #9
  4053c8:	46a2      	mov	sl, r4
  4053ca:	f200 86ad 	bhi.w	406128 <_svfprintf_r+0x130c>
  4053ce:	2300      	movs	r3, #0
  4053d0:	461c      	mov	r4, r3
  4053d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4053d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4053da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4053de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4053e2:	2809      	cmp	r0, #9
  4053e4:	d9f5      	bls.n	4053d2 <_svfprintf_r+0x5b6>
  4053e6:	940a      	str	r4, [sp, #40]	; 0x28
  4053e8:	e572      	b.n	404ed0 <_svfprintf_r+0xb4>
  4053ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4053ee:	f89a 3000 	ldrb.w	r3, [sl]
  4053f2:	e56b      	b.n	404ecc <_svfprintf_r+0xb0>
  4053f4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4053f8:	f89a 3000 	ldrb.w	r3, [sl]
  4053fc:	e566      	b.n	404ecc <_svfprintf_r+0xb0>
  4053fe:	f89a 3000 	ldrb.w	r3, [sl]
  405402:	2b6c      	cmp	r3, #108	; 0x6c
  405404:	bf03      	ittte	eq
  405406:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40540a:	f04b 0b20 	orreq.w	fp, fp, #32
  40540e:	f10a 0a01 	addeq.w	sl, sl, #1
  405412:	f04b 0b10 	orrne.w	fp, fp, #16
  405416:	e559      	b.n	404ecc <_svfprintf_r+0xb0>
  405418:	2a00      	cmp	r2, #0
  40541a:	f040 8711 	bne.w	406240 <_svfprintf_r+0x1424>
  40541e:	f01b 0f20 	tst.w	fp, #32
  405422:	f040 84f9 	bne.w	405e18 <_svfprintf_r+0xffc>
  405426:	f01b 0f10 	tst.w	fp, #16
  40542a:	f040 84ac 	bne.w	405d86 <_svfprintf_r+0xf6a>
  40542e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405432:	f000 84a8 	beq.w	405d86 <_svfprintf_r+0xf6a>
  405436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405438:	6813      	ldr	r3, [r2, #0]
  40543a:	3204      	adds	r2, #4
  40543c:	920f      	str	r2, [sp, #60]	; 0x3c
  40543e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405442:	801a      	strh	r2, [r3, #0]
  405444:	e511      	b.n	404e6a <_svfprintf_r+0x4e>
  405446:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405448:	4bb3      	ldr	r3, [pc, #716]	; (405718 <_svfprintf_r+0x8fc>)
  40544a:	680c      	ldr	r4, [r1, #0]
  40544c:	9318      	str	r3, [sp, #96]	; 0x60
  40544e:	2230      	movs	r2, #48	; 0x30
  405450:	2378      	movs	r3, #120	; 0x78
  405452:	3104      	adds	r1, #4
  405454:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405458:	9311      	str	r3, [sp, #68]	; 0x44
  40545a:	f04b 0b02 	orr.w	fp, fp, #2
  40545e:	910f      	str	r1, [sp, #60]	; 0x3c
  405460:	2500      	movs	r5, #0
  405462:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405466:	2302      	movs	r3, #2
  405468:	e5cb      	b.n	405002 <_svfprintf_r+0x1e6>
  40546a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40546c:	9311      	str	r3, [sp, #68]	; 0x44
  40546e:	680a      	ldr	r2, [r1, #0]
  405470:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405474:	2300      	movs	r3, #0
  405476:	460a      	mov	r2, r1
  405478:	461f      	mov	r7, r3
  40547a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40547e:	3204      	adds	r2, #4
  405480:	2301      	movs	r3, #1
  405482:	9308      	str	r3, [sp, #32]
  405484:	f8cd b01c 	str.w	fp, [sp, #28]
  405488:	970a      	str	r7, [sp, #40]	; 0x28
  40548a:	9712      	str	r7, [sp, #72]	; 0x48
  40548c:	920f      	str	r2, [sp, #60]	; 0x3c
  40548e:	930e      	str	r3, [sp, #56]	; 0x38
  405490:	ae28      	add	r6, sp, #160	; 0xa0
  405492:	e5df      	b.n	405054 <_svfprintf_r+0x238>
  405494:	9311      	str	r3, [sp, #68]	; 0x44
  405496:	2a00      	cmp	r2, #0
  405498:	f040 86ea 	bne.w	406270 <_svfprintf_r+0x1454>
  40549c:	f01b 0f20 	tst.w	fp, #32
  4054a0:	d15d      	bne.n	40555e <_svfprintf_r+0x742>
  4054a2:	f01b 0f10 	tst.w	fp, #16
  4054a6:	f040 8308 	bne.w	405aba <_svfprintf_r+0xc9e>
  4054aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4054ae:	f000 8304 	beq.w	405aba <_svfprintf_r+0xc9e>
  4054b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4054b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4054b8:	3104      	adds	r1, #4
  4054ba:	17e5      	asrs	r5, r4, #31
  4054bc:	4622      	mov	r2, r4
  4054be:	462b      	mov	r3, r5
  4054c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4054c2:	2a00      	cmp	r2, #0
  4054c4:	f173 0300 	sbcs.w	r3, r3, #0
  4054c8:	db58      	blt.n	40557c <_svfprintf_r+0x760>
  4054ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4054cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4054d0:	1c4a      	adds	r2, r1, #1
  4054d2:	f04f 0301 	mov.w	r3, #1
  4054d6:	f47f ad9b 	bne.w	405010 <_svfprintf_r+0x1f4>
  4054da:	ea54 0205 	orrs.w	r2, r4, r5
  4054de:	f000 81df 	beq.w	4058a0 <_svfprintf_r+0xa84>
  4054e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4054e6:	2b01      	cmp	r3, #1
  4054e8:	f000 827b 	beq.w	4059e2 <_svfprintf_r+0xbc6>
  4054ec:	2b02      	cmp	r3, #2
  4054ee:	f040 8206 	bne.w	4058fe <_svfprintf_r+0xae2>
  4054f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4054f4:	464e      	mov	r6, r9
  4054f6:	0923      	lsrs	r3, r4, #4
  4054f8:	f004 010f 	and.w	r1, r4, #15
  4054fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405500:	092a      	lsrs	r2, r5, #4
  405502:	461c      	mov	r4, r3
  405504:	4615      	mov	r5, r2
  405506:	5c43      	ldrb	r3, [r0, r1]
  405508:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40550c:	ea54 0305 	orrs.w	r3, r4, r5
  405510:	d1f1      	bne.n	4054f6 <_svfprintf_r+0x6da>
  405512:	eba9 0306 	sub.w	r3, r9, r6
  405516:	930e      	str	r3, [sp, #56]	; 0x38
  405518:	e590      	b.n	40503c <_svfprintf_r+0x220>
  40551a:	9311      	str	r3, [sp, #68]	; 0x44
  40551c:	2a00      	cmp	r2, #0
  40551e:	f040 86a3 	bne.w	406268 <_svfprintf_r+0x144c>
  405522:	4b7e      	ldr	r3, [pc, #504]	; (40571c <_svfprintf_r+0x900>)
  405524:	9318      	str	r3, [sp, #96]	; 0x60
  405526:	f01b 0f20 	tst.w	fp, #32
  40552a:	f43f aeef 	beq.w	40530c <_svfprintf_r+0x4f0>
  40552e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405530:	3507      	adds	r5, #7
  405532:	f025 0307 	bic.w	r3, r5, #7
  405536:	f103 0208 	add.w	r2, r3, #8
  40553a:	f01b 0f01 	tst.w	fp, #1
  40553e:	920f      	str	r2, [sp, #60]	; 0x3c
  405540:	e9d3 4500 	ldrd	r4, r5, [r3]
  405544:	f47f aef4 	bne.w	405330 <_svfprintf_r+0x514>
  405548:	2302      	movs	r3, #2
  40554a:	e55a      	b.n	405002 <_svfprintf_r+0x1e6>
  40554c:	9311      	str	r3, [sp, #68]	; 0x44
  40554e:	2a00      	cmp	r2, #0
  405550:	f040 8686 	bne.w	406260 <_svfprintf_r+0x1444>
  405554:	f04b 0b10 	orr.w	fp, fp, #16
  405558:	f01b 0f20 	tst.w	fp, #32
  40555c:	d0a1      	beq.n	4054a2 <_svfprintf_r+0x686>
  40555e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405560:	3507      	adds	r5, #7
  405562:	f025 0507 	bic.w	r5, r5, #7
  405566:	e9d5 2300 	ldrd	r2, r3, [r5]
  40556a:	2a00      	cmp	r2, #0
  40556c:	f105 0108 	add.w	r1, r5, #8
  405570:	461d      	mov	r5, r3
  405572:	f173 0300 	sbcs.w	r3, r3, #0
  405576:	910f      	str	r1, [sp, #60]	; 0x3c
  405578:	4614      	mov	r4, r2
  40557a:	daa6      	bge.n	4054ca <_svfprintf_r+0x6ae>
  40557c:	272d      	movs	r7, #45	; 0x2d
  40557e:	4264      	negs	r4, r4
  405580:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405584:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405588:	2301      	movs	r3, #1
  40558a:	e53d      	b.n	405008 <_svfprintf_r+0x1ec>
  40558c:	9311      	str	r3, [sp, #68]	; 0x44
  40558e:	2a00      	cmp	r2, #0
  405590:	f040 8662 	bne.w	406258 <_svfprintf_r+0x143c>
  405594:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405596:	3507      	adds	r5, #7
  405598:	f025 0307 	bic.w	r3, r5, #7
  40559c:	f103 0208 	add.w	r2, r3, #8
  4055a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4055a2:	681a      	ldr	r2, [r3, #0]
  4055a4:	9215      	str	r2, [sp, #84]	; 0x54
  4055a6:	685b      	ldr	r3, [r3, #4]
  4055a8:	9314      	str	r3, [sp, #80]	; 0x50
  4055aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4055ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4055b2:	4628      	mov	r0, r5
  4055b4:	4621      	mov	r1, r4
  4055b6:	f04f 32ff 	mov.w	r2, #4294967295
  4055ba:	4b59      	ldr	r3, [pc, #356]	; (405720 <_svfprintf_r+0x904>)
  4055bc:	f005 fb88 	bl	40acd0 <__aeabi_dcmpun>
  4055c0:	2800      	cmp	r0, #0
  4055c2:	f040 834a 	bne.w	405c5a <_svfprintf_r+0xe3e>
  4055c6:	4628      	mov	r0, r5
  4055c8:	4621      	mov	r1, r4
  4055ca:	f04f 32ff 	mov.w	r2, #4294967295
  4055ce:	4b54      	ldr	r3, [pc, #336]	; (405720 <_svfprintf_r+0x904>)
  4055d0:	f005 fb60 	bl	40ac94 <__aeabi_dcmple>
  4055d4:	2800      	cmp	r0, #0
  4055d6:	f040 8340 	bne.w	405c5a <_svfprintf_r+0xe3e>
  4055da:	a815      	add	r0, sp, #84	; 0x54
  4055dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4055de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4055e0:	f005 fb4e 	bl	40ac80 <__aeabi_dcmplt>
  4055e4:	2800      	cmp	r0, #0
  4055e6:	f040 8530 	bne.w	40604a <_svfprintf_r+0x122e>
  4055ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4055ee:	4e4d      	ldr	r6, [pc, #308]	; (405724 <_svfprintf_r+0x908>)
  4055f0:	4b4d      	ldr	r3, [pc, #308]	; (405728 <_svfprintf_r+0x90c>)
  4055f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4055f6:	9007      	str	r0, [sp, #28]
  4055f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4055fa:	2203      	movs	r2, #3
  4055fc:	2100      	movs	r1, #0
  4055fe:	9208      	str	r2, [sp, #32]
  405600:	910a      	str	r1, [sp, #40]	; 0x28
  405602:	2847      	cmp	r0, #71	; 0x47
  405604:	bfd8      	it	le
  405606:	461e      	movle	r6, r3
  405608:	920e      	str	r2, [sp, #56]	; 0x38
  40560a:	9112      	str	r1, [sp, #72]	; 0x48
  40560c:	e51e      	b.n	40504c <_svfprintf_r+0x230>
  40560e:	f04b 0b08 	orr.w	fp, fp, #8
  405612:	f89a 3000 	ldrb.w	r3, [sl]
  405616:	e459      	b.n	404ecc <_svfprintf_r+0xb0>
  405618:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40561c:	2300      	movs	r3, #0
  40561e:	461c      	mov	r4, r3
  405620:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405624:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405628:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40562c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405630:	2809      	cmp	r0, #9
  405632:	d9f5      	bls.n	405620 <_svfprintf_r+0x804>
  405634:	940d      	str	r4, [sp, #52]	; 0x34
  405636:	e44b      	b.n	404ed0 <_svfprintf_r+0xb4>
  405638:	f04b 0b10 	orr.w	fp, fp, #16
  40563c:	9311      	str	r3, [sp, #68]	; 0x44
  40563e:	f01b 0320 	ands.w	r3, fp, #32
  405642:	f43f ae1d 	beq.w	405280 <_svfprintf_r+0x464>
  405646:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405648:	3507      	adds	r5, #7
  40564a:	f025 0307 	bic.w	r3, r5, #7
  40564e:	f103 0208 	add.w	r2, r3, #8
  405652:	e9d3 4500 	ldrd	r4, r5, [r3]
  405656:	920f      	str	r2, [sp, #60]	; 0x3c
  405658:	2300      	movs	r3, #0
  40565a:	e4d2      	b.n	405002 <_svfprintf_r+0x1e6>
  40565c:	9311      	str	r3, [sp, #68]	; 0x44
  40565e:	2a00      	cmp	r2, #0
  405660:	f040 85e7 	bne.w	406232 <_svfprintf_r+0x1416>
  405664:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405666:	2a00      	cmp	r2, #0
  405668:	f43f aca3 	beq.w	404fb2 <_svfprintf_r+0x196>
  40566c:	2300      	movs	r3, #0
  40566e:	2101      	movs	r1, #1
  405670:	461f      	mov	r7, r3
  405672:	9108      	str	r1, [sp, #32]
  405674:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405678:	f8cd b01c 	str.w	fp, [sp, #28]
  40567c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405680:	930a      	str	r3, [sp, #40]	; 0x28
  405682:	9312      	str	r3, [sp, #72]	; 0x48
  405684:	910e      	str	r1, [sp, #56]	; 0x38
  405686:	ae28      	add	r6, sp, #160	; 0xa0
  405688:	e4e4      	b.n	405054 <_svfprintf_r+0x238>
  40568a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40568c:	e534      	b.n	4050f8 <_svfprintf_r+0x2dc>
  40568e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405690:	2b65      	cmp	r3, #101	; 0x65
  405692:	f340 80a7 	ble.w	4057e4 <_svfprintf_r+0x9c8>
  405696:	a815      	add	r0, sp, #84	; 0x54
  405698:	c80d      	ldmia	r0, {r0, r2, r3}
  40569a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40569c:	f005 fae6 	bl	40ac6c <__aeabi_dcmpeq>
  4056a0:	2800      	cmp	r0, #0
  4056a2:	f000 8150 	beq.w	405946 <_svfprintf_r+0xb2a>
  4056a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056a8:	4a20      	ldr	r2, [pc, #128]	; (40572c <_svfprintf_r+0x910>)
  4056aa:	f8c8 2000 	str.w	r2, [r8]
  4056ae:	3301      	adds	r3, #1
  4056b0:	3401      	adds	r4, #1
  4056b2:	2201      	movs	r2, #1
  4056b4:	2b07      	cmp	r3, #7
  4056b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4056b8:	9326      	str	r3, [sp, #152]	; 0x98
  4056ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4056be:	f300 836a 	bgt.w	405d96 <_svfprintf_r+0xf7a>
  4056c2:	f108 0808 	add.w	r8, r8, #8
  4056c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4056c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4056ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056cc:	4293      	cmp	r3, r2
  4056ce:	db03      	blt.n	4056d8 <_svfprintf_r+0x8bc>
  4056d0:	9b07      	ldr	r3, [sp, #28]
  4056d2:	07dd      	lsls	r5, r3, #31
  4056d4:	f57f ad82 	bpl.w	4051dc <_svfprintf_r+0x3c0>
  4056d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4056dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4056de:	f8c8 2000 	str.w	r2, [r8]
  4056e2:	3301      	adds	r3, #1
  4056e4:	440c      	add	r4, r1
  4056e6:	2b07      	cmp	r3, #7
  4056e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4056ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4056ee:	9326      	str	r3, [sp, #152]	; 0x98
  4056f0:	f300 839e 	bgt.w	405e30 <_svfprintf_r+0x1014>
  4056f4:	f108 0808 	add.w	r8, r8, #8
  4056f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056fa:	1e5e      	subs	r6, r3, #1
  4056fc:	2e00      	cmp	r6, #0
  4056fe:	f77f ad6d 	ble.w	4051dc <_svfprintf_r+0x3c0>
  405702:	2e10      	cmp	r6, #16
  405704:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405706:	4d0a      	ldr	r5, [pc, #40]	; (405730 <_svfprintf_r+0x914>)
  405708:	f340 81f5 	ble.w	405af6 <_svfprintf_r+0xcda>
  40570c:	4622      	mov	r2, r4
  40570e:	2710      	movs	r7, #16
  405710:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405714:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405716:	e013      	b.n	405740 <_svfprintf_r+0x924>
  405718:	0040b480 	.word	0x0040b480
  40571c:	0040b46c 	.word	0x0040b46c
  405720:	7fefffff 	.word	0x7fefffff
  405724:	0040b460 	.word	0x0040b460
  405728:	0040b45c 	.word	0x0040b45c
  40572c:	0040b49c 	.word	0x0040b49c
  405730:	0040b4b0 	.word	0x0040b4b0
  405734:	f108 0808 	add.w	r8, r8, #8
  405738:	3e10      	subs	r6, #16
  40573a:	2e10      	cmp	r6, #16
  40573c:	f340 81da 	ble.w	405af4 <_svfprintf_r+0xcd8>
  405740:	3301      	adds	r3, #1
  405742:	3210      	adds	r2, #16
  405744:	2b07      	cmp	r3, #7
  405746:	9227      	str	r2, [sp, #156]	; 0x9c
  405748:	9326      	str	r3, [sp, #152]	; 0x98
  40574a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40574e:	ddf1      	ble.n	405734 <_svfprintf_r+0x918>
  405750:	aa25      	add	r2, sp, #148	; 0x94
  405752:	4621      	mov	r1, r4
  405754:	4658      	mov	r0, fp
  405756:	f004 fafb 	bl	409d50 <__ssprint_r>
  40575a:	2800      	cmp	r0, #0
  40575c:	f47f ac30 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405760:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405762:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405764:	46c8      	mov	r8, r9
  405766:	e7e7      	b.n	405738 <_svfprintf_r+0x91c>
  405768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40576a:	9a08      	ldr	r2, [sp, #32]
  40576c:	1a9f      	subs	r7, r3, r2
  40576e:	2f00      	cmp	r7, #0
  405770:	f77f ace5 	ble.w	40513e <_svfprintf_r+0x322>
  405774:	2f10      	cmp	r7, #16
  405776:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405778:	4db6      	ldr	r5, [pc, #728]	; (405a54 <_svfprintf_r+0xc38>)
  40577a:	dd27      	ble.n	4057cc <_svfprintf_r+0x9b0>
  40577c:	4642      	mov	r2, r8
  40577e:	4621      	mov	r1, r4
  405780:	46b0      	mov	r8, r6
  405782:	f04f 0b10 	mov.w	fp, #16
  405786:	462e      	mov	r6, r5
  405788:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40578a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40578c:	e004      	b.n	405798 <_svfprintf_r+0x97c>
  40578e:	3f10      	subs	r7, #16
  405790:	2f10      	cmp	r7, #16
  405792:	f102 0208 	add.w	r2, r2, #8
  405796:	dd15      	ble.n	4057c4 <_svfprintf_r+0x9a8>
  405798:	3301      	adds	r3, #1
  40579a:	3110      	adds	r1, #16
  40579c:	2b07      	cmp	r3, #7
  40579e:	9127      	str	r1, [sp, #156]	; 0x9c
  4057a0:	9326      	str	r3, [sp, #152]	; 0x98
  4057a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4057a6:	ddf2      	ble.n	40578e <_svfprintf_r+0x972>
  4057a8:	aa25      	add	r2, sp, #148	; 0x94
  4057aa:	4629      	mov	r1, r5
  4057ac:	4620      	mov	r0, r4
  4057ae:	f004 facf 	bl	409d50 <__ssprint_r>
  4057b2:	2800      	cmp	r0, #0
  4057b4:	f47f ac04 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4057b8:	3f10      	subs	r7, #16
  4057ba:	2f10      	cmp	r7, #16
  4057bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4057be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057c0:	464a      	mov	r2, r9
  4057c2:	dce9      	bgt.n	405798 <_svfprintf_r+0x97c>
  4057c4:	4635      	mov	r5, r6
  4057c6:	460c      	mov	r4, r1
  4057c8:	4646      	mov	r6, r8
  4057ca:	4690      	mov	r8, r2
  4057cc:	3301      	adds	r3, #1
  4057ce:	443c      	add	r4, r7
  4057d0:	2b07      	cmp	r3, #7
  4057d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4057d4:	9326      	str	r3, [sp, #152]	; 0x98
  4057d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4057da:	f300 8232 	bgt.w	405c42 <_svfprintf_r+0xe26>
  4057de:	f108 0808 	add.w	r8, r8, #8
  4057e2:	e4ac      	b.n	40513e <_svfprintf_r+0x322>
  4057e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4057e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4057e8:	2b01      	cmp	r3, #1
  4057ea:	f340 81fe 	ble.w	405bea <_svfprintf_r+0xdce>
  4057ee:	3701      	adds	r7, #1
  4057f0:	3401      	adds	r4, #1
  4057f2:	2301      	movs	r3, #1
  4057f4:	2f07      	cmp	r7, #7
  4057f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4057f8:	9726      	str	r7, [sp, #152]	; 0x98
  4057fa:	f8c8 6000 	str.w	r6, [r8]
  4057fe:	f8c8 3004 	str.w	r3, [r8, #4]
  405802:	f300 8203 	bgt.w	405c0c <_svfprintf_r+0xdf0>
  405806:	f108 0808 	add.w	r8, r8, #8
  40580a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40580c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40580e:	f8c8 3000 	str.w	r3, [r8]
  405812:	3701      	adds	r7, #1
  405814:	4414      	add	r4, r2
  405816:	2f07      	cmp	r7, #7
  405818:	9427      	str	r4, [sp, #156]	; 0x9c
  40581a:	9726      	str	r7, [sp, #152]	; 0x98
  40581c:	f8c8 2004 	str.w	r2, [r8, #4]
  405820:	f300 8200 	bgt.w	405c24 <_svfprintf_r+0xe08>
  405824:	f108 0808 	add.w	r8, r8, #8
  405828:	a815      	add	r0, sp, #84	; 0x54
  40582a:	c80d      	ldmia	r0, {r0, r2, r3}
  40582c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40582e:	f005 fa1d 	bl	40ac6c <__aeabi_dcmpeq>
  405832:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405834:	2800      	cmp	r0, #0
  405836:	f040 8101 	bne.w	405a3c <_svfprintf_r+0xc20>
  40583a:	3b01      	subs	r3, #1
  40583c:	3701      	adds	r7, #1
  40583e:	3601      	adds	r6, #1
  405840:	441c      	add	r4, r3
  405842:	2f07      	cmp	r7, #7
  405844:	9726      	str	r7, [sp, #152]	; 0x98
  405846:	9427      	str	r4, [sp, #156]	; 0x9c
  405848:	f8c8 6000 	str.w	r6, [r8]
  40584c:	f8c8 3004 	str.w	r3, [r8, #4]
  405850:	f300 8127 	bgt.w	405aa2 <_svfprintf_r+0xc86>
  405854:	f108 0808 	add.w	r8, r8, #8
  405858:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40585a:	f8c8 2004 	str.w	r2, [r8, #4]
  40585e:	3701      	adds	r7, #1
  405860:	4414      	add	r4, r2
  405862:	ab21      	add	r3, sp, #132	; 0x84
  405864:	2f07      	cmp	r7, #7
  405866:	9427      	str	r4, [sp, #156]	; 0x9c
  405868:	9726      	str	r7, [sp, #152]	; 0x98
  40586a:	f8c8 3000 	str.w	r3, [r8]
  40586e:	f77f acb3 	ble.w	4051d8 <_svfprintf_r+0x3bc>
  405872:	aa25      	add	r2, sp, #148	; 0x94
  405874:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405876:	980c      	ldr	r0, [sp, #48]	; 0x30
  405878:	f004 fa6a 	bl	409d50 <__ssprint_r>
  40587c:	2800      	cmp	r0, #0
  40587e:	f47f ab9f 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405882:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405884:	46c8      	mov	r8, r9
  405886:	e4a9      	b.n	4051dc <_svfprintf_r+0x3c0>
  405888:	aa25      	add	r2, sp, #148	; 0x94
  40588a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40588c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40588e:	f004 fa5f 	bl	409d50 <__ssprint_r>
  405892:	2800      	cmp	r0, #0
  405894:	f43f aceb 	beq.w	40526e <_svfprintf_r+0x452>
  405898:	f7ff bb92 	b.w	404fc0 <_svfprintf_r+0x1a4>
  40589c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4058a0:	2b01      	cmp	r3, #1
  4058a2:	f000 8134 	beq.w	405b0e <_svfprintf_r+0xcf2>
  4058a6:	2b02      	cmp	r3, #2
  4058a8:	d125      	bne.n	4058f6 <_svfprintf_r+0xada>
  4058aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4058ae:	2400      	movs	r4, #0
  4058b0:	2500      	movs	r5, #0
  4058b2:	e61e      	b.n	4054f2 <_svfprintf_r+0x6d6>
  4058b4:	aa25      	add	r2, sp, #148	; 0x94
  4058b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058ba:	f004 fa49 	bl	409d50 <__ssprint_r>
  4058be:	2800      	cmp	r0, #0
  4058c0:	f47f ab7e 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4058c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058c6:	46c8      	mov	r8, r9
  4058c8:	e475      	b.n	4051b6 <_svfprintf_r+0x39a>
  4058ca:	aa25      	add	r2, sp, #148	; 0x94
  4058cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058d0:	f004 fa3e 	bl	409d50 <__ssprint_r>
  4058d4:	2800      	cmp	r0, #0
  4058d6:	f47f ab73 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4058da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058dc:	46c8      	mov	r8, r9
  4058de:	e41b      	b.n	405118 <_svfprintf_r+0x2fc>
  4058e0:	aa25      	add	r2, sp, #148	; 0x94
  4058e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058e6:	f004 fa33 	bl	409d50 <__ssprint_r>
  4058ea:	2800      	cmp	r0, #0
  4058ec:	f47f ab68 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4058f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058f2:	46c8      	mov	r8, r9
  4058f4:	e420      	b.n	405138 <_svfprintf_r+0x31c>
  4058f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4058fa:	2400      	movs	r4, #0
  4058fc:	2500      	movs	r5, #0
  4058fe:	4649      	mov	r1, r9
  405900:	e000      	b.n	405904 <_svfprintf_r+0xae8>
  405902:	4631      	mov	r1, r6
  405904:	08e2      	lsrs	r2, r4, #3
  405906:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40590a:	08e8      	lsrs	r0, r5, #3
  40590c:	f004 0307 	and.w	r3, r4, #7
  405910:	4605      	mov	r5, r0
  405912:	4614      	mov	r4, r2
  405914:	3330      	adds	r3, #48	; 0x30
  405916:	ea54 0205 	orrs.w	r2, r4, r5
  40591a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40591e:	f101 36ff 	add.w	r6, r1, #4294967295
  405922:	d1ee      	bne.n	405902 <_svfprintf_r+0xae6>
  405924:	9a07      	ldr	r2, [sp, #28]
  405926:	07d2      	lsls	r2, r2, #31
  405928:	f57f adf3 	bpl.w	405512 <_svfprintf_r+0x6f6>
  40592c:	2b30      	cmp	r3, #48	; 0x30
  40592e:	f43f adf0 	beq.w	405512 <_svfprintf_r+0x6f6>
  405932:	3902      	subs	r1, #2
  405934:	2330      	movs	r3, #48	; 0x30
  405936:	f806 3c01 	strb.w	r3, [r6, #-1]
  40593a:	eba9 0301 	sub.w	r3, r9, r1
  40593e:	930e      	str	r3, [sp, #56]	; 0x38
  405940:	460e      	mov	r6, r1
  405942:	f7ff bb7b 	b.w	40503c <_svfprintf_r+0x220>
  405946:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405948:	2900      	cmp	r1, #0
  40594a:	f340 822e 	ble.w	405daa <_svfprintf_r+0xf8e>
  40594e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405952:	4293      	cmp	r3, r2
  405954:	bfa8      	it	ge
  405956:	4613      	movge	r3, r2
  405958:	2b00      	cmp	r3, #0
  40595a:	461f      	mov	r7, r3
  40595c:	dd0d      	ble.n	40597a <_svfprintf_r+0xb5e>
  40595e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405960:	f8c8 6000 	str.w	r6, [r8]
  405964:	3301      	adds	r3, #1
  405966:	443c      	add	r4, r7
  405968:	2b07      	cmp	r3, #7
  40596a:	9427      	str	r4, [sp, #156]	; 0x9c
  40596c:	f8c8 7004 	str.w	r7, [r8, #4]
  405970:	9326      	str	r3, [sp, #152]	; 0x98
  405972:	f300 831f 	bgt.w	405fb4 <_svfprintf_r+0x1198>
  405976:	f108 0808 	add.w	r8, r8, #8
  40597a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40597c:	2f00      	cmp	r7, #0
  40597e:	bfa8      	it	ge
  405980:	1bdb      	subge	r3, r3, r7
  405982:	2b00      	cmp	r3, #0
  405984:	461f      	mov	r7, r3
  405986:	f340 80d6 	ble.w	405b36 <_svfprintf_r+0xd1a>
  40598a:	2f10      	cmp	r7, #16
  40598c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40598e:	4d31      	ldr	r5, [pc, #196]	; (405a54 <_svfprintf_r+0xc38>)
  405990:	f340 81ed 	ble.w	405d6e <_svfprintf_r+0xf52>
  405994:	4642      	mov	r2, r8
  405996:	4621      	mov	r1, r4
  405998:	46b0      	mov	r8, r6
  40599a:	f04f 0b10 	mov.w	fp, #16
  40599e:	462e      	mov	r6, r5
  4059a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4059a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4059a4:	e004      	b.n	4059b0 <_svfprintf_r+0xb94>
  4059a6:	3208      	adds	r2, #8
  4059a8:	3f10      	subs	r7, #16
  4059aa:	2f10      	cmp	r7, #16
  4059ac:	f340 81db 	ble.w	405d66 <_svfprintf_r+0xf4a>
  4059b0:	3301      	adds	r3, #1
  4059b2:	3110      	adds	r1, #16
  4059b4:	2b07      	cmp	r3, #7
  4059b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4059b8:	9326      	str	r3, [sp, #152]	; 0x98
  4059ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4059be:	ddf2      	ble.n	4059a6 <_svfprintf_r+0xb8a>
  4059c0:	aa25      	add	r2, sp, #148	; 0x94
  4059c2:	4629      	mov	r1, r5
  4059c4:	4620      	mov	r0, r4
  4059c6:	f004 f9c3 	bl	409d50 <__ssprint_r>
  4059ca:	2800      	cmp	r0, #0
  4059cc:	f47f aaf8 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4059d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4059d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059d4:	464a      	mov	r2, r9
  4059d6:	e7e7      	b.n	4059a8 <_svfprintf_r+0xb8c>
  4059d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059da:	930e      	str	r3, [sp, #56]	; 0x38
  4059dc:	464e      	mov	r6, r9
  4059de:	f7ff bb2d 	b.w	40503c <_svfprintf_r+0x220>
  4059e2:	2d00      	cmp	r5, #0
  4059e4:	bf08      	it	eq
  4059e6:	2c0a      	cmpeq	r4, #10
  4059e8:	f0c0 808f 	bcc.w	405b0a <_svfprintf_r+0xcee>
  4059ec:	464e      	mov	r6, r9
  4059ee:	4620      	mov	r0, r4
  4059f0:	4629      	mov	r1, r5
  4059f2:	220a      	movs	r2, #10
  4059f4:	2300      	movs	r3, #0
  4059f6:	f005 f9a9 	bl	40ad4c <__aeabi_uldivmod>
  4059fa:	3230      	adds	r2, #48	; 0x30
  4059fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405a00:	4620      	mov	r0, r4
  405a02:	4629      	mov	r1, r5
  405a04:	2300      	movs	r3, #0
  405a06:	220a      	movs	r2, #10
  405a08:	f005 f9a0 	bl	40ad4c <__aeabi_uldivmod>
  405a0c:	4604      	mov	r4, r0
  405a0e:	460d      	mov	r5, r1
  405a10:	ea54 0305 	orrs.w	r3, r4, r5
  405a14:	d1eb      	bne.n	4059ee <_svfprintf_r+0xbd2>
  405a16:	eba9 0306 	sub.w	r3, r9, r6
  405a1a:	930e      	str	r3, [sp, #56]	; 0x38
  405a1c:	f7ff bb0e 	b.w	40503c <_svfprintf_r+0x220>
  405a20:	aa25      	add	r2, sp, #148	; 0x94
  405a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a24:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a26:	f004 f993 	bl	409d50 <__ssprint_r>
  405a2a:	2800      	cmp	r0, #0
  405a2c:	f47f aac8 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405a30:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405a34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a36:	46c8      	mov	r8, r9
  405a38:	f7ff bb5e 	b.w	4050f8 <_svfprintf_r+0x2dc>
  405a3c:	1e5e      	subs	r6, r3, #1
  405a3e:	2e00      	cmp	r6, #0
  405a40:	f77f af0a 	ble.w	405858 <_svfprintf_r+0xa3c>
  405a44:	2e10      	cmp	r6, #16
  405a46:	4d03      	ldr	r5, [pc, #12]	; (405a54 <_svfprintf_r+0xc38>)
  405a48:	dd22      	ble.n	405a90 <_svfprintf_r+0xc74>
  405a4a:	4622      	mov	r2, r4
  405a4c:	f04f 0b10 	mov.w	fp, #16
  405a50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405a52:	e006      	b.n	405a62 <_svfprintf_r+0xc46>
  405a54:	0040b4b0 	.word	0x0040b4b0
  405a58:	3e10      	subs	r6, #16
  405a5a:	2e10      	cmp	r6, #16
  405a5c:	f108 0808 	add.w	r8, r8, #8
  405a60:	dd15      	ble.n	405a8e <_svfprintf_r+0xc72>
  405a62:	3701      	adds	r7, #1
  405a64:	3210      	adds	r2, #16
  405a66:	2f07      	cmp	r7, #7
  405a68:	9227      	str	r2, [sp, #156]	; 0x9c
  405a6a:	9726      	str	r7, [sp, #152]	; 0x98
  405a6c:	e888 0820 	stmia.w	r8, {r5, fp}
  405a70:	ddf2      	ble.n	405a58 <_svfprintf_r+0xc3c>
  405a72:	aa25      	add	r2, sp, #148	; 0x94
  405a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a76:	4620      	mov	r0, r4
  405a78:	f004 f96a 	bl	409d50 <__ssprint_r>
  405a7c:	2800      	cmp	r0, #0
  405a7e:	f47f aa9f 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405a82:	3e10      	subs	r6, #16
  405a84:	2e10      	cmp	r6, #16
  405a86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a88:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405a8a:	46c8      	mov	r8, r9
  405a8c:	dce9      	bgt.n	405a62 <_svfprintf_r+0xc46>
  405a8e:	4614      	mov	r4, r2
  405a90:	3701      	adds	r7, #1
  405a92:	4434      	add	r4, r6
  405a94:	2f07      	cmp	r7, #7
  405a96:	9427      	str	r4, [sp, #156]	; 0x9c
  405a98:	9726      	str	r7, [sp, #152]	; 0x98
  405a9a:	e888 0060 	stmia.w	r8, {r5, r6}
  405a9e:	f77f aed9 	ble.w	405854 <_svfprintf_r+0xa38>
  405aa2:	aa25      	add	r2, sp, #148	; 0x94
  405aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aa8:	f004 f952 	bl	409d50 <__ssprint_r>
  405aac:	2800      	cmp	r0, #0
  405aae:	f47f aa87 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405ab2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ab4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405ab6:	46c8      	mov	r8, r9
  405ab8:	e6ce      	b.n	405858 <_svfprintf_r+0xa3c>
  405aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405abc:	6814      	ldr	r4, [r2, #0]
  405abe:	4613      	mov	r3, r2
  405ac0:	3304      	adds	r3, #4
  405ac2:	17e5      	asrs	r5, r4, #31
  405ac4:	930f      	str	r3, [sp, #60]	; 0x3c
  405ac6:	4622      	mov	r2, r4
  405ac8:	462b      	mov	r3, r5
  405aca:	e4fa      	b.n	4054c2 <_svfprintf_r+0x6a6>
  405acc:	3204      	adds	r2, #4
  405ace:	681c      	ldr	r4, [r3, #0]
  405ad0:	920f      	str	r2, [sp, #60]	; 0x3c
  405ad2:	2301      	movs	r3, #1
  405ad4:	2500      	movs	r5, #0
  405ad6:	f7ff ba94 	b.w	405002 <_svfprintf_r+0x1e6>
  405ada:	681c      	ldr	r4, [r3, #0]
  405adc:	3304      	adds	r3, #4
  405ade:	930f      	str	r3, [sp, #60]	; 0x3c
  405ae0:	2500      	movs	r5, #0
  405ae2:	e421      	b.n	405328 <_svfprintf_r+0x50c>
  405ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405ae6:	460a      	mov	r2, r1
  405ae8:	3204      	adds	r2, #4
  405aea:	680c      	ldr	r4, [r1, #0]
  405aec:	920f      	str	r2, [sp, #60]	; 0x3c
  405aee:	2500      	movs	r5, #0
  405af0:	f7ff ba87 	b.w	405002 <_svfprintf_r+0x1e6>
  405af4:	4614      	mov	r4, r2
  405af6:	3301      	adds	r3, #1
  405af8:	4434      	add	r4, r6
  405afa:	2b07      	cmp	r3, #7
  405afc:	9427      	str	r4, [sp, #156]	; 0x9c
  405afe:	9326      	str	r3, [sp, #152]	; 0x98
  405b00:	e888 0060 	stmia.w	r8, {r5, r6}
  405b04:	f77f ab68 	ble.w	4051d8 <_svfprintf_r+0x3bc>
  405b08:	e6b3      	b.n	405872 <_svfprintf_r+0xa56>
  405b0a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405b0e:	f8cd b01c 	str.w	fp, [sp, #28]
  405b12:	ae42      	add	r6, sp, #264	; 0x108
  405b14:	3430      	adds	r4, #48	; 0x30
  405b16:	2301      	movs	r3, #1
  405b18:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405b1c:	930e      	str	r3, [sp, #56]	; 0x38
  405b1e:	f7ff ba8d 	b.w	40503c <_svfprintf_r+0x220>
  405b22:	aa25      	add	r2, sp, #148	; 0x94
  405b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b26:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b28:	f004 f912 	bl	409d50 <__ssprint_r>
  405b2c:	2800      	cmp	r0, #0
  405b2e:	f47f aa47 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405b32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b34:	46c8      	mov	r8, r9
  405b36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b3a:	429a      	cmp	r2, r3
  405b3c:	db44      	blt.n	405bc8 <_svfprintf_r+0xdac>
  405b3e:	9b07      	ldr	r3, [sp, #28]
  405b40:	07d9      	lsls	r1, r3, #31
  405b42:	d441      	bmi.n	405bc8 <_svfprintf_r+0xdac>
  405b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b46:	9812      	ldr	r0, [sp, #72]	; 0x48
  405b48:	1a9a      	subs	r2, r3, r2
  405b4a:	1a1d      	subs	r5, r3, r0
  405b4c:	4295      	cmp	r5, r2
  405b4e:	bfa8      	it	ge
  405b50:	4615      	movge	r5, r2
  405b52:	2d00      	cmp	r5, #0
  405b54:	dd0e      	ble.n	405b74 <_svfprintf_r+0xd58>
  405b56:	9926      	ldr	r1, [sp, #152]	; 0x98
  405b58:	f8c8 5004 	str.w	r5, [r8, #4]
  405b5c:	3101      	adds	r1, #1
  405b5e:	4406      	add	r6, r0
  405b60:	442c      	add	r4, r5
  405b62:	2907      	cmp	r1, #7
  405b64:	f8c8 6000 	str.w	r6, [r8]
  405b68:	9427      	str	r4, [sp, #156]	; 0x9c
  405b6a:	9126      	str	r1, [sp, #152]	; 0x98
  405b6c:	f300 823b 	bgt.w	405fe6 <_svfprintf_r+0x11ca>
  405b70:	f108 0808 	add.w	r8, r8, #8
  405b74:	2d00      	cmp	r5, #0
  405b76:	bfac      	ite	ge
  405b78:	1b56      	subge	r6, r2, r5
  405b7a:	4616      	movlt	r6, r2
  405b7c:	2e00      	cmp	r6, #0
  405b7e:	f77f ab2d 	ble.w	4051dc <_svfprintf_r+0x3c0>
  405b82:	2e10      	cmp	r6, #16
  405b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b86:	4db0      	ldr	r5, [pc, #704]	; (405e48 <_svfprintf_r+0x102c>)
  405b88:	ddb5      	ble.n	405af6 <_svfprintf_r+0xcda>
  405b8a:	4622      	mov	r2, r4
  405b8c:	2710      	movs	r7, #16
  405b8e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405b92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405b94:	e004      	b.n	405ba0 <_svfprintf_r+0xd84>
  405b96:	f108 0808 	add.w	r8, r8, #8
  405b9a:	3e10      	subs	r6, #16
  405b9c:	2e10      	cmp	r6, #16
  405b9e:	dda9      	ble.n	405af4 <_svfprintf_r+0xcd8>
  405ba0:	3301      	adds	r3, #1
  405ba2:	3210      	adds	r2, #16
  405ba4:	2b07      	cmp	r3, #7
  405ba6:	9227      	str	r2, [sp, #156]	; 0x9c
  405ba8:	9326      	str	r3, [sp, #152]	; 0x98
  405baa:	e888 00a0 	stmia.w	r8, {r5, r7}
  405bae:	ddf2      	ble.n	405b96 <_svfprintf_r+0xd7a>
  405bb0:	aa25      	add	r2, sp, #148	; 0x94
  405bb2:	4621      	mov	r1, r4
  405bb4:	4658      	mov	r0, fp
  405bb6:	f004 f8cb 	bl	409d50 <__ssprint_r>
  405bba:	2800      	cmp	r0, #0
  405bbc:	f47f aa00 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405bc0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405bc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bc4:	46c8      	mov	r8, r9
  405bc6:	e7e8      	b.n	405b9a <_svfprintf_r+0xd7e>
  405bc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bca:	9819      	ldr	r0, [sp, #100]	; 0x64
  405bcc:	991a      	ldr	r1, [sp, #104]	; 0x68
  405bce:	f8c8 1000 	str.w	r1, [r8]
  405bd2:	3301      	adds	r3, #1
  405bd4:	4404      	add	r4, r0
  405bd6:	2b07      	cmp	r3, #7
  405bd8:	9427      	str	r4, [sp, #156]	; 0x9c
  405bda:	f8c8 0004 	str.w	r0, [r8, #4]
  405bde:	9326      	str	r3, [sp, #152]	; 0x98
  405be0:	f300 81f5 	bgt.w	405fce <_svfprintf_r+0x11b2>
  405be4:	f108 0808 	add.w	r8, r8, #8
  405be8:	e7ac      	b.n	405b44 <_svfprintf_r+0xd28>
  405bea:	9b07      	ldr	r3, [sp, #28]
  405bec:	07da      	lsls	r2, r3, #31
  405bee:	f53f adfe 	bmi.w	4057ee <_svfprintf_r+0x9d2>
  405bf2:	3701      	adds	r7, #1
  405bf4:	3401      	adds	r4, #1
  405bf6:	2301      	movs	r3, #1
  405bf8:	2f07      	cmp	r7, #7
  405bfa:	9427      	str	r4, [sp, #156]	; 0x9c
  405bfc:	9726      	str	r7, [sp, #152]	; 0x98
  405bfe:	f8c8 6000 	str.w	r6, [r8]
  405c02:	f8c8 3004 	str.w	r3, [r8, #4]
  405c06:	f77f ae25 	ble.w	405854 <_svfprintf_r+0xa38>
  405c0a:	e74a      	b.n	405aa2 <_svfprintf_r+0xc86>
  405c0c:	aa25      	add	r2, sp, #148	; 0x94
  405c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c10:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c12:	f004 f89d 	bl	409d50 <__ssprint_r>
  405c16:	2800      	cmp	r0, #0
  405c18:	f47f a9d2 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405c1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c1e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c20:	46c8      	mov	r8, r9
  405c22:	e5f2      	b.n	40580a <_svfprintf_r+0x9ee>
  405c24:	aa25      	add	r2, sp, #148	; 0x94
  405c26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c28:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c2a:	f004 f891 	bl	409d50 <__ssprint_r>
  405c2e:	2800      	cmp	r0, #0
  405c30:	f47f a9c6 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405c34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c36:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c38:	46c8      	mov	r8, r9
  405c3a:	e5f5      	b.n	405828 <_svfprintf_r+0xa0c>
  405c3c:	464e      	mov	r6, r9
  405c3e:	f7ff b9fd 	b.w	40503c <_svfprintf_r+0x220>
  405c42:	aa25      	add	r2, sp, #148	; 0x94
  405c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c46:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c48:	f004 f882 	bl	409d50 <__ssprint_r>
  405c4c:	2800      	cmp	r0, #0
  405c4e:	f47f a9b7 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405c52:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c54:	46c8      	mov	r8, r9
  405c56:	f7ff ba72 	b.w	40513e <_svfprintf_r+0x322>
  405c5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405c5c:	4622      	mov	r2, r4
  405c5e:	4620      	mov	r0, r4
  405c60:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405c62:	4623      	mov	r3, r4
  405c64:	4621      	mov	r1, r4
  405c66:	f005 f833 	bl	40acd0 <__aeabi_dcmpun>
  405c6a:	2800      	cmp	r0, #0
  405c6c:	f040 8286 	bne.w	40617c <_svfprintf_r+0x1360>
  405c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c72:	3301      	adds	r3, #1
  405c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405c76:	f023 0320 	bic.w	r3, r3, #32
  405c7a:	930e      	str	r3, [sp, #56]	; 0x38
  405c7c:	f000 81e2 	beq.w	406044 <_svfprintf_r+0x1228>
  405c80:	2b47      	cmp	r3, #71	; 0x47
  405c82:	f000 811e 	beq.w	405ec2 <_svfprintf_r+0x10a6>
  405c86:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405c8a:	9307      	str	r3, [sp, #28]
  405c8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405c8e:	1e1f      	subs	r7, r3, #0
  405c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405c92:	9308      	str	r3, [sp, #32]
  405c94:	bfbb      	ittet	lt
  405c96:	463b      	movlt	r3, r7
  405c98:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405c9c:	2300      	movge	r3, #0
  405c9e:	232d      	movlt	r3, #45	; 0x2d
  405ca0:	9310      	str	r3, [sp, #64]	; 0x40
  405ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ca4:	2b66      	cmp	r3, #102	; 0x66
  405ca6:	f000 81bb 	beq.w	406020 <_svfprintf_r+0x1204>
  405caa:	2b46      	cmp	r3, #70	; 0x46
  405cac:	f000 80df 	beq.w	405e6e <_svfprintf_r+0x1052>
  405cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cb2:	9a08      	ldr	r2, [sp, #32]
  405cb4:	2b45      	cmp	r3, #69	; 0x45
  405cb6:	bf0c      	ite	eq
  405cb8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405cba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405cbc:	a823      	add	r0, sp, #140	; 0x8c
  405cbe:	a920      	add	r1, sp, #128	; 0x80
  405cc0:	bf08      	it	eq
  405cc2:	1c5d      	addeq	r5, r3, #1
  405cc4:	9004      	str	r0, [sp, #16]
  405cc6:	9103      	str	r1, [sp, #12]
  405cc8:	a81f      	add	r0, sp, #124	; 0x7c
  405cca:	2102      	movs	r1, #2
  405ccc:	463b      	mov	r3, r7
  405cce:	9002      	str	r0, [sp, #8]
  405cd0:	9501      	str	r5, [sp, #4]
  405cd2:	9100      	str	r1, [sp, #0]
  405cd4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cd6:	f001 fec7 	bl	407a68 <_dtoa_r>
  405cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405cdc:	2b67      	cmp	r3, #103	; 0x67
  405cde:	4606      	mov	r6, r0
  405ce0:	f040 81e0 	bne.w	4060a4 <_svfprintf_r+0x1288>
  405ce4:	f01b 0f01 	tst.w	fp, #1
  405ce8:	f000 8246 	beq.w	406178 <_svfprintf_r+0x135c>
  405cec:	1974      	adds	r4, r6, r5
  405cee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405cf0:	9808      	ldr	r0, [sp, #32]
  405cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405cf4:	4639      	mov	r1, r7
  405cf6:	f004 ffb9 	bl	40ac6c <__aeabi_dcmpeq>
  405cfa:	2800      	cmp	r0, #0
  405cfc:	f040 8165 	bne.w	405fca <_svfprintf_r+0x11ae>
  405d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405d02:	42a3      	cmp	r3, r4
  405d04:	d206      	bcs.n	405d14 <_svfprintf_r+0xef8>
  405d06:	2130      	movs	r1, #48	; 0x30
  405d08:	1c5a      	adds	r2, r3, #1
  405d0a:	9223      	str	r2, [sp, #140]	; 0x8c
  405d0c:	7019      	strb	r1, [r3, #0]
  405d0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405d10:	429c      	cmp	r4, r3
  405d12:	d8f9      	bhi.n	405d08 <_svfprintf_r+0xeec>
  405d14:	1b9b      	subs	r3, r3, r6
  405d16:	9313      	str	r3, [sp, #76]	; 0x4c
  405d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d1a:	2b47      	cmp	r3, #71	; 0x47
  405d1c:	f000 80e9 	beq.w	405ef2 <_svfprintf_r+0x10d6>
  405d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d22:	2b65      	cmp	r3, #101	; 0x65
  405d24:	f340 81cd 	ble.w	4060c2 <_svfprintf_r+0x12a6>
  405d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d2a:	2b66      	cmp	r3, #102	; 0x66
  405d2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405d2e:	9312      	str	r3, [sp, #72]	; 0x48
  405d30:	f000 819e 	beq.w	406070 <_svfprintf_r+0x1254>
  405d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d38:	4619      	mov	r1, r3
  405d3a:	4291      	cmp	r1, r2
  405d3c:	f300 818a 	bgt.w	406054 <_svfprintf_r+0x1238>
  405d40:	f01b 0f01 	tst.w	fp, #1
  405d44:	f040 8213 	bne.w	40616e <_svfprintf_r+0x1352>
  405d48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405d4c:	9308      	str	r3, [sp, #32]
  405d4e:	2367      	movs	r3, #103	; 0x67
  405d50:	920e      	str	r2, [sp, #56]	; 0x38
  405d52:	9311      	str	r3, [sp, #68]	; 0x44
  405d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405d56:	2b00      	cmp	r3, #0
  405d58:	f040 80c4 	bne.w	405ee4 <_svfprintf_r+0x10c8>
  405d5c:	930a      	str	r3, [sp, #40]	; 0x28
  405d5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405d62:	f7ff b973 	b.w	40504c <_svfprintf_r+0x230>
  405d66:	4635      	mov	r5, r6
  405d68:	460c      	mov	r4, r1
  405d6a:	4646      	mov	r6, r8
  405d6c:	4690      	mov	r8, r2
  405d6e:	3301      	adds	r3, #1
  405d70:	443c      	add	r4, r7
  405d72:	2b07      	cmp	r3, #7
  405d74:	9427      	str	r4, [sp, #156]	; 0x9c
  405d76:	9326      	str	r3, [sp, #152]	; 0x98
  405d78:	e888 00a0 	stmia.w	r8, {r5, r7}
  405d7c:	f73f aed1 	bgt.w	405b22 <_svfprintf_r+0xd06>
  405d80:	f108 0808 	add.w	r8, r8, #8
  405d84:	e6d7      	b.n	405b36 <_svfprintf_r+0xd1a>
  405d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d88:	6813      	ldr	r3, [r2, #0]
  405d8a:	3204      	adds	r2, #4
  405d8c:	920f      	str	r2, [sp, #60]	; 0x3c
  405d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405d90:	601a      	str	r2, [r3, #0]
  405d92:	f7ff b86a 	b.w	404e6a <_svfprintf_r+0x4e>
  405d96:	aa25      	add	r2, sp, #148	; 0x94
  405d98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d9c:	f003 ffd8 	bl	409d50 <__ssprint_r>
  405da0:	2800      	cmp	r0, #0
  405da2:	f47f a90d 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405da6:	46c8      	mov	r8, r9
  405da8:	e48d      	b.n	4056c6 <_svfprintf_r+0x8aa>
  405daa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405dac:	4a27      	ldr	r2, [pc, #156]	; (405e4c <_svfprintf_r+0x1030>)
  405dae:	f8c8 2000 	str.w	r2, [r8]
  405db2:	3301      	adds	r3, #1
  405db4:	3401      	adds	r4, #1
  405db6:	2201      	movs	r2, #1
  405db8:	2b07      	cmp	r3, #7
  405dba:	9427      	str	r4, [sp, #156]	; 0x9c
  405dbc:	9326      	str	r3, [sp, #152]	; 0x98
  405dbe:	f8c8 2004 	str.w	r2, [r8, #4]
  405dc2:	dc72      	bgt.n	405eaa <_svfprintf_r+0x108e>
  405dc4:	f108 0808 	add.w	r8, r8, #8
  405dc8:	b929      	cbnz	r1, 405dd6 <_svfprintf_r+0xfba>
  405dca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405dcc:	b91b      	cbnz	r3, 405dd6 <_svfprintf_r+0xfba>
  405dce:	9b07      	ldr	r3, [sp, #28]
  405dd0:	07d8      	lsls	r0, r3, #31
  405dd2:	f57f aa03 	bpl.w	4051dc <_svfprintf_r+0x3c0>
  405dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405dd8:	9819      	ldr	r0, [sp, #100]	; 0x64
  405dda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405ddc:	f8c8 2000 	str.w	r2, [r8]
  405de0:	3301      	adds	r3, #1
  405de2:	4602      	mov	r2, r0
  405de4:	4422      	add	r2, r4
  405de6:	2b07      	cmp	r3, #7
  405de8:	9227      	str	r2, [sp, #156]	; 0x9c
  405dea:	f8c8 0004 	str.w	r0, [r8, #4]
  405dee:	9326      	str	r3, [sp, #152]	; 0x98
  405df0:	f300 818d 	bgt.w	40610e <_svfprintf_r+0x12f2>
  405df4:	f108 0808 	add.w	r8, r8, #8
  405df8:	2900      	cmp	r1, #0
  405dfa:	f2c0 8165 	blt.w	4060c8 <_svfprintf_r+0x12ac>
  405dfe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405e00:	f8c8 6000 	str.w	r6, [r8]
  405e04:	3301      	adds	r3, #1
  405e06:	188c      	adds	r4, r1, r2
  405e08:	2b07      	cmp	r3, #7
  405e0a:	9427      	str	r4, [sp, #156]	; 0x9c
  405e0c:	9326      	str	r3, [sp, #152]	; 0x98
  405e0e:	f8c8 1004 	str.w	r1, [r8, #4]
  405e12:	f77f a9e1 	ble.w	4051d8 <_svfprintf_r+0x3bc>
  405e16:	e52c      	b.n	405872 <_svfprintf_r+0xa56>
  405e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405e1c:	6813      	ldr	r3, [r2, #0]
  405e1e:	17cd      	asrs	r5, r1, #31
  405e20:	4608      	mov	r0, r1
  405e22:	3204      	adds	r2, #4
  405e24:	4629      	mov	r1, r5
  405e26:	920f      	str	r2, [sp, #60]	; 0x3c
  405e28:	e9c3 0100 	strd	r0, r1, [r3]
  405e2c:	f7ff b81d 	b.w	404e6a <_svfprintf_r+0x4e>
  405e30:	aa25      	add	r2, sp, #148	; 0x94
  405e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e34:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e36:	f003 ff8b 	bl	409d50 <__ssprint_r>
  405e3a:	2800      	cmp	r0, #0
  405e3c:	f47f a8c0 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405e40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e42:	46c8      	mov	r8, r9
  405e44:	e458      	b.n	4056f8 <_svfprintf_r+0x8dc>
  405e46:	bf00      	nop
  405e48:	0040b4b0 	.word	0x0040b4b0
  405e4c:	0040b49c 	.word	0x0040b49c
  405e50:	2140      	movs	r1, #64	; 0x40
  405e52:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e54:	f7fe f9ca 	bl	4041ec <_malloc_r>
  405e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e5a:	6010      	str	r0, [r2, #0]
  405e5c:	6110      	str	r0, [r2, #16]
  405e5e:	2800      	cmp	r0, #0
  405e60:	f000 81f2 	beq.w	406248 <_svfprintf_r+0x142c>
  405e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e66:	2340      	movs	r3, #64	; 0x40
  405e68:	6153      	str	r3, [r2, #20]
  405e6a:	f7fe bfee 	b.w	404e4a <_svfprintf_r+0x2e>
  405e6e:	a823      	add	r0, sp, #140	; 0x8c
  405e70:	a920      	add	r1, sp, #128	; 0x80
  405e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405e74:	9004      	str	r0, [sp, #16]
  405e76:	9103      	str	r1, [sp, #12]
  405e78:	a81f      	add	r0, sp, #124	; 0x7c
  405e7a:	2103      	movs	r1, #3
  405e7c:	9002      	str	r0, [sp, #8]
  405e7e:	9a08      	ldr	r2, [sp, #32]
  405e80:	9401      	str	r4, [sp, #4]
  405e82:	463b      	mov	r3, r7
  405e84:	9100      	str	r1, [sp, #0]
  405e86:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e88:	f001 fdee 	bl	407a68 <_dtoa_r>
  405e8c:	4625      	mov	r5, r4
  405e8e:	4606      	mov	r6, r0
  405e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e92:	2b46      	cmp	r3, #70	; 0x46
  405e94:	eb06 0405 	add.w	r4, r6, r5
  405e98:	f47f af29 	bne.w	405cee <_svfprintf_r+0xed2>
  405e9c:	7833      	ldrb	r3, [r6, #0]
  405e9e:	2b30      	cmp	r3, #48	; 0x30
  405ea0:	f000 8178 	beq.w	406194 <_svfprintf_r+0x1378>
  405ea4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405ea6:	442c      	add	r4, r5
  405ea8:	e721      	b.n	405cee <_svfprintf_r+0xed2>
  405eaa:	aa25      	add	r2, sp, #148	; 0x94
  405eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405eae:	980c      	ldr	r0, [sp, #48]	; 0x30
  405eb0:	f003 ff4e 	bl	409d50 <__ssprint_r>
  405eb4:	2800      	cmp	r0, #0
  405eb6:	f47f a883 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405eba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405ebc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ebe:	46c8      	mov	r8, r9
  405ec0:	e782      	b.n	405dc8 <_svfprintf_r+0xfac>
  405ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ec4:	2b00      	cmp	r3, #0
  405ec6:	bf08      	it	eq
  405ec8:	2301      	moveq	r3, #1
  405eca:	930a      	str	r3, [sp, #40]	; 0x28
  405ecc:	e6db      	b.n	405c86 <_svfprintf_r+0xe6a>
  405ece:	4630      	mov	r0, r6
  405ed0:	940a      	str	r4, [sp, #40]	; 0x28
  405ed2:	f7fe ff35 	bl	404d40 <strlen>
  405ed6:	950f      	str	r5, [sp, #60]	; 0x3c
  405ed8:	900e      	str	r0, [sp, #56]	; 0x38
  405eda:	f8cd b01c 	str.w	fp, [sp, #28]
  405ede:	4603      	mov	r3, r0
  405ee0:	f7ff b9f9 	b.w	4052d6 <_svfprintf_r+0x4ba>
  405ee4:	272d      	movs	r7, #45	; 0x2d
  405ee6:	2300      	movs	r3, #0
  405ee8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405eec:	930a      	str	r3, [sp, #40]	; 0x28
  405eee:	f7ff b8ae 	b.w	40504e <_svfprintf_r+0x232>
  405ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405ef4:	9312      	str	r3, [sp, #72]	; 0x48
  405ef6:	461a      	mov	r2, r3
  405ef8:	3303      	adds	r3, #3
  405efa:	db04      	blt.n	405f06 <_svfprintf_r+0x10ea>
  405efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405efe:	4619      	mov	r1, r3
  405f00:	4291      	cmp	r1, r2
  405f02:	f6bf af17 	bge.w	405d34 <_svfprintf_r+0xf18>
  405f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f08:	3b02      	subs	r3, #2
  405f0a:	9311      	str	r3, [sp, #68]	; 0x44
  405f0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405f10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f16:	3b01      	subs	r3, #1
  405f18:	2b00      	cmp	r3, #0
  405f1a:	931f      	str	r3, [sp, #124]	; 0x7c
  405f1c:	bfbd      	ittte	lt
  405f1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405f20:	f1c3 0301 	rsblt	r3, r3, #1
  405f24:	222d      	movlt	r2, #45	; 0x2d
  405f26:	222b      	movge	r2, #43	; 0x2b
  405f28:	2b09      	cmp	r3, #9
  405f2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405f2e:	f340 8116 	ble.w	40615e <_svfprintf_r+0x1342>
  405f32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405f36:	4620      	mov	r0, r4
  405f38:	4dab      	ldr	r5, [pc, #684]	; (4061e8 <_svfprintf_r+0x13cc>)
  405f3a:	e000      	b.n	405f3e <_svfprintf_r+0x1122>
  405f3c:	4610      	mov	r0, r2
  405f3e:	fb85 1203 	smull	r1, r2, r5, r3
  405f42:	17d9      	asrs	r1, r3, #31
  405f44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405f48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405f4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405f50:	3230      	adds	r2, #48	; 0x30
  405f52:	2909      	cmp	r1, #9
  405f54:	f800 2c01 	strb.w	r2, [r0, #-1]
  405f58:	460b      	mov	r3, r1
  405f5a:	f100 32ff 	add.w	r2, r0, #4294967295
  405f5e:	dced      	bgt.n	405f3c <_svfprintf_r+0x1120>
  405f60:	3330      	adds	r3, #48	; 0x30
  405f62:	3802      	subs	r0, #2
  405f64:	b2d9      	uxtb	r1, r3
  405f66:	4284      	cmp	r4, r0
  405f68:	f802 1c01 	strb.w	r1, [r2, #-1]
  405f6c:	f240 8165 	bls.w	40623a <_svfprintf_r+0x141e>
  405f70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405f74:	4613      	mov	r3, r2
  405f76:	e001      	b.n	405f7c <_svfprintf_r+0x1160>
  405f78:	f813 1b01 	ldrb.w	r1, [r3], #1
  405f7c:	f800 1b01 	strb.w	r1, [r0], #1
  405f80:	42a3      	cmp	r3, r4
  405f82:	d1f9      	bne.n	405f78 <_svfprintf_r+0x115c>
  405f84:	3301      	adds	r3, #1
  405f86:	1a9b      	subs	r3, r3, r2
  405f88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405f8c:	4413      	add	r3, r2
  405f8e:	aa21      	add	r2, sp, #132	; 0x84
  405f90:	1a9b      	subs	r3, r3, r2
  405f92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405f94:	931b      	str	r3, [sp, #108]	; 0x6c
  405f96:	2a01      	cmp	r2, #1
  405f98:	4413      	add	r3, r2
  405f9a:	930e      	str	r3, [sp, #56]	; 0x38
  405f9c:	f340 8119 	ble.w	4061d2 <_svfprintf_r+0x13b6>
  405fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405fa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405fa4:	4413      	add	r3, r2
  405fa6:	930e      	str	r3, [sp, #56]	; 0x38
  405fa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fac:	9308      	str	r3, [sp, #32]
  405fae:	2300      	movs	r3, #0
  405fb0:	9312      	str	r3, [sp, #72]	; 0x48
  405fb2:	e6cf      	b.n	405d54 <_svfprintf_r+0xf38>
  405fb4:	aa25      	add	r2, sp, #148	; 0x94
  405fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fba:	f003 fec9 	bl	409d50 <__ssprint_r>
  405fbe:	2800      	cmp	r0, #0
  405fc0:	f47e affe 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405fc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fc6:	46c8      	mov	r8, r9
  405fc8:	e4d7      	b.n	40597a <_svfprintf_r+0xb5e>
  405fca:	4623      	mov	r3, r4
  405fcc:	e6a2      	b.n	405d14 <_svfprintf_r+0xef8>
  405fce:	aa25      	add	r2, sp, #148	; 0x94
  405fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fd4:	f003 febc 	bl	409d50 <__ssprint_r>
  405fd8:	2800      	cmp	r0, #0
  405fda:	f47e aff1 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405fde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405fe0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fe2:	46c8      	mov	r8, r9
  405fe4:	e5ae      	b.n	405b44 <_svfprintf_r+0xd28>
  405fe6:	aa25      	add	r2, sp, #148	; 0x94
  405fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fea:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fec:	f003 feb0 	bl	409d50 <__ssprint_r>
  405ff0:	2800      	cmp	r0, #0
  405ff2:	f47e afe5 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405ff6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ffa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ffc:	1a9a      	subs	r2, r3, r2
  405ffe:	46c8      	mov	r8, r9
  406000:	e5b8      	b.n	405b74 <_svfprintf_r+0xd58>
  406002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406004:	9612      	str	r6, [sp, #72]	; 0x48
  406006:	2b06      	cmp	r3, #6
  406008:	bf28      	it	cs
  40600a:	2306      	movcs	r3, #6
  40600c:	960a      	str	r6, [sp, #40]	; 0x28
  40600e:	4637      	mov	r7, r6
  406010:	9308      	str	r3, [sp, #32]
  406012:	950f      	str	r5, [sp, #60]	; 0x3c
  406014:	f8cd b01c 	str.w	fp, [sp, #28]
  406018:	930e      	str	r3, [sp, #56]	; 0x38
  40601a:	4e74      	ldr	r6, [pc, #464]	; (4061ec <_svfprintf_r+0x13d0>)
  40601c:	f7ff b816 	b.w	40504c <_svfprintf_r+0x230>
  406020:	a823      	add	r0, sp, #140	; 0x8c
  406022:	a920      	add	r1, sp, #128	; 0x80
  406024:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406026:	9004      	str	r0, [sp, #16]
  406028:	9103      	str	r1, [sp, #12]
  40602a:	a81f      	add	r0, sp, #124	; 0x7c
  40602c:	2103      	movs	r1, #3
  40602e:	9002      	str	r0, [sp, #8]
  406030:	9a08      	ldr	r2, [sp, #32]
  406032:	9501      	str	r5, [sp, #4]
  406034:	463b      	mov	r3, r7
  406036:	9100      	str	r1, [sp, #0]
  406038:	980c      	ldr	r0, [sp, #48]	; 0x30
  40603a:	f001 fd15 	bl	407a68 <_dtoa_r>
  40603e:	4606      	mov	r6, r0
  406040:	1944      	adds	r4, r0, r5
  406042:	e72b      	b.n	405e9c <_svfprintf_r+0x1080>
  406044:	2306      	movs	r3, #6
  406046:	930a      	str	r3, [sp, #40]	; 0x28
  406048:	e61d      	b.n	405c86 <_svfprintf_r+0xe6a>
  40604a:	272d      	movs	r7, #45	; 0x2d
  40604c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406050:	f7ff bacd 	b.w	4055ee <_svfprintf_r+0x7d2>
  406054:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406058:	4413      	add	r3, r2
  40605a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40605c:	930e      	str	r3, [sp, #56]	; 0x38
  40605e:	2a00      	cmp	r2, #0
  406060:	f340 80b0 	ble.w	4061c4 <_svfprintf_r+0x13a8>
  406064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406068:	9308      	str	r3, [sp, #32]
  40606a:	2367      	movs	r3, #103	; 0x67
  40606c:	9311      	str	r3, [sp, #68]	; 0x44
  40606e:	e671      	b.n	405d54 <_svfprintf_r+0xf38>
  406070:	2b00      	cmp	r3, #0
  406072:	f340 80c3 	ble.w	4061fc <_svfprintf_r+0x13e0>
  406076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406078:	2a00      	cmp	r2, #0
  40607a:	f040 8099 	bne.w	4061b0 <_svfprintf_r+0x1394>
  40607e:	f01b 0f01 	tst.w	fp, #1
  406082:	f040 8095 	bne.w	4061b0 <_svfprintf_r+0x1394>
  406086:	9308      	str	r3, [sp, #32]
  406088:	930e      	str	r3, [sp, #56]	; 0x38
  40608a:	e663      	b.n	405d54 <_svfprintf_r+0xf38>
  40608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40608e:	9308      	str	r3, [sp, #32]
  406090:	930e      	str	r3, [sp, #56]	; 0x38
  406092:	900a      	str	r0, [sp, #40]	; 0x28
  406094:	950f      	str	r5, [sp, #60]	; 0x3c
  406096:	f8cd b01c 	str.w	fp, [sp, #28]
  40609a:	9012      	str	r0, [sp, #72]	; 0x48
  40609c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4060a0:	f7fe bfd4 	b.w	40504c <_svfprintf_r+0x230>
  4060a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060a6:	2b47      	cmp	r3, #71	; 0x47
  4060a8:	f47f ae20 	bne.w	405cec <_svfprintf_r+0xed0>
  4060ac:	f01b 0f01 	tst.w	fp, #1
  4060b0:	f47f aeee 	bne.w	405e90 <_svfprintf_r+0x1074>
  4060b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4060b6:	1b9b      	subs	r3, r3, r6
  4060b8:	9313      	str	r3, [sp, #76]	; 0x4c
  4060ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4060bc:	2b47      	cmp	r3, #71	; 0x47
  4060be:	f43f af18 	beq.w	405ef2 <_svfprintf_r+0x10d6>
  4060c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4060c4:	9312      	str	r3, [sp, #72]	; 0x48
  4060c6:	e721      	b.n	405f0c <_svfprintf_r+0x10f0>
  4060c8:	424f      	negs	r7, r1
  4060ca:	3110      	adds	r1, #16
  4060cc:	4d48      	ldr	r5, [pc, #288]	; (4061f0 <_svfprintf_r+0x13d4>)
  4060ce:	da2f      	bge.n	406130 <_svfprintf_r+0x1314>
  4060d0:	2410      	movs	r4, #16
  4060d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4060d6:	e004      	b.n	4060e2 <_svfprintf_r+0x12c6>
  4060d8:	f108 0808 	add.w	r8, r8, #8
  4060dc:	3f10      	subs	r7, #16
  4060de:	2f10      	cmp	r7, #16
  4060e0:	dd26      	ble.n	406130 <_svfprintf_r+0x1314>
  4060e2:	3301      	adds	r3, #1
  4060e4:	3210      	adds	r2, #16
  4060e6:	2b07      	cmp	r3, #7
  4060e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4060ea:	9326      	str	r3, [sp, #152]	; 0x98
  4060ec:	f8c8 5000 	str.w	r5, [r8]
  4060f0:	f8c8 4004 	str.w	r4, [r8, #4]
  4060f4:	ddf0      	ble.n	4060d8 <_svfprintf_r+0x12bc>
  4060f6:	aa25      	add	r2, sp, #148	; 0x94
  4060f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4060fa:	4658      	mov	r0, fp
  4060fc:	f003 fe28 	bl	409d50 <__ssprint_r>
  406100:	2800      	cmp	r0, #0
  406102:	f47e af5d 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  406106:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406108:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40610a:	46c8      	mov	r8, r9
  40610c:	e7e6      	b.n	4060dc <_svfprintf_r+0x12c0>
  40610e:	aa25      	add	r2, sp, #148	; 0x94
  406110:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406112:	980c      	ldr	r0, [sp, #48]	; 0x30
  406114:	f003 fe1c 	bl	409d50 <__ssprint_r>
  406118:	2800      	cmp	r0, #0
  40611a:	f47e af51 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  40611e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406120:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406122:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406124:	46c8      	mov	r8, r9
  406126:	e667      	b.n	405df8 <_svfprintf_r+0xfdc>
  406128:	2000      	movs	r0, #0
  40612a:	900a      	str	r0, [sp, #40]	; 0x28
  40612c:	f7fe bed0 	b.w	404ed0 <_svfprintf_r+0xb4>
  406130:	3301      	adds	r3, #1
  406132:	443a      	add	r2, r7
  406134:	2b07      	cmp	r3, #7
  406136:	e888 00a0 	stmia.w	r8, {r5, r7}
  40613a:	9227      	str	r2, [sp, #156]	; 0x9c
  40613c:	9326      	str	r3, [sp, #152]	; 0x98
  40613e:	f108 0808 	add.w	r8, r8, #8
  406142:	f77f ae5c 	ble.w	405dfe <_svfprintf_r+0xfe2>
  406146:	aa25      	add	r2, sp, #148	; 0x94
  406148:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40614a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40614c:	f003 fe00 	bl	409d50 <__ssprint_r>
  406150:	2800      	cmp	r0, #0
  406152:	f47e af35 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  406156:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406158:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40615a:	46c8      	mov	r8, r9
  40615c:	e64f      	b.n	405dfe <_svfprintf_r+0xfe2>
  40615e:	3330      	adds	r3, #48	; 0x30
  406160:	2230      	movs	r2, #48	; 0x30
  406162:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  406166:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40616a:	ab22      	add	r3, sp, #136	; 0x88
  40616c:	e70f      	b.n	405f8e <_svfprintf_r+0x1172>
  40616e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406170:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406172:	4413      	add	r3, r2
  406174:	930e      	str	r3, [sp, #56]	; 0x38
  406176:	e775      	b.n	406064 <_svfprintf_r+0x1248>
  406178:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40617a:	e5cb      	b.n	405d14 <_svfprintf_r+0xef8>
  40617c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40617e:	4e1d      	ldr	r6, [pc, #116]	; (4061f4 <_svfprintf_r+0x13d8>)
  406180:	2b00      	cmp	r3, #0
  406182:	bfb6      	itet	lt
  406184:	272d      	movlt	r7, #45	; 0x2d
  406186:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40618a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40618e:	4b1a      	ldr	r3, [pc, #104]	; (4061f8 <_svfprintf_r+0x13dc>)
  406190:	f7ff ba2f 	b.w	4055f2 <_svfprintf_r+0x7d6>
  406194:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406196:	9808      	ldr	r0, [sp, #32]
  406198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40619a:	4639      	mov	r1, r7
  40619c:	f004 fd66 	bl	40ac6c <__aeabi_dcmpeq>
  4061a0:	2800      	cmp	r0, #0
  4061a2:	f47f ae7f 	bne.w	405ea4 <_svfprintf_r+0x1088>
  4061a6:	f1c5 0501 	rsb	r5, r5, #1
  4061aa:	951f      	str	r5, [sp, #124]	; 0x7c
  4061ac:	442c      	add	r4, r5
  4061ae:	e59e      	b.n	405cee <_svfprintf_r+0xed2>
  4061b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4061b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4061b4:	4413      	add	r3, r2
  4061b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061b8:	441a      	add	r2, r3
  4061ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4061be:	920e      	str	r2, [sp, #56]	; 0x38
  4061c0:	9308      	str	r3, [sp, #32]
  4061c2:	e5c7      	b.n	405d54 <_svfprintf_r+0xf38>
  4061c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4061c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4061c8:	f1c3 0301 	rsb	r3, r3, #1
  4061cc:	441a      	add	r2, r3
  4061ce:	4613      	mov	r3, r2
  4061d0:	e7d0      	b.n	406174 <_svfprintf_r+0x1358>
  4061d2:	f01b 0301 	ands.w	r3, fp, #1
  4061d6:	9312      	str	r3, [sp, #72]	; 0x48
  4061d8:	f47f aee2 	bne.w	405fa0 <_svfprintf_r+0x1184>
  4061dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4061de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4061e2:	9308      	str	r3, [sp, #32]
  4061e4:	e5b6      	b.n	405d54 <_svfprintf_r+0xf38>
  4061e6:	bf00      	nop
  4061e8:	66666667 	.word	0x66666667
  4061ec:	0040b494 	.word	0x0040b494
  4061f0:	0040b4b0 	.word	0x0040b4b0
  4061f4:	0040b468 	.word	0x0040b468
  4061f8:	0040b464 	.word	0x0040b464
  4061fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061fe:	b913      	cbnz	r3, 406206 <_svfprintf_r+0x13ea>
  406200:	f01b 0f01 	tst.w	fp, #1
  406204:	d002      	beq.n	40620c <_svfprintf_r+0x13f0>
  406206:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406208:	3301      	adds	r3, #1
  40620a:	e7d4      	b.n	4061b6 <_svfprintf_r+0x139a>
  40620c:	2301      	movs	r3, #1
  40620e:	e73a      	b.n	406086 <_svfprintf_r+0x126a>
  406210:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406212:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406216:	6828      	ldr	r0, [r5, #0]
  406218:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40621c:	900a      	str	r0, [sp, #40]	; 0x28
  40621e:	4628      	mov	r0, r5
  406220:	3004      	adds	r0, #4
  406222:	46a2      	mov	sl, r4
  406224:	900f      	str	r0, [sp, #60]	; 0x3c
  406226:	f7fe be51 	b.w	404ecc <_svfprintf_r+0xb0>
  40622a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40622e:	f7ff b867 	b.w	405300 <_svfprintf_r+0x4e4>
  406232:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406236:	f7ff ba15 	b.w	405664 <_svfprintf_r+0x848>
  40623a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40623e:	e6a6      	b.n	405f8e <_svfprintf_r+0x1172>
  406240:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406244:	f7ff b8eb 	b.w	40541e <_svfprintf_r+0x602>
  406248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40624a:	230c      	movs	r3, #12
  40624c:	6013      	str	r3, [r2, #0]
  40624e:	f04f 33ff 	mov.w	r3, #4294967295
  406252:	9309      	str	r3, [sp, #36]	; 0x24
  406254:	f7fe bebd 	b.w	404fd2 <_svfprintf_r+0x1b6>
  406258:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40625c:	f7ff b99a 	b.w	405594 <_svfprintf_r+0x778>
  406260:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406264:	f7ff b976 	b.w	405554 <_svfprintf_r+0x738>
  406268:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40626c:	f7ff b959 	b.w	405522 <_svfprintf_r+0x706>
  406270:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406274:	f7ff b912 	b.w	40549c <_svfprintf_r+0x680>

00406278 <_vfprintf_r>:
  406278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40627c:	b0c1      	sub	sp, #260	; 0x104
  40627e:	461d      	mov	r5, r3
  406280:	468a      	mov	sl, r1
  406282:	4691      	mov	r9, r2
  406284:	4604      	mov	r4, r0
  406286:	9008      	str	r0, [sp, #32]
  406288:	f002 ff3a 	bl	409100 <_localeconv_r>
  40628c:	6803      	ldr	r3, [r0, #0]
  40628e:	9315      	str	r3, [sp, #84]	; 0x54
  406290:	4618      	mov	r0, r3
  406292:	f7fe fd55 	bl	404d40 <strlen>
  406296:	950e      	str	r5, [sp, #56]	; 0x38
  406298:	9014      	str	r0, [sp, #80]	; 0x50
  40629a:	b11c      	cbz	r4, 4062a4 <_vfprintf_r+0x2c>
  40629c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40629e:	2b00      	cmp	r3, #0
  4062a0:	f000 825f 	beq.w	406762 <_vfprintf_r+0x4ea>
  4062a4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4062a8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4062ac:	f013 0f01 	tst.w	r3, #1
  4062b0:	b293      	uxth	r3, r2
  4062b2:	d102      	bne.n	4062ba <_vfprintf_r+0x42>
  4062b4:	0599      	lsls	r1, r3, #22
  4062b6:	f140 8275 	bpl.w	4067a4 <_vfprintf_r+0x52c>
  4062ba:	049f      	lsls	r7, r3, #18
  4062bc:	d40a      	bmi.n	4062d4 <_vfprintf_r+0x5c>
  4062be:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  4062c2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  4062c6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4062ca:	f8aa 300c 	strh.w	r3, [sl, #12]
  4062ce:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  4062d2:	b29b      	uxth	r3, r3
  4062d4:	071e      	lsls	r6, r3, #28
  4062d6:	f140 8223 	bpl.w	406720 <_vfprintf_r+0x4a8>
  4062da:	f8da 2010 	ldr.w	r2, [sl, #16]
  4062de:	2a00      	cmp	r2, #0
  4062e0:	f000 821e 	beq.w	406720 <_vfprintf_r+0x4a8>
  4062e4:	f003 021a 	and.w	r2, r3, #26
  4062e8:	2a0a      	cmp	r2, #10
  4062ea:	f000 823e 	beq.w	40676a <_vfprintf_r+0x4f2>
  4062ee:	2300      	movs	r3, #0
  4062f0:	4618      	mov	r0, r3
  4062f2:	9311      	str	r3, [sp, #68]	; 0x44
  4062f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4062f6:	9312      	str	r3, [sp, #72]	; 0x48
  4062f8:	9325      	str	r3, [sp, #148]	; 0x94
  4062fa:	9324      	str	r3, [sp, #144]	; 0x90
  4062fc:	9318      	str	r3, [sp, #96]	; 0x60
  4062fe:	9319      	str	r3, [sp, #100]	; 0x64
  406300:	930b      	str	r3, [sp, #44]	; 0x2c
  406302:	ab30      	add	r3, sp, #192	; 0xc0
  406304:	9323      	str	r3, [sp, #140]	; 0x8c
  406306:	4698      	mov	r8, r3
  406308:	9016      	str	r0, [sp, #88]	; 0x58
  40630a:	9017      	str	r0, [sp, #92]	; 0x5c
  40630c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  406310:	f899 3000 	ldrb.w	r3, [r9]
  406314:	464c      	mov	r4, r9
  406316:	b1eb      	cbz	r3, 406354 <_vfprintf_r+0xdc>
  406318:	2b25      	cmp	r3, #37	; 0x25
  40631a:	d102      	bne.n	406322 <_vfprintf_r+0xaa>
  40631c:	e01a      	b.n	406354 <_vfprintf_r+0xdc>
  40631e:	2b25      	cmp	r3, #37	; 0x25
  406320:	d003      	beq.n	40632a <_vfprintf_r+0xb2>
  406322:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406326:	2b00      	cmp	r3, #0
  406328:	d1f9      	bne.n	40631e <_vfprintf_r+0xa6>
  40632a:	eba4 0509 	sub.w	r5, r4, r9
  40632e:	b18d      	cbz	r5, 406354 <_vfprintf_r+0xdc>
  406330:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406332:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406334:	f8c8 9000 	str.w	r9, [r8]
  406338:	3301      	adds	r3, #1
  40633a:	442a      	add	r2, r5
  40633c:	2b07      	cmp	r3, #7
  40633e:	f8c8 5004 	str.w	r5, [r8, #4]
  406342:	9225      	str	r2, [sp, #148]	; 0x94
  406344:	9324      	str	r3, [sp, #144]	; 0x90
  406346:	f300 8201 	bgt.w	40674c <_vfprintf_r+0x4d4>
  40634a:	f108 0808 	add.w	r8, r8, #8
  40634e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406350:	442b      	add	r3, r5
  406352:	930b      	str	r3, [sp, #44]	; 0x2c
  406354:	7823      	ldrb	r3, [r4, #0]
  406356:	2b00      	cmp	r3, #0
  406358:	f000 83f0 	beq.w	406b3c <_vfprintf_r+0x8c4>
  40635c:	2300      	movs	r3, #0
  40635e:	461a      	mov	r2, r3
  406360:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406364:	4619      	mov	r1, r3
  406366:	930c      	str	r3, [sp, #48]	; 0x30
  406368:	469b      	mov	fp, r3
  40636a:	7866      	ldrb	r6, [r4, #1]
  40636c:	f04f 33ff 	mov.w	r3, #4294967295
  406370:	f104 0901 	add.w	r9, r4, #1
  406374:	9309      	str	r3, [sp, #36]	; 0x24
  406376:	f109 0901 	add.w	r9, r9, #1
  40637a:	f1a6 0320 	sub.w	r3, r6, #32
  40637e:	2b58      	cmp	r3, #88	; 0x58
  406380:	f200 83bf 	bhi.w	406b02 <_vfprintf_r+0x88a>
  406384:	e8df f013 	tbh	[pc, r3, lsl #1]
  406388:	03bd02e0 	.word	0x03bd02e0
  40638c:	034f03bd 	.word	0x034f03bd
  406390:	03bd03bd 	.word	0x03bd03bd
  406394:	03bd03bd 	.word	0x03bd03bd
  406398:	03bd03bd 	.word	0x03bd03bd
  40639c:	03080354 	.word	0x03080354
  4063a0:	021a03bd 	.word	0x021a03bd
  4063a4:	03bd02e8 	.word	0x03bd02e8
  4063a8:	033a0303 	.word	0x033a0303
  4063ac:	033a033a 	.word	0x033a033a
  4063b0:	033a033a 	.word	0x033a033a
  4063b4:	033a033a 	.word	0x033a033a
  4063b8:	033a033a 	.word	0x033a033a
  4063bc:	03bd03bd 	.word	0x03bd03bd
  4063c0:	03bd03bd 	.word	0x03bd03bd
  4063c4:	03bd03bd 	.word	0x03bd03bd
  4063c8:	03bd03bd 	.word	0x03bd03bd
  4063cc:	03bd03bd 	.word	0x03bd03bd
  4063d0:	03620349 	.word	0x03620349
  4063d4:	036203bd 	.word	0x036203bd
  4063d8:	03bd03bd 	.word	0x03bd03bd
  4063dc:	03bd03bd 	.word	0x03bd03bd
  4063e0:	03bd03a2 	.word	0x03bd03a2
  4063e4:	006f03bd 	.word	0x006f03bd
  4063e8:	03bd03bd 	.word	0x03bd03bd
  4063ec:	03bd03bd 	.word	0x03bd03bd
  4063f0:	005903bd 	.word	0x005903bd
  4063f4:	03bd03bd 	.word	0x03bd03bd
  4063f8:	03bd031e 	.word	0x03bd031e
  4063fc:	03bd03bd 	.word	0x03bd03bd
  406400:	03bd03bd 	.word	0x03bd03bd
  406404:	03bd03bd 	.word	0x03bd03bd
  406408:	03bd03bd 	.word	0x03bd03bd
  40640c:	032403bd 	.word	0x032403bd
  406410:	03620273 	.word	0x03620273
  406414:	03620362 	.word	0x03620362
  406418:	027302b7 	.word	0x027302b7
  40641c:	03bd03bd 	.word	0x03bd03bd
  406420:	03bd02bc 	.word	0x03bd02bc
  406424:	007102c9 	.word	0x007102c9
  406428:	0247030d 	.word	0x0247030d
  40642c:	025203bd 	.word	0x025203bd
  406430:	005b03bd 	.word	0x005b03bd
  406434:	03bd03bd 	.word	0x03bd03bd
  406438:	021f      	.short	0x021f
  40643a:	f04b 0b10 	orr.w	fp, fp, #16
  40643e:	f01b 0f20 	tst.w	fp, #32
  406442:	f040 8353 	bne.w	406aec <_vfprintf_r+0x874>
  406446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406448:	f01b 0f10 	tst.w	fp, #16
  40644c:	4613      	mov	r3, r2
  40644e:	f040 85b4 	bne.w	406fba <_vfprintf_r+0xd42>
  406452:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406456:	f000 85b0 	beq.w	406fba <_vfprintf_r+0xd42>
  40645a:	8814      	ldrh	r4, [r2, #0]
  40645c:	3204      	adds	r2, #4
  40645e:	2500      	movs	r5, #0
  406460:	2301      	movs	r3, #1
  406462:	920e      	str	r2, [sp, #56]	; 0x38
  406464:	e014      	b.n	406490 <_vfprintf_r+0x218>
  406466:	f04b 0b10 	orr.w	fp, fp, #16
  40646a:	f01b 0320 	ands.w	r3, fp, #32
  40646e:	f040 8332 	bne.w	406ad6 <_vfprintf_r+0x85e>
  406472:	f01b 0210 	ands.w	r2, fp, #16
  406476:	f040 8589 	bne.w	406f8c <_vfprintf_r+0xd14>
  40647a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40647e:	f000 8585 	beq.w	406f8c <_vfprintf_r+0xd14>
  406482:	990e      	ldr	r1, [sp, #56]	; 0x38
  406484:	4613      	mov	r3, r2
  406486:	460a      	mov	r2, r1
  406488:	3204      	adds	r2, #4
  40648a:	880c      	ldrh	r4, [r1, #0]
  40648c:	920e      	str	r2, [sp, #56]	; 0x38
  40648e:	2500      	movs	r5, #0
  406490:	f04f 0a00 	mov.w	sl, #0
  406494:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406498:	9909      	ldr	r1, [sp, #36]	; 0x24
  40649a:	1c4a      	adds	r2, r1, #1
  40649c:	f000 820b 	beq.w	4068b6 <_vfprintf_r+0x63e>
  4064a0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4064a4:	9206      	str	r2, [sp, #24]
  4064a6:	ea54 0205 	orrs.w	r2, r4, r5
  4064aa:	f040 820a 	bne.w	4068c2 <_vfprintf_r+0x64a>
  4064ae:	2900      	cmp	r1, #0
  4064b0:	f040 846f 	bne.w	406d92 <_vfprintf_r+0xb1a>
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	f040 852d 	bne.w	406f14 <_vfprintf_r+0xc9c>
  4064ba:	f01b 0301 	ands.w	r3, fp, #1
  4064be:	930d      	str	r3, [sp, #52]	; 0x34
  4064c0:	f000 8668 	beq.w	407194 <_vfprintf_r+0xf1c>
  4064c4:	af40      	add	r7, sp, #256	; 0x100
  4064c6:	2330      	movs	r3, #48	; 0x30
  4064c8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4064cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4064d0:	4293      	cmp	r3, r2
  4064d2:	bfb8      	it	lt
  4064d4:	4613      	movlt	r3, r2
  4064d6:	9307      	str	r3, [sp, #28]
  4064d8:	2300      	movs	r3, #0
  4064da:	9310      	str	r3, [sp, #64]	; 0x40
  4064dc:	f1ba 0f00 	cmp.w	sl, #0
  4064e0:	d002      	beq.n	4064e8 <_vfprintf_r+0x270>
  4064e2:	9b07      	ldr	r3, [sp, #28]
  4064e4:	3301      	adds	r3, #1
  4064e6:	9307      	str	r3, [sp, #28]
  4064e8:	9b06      	ldr	r3, [sp, #24]
  4064ea:	f013 0302 	ands.w	r3, r3, #2
  4064ee:	930f      	str	r3, [sp, #60]	; 0x3c
  4064f0:	d002      	beq.n	4064f8 <_vfprintf_r+0x280>
  4064f2:	9b07      	ldr	r3, [sp, #28]
  4064f4:	3302      	adds	r3, #2
  4064f6:	9307      	str	r3, [sp, #28]
  4064f8:	9b06      	ldr	r3, [sp, #24]
  4064fa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4064fe:	f040 831b 	bne.w	406b38 <_vfprintf_r+0x8c0>
  406502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406504:	9a07      	ldr	r2, [sp, #28]
  406506:	eba3 0b02 	sub.w	fp, r3, r2
  40650a:	f1bb 0f00 	cmp.w	fp, #0
  40650e:	f340 8313 	ble.w	406b38 <_vfprintf_r+0x8c0>
  406512:	f1bb 0f10 	cmp.w	fp, #16
  406516:	9925      	ldr	r1, [sp, #148]	; 0x94
  406518:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40651a:	dd28      	ble.n	40656e <_vfprintf_r+0x2f6>
  40651c:	4643      	mov	r3, r8
  40651e:	2410      	movs	r4, #16
  406520:	46a8      	mov	r8, r5
  406522:	f8dd a020 	ldr.w	sl, [sp, #32]
  406526:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406528:	e006      	b.n	406538 <_vfprintf_r+0x2c0>
  40652a:	f1ab 0b10 	sub.w	fp, fp, #16
  40652e:	f1bb 0f10 	cmp.w	fp, #16
  406532:	f103 0308 	add.w	r3, r3, #8
  406536:	dd18      	ble.n	40656a <_vfprintf_r+0x2f2>
  406538:	3201      	adds	r2, #1
  40653a:	48b9      	ldr	r0, [pc, #740]	; (406820 <_vfprintf_r+0x5a8>)
  40653c:	9224      	str	r2, [sp, #144]	; 0x90
  40653e:	3110      	adds	r1, #16
  406540:	2a07      	cmp	r2, #7
  406542:	9125      	str	r1, [sp, #148]	; 0x94
  406544:	e883 0011 	stmia.w	r3, {r0, r4}
  406548:	ddef      	ble.n	40652a <_vfprintf_r+0x2b2>
  40654a:	aa23      	add	r2, sp, #140	; 0x8c
  40654c:	4629      	mov	r1, r5
  40654e:	4650      	mov	r0, sl
  406550:	f003 fcbc 	bl	409ecc <__sprint_r>
  406554:	2800      	cmp	r0, #0
  406556:	f040 836a 	bne.w	406c2e <_vfprintf_r+0x9b6>
  40655a:	f1ab 0b10 	sub.w	fp, fp, #16
  40655e:	f1bb 0f10 	cmp.w	fp, #16
  406562:	9925      	ldr	r1, [sp, #148]	; 0x94
  406564:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406566:	ab30      	add	r3, sp, #192	; 0xc0
  406568:	dce6      	bgt.n	406538 <_vfprintf_r+0x2c0>
  40656a:	4645      	mov	r5, r8
  40656c:	4698      	mov	r8, r3
  40656e:	3201      	adds	r2, #1
  406570:	4bab      	ldr	r3, [pc, #684]	; (406820 <_vfprintf_r+0x5a8>)
  406572:	9224      	str	r2, [sp, #144]	; 0x90
  406574:	eb0b 0401 	add.w	r4, fp, r1
  406578:	2a07      	cmp	r2, #7
  40657a:	9425      	str	r4, [sp, #148]	; 0x94
  40657c:	e888 0808 	stmia.w	r8, {r3, fp}
  406580:	f300 84cd 	bgt.w	406f1e <_vfprintf_r+0xca6>
  406584:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406588:	f108 0808 	add.w	r8, r8, #8
  40658c:	f1ba 0f00 	cmp.w	sl, #0
  406590:	d00e      	beq.n	4065b0 <_vfprintf_r+0x338>
  406592:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406594:	3301      	adds	r3, #1
  406596:	3401      	adds	r4, #1
  406598:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40659c:	2201      	movs	r2, #1
  40659e:	2b07      	cmp	r3, #7
  4065a0:	9425      	str	r4, [sp, #148]	; 0x94
  4065a2:	9324      	str	r3, [sp, #144]	; 0x90
  4065a4:	e888 0006 	stmia.w	r8, {r1, r2}
  4065a8:	f300 840a 	bgt.w	406dc0 <_vfprintf_r+0xb48>
  4065ac:	f108 0808 	add.w	r8, r8, #8
  4065b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4065b2:	b16b      	cbz	r3, 4065d0 <_vfprintf_r+0x358>
  4065b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4065b6:	3301      	adds	r3, #1
  4065b8:	3402      	adds	r4, #2
  4065ba:	a91c      	add	r1, sp, #112	; 0x70
  4065bc:	2202      	movs	r2, #2
  4065be:	2b07      	cmp	r3, #7
  4065c0:	9425      	str	r4, [sp, #148]	; 0x94
  4065c2:	9324      	str	r3, [sp, #144]	; 0x90
  4065c4:	e888 0006 	stmia.w	r8, {r1, r2}
  4065c8:	f300 8406 	bgt.w	406dd8 <_vfprintf_r+0xb60>
  4065cc:	f108 0808 	add.w	r8, r8, #8
  4065d0:	2d80      	cmp	r5, #128	; 0x80
  4065d2:	f000 832e 	beq.w	406c32 <_vfprintf_r+0x9ba>
  4065d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4065d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4065da:	eba3 0a02 	sub.w	sl, r3, r2
  4065de:	f1ba 0f00 	cmp.w	sl, #0
  4065e2:	dd3b      	ble.n	40665c <_vfprintf_r+0x3e4>
  4065e4:	f1ba 0f10 	cmp.w	sl, #16
  4065e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4065ea:	4d8e      	ldr	r5, [pc, #568]	; (406824 <_vfprintf_r+0x5ac>)
  4065ec:	dd2b      	ble.n	406646 <_vfprintf_r+0x3ce>
  4065ee:	4642      	mov	r2, r8
  4065f0:	4621      	mov	r1, r4
  4065f2:	46b0      	mov	r8, r6
  4065f4:	f04f 0b10 	mov.w	fp, #16
  4065f8:	462e      	mov	r6, r5
  4065fa:	9c08      	ldr	r4, [sp, #32]
  4065fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4065fe:	e006      	b.n	40660e <_vfprintf_r+0x396>
  406600:	f1aa 0a10 	sub.w	sl, sl, #16
  406604:	f1ba 0f10 	cmp.w	sl, #16
  406608:	f102 0208 	add.w	r2, r2, #8
  40660c:	dd17      	ble.n	40663e <_vfprintf_r+0x3c6>
  40660e:	3301      	adds	r3, #1
  406610:	3110      	adds	r1, #16
  406612:	2b07      	cmp	r3, #7
  406614:	9125      	str	r1, [sp, #148]	; 0x94
  406616:	9324      	str	r3, [sp, #144]	; 0x90
  406618:	e882 0840 	stmia.w	r2, {r6, fp}
  40661c:	ddf0      	ble.n	406600 <_vfprintf_r+0x388>
  40661e:	aa23      	add	r2, sp, #140	; 0x8c
  406620:	4629      	mov	r1, r5
  406622:	4620      	mov	r0, r4
  406624:	f003 fc52 	bl	409ecc <__sprint_r>
  406628:	2800      	cmp	r0, #0
  40662a:	f040 8300 	bne.w	406c2e <_vfprintf_r+0x9b6>
  40662e:	f1aa 0a10 	sub.w	sl, sl, #16
  406632:	f1ba 0f10 	cmp.w	sl, #16
  406636:	9925      	ldr	r1, [sp, #148]	; 0x94
  406638:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40663a:	aa30      	add	r2, sp, #192	; 0xc0
  40663c:	dce7      	bgt.n	40660e <_vfprintf_r+0x396>
  40663e:	4635      	mov	r5, r6
  406640:	460c      	mov	r4, r1
  406642:	4646      	mov	r6, r8
  406644:	4690      	mov	r8, r2
  406646:	3301      	adds	r3, #1
  406648:	4454      	add	r4, sl
  40664a:	2b07      	cmp	r3, #7
  40664c:	9425      	str	r4, [sp, #148]	; 0x94
  40664e:	9324      	str	r3, [sp, #144]	; 0x90
  406650:	e888 0420 	stmia.w	r8, {r5, sl}
  406654:	f300 83a9 	bgt.w	406daa <_vfprintf_r+0xb32>
  406658:	f108 0808 	add.w	r8, r8, #8
  40665c:	9b06      	ldr	r3, [sp, #24]
  40665e:	05db      	lsls	r3, r3, #23
  406660:	f100 8285 	bmi.w	406b6e <_vfprintf_r+0x8f6>
  406664:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406666:	990d      	ldr	r1, [sp, #52]	; 0x34
  406668:	f8c8 7000 	str.w	r7, [r8]
  40666c:	3301      	adds	r3, #1
  40666e:	440c      	add	r4, r1
  406670:	2b07      	cmp	r3, #7
  406672:	9425      	str	r4, [sp, #148]	; 0x94
  406674:	f8c8 1004 	str.w	r1, [r8, #4]
  406678:	9324      	str	r3, [sp, #144]	; 0x90
  40667a:	f300 8375 	bgt.w	406d68 <_vfprintf_r+0xaf0>
  40667e:	f108 0808 	add.w	r8, r8, #8
  406682:	9b06      	ldr	r3, [sp, #24]
  406684:	0759      	lsls	r1, r3, #29
  406686:	d53b      	bpl.n	406700 <_vfprintf_r+0x488>
  406688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40668a:	9a07      	ldr	r2, [sp, #28]
  40668c:	1a9d      	subs	r5, r3, r2
  40668e:	2d00      	cmp	r5, #0
  406690:	dd36      	ble.n	406700 <_vfprintf_r+0x488>
  406692:	2d10      	cmp	r5, #16
  406694:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406696:	dd21      	ble.n	4066dc <_vfprintf_r+0x464>
  406698:	2610      	movs	r6, #16
  40669a:	9f08      	ldr	r7, [sp, #32]
  40669c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4066a0:	e004      	b.n	4066ac <_vfprintf_r+0x434>
  4066a2:	3d10      	subs	r5, #16
  4066a4:	2d10      	cmp	r5, #16
  4066a6:	f108 0808 	add.w	r8, r8, #8
  4066aa:	dd17      	ble.n	4066dc <_vfprintf_r+0x464>
  4066ac:	3301      	adds	r3, #1
  4066ae:	4a5c      	ldr	r2, [pc, #368]	; (406820 <_vfprintf_r+0x5a8>)
  4066b0:	9324      	str	r3, [sp, #144]	; 0x90
  4066b2:	3410      	adds	r4, #16
  4066b4:	2b07      	cmp	r3, #7
  4066b6:	9425      	str	r4, [sp, #148]	; 0x94
  4066b8:	e888 0044 	stmia.w	r8, {r2, r6}
  4066bc:	ddf1      	ble.n	4066a2 <_vfprintf_r+0x42a>
  4066be:	aa23      	add	r2, sp, #140	; 0x8c
  4066c0:	4651      	mov	r1, sl
  4066c2:	4638      	mov	r0, r7
  4066c4:	f003 fc02 	bl	409ecc <__sprint_r>
  4066c8:	2800      	cmp	r0, #0
  4066ca:	f040 823f 	bne.w	406b4c <_vfprintf_r+0x8d4>
  4066ce:	3d10      	subs	r5, #16
  4066d0:	2d10      	cmp	r5, #16
  4066d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4066d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4066d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4066da:	dce7      	bgt.n	4066ac <_vfprintf_r+0x434>
  4066dc:	3301      	adds	r3, #1
  4066de:	4a50      	ldr	r2, [pc, #320]	; (406820 <_vfprintf_r+0x5a8>)
  4066e0:	9324      	str	r3, [sp, #144]	; 0x90
  4066e2:	442c      	add	r4, r5
  4066e4:	2b07      	cmp	r3, #7
  4066e6:	9425      	str	r4, [sp, #148]	; 0x94
  4066e8:	e888 0024 	stmia.w	r8, {r2, r5}
  4066ec:	dd08      	ble.n	406700 <_vfprintf_r+0x488>
  4066ee:	aa23      	add	r2, sp, #140	; 0x8c
  4066f0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4066f2:	9808      	ldr	r0, [sp, #32]
  4066f4:	f003 fbea 	bl	409ecc <__sprint_r>
  4066f8:	2800      	cmp	r0, #0
  4066fa:	f040 8347 	bne.w	406d8c <_vfprintf_r+0xb14>
  4066fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406704:	9907      	ldr	r1, [sp, #28]
  406706:	428a      	cmp	r2, r1
  406708:	bfac      	ite	ge
  40670a:	189b      	addge	r3, r3, r2
  40670c:	185b      	addlt	r3, r3, r1
  40670e:	930b      	str	r3, [sp, #44]	; 0x2c
  406710:	2c00      	cmp	r4, #0
  406712:	f040 8333 	bne.w	406d7c <_vfprintf_r+0xb04>
  406716:	2300      	movs	r3, #0
  406718:	9324      	str	r3, [sp, #144]	; 0x90
  40671a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40671e:	e5f7      	b.n	406310 <_vfprintf_r+0x98>
  406720:	4651      	mov	r1, sl
  406722:	9808      	ldr	r0, [sp, #32]
  406724:	f001 f896 	bl	407854 <__swsetup_r>
  406728:	2800      	cmp	r0, #0
  40672a:	d038      	beq.n	40679e <_vfprintf_r+0x526>
  40672c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406730:	07dd      	lsls	r5, r3, #31
  406732:	d404      	bmi.n	40673e <_vfprintf_r+0x4c6>
  406734:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406738:	059c      	lsls	r4, r3, #22
  40673a:	f140 85ca 	bpl.w	4072d2 <_vfprintf_r+0x105a>
  40673e:	f04f 33ff 	mov.w	r3, #4294967295
  406742:	930b      	str	r3, [sp, #44]	; 0x2c
  406744:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406746:	b041      	add	sp, #260	; 0x104
  406748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40674c:	aa23      	add	r2, sp, #140	; 0x8c
  40674e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406750:	9808      	ldr	r0, [sp, #32]
  406752:	f003 fbbb 	bl	409ecc <__sprint_r>
  406756:	2800      	cmp	r0, #0
  406758:	f040 8318 	bne.w	406d8c <_vfprintf_r+0xb14>
  40675c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406760:	e5f5      	b.n	40634e <_vfprintf_r+0xd6>
  406762:	9808      	ldr	r0, [sp, #32]
  406764:	f002 f9a2 	bl	408aac <__sinit>
  406768:	e59c      	b.n	4062a4 <_vfprintf_r+0x2c>
  40676a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  40676e:	2a00      	cmp	r2, #0
  406770:	f6ff adbd 	blt.w	4062ee <_vfprintf_r+0x76>
  406774:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  406778:	07d0      	lsls	r0, r2, #31
  40677a:	d405      	bmi.n	406788 <_vfprintf_r+0x510>
  40677c:	0599      	lsls	r1, r3, #22
  40677e:	d403      	bmi.n	406788 <_vfprintf_r+0x510>
  406780:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406784:	f002 fcd0 	bl	409128 <__retarget_lock_release_recursive>
  406788:	462b      	mov	r3, r5
  40678a:	464a      	mov	r2, r9
  40678c:	4651      	mov	r1, sl
  40678e:	9808      	ldr	r0, [sp, #32]
  406790:	f001 f81e 	bl	4077d0 <__sbprintf>
  406794:	900b      	str	r0, [sp, #44]	; 0x2c
  406796:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406798:	b041      	add	sp, #260	; 0x104
  40679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40679e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4067a2:	e59f      	b.n	4062e4 <_vfprintf_r+0x6c>
  4067a4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4067a8:	f002 fcbc 	bl	409124 <__retarget_lock_acquire_recursive>
  4067ac:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4067b0:	b293      	uxth	r3, r2
  4067b2:	e582      	b.n	4062ba <_vfprintf_r+0x42>
  4067b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4067b6:	930e      	str	r3, [sp, #56]	; 0x38
  4067b8:	4240      	negs	r0, r0
  4067ba:	900c      	str	r0, [sp, #48]	; 0x30
  4067bc:	f04b 0b04 	orr.w	fp, fp, #4
  4067c0:	f899 6000 	ldrb.w	r6, [r9]
  4067c4:	e5d7      	b.n	406376 <_vfprintf_r+0xfe>
  4067c6:	2a00      	cmp	r2, #0
  4067c8:	f040 87df 	bne.w	40778a <_vfprintf_r+0x1512>
  4067cc:	4b16      	ldr	r3, [pc, #88]	; (406828 <_vfprintf_r+0x5b0>)
  4067ce:	9318      	str	r3, [sp, #96]	; 0x60
  4067d0:	f01b 0f20 	tst.w	fp, #32
  4067d4:	f040 84b9 	bne.w	40714a <_vfprintf_r+0xed2>
  4067d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4067da:	f01b 0f10 	tst.w	fp, #16
  4067de:	4613      	mov	r3, r2
  4067e0:	f040 83dc 	bne.w	406f9c <_vfprintf_r+0xd24>
  4067e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4067e8:	f000 83d8 	beq.w	406f9c <_vfprintf_r+0xd24>
  4067ec:	3304      	adds	r3, #4
  4067ee:	8814      	ldrh	r4, [r2, #0]
  4067f0:	930e      	str	r3, [sp, #56]	; 0x38
  4067f2:	2500      	movs	r5, #0
  4067f4:	f01b 0f01 	tst.w	fp, #1
  4067f8:	f000 8322 	beq.w	406e40 <_vfprintf_r+0xbc8>
  4067fc:	ea54 0305 	orrs.w	r3, r4, r5
  406800:	f000 831e 	beq.w	406e40 <_vfprintf_r+0xbc8>
  406804:	2330      	movs	r3, #48	; 0x30
  406806:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40680a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40680e:	f04b 0b02 	orr.w	fp, fp, #2
  406812:	2302      	movs	r3, #2
  406814:	e63c      	b.n	406490 <_vfprintf_r+0x218>
  406816:	f04b 0b20 	orr.w	fp, fp, #32
  40681a:	f899 6000 	ldrb.w	r6, [r9]
  40681e:	e5aa      	b.n	406376 <_vfprintf_r+0xfe>
  406820:	0040b4c0 	.word	0x0040b4c0
  406824:	0040b4d0 	.word	0x0040b4d0
  406828:	0040b480 	.word	0x0040b480
  40682c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40682e:	6817      	ldr	r7, [r2, #0]
  406830:	2400      	movs	r4, #0
  406832:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406836:	1d15      	adds	r5, r2, #4
  406838:	2f00      	cmp	r7, #0
  40683a:	f000 864e 	beq.w	4074da <_vfprintf_r+0x1262>
  40683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406840:	1c53      	adds	r3, r2, #1
  406842:	f000 85cc 	beq.w	4073de <_vfprintf_r+0x1166>
  406846:	4621      	mov	r1, r4
  406848:	4638      	mov	r0, r7
  40684a:	f002 fce9 	bl	409220 <memchr>
  40684e:	2800      	cmp	r0, #0
  406850:	f000 8697 	beq.w	407582 <_vfprintf_r+0x130a>
  406854:	1bc3      	subs	r3, r0, r7
  406856:	930d      	str	r3, [sp, #52]	; 0x34
  406858:	9409      	str	r4, [sp, #36]	; 0x24
  40685a:	950e      	str	r5, [sp, #56]	; 0x38
  40685c:	f8cd b018 	str.w	fp, [sp, #24]
  406860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406864:	9307      	str	r3, [sp, #28]
  406866:	9410      	str	r4, [sp, #64]	; 0x40
  406868:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40686c:	e636      	b.n	4064dc <_vfprintf_r+0x264>
  40686e:	2a00      	cmp	r2, #0
  406870:	f040 8796 	bne.w	4077a0 <_vfprintf_r+0x1528>
  406874:	f01b 0f20 	tst.w	fp, #32
  406878:	f040 845a 	bne.w	407130 <_vfprintf_r+0xeb8>
  40687c:	f01b 0f10 	tst.w	fp, #16
  406880:	f040 83a2 	bne.w	406fc8 <_vfprintf_r+0xd50>
  406884:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406888:	f000 839e 	beq.w	406fc8 <_vfprintf_r+0xd50>
  40688c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40688e:	f9b1 4000 	ldrsh.w	r4, [r1]
  406892:	3104      	adds	r1, #4
  406894:	17e5      	asrs	r5, r4, #31
  406896:	4622      	mov	r2, r4
  406898:	462b      	mov	r3, r5
  40689a:	910e      	str	r1, [sp, #56]	; 0x38
  40689c:	2a00      	cmp	r2, #0
  40689e:	f173 0300 	sbcs.w	r3, r3, #0
  4068a2:	f2c0 8487 	blt.w	4071b4 <_vfprintf_r+0xf3c>
  4068a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4068a8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4068ac:	1c4a      	adds	r2, r1, #1
  4068ae:	f04f 0301 	mov.w	r3, #1
  4068b2:	f47f adf5 	bne.w	4064a0 <_vfprintf_r+0x228>
  4068b6:	ea54 0205 	orrs.w	r2, r4, r5
  4068ba:	f000 826c 	beq.w	406d96 <_vfprintf_r+0xb1e>
  4068be:	f8cd b018 	str.w	fp, [sp, #24]
  4068c2:	2b01      	cmp	r3, #1
  4068c4:	f000 8308 	beq.w	406ed8 <_vfprintf_r+0xc60>
  4068c8:	2b02      	cmp	r3, #2
  4068ca:	f040 8295 	bne.w	406df8 <_vfprintf_r+0xb80>
  4068ce:	9818      	ldr	r0, [sp, #96]	; 0x60
  4068d0:	af30      	add	r7, sp, #192	; 0xc0
  4068d2:	0923      	lsrs	r3, r4, #4
  4068d4:	f004 010f 	and.w	r1, r4, #15
  4068d8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4068dc:	092a      	lsrs	r2, r5, #4
  4068de:	461c      	mov	r4, r3
  4068e0:	4615      	mov	r5, r2
  4068e2:	5c43      	ldrb	r3, [r0, r1]
  4068e4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4068e8:	ea54 0305 	orrs.w	r3, r4, r5
  4068ec:	d1f1      	bne.n	4068d2 <_vfprintf_r+0x65a>
  4068ee:	ab30      	add	r3, sp, #192	; 0xc0
  4068f0:	1bdb      	subs	r3, r3, r7
  4068f2:	930d      	str	r3, [sp, #52]	; 0x34
  4068f4:	e5ea      	b.n	4064cc <_vfprintf_r+0x254>
  4068f6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4068fa:	f899 6000 	ldrb.w	r6, [r9]
  4068fe:	e53a      	b.n	406376 <_vfprintf_r+0xfe>
  406900:	f899 6000 	ldrb.w	r6, [r9]
  406904:	2e6c      	cmp	r6, #108	; 0x6c
  406906:	bf03      	ittte	eq
  406908:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  40690c:	f04b 0b20 	orreq.w	fp, fp, #32
  406910:	f109 0901 	addeq.w	r9, r9, #1
  406914:	f04b 0b10 	orrne.w	fp, fp, #16
  406918:	e52d      	b.n	406376 <_vfprintf_r+0xfe>
  40691a:	2a00      	cmp	r2, #0
  40691c:	f040 874c 	bne.w	4077b8 <_vfprintf_r+0x1540>
  406920:	f01b 0f20 	tst.w	fp, #32
  406924:	f040 853f 	bne.w	4073a6 <_vfprintf_r+0x112e>
  406928:	f01b 0f10 	tst.w	fp, #16
  40692c:	f040 80fc 	bne.w	406b28 <_vfprintf_r+0x8b0>
  406930:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406934:	f000 80f8 	beq.w	406b28 <_vfprintf_r+0x8b0>
  406938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40693a:	6813      	ldr	r3, [r2, #0]
  40693c:	3204      	adds	r2, #4
  40693e:	920e      	str	r2, [sp, #56]	; 0x38
  406940:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  406944:	801a      	strh	r2, [r3, #0]
  406946:	e4e3      	b.n	406310 <_vfprintf_r+0x98>
  406948:	f899 6000 	ldrb.w	r6, [r9]
  40694c:	2900      	cmp	r1, #0
  40694e:	f47f ad12 	bne.w	406376 <_vfprintf_r+0xfe>
  406952:	2201      	movs	r2, #1
  406954:	2120      	movs	r1, #32
  406956:	e50e      	b.n	406376 <_vfprintf_r+0xfe>
  406958:	f899 6000 	ldrb.w	r6, [r9]
  40695c:	2e2a      	cmp	r6, #42	; 0x2a
  40695e:	f109 0001 	add.w	r0, r9, #1
  406962:	f000 86f1 	beq.w	407748 <_vfprintf_r+0x14d0>
  406966:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40696a:	2b09      	cmp	r3, #9
  40696c:	4681      	mov	r9, r0
  40696e:	bf98      	it	ls
  406970:	2000      	movls	r0, #0
  406972:	f200 863d 	bhi.w	4075f0 <_vfprintf_r+0x1378>
  406976:	f819 6b01 	ldrb.w	r6, [r9], #1
  40697a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40697e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406982:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406986:	2b09      	cmp	r3, #9
  406988:	d9f5      	bls.n	406976 <_vfprintf_r+0x6fe>
  40698a:	9009      	str	r0, [sp, #36]	; 0x24
  40698c:	e4f5      	b.n	40637a <_vfprintf_r+0x102>
  40698e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406992:	f899 6000 	ldrb.w	r6, [r9]
  406996:	e4ee      	b.n	406376 <_vfprintf_r+0xfe>
  406998:	f899 6000 	ldrb.w	r6, [r9]
  40699c:	2201      	movs	r2, #1
  40699e:	212b      	movs	r1, #43	; 0x2b
  4069a0:	e4e9      	b.n	406376 <_vfprintf_r+0xfe>
  4069a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4069a4:	4bae      	ldr	r3, [pc, #696]	; (406c60 <_vfprintf_r+0x9e8>)
  4069a6:	6814      	ldr	r4, [r2, #0]
  4069a8:	9318      	str	r3, [sp, #96]	; 0x60
  4069aa:	2678      	movs	r6, #120	; 0x78
  4069ac:	2330      	movs	r3, #48	; 0x30
  4069ae:	3204      	adds	r2, #4
  4069b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4069b4:	f04b 0b02 	orr.w	fp, fp, #2
  4069b8:	920e      	str	r2, [sp, #56]	; 0x38
  4069ba:	2500      	movs	r5, #0
  4069bc:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4069c0:	2302      	movs	r3, #2
  4069c2:	e565      	b.n	406490 <_vfprintf_r+0x218>
  4069c4:	2a00      	cmp	r2, #0
  4069c6:	f040 86e4 	bne.w	407792 <_vfprintf_r+0x151a>
  4069ca:	4ba6      	ldr	r3, [pc, #664]	; (406c64 <_vfprintf_r+0x9ec>)
  4069cc:	9318      	str	r3, [sp, #96]	; 0x60
  4069ce:	e6ff      	b.n	4067d0 <_vfprintf_r+0x558>
  4069d0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4069d2:	f8cd b018 	str.w	fp, [sp, #24]
  4069d6:	680a      	ldr	r2, [r1, #0]
  4069d8:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4069dc:	2300      	movs	r3, #0
  4069de:	460a      	mov	r2, r1
  4069e0:	469a      	mov	sl, r3
  4069e2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4069e6:	3204      	adds	r2, #4
  4069e8:	2301      	movs	r3, #1
  4069ea:	9307      	str	r3, [sp, #28]
  4069ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  4069f0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  4069f4:	920e      	str	r2, [sp, #56]	; 0x38
  4069f6:	930d      	str	r3, [sp, #52]	; 0x34
  4069f8:	af26      	add	r7, sp, #152	; 0x98
  4069fa:	e575      	b.n	4064e8 <_vfprintf_r+0x270>
  4069fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406a00:	2000      	movs	r0, #0
  406a02:	f819 6b01 	ldrb.w	r6, [r9], #1
  406a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406a0a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406a0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406a12:	2b09      	cmp	r3, #9
  406a14:	d9f5      	bls.n	406a02 <_vfprintf_r+0x78a>
  406a16:	900c      	str	r0, [sp, #48]	; 0x30
  406a18:	e4af      	b.n	40637a <_vfprintf_r+0x102>
  406a1a:	2a00      	cmp	r2, #0
  406a1c:	f040 86c8 	bne.w	4077b0 <_vfprintf_r+0x1538>
  406a20:	f04b 0b10 	orr.w	fp, fp, #16
  406a24:	e726      	b.n	406874 <_vfprintf_r+0x5fc>
  406a26:	f04b 0b01 	orr.w	fp, fp, #1
  406a2a:	f899 6000 	ldrb.w	r6, [r9]
  406a2e:	e4a2      	b.n	406376 <_vfprintf_r+0xfe>
  406a30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406a32:	6823      	ldr	r3, [r4, #0]
  406a34:	930c      	str	r3, [sp, #48]	; 0x30
  406a36:	4618      	mov	r0, r3
  406a38:	2800      	cmp	r0, #0
  406a3a:	4623      	mov	r3, r4
  406a3c:	f103 0304 	add.w	r3, r3, #4
  406a40:	f6ff aeb8 	blt.w	4067b4 <_vfprintf_r+0x53c>
  406a44:	930e      	str	r3, [sp, #56]	; 0x38
  406a46:	f899 6000 	ldrb.w	r6, [r9]
  406a4a:	e494      	b.n	406376 <_vfprintf_r+0xfe>
  406a4c:	2a00      	cmp	r2, #0
  406a4e:	f040 86b7 	bne.w	4077c0 <_vfprintf_r+0x1548>
  406a52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406a54:	3507      	adds	r5, #7
  406a56:	f025 0307 	bic.w	r3, r5, #7
  406a5a:	f103 0208 	add.w	r2, r3, #8
  406a5e:	920e      	str	r2, [sp, #56]	; 0x38
  406a60:	681a      	ldr	r2, [r3, #0]
  406a62:	9213      	str	r2, [sp, #76]	; 0x4c
  406a64:	685b      	ldr	r3, [r3, #4]
  406a66:	9312      	str	r3, [sp, #72]	; 0x48
  406a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  406a6c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  406a70:	4628      	mov	r0, r5
  406a72:	4621      	mov	r1, r4
  406a74:	f04f 32ff 	mov.w	r2, #4294967295
  406a78:	4b7b      	ldr	r3, [pc, #492]	; (406c68 <_vfprintf_r+0x9f0>)
  406a7a:	f004 f929 	bl	40acd0 <__aeabi_dcmpun>
  406a7e:	2800      	cmp	r0, #0
  406a80:	f040 83a2 	bne.w	4071c8 <_vfprintf_r+0xf50>
  406a84:	4628      	mov	r0, r5
  406a86:	4621      	mov	r1, r4
  406a88:	f04f 32ff 	mov.w	r2, #4294967295
  406a8c:	4b76      	ldr	r3, [pc, #472]	; (406c68 <_vfprintf_r+0x9f0>)
  406a8e:	f004 f901 	bl	40ac94 <__aeabi_dcmple>
  406a92:	2800      	cmp	r0, #0
  406a94:	f040 8398 	bne.w	4071c8 <_vfprintf_r+0xf50>
  406a98:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406a9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406a9e:	9912      	ldr	r1, [sp, #72]	; 0x48
  406aa0:	f004 f8ee 	bl	40ac80 <__aeabi_dcmplt>
  406aa4:	2800      	cmp	r0, #0
  406aa6:	f040 8435 	bne.w	407314 <_vfprintf_r+0x109c>
  406aaa:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406aae:	4f6f      	ldr	r7, [pc, #444]	; (406c6c <_vfprintf_r+0x9f4>)
  406ab0:	4b6f      	ldr	r3, [pc, #444]	; (406c70 <_vfprintf_r+0x9f8>)
  406ab2:	2203      	movs	r2, #3
  406ab4:	2100      	movs	r1, #0
  406ab6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406aba:	9207      	str	r2, [sp, #28]
  406abc:	9109      	str	r1, [sp, #36]	; 0x24
  406abe:	9006      	str	r0, [sp, #24]
  406ac0:	2e47      	cmp	r6, #71	; 0x47
  406ac2:	bfd8      	it	le
  406ac4:	461f      	movle	r7, r3
  406ac6:	920d      	str	r2, [sp, #52]	; 0x34
  406ac8:	9110      	str	r1, [sp, #64]	; 0x40
  406aca:	e507      	b.n	4064dc <_vfprintf_r+0x264>
  406acc:	f04b 0b08 	orr.w	fp, fp, #8
  406ad0:	f899 6000 	ldrb.w	r6, [r9]
  406ad4:	e44f      	b.n	406376 <_vfprintf_r+0xfe>
  406ad6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406ad8:	3507      	adds	r5, #7
  406ada:	f025 0307 	bic.w	r3, r5, #7
  406ade:	f103 0208 	add.w	r2, r3, #8
  406ae2:	e9d3 4500 	ldrd	r4, r5, [r3]
  406ae6:	920e      	str	r2, [sp, #56]	; 0x38
  406ae8:	2300      	movs	r3, #0
  406aea:	e4d1      	b.n	406490 <_vfprintf_r+0x218>
  406aec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406aee:	3507      	adds	r5, #7
  406af0:	f025 0307 	bic.w	r3, r5, #7
  406af4:	f103 0208 	add.w	r2, r3, #8
  406af8:	e9d3 4500 	ldrd	r4, r5, [r3]
  406afc:	920e      	str	r2, [sp, #56]	; 0x38
  406afe:	2301      	movs	r3, #1
  406b00:	e4c6      	b.n	406490 <_vfprintf_r+0x218>
  406b02:	2a00      	cmp	r2, #0
  406b04:	f040 8650 	bne.w	4077a8 <_vfprintf_r+0x1530>
  406b08:	b1c6      	cbz	r6, 406b3c <_vfprintf_r+0x8c4>
  406b0a:	2300      	movs	r3, #0
  406b0c:	2201      	movs	r2, #1
  406b0e:	469a      	mov	sl, r3
  406b10:	9207      	str	r2, [sp, #28]
  406b12:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  406b16:	f8cd b018 	str.w	fp, [sp, #24]
  406b1a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406b1e:	9309      	str	r3, [sp, #36]	; 0x24
  406b20:	9310      	str	r3, [sp, #64]	; 0x40
  406b22:	920d      	str	r2, [sp, #52]	; 0x34
  406b24:	af26      	add	r7, sp, #152	; 0x98
  406b26:	e4df      	b.n	4064e8 <_vfprintf_r+0x270>
  406b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406b2a:	6813      	ldr	r3, [r2, #0]
  406b2c:	3204      	adds	r2, #4
  406b2e:	920e      	str	r2, [sp, #56]	; 0x38
  406b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406b32:	601a      	str	r2, [r3, #0]
  406b34:	f7ff bbec 	b.w	406310 <_vfprintf_r+0x98>
  406b38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406b3a:	e527      	b.n	40658c <_vfprintf_r+0x314>
  406b3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406b3e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406b42:	2b00      	cmp	r3, #0
  406b44:	f040 8594 	bne.w	407670 <_vfprintf_r+0x13f8>
  406b48:	2300      	movs	r3, #0
  406b4a:	9324      	str	r3, [sp, #144]	; 0x90
  406b4c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406b50:	f013 0f01 	tst.w	r3, #1
  406b54:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406b58:	d102      	bne.n	406b60 <_vfprintf_r+0x8e8>
  406b5a:	059a      	lsls	r2, r3, #22
  406b5c:	f140 8249 	bpl.w	406ff2 <_vfprintf_r+0xd7a>
  406b60:	065b      	lsls	r3, r3, #25
  406b62:	f53f adec 	bmi.w	40673e <_vfprintf_r+0x4c6>
  406b66:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406b68:	b041      	add	sp, #260	; 0x104
  406b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b6e:	2e65      	cmp	r6, #101	; 0x65
  406b70:	f340 80b2 	ble.w	406cd8 <_vfprintf_r+0xa60>
  406b74:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406b76:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406b7a:	9912      	ldr	r1, [sp, #72]	; 0x48
  406b7c:	f004 f876 	bl	40ac6c <__aeabi_dcmpeq>
  406b80:	2800      	cmp	r0, #0
  406b82:	f000 8160 	beq.w	406e46 <_vfprintf_r+0xbce>
  406b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b88:	4a3a      	ldr	r2, [pc, #232]	; (406c74 <_vfprintf_r+0x9fc>)
  406b8a:	f8c8 2000 	str.w	r2, [r8]
  406b8e:	3301      	adds	r3, #1
  406b90:	3401      	adds	r4, #1
  406b92:	2201      	movs	r2, #1
  406b94:	2b07      	cmp	r3, #7
  406b96:	9425      	str	r4, [sp, #148]	; 0x94
  406b98:	9324      	str	r3, [sp, #144]	; 0x90
  406b9a:	f8c8 2004 	str.w	r2, [r8, #4]
  406b9e:	f300 83bf 	bgt.w	407320 <_vfprintf_r+0x10a8>
  406ba2:	f108 0808 	add.w	r8, r8, #8
  406ba6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406baa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406bac:	4293      	cmp	r3, r2
  406bae:	db03      	blt.n	406bb8 <_vfprintf_r+0x940>
  406bb0:	9b06      	ldr	r3, [sp, #24]
  406bb2:	07df      	lsls	r7, r3, #31
  406bb4:	f57f ad65 	bpl.w	406682 <_vfprintf_r+0x40a>
  406bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bba:	9914      	ldr	r1, [sp, #80]	; 0x50
  406bbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  406bbe:	f8c8 2000 	str.w	r2, [r8]
  406bc2:	3301      	adds	r3, #1
  406bc4:	440c      	add	r4, r1
  406bc6:	2b07      	cmp	r3, #7
  406bc8:	f8c8 1004 	str.w	r1, [r8, #4]
  406bcc:	9425      	str	r4, [sp, #148]	; 0x94
  406bce:	9324      	str	r3, [sp, #144]	; 0x90
  406bd0:	f300 83f8 	bgt.w	4073c4 <_vfprintf_r+0x114c>
  406bd4:	f108 0808 	add.w	r8, r8, #8
  406bd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bda:	1e5e      	subs	r6, r3, #1
  406bdc:	2e00      	cmp	r6, #0
  406bde:	f77f ad50 	ble.w	406682 <_vfprintf_r+0x40a>
  406be2:	2e10      	cmp	r6, #16
  406be4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406be6:	4d24      	ldr	r5, [pc, #144]	; (406c78 <_vfprintf_r+0xa00>)
  406be8:	f340 81dd 	ble.w	406fa6 <_vfprintf_r+0xd2e>
  406bec:	2710      	movs	r7, #16
  406bee:	f8dd a020 	ldr.w	sl, [sp, #32]
  406bf2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406bf6:	e005      	b.n	406c04 <_vfprintf_r+0x98c>
  406bf8:	f108 0808 	add.w	r8, r8, #8
  406bfc:	3e10      	subs	r6, #16
  406bfe:	2e10      	cmp	r6, #16
  406c00:	f340 81d1 	ble.w	406fa6 <_vfprintf_r+0xd2e>
  406c04:	3301      	adds	r3, #1
  406c06:	3410      	adds	r4, #16
  406c08:	2b07      	cmp	r3, #7
  406c0a:	9425      	str	r4, [sp, #148]	; 0x94
  406c0c:	9324      	str	r3, [sp, #144]	; 0x90
  406c0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  406c12:	ddf1      	ble.n	406bf8 <_vfprintf_r+0x980>
  406c14:	aa23      	add	r2, sp, #140	; 0x8c
  406c16:	4659      	mov	r1, fp
  406c18:	4650      	mov	r0, sl
  406c1a:	f003 f957 	bl	409ecc <__sprint_r>
  406c1e:	2800      	cmp	r0, #0
  406c20:	f040 83cd 	bne.w	4073be <_vfprintf_r+0x1146>
  406c24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c28:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c2c:	e7e6      	b.n	406bfc <_vfprintf_r+0x984>
  406c2e:	46aa      	mov	sl, r5
  406c30:	e78c      	b.n	406b4c <_vfprintf_r+0x8d4>
  406c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c34:	9a07      	ldr	r2, [sp, #28]
  406c36:	eba3 0a02 	sub.w	sl, r3, r2
  406c3a:	f1ba 0f00 	cmp.w	sl, #0
  406c3e:	f77f acca 	ble.w	4065d6 <_vfprintf_r+0x35e>
  406c42:	f1ba 0f10 	cmp.w	sl, #16
  406c46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c48:	4d0b      	ldr	r5, [pc, #44]	; (406c78 <_vfprintf_r+0xa00>)
  406c4a:	dd39      	ble.n	406cc0 <_vfprintf_r+0xa48>
  406c4c:	4642      	mov	r2, r8
  406c4e:	4621      	mov	r1, r4
  406c50:	46b0      	mov	r8, r6
  406c52:	f04f 0b10 	mov.w	fp, #16
  406c56:	462e      	mov	r6, r5
  406c58:	9c08      	ldr	r4, [sp, #32]
  406c5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406c5c:	e015      	b.n	406c8a <_vfprintf_r+0xa12>
  406c5e:	bf00      	nop
  406c60:	0040b480 	.word	0x0040b480
  406c64:	0040b46c 	.word	0x0040b46c
  406c68:	7fefffff 	.word	0x7fefffff
  406c6c:	0040b460 	.word	0x0040b460
  406c70:	0040b45c 	.word	0x0040b45c
  406c74:	0040b49c 	.word	0x0040b49c
  406c78:	0040b4d0 	.word	0x0040b4d0
  406c7c:	f1aa 0a10 	sub.w	sl, sl, #16
  406c80:	f1ba 0f10 	cmp.w	sl, #16
  406c84:	f102 0208 	add.w	r2, r2, #8
  406c88:	dd16      	ble.n	406cb8 <_vfprintf_r+0xa40>
  406c8a:	3301      	adds	r3, #1
  406c8c:	3110      	adds	r1, #16
  406c8e:	2b07      	cmp	r3, #7
  406c90:	9125      	str	r1, [sp, #148]	; 0x94
  406c92:	9324      	str	r3, [sp, #144]	; 0x90
  406c94:	e882 0840 	stmia.w	r2, {r6, fp}
  406c98:	ddf0      	ble.n	406c7c <_vfprintf_r+0xa04>
  406c9a:	aa23      	add	r2, sp, #140	; 0x8c
  406c9c:	4629      	mov	r1, r5
  406c9e:	4620      	mov	r0, r4
  406ca0:	f003 f914 	bl	409ecc <__sprint_r>
  406ca4:	2800      	cmp	r0, #0
  406ca6:	d1c2      	bne.n	406c2e <_vfprintf_r+0x9b6>
  406ca8:	f1aa 0a10 	sub.w	sl, sl, #16
  406cac:	f1ba 0f10 	cmp.w	sl, #16
  406cb0:	9925      	ldr	r1, [sp, #148]	; 0x94
  406cb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406cb4:	aa30      	add	r2, sp, #192	; 0xc0
  406cb6:	dce8      	bgt.n	406c8a <_vfprintf_r+0xa12>
  406cb8:	4635      	mov	r5, r6
  406cba:	460c      	mov	r4, r1
  406cbc:	4646      	mov	r6, r8
  406cbe:	4690      	mov	r8, r2
  406cc0:	3301      	adds	r3, #1
  406cc2:	4454      	add	r4, sl
  406cc4:	2b07      	cmp	r3, #7
  406cc6:	9425      	str	r4, [sp, #148]	; 0x94
  406cc8:	9324      	str	r3, [sp, #144]	; 0x90
  406cca:	e888 0420 	stmia.w	r8, {r5, sl}
  406cce:	f300 8264 	bgt.w	40719a <_vfprintf_r+0xf22>
  406cd2:	f108 0808 	add.w	r8, r8, #8
  406cd6:	e47e      	b.n	4065d6 <_vfprintf_r+0x35e>
  406cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406cda:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406cdc:	2b01      	cmp	r3, #1
  406cde:	f340 81fd 	ble.w	4070dc <_vfprintf_r+0xe64>
  406ce2:	3601      	adds	r6, #1
  406ce4:	3401      	adds	r4, #1
  406ce6:	2301      	movs	r3, #1
  406ce8:	2e07      	cmp	r6, #7
  406cea:	9425      	str	r4, [sp, #148]	; 0x94
  406cec:	9624      	str	r6, [sp, #144]	; 0x90
  406cee:	f8c8 7000 	str.w	r7, [r8]
  406cf2:	f8c8 3004 	str.w	r3, [r8, #4]
  406cf6:	f300 820e 	bgt.w	407116 <_vfprintf_r+0xe9e>
  406cfa:	f108 0808 	add.w	r8, r8, #8
  406cfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406d00:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406d02:	f8c8 3000 	str.w	r3, [r8]
  406d06:	3601      	adds	r6, #1
  406d08:	4414      	add	r4, r2
  406d0a:	2e07      	cmp	r6, #7
  406d0c:	9425      	str	r4, [sp, #148]	; 0x94
  406d0e:	9624      	str	r6, [sp, #144]	; 0x90
  406d10:	f8c8 2004 	str.w	r2, [r8, #4]
  406d14:	f300 822e 	bgt.w	407174 <_vfprintf_r+0xefc>
  406d18:	f108 0808 	add.w	r8, r8, #8
  406d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406d1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406d20:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406d22:	9912      	ldr	r1, [sp, #72]	; 0x48
  406d24:	f003 ffa2 	bl	40ac6c <__aeabi_dcmpeq>
  406d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d2a:	2800      	cmp	r0, #0
  406d2c:	f040 8106 	bne.w	406f3c <_vfprintf_r+0xcc4>
  406d30:	3b01      	subs	r3, #1
  406d32:	3601      	adds	r6, #1
  406d34:	3701      	adds	r7, #1
  406d36:	441c      	add	r4, r3
  406d38:	2e07      	cmp	r6, #7
  406d3a:	9624      	str	r6, [sp, #144]	; 0x90
  406d3c:	9425      	str	r4, [sp, #148]	; 0x94
  406d3e:	f8c8 7000 	str.w	r7, [r8]
  406d42:	f8c8 3004 	str.w	r3, [r8, #4]
  406d46:	f300 81d9 	bgt.w	4070fc <_vfprintf_r+0xe84>
  406d4a:	f108 0808 	add.w	r8, r8, #8
  406d4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406d50:	f8c8 2004 	str.w	r2, [r8, #4]
  406d54:	3601      	adds	r6, #1
  406d56:	4414      	add	r4, r2
  406d58:	ab1f      	add	r3, sp, #124	; 0x7c
  406d5a:	2e07      	cmp	r6, #7
  406d5c:	9425      	str	r4, [sp, #148]	; 0x94
  406d5e:	9624      	str	r6, [sp, #144]	; 0x90
  406d60:	f8c8 3000 	str.w	r3, [r8]
  406d64:	f77f ac8b 	ble.w	40667e <_vfprintf_r+0x406>
  406d68:	aa23      	add	r2, sp, #140	; 0x8c
  406d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d6c:	9808      	ldr	r0, [sp, #32]
  406d6e:	f003 f8ad 	bl	409ecc <__sprint_r>
  406d72:	b958      	cbnz	r0, 406d8c <_vfprintf_r+0xb14>
  406d74:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406d76:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406d7a:	e482      	b.n	406682 <_vfprintf_r+0x40a>
  406d7c:	aa23      	add	r2, sp, #140	; 0x8c
  406d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d80:	9808      	ldr	r0, [sp, #32]
  406d82:	f003 f8a3 	bl	409ecc <__sprint_r>
  406d86:	2800      	cmp	r0, #0
  406d88:	f43f acc5 	beq.w	406716 <_vfprintf_r+0x49e>
  406d8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406d90:	e6dc      	b.n	406b4c <_vfprintf_r+0x8d4>
  406d92:	f8dd b018 	ldr.w	fp, [sp, #24]
  406d96:	2b01      	cmp	r3, #1
  406d98:	f000 8121 	beq.w	406fde <_vfprintf_r+0xd66>
  406d9c:	2b02      	cmp	r3, #2
  406d9e:	d127      	bne.n	406df0 <_vfprintf_r+0xb78>
  406da0:	f8cd b018 	str.w	fp, [sp, #24]
  406da4:	2400      	movs	r4, #0
  406da6:	2500      	movs	r5, #0
  406da8:	e591      	b.n	4068ce <_vfprintf_r+0x656>
  406daa:	aa23      	add	r2, sp, #140	; 0x8c
  406dac:	990a      	ldr	r1, [sp, #40]	; 0x28
  406dae:	9808      	ldr	r0, [sp, #32]
  406db0:	f003 f88c 	bl	409ecc <__sprint_r>
  406db4:	2800      	cmp	r0, #0
  406db6:	d1e9      	bne.n	406d8c <_vfprintf_r+0xb14>
  406db8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406dba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dbe:	e44d      	b.n	40665c <_vfprintf_r+0x3e4>
  406dc0:	aa23      	add	r2, sp, #140	; 0x8c
  406dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
  406dc4:	9808      	ldr	r0, [sp, #32]
  406dc6:	f003 f881 	bl	409ecc <__sprint_r>
  406dca:	2800      	cmp	r0, #0
  406dcc:	d1de      	bne.n	406d8c <_vfprintf_r+0xb14>
  406dce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406dd0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dd4:	f7ff bbec 	b.w	4065b0 <_vfprintf_r+0x338>
  406dd8:	aa23      	add	r2, sp, #140	; 0x8c
  406dda:	990a      	ldr	r1, [sp, #40]	; 0x28
  406ddc:	9808      	ldr	r0, [sp, #32]
  406dde:	f003 f875 	bl	409ecc <__sprint_r>
  406de2:	2800      	cmp	r0, #0
  406de4:	d1d2      	bne.n	406d8c <_vfprintf_r+0xb14>
  406de6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406de8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dec:	f7ff bbf0 	b.w	4065d0 <_vfprintf_r+0x358>
  406df0:	f8cd b018 	str.w	fp, [sp, #24]
  406df4:	2400      	movs	r4, #0
  406df6:	2500      	movs	r5, #0
  406df8:	a930      	add	r1, sp, #192	; 0xc0
  406dfa:	e000      	b.n	406dfe <_vfprintf_r+0xb86>
  406dfc:	4639      	mov	r1, r7
  406dfe:	08e2      	lsrs	r2, r4, #3
  406e00:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406e04:	08e8      	lsrs	r0, r5, #3
  406e06:	f004 0307 	and.w	r3, r4, #7
  406e0a:	4605      	mov	r5, r0
  406e0c:	4614      	mov	r4, r2
  406e0e:	3330      	adds	r3, #48	; 0x30
  406e10:	ea54 0205 	orrs.w	r2, r4, r5
  406e14:	f801 3c01 	strb.w	r3, [r1, #-1]
  406e18:	f101 37ff 	add.w	r7, r1, #4294967295
  406e1c:	d1ee      	bne.n	406dfc <_vfprintf_r+0xb84>
  406e1e:	9a06      	ldr	r2, [sp, #24]
  406e20:	07d2      	lsls	r2, r2, #31
  406e22:	f57f ad64 	bpl.w	4068ee <_vfprintf_r+0x676>
  406e26:	2b30      	cmp	r3, #48	; 0x30
  406e28:	f43f ad61 	beq.w	4068ee <_vfprintf_r+0x676>
  406e2c:	2330      	movs	r3, #48	; 0x30
  406e2e:	3902      	subs	r1, #2
  406e30:	f807 3c01 	strb.w	r3, [r7, #-1]
  406e34:	ab30      	add	r3, sp, #192	; 0xc0
  406e36:	1a5b      	subs	r3, r3, r1
  406e38:	930d      	str	r3, [sp, #52]	; 0x34
  406e3a:	460f      	mov	r7, r1
  406e3c:	f7ff bb46 	b.w	4064cc <_vfprintf_r+0x254>
  406e40:	2302      	movs	r3, #2
  406e42:	f7ff bb25 	b.w	406490 <_vfprintf_r+0x218>
  406e46:	991d      	ldr	r1, [sp, #116]	; 0x74
  406e48:	2900      	cmp	r1, #0
  406e4a:	f340 8274 	ble.w	407336 <_vfprintf_r+0x10be>
  406e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e52:	4293      	cmp	r3, r2
  406e54:	bfa8      	it	ge
  406e56:	4613      	movge	r3, r2
  406e58:	2b00      	cmp	r3, #0
  406e5a:	461e      	mov	r6, r3
  406e5c:	dd0d      	ble.n	406e7a <_vfprintf_r+0xc02>
  406e5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e60:	f8c8 7000 	str.w	r7, [r8]
  406e64:	3301      	adds	r3, #1
  406e66:	4434      	add	r4, r6
  406e68:	2b07      	cmp	r3, #7
  406e6a:	9425      	str	r4, [sp, #148]	; 0x94
  406e6c:	f8c8 6004 	str.w	r6, [r8, #4]
  406e70:	9324      	str	r3, [sp, #144]	; 0x90
  406e72:	f300 8324 	bgt.w	4074be <_vfprintf_r+0x1246>
  406e76:	f108 0808 	add.w	r8, r8, #8
  406e7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406e7c:	2e00      	cmp	r6, #0
  406e7e:	bfa8      	it	ge
  406e80:	1b9b      	subge	r3, r3, r6
  406e82:	2b00      	cmp	r3, #0
  406e84:	461e      	mov	r6, r3
  406e86:	f340 80d0 	ble.w	40702a <_vfprintf_r+0xdb2>
  406e8a:	2e10      	cmp	r6, #16
  406e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e8e:	4dc0      	ldr	r5, [pc, #768]	; (407190 <_vfprintf_r+0xf18>)
  406e90:	f340 80b7 	ble.w	407002 <_vfprintf_r+0xd8a>
  406e94:	4622      	mov	r2, r4
  406e96:	f04f 0a10 	mov.w	sl, #16
  406e9a:	f8dd b020 	ldr.w	fp, [sp, #32]
  406e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406ea0:	e005      	b.n	406eae <_vfprintf_r+0xc36>
  406ea2:	f108 0808 	add.w	r8, r8, #8
  406ea6:	3e10      	subs	r6, #16
  406ea8:	2e10      	cmp	r6, #16
  406eaa:	f340 80a9 	ble.w	407000 <_vfprintf_r+0xd88>
  406eae:	3301      	adds	r3, #1
  406eb0:	3210      	adds	r2, #16
  406eb2:	2b07      	cmp	r3, #7
  406eb4:	9225      	str	r2, [sp, #148]	; 0x94
  406eb6:	9324      	str	r3, [sp, #144]	; 0x90
  406eb8:	e888 0420 	stmia.w	r8, {r5, sl}
  406ebc:	ddf1      	ble.n	406ea2 <_vfprintf_r+0xc2a>
  406ebe:	aa23      	add	r2, sp, #140	; 0x8c
  406ec0:	4621      	mov	r1, r4
  406ec2:	4658      	mov	r0, fp
  406ec4:	f003 f802 	bl	409ecc <__sprint_r>
  406ec8:	2800      	cmp	r0, #0
  406eca:	f040 8324 	bne.w	407516 <_vfprintf_r+0x129e>
  406ece:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406ed2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406ed6:	e7e6      	b.n	406ea6 <_vfprintf_r+0xc2e>
  406ed8:	2d00      	cmp	r5, #0
  406eda:	bf08      	it	eq
  406edc:	2c0a      	cmpeq	r4, #10
  406ede:	d37c      	bcc.n	406fda <_vfprintf_r+0xd62>
  406ee0:	af30      	add	r7, sp, #192	; 0xc0
  406ee2:	4620      	mov	r0, r4
  406ee4:	4629      	mov	r1, r5
  406ee6:	220a      	movs	r2, #10
  406ee8:	2300      	movs	r3, #0
  406eea:	f003 ff2f 	bl	40ad4c <__aeabi_uldivmod>
  406eee:	3230      	adds	r2, #48	; 0x30
  406ef0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  406ef4:	4620      	mov	r0, r4
  406ef6:	4629      	mov	r1, r5
  406ef8:	2300      	movs	r3, #0
  406efa:	220a      	movs	r2, #10
  406efc:	f003 ff26 	bl	40ad4c <__aeabi_uldivmod>
  406f00:	4604      	mov	r4, r0
  406f02:	460d      	mov	r5, r1
  406f04:	ea54 0305 	orrs.w	r3, r4, r5
  406f08:	d1eb      	bne.n	406ee2 <_vfprintf_r+0xc6a>
  406f0a:	ab30      	add	r3, sp, #192	; 0xc0
  406f0c:	1bdb      	subs	r3, r3, r7
  406f0e:	930d      	str	r3, [sp, #52]	; 0x34
  406f10:	f7ff badc 	b.w	4064cc <_vfprintf_r+0x254>
  406f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f16:	930d      	str	r3, [sp, #52]	; 0x34
  406f18:	af30      	add	r7, sp, #192	; 0xc0
  406f1a:	f7ff bad7 	b.w	4064cc <_vfprintf_r+0x254>
  406f1e:	aa23      	add	r2, sp, #140	; 0x8c
  406f20:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f22:	9808      	ldr	r0, [sp, #32]
  406f24:	f002 ffd2 	bl	409ecc <__sprint_r>
  406f28:	2800      	cmp	r0, #0
  406f2a:	f47f af2f 	bne.w	406d8c <_vfprintf_r+0xb14>
  406f2e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406f32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f38:	f7ff bb28 	b.w	40658c <_vfprintf_r+0x314>
  406f3c:	1e5f      	subs	r7, r3, #1
  406f3e:	2f00      	cmp	r7, #0
  406f40:	f77f af05 	ble.w	406d4e <_vfprintf_r+0xad6>
  406f44:	2f10      	cmp	r7, #16
  406f46:	4d92      	ldr	r5, [pc, #584]	; (407190 <_vfprintf_r+0xf18>)
  406f48:	f340 810a 	ble.w	407160 <_vfprintf_r+0xee8>
  406f4c:	f04f 0a10 	mov.w	sl, #16
  406f50:	f8dd b020 	ldr.w	fp, [sp, #32]
  406f54:	e005      	b.n	406f62 <_vfprintf_r+0xcea>
  406f56:	f108 0808 	add.w	r8, r8, #8
  406f5a:	3f10      	subs	r7, #16
  406f5c:	2f10      	cmp	r7, #16
  406f5e:	f340 80ff 	ble.w	407160 <_vfprintf_r+0xee8>
  406f62:	3601      	adds	r6, #1
  406f64:	3410      	adds	r4, #16
  406f66:	2e07      	cmp	r6, #7
  406f68:	9425      	str	r4, [sp, #148]	; 0x94
  406f6a:	9624      	str	r6, [sp, #144]	; 0x90
  406f6c:	e888 0420 	stmia.w	r8, {r5, sl}
  406f70:	ddf1      	ble.n	406f56 <_vfprintf_r+0xcde>
  406f72:	aa23      	add	r2, sp, #140	; 0x8c
  406f74:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f76:	4658      	mov	r0, fp
  406f78:	f002 ffa8 	bl	409ecc <__sprint_r>
  406f7c:	2800      	cmp	r0, #0
  406f7e:	f47f af05 	bne.w	406d8c <_vfprintf_r+0xb14>
  406f82:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f84:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406f86:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f8a:	e7e6      	b.n	406f5a <_vfprintf_r+0xce2>
  406f8c:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f8e:	460a      	mov	r2, r1
  406f90:	3204      	adds	r2, #4
  406f92:	680c      	ldr	r4, [r1, #0]
  406f94:	920e      	str	r2, [sp, #56]	; 0x38
  406f96:	2500      	movs	r5, #0
  406f98:	f7ff ba7a 	b.w	406490 <_vfprintf_r+0x218>
  406f9c:	681c      	ldr	r4, [r3, #0]
  406f9e:	3304      	adds	r3, #4
  406fa0:	930e      	str	r3, [sp, #56]	; 0x38
  406fa2:	2500      	movs	r5, #0
  406fa4:	e426      	b.n	4067f4 <_vfprintf_r+0x57c>
  406fa6:	3301      	adds	r3, #1
  406fa8:	4434      	add	r4, r6
  406faa:	2b07      	cmp	r3, #7
  406fac:	9425      	str	r4, [sp, #148]	; 0x94
  406fae:	9324      	str	r3, [sp, #144]	; 0x90
  406fb0:	e888 0060 	stmia.w	r8, {r5, r6}
  406fb4:	f77f ab63 	ble.w	40667e <_vfprintf_r+0x406>
  406fb8:	e6d6      	b.n	406d68 <_vfprintf_r+0xaf0>
  406fba:	3204      	adds	r2, #4
  406fbc:	681c      	ldr	r4, [r3, #0]
  406fbe:	920e      	str	r2, [sp, #56]	; 0x38
  406fc0:	2301      	movs	r3, #1
  406fc2:	2500      	movs	r5, #0
  406fc4:	f7ff ba64 	b.w	406490 <_vfprintf_r+0x218>
  406fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406fca:	6814      	ldr	r4, [r2, #0]
  406fcc:	4613      	mov	r3, r2
  406fce:	3304      	adds	r3, #4
  406fd0:	17e5      	asrs	r5, r4, #31
  406fd2:	930e      	str	r3, [sp, #56]	; 0x38
  406fd4:	4622      	mov	r2, r4
  406fd6:	462b      	mov	r3, r5
  406fd8:	e460      	b.n	40689c <_vfprintf_r+0x624>
  406fda:	f8dd b018 	ldr.w	fp, [sp, #24]
  406fde:	f8cd b018 	str.w	fp, [sp, #24]
  406fe2:	af40      	add	r7, sp, #256	; 0x100
  406fe4:	3430      	adds	r4, #48	; 0x30
  406fe6:	2301      	movs	r3, #1
  406fe8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  406fec:	930d      	str	r3, [sp, #52]	; 0x34
  406fee:	f7ff ba6d 	b.w	4064cc <_vfprintf_r+0x254>
  406ff2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406ff6:	f002 f897 	bl	409128 <__retarget_lock_release_recursive>
  406ffa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406ffe:	e5af      	b.n	406b60 <_vfprintf_r+0x8e8>
  407000:	4614      	mov	r4, r2
  407002:	3301      	adds	r3, #1
  407004:	4434      	add	r4, r6
  407006:	2b07      	cmp	r3, #7
  407008:	9425      	str	r4, [sp, #148]	; 0x94
  40700a:	9324      	str	r3, [sp, #144]	; 0x90
  40700c:	e888 0060 	stmia.w	r8, {r5, r6}
  407010:	f340 816d 	ble.w	4072ee <_vfprintf_r+0x1076>
  407014:	aa23      	add	r2, sp, #140	; 0x8c
  407016:	990a      	ldr	r1, [sp, #40]	; 0x28
  407018:	9808      	ldr	r0, [sp, #32]
  40701a:	f002 ff57 	bl	409ecc <__sprint_r>
  40701e:	2800      	cmp	r0, #0
  407020:	f47f aeb4 	bne.w	406d8c <_vfprintf_r+0xb14>
  407024:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407026:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40702a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40702c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40702e:	4293      	cmp	r3, r2
  407030:	f280 8158 	bge.w	4072e4 <_vfprintf_r+0x106c>
  407034:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407036:	9814      	ldr	r0, [sp, #80]	; 0x50
  407038:	9915      	ldr	r1, [sp, #84]	; 0x54
  40703a:	f8c8 1000 	str.w	r1, [r8]
  40703e:	3201      	adds	r2, #1
  407040:	4404      	add	r4, r0
  407042:	2a07      	cmp	r2, #7
  407044:	9425      	str	r4, [sp, #148]	; 0x94
  407046:	f8c8 0004 	str.w	r0, [r8, #4]
  40704a:	9224      	str	r2, [sp, #144]	; 0x90
  40704c:	f300 8152 	bgt.w	4072f4 <_vfprintf_r+0x107c>
  407050:	f108 0808 	add.w	r8, r8, #8
  407054:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407056:	9910      	ldr	r1, [sp, #64]	; 0x40
  407058:	1ad3      	subs	r3, r2, r3
  40705a:	1a56      	subs	r6, r2, r1
  40705c:	429e      	cmp	r6, r3
  40705e:	bfa8      	it	ge
  407060:	461e      	movge	r6, r3
  407062:	2e00      	cmp	r6, #0
  407064:	dd0e      	ble.n	407084 <_vfprintf_r+0xe0c>
  407066:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407068:	f8c8 6004 	str.w	r6, [r8, #4]
  40706c:	3201      	adds	r2, #1
  40706e:	440f      	add	r7, r1
  407070:	4434      	add	r4, r6
  407072:	2a07      	cmp	r2, #7
  407074:	f8c8 7000 	str.w	r7, [r8]
  407078:	9425      	str	r4, [sp, #148]	; 0x94
  40707a:	9224      	str	r2, [sp, #144]	; 0x90
  40707c:	f300 823c 	bgt.w	4074f8 <_vfprintf_r+0x1280>
  407080:	f108 0808 	add.w	r8, r8, #8
  407084:	2e00      	cmp	r6, #0
  407086:	bfac      	ite	ge
  407088:	1b9e      	subge	r6, r3, r6
  40708a:	461e      	movlt	r6, r3
  40708c:	2e00      	cmp	r6, #0
  40708e:	f77f aaf8 	ble.w	406682 <_vfprintf_r+0x40a>
  407092:	2e10      	cmp	r6, #16
  407094:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407096:	4d3e      	ldr	r5, [pc, #248]	; (407190 <_vfprintf_r+0xf18>)
  407098:	dd85      	ble.n	406fa6 <_vfprintf_r+0xd2e>
  40709a:	2710      	movs	r7, #16
  40709c:	f8dd a020 	ldr.w	sl, [sp, #32]
  4070a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4070a4:	e005      	b.n	4070b2 <_vfprintf_r+0xe3a>
  4070a6:	f108 0808 	add.w	r8, r8, #8
  4070aa:	3e10      	subs	r6, #16
  4070ac:	2e10      	cmp	r6, #16
  4070ae:	f77f af7a 	ble.w	406fa6 <_vfprintf_r+0xd2e>
  4070b2:	3301      	adds	r3, #1
  4070b4:	3410      	adds	r4, #16
  4070b6:	2b07      	cmp	r3, #7
  4070b8:	9425      	str	r4, [sp, #148]	; 0x94
  4070ba:	9324      	str	r3, [sp, #144]	; 0x90
  4070bc:	e888 00a0 	stmia.w	r8, {r5, r7}
  4070c0:	ddf1      	ble.n	4070a6 <_vfprintf_r+0xe2e>
  4070c2:	aa23      	add	r2, sp, #140	; 0x8c
  4070c4:	4659      	mov	r1, fp
  4070c6:	4650      	mov	r0, sl
  4070c8:	f002 ff00 	bl	409ecc <__sprint_r>
  4070cc:	2800      	cmp	r0, #0
  4070ce:	f040 8176 	bne.w	4073be <_vfprintf_r+0x1146>
  4070d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4070d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4070d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4070da:	e7e6      	b.n	4070aa <_vfprintf_r+0xe32>
  4070dc:	9b06      	ldr	r3, [sp, #24]
  4070de:	07d8      	lsls	r0, r3, #31
  4070e0:	f53f adff 	bmi.w	406ce2 <_vfprintf_r+0xa6a>
  4070e4:	3601      	adds	r6, #1
  4070e6:	3401      	adds	r4, #1
  4070e8:	2301      	movs	r3, #1
  4070ea:	2e07      	cmp	r6, #7
  4070ec:	9425      	str	r4, [sp, #148]	; 0x94
  4070ee:	9624      	str	r6, [sp, #144]	; 0x90
  4070f0:	f8c8 7000 	str.w	r7, [r8]
  4070f4:	f8c8 3004 	str.w	r3, [r8, #4]
  4070f8:	f77f ae27 	ble.w	406d4a <_vfprintf_r+0xad2>
  4070fc:	aa23      	add	r2, sp, #140	; 0x8c
  4070fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  407100:	9808      	ldr	r0, [sp, #32]
  407102:	f002 fee3 	bl	409ecc <__sprint_r>
  407106:	2800      	cmp	r0, #0
  407108:	f47f ae40 	bne.w	406d8c <_vfprintf_r+0xb14>
  40710c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40710e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407110:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407114:	e61b      	b.n	406d4e <_vfprintf_r+0xad6>
  407116:	aa23      	add	r2, sp, #140	; 0x8c
  407118:	990a      	ldr	r1, [sp, #40]	; 0x28
  40711a:	9808      	ldr	r0, [sp, #32]
  40711c:	f002 fed6 	bl	409ecc <__sprint_r>
  407120:	2800      	cmp	r0, #0
  407122:	f47f ae33 	bne.w	406d8c <_vfprintf_r+0xb14>
  407126:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407128:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40712a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40712e:	e5e6      	b.n	406cfe <_vfprintf_r+0xa86>
  407130:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407132:	3507      	adds	r5, #7
  407134:	f025 0507 	bic.w	r5, r5, #7
  407138:	e9d5 2300 	ldrd	r2, r3, [r5]
  40713c:	f105 0108 	add.w	r1, r5, #8
  407140:	910e      	str	r1, [sp, #56]	; 0x38
  407142:	4614      	mov	r4, r2
  407144:	461d      	mov	r5, r3
  407146:	f7ff bba9 	b.w	40689c <_vfprintf_r+0x624>
  40714a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40714c:	3507      	adds	r5, #7
  40714e:	f025 0307 	bic.w	r3, r5, #7
  407152:	f103 0208 	add.w	r2, r3, #8
  407156:	920e      	str	r2, [sp, #56]	; 0x38
  407158:	e9d3 4500 	ldrd	r4, r5, [r3]
  40715c:	f7ff bb4a 	b.w	4067f4 <_vfprintf_r+0x57c>
  407160:	3601      	adds	r6, #1
  407162:	443c      	add	r4, r7
  407164:	2e07      	cmp	r6, #7
  407166:	9425      	str	r4, [sp, #148]	; 0x94
  407168:	9624      	str	r6, [sp, #144]	; 0x90
  40716a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40716e:	f77f adec 	ble.w	406d4a <_vfprintf_r+0xad2>
  407172:	e7c3      	b.n	4070fc <_vfprintf_r+0xe84>
  407174:	aa23      	add	r2, sp, #140	; 0x8c
  407176:	990a      	ldr	r1, [sp, #40]	; 0x28
  407178:	9808      	ldr	r0, [sp, #32]
  40717a:	f002 fea7 	bl	409ecc <__sprint_r>
  40717e:	2800      	cmp	r0, #0
  407180:	f47f ae04 	bne.w	406d8c <_vfprintf_r+0xb14>
  407184:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407186:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407188:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40718c:	e5c6      	b.n	406d1c <_vfprintf_r+0xaa4>
  40718e:	bf00      	nop
  407190:	0040b4d0 	.word	0x0040b4d0
  407194:	af30      	add	r7, sp, #192	; 0xc0
  407196:	f7ff b999 	b.w	4064cc <_vfprintf_r+0x254>
  40719a:	aa23      	add	r2, sp, #140	; 0x8c
  40719c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40719e:	9808      	ldr	r0, [sp, #32]
  4071a0:	f002 fe94 	bl	409ecc <__sprint_r>
  4071a4:	2800      	cmp	r0, #0
  4071a6:	f47f adf1 	bne.w	406d8c <_vfprintf_r+0xb14>
  4071aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4071ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071b0:	f7ff ba11 	b.w	4065d6 <_vfprintf_r+0x35e>
  4071b4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4071b8:	4264      	negs	r4, r4
  4071ba:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4071be:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4071c2:	2301      	movs	r3, #1
  4071c4:	f7ff b968 	b.w	406498 <_vfprintf_r+0x220>
  4071c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  4071ca:	4622      	mov	r2, r4
  4071cc:	4620      	mov	r0, r4
  4071ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4071d0:	4623      	mov	r3, r4
  4071d2:	4621      	mov	r1, r4
  4071d4:	f003 fd7c 	bl	40acd0 <__aeabi_dcmpun>
  4071d8:	2800      	cmp	r0, #0
  4071da:	f040 828c 	bne.w	4076f6 <_vfprintf_r+0x147e>
  4071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071e0:	3301      	adds	r3, #1
  4071e2:	f026 0320 	bic.w	r3, r6, #32
  4071e6:	930d      	str	r3, [sp, #52]	; 0x34
  4071e8:	f000 8091 	beq.w	40730e <_vfprintf_r+0x1096>
  4071ec:	2b47      	cmp	r3, #71	; 0x47
  4071ee:	d104      	bne.n	4071fa <_vfprintf_r+0xf82>
  4071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071f2:	2b00      	cmp	r3, #0
  4071f4:	bf08      	it	eq
  4071f6:	2301      	moveq	r3, #1
  4071f8:	9309      	str	r3, [sp, #36]	; 0x24
  4071fa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4071fe:	9306      	str	r3, [sp, #24]
  407200:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407202:	f1b3 0a00 	subs.w	sl, r3, #0
  407206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407208:	9307      	str	r3, [sp, #28]
  40720a:	bfbb      	ittet	lt
  40720c:	4653      	movlt	r3, sl
  40720e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  407212:	2300      	movge	r3, #0
  407214:	232d      	movlt	r3, #45	; 0x2d
  407216:	2e66      	cmp	r6, #102	; 0x66
  407218:	930f      	str	r3, [sp, #60]	; 0x3c
  40721a:	f000 817f 	beq.w	40751c <_vfprintf_r+0x12a4>
  40721e:	2e46      	cmp	r6, #70	; 0x46
  407220:	f000 81d4 	beq.w	4075cc <_vfprintf_r+0x1354>
  407224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407226:	9a07      	ldr	r2, [sp, #28]
  407228:	2b45      	cmp	r3, #69	; 0x45
  40722a:	bf0c      	ite	eq
  40722c:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  40722e:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  407230:	a821      	add	r0, sp, #132	; 0x84
  407232:	a91e      	add	r1, sp, #120	; 0x78
  407234:	bf08      	it	eq
  407236:	1c5d      	addeq	r5, r3, #1
  407238:	9004      	str	r0, [sp, #16]
  40723a:	9103      	str	r1, [sp, #12]
  40723c:	a81d      	add	r0, sp, #116	; 0x74
  40723e:	2102      	movs	r1, #2
  407240:	9002      	str	r0, [sp, #8]
  407242:	4653      	mov	r3, sl
  407244:	9501      	str	r5, [sp, #4]
  407246:	9100      	str	r1, [sp, #0]
  407248:	9808      	ldr	r0, [sp, #32]
  40724a:	f000 fc0d 	bl	407a68 <_dtoa_r>
  40724e:	2e67      	cmp	r6, #103	; 0x67
  407250:	4607      	mov	r7, r0
  407252:	f040 81af 	bne.w	4075b4 <_vfprintf_r+0x133c>
  407256:	f01b 0f01 	tst.w	fp, #1
  40725a:	f000 8213 	beq.w	407684 <_vfprintf_r+0x140c>
  40725e:	197c      	adds	r4, r7, r5
  407260:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407262:	9807      	ldr	r0, [sp, #28]
  407264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407266:	4651      	mov	r1, sl
  407268:	f003 fd00 	bl	40ac6c <__aeabi_dcmpeq>
  40726c:	2800      	cmp	r0, #0
  40726e:	f040 8132 	bne.w	4074d6 <_vfprintf_r+0x125e>
  407272:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407274:	42a3      	cmp	r3, r4
  407276:	d206      	bcs.n	407286 <_vfprintf_r+0x100e>
  407278:	2130      	movs	r1, #48	; 0x30
  40727a:	1c5a      	adds	r2, r3, #1
  40727c:	9221      	str	r2, [sp, #132]	; 0x84
  40727e:	7019      	strb	r1, [r3, #0]
  407280:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407282:	429c      	cmp	r4, r3
  407284:	d8f9      	bhi.n	40727a <_vfprintf_r+0x1002>
  407286:	1bdb      	subs	r3, r3, r7
  407288:	9311      	str	r3, [sp, #68]	; 0x44
  40728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40728c:	2b47      	cmp	r3, #71	; 0x47
  40728e:	f000 80b9 	beq.w	407404 <_vfprintf_r+0x118c>
  407292:	2e65      	cmp	r6, #101	; 0x65
  407294:	f340 8276 	ble.w	407784 <_vfprintf_r+0x150c>
  407298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40729a:	9310      	str	r3, [sp, #64]	; 0x40
  40729c:	2e66      	cmp	r6, #102	; 0x66
  40729e:	f000 8162 	beq.w	407566 <_vfprintf_r+0x12ee>
  4072a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4072a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4072a6:	4619      	mov	r1, r3
  4072a8:	4291      	cmp	r1, r2
  4072aa:	f300 814f 	bgt.w	40754c <_vfprintf_r+0x12d4>
  4072ae:	f01b 0f01 	tst.w	fp, #1
  4072b2:	f040 8209 	bne.w	4076c8 <_vfprintf_r+0x1450>
  4072b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4072ba:	9307      	str	r3, [sp, #28]
  4072bc:	920d      	str	r2, [sp, #52]	; 0x34
  4072be:	2667      	movs	r6, #103	; 0x67
  4072c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072c2:	2b00      	cmp	r3, #0
  4072c4:	f040 8096 	bne.w	4073f4 <_vfprintf_r+0x117c>
  4072c8:	9309      	str	r3, [sp, #36]	; 0x24
  4072ca:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4072ce:	f7ff b905 	b.w	4064dc <_vfprintf_r+0x264>
  4072d2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4072d6:	f001 ff27 	bl	409128 <__retarget_lock_release_recursive>
  4072da:	f04f 33ff 	mov.w	r3, #4294967295
  4072de:	930b      	str	r3, [sp, #44]	; 0x2c
  4072e0:	f7ff ba30 	b.w	406744 <_vfprintf_r+0x4cc>
  4072e4:	9a06      	ldr	r2, [sp, #24]
  4072e6:	07d5      	lsls	r5, r2, #31
  4072e8:	f57f aeb4 	bpl.w	407054 <_vfprintf_r+0xddc>
  4072ec:	e6a2      	b.n	407034 <_vfprintf_r+0xdbc>
  4072ee:	f108 0808 	add.w	r8, r8, #8
  4072f2:	e69a      	b.n	40702a <_vfprintf_r+0xdb2>
  4072f4:	aa23      	add	r2, sp, #140	; 0x8c
  4072f6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4072f8:	9808      	ldr	r0, [sp, #32]
  4072fa:	f002 fde7 	bl	409ecc <__sprint_r>
  4072fe:	2800      	cmp	r0, #0
  407300:	f47f ad44 	bne.w	406d8c <_vfprintf_r+0xb14>
  407304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407306:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407308:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40730c:	e6a2      	b.n	407054 <_vfprintf_r+0xddc>
  40730e:	2306      	movs	r3, #6
  407310:	9309      	str	r3, [sp, #36]	; 0x24
  407312:	e772      	b.n	4071fa <_vfprintf_r+0xf82>
  407314:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407318:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40731c:	f7ff bbc7 	b.w	406aae <_vfprintf_r+0x836>
  407320:	aa23      	add	r2, sp, #140	; 0x8c
  407322:	990a      	ldr	r1, [sp, #40]	; 0x28
  407324:	9808      	ldr	r0, [sp, #32]
  407326:	f002 fdd1 	bl	409ecc <__sprint_r>
  40732a:	2800      	cmp	r0, #0
  40732c:	f47f ad2e 	bne.w	406d8c <_vfprintf_r+0xb14>
  407330:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407334:	e437      	b.n	406ba6 <_vfprintf_r+0x92e>
  407336:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407338:	4ab4      	ldr	r2, [pc, #720]	; (40760c <_vfprintf_r+0x1394>)
  40733a:	f8c8 2000 	str.w	r2, [r8]
  40733e:	3301      	adds	r3, #1
  407340:	3401      	adds	r4, #1
  407342:	2201      	movs	r2, #1
  407344:	2b07      	cmp	r3, #7
  407346:	9425      	str	r4, [sp, #148]	; 0x94
  407348:	9324      	str	r3, [sp, #144]	; 0x90
  40734a:	f8c8 2004 	str.w	r2, [r8, #4]
  40734e:	f300 8124 	bgt.w	40759a <_vfprintf_r+0x1322>
  407352:	f108 0808 	add.w	r8, r8, #8
  407356:	b929      	cbnz	r1, 407364 <_vfprintf_r+0x10ec>
  407358:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40735a:	b91b      	cbnz	r3, 407364 <_vfprintf_r+0x10ec>
  40735c:	9b06      	ldr	r3, [sp, #24]
  40735e:	07de      	lsls	r6, r3, #31
  407360:	f57f a98f 	bpl.w	406682 <_vfprintf_r+0x40a>
  407364:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407366:	9814      	ldr	r0, [sp, #80]	; 0x50
  407368:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40736a:	f8c8 2000 	str.w	r2, [r8]
  40736e:	3301      	adds	r3, #1
  407370:	4602      	mov	r2, r0
  407372:	4422      	add	r2, r4
  407374:	2b07      	cmp	r3, #7
  407376:	9225      	str	r2, [sp, #148]	; 0x94
  407378:	f8c8 0004 	str.w	r0, [r8, #4]
  40737c:	9324      	str	r3, [sp, #144]	; 0x90
  40737e:	f300 8169 	bgt.w	407654 <_vfprintf_r+0x13dc>
  407382:	f108 0808 	add.w	r8, r8, #8
  407386:	2900      	cmp	r1, #0
  407388:	f2c0 8136 	blt.w	4075f8 <_vfprintf_r+0x1380>
  40738c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40738e:	f8c8 7000 	str.w	r7, [r8]
  407392:	3301      	adds	r3, #1
  407394:	188c      	adds	r4, r1, r2
  407396:	2b07      	cmp	r3, #7
  407398:	9425      	str	r4, [sp, #148]	; 0x94
  40739a:	9324      	str	r3, [sp, #144]	; 0x90
  40739c:	f8c8 1004 	str.w	r1, [r8, #4]
  4073a0:	f77f a96d 	ble.w	40667e <_vfprintf_r+0x406>
  4073a4:	e4e0      	b.n	406d68 <_vfprintf_r+0xaf0>
  4073a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4073a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4073aa:	6813      	ldr	r3, [r2, #0]
  4073ac:	17cd      	asrs	r5, r1, #31
  4073ae:	4608      	mov	r0, r1
  4073b0:	3204      	adds	r2, #4
  4073b2:	4629      	mov	r1, r5
  4073b4:	920e      	str	r2, [sp, #56]	; 0x38
  4073b6:	e9c3 0100 	strd	r0, r1, [r3]
  4073ba:	f7fe bfa9 	b.w	406310 <_vfprintf_r+0x98>
  4073be:	46da      	mov	sl, fp
  4073c0:	f7ff bbc4 	b.w	406b4c <_vfprintf_r+0x8d4>
  4073c4:	aa23      	add	r2, sp, #140	; 0x8c
  4073c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4073c8:	9808      	ldr	r0, [sp, #32]
  4073ca:	f002 fd7f 	bl	409ecc <__sprint_r>
  4073ce:	2800      	cmp	r0, #0
  4073d0:	f47f acdc 	bne.w	406d8c <_vfprintf_r+0xb14>
  4073d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4073d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4073da:	f7ff bbfd 	b.w	406bd8 <_vfprintf_r+0x960>
  4073de:	4638      	mov	r0, r7
  4073e0:	9409      	str	r4, [sp, #36]	; 0x24
  4073e2:	f7fd fcad 	bl	404d40 <strlen>
  4073e6:	950e      	str	r5, [sp, #56]	; 0x38
  4073e8:	900d      	str	r0, [sp, #52]	; 0x34
  4073ea:	f8cd b018 	str.w	fp, [sp, #24]
  4073ee:	4603      	mov	r3, r0
  4073f0:	f7ff ba36 	b.w	406860 <_vfprintf_r+0x5e8>
  4073f4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4073f8:	2300      	movs	r3, #0
  4073fa:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4073fe:	9309      	str	r3, [sp, #36]	; 0x24
  407400:	f7ff b86f 	b.w	4064e2 <_vfprintf_r+0x26a>
  407404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407406:	9310      	str	r3, [sp, #64]	; 0x40
  407408:	461a      	mov	r2, r3
  40740a:	3303      	adds	r3, #3
  40740c:	db04      	blt.n	407418 <_vfprintf_r+0x11a0>
  40740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407410:	4619      	mov	r1, r3
  407412:	4291      	cmp	r1, r2
  407414:	f6bf af45 	bge.w	4072a2 <_vfprintf_r+0x102a>
  407418:	3e02      	subs	r6, #2
  40741a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40741c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  407420:	3b01      	subs	r3, #1
  407422:	2b00      	cmp	r3, #0
  407424:	931d      	str	r3, [sp, #116]	; 0x74
  407426:	bfbd      	ittte	lt
  407428:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40742a:	f1c3 0301 	rsblt	r3, r3, #1
  40742e:	222d      	movlt	r2, #45	; 0x2d
  407430:	222b      	movge	r2, #43	; 0x2b
  407432:	2b09      	cmp	r3, #9
  407434:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  407438:	f340 813e 	ble.w	4076b8 <_vfprintf_r+0x1440>
  40743c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  407440:	4620      	mov	r0, r4
  407442:	4d73      	ldr	r5, [pc, #460]	; (407610 <_vfprintf_r+0x1398>)
  407444:	e000      	b.n	407448 <_vfprintf_r+0x11d0>
  407446:	4610      	mov	r0, r2
  407448:	fb85 1203 	smull	r1, r2, r5, r3
  40744c:	17d9      	asrs	r1, r3, #31
  40744e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407452:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407456:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40745a:	3230      	adds	r2, #48	; 0x30
  40745c:	2909      	cmp	r1, #9
  40745e:	f800 2c01 	strb.w	r2, [r0, #-1]
  407462:	460b      	mov	r3, r1
  407464:	f100 32ff 	add.w	r2, r0, #4294967295
  407468:	dced      	bgt.n	407446 <_vfprintf_r+0x11ce>
  40746a:	3330      	adds	r3, #48	; 0x30
  40746c:	3802      	subs	r0, #2
  40746e:	b2d9      	uxtb	r1, r3
  407470:	4284      	cmp	r4, r0
  407472:	f802 1c01 	strb.w	r1, [r2, #-1]
  407476:	f240 8190 	bls.w	40779a <_vfprintf_r+0x1522>
  40747a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  40747e:	4613      	mov	r3, r2
  407480:	e001      	b.n	407486 <_vfprintf_r+0x120e>
  407482:	f813 1b01 	ldrb.w	r1, [r3], #1
  407486:	f800 1b01 	strb.w	r1, [r0], #1
  40748a:	42a3      	cmp	r3, r4
  40748c:	d1f9      	bne.n	407482 <_vfprintf_r+0x120a>
  40748e:	3301      	adds	r3, #1
  407490:	1a9b      	subs	r3, r3, r2
  407492:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407496:	4413      	add	r3, r2
  407498:	aa1f      	add	r2, sp, #124	; 0x7c
  40749a:	1a9b      	subs	r3, r3, r2
  40749c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40749e:	9319      	str	r3, [sp, #100]	; 0x64
  4074a0:	2a01      	cmp	r2, #1
  4074a2:	4413      	add	r3, r2
  4074a4:	930d      	str	r3, [sp, #52]	; 0x34
  4074a6:	f340 8145 	ble.w	407734 <_vfprintf_r+0x14bc>
  4074aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4074ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4074ae:	4413      	add	r3, r2
  4074b0:	930d      	str	r3, [sp, #52]	; 0x34
  4074b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4074b6:	9307      	str	r3, [sp, #28]
  4074b8:	2300      	movs	r3, #0
  4074ba:	9310      	str	r3, [sp, #64]	; 0x40
  4074bc:	e700      	b.n	4072c0 <_vfprintf_r+0x1048>
  4074be:	aa23      	add	r2, sp, #140	; 0x8c
  4074c0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074c2:	9808      	ldr	r0, [sp, #32]
  4074c4:	f002 fd02 	bl	409ecc <__sprint_r>
  4074c8:	2800      	cmp	r0, #0
  4074ca:	f47f ac5f 	bne.w	406d8c <_vfprintf_r+0xb14>
  4074ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4074d0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4074d4:	e4d1      	b.n	406e7a <_vfprintf_r+0xc02>
  4074d6:	4623      	mov	r3, r4
  4074d8:	e6d5      	b.n	407286 <_vfprintf_r+0x100e>
  4074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074dc:	9710      	str	r7, [sp, #64]	; 0x40
  4074de:	2b06      	cmp	r3, #6
  4074e0:	bf28      	it	cs
  4074e2:	2306      	movcs	r3, #6
  4074e4:	9709      	str	r7, [sp, #36]	; 0x24
  4074e6:	46ba      	mov	sl, r7
  4074e8:	9307      	str	r3, [sp, #28]
  4074ea:	950e      	str	r5, [sp, #56]	; 0x38
  4074ec:	f8cd b018 	str.w	fp, [sp, #24]
  4074f0:	930d      	str	r3, [sp, #52]	; 0x34
  4074f2:	4f48      	ldr	r7, [pc, #288]	; (407614 <_vfprintf_r+0x139c>)
  4074f4:	f7fe bff2 	b.w	4064dc <_vfprintf_r+0x264>
  4074f8:	aa23      	add	r2, sp, #140	; 0x8c
  4074fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074fc:	9808      	ldr	r0, [sp, #32]
  4074fe:	f002 fce5 	bl	409ecc <__sprint_r>
  407502:	2800      	cmp	r0, #0
  407504:	f47f ac42 	bne.w	406d8c <_vfprintf_r+0xb14>
  407508:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40750a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40750c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40750e:	1ad3      	subs	r3, r2, r3
  407510:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407514:	e5b6      	b.n	407084 <_vfprintf_r+0xe0c>
  407516:	46a2      	mov	sl, r4
  407518:	f7ff bb18 	b.w	406b4c <_vfprintf_r+0x8d4>
  40751c:	a821      	add	r0, sp, #132	; 0x84
  40751e:	a91e      	add	r1, sp, #120	; 0x78
  407520:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407522:	9004      	str	r0, [sp, #16]
  407524:	9103      	str	r1, [sp, #12]
  407526:	a81d      	add	r0, sp, #116	; 0x74
  407528:	2103      	movs	r1, #3
  40752a:	9002      	str	r0, [sp, #8]
  40752c:	9a07      	ldr	r2, [sp, #28]
  40752e:	9501      	str	r5, [sp, #4]
  407530:	4653      	mov	r3, sl
  407532:	9100      	str	r1, [sp, #0]
  407534:	9808      	ldr	r0, [sp, #32]
  407536:	f000 fa97 	bl	407a68 <_dtoa_r>
  40753a:	4607      	mov	r7, r0
  40753c:	1944      	adds	r4, r0, r5
  40753e:	783b      	ldrb	r3, [r7, #0]
  407540:	2b30      	cmp	r3, #48	; 0x30
  407542:	f000 80ca 	beq.w	4076da <_vfprintf_r+0x1462>
  407546:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407548:	442c      	add	r4, r5
  40754a:	e689      	b.n	407260 <_vfprintf_r+0xfe8>
  40754c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40754e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407550:	4413      	add	r3, r2
  407552:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407554:	930d      	str	r3, [sp, #52]	; 0x34
  407556:	2a00      	cmp	r2, #0
  407558:	f340 80e4 	ble.w	407724 <_vfprintf_r+0x14ac>
  40755c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407560:	9307      	str	r3, [sp, #28]
  407562:	2667      	movs	r6, #103	; 0x67
  407564:	e6ac      	b.n	4072c0 <_vfprintf_r+0x1048>
  407566:	2b00      	cmp	r3, #0
  407568:	f340 80fb 	ble.w	407762 <_vfprintf_r+0x14ea>
  40756c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40756e:	2a00      	cmp	r2, #0
  407570:	f040 80ce 	bne.w	407710 <_vfprintf_r+0x1498>
  407574:	f01b 0f01 	tst.w	fp, #1
  407578:	f040 80ca 	bne.w	407710 <_vfprintf_r+0x1498>
  40757c:	9307      	str	r3, [sp, #28]
  40757e:	930d      	str	r3, [sp, #52]	; 0x34
  407580:	e69e      	b.n	4072c0 <_vfprintf_r+0x1048>
  407582:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407584:	9307      	str	r3, [sp, #28]
  407586:	930d      	str	r3, [sp, #52]	; 0x34
  407588:	9009      	str	r0, [sp, #36]	; 0x24
  40758a:	950e      	str	r5, [sp, #56]	; 0x38
  40758c:	f8cd b018 	str.w	fp, [sp, #24]
  407590:	9010      	str	r0, [sp, #64]	; 0x40
  407592:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407596:	f7fe bfa1 	b.w	4064dc <_vfprintf_r+0x264>
  40759a:	aa23      	add	r2, sp, #140	; 0x8c
  40759c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40759e:	9808      	ldr	r0, [sp, #32]
  4075a0:	f002 fc94 	bl	409ecc <__sprint_r>
  4075a4:	2800      	cmp	r0, #0
  4075a6:	f47f abf1 	bne.w	406d8c <_vfprintf_r+0xb14>
  4075aa:	991d      	ldr	r1, [sp, #116]	; 0x74
  4075ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4075ae:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4075b2:	e6d0      	b.n	407356 <_vfprintf_r+0x10de>
  4075b4:	2e47      	cmp	r6, #71	; 0x47
  4075b6:	f47f ae52 	bne.w	40725e <_vfprintf_r+0xfe6>
  4075ba:	f01b 0f01 	tst.w	fp, #1
  4075be:	f000 80da 	beq.w	407776 <_vfprintf_r+0x14fe>
  4075c2:	2e46      	cmp	r6, #70	; 0x46
  4075c4:	eb07 0405 	add.w	r4, r7, r5
  4075c8:	d0b9      	beq.n	40753e <_vfprintf_r+0x12c6>
  4075ca:	e649      	b.n	407260 <_vfprintf_r+0xfe8>
  4075cc:	a821      	add	r0, sp, #132	; 0x84
  4075ce:	a91e      	add	r1, sp, #120	; 0x78
  4075d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4075d2:	9004      	str	r0, [sp, #16]
  4075d4:	9103      	str	r1, [sp, #12]
  4075d6:	a81d      	add	r0, sp, #116	; 0x74
  4075d8:	2103      	movs	r1, #3
  4075da:	9002      	str	r0, [sp, #8]
  4075dc:	9a07      	ldr	r2, [sp, #28]
  4075de:	9401      	str	r4, [sp, #4]
  4075e0:	4653      	mov	r3, sl
  4075e2:	9100      	str	r1, [sp, #0]
  4075e4:	9808      	ldr	r0, [sp, #32]
  4075e6:	f000 fa3f 	bl	407a68 <_dtoa_r>
  4075ea:	4625      	mov	r5, r4
  4075ec:	4607      	mov	r7, r0
  4075ee:	e7e8      	b.n	4075c2 <_vfprintf_r+0x134a>
  4075f0:	2300      	movs	r3, #0
  4075f2:	9309      	str	r3, [sp, #36]	; 0x24
  4075f4:	f7fe bec1 	b.w	40637a <_vfprintf_r+0x102>
  4075f8:	424e      	negs	r6, r1
  4075fa:	3110      	adds	r1, #16
  4075fc:	4d06      	ldr	r5, [pc, #24]	; (407618 <_vfprintf_r+0x13a0>)
  4075fe:	da43      	bge.n	407688 <_vfprintf_r+0x1410>
  407600:	2410      	movs	r4, #16
  407602:	f8dd a020 	ldr.w	sl, [sp, #32]
  407606:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40760a:	e00c      	b.n	407626 <_vfprintf_r+0x13ae>
  40760c:	0040b49c 	.word	0x0040b49c
  407610:	66666667 	.word	0x66666667
  407614:	0040b494 	.word	0x0040b494
  407618:	0040b4d0 	.word	0x0040b4d0
  40761c:	f108 0808 	add.w	r8, r8, #8
  407620:	3e10      	subs	r6, #16
  407622:	2e10      	cmp	r6, #16
  407624:	dd30      	ble.n	407688 <_vfprintf_r+0x1410>
  407626:	3301      	adds	r3, #1
  407628:	3210      	adds	r2, #16
  40762a:	2b07      	cmp	r3, #7
  40762c:	9225      	str	r2, [sp, #148]	; 0x94
  40762e:	9324      	str	r3, [sp, #144]	; 0x90
  407630:	f8c8 5000 	str.w	r5, [r8]
  407634:	f8c8 4004 	str.w	r4, [r8, #4]
  407638:	ddf0      	ble.n	40761c <_vfprintf_r+0x13a4>
  40763a:	aa23      	add	r2, sp, #140	; 0x8c
  40763c:	4659      	mov	r1, fp
  40763e:	4650      	mov	r0, sl
  407640:	f002 fc44 	bl	409ecc <__sprint_r>
  407644:	2800      	cmp	r0, #0
  407646:	f47f aeba 	bne.w	4073be <_vfprintf_r+0x1146>
  40764a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40764c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40764e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407652:	e7e5      	b.n	407620 <_vfprintf_r+0x13a8>
  407654:	aa23      	add	r2, sp, #140	; 0x8c
  407656:	990a      	ldr	r1, [sp, #40]	; 0x28
  407658:	9808      	ldr	r0, [sp, #32]
  40765a:	f002 fc37 	bl	409ecc <__sprint_r>
  40765e:	2800      	cmp	r0, #0
  407660:	f47f ab94 	bne.w	406d8c <_vfprintf_r+0xb14>
  407664:	991d      	ldr	r1, [sp, #116]	; 0x74
  407666:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407668:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40766a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40766e:	e68a      	b.n	407386 <_vfprintf_r+0x110e>
  407670:	9808      	ldr	r0, [sp, #32]
  407672:	aa23      	add	r2, sp, #140	; 0x8c
  407674:	4651      	mov	r1, sl
  407676:	f002 fc29 	bl	409ecc <__sprint_r>
  40767a:	2800      	cmp	r0, #0
  40767c:	f43f aa64 	beq.w	406b48 <_vfprintf_r+0x8d0>
  407680:	f7ff ba64 	b.w	406b4c <_vfprintf_r+0x8d4>
  407684:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407686:	e5fe      	b.n	407286 <_vfprintf_r+0x100e>
  407688:	3301      	adds	r3, #1
  40768a:	4432      	add	r2, r6
  40768c:	2b07      	cmp	r3, #7
  40768e:	e888 0060 	stmia.w	r8, {r5, r6}
  407692:	9225      	str	r2, [sp, #148]	; 0x94
  407694:	9324      	str	r3, [sp, #144]	; 0x90
  407696:	f108 0808 	add.w	r8, r8, #8
  40769a:	f77f ae77 	ble.w	40738c <_vfprintf_r+0x1114>
  40769e:	aa23      	add	r2, sp, #140	; 0x8c
  4076a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4076a2:	9808      	ldr	r0, [sp, #32]
  4076a4:	f002 fc12 	bl	409ecc <__sprint_r>
  4076a8:	2800      	cmp	r0, #0
  4076aa:	f47f ab6f 	bne.w	406d8c <_vfprintf_r+0xb14>
  4076ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4076b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076b2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4076b6:	e669      	b.n	40738c <_vfprintf_r+0x1114>
  4076b8:	3330      	adds	r3, #48	; 0x30
  4076ba:	2230      	movs	r2, #48	; 0x30
  4076bc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4076c0:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4076c4:	ab20      	add	r3, sp, #128	; 0x80
  4076c6:	e6e7      	b.n	407498 <_vfprintf_r+0x1220>
  4076c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4076ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4076cc:	4413      	add	r3, r2
  4076ce:	930d      	str	r3, [sp, #52]	; 0x34
  4076d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4076d4:	9307      	str	r3, [sp, #28]
  4076d6:	2667      	movs	r6, #103	; 0x67
  4076d8:	e5f2      	b.n	4072c0 <_vfprintf_r+0x1048>
  4076da:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4076dc:	9807      	ldr	r0, [sp, #28]
  4076de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4076e0:	4651      	mov	r1, sl
  4076e2:	f003 fac3 	bl	40ac6c <__aeabi_dcmpeq>
  4076e6:	2800      	cmp	r0, #0
  4076e8:	f47f af2d 	bne.w	407546 <_vfprintf_r+0x12ce>
  4076ec:	f1c5 0501 	rsb	r5, r5, #1
  4076f0:	951d      	str	r5, [sp, #116]	; 0x74
  4076f2:	442c      	add	r4, r5
  4076f4:	e5b4      	b.n	407260 <_vfprintf_r+0xfe8>
  4076f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076f8:	4f33      	ldr	r7, [pc, #204]	; (4077c8 <_vfprintf_r+0x1550>)
  4076fa:	2b00      	cmp	r3, #0
  4076fc:	bfb6      	itet	lt
  4076fe:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  407702:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  407706:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40770a:	4b30      	ldr	r3, [pc, #192]	; (4077cc <_vfprintf_r+0x1554>)
  40770c:	f7ff b9d1 	b.w	406ab2 <_vfprintf_r+0x83a>
  407710:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407712:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407714:	4413      	add	r3, r2
  407716:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407718:	441a      	add	r2, r3
  40771a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40771e:	920d      	str	r2, [sp, #52]	; 0x34
  407720:	9307      	str	r3, [sp, #28]
  407722:	e5cd      	b.n	4072c0 <_vfprintf_r+0x1048>
  407724:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407728:	f1c3 0301 	rsb	r3, r3, #1
  40772c:	441a      	add	r2, r3
  40772e:	4613      	mov	r3, r2
  407730:	920d      	str	r2, [sp, #52]	; 0x34
  407732:	e713      	b.n	40755c <_vfprintf_r+0x12e4>
  407734:	f01b 0301 	ands.w	r3, fp, #1
  407738:	9310      	str	r3, [sp, #64]	; 0x40
  40773a:	f47f aeb6 	bne.w	4074aa <_vfprintf_r+0x1232>
  40773e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407744:	9307      	str	r3, [sp, #28]
  407746:	e5bb      	b.n	4072c0 <_vfprintf_r+0x1048>
  407748:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40774a:	f899 6001 	ldrb.w	r6, [r9, #1]
  40774e:	6823      	ldr	r3, [r4, #0]
  407750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  407754:	9309      	str	r3, [sp, #36]	; 0x24
  407756:	4623      	mov	r3, r4
  407758:	3304      	adds	r3, #4
  40775a:	4681      	mov	r9, r0
  40775c:	930e      	str	r3, [sp, #56]	; 0x38
  40775e:	f7fe be0a 	b.w	406376 <_vfprintf_r+0xfe>
  407762:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407764:	b913      	cbnz	r3, 40776c <_vfprintf_r+0x14f4>
  407766:	f01b 0f01 	tst.w	fp, #1
  40776a:	d002      	beq.n	407772 <_vfprintf_r+0x14fa>
  40776c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40776e:	3301      	adds	r3, #1
  407770:	e7d1      	b.n	407716 <_vfprintf_r+0x149e>
  407772:	2301      	movs	r3, #1
  407774:	e702      	b.n	40757c <_vfprintf_r+0x1304>
  407776:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407778:	1bdb      	subs	r3, r3, r7
  40777a:	9311      	str	r3, [sp, #68]	; 0x44
  40777c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40777e:	2b47      	cmp	r3, #71	; 0x47
  407780:	f43f ae40 	beq.w	407404 <_vfprintf_r+0x118c>
  407784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407786:	9310      	str	r3, [sp, #64]	; 0x40
  407788:	e647      	b.n	40741a <_vfprintf_r+0x11a2>
  40778a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40778e:	f7ff b81d 	b.w	4067cc <_vfprintf_r+0x554>
  407792:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407796:	f7ff b918 	b.w	4069ca <_vfprintf_r+0x752>
  40779a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40779e:	e67b      	b.n	407498 <_vfprintf_r+0x1220>
  4077a0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077a4:	f7ff b866 	b.w	406874 <_vfprintf_r+0x5fc>
  4077a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077ac:	f7ff b9ac 	b.w	406b08 <_vfprintf_r+0x890>
  4077b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077b4:	f7ff b934 	b.w	406a20 <_vfprintf_r+0x7a8>
  4077b8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077bc:	f7ff b8b0 	b.w	406920 <_vfprintf_r+0x6a8>
  4077c0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077c4:	f7ff b945 	b.w	406a52 <_vfprintf_r+0x7da>
  4077c8:	0040b468 	.word	0x0040b468
  4077cc:	0040b464 	.word	0x0040b464

004077d0 <__sbprintf>:
  4077d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4077d4:	460c      	mov	r4, r1
  4077d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4077da:	8989      	ldrh	r1, [r1, #12]
  4077dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4077de:	89e5      	ldrh	r5, [r4, #14]
  4077e0:	9619      	str	r6, [sp, #100]	; 0x64
  4077e2:	f021 0102 	bic.w	r1, r1, #2
  4077e6:	4606      	mov	r6, r0
  4077e8:	69e0      	ldr	r0, [r4, #28]
  4077ea:	f8ad 100c 	strh.w	r1, [sp, #12]
  4077ee:	4617      	mov	r7, r2
  4077f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4077f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4077f6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4077fa:	4698      	mov	r8, r3
  4077fc:	ad1a      	add	r5, sp, #104	; 0x68
  4077fe:	2300      	movs	r3, #0
  407800:	9007      	str	r0, [sp, #28]
  407802:	a816      	add	r0, sp, #88	; 0x58
  407804:	9209      	str	r2, [sp, #36]	; 0x24
  407806:	9306      	str	r3, [sp, #24]
  407808:	9500      	str	r5, [sp, #0]
  40780a:	9504      	str	r5, [sp, #16]
  40780c:	9102      	str	r1, [sp, #8]
  40780e:	9105      	str	r1, [sp, #20]
  407810:	f001 fc84 	bl	40911c <__retarget_lock_init_recursive>
  407814:	4643      	mov	r3, r8
  407816:	463a      	mov	r2, r7
  407818:	4669      	mov	r1, sp
  40781a:	4630      	mov	r0, r6
  40781c:	f7fe fd2c 	bl	406278 <_vfprintf_r>
  407820:	1e05      	subs	r5, r0, #0
  407822:	db07      	blt.n	407834 <__sbprintf+0x64>
  407824:	4630      	mov	r0, r6
  407826:	4669      	mov	r1, sp
  407828:	f001 f8e8 	bl	4089fc <_fflush_r>
  40782c:	2800      	cmp	r0, #0
  40782e:	bf18      	it	ne
  407830:	f04f 35ff 	movne.w	r5, #4294967295
  407834:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407838:	065b      	lsls	r3, r3, #25
  40783a:	d503      	bpl.n	407844 <__sbprintf+0x74>
  40783c:	89a3      	ldrh	r3, [r4, #12]
  40783e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407842:	81a3      	strh	r3, [r4, #12]
  407844:	9816      	ldr	r0, [sp, #88]	; 0x58
  407846:	f001 fc6b 	bl	409120 <__retarget_lock_close_recursive>
  40784a:	4628      	mov	r0, r5
  40784c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407854 <__swsetup_r>:
  407854:	b538      	push	{r3, r4, r5, lr}
  407856:	4b30      	ldr	r3, [pc, #192]	; (407918 <__swsetup_r+0xc4>)
  407858:	681b      	ldr	r3, [r3, #0]
  40785a:	4605      	mov	r5, r0
  40785c:	460c      	mov	r4, r1
  40785e:	b113      	cbz	r3, 407866 <__swsetup_r+0x12>
  407860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407862:	2a00      	cmp	r2, #0
  407864:	d038      	beq.n	4078d8 <__swsetup_r+0x84>
  407866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40786a:	b293      	uxth	r3, r2
  40786c:	0718      	lsls	r0, r3, #28
  40786e:	d50c      	bpl.n	40788a <__swsetup_r+0x36>
  407870:	6920      	ldr	r0, [r4, #16]
  407872:	b1a8      	cbz	r0, 4078a0 <__swsetup_r+0x4c>
  407874:	f013 0201 	ands.w	r2, r3, #1
  407878:	d01e      	beq.n	4078b8 <__swsetup_r+0x64>
  40787a:	6963      	ldr	r3, [r4, #20]
  40787c:	2200      	movs	r2, #0
  40787e:	425b      	negs	r3, r3
  407880:	61a3      	str	r3, [r4, #24]
  407882:	60a2      	str	r2, [r4, #8]
  407884:	b1f0      	cbz	r0, 4078c4 <__swsetup_r+0x70>
  407886:	2000      	movs	r0, #0
  407888:	bd38      	pop	{r3, r4, r5, pc}
  40788a:	06d9      	lsls	r1, r3, #27
  40788c:	d53c      	bpl.n	407908 <__swsetup_r+0xb4>
  40788e:	0758      	lsls	r0, r3, #29
  407890:	d426      	bmi.n	4078e0 <__swsetup_r+0x8c>
  407892:	6920      	ldr	r0, [r4, #16]
  407894:	f042 0308 	orr.w	r3, r2, #8
  407898:	81a3      	strh	r3, [r4, #12]
  40789a:	b29b      	uxth	r3, r3
  40789c:	2800      	cmp	r0, #0
  40789e:	d1e9      	bne.n	407874 <__swsetup_r+0x20>
  4078a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4078a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4078a8:	d0e4      	beq.n	407874 <__swsetup_r+0x20>
  4078aa:	4628      	mov	r0, r5
  4078ac:	4621      	mov	r1, r4
  4078ae:	f001 fc6b 	bl	409188 <__smakebuf_r>
  4078b2:	89a3      	ldrh	r3, [r4, #12]
  4078b4:	6920      	ldr	r0, [r4, #16]
  4078b6:	e7dd      	b.n	407874 <__swsetup_r+0x20>
  4078b8:	0799      	lsls	r1, r3, #30
  4078ba:	bf58      	it	pl
  4078bc:	6962      	ldrpl	r2, [r4, #20]
  4078be:	60a2      	str	r2, [r4, #8]
  4078c0:	2800      	cmp	r0, #0
  4078c2:	d1e0      	bne.n	407886 <__swsetup_r+0x32>
  4078c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078c8:	061a      	lsls	r2, r3, #24
  4078ca:	d5dd      	bpl.n	407888 <__swsetup_r+0x34>
  4078cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4078d0:	81a3      	strh	r3, [r4, #12]
  4078d2:	f04f 30ff 	mov.w	r0, #4294967295
  4078d6:	bd38      	pop	{r3, r4, r5, pc}
  4078d8:	4618      	mov	r0, r3
  4078da:	f001 f8e7 	bl	408aac <__sinit>
  4078de:	e7c2      	b.n	407866 <__swsetup_r+0x12>
  4078e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4078e2:	b151      	cbz	r1, 4078fa <__swsetup_r+0xa6>
  4078e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4078e8:	4299      	cmp	r1, r3
  4078ea:	d004      	beq.n	4078f6 <__swsetup_r+0xa2>
  4078ec:	4628      	mov	r0, r5
  4078ee:	f001 f97f 	bl	408bf0 <_free_r>
  4078f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4078f6:	2300      	movs	r3, #0
  4078f8:	6323      	str	r3, [r4, #48]	; 0x30
  4078fa:	2300      	movs	r3, #0
  4078fc:	6920      	ldr	r0, [r4, #16]
  4078fe:	6063      	str	r3, [r4, #4]
  407900:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407904:	6020      	str	r0, [r4, #0]
  407906:	e7c5      	b.n	407894 <__swsetup_r+0x40>
  407908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40790c:	2309      	movs	r3, #9
  40790e:	602b      	str	r3, [r5, #0]
  407910:	f04f 30ff 	mov.w	r0, #4294967295
  407914:	81a2      	strh	r2, [r4, #12]
  407916:	bd38      	pop	{r3, r4, r5, pc}
  407918:	20400028 	.word	0x20400028

0040791c <register_fini>:
  40791c:	4b02      	ldr	r3, [pc, #8]	; (407928 <register_fini+0xc>)
  40791e:	b113      	cbz	r3, 407926 <register_fini+0xa>
  407920:	4802      	ldr	r0, [pc, #8]	; (40792c <register_fini+0x10>)
  407922:	f000 b805 	b.w	407930 <atexit>
  407926:	4770      	bx	lr
  407928:	00000000 	.word	0x00000000
  40792c:	00408b1d 	.word	0x00408b1d

00407930 <atexit>:
  407930:	2300      	movs	r3, #0
  407932:	4601      	mov	r1, r0
  407934:	461a      	mov	r2, r3
  407936:	4618      	mov	r0, r3
  407938:	f002 bae8 	b.w	409f0c <__register_exitproc>

0040793c <quorem>:
  40793c:	6902      	ldr	r2, [r0, #16]
  40793e:	690b      	ldr	r3, [r1, #16]
  407940:	4293      	cmp	r3, r2
  407942:	f300 808d 	bgt.w	407a60 <quorem+0x124>
  407946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40794a:	f103 38ff 	add.w	r8, r3, #4294967295
  40794e:	f101 0714 	add.w	r7, r1, #20
  407952:	f100 0b14 	add.w	fp, r0, #20
  407956:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40795a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40795e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407962:	b083      	sub	sp, #12
  407964:	3201      	adds	r2, #1
  407966:	fbb3 f9f2 	udiv	r9, r3, r2
  40796a:	eb0b 0304 	add.w	r3, fp, r4
  40796e:	9400      	str	r4, [sp, #0]
  407970:	eb07 0a04 	add.w	sl, r7, r4
  407974:	9301      	str	r3, [sp, #4]
  407976:	f1b9 0f00 	cmp.w	r9, #0
  40797a:	d039      	beq.n	4079f0 <quorem+0xb4>
  40797c:	2500      	movs	r5, #0
  40797e:	462e      	mov	r6, r5
  407980:	46bc      	mov	ip, r7
  407982:	46de      	mov	lr, fp
  407984:	f85c 4b04 	ldr.w	r4, [ip], #4
  407988:	f8de 3000 	ldr.w	r3, [lr]
  40798c:	b2a2      	uxth	r2, r4
  40798e:	fb09 5502 	mla	r5, r9, r2, r5
  407992:	0c22      	lsrs	r2, r4, #16
  407994:	0c2c      	lsrs	r4, r5, #16
  407996:	fb09 4202 	mla	r2, r9, r2, r4
  40799a:	b2ad      	uxth	r5, r5
  40799c:	1b75      	subs	r5, r6, r5
  40799e:	b296      	uxth	r6, r2
  4079a0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4079a4:	fa15 f383 	uxtah	r3, r5, r3
  4079a8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4079ac:	b29b      	uxth	r3, r3
  4079ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4079b2:	45e2      	cmp	sl, ip
  4079b4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4079b8:	f84e 3b04 	str.w	r3, [lr], #4
  4079bc:	ea4f 4626 	mov.w	r6, r6, asr #16
  4079c0:	d2e0      	bcs.n	407984 <quorem+0x48>
  4079c2:	9b00      	ldr	r3, [sp, #0]
  4079c4:	f85b 3003 	ldr.w	r3, [fp, r3]
  4079c8:	b993      	cbnz	r3, 4079f0 <quorem+0xb4>
  4079ca:	9c01      	ldr	r4, [sp, #4]
  4079cc:	1f23      	subs	r3, r4, #4
  4079ce:	459b      	cmp	fp, r3
  4079d0:	d20c      	bcs.n	4079ec <quorem+0xb0>
  4079d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4079d6:	b94b      	cbnz	r3, 4079ec <quorem+0xb0>
  4079d8:	f1a4 0308 	sub.w	r3, r4, #8
  4079dc:	e002      	b.n	4079e4 <quorem+0xa8>
  4079de:	681a      	ldr	r2, [r3, #0]
  4079e0:	3b04      	subs	r3, #4
  4079e2:	b91a      	cbnz	r2, 4079ec <quorem+0xb0>
  4079e4:	459b      	cmp	fp, r3
  4079e6:	f108 38ff 	add.w	r8, r8, #4294967295
  4079ea:	d3f8      	bcc.n	4079de <quorem+0xa2>
  4079ec:	f8c0 8010 	str.w	r8, [r0, #16]
  4079f0:	4604      	mov	r4, r0
  4079f2:	f001 fec7 	bl	409784 <__mcmp>
  4079f6:	2800      	cmp	r0, #0
  4079f8:	db2e      	blt.n	407a58 <quorem+0x11c>
  4079fa:	f109 0901 	add.w	r9, r9, #1
  4079fe:	465d      	mov	r5, fp
  407a00:	2300      	movs	r3, #0
  407a02:	f857 1b04 	ldr.w	r1, [r7], #4
  407a06:	6828      	ldr	r0, [r5, #0]
  407a08:	b28a      	uxth	r2, r1
  407a0a:	1a9a      	subs	r2, r3, r2
  407a0c:	0c0b      	lsrs	r3, r1, #16
  407a0e:	fa12 f280 	uxtah	r2, r2, r0
  407a12:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407a16:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407a1a:	b292      	uxth	r2, r2
  407a1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407a20:	45ba      	cmp	sl, r7
  407a22:	f845 2b04 	str.w	r2, [r5], #4
  407a26:	ea4f 4323 	mov.w	r3, r3, asr #16
  407a2a:	d2ea      	bcs.n	407a02 <quorem+0xc6>
  407a2c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407a30:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407a34:	b982      	cbnz	r2, 407a58 <quorem+0x11c>
  407a36:	1f1a      	subs	r2, r3, #4
  407a38:	4593      	cmp	fp, r2
  407a3a:	d20b      	bcs.n	407a54 <quorem+0x118>
  407a3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407a40:	b942      	cbnz	r2, 407a54 <quorem+0x118>
  407a42:	3b08      	subs	r3, #8
  407a44:	e002      	b.n	407a4c <quorem+0x110>
  407a46:	681a      	ldr	r2, [r3, #0]
  407a48:	3b04      	subs	r3, #4
  407a4a:	b91a      	cbnz	r2, 407a54 <quorem+0x118>
  407a4c:	459b      	cmp	fp, r3
  407a4e:	f108 38ff 	add.w	r8, r8, #4294967295
  407a52:	d3f8      	bcc.n	407a46 <quorem+0x10a>
  407a54:	f8c4 8010 	str.w	r8, [r4, #16]
  407a58:	4648      	mov	r0, r9
  407a5a:	b003      	add	sp, #12
  407a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a60:	2000      	movs	r0, #0
  407a62:	4770      	bx	lr
  407a64:	0000      	movs	r0, r0
	...

00407a68 <_dtoa_r>:
  407a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407a6e:	b09b      	sub	sp, #108	; 0x6c
  407a70:	4604      	mov	r4, r0
  407a72:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407a74:	4692      	mov	sl, r2
  407a76:	469b      	mov	fp, r3
  407a78:	b141      	cbz	r1, 407a8c <_dtoa_r+0x24>
  407a7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407a7c:	604a      	str	r2, [r1, #4]
  407a7e:	2301      	movs	r3, #1
  407a80:	4093      	lsls	r3, r2
  407a82:	608b      	str	r3, [r1, #8]
  407a84:	f001 fca6 	bl	4093d4 <_Bfree>
  407a88:	2300      	movs	r3, #0
  407a8a:	6423      	str	r3, [r4, #64]	; 0x40
  407a8c:	f1bb 0f00 	cmp.w	fp, #0
  407a90:	465d      	mov	r5, fp
  407a92:	db35      	blt.n	407b00 <_dtoa_r+0x98>
  407a94:	2300      	movs	r3, #0
  407a96:	6033      	str	r3, [r6, #0]
  407a98:	4b9d      	ldr	r3, [pc, #628]	; (407d10 <_dtoa_r+0x2a8>)
  407a9a:	43ab      	bics	r3, r5
  407a9c:	d015      	beq.n	407aca <_dtoa_r+0x62>
  407a9e:	4650      	mov	r0, sl
  407aa0:	4659      	mov	r1, fp
  407aa2:	2200      	movs	r2, #0
  407aa4:	2300      	movs	r3, #0
  407aa6:	f003 f8e1 	bl	40ac6c <__aeabi_dcmpeq>
  407aaa:	4680      	mov	r8, r0
  407aac:	2800      	cmp	r0, #0
  407aae:	d02d      	beq.n	407b0c <_dtoa_r+0xa4>
  407ab0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407ab2:	2301      	movs	r3, #1
  407ab4:	6013      	str	r3, [r2, #0]
  407ab6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407ab8:	2b00      	cmp	r3, #0
  407aba:	f000 80bd 	beq.w	407c38 <_dtoa_r+0x1d0>
  407abe:	4895      	ldr	r0, [pc, #596]	; (407d14 <_dtoa_r+0x2ac>)
  407ac0:	6018      	str	r0, [r3, #0]
  407ac2:	3801      	subs	r0, #1
  407ac4:	b01b      	add	sp, #108	; 0x6c
  407ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407aca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407acc:	f242 730f 	movw	r3, #9999	; 0x270f
  407ad0:	6013      	str	r3, [r2, #0]
  407ad2:	f1ba 0f00 	cmp.w	sl, #0
  407ad6:	d10d      	bne.n	407af4 <_dtoa_r+0x8c>
  407ad8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407adc:	b955      	cbnz	r5, 407af4 <_dtoa_r+0x8c>
  407ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407ae0:	488d      	ldr	r0, [pc, #564]	; (407d18 <_dtoa_r+0x2b0>)
  407ae2:	2b00      	cmp	r3, #0
  407ae4:	d0ee      	beq.n	407ac4 <_dtoa_r+0x5c>
  407ae6:	f100 0308 	add.w	r3, r0, #8
  407aea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407aec:	6013      	str	r3, [r2, #0]
  407aee:	b01b      	add	sp, #108	; 0x6c
  407af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407af4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407af6:	4889      	ldr	r0, [pc, #548]	; (407d1c <_dtoa_r+0x2b4>)
  407af8:	2b00      	cmp	r3, #0
  407afa:	d0e3      	beq.n	407ac4 <_dtoa_r+0x5c>
  407afc:	1cc3      	adds	r3, r0, #3
  407afe:	e7f4      	b.n	407aea <_dtoa_r+0x82>
  407b00:	2301      	movs	r3, #1
  407b02:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407b06:	6033      	str	r3, [r6, #0]
  407b08:	46ab      	mov	fp, r5
  407b0a:	e7c5      	b.n	407a98 <_dtoa_r+0x30>
  407b0c:	aa18      	add	r2, sp, #96	; 0x60
  407b0e:	ab19      	add	r3, sp, #100	; 0x64
  407b10:	9201      	str	r2, [sp, #4]
  407b12:	9300      	str	r3, [sp, #0]
  407b14:	4652      	mov	r2, sl
  407b16:	465b      	mov	r3, fp
  407b18:	4620      	mov	r0, r4
  407b1a:	f001 fed3 	bl	4098c4 <__d2b>
  407b1e:	0d2b      	lsrs	r3, r5, #20
  407b20:	4681      	mov	r9, r0
  407b22:	d071      	beq.n	407c08 <_dtoa_r+0x1a0>
  407b24:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407b28:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407b2c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407b2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407b32:	4650      	mov	r0, sl
  407b34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407b38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407b3c:	2200      	movs	r2, #0
  407b3e:	4b78      	ldr	r3, [pc, #480]	; (407d20 <_dtoa_r+0x2b8>)
  407b40:	f002 fc78 	bl	40a434 <__aeabi_dsub>
  407b44:	a36c      	add	r3, pc, #432	; (adr r3, 407cf8 <_dtoa_r+0x290>)
  407b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b4a:	f002 fe27 	bl	40a79c <__aeabi_dmul>
  407b4e:	a36c      	add	r3, pc, #432	; (adr r3, 407d00 <_dtoa_r+0x298>)
  407b50:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b54:	f002 fc70 	bl	40a438 <__adddf3>
  407b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407b5c:	4630      	mov	r0, r6
  407b5e:	f002 fdb7 	bl	40a6d0 <__aeabi_i2d>
  407b62:	a369      	add	r3, pc, #420	; (adr r3, 407d08 <_dtoa_r+0x2a0>)
  407b64:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b68:	f002 fe18 	bl	40a79c <__aeabi_dmul>
  407b6c:	4602      	mov	r2, r0
  407b6e:	460b      	mov	r3, r1
  407b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407b74:	f002 fc60 	bl	40a438 <__adddf3>
  407b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407b7c:	f003 f8be 	bl	40acfc <__aeabi_d2iz>
  407b80:	2200      	movs	r2, #0
  407b82:	9002      	str	r0, [sp, #8]
  407b84:	2300      	movs	r3, #0
  407b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407b8a:	f003 f879 	bl	40ac80 <__aeabi_dcmplt>
  407b8e:	2800      	cmp	r0, #0
  407b90:	f040 8173 	bne.w	407e7a <_dtoa_r+0x412>
  407b94:	9d02      	ldr	r5, [sp, #8]
  407b96:	2d16      	cmp	r5, #22
  407b98:	f200 815d 	bhi.w	407e56 <_dtoa_r+0x3ee>
  407b9c:	4b61      	ldr	r3, [pc, #388]	; (407d24 <_dtoa_r+0x2bc>)
  407b9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  407ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
  407ba6:	4652      	mov	r2, sl
  407ba8:	465b      	mov	r3, fp
  407baa:	f003 f887 	bl	40acbc <__aeabi_dcmpgt>
  407bae:	2800      	cmp	r0, #0
  407bb0:	f000 81c5 	beq.w	407f3e <_dtoa_r+0x4d6>
  407bb4:	1e6b      	subs	r3, r5, #1
  407bb6:	9302      	str	r3, [sp, #8]
  407bb8:	2300      	movs	r3, #0
  407bba:	930e      	str	r3, [sp, #56]	; 0x38
  407bbc:	1bbf      	subs	r7, r7, r6
  407bbe:	1e7b      	subs	r3, r7, #1
  407bc0:	9306      	str	r3, [sp, #24]
  407bc2:	f100 8154 	bmi.w	407e6e <_dtoa_r+0x406>
  407bc6:	2300      	movs	r3, #0
  407bc8:	9308      	str	r3, [sp, #32]
  407bca:	9b02      	ldr	r3, [sp, #8]
  407bcc:	2b00      	cmp	r3, #0
  407bce:	f2c0 8145 	blt.w	407e5c <_dtoa_r+0x3f4>
  407bd2:	9a06      	ldr	r2, [sp, #24]
  407bd4:	930d      	str	r3, [sp, #52]	; 0x34
  407bd6:	4611      	mov	r1, r2
  407bd8:	4419      	add	r1, r3
  407bda:	2300      	movs	r3, #0
  407bdc:	9106      	str	r1, [sp, #24]
  407bde:	930c      	str	r3, [sp, #48]	; 0x30
  407be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407be2:	2b09      	cmp	r3, #9
  407be4:	d82a      	bhi.n	407c3c <_dtoa_r+0x1d4>
  407be6:	2b05      	cmp	r3, #5
  407be8:	f340 865b 	ble.w	4088a2 <_dtoa_r+0xe3a>
  407bec:	3b04      	subs	r3, #4
  407bee:	9324      	str	r3, [sp, #144]	; 0x90
  407bf0:	2500      	movs	r5, #0
  407bf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bf4:	3b02      	subs	r3, #2
  407bf6:	2b03      	cmp	r3, #3
  407bf8:	f200 8642 	bhi.w	408880 <_dtoa_r+0xe18>
  407bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
  407c00:	02c903d4 	.word	0x02c903d4
  407c04:	046103df 	.word	0x046103df
  407c08:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407c0a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407c0c:	443e      	add	r6, r7
  407c0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407c12:	2b20      	cmp	r3, #32
  407c14:	f340 818e 	ble.w	407f34 <_dtoa_r+0x4cc>
  407c18:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407c1c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407c20:	409d      	lsls	r5, r3
  407c22:	fa2a f000 	lsr.w	r0, sl, r0
  407c26:	4328      	orrs	r0, r5
  407c28:	f002 fd42 	bl	40a6b0 <__aeabi_ui2d>
  407c2c:	2301      	movs	r3, #1
  407c2e:	3e01      	subs	r6, #1
  407c30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407c34:	9314      	str	r3, [sp, #80]	; 0x50
  407c36:	e781      	b.n	407b3c <_dtoa_r+0xd4>
  407c38:	483b      	ldr	r0, [pc, #236]	; (407d28 <_dtoa_r+0x2c0>)
  407c3a:	e743      	b.n	407ac4 <_dtoa_r+0x5c>
  407c3c:	2100      	movs	r1, #0
  407c3e:	6461      	str	r1, [r4, #68]	; 0x44
  407c40:	4620      	mov	r0, r4
  407c42:	9125      	str	r1, [sp, #148]	; 0x94
  407c44:	f001 fba0 	bl	409388 <_Balloc>
  407c48:	f04f 33ff 	mov.w	r3, #4294967295
  407c4c:	930a      	str	r3, [sp, #40]	; 0x28
  407c4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407c50:	930f      	str	r3, [sp, #60]	; 0x3c
  407c52:	2301      	movs	r3, #1
  407c54:	9004      	str	r0, [sp, #16]
  407c56:	6420      	str	r0, [r4, #64]	; 0x40
  407c58:	9224      	str	r2, [sp, #144]	; 0x90
  407c5a:	930b      	str	r3, [sp, #44]	; 0x2c
  407c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407c5e:	2b00      	cmp	r3, #0
  407c60:	f2c0 80d9 	blt.w	407e16 <_dtoa_r+0x3ae>
  407c64:	9a02      	ldr	r2, [sp, #8]
  407c66:	2a0e      	cmp	r2, #14
  407c68:	f300 80d5 	bgt.w	407e16 <_dtoa_r+0x3ae>
  407c6c:	4b2d      	ldr	r3, [pc, #180]	; (407d24 <_dtoa_r+0x2bc>)
  407c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407c72:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407c7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407c7c:	2b00      	cmp	r3, #0
  407c7e:	f2c0 83ba 	blt.w	4083f6 <_dtoa_r+0x98e>
  407c82:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  407c86:	4650      	mov	r0, sl
  407c88:	462a      	mov	r2, r5
  407c8a:	4633      	mov	r3, r6
  407c8c:	4659      	mov	r1, fp
  407c8e:	f002 feaf 	bl	40a9f0 <__aeabi_ddiv>
  407c92:	f003 f833 	bl	40acfc <__aeabi_d2iz>
  407c96:	4680      	mov	r8, r0
  407c98:	f002 fd1a 	bl	40a6d0 <__aeabi_i2d>
  407c9c:	462a      	mov	r2, r5
  407c9e:	4633      	mov	r3, r6
  407ca0:	f002 fd7c 	bl	40a79c <__aeabi_dmul>
  407ca4:	460b      	mov	r3, r1
  407ca6:	4602      	mov	r2, r0
  407ca8:	4659      	mov	r1, fp
  407caa:	4650      	mov	r0, sl
  407cac:	f002 fbc2 	bl	40a434 <__aeabi_dsub>
  407cb0:	9d04      	ldr	r5, [sp, #16]
  407cb2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  407cb6:	702b      	strb	r3, [r5, #0]
  407cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cba:	2b01      	cmp	r3, #1
  407cbc:	4606      	mov	r6, r0
  407cbe:	460f      	mov	r7, r1
  407cc0:	f105 0501 	add.w	r5, r5, #1
  407cc4:	d068      	beq.n	407d98 <_dtoa_r+0x330>
  407cc6:	2200      	movs	r2, #0
  407cc8:	4b18      	ldr	r3, [pc, #96]	; (407d2c <_dtoa_r+0x2c4>)
  407cca:	f002 fd67 	bl	40a79c <__aeabi_dmul>
  407cce:	2200      	movs	r2, #0
  407cd0:	2300      	movs	r3, #0
  407cd2:	4606      	mov	r6, r0
  407cd4:	460f      	mov	r7, r1
  407cd6:	f002 ffc9 	bl	40ac6c <__aeabi_dcmpeq>
  407cda:	2800      	cmp	r0, #0
  407cdc:	f040 8088 	bne.w	407df0 <_dtoa_r+0x388>
  407ce0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  407ce4:	f04f 0a00 	mov.w	sl, #0
  407ce8:	f8df b040 	ldr.w	fp, [pc, #64]	; 407d2c <_dtoa_r+0x2c4>
  407cec:	940c      	str	r4, [sp, #48]	; 0x30
  407cee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407cf2:	e028      	b.n	407d46 <_dtoa_r+0x2de>
  407cf4:	f3af 8000 	nop.w
  407cf8:	636f4361 	.word	0x636f4361
  407cfc:	3fd287a7 	.word	0x3fd287a7
  407d00:	8b60c8b3 	.word	0x8b60c8b3
  407d04:	3fc68a28 	.word	0x3fc68a28
  407d08:	509f79fb 	.word	0x509f79fb
  407d0c:	3fd34413 	.word	0x3fd34413
  407d10:	7ff00000 	.word	0x7ff00000
  407d14:	0040b49d 	.word	0x0040b49d
  407d18:	0040b4e0 	.word	0x0040b4e0
  407d1c:	0040b4ec 	.word	0x0040b4ec
  407d20:	3ff80000 	.word	0x3ff80000
  407d24:	0040b518 	.word	0x0040b518
  407d28:	0040b49c 	.word	0x0040b49c
  407d2c:	40240000 	.word	0x40240000
  407d30:	f002 fd34 	bl	40a79c <__aeabi_dmul>
  407d34:	2200      	movs	r2, #0
  407d36:	2300      	movs	r3, #0
  407d38:	4606      	mov	r6, r0
  407d3a:	460f      	mov	r7, r1
  407d3c:	f002 ff96 	bl	40ac6c <__aeabi_dcmpeq>
  407d40:	2800      	cmp	r0, #0
  407d42:	f040 83c1 	bne.w	4084c8 <_dtoa_r+0xa60>
  407d46:	4642      	mov	r2, r8
  407d48:	464b      	mov	r3, r9
  407d4a:	4630      	mov	r0, r6
  407d4c:	4639      	mov	r1, r7
  407d4e:	f002 fe4f 	bl	40a9f0 <__aeabi_ddiv>
  407d52:	f002 ffd3 	bl	40acfc <__aeabi_d2iz>
  407d56:	4604      	mov	r4, r0
  407d58:	f002 fcba 	bl	40a6d0 <__aeabi_i2d>
  407d5c:	4642      	mov	r2, r8
  407d5e:	464b      	mov	r3, r9
  407d60:	f002 fd1c 	bl	40a79c <__aeabi_dmul>
  407d64:	4602      	mov	r2, r0
  407d66:	460b      	mov	r3, r1
  407d68:	4630      	mov	r0, r6
  407d6a:	4639      	mov	r1, r7
  407d6c:	f002 fb62 	bl	40a434 <__aeabi_dsub>
  407d70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407d74:	9e04      	ldr	r6, [sp, #16]
  407d76:	f805 eb01 	strb.w	lr, [r5], #1
  407d7a:	eba5 0e06 	sub.w	lr, r5, r6
  407d7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407d80:	45b6      	cmp	lr, r6
  407d82:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407d86:	4652      	mov	r2, sl
  407d88:	465b      	mov	r3, fp
  407d8a:	d1d1      	bne.n	407d30 <_dtoa_r+0x2c8>
  407d8c:	46a0      	mov	r8, r4
  407d8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407d92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407d94:	4606      	mov	r6, r0
  407d96:	460f      	mov	r7, r1
  407d98:	4632      	mov	r2, r6
  407d9a:	463b      	mov	r3, r7
  407d9c:	4630      	mov	r0, r6
  407d9e:	4639      	mov	r1, r7
  407da0:	f002 fb4a 	bl	40a438 <__adddf3>
  407da4:	4606      	mov	r6, r0
  407da6:	460f      	mov	r7, r1
  407da8:	4602      	mov	r2, r0
  407daa:	460b      	mov	r3, r1
  407dac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407db0:	f002 ff66 	bl	40ac80 <__aeabi_dcmplt>
  407db4:	b948      	cbnz	r0, 407dca <_dtoa_r+0x362>
  407db6:	4632      	mov	r2, r6
  407db8:	463b      	mov	r3, r7
  407dba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407dbe:	f002 ff55 	bl	40ac6c <__aeabi_dcmpeq>
  407dc2:	b1a8      	cbz	r0, 407df0 <_dtoa_r+0x388>
  407dc4:	f018 0f01 	tst.w	r8, #1
  407dc8:	d012      	beq.n	407df0 <_dtoa_r+0x388>
  407dca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407dce:	9a04      	ldr	r2, [sp, #16]
  407dd0:	1e6b      	subs	r3, r5, #1
  407dd2:	e004      	b.n	407dde <_dtoa_r+0x376>
  407dd4:	429a      	cmp	r2, r3
  407dd6:	f000 8401 	beq.w	4085dc <_dtoa_r+0xb74>
  407dda:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407dde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  407de2:	f103 0501 	add.w	r5, r3, #1
  407de6:	d0f5      	beq.n	407dd4 <_dtoa_r+0x36c>
  407de8:	f108 0801 	add.w	r8, r8, #1
  407dec:	f883 8000 	strb.w	r8, [r3]
  407df0:	4649      	mov	r1, r9
  407df2:	4620      	mov	r0, r4
  407df4:	f001 faee 	bl	4093d4 <_Bfree>
  407df8:	2200      	movs	r2, #0
  407dfa:	9b02      	ldr	r3, [sp, #8]
  407dfc:	702a      	strb	r2, [r5, #0]
  407dfe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407e00:	3301      	adds	r3, #1
  407e02:	6013      	str	r3, [r2, #0]
  407e04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407e06:	2b00      	cmp	r3, #0
  407e08:	f000 839e 	beq.w	408548 <_dtoa_r+0xae0>
  407e0c:	9804      	ldr	r0, [sp, #16]
  407e0e:	601d      	str	r5, [r3, #0]
  407e10:	b01b      	add	sp, #108	; 0x6c
  407e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407e18:	2a00      	cmp	r2, #0
  407e1a:	d03e      	beq.n	407e9a <_dtoa_r+0x432>
  407e1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e1e:	2a01      	cmp	r2, #1
  407e20:	f340 8311 	ble.w	408446 <_dtoa_r+0x9de>
  407e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e28:	1e5f      	subs	r7, r3, #1
  407e2a:	42ba      	cmp	r2, r7
  407e2c:	f2c0 838f 	blt.w	40854e <_dtoa_r+0xae6>
  407e30:	1bd7      	subs	r7, r2, r7
  407e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e34:	2b00      	cmp	r3, #0
  407e36:	f2c0 848b 	blt.w	408750 <_dtoa_r+0xce8>
  407e3a:	9d08      	ldr	r5, [sp, #32]
  407e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e3e:	9a08      	ldr	r2, [sp, #32]
  407e40:	441a      	add	r2, r3
  407e42:	9208      	str	r2, [sp, #32]
  407e44:	9a06      	ldr	r2, [sp, #24]
  407e46:	2101      	movs	r1, #1
  407e48:	441a      	add	r2, r3
  407e4a:	4620      	mov	r0, r4
  407e4c:	9206      	str	r2, [sp, #24]
  407e4e:	f001 fb5b 	bl	409508 <__i2b>
  407e52:	4606      	mov	r6, r0
  407e54:	e024      	b.n	407ea0 <_dtoa_r+0x438>
  407e56:	2301      	movs	r3, #1
  407e58:	930e      	str	r3, [sp, #56]	; 0x38
  407e5a:	e6af      	b.n	407bbc <_dtoa_r+0x154>
  407e5c:	9a08      	ldr	r2, [sp, #32]
  407e5e:	9b02      	ldr	r3, [sp, #8]
  407e60:	1ad2      	subs	r2, r2, r3
  407e62:	425b      	negs	r3, r3
  407e64:	930c      	str	r3, [sp, #48]	; 0x30
  407e66:	2300      	movs	r3, #0
  407e68:	9208      	str	r2, [sp, #32]
  407e6a:	930d      	str	r3, [sp, #52]	; 0x34
  407e6c:	e6b8      	b.n	407be0 <_dtoa_r+0x178>
  407e6e:	f1c7 0301 	rsb	r3, r7, #1
  407e72:	9308      	str	r3, [sp, #32]
  407e74:	2300      	movs	r3, #0
  407e76:	9306      	str	r3, [sp, #24]
  407e78:	e6a7      	b.n	407bca <_dtoa_r+0x162>
  407e7a:	9d02      	ldr	r5, [sp, #8]
  407e7c:	4628      	mov	r0, r5
  407e7e:	f002 fc27 	bl	40a6d0 <__aeabi_i2d>
  407e82:	4602      	mov	r2, r0
  407e84:	460b      	mov	r3, r1
  407e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407e8a:	f002 feef 	bl	40ac6c <__aeabi_dcmpeq>
  407e8e:	2800      	cmp	r0, #0
  407e90:	f47f ae80 	bne.w	407b94 <_dtoa_r+0x12c>
  407e94:	1e6b      	subs	r3, r5, #1
  407e96:	9302      	str	r3, [sp, #8]
  407e98:	e67c      	b.n	407b94 <_dtoa_r+0x12c>
  407e9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407e9c:	9d08      	ldr	r5, [sp, #32]
  407e9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407ea0:	2d00      	cmp	r5, #0
  407ea2:	dd0c      	ble.n	407ebe <_dtoa_r+0x456>
  407ea4:	9906      	ldr	r1, [sp, #24]
  407ea6:	2900      	cmp	r1, #0
  407ea8:	460b      	mov	r3, r1
  407eaa:	dd08      	ble.n	407ebe <_dtoa_r+0x456>
  407eac:	42a9      	cmp	r1, r5
  407eae:	9a08      	ldr	r2, [sp, #32]
  407eb0:	bfa8      	it	ge
  407eb2:	462b      	movge	r3, r5
  407eb4:	1ad2      	subs	r2, r2, r3
  407eb6:	1aed      	subs	r5, r5, r3
  407eb8:	1acb      	subs	r3, r1, r3
  407eba:	9208      	str	r2, [sp, #32]
  407ebc:	9306      	str	r3, [sp, #24]
  407ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407ec0:	b1d3      	cbz	r3, 407ef8 <_dtoa_r+0x490>
  407ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ec4:	2b00      	cmp	r3, #0
  407ec6:	f000 82b7 	beq.w	408438 <_dtoa_r+0x9d0>
  407eca:	2f00      	cmp	r7, #0
  407ecc:	dd10      	ble.n	407ef0 <_dtoa_r+0x488>
  407ece:	4631      	mov	r1, r6
  407ed0:	463a      	mov	r2, r7
  407ed2:	4620      	mov	r0, r4
  407ed4:	f001 fbb4 	bl	409640 <__pow5mult>
  407ed8:	464a      	mov	r2, r9
  407eda:	4601      	mov	r1, r0
  407edc:	4606      	mov	r6, r0
  407ede:	4620      	mov	r0, r4
  407ee0:	f001 fb1c 	bl	40951c <__multiply>
  407ee4:	4649      	mov	r1, r9
  407ee6:	4680      	mov	r8, r0
  407ee8:	4620      	mov	r0, r4
  407eea:	f001 fa73 	bl	4093d4 <_Bfree>
  407eee:	46c1      	mov	r9, r8
  407ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407ef2:	1bda      	subs	r2, r3, r7
  407ef4:	f040 82a1 	bne.w	40843a <_dtoa_r+0x9d2>
  407ef8:	2101      	movs	r1, #1
  407efa:	4620      	mov	r0, r4
  407efc:	f001 fb04 	bl	409508 <__i2b>
  407f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f02:	2b00      	cmp	r3, #0
  407f04:	4680      	mov	r8, r0
  407f06:	dd1c      	ble.n	407f42 <_dtoa_r+0x4da>
  407f08:	4601      	mov	r1, r0
  407f0a:	461a      	mov	r2, r3
  407f0c:	4620      	mov	r0, r4
  407f0e:	f001 fb97 	bl	409640 <__pow5mult>
  407f12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f14:	2b01      	cmp	r3, #1
  407f16:	4680      	mov	r8, r0
  407f18:	f340 8254 	ble.w	4083c4 <_dtoa_r+0x95c>
  407f1c:	2300      	movs	r3, #0
  407f1e:	930c      	str	r3, [sp, #48]	; 0x30
  407f20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407f24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407f28:	6918      	ldr	r0, [r3, #16]
  407f2a:	f001 fa9d 	bl	409468 <__hi0bits>
  407f2e:	f1c0 0020 	rsb	r0, r0, #32
  407f32:	e010      	b.n	407f56 <_dtoa_r+0x4ee>
  407f34:	f1c3 0520 	rsb	r5, r3, #32
  407f38:	fa0a f005 	lsl.w	r0, sl, r5
  407f3c:	e674      	b.n	407c28 <_dtoa_r+0x1c0>
  407f3e:	900e      	str	r0, [sp, #56]	; 0x38
  407f40:	e63c      	b.n	407bbc <_dtoa_r+0x154>
  407f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f44:	2b01      	cmp	r3, #1
  407f46:	f340 8287 	ble.w	408458 <_dtoa_r+0x9f0>
  407f4a:	2300      	movs	r3, #0
  407f4c:	930c      	str	r3, [sp, #48]	; 0x30
  407f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f50:	2001      	movs	r0, #1
  407f52:	2b00      	cmp	r3, #0
  407f54:	d1e4      	bne.n	407f20 <_dtoa_r+0x4b8>
  407f56:	9a06      	ldr	r2, [sp, #24]
  407f58:	4410      	add	r0, r2
  407f5a:	f010 001f 	ands.w	r0, r0, #31
  407f5e:	f000 80a1 	beq.w	4080a4 <_dtoa_r+0x63c>
  407f62:	f1c0 0320 	rsb	r3, r0, #32
  407f66:	2b04      	cmp	r3, #4
  407f68:	f340 849e 	ble.w	4088a8 <_dtoa_r+0xe40>
  407f6c:	9b08      	ldr	r3, [sp, #32]
  407f6e:	f1c0 001c 	rsb	r0, r0, #28
  407f72:	4403      	add	r3, r0
  407f74:	9308      	str	r3, [sp, #32]
  407f76:	4613      	mov	r3, r2
  407f78:	4403      	add	r3, r0
  407f7a:	4405      	add	r5, r0
  407f7c:	9306      	str	r3, [sp, #24]
  407f7e:	9b08      	ldr	r3, [sp, #32]
  407f80:	2b00      	cmp	r3, #0
  407f82:	dd05      	ble.n	407f90 <_dtoa_r+0x528>
  407f84:	4649      	mov	r1, r9
  407f86:	461a      	mov	r2, r3
  407f88:	4620      	mov	r0, r4
  407f8a:	f001 fba9 	bl	4096e0 <__lshift>
  407f8e:	4681      	mov	r9, r0
  407f90:	9b06      	ldr	r3, [sp, #24]
  407f92:	2b00      	cmp	r3, #0
  407f94:	dd05      	ble.n	407fa2 <_dtoa_r+0x53a>
  407f96:	4641      	mov	r1, r8
  407f98:	461a      	mov	r2, r3
  407f9a:	4620      	mov	r0, r4
  407f9c:	f001 fba0 	bl	4096e0 <__lshift>
  407fa0:	4680      	mov	r8, r0
  407fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407fa4:	2b00      	cmp	r3, #0
  407fa6:	f040 8086 	bne.w	4080b6 <_dtoa_r+0x64e>
  407faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fac:	2b00      	cmp	r3, #0
  407fae:	f340 8266 	ble.w	40847e <_dtoa_r+0xa16>
  407fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407fb4:	2b00      	cmp	r3, #0
  407fb6:	f000 8098 	beq.w	4080ea <_dtoa_r+0x682>
  407fba:	2d00      	cmp	r5, #0
  407fbc:	dd05      	ble.n	407fca <_dtoa_r+0x562>
  407fbe:	4631      	mov	r1, r6
  407fc0:	462a      	mov	r2, r5
  407fc2:	4620      	mov	r0, r4
  407fc4:	f001 fb8c 	bl	4096e0 <__lshift>
  407fc8:	4606      	mov	r6, r0
  407fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407fcc:	2b00      	cmp	r3, #0
  407fce:	f040 8337 	bne.w	408640 <_dtoa_r+0xbd8>
  407fd2:	9606      	str	r6, [sp, #24]
  407fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fd6:	9a04      	ldr	r2, [sp, #16]
  407fd8:	f8dd b018 	ldr.w	fp, [sp, #24]
  407fdc:	3b01      	subs	r3, #1
  407fde:	18d3      	adds	r3, r2, r3
  407fe0:	930b      	str	r3, [sp, #44]	; 0x2c
  407fe2:	f00a 0301 	and.w	r3, sl, #1
  407fe6:	930c      	str	r3, [sp, #48]	; 0x30
  407fe8:	4617      	mov	r7, r2
  407fea:	46c2      	mov	sl, r8
  407fec:	4651      	mov	r1, sl
  407fee:	4648      	mov	r0, r9
  407ff0:	f7ff fca4 	bl	40793c <quorem>
  407ff4:	4631      	mov	r1, r6
  407ff6:	4605      	mov	r5, r0
  407ff8:	4648      	mov	r0, r9
  407ffa:	f001 fbc3 	bl	409784 <__mcmp>
  407ffe:	465a      	mov	r2, fp
  408000:	900a      	str	r0, [sp, #40]	; 0x28
  408002:	4651      	mov	r1, sl
  408004:	4620      	mov	r0, r4
  408006:	f001 fbd9 	bl	4097bc <__mdiff>
  40800a:	68c2      	ldr	r2, [r0, #12]
  40800c:	4680      	mov	r8, r0
  40800e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  408012:	2a00      	cmp	r2, #0
  408014:	f040 822b 	bne.w	40846e <_dtoa_r+0xa06>
  408018:	4601      	mov	r1, r0
  40801a:	4648      	mov	r0, r9
  40801c:	9308      	str	r3, [sp, #32]
  40801e:	f001 fbb1 	bl	409784 <__mcmp>
  408022:	4641      	mov	r1, r8
  408024:	9006      	str	r0, [sp, #24]
  408026:	4620      	mov	r0, r4
  408028:	f001 f9d4 	bl	4093d4 <_Bfree>
  40802c:	9a06      	ldr	r2, [sp, #24]
  40802e:	9b08      	ldr	r3, [sp, #32]
  408030:	b932      	cbnz	r2, 408040 <_dtoa_r+0x5d8>
  408032:	9924      	ldr	r1, [sp, #144]	; 0x90
  408034:	b921      	cbnz	r1, 408040 <_dtoa_r+0x5d8>
  408036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408038:	2a00      	cmp	r2, #0
  40803a:	f000 83ef 	beq.w	40881c <_dtoa_r+0xdb4>
  40803e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408040:	990a      	ldr	r1, [sp, #40]	; 0x28
  408042:	2900      	cmp	r1, #0
  408044:	f2c0 829f 	blt.w	408586 <_dtoa_r+0xb1e>
  408048:	d105      	bne.n	408056 <_dtoa_r+0x5ee>
  40804a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40804c:	b919      	cbnz	r1, 408056 <_dtoa_r+0x5ee>
  40804e:	990c      	ldr	r1, [sp, #48]	; 0x30
  408050:	2900      	cmp	r1, #0
  408052:	f000 8298 	beq.w	408586 <_dtoa_r+0xb1e>
  408056:	2a00      	cmp	r2, #0
  408058:	f300 8306 	bgt.w	408668 <_dtoa_r+0xc00>
  40805c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40805e:	703b      	strb	r3, [r7, #0]
  408060:	f107 0801 	add.w	r8, r7, #1
  408064:	4297      	cmp	r7, r2
  408066:	4645      	mov	r5, r8
  408068:	f000 830c 	beq.w	408684 <_dtoa_r+0xc1c>
  40806c:	4649      	mov	r1, r9
  40806e:	2300      	movs	r3, #0
  408070:	220a      	movs	r2, #10
  408072:	4620      	mov	r0, r4
  408074:	f001 f9b8 	bl	4093e8 <__multadd>
  408078:	455e      	cmp	r6, fp
  40807a:	4681      	mov	r9, r0
  40807c:	4631      	mov	r1, r6
  40807e:	f04f 0300 	mov.w	r3, #0
  408082:	f04f 020a 	mov.w	r2, #10
  408086:	4620      	mov	r0, r4
  408088:	f000 81eb 	beq.w	408462 <_dtoa_r+0x9fa>
  40808c:	f001 f9ac 	bl	4093e8 <__multadd>
  408090:	4659      	mov	r1, fp
  408092:	4606      	mov	r6, r0
  408094:	2300      	movs	r3, #0
  408096:	220a      	movs	r2, #10
  408098:	4620      	mov	r0, r4
  40809a:	f001 f9a5 	bl	4093e8 <__multadd>
  40809e:	4647      	mov	r7, r8
  4080a0:	4683      	mov	fp, r0
  4080a2:	e7a3      	b.n	407fec <_dtoa_r+0x584>
  4080a4:	201c      	movs	r0, #28
  4080a6:	9b08      	ldr	r3, [sp, #32]
  4080a8:	4403      	add	r3, r0
  4080aa:	9308      	str	r3, [sp, #32]
  4080ac:	9b06      	ldr	r3, [sp, #24]
  4080ae:	4403      	add	r3, r0
  4080b0:	4405      	add	r5, r0
  4080b2:	9306      	str	r3, [sp, #24]
  4080b4:	e763      	b.n	407f7e <_dtoa_r+0x516>
  4080b6:	4641      	mov	r1, r8
  4080b8:	4648      	mov	r0, r9
  4080ba:	f001 fb63 	bl	409784 <__mcmp>
  4080be:	2800      	cmp	r0, #0
  4080c0:	f6bf af73 	bge.w	407faa <_dtoa_r+0x542>
  4080c4:	9f02      	ldr	r7, [sp, #8]
  4080c6:	4649      	mov	r1, r9
  4080c8:	2300      	movs	r3, #0
  4080ca:	220a      	movs	r2, #10
  4080cc:	4620      	mov	r0, r4
  4080ce:	3f01      	subs	r7, #1
  4080d0:	9702      	str	r7, [sp, #8]
  4080d2:	f001 f989 	bl	4093e8 <__multadd>
  4080d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4080d8:	4681      	mov	r9, r0
  4080da:	2b00      	cmp	r3, #0
  4080dc:	f040 83b6 	bne.w	40884c <_dtoa_r+0xde4>
  4080e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4080e2:	2b00      	cmp	r3, #0
  4080e4:	f340 83bf 	ble.w	408866 <_dtoa_r+0xdfe>
  4080e8:	930a      	str	r3, [sp, #40]	; 0x28
  4080ea:	f8dd b010 	ldr.w	fp, [sp, #16]
  4080ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4080f0:	465d      	mov	r5, fp
  4080f2:	e002      	b.n	4080fa <_dtoa_r+0x692>
  4080f4:	f001 f978 	bl	4093e8 <__multadd>
  4080f8:	4681      	mov	r9, r0
  4080fa:	4641      	mov	r1, r8
  4080fc:	4648      	mov	r0, r9
  4080fe:	f7ff fc1d 	bl	40793c <quorem>
  408102:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  408106:	f805 ab01 	strb.w	sl, [r5], #1
  40810a:	eba5 030b 	sub.w	r3, r5, fp
  40810e:	42bb      	cmp	r3, r7
  408110:	f04f 020a 	mov.w	r2, #10
  408114:	f04f 0300 	mov.w	r3, #0
  408118:	4649      	mov	r1, r9
  40811a:	4620      	mov	r0, r4
  40811c:	dbea      	blt.n	4080f4 <_dtoa_r+0x68c>
  40811e:	9b04      	ldr	r3, [sp, #16]
  408120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408122:	2a01      	cmp	r2, #1
  408124:	bfac      	ite	ge
  408126:	189b      	addge	r3, r3, r2
  408128:	3301      	addlt	r3, #1
  40812a:	461d      	mov	r5, r3
  40812c:	f04f 0b00 	mov.w	fp, #0
  408130:	4649      	mov	r1, r9
  408132:	2201      	movs	r2, #1
  408134:	4620      	mov	r0, r4
  408136:	f001 fad3 	bl	4096e0 <__lshift>
  40813a:	4641      	mov	r1, r8
  40813c:	4681      	mov	r9, r0
  40813e:	f001 fb21 	bl	409784 <__mcmp>
  408142:	2800      	cmp	r0, #0
  408144:	f340 823d 	ble.w	4085c2 <_dtoa_r+0xb5a>
  408148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40814c:	9904      	ldr	r1, [sp, #16]
  40814e:	1e6b      	subs	r3, r5, #1
  408150:	e004      	b.n	40815c <_dtoa_r+0x6f4>
  408152:	428b      	cmp	r3, r1
  408154:	f000 81ae 	beq.w	4084b4 <_dtoa_r+0xa4c>
  408158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40815c:	2a39      	cmp	r2, #57	; 0x39
  40815e:	f103 0501 	add.w	r5, r3, #1
  408162:	d0f6      	beq.n	408152 <_dtoa_r+0x6ea>
  408164:	3201      	adds	r2, #1
  408166:	701a      	strb	r2, [r3, #0]
  408168:	4641      	mov	r1, r8
  40816a:	4620      	mov	r0, r4
  40816c:	f001 f932 	bl	4093d4 <_Bfree>
  408170:	2e00      	cmp	r6, #0
  408172:	f43f ae3d 	beq.w	407df0 <_dtoa_r+0x388>
  408176:	f1bb 0f00 	cmp.w	fp, #0
  40817a:	d005      	beq.n	408188 <_dtoa_r+0x720>
  40817c:	45b3      	cmp	fp, r6
  40817e:	d003      	beq.n	408188 <_dtoa_r+0x720>
  408180:	4659      	mov	r1, fp
  408182:	4620      	mov	r0, r4
  408184:	f001 f926 	bl	4093d4 <_Bfree>
  408188:	4631      	mov	r1, r6
  40818a:	4620      	mov	r0, r4
  40818c:	f001 f922 	bl	4093d4 <_Bfree>
  408190:	e62e      	b.n	407df0 <_dtoa_r+0x388>
  408192:	2300      	movs	r3, #0
  408194:	930b      	str	r3, [sp, #44]	; 0x2c
  408196:	9b02      	ldr	r3, [sp, #8]
  408198:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40819a:	4413      	add	r3, r2
  40819c:	930f      	str	r3, [sp, #60]	; 0x3c
  40819e:	3301      	adds	r3, #1
  4081a0:	2b01      	cmp	r3, #1
  4081a2:	461f      	mov	r7, r3
  4081a4:	461e      	mov	r6, r3
  4081a6:	930a      	str	r3, [sp, #40]	; 0x28
  4081a8:	bfb8      	it	lt
  4081aa:	2701      	movlt	r7, #1
  4081ac:	2100      	movs	r1, #0
  4081ae:	2f17      	cmp	r7, #23
  4081b0:	6461      	str	r1, [r4, #68]	; 0x44
  4081b2:	d90a      	bls.n	4081ca <_dtoa_r+0x762>
  4081b4:	2201      	movs	r2, #1
  4081b6:	2304      	movs	r3, #4
  4081b8:	005b      	lsls	r3, r3, #1
  4081ba:	f103 0014 	add.w	r0, r3, #20
  4081be:	4287      	cmp	r7, r0
  4081c0:	4611      	mov	r1, r2
  4081c2:	f102 0201 	add.w	r2, r2, #1
  4081c6:	d2f7      	bcs.n	4081b8 <_dtoa_r+0x750>
  4081c8:	6461      	str	r1, [r4, #68]	; 0x44
  4081ca:	4620      	mov	r0, r4
  4081cc:	f001 f8dc 	bl	409388 <_Balloc>
  4081d0:	2e0e      	cmp	r6, #14
  4081d2:	9004      	str	r0, [sp, #16]
  4081d4:	6420      	str	r0, [r4, #64]	; 0x40
  4081d6:	f63f ad41 	bhi.w	407c5c <_dtoa_r+0x1f4>
  4081da:	2d00      	cmp	r5, #0
  4081dc:	f43f ad3e 	beq.w	407c5c <_dtoa_r+0x1f4>
  4081e0:	9902      	ldr	r1, [sp, #8]
  4081e2:	2900      	cmp	r1, #0
  4081e4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4081e8:	f340 8202 	ble.w	4085f0 <_dtoa_r+0xb88>
  4081ec:	4bb8      	ldr	r3, [pc, #736]	; (4084d0 <_dtoa_r+0xa68>)
  4081ee:	f001 020f 	and.w	r2, r1, #15
  4081f2:	110d      	asrs	r5, r1, #4
  4081f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4081f8:	06e9      	lsls	r1, r5, #27
  4081fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4081fe:	f140 81ae 	bpl.w	40855e <_dtoa_r+0xaf6>
  408202:	4bb4      	ldr	r3, [pc, #720]	; (4084d4 <_dtoa_r+0xa6c>)
  408204:	4650      	mov	r0, sl
  408206:	4659      	mov	r1, fp
  408208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40820c:	f002 fbf0 	bl	40a9f0 <__aeabi_ddiv>
  408210:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  408214:	f005 050f 	and.w	r5, r5, #15
  408218:	f04f 0a03 	mov.w	sl, #3
  40821c:	b18d      	cbz	r5, 408242 <_dtoa_r+0x7da>
  40821e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4084d4 <_dtoa_r+0xa6c>
  408222:	07ea      	lsls	r2, r5, #31
  408224:	d509      	bpl.n	40823a <_dtoa_r+0x7d2>
  408226:	4630      	mov	r0, r6
  408228:	4639      	mov	r1, r7
  40822a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40822e:	f002 fab5 	bl	40a79c <__aeabi_dmul>
  408232:	f10a 0a01 	add.w	sl, sl, #1
  408236:	4606      	mov	r6, r0
  408238:	460f      	mov	r7, r1
  40823a:	106d      	asrs	r5, r5, #1
  40823c:	f108 0808 	add.w	r8, r8, #8
  408240:	d1ef      	bne.n	408222 <_dtoa_r+0x7ba>
  408242:	463b      	mov	r3, r7
  408244:	4632      	mov	r2, r6
  408246:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40824a:	f002 fbd1 	bl	40a9f0 <__aeabi_ddiv>
  40824e:	4607      	mov	r7, r0
  408250:	4688      	mov	r8, r1
  408252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408254:	b143      	cbz	r3, 408268 <_dtoa_r+0x800>
  408256:	2200      	movs	r2, #0
  408258:	4b9f      	ldr	r3, [pc, #636]	; (4084d8 <_dtoa_r+0xa70>)
  40825a:	4638      	mov	r0, r7
  40825c:	4641      	mov	r1, r8
  40825e:	f002 fd0f 	bl	40ac80 <__aeabi_dcmplt>
  408262:	2800      	cmp	r0, #0
  408264:	f040 8286 	bne.w	408774 <_dtoa_r+0xd0c>
  408268:	4650      	mov	r0, sl
  40826a:	f002 fa31 	bl	40a6d0 <__aeabi_i2d>
  40826e:	463a      	mov	r2, r7
  408270:	4643      	mov	r3, r8
  408272:	f002 fa93 	bl	40a79c <__aeabi_dmul>
  408276:	4b99      	ldr	r3, [pc, #612]	; (4084dc <_dtoa_r+0xa74>)
  408278:	2200      	movs	r2, #0
  40827a:	f002 f8dd 	bl	40a438 <__adddf3>
  40827e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408280:	4605      	mov	r5, r0
  408282:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408286:	2b00      	cmp	r3, #0
  408288:	f000 813e 	beq.w	408508 <_dtoa_r+0xaa0>
  40828c:	9b02      	ldr	r3, [sp, #8]
  40828e:	9315      	str	r3, [sp, #84]	; 0x54
  408290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408292:	9312      	str	r3, [sp, #72]	; 0x48
  408294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408296:	2b00      	cmp	r3, #0
  408298:	f000 81fa 	beq.w	408690 <_dtoa_r+0xc28>
  40829c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40829e:	4b8c      	ldr	r3, [pc, #560]	; (4084d0 <_dtoa_r+0xa68>)
  4082a0:	498f      	ldr	r1, [pc, #572]	; (4084e0 <_dtoa_r+0xa78>)
  4082a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4082a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4082aa:	2000      	movs	r0, #0
  4082ac:	f002 fba0 	bl	40a9f0 <__aeabi_ddiv>
  4082b0:	462a      	mov	r2, r5
  4082b2:	4633      	mov	r3, r6
  4082b4:	f002 f8be 	bl	40a434 <__aeabi_dsub>
  4082b8:	4682      	mov	sl, r0
  4082ba:	468b      	mov	fp, r1
  4082bc:	4638      	mov	r0, r7
  4082be:	4641      	mov	r1, r8
  4082c0:	f002 fd1c 	bl	40acfc <__aeabi_d2iz>
  4082c4:	4605      	mov	r5, r0
  4082c6:	f002 fa03 	bl	40a6d0 <__aeabi_i2d>
  4082ca:	4602      	mov	r2, r0
  4082cc:	460b      	mov	r3, r1
  4082ce:	4638      	mov	r0, r7
  4082d0:	4641      	mov	r1, r8
  4082d2:	f002 f8af 	bl	40a434 <__aeabi_dsub>
  4082d6:	3530      	adds	r5, #48	; 0x30
  4082d8:	fa5f f885 	uxtb.w	r8, r5
  4082dc:	9d04      	ldr	r5, [sp, #16]
  4082de:	4606      	mov	r6, r0
  4082e0:	460f      	mov	r7, r1
  4082e2:	f885 8000 	strb.w	r8, [r5]
  4082e6:	4602      	mov	r2, r0
  4082e8:	460b      	mov	r3, r1
  4082ea:	4650      	mov	r0, sl
  4082ec:	4659      	mov	r1, fp
  4082ee:	3501      	adds	r5, #1
  4082f0:	f002 fce4 	bl	40acbc <__aeabi_dcmpgt>
  4082f4:	2800      	cmp	r0, #0
  4082f6:	d154      	bne.n	4083a2 <_dtoa_r+0x93a>
  4082f8:	4632      	mov	r2, r6
  4082fa:	463b      	mov	r3, r7
  4082fc:	2000      	movs	r0, #0
  4082fe:	4976      	ldr	r1, [pc, #472]	; (4084d8 <_dtoa_r+0xa70>)
  408300:	f002 f898 	bl	40a434 <__aeabi_dsub>
  408304:	4602      	mov	r2, r0
  408306:	460b      	mov	r3, r1
  408308:	4650      	mov	r0, sl
  40830a:	4659      	mov	r1, fp
  40830c:	f002 fcd6 	bl	40acbc <__aeabi_dcmpgt>
  408310:	2800      	cmp	r0, #0
  408312:	f040 8270 	bne.w	4087f6 <_dtoa_r+0xd8e>
  408316:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408318:	2a01      	cmp	r2, #1
  40831a:	f000 8111 	beq.w	408540 <_dtoa_r+0xad8>
  40831e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408320:	9a04      	ldr	r2, [sp, #16]
  408322:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408326:	4413      	add	r3, r2
  408328:	4699      	mov	r9, r3
  40832a:	e00d      	b.n	408348 <_dtoa_r+0x8e0>
  40832c:	2000      	movs	r0, #0
  40832e:	496a      	ldr	r1, [pc, #424]	; (4084d8 <_dtoa_r+0xa70>)
  408330:	f002 f880 	bl	40a434 <__aeabi_dsub>
  408334:	4652      	mov	r2, sl
  408336:	465b      	mov	r3, fp
  408338:	f002 fca2 	bl	40ac80 <__aeabi_dcmplt>
  40833c:	2800      	cmp	r0, #0
  40833e:	f040 8258 	bne.w	4087f2 <_dtoa_r+0xd8a>
  408342:	454d      	cmp	r5, r9
  408344:	f000 80fa 	beq.w	40853c <_dtoa_r+0xad4>
  408348:	4650      	mov	r0, sl
  40834a:	4659      	mov	r1, fp
  40834c:	2200      	movs	r2, #0
  40834e:	4b65      	ldr	r3, [pc, #404]	; (4084e4 <_dtoa_r+0xa7c>)
  408350:	f002 fa24 	bl	40a79c <__aeabi_dmul>
  408354:	2200      	movs	r2, #0
  408356:	4b63      	ldr	r3, [pc, #396]	; (4084e4 <_dtoa_r+0xa7c>)
  408358:	4682      	mov	sl, r0
  40835a:	468b      	mov	fp, r1
  40835c:	4630      	mov	r0, r6
  40835e:	4639      	mov	r1, r7
  408360:	f002 fa1c 	bl	40a79c <__aeabi_dmul>
  408364:	460f      	mov	r7, r1
  408366:	4606      	mov	r6, r0
  408368:	f002 fcc8 	bl	40acfc <__aeabi_d2iz>
  40836c:	4680      	mov	r8, r0
  40836e:	f002 f9af 	bl	40a6d0 <__aeabi_i2d>
  408372:	4602      	mov	r2, r0
  408374:	460b      	mov	r3, r1
  408376:	4630      	mov	r0, r6
  408378:	4639      	mov	r1, r7
  40837a:	f002 f85b 	bl	40a434 <__aeabi_dsub>
  40837e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408382:	fa5f f888 	uxtb.w	r8, r8
  408386:	4652      	mov	r2, sl
  408388:	465b      	mov	r3, fp
  40838a:	f805 8b01 	strb.w	r8, [r5], #1
  40838e:	4606      	mov	r6, r0
  408390:	460f      	mov	r7, r1
  408392:	f002 fc75 	bl	40ac80 <__aeabi_dcmplt>
  408396:	4632      	mov	r2, r6
  408398:	463b      	mov	r3, r7
  40839a:	2800      	cmp	r0, #0
  40839c:	d0c6      	beq.n	40832c <_dtoa_r+0x8c4>
  40839e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4083a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4083a4:	9302      	str	r3, [sp, #8]
  4083a6:	e523      	b.n	407df0 <_dtoa_r+0x388>
  4083a8:	2300      	movs	r3, #0
  4083aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4083ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4083ae:	2b00      	cmp	r3, #0
  4083b0:	f340 80dc 	ble.w	40856c <_dtoa_r+0xb04>
  4083b4:	461f      	mov	r7, r3
  4083b6:	461e      	mov	r6, r3
  4083b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4083ba:	930a      	str	r3, [sp, #40]	; 0x28
  4083bc:	e6f6      	b.n	4081ac <_dtoa_r+0x744>
  4083be:	2301      	movs	r3, #1
  4083c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4083c2:	e7f3      	b.n	4083ac <_dtoa_r+0x944>
  4083c4:	f1ba 0f00 	cmp.w	sl, #0
  4083c8:	f47f ada8 	bne.w	407f1c <_dtoa_r+0x4b4>
  4083cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4083d0:	2b00      	cmp	r3, #0
  4083d2:	f47f adba 	bne.w	407f4a <_dtoa_r+0x4e2>
  4083d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4083da:	0d3f      	lsrs	r7, r7, #20
  4083dc:	053f      	lsls	r7, r7, #20
  4083de:	2f00      	cmp	r7, #0
  4083e0:	f000 820d 	beq.w	4087fe <_dtoa_r+0xd96>
  4083e4:	9b08      	ldr	r3, [sp, #32]
  4083e6:	3301      	adds	r3, #1
  4083e8:	9308      	str	r3, [sp, #32]
  4083ea:	9b06      	ldr	r3, [sp, #24]
  4083ec:	3301      	adds	r3, #1
  4083ee:	9306      	str	r3, [sp, #24]
  4083f0:	2301      	movs	r3, #1
  4083f2:	930c      	str	r3, [sp, #48]	; 0x30
  4083f4:	e5ab      	b.n	407f4e <_dtoa_r+0x4e6>
  4083f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083f8:	2b00      	cmp	r3, #0
  4083fa:	f73f ac42 	bgt.w	407c82 <_dtoa_r+0x21a>
  4083fe:	f040 8221 	bne.w	408844 <_dtoa_r+0xddc>
  408402:	2200      	movs	r2, #0
  408404:	4b38      	ldr	r3, [pc, #224]	; (4084e8 <_dtoa_r+0xa80>)
  408406:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40840a:	f002 f9c7 	bl	40a79c <__aeabi_dmul>
  40840e:	4652      	mov	r2, sl
  408410:	465b      	mov	r3, fp
  408412:	f002 fc49 	bl	40aca8 <__aeabi_dcmpge>
  408416:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40841a:	4646      	mov	r6, r8
  40841c:	2800      	cmp	r0, #0
  40841e:	d041      	beq.n	4084a4 <_dtoa_r+0xa3c>
  408420:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408422:	9d04      	ldr	r5, [sp, #16]
  408424:	43db      	mvns	r3, r3
  408426:	9302      	str	r3, [sp, #8]
  408428:	4641      	mov	r1, r8
  40842a:	4620      	mov	r0, r4
  40842c:	f000 ffd2 	bl	4093d4 <_Bfree>
  408430:	2e00      	cmp	r6, #0
  408432:	f43f acdd 	beq.w	407df0 <_dtoa_r+0x388>
  408436:	e6a7      	b.n	408188 <_dtoa_r+0x720>
  408438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40843a:	4649      	mov	r1, r9
  40843c:	4620      	mov	r0, r4
  40843e:	f001 f8ff 	bl	409640 <__pow5mult>
  408442:	4681      	mov	r9, r0
  408444:	e558      	b.n	407ef8 <_dtoa_r+0x490>
  408446:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408448:	2a00      	cmp	r2, #0
  40844a:	f000 8187 	beq.w	40875c <_dtoa_r+0xcf4>
  40844e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408452:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408454:	9d08      	ldr	r5, [sp, #32]
  408456:	e4f2      	b.n	407e3e <_dtoa_r+0x3d6>
  408458:	f1ba 0f00 	cmp.w	sl, #0
  40845c:	f47f ad75 	bne.w	407f4a <_dtoa_r+0x4e2>
  408460:	e7b4      	b.n	4083cc <_dtoa_r+0x964>
  408462:	f000 ffc1 	bl	4093e8 <__multadd>
  408466:	4647      	mov	r7, r8
  408468:	4606      	mov	r6, r0
  40846a:	4683      	mov	fp, r0
  40846c:	e5be      	b.n	407fec <_dtoa_r+0x584>
  40846e:	4601      	mov	r1, r0
  408470:	4620      	mov	r0, r4
  408472:	9306      	str	r3, [sp, #24]
  408474:	f000 ffae 	bl	4093d4 <_Bfree>
  408478:	2201      	movs	r2, #1
  40847a:	9b06      	ldr	r3, [sp, #24]
  40847c:	e5e0      	b.n	408040 <_dtoa_r+0x5d8>
  40847e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408480:	2b02      	cmp	r3, #2
  408482:	f77f ad96 	ble.w	407fb2 <_dtoa_r+0x54a>
  408486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408488:	2b00      	cmp	r3, #0
  40848a:	d1c9      	bne.n	408420 <_dtoa_r+0x9b8>
  40848c:	4641      	mov	r1, r8
  40848e:	2205      	movs	r2, #5
  408490:	4620      	mov	r0, r4
  408492:	f000 ffa9 	bl	4093e8 <__multadd>
  408496:	4601      	mov	r1, r0
  408498:	4680      	mov	r8, r0
  40849a:	4648      	mov	r0, r9
  40849c:	f001 f972 	bl	409784 <__mcmp>
  4084a0:	2800      	cmp	r0, #0
  4084a2:	ddbd      	ble.n	408420 <_dtoa_r+0x9b8>
  4084a4:	9a02      	ldr	r2, [sp, #8]
  4084a6:	9904      	ldr	r1, [sp, #16]
  4084a8:	2331      	movs	r3, #49	; 0x31
  4084aa:	3201      	adds	r2, #1
  4084ac:	9202      	str	r2, [sp, #8]
  4084ae:	700b      	strb	r3, [r1, #0]
  4084b0:	1c4d      	adds	r5, r1, #1
  4084b2:	e7b9      	b.n	408428 <_dtoa_r+0x9c0>
  4084b4:	9a02      	ldr	r2, [sp, #8]
  4084b6:	3201      	adds	r2, #1
  4084b8:	9202      	str	r2, [sp, #8]
  4084ba:	9a04      	ldr	r2, [sp, #16]
  4084bc:	2331      	movs	r3, #49	; 0x31
  4084be:	7013      	strb	r3, [r2, #0]
  4084c0:	e652      	b.n	408168 <_dtoa_r+0x700>
  4084c2:	2301      	movs	r3, #1
  4084c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4084c6:	e666      	b.n	408196 <_dtoa_r+0x72e>
  4084c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4084cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4084ce:	e48f      	b.n	407df0 <_dtoa_r+0x388>
  4084d0:	0040b518 	.word	0x0040b518
  4084d4:	0040b4f0 	.word	0x0040b4f0
  4084d8:	3ff00000 	.word	0x3ff00000
  4084dc:	401c0000 	.word	0x401c0000
  4084e0:	3fe00000 	.word	0x3fe00000
  4084e4:	40240000 	.word	0x40240000
  4084e8:	40140000 	.word	0x40140000
  4084ec:	4650      	mov	r0, sl
  4084ee:	f002 f8ef 	bl	40a6d0 <__aeabi_i2d>
  4084f2:	463a      	mov	r2, r7
  4084f4:	4643      	mov	r3, r8
  4084f6:	f002 f951 	bl	40a79c <__aeabi_dmul>
  4084fa:	2200      	movs	r2, #0
  4084fc:	4bc1      	ldr	r3, [pc, #772]	; (408804 <_dtoa_r+0xd9c>)
  4084fe:	f001 ff9b 	bl	40a438 <__adddf3>
  408502:	4605      	mov	r5, r0
  408504:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408508:	4641      	mov	r1, r8
  40850a:	2200      	movs	r2, #0
  40850c:	4bbe      	ldr	r3, [pc, #760]	; (408808 <_dtoa_r+0xda0>)
  40850e:	4638      	mov	r0, r7
  408510:	f001 ff90 	bl	40a434 <__aeabi_dsub>
  408514:	462a      	mov	r2, r5
  408516:	4633      	mov	r3, r6
  408518:	4682      	mov	sl, r0
  40851a:	468b      	mov	fp, r1
  40851c:	f002 fbce 	bl	40acbc <__aeabi_dcmpgt>
  408520:	4680      	mov	r8, r0
  408522:	2800      	cmp	r0, #0
  408524:	f040 8110 	bne.w	408748 <_dtoa_r+0xce0>
  408528:	462a      	mov	r2, r5
  40852a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40852e:	4650      	mov	r0, sl
  408530:	4659      	mov	r1, fp
  408532:	f002 fba5 	bl	40ac80 <__aeabi_dcmplt>
  408536:	b118      	cbz	r0, 408540 <_dtoa_r+0xad8>
  408538:	4646      	mov	r6, r8
  40853a:	e771      	b.n	408420 <_dtoa_r+0x9b8>
  40853c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408540:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408544:	f7ff bb8a 	b.w	407c5c <_dtoa_r+0x1f4>
  408548:	9804      	ldr	r0, [sp, #16]
  40854a:	f7ff babb 	b.w	407ac4 <_dtoa_r+0x5c>
  40854e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408550:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408552:	970c      	str	r7, [sp, #48]	; 0x30
  408554:	1afb      	subs	r3, r7, r3
  408556:	441a      	add	r2, r3
  408558:	920d      	str	r2, [sp, #52]	; 0x34
  40855a:	2700      	movs	r7, #0
  40855c:	e469      	b.n	407e32 <_dtoa_r+0x3ca>
  40855e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408562:	f04f 0a02 	mov.w	sl, #2
  408566:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40856a:	e657      	b.n	40821c <_dtoa_r+0x7b4>
  40856c:	2100      	movs	r1, #0
  40856e:	2301      	movs	r3, #1
  408570:	6461      	str	r1, [r4, #68]	; 0x44
  408572:	4620      	mov	r0, r4
  408574:	9325      	str	r3, [sp, #148]	; 0x94
  408576:	f000 ff07 	bl	409388 <_Balloc>
  40857a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40857c:	9004      	str	r0, [sp, #16]
  40857e:	6420      	str	r0, [r4, #64]	; 0x40
  408580:	930a      	str	r3, [sp, #40]	; 0x28
  408582:	930f      	str	r3, [sp, #60]	; 0x3c
  408584:	e629      	b.n	4081da <_dtoa_r+0x772>
  408586:	2a00      	cmp	r2, #0
  408588:	46d0      	mov	r8, sl
  40858a:	f8cd b018 	str.w	fp, [sp, #24]
  40858e:	469a      	mov	sl, r3
  408590:	dd11      	ble.n	4085b6 <_dtoa_r+0xb4e>
  408592:	4649      	mov	r1, r9
  408594:	2201      	movs	r2, #1
  408596:	4620      	mov	r0, r4
  408598:	f001 f8a2 	bl	4096e0 <__lshift>
  40859c:	4641      	mov	r1, r8
  40859e:	4681      	mov	r9, r0
  4085a0:	f001 f8f0 	bl	409784 <__mcmp>
  4085a4:	2800      	cmp	r0, #0
  4085a6:	f340 8146 	ble.w	408836 <_dtoa_r+0xdce>
  4085aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4085ae:	f000 8106 	beq.w	4087be <_dtoa_r+0xd56>
  4085b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4085b6:	46b3      	mov	fp, r6
  4085b8:	f887 a000 	strb.w	sl, [r7]
  4085bc:	1c7d      	adds	r5, r7, #1
  4085be:	9e06      	ldr	r6, [sp, #24]
  4085c0:	e5d2      	b.n	408168 <_dtoa_r+0x700>
  4085c2:	d104      	bne.n	4085ce <_dtoa_r+0xb66>
  4085c4:	f01a 0f01 	tst.w	sl, #1
  4085c8:	d001      	beq.n	4085ce <_dtoa_r+0xb66>
  4085ca:	e5bd      	b.n	408148 <_dtoa_r+0x6e0>
  4085cc:	4615      	mov	r5, r2
  4085ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4085d2:	2b30      	cmp	r3, #48	; 0x30
  4085d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4085d8:	d0f8      	beq.n	4085cc <_dtoa_r+0xb64>
  4085da:	e5c5      	b.n	408168 <_dtoa_r+0x700>
  4085dc:	9904      	ldr	r1, [sp, #16]
  4085de:	2230      	movs	r2, #48	; 0x30
  4085e0:	700a      	strb	r2, [r1, #0]
  4085e2:	9a02      	ldr	r2, [sp, #8]
  4085e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4085e8:	3201      	adds	r2, #1
  4085ea:	9202      	str	r2, [sp, #8]
  4085ec:	f7ff bbfc 	b.w	407de8 <_dtoa_r+0x380>
  4085f0:	f000 80bb 	beq.w	40876a <_dtoa_r+0xd02>
  4085f4:	9b02      	ldr	r3, [sp, #8]
  4085f6:	425d      	negs	r5, r3
  4085f8:	4b84      	ldr	r3, [pc, #528]	; (40880c <_dtoa_r+0xda4>)
  4085fa:	f005 020f 	and.w	r2, r5, #15
  4085fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408602:	e9d3 2300 	ldrd	r2, r3, [r3]
  408606:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40860a:	f002 f8c7 	bl	40a79c <__aeabi_dmul>
  40860e:	112d      	asrs	r5, r5, #4
  408610:	4607      	mov	r7, r0
  408612:	4688      	mov	r8, r1
  408614:	f000 812c 	beq.w	408870 <_dtoa_r+0xe08>
  408618:	4e7d      	ldr	r6, [pc, #500]	; (408810 <_dtoa_r+0xda8>)
  40861a:	f04f 0a02 	mov.w	sl, #2
  40861e:	07eb      	lsls	r3, r5, #31
  408620:	d509      	bpl.n	408636 <_dtoa_r+0xbce>
  408622:	4638      	mov	r0, r7
  408624:	4641      	mov	r1, r8
  408626:	e9d6 2300 	ldrd	r2, r3, [r6]
  40862a:	f002 f8b7 	bl	40a79c <__aeabi_dmul>
  40862e:	f10a 0a01 	add.w	sl, sl, #1
  408632:	4607      	mov	r7, r0
  408634:	4688      	mov	r8, r1
  408636:	106d      	asrs	r5, r5, #1
  408638:	f106 0608 	add.w	r6, r6, #8
  40863c:	d1ef      	bne.n	40861e <_dtoa_r+0xbb6>
  40863e:	e608      	b.n	408252 <_dtoa_r+0x7ea>
  408640:	6871      	ldr	r1, [r6, #4]
  408642:	4620      	mov	r0, r4
  408644:	f000 fea0 	bl	409388 <_Balloc>
  408648:	6933      	ldr	r3, [r6, #16]
  40864a:	3302      	adds	r3, #2
  40864c:	009a      	lsls	r2, r3, #2
  40864e:	4605      	mov	r5, r0
  408650:	f106 010c 	add.w	r1, r6, #12
  408654:	300c      	adds	r0, #12
  408656:	f7fc f879 	bl	40474c <memcpy>
  40865a:	4629      	mov	r1, r5
  40865c:	2201      	movs	r2, #1
  40865e:	4620      	mov	r0, r4
  408660:	f001 f83e 	bl	4096e0 <__lshift>
  408664:	9006      	str	r0, [sp, #24]
  408666:	e4b5      	b.n	407fd4 <_dtoa_r+0x56c>
  408668:	2b39      	cmp	r3, #57	; 0x39
  40866a:	f8cd b018 	str.w	fp, [sp, #24]
  40866e:	46d0      	mov	r8, sl
  408670:	f000 80a5 	beq.w	4087be <_dtoa_r+0xd56>
  408674:	f103 0a01 	add.w	sl, r3, #1
  408678:	46b3      	mov	fp, r6
  40867a:	f887 a000 	strb.w	sl, [r7]
  40867e:	1c7d      	adds	r5, r7, #1
  408680:	9e06      	ldr	r6, [sp, #24]
  408682:	e571      	b.n	408168 <_dtoa_r+0x700>
  408684:	465a      	mov	r2, fp
  408686:	46d0      	mov	r8, sl
  408688:	46b3      	mov	fp, r6
  40868a:	469a      	mov	sl, r3
  40868c:	4616      	mov	r6, r2
  40868e:	e54f      	b.n	408130 <_dtoa_r+0x6c8>
  408690:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408692:	495e      	ldr	r1, [pc, #376]	; (40880c <_dtoa_r+0xda4>)
  408694:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408698:	462a      	mov	r2, r5
  40869a:	4633      	mov	r3, r6
  40869c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4086a0:	f002 f87c 	bl	40a79c <__aeabi_dmul>
  4086a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4086a8:	4638      	mov	r0, r7
  4086aa:	4641      	mov	r1, r8
  4086ac:	f002 fb26 	bl	40acfc <__aeabi_d2iz>
  4086b0:	4605      	mov	r5, r0
  4086b2:	f002 f80d 	bl	40a6d0 <__aeabi_i2d>
  4086b6:	460b      	mov	r3, r1
  4086b8:	4602      	mov	r2, r0
  4086ba:	4641      	mov	r1, r8
  4086bc:	4638      	mov	r0, r7
  4086be:	f001 feb9 	bl	40a434 <__aeabi_dsub>
  4086c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4086c4:	460f      	mov	r7, r1
  4086c6:	9904      	ldr	r1, [sp, #16]
  4086c8:	3530      	adds	r5, #48	; 0x30
  4086ca:	2b01      	cmp	r3, #1
  4086cc:	700d      	strb	r5, [r1, #0]
  4086ce:	4606      	mov	r6, r0
  4086d0:	f101 0501 	add.w	r5, r1, #1
  4086d4:	d026      	beq.n	408724 <_dtoa_r+0xcbc>
  4086d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4086d8:	9a04      	ldr	r2, [sp, #16]
  4086da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408818 <_dtoa_r+0xdb0>
  4086de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4086e2:	4413      	add	r3, r2
  4086e4:	f04f 0a00 	mov.w	sl, #0
  4086e8:	4699      	mov	r9, r3
  4086ea:	4652      	mov	r2, sl
  4086ec:	465b      	mov	r3, fp
  4086ee:	4630      	mov	r0, r6
  4086f0:	4639      	mov	r1, r7
  4086f2:	f002 f853 	bl	40a79c <__aeabi_dmul>
  4086f6:	460f      	mov	r7, r1
  4086f8:	4606      	mov	r6, r0
  4086fa:	f002 faff 	bl	40acfc <__aeabi_d2iz>
  4086fe:	4680      	mov	r8, r0
  408700:	f001 ffe6 	bl	40a6d0 <__aeabi_i2d>
  408704:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408708:	4602      	mov	r2, r0
  40870a:	460b      	mov	r3, r1
  40870c:	4630      	mov	r0, r6
  40870e:	4639      	mov	r1, r7
  408710:	f001 fe90 	bl	40a434 <__aeabi_dsub>
  408714:	f805 8b01 	strb.w	r8, [r5], #1
  408718:	454d      	cmp	r5, r9
  40871a:	4606      	mov	r6, r0
  40871c:	460f      	mov	r7, r1
  40871e:	d1e4      	bne.n	4086ea <_dtoa_r+0xc82>
  408720:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408724:	4b3b      	ldr	r3, [pc, #236]	; (408814 <_dtoa_r+0xdac>)
  408726:	2200      	movs	r2, #0
  408728:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40872c:	f001 fe84 	bl	40a438 <__adddf3>
  408730:	4632      	mov	r2, r6
  408732:	463b      	mov	r3, r7
  408734:	f002 faa4 	bl	40ac80 <__aeabi_dcmplt>
  408738:	2800      	cmp	r0, #0
  40873a:	d046      	beq.n	4087ca <_dtoa_r+0xd62>
  40873c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40873e:	9302      	str	r3, [sp, #8]
  408740:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408744:	f7ff bb43 	b.w	407dce <_dtoa_r+0x366>
  408748:	f04f 0800 	mov.w	r8, #0
  40874c:	4646      	mov	r6, r8
  40874e:	e6a9      	b.n	4084a4 <_dtoa_r+0xa3c>
  408750:	9b08      	ldr	r3, [sp, #32]
  408752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408754:	1a9d      	subs	r5, r3, r2
  408756:	2300      	movs	r3, #0
  408758:	f7ff bb71 	b.w	407e3e <_dtoa_r+0x3d6>
  40875c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40875e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408760:	9d08      	ldr	r5, [sp, #32]
  408762:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408766:	f7ff bb6a 	b.w	407e3e <_dtoa_r+0x3d6>
  40876a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40876e:	f04f 0a02 	mov.w	sl, #2
  408772:	e56e      	b.n	408252 <_dtoa_r+0x7ea>
  408774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408776:	2b00      	cmp	r3, #0
  408778:	f43f aeb8 	beq.w	4084ec <_dtoa_r+0xa84>
  40877c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40877e:	2b00      	cmp	r3, #0
  408780:	f77f aede 	ble.w	408540 <_dtoa_r+0xad8>
  408784:	2200      	movs	r2, #0
  408786:	4b24      	ldr	r3, [pc, #144]	; (408818 <_dtoa_r+0xdb0>)
  408788:	4638      	mov	r0, r7
  40878a:	4641      	mov	r1, r8
  40878c:	f002 f806 	bl	40a79c <__aeabi_dmul>
  408790:	4607      	mov	r7, r0
  408792:	4688      	mov	r8, r1
  408794:	f10a 0001 	add.w	r0, sl, #1
  408798:	f001 ff9a 	bl	40a6d0 <__aeabi_i2d>
  40879c:	463a      	mov	r2, r7
  40879e:	4643      	mov	r3, r8
  4087a0:	f001 fffc 	bl	40a79c <__aeabi_dmul>
  4087a4:	2200      	movs	r2, #0
  4087a6:	4b17      	ldr	r3, [pc, #92]	; (408804 <_dtoa_r+0xd9c>)
  4087a8:	f001 fe46 	bl	40a438 <__adddf3>
  4087ac:	9a02      	ldr	r2, [sp, #8]
  4087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4087b0:	9312      	str	r3, [sp, #72]	; 0x48
  4087b2:	3a01      	subs	r2, #1
  4087b4:	4605      	mov	r5, r0
  4087b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4087ba:	9215      	str	r2, [sp, #84]	; 0x54
  4087bc:	e56a      	b.n	408294 <_dtoa_r+0x82c>
  4087be:	2239      	movs	r2, #57	; 0x39
  4087c0:	46b3      	mov	fp, r6
  4087c2:	703a      	strb	r2, [r7, #0]
  4087c4:	9e06      	ldr	r6, [sp, #24]
  4087c6:	1c7d      	adds	r5, r7, #1
  4087c8:	e4c0      	b.n	40814c <_dtoa_r+0x6e4>
  4087ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4087ce:	2000      	movs	r0, #0
  4087d0:	4910      	ldr	r1, [pc, #64]	; (408814 <_dtoa_r+0xdac>)
  4087d2:	f001 fe2f 	bl	40a434 <__aeabi_dsub>
  4087d6:	4632      	mov	r2, r6
  4087d8:	463b      	mov	r3, r7
  4087da:	f002 fa6f 	bl	40acbc <__aeabi_dcmpgt>
  4087de:	b908      	cbnz	r0, 4087e4 <_dtoa_r+0xd7c>
  4087e0:	e6ae      	b.n	408540 <_dtoa_r+0xad8>
  4087e2:	4615      	mov	r5, r2
  4087e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4087e8:	2b30      	cmp	r3, #48	; 0x30
  4087ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4087ee:	d0f8      	beq.n	4087e2 <_dtoa_r+0xd7a>
  4087f0:	e5d7      	b.n	4083a2 <_dtoa_r+0x93a>
  4087f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4087f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4087f8:	9302      	str	r3, [sp, #8]
  4087fa:	f7ff bae8 	b.w	407dce <_dtoa_r+0x366>
  4087fe:	970c      	str	r7, [sp, #48]	; 0x30
  408800:	f7ff bba5 	b.w	407f4e <_dtoa_r+0x4e6>
  408804:	401c0000 	.word	0x401c0000
  408808:	40140000 	.word	0x40140000
  40880c:	0040b518 	.word	0x0040b518
  408810:	0040b4f0 	.word	0x0040b4f0
  408814:	3fe00000 	.word	0x3fe00000
  408818:	40240000 	.word	0x40240000
  40881c:	2b39      	cmp	r3, #57	; 0x39
  40881e:	f8cd b018 	str.w	fp, [sp, #24]
  408822:	46d0      	mov	r8, sl
  408824:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408828:	469a      	mov	sl, r3
  40882a:	d0c8      	beq.n	4087be <_dtoa_r+0xd56>
  40882c:	f1bb 0f00 	cmp.w	fp, #0
  408830:	f73f aebf 	bgt.w	4085b2 <_dtoa_r+0xb4a>
  408834:	e6bf      	b.n	4085b6 <_dtoa_r+0xb4e>
  408836:	f47f aebe 	bne.w	4085b6 <_dtoa_r+0xb4e>
  40883a:	f01a 0f01 	tst.w	sl, #1
  40883e:	f43f aeba 	beq.w	4085b6 <_dtoa_r+0xb4e>
  408842:	e6b2      	b.n	4085aa <_dtoa_r+0xb42>
  408844:	f04f 0800 	mov.w	r8, #0
  408848:	4646      	mov	r6, r8
  40884a:	e5e9      	b.n	408420 <_dtoa_r+0x9b8>
  40884c:	4631      	mov	r1, r6
  40884e:	2300      	movs	r3, #0
  408850:	220a      	movs	r2, #10
  408852:	4620      	mov	r0, r4
  408854:	f000 fdc8 	bl	4093e8 <__multadd>
  408858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40885a:	2b00      	cmp	r3, #0
  40885c:	4606      	mov	r6, r0
  40885e:	dd0a      	ble.n	408876 <_dtoa_r+0xe0e>
  408860:	930a      	str	r3, [sp, #40]	; 0x28
  408862:	f7ff bbaa 	b.w	407fba <_dtoa_r+0x552>
  408866:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408868:	2b02      	cmp	r3, #2
  40886a:	dc23      	bgt.n	4088b4 <_dtoa_r+0xe4c>
  40886c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40886e:	e43b      	b.n	4080e8 <_dtoa_r+0x680>
  408870:	f04f 0a02 	mov.w	sl, #2
  408874:	e4ed      	b.n	408252 <_dtoa_r+0x7ea>
  408876:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408878:	2b02      	cmp	r3, #2
  40887a:	dc1b      	bgt.n	4088b4 <_dtoa_r+0xe4c>
  40887c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40887e:	e7ef      	b.n	408860 <_dtoa_r+0xdf8>
  408880:	2500      	movs	r5, #0
  408882:	6465      	str	r5, [r4, #68]	; 0x44
  408884:	4629      	mov	r1, r5
  408886:	4620      	mov	r0, r4
  408888:	f000 fd7e 	bl	409388 <_Balloc>
  40888c:	f04f 33ff 	mov.w	r3, #4294967295
  408890:	930a      	str	r3, [sp, #40]	; 0x28
  408892:	930f      	str	r3, [sp, #60]	; 0x3c
  408894:	2301      	movs	r3, #1
  408896:	9004      	str	r0, [sp, #16]
  408898:	9525      	str	r5, [sp, #148]	; 0x94
  40889a:	6420      	str	r0, [r4, #64]	; 0x40
  40889c:	930b      	str	r3, [sp, #44]	; 0x2c
  40889e:	f7ff b9dd 	b.w	407c5c <_dtoa_r+0x1f4>
  4088a2:	2501      	movs	r5, #1
  4088a4:	f7ff b9a5 	b.w	407bf2 <_dtoa_r+0x18a>
  4088a8:	f43f ab69 	beq.w	407f7e <_dtoa_r+0x516>
  4088ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4088b0:	f7ff bbf9 	b.w	4080a6 <_dtoa_r+0x63e>
  4088b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4088b6:	930a      	str	r3, [sp, #40]	; 0x28
  4088b8:	e5e5      	b.n	408486 <_dtoa_r+0xa1e>
  4088ba:	bf00      	nop

004088bc <__sflush_r>:
  4088bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4088c0:	b29a      	uxth	r2, r3
  4088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088c6:	460d      	mov	r5, r1
  4088c8:	0711      	lsls	r1, r2, #28
  4088ca:	4680      	mov	r8, r0
  4088cc:	d43a      	bmi.n	408944 <__sflush_r+0x88>
  4088ce:	686a      	ldr	r2, [r5, #4]
  4088d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4088d4:	2a00      	cmp	r2, #0
  4088d6:	81ab      	strh	r3, [r5, #12]
  4088d8:	dd6f      	ble.n	4089ba <__sflush_r+0xfe>
  4088da:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4088dc:	2c00      	cmp	r4, #0
  4088de:	d049      	beq.n	408974 <__sflush_r+0xb8>
  4088e0:	2200      	movs	r2, #0
  4088e2:	b29b      	uxth	r3, r3
  4088e4:	f8d8 6000 	ldr.w	r6, [r8]
  4088e8:	f8c8 2000 	str.w	r2, [r8]
  4088ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4088f0:	d067      	beq.n	4089c2 <__sflush_r+0x106>
  4088f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4088f4:	075f      	lsls	r7, r3, #29
  4088f6:	d505      	bpl.n	408904 <__sflush_r+0x48>
  4088f8:	6869      	ldr	r1, [r5, #4]
  4088fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4088fc:	1a52      	subs	r2, r2, r1
  4088fe:	b10b      	cbz	r3, 408904 <__sflush_r+0x48>
  408900:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408902:	1ad2      	subs	r2, r2, r3
  408904:	2300      	movs	r3, #0
  408906:	69e9      	ldr	r1, [r5, #28]
  408908:	4640      	mov	r0, r8
  40890a:	47a0      	blx	r4
  40890c:	1c44      	adds	r4, r0, #1
  40890e:	d03c      	beq.n	40898a <__sflush_r+0xce>
  408910:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408914:	692a      	ldr	r2, [r5, #16]
  408916:	602a      	str	r2, [r5, #0]
  408918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40891c:	2200      	movs	r2, #0
  40891e:	81ab      	strh	r3, [r5, #12]
  408920:	04db      	lsls	r3, r3, #19
  408922:	606a      	str	r2, [r5, #4]
  408924:	d447      	bmi.n	4089b6 <__sflush_r+0xfa>
  408926:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408928:	f8c8 6000 	str.w	r6, [r8]
  40892c:	b311      	cbz	r1, 408974 <__sflush_r+0xb8>
  40892e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408932:	4299      	cmp	r1, r3
  408934:	d002      	beq.n	40893c <__sflush_r+0x80>
  408936:	4640      	mov	r0, r8
  408938:	f000 f95a 	bl	408bf0 <_free_r>
  40893c:	2000      	movs	r0, #0
  40893e:	6328      	str	r0, [r5, #48]	; 0x30
  408940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408944:	692e      	ldr	r6, [r5, #16]
  408946:	b1ae      	cbz	r6, 408974 <__sflush_r+0xb8>
  408948:	682c      	ldr	r4, [r5, #0]
  40894a:	602e      	str	r6, [r5, #0]
  40894c:	0791      	lsls	r1, r2, #30
  40894e:	bf0c      	ite	eq
  408950:	696b      	ldreq	r3, [r5, #20]
  408952:	2300      	movne	r3, #0
  408954:	1ba4      	subs	r4, r4, r6
  408956:	60ab      	str	r3, [r5, #8]
  408958:	e00a      	b.n	408970 <__sflush_r+0xb4>
  40895a:	4623      	mov	r3, r4
  40895c:	4632      	mov	r2, r6
  40895e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408960:	69e9      	ldr	r1, [r5, #28]
  408962:	4640      	mov	r0, r8
  408964:	47b8      	blx	r7
  408966:	2800      	cmp	r0, #0
  408968:	eba4 0400 	sub.w	r4, r4, r0
  40896c:	4406      	add	r6, r0
  40896e:	dd04      	ble.n	40897a <__sflush_r+0xbe>
  408970:	2c00      	cmp	r4, #0
  408972:	dcf2      	bgt.n	40895a <__sflush_r+0x9e>
  408974:	2000      	movs	r0, #0
  408976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40897a:	89ab      	ldrh	r3, [r5, #12]
  40897c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408980:	81ab      	strh	r3, [r5, #12]
  408982:	f04f 30ff 	mov.w	r0, #4294967295
  408986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40898a:	f8d8 4000 	ldr.w	r4, [r8]
  40898e:	2c1d      	cmp	r4, #29
  408990:	d8f3      	bhi.n	40897a <__sflush_r+0xbe>
  408992:	4b19      	ldr	r3, [pc, #100]	; (4089f8 <__sflush_r+0x13c>)
  408994:	40e3      	lsrs	r3, r4
  408996:	43db      	mvns	r3, r3
  408998:	f013 0301 	ands.w	r3, r3, #1
  40899c:	d1ed      	bne.n	40897a <__sflush_r+0xbe>
  40899e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4089a2:	606b      	str	r3, [r5, #4]
  4089a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4089a8:	6929      	ldr	r1, [r5, #16]
  4089aa:	81ab      	strh	r3, [r5, #12]
  4089ac:	04da      	lsls	r2, r3, #19
  4089ae:	6029      	str	r1, [r5, #0]
  4089b0:	d5b9      	bpl.n	408926 <__sflush_r+0x6a>
  4089b2:	2c00      	cmp	r4, #0
  4089b4:	d1b7      	bne.n	408926 <__sflush_r+0x6a>
  4089b6:	6528      	str	r0, [r5, #80]	; 0x50
  4089b8:	e7b5      	b.n	408926 <__sflush_r+0x6a>
  4089ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4089bc:	2a00      	cmp	r2, #0
  4089be:	dc8c      	bgt.n	4088da <__sflush_r+0x1e>
  4089c0:	e7d8      	b.n	408974 <__sflush_r+0xb8>
  4089c2:	2301      	movs	r3, #1
  4089c4:	69e9      	ldr	r1, [r5, #28]
  4089c6:	4640      	mov	r0, r8
  4089c8:	47a0      	blx	r4
  4089ca:	1c43      	adds	r3, r0, #1
  4089cc:	4602      	mov	r2, r0
  4089ce:	d002      	beq.n	4089d6 <__sflush_r+0x11a>
  4089d0:	89ab      	ldrh	r3, [r5, #12]
  4089d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4089d4:	e78e      	b.n	4088f4 <__sflush_r+0x38>
  4089d6:	f8d8 3000 	ldr.w	r3, [r8]
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d0f8      	beq.n	4089d0 <__sflush_r+0x114>
  4089de:	2b1d      	cmp	r3, #29
  4089e0:	d001      	beq.n	4089e6 <__sflush_r+0x12a>
  4089e2:	2b16      	cmp	r3, #22
  4089e4:	d102      	bne.n	4089ec <__sflush_r+0x130>
  4089e6:	f8c8 6000 	str.w	r6, [r8]
  4089ea:	e7c3      	b.n	408974 <__sflush_r+0xb8>
  4089ec:	89ab      	ldrh	r3, [r5, #12]
  4089ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4089f2:	81ab      	strh	r3, [r5, #12]
  4089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4089f8:	20400001 	.word	0x20400001

004089fc <_fflush_r>:
  4089fc:	b538      	push	{r3, r4, r5, lr}
  4089fe:	460d      	mov	r5, r1
  408a00:	4604      	mov	r4, r0
  408a02:	b108      	cbz	r0, 408a08 <_fflush_r+0xc>
  408a04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408a06:	b1bb      	cbz	r3, 408a38 <_fflush_r+0x3c>
  408a08:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408a0c:	b188      	cbz	r0, 408a32 <_fflush_r+0x36>
  408a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408a10:	07db      	lsls	r3, r3, #31
  408a12:	d401      	bmi.n	408a18 <_fflush_r+0x1c>
  408a14:	0581      	lsls	r1, r0, #22
  408a16:	d517      	bpl.n	408a48 <_fflush_r+0x4c>
  408a18:	4620      	mov	r0, r4
  408a1a:	4629      	mov	r1, r5
  408a1c:	f7ff ff4e 	bl	4088bc <__sflush_r>
  408a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408a22:	07da      	lsls	r2, r3, #31
  408a24:	4604      	mov	r4, r0
  408a26:	d402      	bmi.n	408a2e <_fflush_r+0x32>
  408a28:	89ab      	ldrh	r3, [r5, #12]
  408a2a:	059b      	lsls	r3, r3, #22
  408a2c:	d507      	bpl.n	408a3e <_fflush_r+0x42>
  408a2e:	4620      	mov	r0, r4
  408a30:	bd38      	pop	{r3, r4, r5, pc}
  408a32:	4604      	mov	r4, r0
  408a34:	4620      	mov	r0, r4
  408a36:	bd38      	pop	{r3, r4, r5, pc}
  408a38:	f000 f838 	bl	408aac <__sinit>
  408a3c:	e7e4      	b.n	408a08 <_fflush_r+0xc>
  408a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408a40:	f000 fb72 	bl	409128 <__retarget_lock_release_recursive>
  408a44:	4620      	mov	r0, r4
  408a46:	bd38      	pop	{r3, r4, r5, pc}
  408a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408a4a:	f000 fb6b 	bl	409124 <__retarget_lock_acquire_recursive>
  408a4e:	e7e3      	b.n	408a18 <_fflush_r+0x1c>

00408a50 <_cleanup_r>:
  408a50:	4901      	ldr	r1, [pc, #4]	; (408a58 <_cleanup_r+0x8>)
  408a52:	f000 bb2b 	b.w	4090ac <_fwalk_reent>
  408a56:	bf00      	nop
  408a58:	0040a055 	.word	0x0040a055

<<<<<<< Updated upstream
<<<<<<< Updated upstream
0040875c <std.isra.0>:
  40875c:	b510      	push	{r4, lr}
  40875e:	2300      	movs	r3, #0
  408760:	4604      	mov	r4, r0
  408762:	8181      	strh	r1, [r0, #12]
  408764:	81c2      	strh	r2, [r0, #14]
  408766:	6003      	str	r3, [r0, #0]
  408768:	6043      	str	r3, [r0, #4]
  40876a:	6083      	str	r3, [r0, #8]
  40876c:	6643      	str	r3, [r0, #100]	; 0x64
  40876e:	6103      	str	r3, [r0, #16]
  408770:	6143      	str	r3, [r0, #20]
  408772:	6183      	str	r3, [r0, #24]
  408774:	4619      	mov	r1, r3
  408776:	2208      	movs	r2, #8
  408778:	305c      	adds	r0, #92	; 0x5c
  40877a:	f7fb ff17 	bl	4045ac <memset>
  40877e:	4807      	ldr	r0, [pc, #28]	; (40879c <std.isra.0+0x40>)
  408780:	4907      	ldr	r1, [pc, #28]	; (4087a0 <std.isra.0+0x44>)
  408782:	4a08      	ldr	r2, [pc, #32]	; (4087a4 <std.isra.0+0x48>)
  408784:	4b08      	ldr	r3, [pc, #32]	; (4087a8 <std.isra.0+0x4c>)
  408786:	6220      	str	r0, [r4, #32]
  408788:	61e4      	str	r4, [r4, #28]
  40878a:	6261      	str	r1, [r4, #36]	; 0x24
  40878c:	62a2      	str	r2, [r4, #40]	; 0x28
  40878e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408790:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408798:	f000 bb40 	b.w	408e1c <__retarget_lock_init_recursive>
  40879c:	004099c9 	.word	0x004099c9
  4087a0:	004099ed 	.word	0x004099ed
  4087a4:	00409a29 	.word	0x00409a29
  4087a8:	00409a49 	.word	0x00409a49
=======
00408a5c <std.isra.0>:
  408a5c:	b510      	push	{r4, lr}
  408a5e:	2300      	movs	r3, #0
  408a60:	4604      	mov	r4, r0
  408a62:	8181      	strh	r1, [r0, #12]
  408a64:	81c2      	strh	r2, [r0, #14]
  408a66:	6003      	str	r3, [r0, #0]
  408a68:	6043      	str	r3, [r0, #4]
  408a6a:	6083      	str	r3, [r0, #8]
  408a6c:	6643      	str	r3, [r0, #100]	; 0x64
  408a6e:	6103      	str	r3, [r0, #16]
  408a70:	6143      	str	r3, [r0, #20]
  408a72:	6183      	str	r3, [r0, #24]
  408a74:	4619      	mov	r1, r3
  408a76:	2208      	movs	r2, #8
  408a78:	305c      	adds	r0, #92	; 0x5c
  408a7a:	f7fb ff01 	bl	404880 <memset>
  408a7e:	4807      	ldr	r0, [pc, #28]	; (408a9c <std.isra.0+0x40>)
  408a80:	4907      	ldr	r1, [pc, #28]	; (408aa0 <std.isra.0+0x44>)
  408a82:	4a08      	ldr	r2, [pc, #32]	; (408aa4 <std.isra.0+0x48>)
  408a84:	4b08      	ldr	r3, [pc, #32]	; (408aa8 <std.isra.0+0x4c>)
  408a86:	6220      	str	r0, [r4, #32]
  408a88:	61e4      	str	r4, [r4, #28]
  408a8a:	6261      	str	r1, [r4, #36]	; 0x24
  408a8c:	62a2      	str	r2, [r4, #40]	; 0x28
  408a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408a98:	f000 bb40 	b.w	40911c <__retarget_lock_init_recursive>
  408a9c:	00409cc9 	.word	0x00409cc9
  408aa0:	00409ced 	.word	0x00409ced
  408aa4:	00409d29 	.word	0x00409d29
  408aa8:	00409d49 	.word	0x00409d49
>>>>>>> Stashed changes

00408aac <__sinit>:
  408aac:	b510      	push	{r4, lr}
  408aae:	4604      	mov	r4, r0
  408ab0:	4812      	ldr	r0, [pc, #72]	; (408afc <__sinit+0x50>)
  408ab2:	f000 fb37 	bl	409124 <__retarget_lock_acquire_recursive>
  408ab6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408ab8:	b9d2      	cbnz	r2, 408af0 <__sinit+0x44>
  408aba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  408abe:	4810      	ldr	r0, [pc, #64]	; (408b00 <__sinit+0x54>)
  408ac0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  408ac4:	2103      	movs	r1, #3
  408ac6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408aca:	63e0      	str	r0, [r4, #60]	; 0x3c
  408acc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408ad0:	6860      	ldr	r0, [r4, #4]
  408ad2:	2104      	movs	r1, #4
  408ad4:	f7ff ffc2 	bl	408a5c <std.isra.0>
  408ad8:	2201      	movs	r2, #1
  408ada:	2109      	movs	r1, #9
  408adc:	68a0      	ldr	r0, [r4, #8]
  408ade:	f7ff ffbd 	bl	408a5c <std.isra.0>
  408ae2:	2202      	movs	r2, #2
  408ae4:	2112      	movs	r1, #18
  408ae6:	68e0      	ldr	r0, [r4, #12]
  408ae8:	f7ff ffb8 	bl	408a5c <std.isra.0>
  408aec:	2301      	movs	r3, #1
  408aee:	63a3      	str	r3, [r4, #56]	; 0x38
  408af0:	4802      	ldr	r0, [pc, #8]	; (408afc <__sinit+0x50>)
  408af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408af6:	f000 bb17 	b.w	409128 <__retarget_lock_release_recursive>
  408afa:	bf00      	nop
  408afc:	20400e78 	.word	0x20400e78
  408b00:	00408a51 	.word	0x00408a51

00408b04 <__sfp_lock_acquire>:
  408b04:	4801      	ldr	r0, [pc, #4]	; (408b0c <__sfp_lock_acquire+0x8>)
  408b06:	f000 bb0d 	b.w	409124 <__retarget_lock_acquire_recursive>
  408b0a:	bf00      	nop
  408b0c:	20400e8c 	.word	0x20400e8c

00408b10 <__sfp_lock_release>:
  408b10:	4801      	ldr	r0, [pc, #4]	; (408b18 <__sfp_lock_release+0x8>)
  408b12:	f000 bb09 	b.w	409128 <__retarget_lock_release_recursive>
  408b16:	bf00      	nop
  408b18:	20400e8c 	.word	0x20400e8c

00408b1c <__libc_fini_array>:
  408b1c:	b538      	push	{r3, r4, r5, lr}
  408b1e:	4c0a      	ldr	r4, [pc, #40]	; (408b48 <__libc_fini_array+0x2c>)
  408b20:	4d0a      	ldr	r5, [pc, #40]	; (408b4c <__libc_fini_array+0x30>)
  408b22:	1b64      	subs	r4, r4, r5
  408b24:	10a4      	asrs	r4, r4, #2
  408b26:	d00a      	beq.n	408b3e <__libc_fini_array+0x22>
  408b28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408b2c:	3b01      	subs	r3, #1
  408b2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408b32:	3c01      	subs	r4, #1
  408b34:	f855 3904 	ldr.w	r3, [r5], #-4
  408b38:	4798      	blx	r3
  408b3a:	2c00      	cmp	r4, #0
  408b3c:	d1f9      	bne.n	408b32 <__libc_fini_array+0x16>
  408b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408b42:	f002 bde5 	b.w	40b710 <_fini>
  408b46:	bf00      	nop
  408b48:	0040b720 	.word	0x0040b720
  408b4c:	0040b71c 	.word	0x0040b71c

00408b50 <_malloc_trim_r>:
  408b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b52:	4f24      	ldr	r7, [pc, #144]	; (408be4 <_malloc_trim_r+0x94>)
  408b54:	460c      	mov	r4, r1
  408b56:	4606      	mov	r6, r0
  408b58:	f7fb fee0 	bl	40491c <__malloc_lock>
  408b5c:	68bb      	ldr	r3, [r7, #8]
  408b5e:	685d      	ldr	r5, [r3, #4]
  408b60:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408b64:	310f      	adds	r1, #15
  408b66:	f025 0503 	bic.w	r5, r5, #3
  408b6a:	4429      	add	r1, r5
  408b6c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408b70:	f021 010f 	bic.w	r1, r1, #15
  408b74:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408b78:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408b7c:	db07      	blt.n	408b8e <_malloc_trim_r+0x3e>
  408b7e:	2100      	movs	r1, #0
  408b80:	4630      	mov	r0, r6
  408b82:	f7fb ff41 	bl	404a08 <_sbrk_r>
  408b86:	68bb      	ldr	r3, [r7, #8]
  408b88:	442b      	add	r3, r5
  408b8a:	4298      	cmp	r0, r3
  408b8c:	d004      	beq.n	408b98 <_malloc_trim_r+0x48>
  408b8e:	4630      	mov	r0, r6
  408b90:	f7fb feca 	bl	404928 <__malloc_unlock>
  408b94:	2000      	movs	r0, #0
  408b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b98:	4261      	negs	r1, r4
  408b9a:	4630      	mov	r0, r6
  408b9c:	f7fb ff34 	bl	404a08 <_sbrk_r>
  408ba0:	3001      	adds	r0, #1
  408ba2:	d00d      	beq.n	408bc0 <_malloc_trim_r+0x70>
  408ba4:	4b10      	ldr	r3, [pc, #64]	; (408be8 <_malloc_trim_r+0x98>)
  408ba6:	68ba      	ldr	r2, [r7, #8]
  408ba8:	6819      	ldr	r1, [r3, #0]
  408baa:	1b2d      	subs	r5, r5, r4
  408bac:	f045 0501 	orr.w	r5, r5, #1
  408bb0:	4630      	mov	r0, r6
  408bb2:	1b09      	subs	r1, r1, r4
  408bb4:	6055      	str	r5, [r2, #4]
  408bb6:	6019      	str	r1, [r3, #0]
  408bb8:	f7fb feb6 	bl	404928 <__malloc_unlock>
  408bbc:	2001      	movs	r0, #1
  408bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408bc0:	2100      	movs	r1, #0
  408bc2:	4630      	mov	r0, r6
  408bc4:	f7fb ff20 	bl	404a08 <_sbrk_r>
  408bc8:	68ba      	ldr	r2, [r7, #8]
  408bca:	1a83      	subs	r3, r0, r2
  408bcc:	2b0f      	cmp	r3, #15
  408bce:	ddde      	ble.n	408b8e <_malloc_trim_r+0x3e>
  408bd0:	4c06      	ldr	r4, [pc, #24]	; (408bec <_malloc_trim_r+0x9c>)
  408bd2:	4905      	ldr	r1, [pc, #20]	; (408be8 <_malloc_trim_r+0x98>)
  408bd4:	6824      	ldr	r4, [r4, #0]
  408bd6:	f043 0301 	orr.w	r3, r3, #1
  408bda:	1b00      	subs	r0, r0, r4
  408bdc:	6053      	str	r3, [r2, #4]
  408bde:	6008      	str	r0, [r1, #0]
  408be0:	e7d5      	b.n	408b8e <_malloc_trim_r+0x3e>
  408be2:	bf00      	nop
  408be4:	20400458 	.word	0x20400458
  408be8:	20400dc4 	.word	0x20400dc4
  408bec:	20400860 	.word	0x20400860

00408bf0 <_free_r>:
  408bf0:	2900      	cmp	r1, #0
  408bf2:	d044      	beq.n	408c7e <_free_r+0x8e>
  408bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bf8:	460d      	mov	r5, r1
  408bfa:	4680      	mov	r8, r0
  408bfc:	f7fb fe8e 	bl	40491c <__malloc_lock>
  408c00:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408c04:	4969      	ldr	r1, [pc, #420]	; (408dac <_free_r+0x1bc>)
  408c06:	f027 0301 	bic.w	r3, r7, #1
  408c0a:	f1a5 0408 	sub.w	r4, r5, #8
  408c0e:	18e2      	adds	r2, r4, r3
  408c10:	688e      	ldr	r6, [r1, #8]
  408c12:	6850      	ldr	r0, [r2, #4]
  408c14:	42b2      	cmp	r2, r6
  408c16:	f020 0003 	bic.w	r0, r0, #3
  408c1a:	d05e      	beq.n	408cda <_free_r+0xea>
  408c1c:	07fe      	lsls	r6, r7, #31
  408c1e:	6050      	str	r0, [r2, #4]
  408c20:	d40b      	bmi.n	408c3a <_free_r+0x4a>
  408c22:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408c26:	1be4      	subs	r4, r4, r7
  408c28:	f101 0e08 	add.w	lr, r1, #8
  408c2c:	68a5      	ldr	r5, [r4, #8]
  408c2e:	4575      	cmp	r5, lr
  408c30:	443b      	add	r3, r7
  408c32:	d06d      	beq.n	408d10 <_free_r+0x120>
  408c34:	68e7      	ldr	r7, [r4, #12]
  408c36:	60ef      	str	r7, [r5, #12]
  408c38:	60bd      	str	r5, [r7, #8]
  408c3a:	1815      	adds	r5, r2, r0
  408c3c:	686d      	ldr	r5, [r5, #4]
  408c3e:	07ed      	lsls	r5, r5, #31
  408c40:	d53e      	bpl.n	408cc0 <_free_r+0xd0>
  408c42:	f043 0201 	orr.w	r2, r3, #1
  408c46:	6062      	str	r2, [r4, #4]
  408c48:	50e3      	str	r3, [r4, r3]
  408c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c4e:	d217      	bcs.n	408c80 <_free_r+0x90>
  408c50:	08db      	lsrs	r3, r3, #3
  408c52:	1c58      	adds	r0, r3, #1
  408c54:	109a      	asrs	r2, r3, #2
  408c56:	684d      	ldr	r5, [r1, #4]
  408c58:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408c5c:	60a7      	str	r7, [r4, #8]
  408c5e:	2301      	movs	r3, #1
  408c60:	4093      	lsls	r3, r2
  408c62:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408c66:	432b      	orrs	r3, r5
  408c68:	3a08      	subs	r2, #8
  408c6a:	60e2      	str	r2, [r4, #12]
  408c6c:	604b      	str	r3, [r1, #4]
  408c6e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408c72:	60fc      	str	r4, [r7, #12]
  408c74:	4640      	mov	r0, r8
  408c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408c7a:	f7fb be55 	b.w	404928 <__malloc_unlock>
  408c7e:	4770      	bx	lr
  408c80:	0a5a      	lsrs	r2, r3, #9
  408c82:	2a04      	cmp	r2, #4
  408c84:	d852      	bhi.n	408d2c <_free_r+0x13c>
  408c86:	099a      	lsrs	r2, r3, #6
  408c88:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408c8c:	00ff      	lsls	r7, r7, #3
  408c8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408c92:	19c8      	adds	r0, r1, r7
  408c94:	59ca      	ldr	r2, [r1, r7]
  408c96:	3808      	subs	r0, #8
  408c98:	4290      	cmp	r0, r2
  408c9a:	d04f      	beq.n	408d3c <_free_r+0x14c>
  408c9c:	6851      	ldr	r1, [r2, #4]
  408c9e:	f021 0103 	bic.w	r1, r1, #3
  408ca2:	428b      	cmp	r3, r1
  408ca4:	d232      	bcs.n	408d0c <_free_r+0x11c>
  408ca6:	6892      	ldr	r2, [r2, #8]
  408ca8:	4290      	cmp	r0, r2
  408caa:	d1f7      	bne.n	408c9c <_free_r+0xac>
  408cac:	68c3      	ldr	r3, [r0, #12]
  408cae:	60a0      	str	r0, [r4, #8]
  408cb0:	60e3      	str	r3, [r4, #12]
  408cb2:	609c      	str	r4, [r3, #8]
  408cb4:	60c4      	str	r4, [r0, #12]
  408cb6:	4640      	mov	r0, r8
  408cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408cbc:	f7fb be34 	b.w	404928 <__malloc_unlock>
  408cc0:	6895      	ldr	r5, [r2, #8]
  408cc2:	4f3b      	ldr	r7, [pc, #236]	; (408db0 <_free_r+0x1c0>)
  408cc4:	42bd      	cmp	r5, r7
  408cc6:	4403      	add	r3, r0
  408cc8:	d040      	beq.n	408d4c <_free_r+0x15c>
  408cca:	68d0      	ldr	r0, [r2, #12]
  408ccc:	60e8      	str	r0, [r5, #12]
  408cce:	f043 0201 	orr.w	r2, r3, #1
  408cd2:	6085      	str	r5, [r0, #8]
  408cd4:	6062      	str	r2, [r4, #4]
  408cd6:	50e3      	str	r3, [r4, r3]
  408cd8:	e7b7      	b.n	408c4a <_free_r+0x5a>
  408cda:	07ff      	lsls	r7, r7, #31
  408cdc:	4403      	add	r3, r0
  408cde:	d407      	bmi.n	408cf0 <_free_r+0x100>
  408ce0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408ce4:	1aa4      	subs	r4, r4, r2
  408ce6:	4413      	add	r3, r2
  408ce8:	68a0      	ldr	r0, [r4, #8]
  408cea:	68e2      	ldr	r2, [r4, #12]
  408cec:	60c2      	str	r2, [r0, #12]
  408cee:	6090      	str	r0, [r2, #8]
  408cf0:	4a30      	ldr	r2, [pc, #192]	; (408db4 <_free_r+0x1c4>)
  408cf2:	6812      	ldr	r2, [r2, #0]
  408cf4:	f043 0001 	orr.w	r0, r3, #1
  408cf8:	4293      	cmp	r3, r2
  408cfa:	6060      	str	r0, [r4, #4]
  408cfc:	608c      	str	r4, [r1, #8]
  408cfe:	d3b9      	bcc.n	408c74 <_free_r+0x84>
  408d00:	4b2d      	ldr	r3, [pc, #180]	; (408db8 <_free_r+0x1c8>)
  408d02:	4640      	mov	r0, r8
  408d04:	6819      	ldr	r1, [r3, #0]
  408d06:	f7ff ff23 	bl	408b50 <_malloc_trim_r>
  408d0a:	e7b3      	b.n	408c74 <_free_r+0x84>
  408d0c:	4610      	mov	r0, r2
  408d0e:	e7cd      	b.n	408cac <_free_r+0xbc>
  408d10:	1811      	adds	r1, r2, r0
  408d12:	6849      	ldr	r1, [r1, #4]
  408d14:	07c9      	lsls	r1, r1, #31
  408d16:	d444      	bmi.n	408da2 <_free_r+0x1b2>
  408d18:	6891      	ldr	r1, [r2, #8]
  408d1a:	68d2      	ldr	r2, [r2, #12]
  408d1c:	60ca      	str	r2, [r1, #12]
  408d1e:	4403      	add	r3, r0
  408d20:	f043 0001 	orr.w	r0, r3, #1
  408d24:	6091      	str	r1, [r2, #8]
  408d26:	6060      	str	r0, [r4, #4]
  408d28:	50e3      	str	r3, [r4, r3]
  408d2a:	e7a3      	b.n	408c74 <_free_r+0x84>
  408d2c:	2a14      	cmp	r2, #20
  408d2e:	d816      	bhi.n	408d5e <_free_r+0x16e>
  408d30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408d34:	00ff      	lsls	r7, r7, #3
  408d36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408d3a:	e7aa      	b.n	408c92 <_free_r+0xa2>
  408d3c:	10aa      	asrs	r2, r5, #2
  408d3e:	2301      	movs	r3, #1
  408d40:	684d      	ldr	r5, [r1, #4]
  408d42:	4093      	lsls	r3, r2
  408d44:	432b      	orrs	r3, r5
  408d46:	604b      	str	r3, [r1, #4]
  408d48:	4603      	mov	r3, r0
  408d4a:	e7b0      	b.n	408cae <_free_r+0xbe>
  408d4c:	f043 0201 	orr.w	r2, r3, #1
  408d50:	614c      	str	r4, [r1, #20]
  408d52:	610c      	str	r4, [r1, #16]
  408d54:	60e5      	str	r5, [r4, #12]
  408d56:	60a5      	str	r5, [r4, #8]
  408d58:	6062      	str	r2, [r4, #4]
  408d5a:	50e3      	str	r3, [r4, r3]
  408d5c:	e78a      	b.n	408c74 <_free_r+0x84>
  408d5e:	2a54      	cmp	r2, #84	; 0x54
  408d60:	d806      	bhi.n	408d70 <_free_r+0x180>
  408d62:	0b1a      	lsrs	r2, r3, #12
  408d64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408d68:	00ff      	lsls	r7, r7, #3
  408d6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408d6e:	e790      	b.n	408c92 <_free_r+0xa2>
  408d70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408d74:	d806      	bhi.n	408d84 <_free_r+0x194>
  408d76:	0bda      	lsrs	r2, r3, #15
  408d78:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408d7c:	00ff      	lsls	r7, r7, #3
  408d7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408d82:	e786      	b.n	408c92 <_free_r+0xa2>
  408d84:	f240 5054 	movw	r0, #1364	; 0x554
  408d88:	4282      	cmp	r2, r0
  408d8a:	d806      	bhi.n	408d9a <_free_r+0x1aa>
  408d8c:	0c9a      	lsrs	r2, r3, #18
  408d8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408d92:	00ff      	lsls	r7, r7, #3
  408d94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408d98:	e77b      	b.n	408c92 <_free_r+0xa2>
  408d9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408d9e:	257e      	movs	r5, #126	; 0x7e
  408da0:	e777      	b.n	408c92 <_free_r+0xa2>
  408da2:	f043 0101 	orr.w	r1, r3, #1
  408da6:	6061      	str	r1, [r4, #4]
  408da8:	6013      	str	r3, [r2, #0]
  408daa:	e763      	b.n	408c74 <_free_r+0x84>
  408dac:	20400458 	.word	0x20400458
  408db0:	20400460 	.word	0x20400460
  408db4:	20400864 	.word	0x20400864
  408db8:	20400df4 	.word	0x20400df4

00408dbc <__sfvwrite_r>:
  408dbc:	6893      	ldr	r3, [r2, #8]
  408dbe:	2b00      	cmp	r3, #0
  408dc0:	d073      	beq.n	408eaa <__sfvwrite_r+0xee>
  408dc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dc6:	898b      	ldrh	r3, [r1, #12]
  408dc8:	b083      	sub	sp, #12
  408dca:	460c      	mov	r4, r1
  408dcc:	0719      	lsls	r1, r3, #28
  408dce:	9000      	str	r0, [sp, #0]
  408dd0:	4616      	mov	r6, r2
  408dd2:	d526      	bpl.n	408e22 <__sfvwrite_r+0x66>
  408dd4:	6922      	ldr	r2, [r4, #16]
  408dd6:	b322      	cbz	r2, 408e22 <__sfvwrite_r+0x66>
  408dd8:	f013 0002 	ands.w	r0, r3, #2
  408ddc:	6835      	ldr	r5, [r6, #0]
  408dde:	d02c      	beq.n	408e3a <__sfvwrite_r+0x7e>
  408de0:	f04f 0900 	mov.w	r9, #0
  408de4:	4fb0      	ldr	r7, [pc, #704]	; (4090a8 <__sfvwrite_r+0x2ec>)
  408de6:	46c8      	mov	r8, r9
  408de8:	46b2      	mov	sl, r6
  408dea:	45b8      	cmp	r8, r7
  408dec:	4643      	mov	r3, r8
  408dee:	464a      	mov	r2, r9
  408df0:	bf28      	it	cs
  408df2:	463b      	movcs	r3, r7
  408df4:	9800      	ldr	r0, [sp, #0]
  408df6:	f1b8 0f00 	cmp.w	r8, #0
  408dfa:	d050      	beq.n	408e9e <__sfvwrite_r+0xe2>
  408dfc:	69e1      	ldr	r1, [r4, #28]
  408dfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408e00:	47b0      	blx	r6
  408e02:	2800      	cmp	r0, #0
  408e04:	dd58      	ble.n	408eb8 <__sfvwrite_r+0xfc>
  408e06:	f8da 3008 	ldr.w	r3, [sl, #8]
  408e0a:	1a1b      	subs	r3, r3, r0
  408e0c:	4481      	add	r9, r0
  408e0e:	eba8 0800 	sub.w	r8, r8, r0
  408e12:	f8ca 3008 	str.w	r3, [sl, #8]
  408e16:	2b00      	cmp	r3, #0
  408e18:	d1e7      	bne.n	408dea <__sfvwrite_r+0x2e>
  408e1a:	2000      	movs	r0, #0
  408e1c:	b003      	add	sp, #12
  408e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e22:	4621      	mov	r1, r4
  408e24:	9800      	ldr	r0, [sp, #0]
  408e26:	f7fe fd15 	bl	407854 <__swsetup_r>
  408e2a:	2800      	cmp	r0, #0
  408e2c:	f040 8133 	bne.w	409096 <__sfvwrite_r+0x2da>
  408e30:	89a3      	ldrh	r3, [r4, #12]
  408e32:	6835      	ldr	r5, [r6, #0]
  408e34:	f013 0002 	ands.w	r0, r3, #2
  408e38:	d1d2      	bne.n	408de0 <__sfvwrite_r+0x24>
  408e3a:	f013 0901 	ands.w	r9, r3, #1
  408e3e:	d145      	bne.n	408ecc <__sfvwrite_r+0x110>
  408e40:	464f      	mov	r7, r9
  408e42:	9601      	str	r6, [sp, #4]
  408e44:	b337      	cbz	r7, 408e94 <__sfvwrite_r+0xd8>
  408e46:	059a      	lsls	r2, r3, #22
  408e48:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408e4c:	f140 8083 	bpl.w	408f56 <__sfvwrite_r+0x19a>
  408e50:	4547      	cmp	r7, r8
  408e52:	46c3      	mov	fp, r8
  408e54:	f0c0 80ab 	bcc.w	408fae <__sfvwrite_r+0x1f2>
  408e58:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408e5c:	f040 80ac 	bne.w	408fb8 <__sfvwrite_r+0x1fc>
  408e60:	6820      	ldr	r0, [r4, #0]
  408e62:	46ba      	mov	sl, r7
  408e64:	465a      	mov	r2, fp
  408e66:	4649      	mov	r1, r9
  408e68:	f000 fa2a 	bl	4092c0 <memmove>
  408e6c:	68a2      	ldr	r2, [r4, #8]
  408e6e:	6823      	ldr	r3, [r4, #0]
  408e70:	eba2 0208 	sub.w	r2, r2, r8
  408e74:	445b      	add	r3, fp
  408e76:	60a2      	str	r2, [r4, #8]
  408e78:	6023      	str	r3, [r4, #0]
  408e7a:	9a01      	ldr	r2, [sp, #4]
  408e7c:	6893      	ldr	r3, [r2, #8]
  408e7e:	eba3 030a 	sub.w	r3, r3, sl
  408e82:	44d1      	add	r9, sl
  408e84:	eba7 070a 	sub.w	r7, r7, sl
  408e88:	6093      	str	r3, [r2, #8]
  408e8a:	2b00      	cmp	r3, #0
  408e8c:	d0c5      	beq.n	408e1a <__sfvwrite_r+0x5e>
  408e8e:	89a3      	ldrh	r3, [r4, #12]
  408e90:	2f00      	cmp	r7, #0
  408e92:	d1d8      	bne.n	408e46 <__sfvwrite_r+0x8a>
  408e94:	f8d5 9000 	ldr.w	r9, [r5]
  408e98:	686f      	ldr	r7, [r5, #4]
  408e9a:	3508      	adds	r5, #8
  408e9c:	e7d2      	b.n	408e44 <__sfvwrite_r+0x88>
  408e9e:	f8d5 9000 	ldr.w	r9, [r5]
  408ea2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408ea6:	3508      	adds	r5, #8
  408ea8:	e79f      	b.n	408dea <__sfvwrite_r+0x2e>
  408eaa:	2000      	movs	r0, #0
  408eac:	4770      	bx	lr
  408eae:	4621      	mov	r1, r4
  408eb0:	9800      	ldr	r0, [sp, #0]
  408eb2:	f7ff fda3 	bl	4089fc <_fflush_r>
  408eb6:	b370      	cbz	r0, 408f16 <__sfvwrite_r+0x15a>
  408eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ec0:	f04f 30ff 	mov.w	r0, #4294967295
  408ec4:	81a3      	strh	r3, [r4, #12]
  408ec6:	b003      	add	sp, #12
  408ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ecc:	4681      	mov	r9, r0
  408ece:	4633      	mov	r3, r6
  408ed0:	464e      	mov	r6, r9
  408ed2:	46a8      	mov	r8, r5
  408ed4:	469a      	mov	sl, r3
  408ed6:	464d      	mov	r5, r9
  408ed8:	b34e      	cbz	r6, 408f2e <__sfvwrite_r+0x172>
  408eda:	b380      	cbz	r0, 408f3e <__sfvwrite_r+0x182>
  408edc:	6820      	ldr	r0, [r4, #0]
  408ede:	6923      	ldr	r3, [r4, #16]
  408ee0:	6962      	ldr	r2, [r4, #20]
  408ee2:	45b1      	cmp	r9, r6
  408ee4:	46cb      	mov	fp, r9
  408ee6:	bf28      	it	cs
  408ee8:	46b3      	movcs	fp, r6
  408eea:	4298      	cmp	r0, r3
  408eec:	465f      	mov	r7, fp
  408eee:	d904      	bls.n	408efa <__sfvwrite_r+0x13e>
  408ef0:	68a3      	ldr	r3, [r4, #8]
  408ef2:	4413      	add	r3, r2
  408ef4:	459b      	cmp	fp, r3
  408ef6:	f300 80a6 	bgt.w	409046 <__sfvwrite_r+0x28a>
  408efa:	4593      	cmp	fp, r2
  408efc:	db4b      	blt.n	408f96 <__sfvwrite_r+0x1da>
  408efe:	4613      	mov	r3, r2
  408f00:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408f02:	69e1      	ldr	r1, [r4, #28]
  408f04:	9800      	ldr	r0, [sp, #0]
  408f06:	462a      	mov	r2, r5
  408f08:	47b8      	blx	r7
  408f0a:	1e07      	subs	r7, r0, #0
  408f0c:	ddd4      	ble.n	408eb8 <__sfvwrite_r+0xfc>
  408f0e:	ebb9 0907 	subs.w	r9, r9, r7
  408f12:	d0cc      	beq.n	408eae <__sfvwrite_r+0xf2>
  408f14:	2001      	movs	r0, #1
  408f16:	f8da 3008 	ldr.w	r3, [sl, #8]
  408f1a:	1bdb      	subs	r3, r3, r7
  408f1c:	443d      	add	r5, r7
  408f1e:	1bf6      	subs	r6, r6, r7
  408f20:	f8ca 3008 	str.w	r3, [sl, #8]
  408f24:	2b00      	cmp	r3, #0
  408f26:	f43f af78 	beq.w	408e1a <__sfvwrite_r+0x5e>
  408f2a:	2e00      	cmp	r6, #0
  408f2c:	d1d5      	bne.n	408eda <__sfvwrite_r+0x11e>
  408f2e:	f108 0308 	add.w	r3, r8, #8
  408f32:	e913 0060 	ldmdb	r3, {r5, r6}
  408f36:	4698      	mov	r8, r3
  408f38:	3308      	adds	r3, #8
  408f3a:	2e00      	cmp	r6, #0
  408f3c:	d0f9      	beq.n	408f32 <__sfvwrite_r+0x176>
  408f3e:	4632      	mov	r2, r6
  408f40:	210a      	movs	r1, #10
  408f42:	4628      	mov	r0, r5
  408f44:	f000 f96c 	bl	409220 <memchr>
  408f48:	2800      	cmp	r0, #0
  408f4a:	f000 80a1 	beq.w	409090 <__sfvwrite_r+0x2d4>
  408f4e:	3001      	adds	r0, #1
  408f50:	eba0 0905 	sub.w	r9, r0, r5
  408f54:	e7c2      	b.n	408edc <__sfvwrite_r+0x120>
  408f56:	6820      	ldr	r0, [r4, #0]
  408f58:	6923      	ldr	r3, [r4, #16]
  408f5a:	4298      	cmp	r0, r3
  408f5c:	d802      	bhi.n	408f64 <__sfvwrite_r+0x1a8>
  408f5e:	6963      	ldr	r3, [r4, #20]
  408f60:	429f      	cmp	r7, r3
  408f62:	d25d      	bcs.n	409020 <__sfvwrite_r+0x264>
  408f64:	45b8      	cmp	r8, r7
  408f66:	bf28      	it	cs
  408f68:	46b8      	movcs	r8, r7
  408f6a:	4642      	mov	r2, r8
  408f6c:	4649      	mov	r1, r9
  408f6e:	f000 f9a7 	bl	4092c0 <memmove>
  408f72:	68a3      	ldr	r3, [r4, #8]
  408f74:	6822      	ldr	r2, [r4, #0]
  408f76:	eba3 0308 	sub.w	r3, r3, r8
  408f7a:	4442      	add	r2, r8
  408f7c:	60a3      	str	r3, [r4, #8]
  408f7e:	6022      	str	r2, [r4, #0]
  408f80:	b10b      	cbz	r3, 408f86 <__sfvwrite_r+0x1ca>
  408f82:	46c2      	mov	sl, r8
  408f84:	e779      	b.n	408e7a <__sfvwrite_r+0xbe>
  408f86:	4621      	mov	r1, r4
  408f88:	9800      	ldr	r0, [sp, #0]
  408f8a:	f7ff fd37 	bl	4089fc <_fflush_r>
  408f8e:	2800      	cmp	r0, #0
  408f90:	d192      	bne.n	408eb8 <__sfvwrite_r+0xfc>
  408f92:	46c2      	mov	sl, r8
  408f94:	e771      	b.n	408e7a <__sfvwrite_r+0xbe>
  408f96:	465a      	mov	r2, fp
  408f98:	4629      	mov	r1, r5
  408f9a:	f000 f991 	bl	4092c0 <memmove>
  408f9e:	68a2      	ldr	r2, [r4, #8]
  408fa0:	6823      	ldr	r3, [r4, #0]
  408fa2:	eba2 020b 	sub.w	r2, r2, fp
  408fa6:	445b      	add	r3, fp
  408fa8:	60a2      	str	r2, [r4, #8]
  408faa:	6023      	str	r3, [r4, #0]
  408fac:	e7af      	b.n	408f0e <__sfvwrite_r+0x152>
  408fae:	6820      	ldr	r0, [r4, #0]
  408fb0:	46b8      	mov	r8, r7
  408fb2:	46ba      	mov	sl, r7
  408fb4:	46bb      	mov	fp, r7
  408fb6:	e755      	b.n	408e64 <__sfvwrite_r+0xa8>
  408fb8:	6962      	ldr	r2, [r4, #20]
  408fba:	6820      	ldr	r0, [r4, #0]
  408fbc:	6921      	ldr	r1, [r4, #16]
  408fbe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408fc2:	eba0 0a01 	sub.w	sl, r0, r1
  408fc6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408fca:	f10a 0001 	add.w	r0, sl, #1
  408fce:	ea4f 0868 	mov.w	r8, r8, asr #1
  408fd2:	4438      	add	r0, r7
  408fd4:	4540      	cmp	r0, r8
  408fd6:	4642      	mov	r2, r8
  408fd8:	bf84      	itt	hi
  408fda:	4680      	movhi	r8, r0
  408fdc:	4642      	movhi	r2, r8
  408fde:	055b      	lsls	r3, r3, #21
  408fe0:	d544      	bpl.n	40906c <__sfvwrite_r+0x2b0>
  408fe2:	4611      	mov	r1, r2
  408fe4:	9800      	ldr	r0, [sp, #0]
  408fe6:	f7fb f901 	bl	4041ec <_malloc_r>
  408fea:	4683      	mov	fp, r0
  408fec:	2800      	cmp	r0, #0
  408fee:	d055      	beq.n	40909c <__sfvwrite_r+0x2e0>
  408ff0:	4652      	mov	r2, sl
  408ff2:	6921      	ldr	r1, [r4, #16]
  408ff4:	f7fb fbaa 	bl	40474c <memcpy>
  408ff8:	89a3      	ldrh	r3, [r4, #12]
  408ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409002:	81a3      	strh	r3, [r4, #12]
  409004:	eb0b 000a 	add.w	r0, fp, sl
  409008:	eba8 030a 	sub.w	r3, r8, sl
  40900c:	f8c4 b010 	str.w	fp, [r4, #16]
  409010:	f8c4 8014 	str.w	r8, [r4, #20]
  409014:	6020      	str	r0, [r4, #0]
  409016:	60a3      	str	r3, [r4, #8]
  409018:	46b8      	mov	r8, r7
  40901a:	46ba      	mov	sl, r7
  40901c:	46bb      	mov	fp, r7
  40901e:	e721      	b.n	408e64 <__sfvwrite_r+0xa8>
  409020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  409024:	42b9      	cmp	r1, r7
  409026:	bf28      	it	cs
  409028:	4639      	movcs	r1, r7
  40902a:	464a      	mov	r2, r9
  40902c:	fb91 f1f3 	sdiv	r1, r1, r3
  409030:	9800      	ldr	r0, [sp, #0]
  409032:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409034:	fb03 f301 	mul.w	r3, r3, r1
  409038:	69e1      	ldr	r1, [r4, #28]
  40903a:	47b0      	blx	r6
  40903c:	f1b0 0a00 	subs.w	sl, r0, #0
  409040:	f73f af1b 	bgt.w	408e7a <__sfvwrite_r+0xbe>
  409044:	e738      	b.n	408eb8 <__sfvwrite_r+0xfc>
  409046:	461a      	mov	r2, r3
  409048:	4629      	mov	r1, r5
  40904a:	9301      	str	r3, [sp, #4]
  40904c:	f000 f938 	bl	4092c0 <memmove>
  409050:	6822      	ldr	r2, [r4, #0]
  409052:	9b01      	ldr	r3, [sp, #4]
  409054:	9800      	ldr	r0, [sp, #0]
  409056:	441a      	add	r2, r3
  409058:	6022      	str	r2, [r4, #0]
  40905a:	4621      	mov	r1, r4
  40905c:	f7ff fcce 	bl	4089fc <_fflush_r>
  409060:	9b01      	ldr	r3, [sp, #4]
  409062:	2800      	cmp	r0, #0
  409064:	f47f af28 	bne.w	408eb8 <__sfvwrite_r+0xfc>
  409068:	461f      	mov	r7, r3
  40906a:	e750      	b.n	408f0e <__sfvwrite_r+0x152>
  40906c:	9800      	ldr	r0, [sp, #0]
  40906e:	f000 fc85 	bl	40997c <_realloc_r>
  409072:	4683      	mov	fp, r0
  409074:	2800      	cmp	r0, #0
  409076:	d1c5      	bne.n	409004 <__sfvwrite_r+0x248>
  409078:	9d00      	ldr	r5, [sp, #0]
  40907a:	6921      	ldr	r1, [r4, #16]
  40907c:	4628      	mov	r0, r5
  40907e:	f7ff fdb7 	bl	408bf0 <_free_r>
  409082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409086:	220c      	movs	r2, #12
  409088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40908c:	602a      	str	r2, [r5, #0]
  40908e:	e715      	b.n	408ebc <__sfvwrite_r+0x100>
  409090:	f106 0901 	add.w	r9, r6, #1
  409094:	e722      	b.n	408edc <__sfvwrite_r+0x120>
  409096:	f04f 30ff 	mov.w	r0, #4294967295
  40909a:	e6bf      	b.n	408e1c <__sfvwrite_r+0x60>
  40909c:	9a00      	ldr	r2, [sp, #0]
  40909e:	230c      	movs	r3, #12
  4090a0:	6013      	str	r3, [r2, #0]
  4090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4090a6:	e709      	b.n	408ebc <__sfvwrite_r+0x100>
  4090a8:	7ffffc00 	.word	0x7ffffc00

004090ac <_fwalk_reent>:
  4090ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4090b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4090b4:	d01f      	beq.n	4090f6 <_fwalk_reent+0x4a>
  4090b6:	4688      	mov	r8, r1
  4090b8:	4606      	mov	r6, r0
  4090ba:	f04f 0900 	mov.w	r9, #0
  4090be:	687d      	ldr	r5, [r7, #4]
  4090c0:	68bc      	ldr	r4, [r7, #8]
  4090c2:	3d01      	subs	r5, #1
  4090c4:	d411      	bmi.n	4090ea <_fwalk_reent+0x3e>
  4090c6:	89a3      	ldrh	r3, [r4, #12]
  4090c8:	2b01      	cmp	r3, #1
  4090ca:	f105 35ff 	add.w	r5, r5, #4294967295
  4090ce:	d908      	bls.n	4090e2 <_fwalk_reent+0x36>
  4090d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4090d4:	3301      	adds	r3, #1
  4090d6:	4621      	mov	r1, r4
  4090d8:	4630      	mov	r0, r6
  4090da:	d002      	beq.n	4090e2 <_fwalk_reent+0x36>
  4090dc:	47c0      	blx	r8
  4090de:	ea49 0900 	orr.w	r9, r9, r0
  4090e2:	1c6b      	adds	r3, r5, #1
  4090e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4090e8:	d1ed      	bne.n	4090c6 <_fwalk_reent+0x1a>
  4090ea:	683f      	ldr	r7, [r7, #0]
  4090ec:	2f00      	cmp	r7, #0
  4090ee:	d1e6      	bne.n	4090be <_fwalk_reent+0x12>
  4090f0:	4648      	mov	r0, r9
  4090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090f6:	46b9      	mov	r9, r7
  4090f8:	4648      	mov	r0, r9
  4090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090fe:	bf00      	nop

00409100 <_localeconv_r>:
  409100:	4a04      	ldr	r2, [pc, #16]	; (409114 <_localeconv_r+0x14>)
  409102:	4b05      	ldr	r3, [pc, #20]	; (409118 <_localeconv_r+0x18>)
  409104:	6812      	ldr	r2, [r2, #0]
  409106:	6b50      	ldr	r0, [r2, #52]	; 0x34
  409108:	2800      	cmp	r0, #0
  40910a:	bf08      	it	eq
  40910c:	4618      	moveq	r0, r3
  40910e:	30f0      	adds	r0, #240	; 0xf0
  409110:	4770      	bx	lr
  409112:	bf00      	nop
  409114:	20400028 	.word	0x20400028
  409118:	2040086c 	.word	0x2040086c

0040911c <__retarget_lock_init_recursive>:
  40911c:	4770      	bx	lr
  40911e:	bf00      	nop

00409120 <__retarget_lock_close_recursive>:
  409120:	4770      	bx	lr
  409122:	bf00      	nop

00409124 <__retarget_lock_acquire_recursive>:
  409124:	4770      	bx	lr
  409126:	bf00      	nop

00409128 <__retarget_lock_release_recursive>:
  409128:	4770      	bx	lr
  40912a:	bf00      	nop

0040912c <__swhatbuf_r>:
  40912c:	b570      	push	{r4, r5, r6, lr}
  40912e:	460c      	mov	r4, r1
  409130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409134:	2900      	cmp	r1, #0
  409136:	b090      	sub	sp, #64	; 0x40
  409138:	4615      	mov	r5, r2
  40913a:	461e      	mov	r6, r3
  40913c:	db14      	blt.n	409168 <__swhatbuf_r+0x3c>
  40913e:	aa01      	add	r2, sp, #4
  409140:	f001 f86e 	bl	40a220 <_fstat_r>
  409144:	2800      	cmp	r0, #0
  409146:	db0f      	blt.n	409168 <__swhatbuf_r+0x3c>
  409148:	9a02      	ldr	r2, [sp, #8]
  40914a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40914e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  409152:	fab2 f282 	clz	r2, r2
  409156:	0952      	lsrs	r2, r2, #5
  409158:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40915c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409160:	6032      	str	r2, [r6, #0]
  409162:	602b      	str	r3, [r5, #0]
  409164:	b010      	add	sp, #64	; 0x40
  409166:	bd70      	pop	{r4, r5, r6, pc}
  409168:	89a2      	ldrh	r2, [r4, #12]
  40916a:	2300      	movs	r3, #0
  40916c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409170:	6033      	str	r3, [r6, #0]
  409172:	d004      	beq.n	40917e <__swhatbuf_r+0x52>
  409174:	2240      	movs	r2, #64	; 0x40
  409176:	4618      	mov	r0, r3
  409178:	602a      	str	r2, [r5, #0]
  40917a:	b010      	add	sp, #64	; 0x40
  40917c:	bd70      	pop	{r4, r5, r6, pc}
  40917e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409182:	602b      	str	r3, [r5, #0]
  409184:	b010      	add	sp, #64	; 0x40
  409186:	bd70      	pop	{r4, r5, r6, pc}

00409188 <__smakebuf_r>:
  409188:	898a      	ldrh	r2, [r1, #12]
  40918a:	0792      	lsls	r2, r2, #30
  40918c:	460b      	mov	r3, r1
  40918e:	d506      	bpl.n	40919e <__smakebuf_r+0x16>
  409190:	f101 0243 	add.w	r2, r1, #67	; 0x43
  409194:	2101      	movs	r1, #1
  409196:	601a      	str	r2, [r3, #0]
  409198:	611a      	str	r2, [r3, #16]
  40919a:	6159      	str	r1, [r3, #20]
  40919c:	4770      	bx	lr
  40919e:	b5f0      	push	{r4, r5, r6, r7, lr}
  4091a0:	b083      	sub	sp, #12
  4091a2:	ab01      	add	r3, sp, #4
  4091a4:	466a      	mov	r2, sp
  4091a6:	460c      	mov	r4, r1
  4091a8:	4606      	mov	r6, r0
  4091aa:	f7ff ffbf 	bl	40912c <__swhatbuf_r>
  4091ae:	9900      	ldr	r1, [sp, #0]
  4091b0:	4605      	mov	r5, r0
  4091b2:	4630      	mov	r0, r6
  4091b4:	f7fb f81a 	bl	4041ec <_malloc_r>
  4091b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4091bc:	b1d8      	cbz	r0, 4091f6 <__smakebuf_r+0x6e>
  4091be:	9a01      	ldr	r2, [sp, #4]
  4091c0:	4f15      	ldr	r7, [pc, #84]	; (409218 <__smakebuf_r+0x90>)
  4091c2:	9900      	ldr	r1, [sp, #0]
  4091c4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4091c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4091ca:	81a3      	strh	r3, [r4, #12]
  4091cc:	6020      	str	r0, [r4, #0]
  4091ce:	6120      	str	r0, [r4, #16]
  4091d0:	6161      	str	r1, [r4, #20]
  4091d2:	b91a      	cbnz	r2, 4091dc <__smakebuf_r+0x54>
  4091d4:	432b      	orrs	r3, r5
  4091d6:	81a3      	strh	r3, [r4, #12]
  4091d8:	b003      	add	sp, #12
  4091da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4091dc:	4630      	mov	r0, r6
  4091de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4091e2:	f001 f831 	bl	40a248 <_isatty_r>
  4091e6:	b1a0      	cbz	r0, 409212 <__smakebuf_r+0x8a>
  4091e8:	89a3      	ldrh	r3, [r4, #12]
  4091ea:	f023 0303 	bic.w	r3, r3, #3
  4091ee:	f043 0301 	orr.w	r3, r3, #1
  4091f2:	b21b      	sxth	r3, r3
  4091f4:	e7ee      	b.n	4091d4 <__smakebuf_r+0x4c>
  4091f6:	059a      	lsls	r2, r3, #22
  4091f8:	d4ee      	bmi.n	4091d8 <__smakebuf_r+0x50>
  4091fa:	f023 0303 	bic.w	r3, r3, #3
  4091fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
  409202:	f043 0302 	orr.w	r3, r3, #2
  409206:	2101      	movs	r1, #1
  409208:	81a3      	strh	r3, [r4, #12]
  40920a:	6022      	str	r2, [r4, #0]
  40920c:	6122      	str	r2, [r4, #16]
  40920e:	6161      	str	r1, [r4, #20]
  409210:	e7e2      	b.n	4091d8 <__smakebuf_r+0x50>
  409212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409216:	e7dd      	b.n	4091d4 <__smakebuf_r+0x4c>
  409218:	00408a51 	.word	0x00408a51
  40921c:	00000000 	.word	0x00000000

00409220 <memchr>:
  409220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409224:	2a10      	cmp	r2, #16
  409226:	db2b      	blt.n	409280 <memchr+0x60>
  409228:	f010 0f07 	tst.w	r0, #7
  40922c:	d008      	beq.n	409240 <memchr+0x20>
  40922e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409232:	3a01      	subs	r2, #1
  409234:	428b      	cmp	r3, r1
  409236:	d02d      	beq.n	409294 <memchr+0x74>
  409238:	f010 0f07 	tst.w	r0, #7
  40923c:	b342      	cbz	r2, 409290 <memchr+0x70>
  40923e:	d1f6      	bne.n	40922e <memchr+0xe>
  409240:	b4f0      	push	{r4, r5, r6, r7}
  409242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40924a:	f022 0407 	bic.w	r4, r2, #7
  40924e:	f07f 0700 	mvns.w	r7, #0
  409252:	2300      	movs	r3, #0
  409254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409258:	3c08      	subs	r4, #8
  40925a:	ea85 0501 	eor.w	r5, r5, r1
  40925e:	ea86 0601 	eor.w	r6, r6, r1
  409262:	fa85 f547 	uadd8	r5, r5, r7
  409266:	faa3 f587 	sel	r5, r3, r7
  40926a:	fa86 f647 	uadd8	r6, r6, r7
  40926e:	faa5 f687 	sel	r6, r5, r7
  409272:	b98e      	cbnz	r6, 409298 <memchr+0x78>
  409274:	d1ee      	bne.n	409254 <memchr+0x34>
  409276:	bcf0      	pop	{r4, r5, r6, r7}
  409278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40927c:	f002 0207 	and.w	r2, r2, #7
  409280:	b132      	cbz	r2, 409290 <memchr+0x70>
  409282:	f810 3b01 	ldrb.w	r3, [r0], #1
  409286:	3a01      	subs	r2, #1
  409288:	ea83 0301 	eor.w	r3, r3, r1
  40928c:	b113      	cbz	r3, 409294 <memchr+0x74>
  40928e:	d1f8      	bne.n	409282 <memchr+0x62>
  409290:	2000      	movs	r0, #0
  409292:	4770      	bx	lr
  409294:	3801      	subs	r0, #1
  409296:	4770      	bx	lr
  409298:	2d00      	cmp	r5, #0
  40929a:	bf06      	itte	eq
  40929c:	4635      	moveq	r5, r6
  40929e:	3803      	subeq	r0, #3
  4092a0:	3807      	subne	r0, #7
  4092a2:	f015 0f01 	tst.w	r5, #1
  4092a6:	d107      	bne.n	4092b8 <memchr+0x98>
  4092a8:	3001      	adds	r0, #1
  4092aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4092ae:	bf02      	ittt	eq
  4092b0:	3001      	addeq	r0, #1
  4092b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4092b6:	3001      	addeq	r0, #1
  4092b8:	bcf0      	pop	{r4, r5, r6, r7}
  4092ba:	3801      	subs	r0, #1
  4092bc:	4770      	bx	lr
  4092be:	bf00      	nop

004092c0 <memmove>:
  4092c0:	4288      	cmp	r0, r1
  4092c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4092c4:	d90d      	bls.n	4092e2 <memmove+0x22>
  4092c6:	188b      	adds	r3, r1, r2
  4092c8:	4298      	cmp	r0, r3
  4092ca:	d20a      	bcs.n	4092e2 <memmove+0x22>
  4092cc:	1884      	adds	r4, r0, r2
  4092ce:	2a00      	cmp	r2, #0
  4092d0:	d051      	beq.n	409376 <memmove+0xb6>
  4092d2:	4622      	mov	r2, r4
  4092d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4092d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4092dc:	4299      	cmp	r1, r3
  4092de:	d1f9      	bne.n	4092d4 <memmove+0x14>
  4092e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4092e2:	2a0f      	cmp	r2, #15
  4092e4:	d948      	bls.n	409378 <memmove+0xb8>
  4092e6:	ea41 0300 	orr.w	r3, r1, r0
  4092ea:	079b      	lsls	r3, r3, #30
  4092ec:	d146      	bne.n	40937c <memmove+0xbc>
  4092ee:	f100 0410 	add.w	r4, r0, #16
  4092f2:	f101 0310 	add.w	r3, r1, #16
  4092f6:	4615      	mov	r5, r2
  4092f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4092fc:	f844 6c10 	str.w	r6, [r4, #-16]
  409300:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409304:	f844 6c0c 	str.w	r6, [r4, #-12]
  409308:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40930c:	f844 6c08 	str.w	r6, [r4, #-8]
  409310:	3d10      	subs	r5, #16
  409312:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409316:	f844 6c04 	str.w	r6, [r4, #-4]
  40931a:	2d0f      	cmp	r5, #15
  40931c:	f103 0310 	add.w	r3, r3, #16
  409320:	f104 0410 	add.w	r4, r4, #16
  409324:	d8e8      	bhi.n	4092f8 <memmove+0x38>
  409326:	f1a2 0310 	sub.w	r3, r2, #16
  40932a:	f023 030f 	bic.w	r3, r3, #15
  40932e:	f002 0e0f 	and.w	lr, r2, #15
  409332:	3310      	adds	r3, #16
  409334:	f1be 0f03 	cmp.w	lr, #3
  409338:	4419      	add	r1, r3
  40933a:	4403      	add	r3, r0
  40933c:	d921      	bls.n	409382 <memmove+0xc2>
  40933e:	1f1e      	subs	r6, r3, #4
  409340:	460d      	mov	r5, r1
  409342:	4674      	mov	r4, lr
  409344:	3c04      	subs	r4, #4
  409346:	f855 7b04 	ldr.w	r7, [r5], #4
  40934a:	f846 7f04 	str.w	r7, [r6, #4]!
  40934e:	2c03      	cmp	r4, #3
  409350:	d8f8      	bhi.n	409344 <memmove+0x84>
  409352:	f1ae 0404 	sub.w	r4, lr, #4
  409356:	f024 0403 	bic.w	r4, r4, #3
  40935a:	3404      	adds	r4, #4
  40935c:	4421      	add	r1, r4
  40935e:	4423      	add	r3, r4
  409360:	f002 0203 	and.w	r2, r2, #3
  409364:	b162      	cbz	r2, 409380 <memmove+0xc0>
  409366:	3b01      	subs	r3, #1
  409368:	440a      	add	r2, r1
  40936a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40936e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409372:	428a      	cmp	r2, r1
  409374:	d1f9      	bne.n	40936a <memmove+0xaa>
  409376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409378:	4603      	mov	r3, r0
  40937a:	e7f3      	b.n	409364 <memmove+0xa4>
  40937c:	4603      	mov	r3, r0
  40937e:	e7f2      	b.n	409366 <memmove+0xa6>
  409380:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409382:	4672      	mov	r2, lr
  409384:	e7ee      	b.n	409364 <memmove+0xa4>
  409386:	bf00      	nop

00409388 <_Balloc>:
  409388:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40938a:	b570      	push	{r4, r5, r6, lr}
  40938c:	4605      	mov	r5, r0
  40938e:	460c      	mov	r4, r1
  409390:	b14b      	cbz	r3, 4093a6 <_Balloc+0x1e>
  409392:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409396:	b180      	cbz	r0, 4093ba <_Balloc+0x32>
  409398:	6802      	ldr	r2, [r0, #0]
  40939a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40939e:	2300      	movs	r3, #0
  4093a0:	6103      	str	r3, [r0, #16]
  4093a2:	60c3      	str	r3, [r0, #12]
  4093a4:	bd70      	pop	{r4, r5, r6, pc}
  4093a6:	2221      	movs	r2, #33	; 0x21
  4093a8:	2104      	movs	r1, #4
  4093aa:	f000 fe11 	bl	409fd0 <_calloc_r>
  4093ae:	64e8      	str	r0, [r5, #76]	; 0x4c
  4093b0:	4603      	mov	r3, r0
  4093b2:	2800      	cmp	r0, #0
  4093b4:	d1ed      	bne.n	409392 <_Balloc+0xa>
  4093b6:	2000      	movs	r0, #0
  4093b8:	bd70      	pop	{r4, r5, r6, pc}
  4093ba:	2101      	movs	r1, #1
  4093bc:	fa01 f604 	lsl.w	r6, r1, r4
  4093c0:	1d72      	adds	r2, r6, #5
  4093c2:	4628      	mov	r0, r5
  4093c4:	0092      	lsls	r2, r2, #2
  4093c6:	f000 fe03 	bl	409fd0 <_calloc_r>
  4093ca:	2800      	cmp	r0, #0
  4093cc:	d0f3      	beq.n	4093b6 <_Balloc+0x2e>
  4093ce:	6044      	str	r4, [r0, #4]
  4093d0:	6086      	str	r6, [r0, #8]
  4093d2:	e7e4      	b.n	40939e <_Balloc+0x16>

004093d4 <_Bfree>:
  4093d4:	b131      	cbz	r1, 4093e4 <_Bfree+0x10>
  4093d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4093d8:	684a      	ldr	r2, [r1, #4]
  4093da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4093de:	6008      	str	r0, [r1, #0]
  4093e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4093e4:	4770      	bx	lr
  4093e6:	bf00      	nop

004093e8 <__multadd>:
  4093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4093ea:	690c      	ldr	r4, [r1, #16]
  4093ec:	b083      	sub	sp, #12
  4093ee:	460d      	mov	r5, r1
  4093f0:	4606      	mov	r6, r0
  4093f2:	f101 0e14 	add.w	lr, r1, #20
  4093f6:	2700      	movs	r7, #0
  4093f8:	f8de 0000 	ldr.w	r0, [lr]
  4093fc:	b281      	uxth	r1, r0
  4093fe:	fb02 3301 	mla	r3, r2, r1, r3
  409402:	0c01      	lsrs	r1, r0, #16
  409404:	0c18      	lsrs	r0, r3, #16
  409406:	fb02 0101 	mla	r1, r2, r1, r0
  40940a:	b29b      	uxth	r3, r3
  40940c:	3701      	adds	r7, #1
  40940e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  409412:	42bc      	cmp	r4, r7
  409414:	f84e 3b04 	str.w	r3, [lr], #4
  409418:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40941c:	dcec      	bgt.n	4093f8 <__multadd+0x10>
  40941e:	b13b      	cbz	r3, 409430 <__multadd+0x48>
  409420:	68aa      	ldr	r2, [r5, #8]
  409422:	4294      	cmp	r4, r2
  409424:	da07      	bge.n	409436 <__multadd+0x4e>
  409426:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40942a:	3401      	adds	r4, #1
  40942c:	6153      	str	r3, [r2, #20]
  40942e:	612c      	str	r4, [r5, #16]
  409430:	4628      	mov	r0, r5
  409432:	b003      	add	sp, #12
  409434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409436:	6869      	ldr	r1, [r5, #4]
  409438:	9301      	str	r3, [sp, #4]
  40943a:	3101      	adds	r1, #1
  40943c:	4630      	mov	r0, r6
  40943e:	f7ff ffa3 	bl	409388 <_Balloc>
  409442:	692a      	ldr	r2, [r5, #16]
  409444:	3202      	adds	r2, #2
  409446:	f105 010c 	add.w	r1, r5, #12
  40944a:	4607      	mov	r7, r0
  40944c:	0092      	lsls	r2, r2, #2
  40944e:	300c      	adds	r0, #12
  409450:	f7fb f97c 	bl	40474c <memcpy>
  409454:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409456:	6869      	ldr	r1, [r5, #4]
  409458:	9b01      	ldr	r3, [sp, #4]
  40945a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40945e:	6028      	str	r0, [r5, #0]
  409460:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409464:	463d      	mov	r5, r7
  409466:	e7de      	b.n	409426 <__multadd+0x3e>

00409468 <__hi0bits>:
  409468:	0c02      	lsrs	r2, r0, #16
  40946a:	0412      	lsls	r2, r2, #16
  40946c:	4603      	mov	r3, r0
  40946e:	b9b2      	cbnz	r2, 40949e <__hi0bits+0x36>
  409470:	0403      	lsls	r3, r0, #16
  409472:	2010      	movs	r0, #16
  409474:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409478:	bf04      	itt	eq
  40947a:	021b      	lsleq	r3, r3, #8
  40947c:	3008      	addeq	r0, #8
  40947e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409482:	bf04      	itt	eq
  409484:	011b      	lsleq	r3, r3, #4
  409486:	3004      	addeq	r0, #4
  409488:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40948c:	bf04      	itt	eq
  40948e:	009b      	lsleq	r3, r3, #2
  409490:	3002      	addeq	r0, #2
  409492:	2b00      	cmp	r3, #0
  409494:	db02      	blt.n	40949c <__hi0bits+0x34>
  409496:	005b      	lsls	r3, r3, #1
  409498:	d403      	bmi.n	4094a2 <__hi0bits+0x3a>
  40949a:	2020      	movs	r0, #32
  40949c:	4770      	bx	lr
  40949e:	2000      	movs	r0, #0
  4094a0:	e7e8      	b.n	409474 <__hi0bits+0xc>
  4094a2:	3001      	adds	r0, #1
  4094a4:	4770      	bx	lr
  4094a6:	bf00      	nop

004094a8 <__lo0bits>:
  4094a8:	6803      	ldr	r3, [r0, #0]
  4094aa:	f013 0207 	ands.w	r2, r3, #7
  4094ae:	4601      	mov	r1, r0
  4094b0:	d007      	beq.n	4094c2 <__lo0bits+0x1a>
  4094b2:	07da      	lsls	r2, r3, #31
  4094b4:	d421      	bmi.n	4094fa <__lo0bits+0x52>
  4094b6:	0798      	lsls	r0, r3, #30
  4094b8:	d421      	bmi.n	4094fe <__lo0bits+0x56>
  4094ba:	089b      	lsrs	r3, r3, #2
  4094bc:	600b      	str	r3, [r1, #0]
  4094be:	2002      	movs	r0, #2
  4094c0:	4770      	bx	lr
  4094c2:	b298      	uxth	r0, r3
  4094c4:	b198      	cbz	r0, 4094ee <__lo0bits+0x46>
  4094c6:	4610      	mov	r0, r2
  4094c8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4094cc:	bf04      	itt	eq
  4094ce:	0a1b      	lsreq	r3, r3, #8
  4094d0:	3008      	addeq	r0, #8
  4094d2:	071a      	lsls	r2, r3, #28
  4094d4:	bf04      	itt	eq
  4094d6:	091b      	lsreq	r3, r3, #4
  4094d8:	3004      	addeq	r0, #4
  4094da:	079a      	lsls	r2, r3, #30
  4094dc:	bf04      	itt	eq
  4094de:	089b      	lsreq	r3, r3, #2
  4094e0:	3002      	addeq	r0, #2
  4094e2:	07da      	lsls	r2, r3, #31
  4094e4:	d407      	bmi.n	4094f6 <__lo0bits+0x4e>
  4094e6:	085b      	lsrs	r3, r3, #1
  4094e8:	d104      	bne.n	4094f4 <__lo0bits+0x4c>
  4094ea:	2020      	movs	r0, #32
  4094ec:	4770      	bx	lr
  4094ee:	0c1b      	lsrs	r3, r3, #16
  4094f0:	2010      	movs	r0, #16
  4094f2:	e7e9      	b.n	4094c8 <__lo0bits+0x20>
  4094f4:	3001      	adds	r0, #1
  4094f6:	600b      	str	r3, [r1, #0]
  4094f8:	4770      	bx	lr
  4094fa:	2000      	movs	r0, #0
  4094fc:	4770      	bx	lr
  4094fe:	085b      	lsrs	r3, r3, #1
  409500:	600b      	str	r3, [r1, #0]
  409502:	2001      	movs	r0, #1
  409504:	4770      	bx	lr
  409506:	bf00      	nop

00409508 <__i2b>:
  409508:	b510      	push	{r4, lr}
  40950a:	460c      	mov	r4, r1
  40950c:	2101      	movs	r1, #1
  40950e:	f7ff ff3b 	bl	409388 <_Balloc>
  409512:	2201      	movs	r2, #1
  409514:	6144      	str	r4, [r0, #20]
  409516:	6102      	str	r2, [r0, #16]
  409518:	bd10      	pop	{r4, pc}
  40951a:	bf00      	nop

0040951c <__multiply>:
  40951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409520:	690c      	ldr	r4, [r1, #16]
  409522:	6915      	ldr	r5, [r2, #16]
  409524:	42ac      	cmp	r4, r5
  409526:	b083      	sub	sp, #12
  409528:	468b      	mov	fp, r1
  40952a:	4616      	mov	r6, r2
  40952c:	da04      	bge.n	409538 <__multiply+0x1c>
  40952e:	4622      	mov	r2, r4
  409530:	46b3      	mov	fp, r6
  409532:	462c      	mov	r4, r5
  409534:	460e      	mov	r6, r1
  409536:	4615      	mov	r5, r2
  409538:	f8db 3008 	ldr.w	r3, [fp, #8]
  40953c:	f8db 1004 	ldr.w	r1, [fp, #4]
  409540:	eb04 0805 	add.w	r8, r4, r5
  409544:	4598      	cmp	r8, r3
  409546:	bfc8      	it	gt
  409548:	3101      	addgt	r1, #1
  40954a:	f7ff ff1d 	bl	409388 <_Balloc>
  40954e:	f100 0914 	add.w	r9, r0, #20
  409552:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409556:	45d1      	cmp	r9, sl
  409558:	9000      	str	r0, [sp, #0]
  40955a:	d205      	bcs.n	409568 <__multiply+0x4c>
  40955c:	464b      	mov	r3, r9
  40955e:	2100      	movs	r1, #0
  409560:	f843 1b04 	str.w	r1, [r3], #4
  409564:	459a      	cmp	sl, r3
  409566:	d8fb      	bhi.n	409560 <__multiply+0x44>
  409568:	f106 0c14 	add.w	ip, r6, #20
  40956c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409570:	f10b 0b14 	add.w	fp, fp, #20
  409574:	459c      	cmp	ip, r3
  409576:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40957a:	d24c      	bcs.n	409616 <__multiply+0xfa>
  40957c:	f8cd a004 	str.w	sl, [sp, #4]
  409580:	469a      	mov	sl, r3
  409582:	f8dc 5000 	ldr.w	r5, [ip]
  409586:	b2af      	uxth	r7, r5
  409588:	b1ef      	cbz	r7, 4095c6 <__multiply+0xaa>
  40958a:	2100      	movs	r1, #0
  40958c:	464d      	mov	r5, r9
  40958e:	465e      	mov	r6, fp
  409590:	460c      	mov	r4, r1
  409592:	f856 2b04 	ldr.w	r2, [r6], #4
  409596:	6828      	ldr	r0, [r5, #0]
  409598:	b293      	uxth	r3, r2
  40959a:	b281      	uxth	r1, r0
  40959c:	fb07 1303 	mla	r3, r7, r3, r1
  4095a0:	0c12      	lsrs	r2, r2, #16
  4095a2:	0c01      	lsrs	r1, r0, #16
  4095a4:	4423      	add	r3, r4
  4095a6:	fb07 1102 	mla	r1, r7, r2, r1
  4095aa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4095ae:	b29b      	uxth	r3, r3
  4095b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4095b4:	45b6      	cmp	lr, r6
  4095b6:	f845 3b04 	str.w	r3, [r5], #4
  4095ba:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4095be:	d8e8      	bhi.n	409592 <__multiply+0x76>
  4095c0:	602c      	str	r4, [r5, #0]
  4095c2:	f8dc 5000 	ldr.w	r5, [ip]
  4095c6:	0c2d      	lsrs	r5, r5, #16
  4095c8:	d01d      	beq.n	409606 <__multiply+0xea>
  4095ca:	f8d9 3000 	ldr.w	r3, [r9]
  4095ce:	4648      	mov	r0, r9
  4095d0:	461c      	mov	r4, r3
  4095d2:	4659      	mov	r1, fp
  4095d4:	2200      	movs	r2, #0
  4095d6:	880e      	ldrh	r6, [r1, #0]
  4095d8:	0c24      	lsrs	r4, r4, #16
  4095da:	fb05 4406 	mla	r4, r5, r6, r4
  4095de:	4422      	add	r2, r4
  4095e0:	b29b      	uxth	r3, r3
  4095e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4095e6:	f840 3b04 	str.w	r3, [r0], #4
  4095ea:	f851 3b04 	ldr.w	r3, [r1], #4
  4095ee:	6804      	ldr	r4, [r0, #0]
  4095f0:	0c1b      	lsrs	r3, r3, #16
  4095f2:	b2a6      	uxth	r6, r4
  4095f4:	fb05 6303 	mla	r3, r5, r3, r6
  4095f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4095fc:	458e      	cmp	lr, r1
  4095fe:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409602:	d8e8      	bhi.n	4095d6 <__multiply+0xba>
  409604:	6003      	str	r3, [r0, #0]
  409606:	f10c 0c04 	add.w	ip, ip, #4
  40960a:	45e2      	cmp	sl, ip
  40960c:	f109 0904 	add.w	r9, r9, #4
  409610:	d8b7      	bhi.n	409582 <__multiply+0x66>
  409612:	f8dd a004 	ldr.w	sl, [sp, #4]
  409616:	f1b8 0f00 	cmp.w	r8, #0
  40961a:	dd0b      	ble.n	409634 <__multiply+0x118>
  40961c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409620:	f1aa 0a04 	sub.w	sl, sl, #4
  409624:	b11b      	cbz	r3, 40962e <__multiply+0x112>
  409626:	e005      	b.n	409634 <__multiply+0x118>
  409628:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40962c:	b913      	cbnz	r3, 409634 <__multiply+0x118>
  40962e:	f1b8 0801 	subs.w	r8, r8, #1
  409632:	d1f9      	bne.n	409628 <__multiply+0x10c>
  409634:	9800      	ldr	r0, [sp, #0]
  409636:	f8c0 8010 	str.w	r8, [r0, #16]
  40963a:	b003      	add	sp, #12
  40963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409640 <__pow5mult>:
  409640:	f012 0303 	ands.w	r3, r2, #3
  409644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409648:	4614      	mov	r4, r2
  40964a:	4607      	mov	r7, r0
  40964c:	d12e      	bne.n	4096ac <__pow5mult+0x6c>
  40964e:	460d      	mov	r5, r1
  409650:	10a4      	asrs	r4, r4, #2
  409652:	d01c      	beq.n	40968e <__pow5mult+0x4e>
  409654:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409656:	b396      	cbz	r6, 4096be <__pow5mult+0x7e>
  409658:	07e3      	lsls	r3, r4, #31
  40965a:	f04f 0800 	mov.w	r8, #0
  40965e:	d406      	bmi.n	40966e <__pow5mult+0x2e>
  409660:	1064      	asrs	r4, r4, #1
  409662:	d014      	beq.n	40968e <__pow5mult+0x4e>
  409664:	6830      	ldr	r0, [r6, #0]
  409666:	b1a8      	cbz	r0, 409694 <__pow5mult+0x54>
  409668:	4606      	mov	r6, r0
  40966a:	07e3      	lsls	r3, r4, #31
  40966c:	d5f8      	bpl.n	409660 <__pow5mult+0x20>
  40966e:	4632      	mov	r2, r6
  409670:	4629      	mov	r1, r5
  409672:	4638      	mov	r0, r7
  409674:	f7ff ff52 	bl	40951c <__multiply>
  409678:	b1b5      	cbz	r5, 4096a8 <__pow5mult+0x68>
  40967a:	686a      	ldr	r2, [r5, #4]
  40967c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40967e:	1064      	asrs	r4, r4, #1
  409680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409684:	6029      	str	r1, [r5, #0]
  409686:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40968a:	4605      	mov	r5, r0
  40968c:	d1ea      	bne.n	409664 <__pow5mult+0x24>
  40968e:	4628      	mov	r0, r5
  409690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409694:	4632      	mov	r2, r6
  409696:	4631      	mov	r1, r6
  409698:	4638      	mov	r0, r7
  40969a:	f7ff ff3f 	bl	40951c <__multiply>
  40969e:	6030      	str	r0, [r6, #0]
  4096a0:	f8c0 8000 	str.w	r8, [r0]
  4096a4:	4606      	mov	r6, r0
  4096a6:	e7e0      	b.n	40966a <__pow5mult+0x2a>
  4096a8:	4605      	mov	r5, r0
  4096aa:	e7d9      	b.n	409660 <__pow5mult+0x20>
  4096ac:	1e5a      	subs	r2, r3, #1
  4096ae:	4d0b      	ldr	r5, [pc, #44]	; (4096dc <__pow5mult+0x9c>)
  4096b0:	2300      	movs	r3, #0
  4096b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4096b6:	f7ff fe97 	bl	4093e8 <__multadd>
  4096ba:	4605      	mov	r5, r0
  4096bc:	e7c8      	b.n	409650 <__pow5mult+0x10>
  4096be:	2101      	movs	r1, #1
  4096c0:	4638      	mov	r0, r7
  4096c2:	f7ff fe61 	bl	409388 <_Balloc>
  4096c6:	f240 2171 	movw	r1, #625	; 0x271
  4096ca:	2201      	movs	r2, #1
  4096cc:	2300      	movs	r3, #0
  4096ce:	6141      	str	r1, [r0, #20]
  4096d0:	6102      	str	r2, [r0, #16]
  4096d2:	4606      	mov	r6, r0
  4096d4:	64b8      	str	r0, [r7, #72]	; 0x48
  4096d6:	6003      	str	r3, [r0, #0]
  4096d8:	e7be      	b.n	409658 <__pow5mult+0x18>
  4096da:	bf00      	nop
  4096dc:	0040b5e0 	.word	0x0040b5e0

004096e0 <__lshift>:
  4096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4096e4:	4691      	mov	r9, r2
  4096e6:	690a      	ldr	r2, [r1, #16]
  4096e8:	688b      	ldr	r3, [r1, #8]
  4096ea:	ea4f 1469 	mov.w	r4, r9, asr #5
  4096ee:	eb04 0802 	add.w	r8, r4, r2
  4096f2:	f108 0501 	add.w	r5, r8, #1
  4096f6:	429d      	cmp	r5, r3
  4096f8:	460e      	mov	r6, r1
  4096fa:	4607      	mov	r7, r0
  4096fc:	6849      	ldr	r1, [r1, #4]
  4096fe:	dd04      	ble.n	40970a <__lshift+0x2a>
  409700:	005b      	lsls	r3, r3, #1
  409702:	429d      	cmp	r5, r3
  409704:	f101 0101 	add.w	r1, r1, #1
  409708:	dcfa      	bgt.n	409700 <__lshift+0x20>
  40970a:	4638      	mov	r0, r7
  40970c:	f7ff fe3c 	bl	409388 <_Balloc>
  409710:	2c00      	cmp	r4, #0
  409712:	f100 0314 	add.w	r3, r0, #20
  409716:	dd06      	ble.n	409726 <__lshift+0x46>
  409718:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40971c:	2100      	movs	r1, #0
  40971e:	f843 1b04 	str.w	r1, [r3], #4
  409722:	429a      	cmp	r2, r3
  409724:	d1fb      	bne.n	40971e <__lshift+0x3e>
  409726:	6934      	ldr	r4, [r6, #16]
  409728:	f106 0114 	add.w	r1, r6, #20
  40972c:	f019 091f 	ands.w	r9, r9, #31
  409730:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409734:	d01d      	beq.n	409772 <__lshift+0x92>
  409736:	f1c9 0c20 	rsb	ip, r9, #32
  40973a:	2200      	movs	r2, #0
  40973c:	680c      	ldr	r4, [r1, #0]
  40973e:	fa04 f409 	lsl.w	r4, r4, r9
  409742:	4314      	orrs	r4, r2
  409744:	f843 4b04 	str.w	r4, [r3], #4
  409748:	f851 2b04 	ldr.w	r2, [r1], #4
  40974c:	458e      	cmp	lr, r1
  40974e:	fa22 f20c 	lsr.w	r2, r2, ip
  409752:	d8f3      	bhi.n	40973c <__lshift+0x5c>
  409754:	601a      	str	r2, [r3, #0]
  409756:	b10a      	cbz	r2, 40975c <__lshift+0x7c>
  409758:	f108 0502 	add.w	r5, r8, #2
  40975c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40975e:	6872      	ldr	r2, [r6, #4]
  409760:	3d01      	subs	r5, #1
  409762:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409766:	6105      	str	r5, [r0, #16]
  409768:	6031      	str	r1, [r6, #0]
  40976a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409772:	3b04      	subs	r3, #4
  409774:	f851 2b04 	ldr.w	r2, [r1], #4
  409778:	f843 2f04 	str.w	r2, [r3, #4]!
  40977c:	458e      	cmp	lr, r1
  40977e:	d8f9      	bhi.n	409774 <__lshift+0x94>
  409780:	e7ec      	b.n	40975c <__lshift+0x7c>
  409782:	bf00      	nop

00409784 <__mcmp>:
  409784:	b430      	push	{r4, r5}
  409786:	690b      	ldr	r3, [r1, #16]
  409788:	4605      	mov	r5, r0
  40978a:	6900      	ldr	r0, [r0, #16]
  40978c:	1ac0      	subs	r0, r0, r3
  40978e:	d10f      	bne.n	4097b0 <__mcmp+0x2c>
  409790:	009b      	lsls	r3, r3, #2
  409792:	3514      	adds	r5, #20
  409794:	3114      	adds	r1, #20
  409796:	4419      	add	r1, r3
  409798:	442b      	add	r3, r5
  40979a:	e001      	b.n	4097a0 <__mcmp+0x1c>
  40979c:	429d      	cmp	r5, r3
  40979e:	d207      	bcs.n	4097b0 <__mcmp+0x2c>
  4097a0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4097a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4097a8:	4294      	cmp	r4, r2
  4097aa:	d0f7      	beq.n	40979c <__mcmp+0x18>
  4097ac:	d302      	bcc.n	4097b4 <__mcmp+0x30>
  4097ae:	2001      	movs	r0, #1
  4097b0:	bc30      	pop	{r4, r5}
  4097b2:	4770      	bx	lr
  4097b4:	f04f 30ff 	mov.w	r0, #4294967295
  4097b8:	e7fa      	b.n	4097b0 <__mcmp+0x2c>
  4097ba:	bf00      	nop

004097bc <__mdiff>:
  4097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4097c0:	690f      	ldr	r7, [r1, #16]
  4097c2:	460e      	mov	r6, r1
  4097c4:	6911      	ldr	r1, [r2, #16]
  4097c6:	1a7f      	subs	r7, r7, r1
  4097c8:	2f00      	cmp	r7, #0
  4097ca:	4690      	mov	r8, r2
  4097cc:	d117      	bne.n	4097fe <__mdiff+0x42>
  4097ce:	0089      	lsls	r1, r1, #2
  4097d0:	f106 0514 	add.w	r5, r6, #20
  4097d4:	f102 0e14 	add.w	lr, r2, #20
  4097d8:	186b      	adds	r3, r5, r1
  4097da:	4471      	add	r1, lr
  4097dc:	e001      	b.n	4097e2 <__mdiff+0x26>
  4097de:	429d      	cmp	r5, r3
  4097e0:	d25c      	bcs.n	40989c <__mdiff+0xe0>
  4097e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4097e6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4097ea:	42a2      	cmp	r2, r4
  4097ec:	d0f7      	beq.n	4097de <__mdiff+0x22>
  4097ee:	d25e      	bcs.n	4098ae <__mdiff+0xf2>
  4097f0:	4633      	mov	r3, r6
  4097f2:	462c      	mov	r4, r5
  4097f4:	4646      	mov	r6, r8
  4097f6:	4675      	mov	r5, lr
  4097f8:	4698      	mov	r8, r3
  4097fa:	2701      	movs	r7, #1
  4097fc:	e005      	b.n	40980a <__mdiff+0x4e>
  4097fe:	db58      	blt.n	4098b2 <__mdiff+0xf6>
  409800:	f106 0514 	add.w	r5, r6, #20
  409804:	f108 0414 	add.w	r4, r8, #20
  409808:	2700      	movs	r7, #0
  40980a:	6871      	ldr	r1, [r6, #4]
  40980c:	f7ff fdbc 	bl	409388 <_Balloc>
  409810:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409814:	6936      	ldr	r6, [r6, #16]
  409816:	60c7      	str	r7, [r0, #12]
  409818:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40981c:	46a6      	mov	lr, r4
  40981e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409822:	f100 0414 	add.w	r4, r0, #20
  409826:	2300      	movs	r3, #0
  409828:	f85e 1b04 	ldr.w	r1, [lr], #4
  40982c:	f855 8b04 	ldr.w	r8, [r5], #4
  409830:	b28a      	uxth	r2, r1
  409832:	fa13 f388 	uxtah	r3, r3, r8
  409836:	0c09      	lsrs	r1, r1, #16
  409838:	1a9a      	subs	r2, r3, r2
  40983a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40983e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409842:	b292      	uxth	r2, r2
  409844:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409848:	45f4      	cmp	ip, lr
  40984a:	f844 2b04 	str.w	r2, [r4], #4
  40984e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409852:	d8e9      	bhi.n	409828 <__mdiff+0x6c>
  409854:	42af      	cmp	r7, r5
  409856:	d917      	bls.n	409888 <__mdiff+0xcc>
  409858:	46a4      	mov	ip, r4
  40985a:	46ae      	mov	lr, r5
  40985c:	f85e 2b04 	ldr.w	r2, [lr], #4
  409860:	fa13 f382 	uxtah	r3, r3, r2
  409864:	1419      	asrs	r1, r3, #16
  409866:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40986a:	b29b      	uxth	r3, r3
  40986c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409870:	4577      	cmp	r7, lr
  409872:	f84c 2b04 	str.w	r2, [ip], #4
  409876:	ea4f 4321 	mov.w	r3, r1, asr #16
  40987a:	d8ef      	bhi.n	40985c <__mdiff+0xa0>
  40987c:	43ed      	mvns	r5, r5
  40987e:	442f      	add	r7, r5
  409880:	f027 0703 	bic.w	r7, r7, #3
  409884:	3704      	adds	r7, #4
  409886:	443c      	add	r4, r7
  409888:	3c04      	subs	r4, #4
  40988a:	b922      	cbnz	r2, 409896 <__mdiff+0xda>
  40988c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409890:	3e01      	subs	r6, #1
  409892:	2b00      	cmp	r3, #0
  409894:	d0fa      	beq.n	40988c <__mdiff+0xd0>
  409896:	6106      	str	r6, [r0, #16]
  409898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40989c:	2100      	movs	r1, #0
  40989e:	f7ff fd73 	bl	409388 <_Balloc>
  4098a2:	2201      	movs	r2, #1
  4098a4:	2300      	movs	r3, #0
  4098a6:	6102      	str	r2, [r0, #16]
  4098a8:	6143      	str	r3, [r0, #20]
  4098aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4098ae:	4674      	mov	r4, lr
  4098b0:	e7ab      	b.n	40980a <__mdiff+0x4e>
  4098b2:	4633      	mov	r3, r6
  4098b4:	f106 0414 	add.w	r4, r6, #20
  4098b8:	f102 0514 	add.w	r5, r2, #20
  4098bc:	4616      	mov	r6, r2
  4098be:	2701      	movs	r7, #1
  4098c0:	4698      	mov	r8, r3
  4098c2:	e7a2      	b.n	40980a <__mdiff+0x4e>

004098c4 <__d2b>:
  4098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4098c8:	b082      	sub	sp, #8
  4098ca:	2101      	movs	r1, #1
  4098cc:	461c      	mov	r4, r3
  4098ce:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4098d2:	4615      	mov	r5, r2
  4098d4:	9e08      	ldr	r6, [sp, #32]
  4098d6:	f7ff fd57 	bl	409388 <_Balloc>
  4098da:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4098de:	4680      	mov	r8, r0
  4098e0:	b10f      	cbz	r7, 4098e6 <__d2b+0x22>
  4098e2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4098e6:	9401      	str	r4, [sp, #4]
  4098e8:	b31d      	cbz	r5, 409932 <__d2b+0x6e>
  4098ea:	a802      	add	r0, sp, #8
  4098ec:	f840 5d08 	str.w	r5, [r0, #-8]!
  4098f0:	f7ff fdda 	bl	4094a8 <__lo0bits>
  4098f4:	2800      	cmp	r0, #0
  4098f6:	d134      	bne.n	409962 <__d2b+0x9e>
  4098f8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4098fc:	f8c8 2014 	str.w	r2, [r8, #20]
  409900:	2b00      	cmp	r3, #0
  409902:	bf0c      	ite	eq
  409904:	2101      	moveq	r1, #1
  409906:	2102      	movne	r1, #2
  409908:	f8c8 3018 	str.w	r3, [r8, #24]
  40990c:	f8c8 1010 	str.w	r1, [r8, #16]
  409910:	b9df      	cbnz	r7, 40994a <__d2b+0x86>
  409912:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409916:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40991a:	6030      	str	r0, [r6, #0]
  40991c:	6918      	ldr	r0, [r3, #16]
  40991e:	f7ff fda3 	bl	409468 <__hi0bits>
  409922:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409924:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409928:	6018      	str	r0, [r3, #0]
  40992a:	4640      	mov	r0, r8
  40992c:	b002      	add	sp, #8
  40992e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409932:	a801      	add	r0, sp, #4
  409934:	f7ff fdb8 	bl	4094a8 <__lo0bits>
  409938:	9b01      	ldr	r3, [sp, #4]
  40993a:	f8c8 3014 	str.w	r3, [r8, #20]
  40993e:	2101      	movs	r1, #1
  409940:	3020      	adds	r0, #32
  409942:	f8c8 1010 	str.w	r1, [r8, #16]
  409946:	2f00      	cmp	r7, #0
  409948:	d0e3      	beq.n	409912 <__d2b+0x4e>
  40994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40994c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409950:	4407      	add	r7, r0
  409952:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409956:	6037      	str	r7, [r6, #0]
  409958:	6018      	str	r0, [r3, #0]
  40995a:	4640      	mov	r0, r8
  40995c:	b002      	add	sp, #8
  40995e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409962:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409966:	f1c0 0220 	rsb	r2, r0, #32
  40996a:	fa03 f202 	lsl.w	r2, r3, r2
  40996e:	430a      	orrs	r2, r1
  409970:	40c3      	lsrs	r3, r0
  409972:	9301      	str	r3, [sp, #4]
  409974:	f8c8 2014 	str.w	r2, [r8, #20]
  409978:	e7c2      	b.n	409900 <__d2b+0x3c>
  40997a:	bf00      	nop

0040997c <_realloc_r>:
  40997c:	2900      	cmp	r1, #0
  40997e:	f000 8095 	beq.w	409aac <_realloc_r+0x130>
  409982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409986:	460d      	mov	r5, r1
  409988:	4616      	mov	r6, r2
  40998a:	b083      	sub	sp, #12
  40998c:	4680      	mov	r8, r0
  40998e:	f106 070b 	add.w	r7, r6, #11
  409992:	f7fa ffc3 	bl	40491c <__malloc_lock>
  409996:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40999a:	2f16      	cmp	r7, #22
  40999c:	f02e 0403 	bic.w	r4, lr, #3
  4099a0:	f1a5 0908 	sub.w	r9, r5, #8
  4099a4:	d83c      	bhi.n	409a20 <_realloc_r+0xa4>
  4099a6:	2210      	movs	r2, #16
  4099a8:	4617      	mov	r7, r2
  4099aa:	42be      	cmp	r6, r7
  4099ac:	d83d      	bhi.n	409a2a <_realloc_r+0xae>
  4099ae:	4294      	cmp	r4, r2
  4099b0:	da43      	bge.n	409a3a <_realloc_r+0xbe>
  4099b2:	4bc4      	ldr	r3, [pc, #784]	; (409cc4 <_realloc_r+0x348>)
  4099b4:	6899      	ldr	r1, [r3, #8]
  4099b6:	eb09 0004 	add.w	r0, r9, r4
  4099ba:	4288      	cmp	r0, r1
  4099bc:	f000 80b4 	beq.w	409b28 <_realloc_r+0x1ac>
  4099c0:	6843      	ldr	r3, [r0, #4]
  4099c2:	f023 0101 	bic.w	r1, r3, #1
  4099c6:	4401      	add	r1, r0
  4099c8:	6849      	ldr	r1, [r1, #4]
  4099ca:	07c9      	lsls	r1, r1, #31
  4099cc:	d54c      	bpl.n	409a68 <_realloc_r+0xec>
  4099ce:	f01e 0f01 	tst.w	lr, #1
  4099d2:	f000 809b 	beq.w	409b0c <_realloc_r+0x190>
  4099d6:	4631      	mov	r1, r6
  4099d8:	4640      	mov	r0, r8
  4099da:	f7fa fc07 	bl	4041ec <_malloc_r>
  4099de:	4606      	mov	r6, r0
  4099e0:	2800      	cmp	r0, #0
  4099e2:	d03a      	beq.n	409a5a <_realloc_r+0xde>
  4099e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4099e8:	f023 0301 	bic.w	r3, r3, #1
  4099ec:	444b      	add	r3, r9
  4099ee:	f1a0 0208 	sub.w	r2, r0, #8
  4099f2:	429a      	cmp	r2, r3
  4099f4:	f000 8121 	beq.w	409c3a <_realloc_r+0x2be>
  4099f8:	1f22      	subs	r2, r4, #4
  4099fa:	2a24      	cmp	r2, #36	; 0x24
  4099fc:	f200 8107 	bhi.w	409c0e <_realloc_r+0x292>
  409a00:	2a13      	cmp	r2, #19
  409a02:	f200 80db 	bhi.w	409bbc <_realloc_r+0x240>
  409a06:	4603      	mov	r3, r0
  409a08:	462a      	mov	r2, r5
  409a0a:	6811      	ldr	r1, [r2, #0]
  409a0c:	6019      	str	r1, [r3, #0]
  409a0e:	6851      	ldr	r1, [r2, #4]
  409a10:	6059      	str	r1, [r3, #4]
  409a12:	6892      	ldr	r2, [r2, #8]
  409a14:	609a      	str	r2, [r3, #8]
  409a16:	4629      	mov	r1, r5
  409a18:	4640      	mov	r0, r8
  409a1a:	f7ff f8e9 	bl	408bf0 <_free_r>
  409a1e:	e01c      	b.n	409a5a <_realloc_r+0xde>
  409a20:	f027 0707 	bic.w	r7, r7, #7
  409a24:	2f00      	cmp	r7, #0
  409a26:	463a      	mov	r2, r7
  409a28:	dabf      	bge.n	4099aa <_realloc_r+0x2e>
  409a2a:	2600      	movs	r6, #0
  409a2c:	230c      	movs	r3, #12
  409a2e:	4630      	mov	r0, r6
  409a30:	f8c8 3000 	str.w	r3, [r8]
  409a34:	b003      	add	sp, #12
  409a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a3a:	462e      	mov	r6, r5
  409a3c:	1be3      	subs	r3, r4, r7
  409a3e:	2b0f      	cmp	r3, #15
  409a40:	d81e      	bhi.n	409a80 <_realloc_r+0x104>
  409a42:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409a46:	f003 0301 	and.w	r3, r3, #1
  409a4a:	4323      	orrs	r3, r4
  409a4c:	444c      	add	r4, r9
  409a4e:	f8c9 3004 	str.w	r3, [r9, #4]
  409a52:	6863      	ldr	r3, [r4, #4]
  409a54:	f043 0301 	orr.w	r3, r3, #1
  409a58:	6063      	str	r3, [r4, #4]
  409a5a:	4640      	mov	r0, r8
  409a5c:	f7fa ff64 	bl	404928 <__malloc_unlock>
  409a60:	4630      	mov	r0, r6
  409a62:	b003      	add	sp, #12
  409a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a68:	f023 0303 	bic.w	r3, r3, #3
  409a6c:	18e1      	adds	r1, r4, r3
  409a6e:	4291      	cmp	r1, r2
  409a70:	db1f      	blt.n	409ab2 <_realloc_r+0x136>
  409a72:	68c3      	ldr	r3, [r0, #12]
  409a74:	6882      	ldr	r2, [r0, #8]
  409a76:	462e      	mov	r6, r5
  409a78:	60d3      	str	r3, [r2, #12]
  409a7a:	460c      	mov	r4, r1
  409a7c:	609a      	str	r2, [r3, #8]
  409a7e:	e7dd      	b.n	409a3c <_realloc_r+0xc0>
  409a80:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409a84:	eb09 0107 	add.w	r1, r9, r7
  409a88:	f002 0201 	and.w	r2, r2, #1
  409a8c:	444c      	add	r4, r9
  409a8e:	f043 0301 	orr.w	r3, r3, #1
  409a92:	4317      	orrs	r7, r2
  409a94:	f8c9 7004 	str.w	r7, [r9, #4]
  409a98:	604b      	str	r3, [r1, #4]
  409a9a:	6863      	ldr	r3, [r4, #4]
  409a9c:	f043 0301 	orr.w	r3, r3, #1
  409aa0:	3108      	adds	r1, #8
  409aa2:	6063      	str	r3, [r4, #4]
  409aa4:	4640      	mov	r0, r8
  409aa6:	f7ff f8a3 	bl	408bf0 <_free_r>
  409aaa:	e7d6      	b.n	409a5a <_realloc_r+0xde>
  409aac:	4611      	mov	r1, r2
  409aae:	f7fa bb9d 	b.w	4041ec <_malloc_r>
  409ab2:	f01e 0f01 	tst.w	lr, #1
  409ab6:	d18e      	bne.n	4099d6 <_realloc_r+0x5a>
  409ab8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409abc:	eba9 0a01 	sub.w	sl, r9, r1
  409ac0:	f8da 1004 	ldr.w	r1, [sl, #4]
  409ac4:	f021 0103 	bic.w	r1, r1, #3
  409ac8:	440b      	add	r3, r1
  409aca:	4423      	add	r3, r4
  409acc:	4293      	cmp	r3, r2
  409ace:	db25      	blt.n	409b1c <_realloc_r+0x1a0>
  409ad0:	68c2      	ldr	r2, [r0, #12]
  409ad2:	6881      	ldr	r1, [r0, #8]
  409ad4:	4656      	mov	r6, sl
  409ad6:	60ca      	str	r2, [r1, #12]
  409ad8:	6091      	str	r1, [r2, #8]
  409ada:	f8da 100c 	ldr.w	r1, [sl, #12]
  409ade:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409ae2:	1f22      	subs	r2, r4, #4
  409ae4:	2a24      	cmp	r2, #36	; 0x24
  409ae6:	60c1      	str	r1, [r0, #12]
  409ae8:	6088      	str	r0, [r1, #8]
  409aea:	f200 8094 	bhi.w	409c16 <_realloc_r+0x29a>
  409aee:	2a13      	cmp	r2, #19
  409af0:	d96f      	bls.n	409bd2 <_realloc_r+0x256>
  409af2:	6829      	ldr	r1, [r5, #0]
  409af4:	f8ca 1008 	str.w	r1, [sl, #8]
  409af8:	6869      	ldr	r1, [r5, #4]
  409afa:	f8ca 100c 	str.w	r1, [sl, #12]
  409afe:	2a1b      	cmp	r2, #27
  409b00:	f200 80a2 	bhi.w	409c48 <_realloc_r+0x2cc>
  409b04:	3508      	adds	r5, #8
  409b06:	f10a 0210 	add.w	r2, sl, #16
  409b0a:	e063      	b.n	409bd4 <_realloc_r+0x258>
  409b0c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409b10:	eba9 0a03 	sub.w	sl, r9, r3
  409b14:	f8da 1004 	ldr.w	r1, [sl, #4]
  409b18:	f021 0103 	bic.w	r1, r1, #3
  409b1c:	1863      	adds	r3, r4, r1
  409b1e:	4293      	cmp	r3, r2
  409b20:	f6ff af59 	blt.w	4099d6 <_realloc_r+0x5a>
  409b24:	4656      	mov	r6, sl
  409b26:	e7d8      	b.n	409ada <_realloc_r+0x15e>
  409b28:	6841      	ldr	r1, [r0, #4]
  409b2a:	f021 0b03 	bic.w	fp, r1, #3
  409b2e:	44a3      	add	fp, r4
  409b30:	f107 0010 	add.w	r0, r7, #16
  409b34:	4583      	cmp	fp, r0
  409b36:	da56      	bge.n	409be6 <_realloc_r+0x26a>
  409b38:	f01e 0f01 	tst.w	lr, #1
  409b3c:	f47f af4b 	bne.w	4099d6 <_realloc_r+0x5a>
  409b40:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409b44:	eba9 0a01 	sub.w	sl, r9, r1
  409b48:	f8da 1004 	ldr.w	r1, [sl, #4]
  409b4c:	f021 0103 	bic.w	r1, r1, #3
  409b50:	448b      	add	fp, r1
  409b52:	4558      	cmp	r0, fp
  409b54:	dce2      	bgt.n	409b1c <_realloc_r+0x1a0>
  409b56:	4656      	mov	r6, sl
  409b58:	f8da 100c 	ldr.w	r1, [sl, #12]
  409b5c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409b60:	1f22      	subs	r2, r4, #4
  409b62:	2a24      	cmp	r2, #36	; 0x24
  409b64:	60c1      	str	r1, [r0, #12]
  409b66:	6088      	str	r0, [r1, #8]
  409b68:	f200 808f 	bhi.w	409c8a <_realloc_r+0x30e>
  409b6c:	2a13      	cmp	r2, #19
  409b6e:	f240 808a 	bls.w	409c86 <_realloc_r+0x30a>
  409b72:	6829      	ldr	r1, [r5, #0]
  409b74:	f8ca 1008 	str.w	r1, [sl, #8]
  409b78:	6869      	ldr	r1, [r5, #4]
  409b7a:	f8ca 100c 	str.w	r1, [sl, #12]
  409b7e:	2a1b      	cmp	r2, #27
  409b80:	f200 808a 	bhi.w	409c98 <_realloc_r+0x31c>
  409b84:	3508      	adds	r5, #8
  409b86:	f10a 0210 	add.w	r2, sl, #16
  409b8a:	6829      	ldr	r1, [r5, #0]
  409b8c:	6011      	str	r1, [r2, #0]
  409b8e:	6869      	ldr	r1, [r5, #4]
  409b90:	6051      	str	r1, [r2, #4]
  409b92:	68a9      	ldr	r1, [r5, #8]
  409b94:	6091      	str	r1, [r2, #8]
  409b96:	eb0a 0107 	add.w	r1, sl, r7
  409b9a:	ebab 0207 	sub.w	r2, fp, r7
  409b9e:	f042 0201 	orr.w	r2, r2, #1
  409ba2:	6099      	str	r1, [r3, #8]
  409ba4:	604a      	str	r2, [r1, #4]
  409ba6:	f8da 3004 	ldr.w	r3, [sl, #4]
  409baa:	f003 0301 	and.w	r3, r3, #1
  409bae:	431f      	orrs	r7, r3
  409bb0:	4640      	mov	r0, r8
  409bb2:	f8ca 7004 	str.w	r7, [sl, #4]
  409bb6:	f7fa feb7 	bl	404928 <__malloc_unlock>
  409bba:	e751      	b.n	409a60 <_realloc_r+0xe4>
  409bbc:	682b      	ldr	r3, [r5, #0]
  409bbe:	6003      	str	r3, [r0, #0]
  409bc0:	686b      	ldr	r3, [r5, #4]
  409bc2:	6043      	str	r3, [r0, #4]
  409bc4:	2a1b      	cmp	r2, #27
  409bc6:	d82d      	bhi.n	409c24 <_realloc_r+0x2a8>
  409bc8:	f100 0308 	add.w	r3, r0, #8
  409bcc:	f105 0208 	add.w	r2, r5, #8
  409bd0:	e71b      	b.n	409a0a <_realloc_r+0x8e>
  409bd2:	4632      	mov	r2, r6
  409bd4:	6829      	ldr	r1, [r5, #0]
  409bd6:	6011      	str	r1, [r2, #0]
  409bd8:	6869      	ldr	r1, [r5, #4]
  409bda:	6051      	str	r1, [r2, #4]
  409bdc:	68a9      	ldr	r1, [r5, #8]
  409bde:	6091      	str	r1, [r2, #8]
  409be0:	461c      	mov	r4, r3
  409be2:	46d1      	mov	r9, sl
  409be4:	e72a      	b.n	409a3c <_realloc_r+0xc0>
  409be6:	eb09 0107 	add.w	r1, r9, r7
  409bea:	ebab 0b07 	sub.w	fp, fp, r7
  409bee:	f04b 0201 	orr.w	r2, fp, #1
  409bf2:	6099      	str	r1, [r3, #8]
  409bf4:	604a      	str	r2, [r1, #4]
  409bf6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409bfa:	f003 0301 	and.w	r3, r3, #1
  409bfe:	431f      	orrs	r7, r3
  409c00:	4640      	mov	r0, r8
  409c02:	f845 7c04 	str.w	r7, [r5, #-4]
  409c06:	f7fa fe8f 	bl	404928 <__malloc_unlock>
  409c0a:	462e      	mov	r6, r5
  409c0c:	e728      	b.n	409a60 <_realloc_r+0xe4>
  409c0e:	4629      	mov	r1, r5
  409c10:	f7ff fb56 	bl	4092c0 <memmove>
  409c14:	e6ff      	b.n	409a16 <_realloc_r+0x9a>
  409c16:	4629      	mov	r1, r5
  409c18:	4630      	mov	r0, r6
  409c1a:	461c      	mov	r4, r3
  409c1c:	46d1      	mov	r9, sl
  409c1e:	f7ff fb4f 	bl	4092c0 <memmove>
  409c22:	e70b      	b.n	409a3c <_realloc_r+0xc0>
  409c24:	68ab      	ldr	r3, [r5, #8]
  409c26:	6083      	str	r3, [r0, #8]
  409c28:	68eb      	ldr	r3, [r5, #12]
  409c2a:	60c3      	str	r3, [r0, #12]
  409c2c:	2a24      	cmp	r2, #36	; 0x24
  409c2e:	d017      	beq.n	409c60 <_realloc_r+0x2e4>
  409c30:	f100 0310 	add.w	r3, r0, #16
  409c34:	f105 0210 	add.w	r2, r5, #16
  409c38:	e6e7      	b.n	409a0a <_realloc_r+0x8e>
  409c3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409c3e:	f023 0303 	bic.w	r3, r3, #3
  409c42:	441c      	add	r4, r3
  409c44:	462e      	mov	r6, r5
  409c46:	e6f9      	b.n	409a3c <_realloc_r+0xc0>
  409c48:	68a9      	ldr	r1, [r5, #8]
  409c4a:	f8ca 1010 	str.w	r1, [sl, #16]
  409c4e:	68e9      	ldr	r1, [r5, #12]
  409c50:	f8ca 1014 	str.w	r1, [sl, #20]
  409c54:	2a24      	cmp	r2, #36	; 0x24
  409c56:	d00c      	beq.n	409c72 <_realloc_r+0x2f6>
  409c58:	3510      	adds	r5, #16
  409c5a:	f10a 0218 	add.w	r2, sl, #24
  409c5e:	e7b9      	b.n	409bd4 <_realloc_r+0x258>
  409c60:	692b      	ldr	r3, [r5, #16]
  409c62:	6103      	str	r3, [r0, #16]
  409c64:	696b      	ldr	r3, [r5, #20]
  409c66:	6143      	str	r3, [r0, #20]
  409c68:	f105 0218 	add.w	r2, r5, #24
  409c6c:	f100 0318 	add.w	r3, r0, #24
  409c70:	e6cb      	b.n	409a0a <_realloc_r+0x8e>
  409c72:	692a      	ldr	r2, [r5, #16]
  409c74:	f8ca 2018 	str.w	r2, [sl, #24]
  409c78:	696a      	ldr	r2, [r5, #20]
  409c7a:	f8ca 201c 	str.w	r2, [sl, #28]
  409c7e:	3518      	adds	r5, #24
  409c80:	f10a 0220 	add.w	r2, sl, #32
  409c84:	e7a6      	b.n	409bd4 <_realloc_r+0x258>
  409c86:	4632      	mov	r2, r6
  409c88:	e77f      	b.n	409b8a <_realloc_r+0x20e>
  409c8a:	4629      	mov	r1, r5
  409c8c:	4630      	mov	r0, r6
  409c8e:	9301      	str	r3, [sp, #4]
  409c90:	f7ff fb16 	bl	4092c0 <memmove>
  409c94:	9b01      	ldr	r3, [sp, #4]
  409c96:	e77e      	b.n	409b96 <_realloc_r+0x21a>
  409c98:	68a9      	ldr	r1, [r5, #8]
  409c9a:	f8ca 1010 	str.w	r1, [sl, #16]
  409c9e:	68e9      	ldr	r1, [r5, #12]
  409ca0:	f8ca 1014 	str.w	r1, [sl, #20]
  409ca4:	2a24      	cmp	r2, #36	; 0x24
  409ca6:	d003      	beq.n	409cb0 <_realloc_r+0x334>
  409ca8:	3510      	adds	r5, #16
  409caa:	f10a 0218 	add.w	r2, sl, #24
  409cae:	e76c      	b.n	409b8a <_realloc_r+0x20e>
  409cb0:	692a      	ldr	r2, [r5, #16]
  409cb2:	f8ca 2018 	str.w	r2, [sl, #24]
  409cb6:	696a      	ldr	r2, [r5, #20]
  409cb8:	f8ca 201c 	str.w	r2, [sl, #28]
  409cbc:	3518      	adds	r5, #24
  409cbe:	f10a 0220 	add.w	r2, sl, #32
  409cc2:	e762      	b.n	409b8a <_realloc_r+0x20e>
  409cc4:	20400458 	.word	0x20400458

00409cc8 <__sread>:
  409cc8:	b510      	push	{r4, lr}
  409cca:	460c      	mov	r4, r1
  409ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409cd0:	f000 fb06 	bl	40a2e0 <_read_r>
  409cd4:	2800      	cmp	r0, #0
  409cd6:	db03      	blt.n	409ce0 <__sread+0x18>
  409cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409cda:	4403      	add	r3, r0
  409cdc:	6523      	str	r3, [r4, #80]	; 0x50
  409cde:	bd10      	pop	{r4, pc}
  409ce0:	89a3      	ldrh	r3, [r4, #12]
  409ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409ce6:	81a3      	strh	r3, [r4, #12]
  409ce8:	bd10      	pop	{r4, pc}
  409cea:	bf00      	nop

00409cec <__swrite>:
  409cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cf0:	4616      	mov	r6, r2
  409cf2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409cf6:	461f      	mov	r7, r3
  409cf8:	05d3      	lsls	r3, r2, #23
  409cfa:	460c      	mov	r4, r1
  409cfc:	4605      	mov	r5, r0
  409cfe:	d507      	bpl.n	409d10 <__swrite+0x24>
  409d00:	2200      	movs	r2, #0
  409d02:	2302      	movs	r3, #2
  409d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d08:	f000 fabe 	bl	40a288 <_lseek_r>
  409d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409d18:	81a2      	strh	r2, [r4, #12]
  409d1a:	463b      	mov	r3, r7
  409d1c:	4632      	mov	r2, r6
  409d1e:	4628      	mov	r0, r5
  409d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409d24:	f000 b8dc 	b.w	409ee0 <_write_r>

00409d28 <__sseek>:
  409d28:	b510      	push	{r4, lr}
  409d2a:	460c      	mov	r4, r1
  409d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d30:	f000 faaa 	bl	40a288 <_lseek_r>
  409d34:	89a3      	ldrh	r3, [r4, #12]
  409d36:	1c42      	adds	r2, r0, #1
  409d38:	bf0e      	itee	eq
  409d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409d42:	6520      	strne	r0, [r4, #80]	; 0x50
  409d44:	81a3      	strh	r3, [r4, #12]
  409d46:	bd10      	pop	{r4, pc}

00409d48 <__sclose>:
  409d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d4c:	f000 b970 	b.w	40a030 <_close_r>

00409d50 <__ssprint_r>:
  409d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409d54:	6893      	ldr	r3, [r2, #8]
  409d56:	b083      	sub	sp, #12
  409d58:	4690      	mov	r8, r2
  409d5a:	2b00      	cmp	r3, #0
  409d5c:	d070      	beq.n	409e40 <__ssprint_r+0xf0>
  409d5e:	4682      	mov	sl, r0
  409d60:	460c      	mov	r4, r1
  409d62:	6817      	ldr	r7, [r2, #0]
  409d64:	688d      	ldr	r5, [r1, #8]
  409d66:	6808      	ldr	r0, [r1, #0]
  409d68:	e042      	b.n	409df0 <__ssprint_r+0xa0>
  409d6a:	89a3      	ldrh	r3, [r4, #12]
  409d6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409d70:	d02e      	beq.n	409dd0 <__ssprint_r+0x80>
  409d72:	6965      	ldr	r5, [r4, #20]
  409d74:	6921      	ldr	r1, [r4, #16]
  409d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409d7a:	eba0 0b01 	sub.w	fp, r0, r1
  409d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409d82:	f10b 0001 	add.w	r0, fp, #1
  409d86:	106d      	asrs	r5, r5, #1
  409d88:	4430      	add	r0, r6
  409d8a:	42a8      	cmp	r0, r5
  409d8c:	462a      	mov	r2, r5
  409d8e:	bf84      	itt	hi
  409d90:	4605      	movhi	r5, r0
  409d92:	462a      	movhi	r2, r5
  409d94:	055b      	lsls	r3, r3, #21
  409d96:	d538      	bpl.n	409e0a <__ssprint_r+0xba>
  409d98:	4611      	mov	r1, r2
  409d9a:	4650      	mov	r0, sl
  409d9c:	f7fa fa26 	bl	4041ec <_malloc_r>
  409da0:	2800      	cmp	r0, #0
  409da2:	d03c      	beq.n	409e1e <__ssprint_r+0xce>
  409da4:	465a      	mov	r2, fp
  409da6:	6921      	ldr	r1, [r4, #16]
  409da8:	9001      	str	r0, [sp, #4]
  409daa:	f7fa fccf 	bl	40474c <memcpy>
  409dae:	89a2      	ldrh	r2, [r4, #12]
  409db0:	9b01      	ldr	r3, [sp, #4]
  409db2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409dba:	81a2      	strh	r2, [r4, #12]
  409dbc:	eba5 020b 	sub.w	r2, r5, fp
  409dc0:	eb03 000b 	add.w	r0, r3, fp
  409dc4:	6165      	str	r5, [r4, #20]
  409dc6:	6123      	str	r3, [r4, #16]
  409dc8:	6020      	str	r0, [r4, #0]
  409dca:	60a2      	str	r2, [r4, #8]
  409dcc:	4635      	mov	r5, r6
  409dce:	46b3      	mov	fp, r6
  409dd0:	465a      	mov	r2, fp
  409dd2:	4649      	mov	r1, r9
  409dd4:	f7ff fa74 	bl	4092c0 <memmove>
  409dd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409ddc:	68a2      	ldr	r2, [r4, #8]
  409dde:	6820      	ldr	r0, [r4, #0]
  409de0:	1b55      	subs	r5, r2, r5
  409de2:	4458      	add	r0, fp
  409de4:	1b9e      	subs	r6, r3, r6
  409de6:	60a5      	str	r5, [r4, #8]
  409de8:	6020      	str	r0, [r4, #0]
  409dea:	f8c8 6008 	str.w	r6, [r8, #8]
  409dee:	b33e      	cbz	r6, 409e40 <__ssprint_r+0xf0>
  409df0:	687e      	ldr	r6, [r7, #4]
  409df2:	463b      	mov	r3, r7
  409df4:	3708      	adds	r7, #8
  409df6:	2e00      	cmp	r6, #0
  409df8:	d0fa      	beq.n	409df0 <__ssprint_r+0xa0>
  409dfa:	42ae      	cmp	r6, r5
  409dfc:	f8d3 9000 	ldr.w	r9, [r3]
  409e00:	46ab      	mov	fp, r5
  409e02:	d2b2      	bcs.n	409d6a <__ssprint_r+0x1a>
  409e04:	4635      	mov	r5, r6
  409e06:	46b3      	mov	fp, r6
  409e08:	e7e2      	b.n	409dd0 <__ssprint_r+0x80>
  409e0a:	4650      	mov	r0, sl
  409e0c:	f7ff fdb6 	bl	40997c <_realloc_r>
  409e10:	4603      	mov	r3, r0
  409e12:	2800      	cmp	r0, #0
  409e14:	d1d2      	bne.n	409dbc <__ssprint_r+0x6c>
  409e16:	6921      	ldr	r1, [r4, #16]
  409e18:	4650      	mov	r0, sl
  409e1a:	f7fe fee9 	bl	408bf0 <_free_r>
  409e1e:	230c      	movs	r3, #12
  409e20:	f8ca 3000 	str.w	r3, [sl]
  409e24:	89a3      	ldrh	r3, [r4, #12]
  409e26:	2200      	movs	r2, #0
  409e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e2c:	f04f 30ff 	mov.w	r0, #4294967295
  409e30:	81a3      	strh	r3, [r4, #12]
  409e32:	f8c8 2008 	str.w	r2, [r8, #8]
  409e36:	f8c8 2004 	str.w	r2, [r8, #4]
  409e3a:	b003      	add	sp, #12
  409e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e40:	2000      	movs	r0, #0
  409e42:	f8c8 0004 	str.w	r0, [r8, #4]
  409e46:	b003      	add	sp, #12
  409e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409e4c <__sprint_r.part.0>:
  409e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  409e52:	049c      	lsls	r4, r3, #18
  409e54:	4693      	mov	fp, r2
  409e56:	d52f      	bpl.n	409eb8 <__sprint_r.part.0+0x6c>
  409e58:	6893      	ldr	r3, [r2, #8]
  409e5a:	6812      	ldr	r2, [r2, #0]
  409e5c:	b353      	cbz	r3, 409eb4 <__sprint_r.part.0+0x68>
  409e5e:	460e      	mov	r6, r1
  409e60:	4607      	mov	r7, r0
  409e62:	f102 0908 	add.w	r9, r2, #8
  409e66:	e919 0420 	ldmdb	r9, {r5, sl}
  409e6a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  409e6e:	d017      	beq.n	409ea0 <__sprint_r.part.0+0x54>
  409e70:	3d04      	subs	r5, #4
  409e72:	2400      	movs	r4, #0
  409e74:	e001      	b.n	409e7a <__sprint_r.part.0+0x2e>
  409e76:	45a0      	cmp	r8, r4
  409e78:	d010      	beq.n	409e9c <__sprint_r.part.0+0x50>
  409e7a:	4632      	mov	r2, r6
  409e7c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  409e80:	4638      	mov	r0, r7
  409e82:	f000 f999 	bl	40a1b8 <_fputwc_r>
  409e86:	1c43      	adds	r3, r0, #1
  409e88:	f104 0401 	add.w	r4, r4, #1
  409e8c:	d1f3      	bne.n	409e76 <__sprint_r.part.0+0x2a>
  409e8e:	2300      	movs	r3, #0
  409e90:	f8cb 3008 	str.w	r3, [fp, #8]
  409e94:	f8cb 3004 	str.w	r3, [fp, #4]
  409e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e9c:	f8db 3008 	ldr.w	r3, [fp, #8]
  409ea0:	f02a 0a03 	bic.w	sl, sl, #3
  409ea4:	eba3 030a 	sub.w	r3, r3, sl
  409ea8:	f8cb 3008 	str.w	r3, [fp, #8]
  409eac:	f109 0908 	add.w	r9, r9, #8
  409eb0:	2b00      	cmp	r3, #0
  409eb2:	d1d8      	bne.n	409e66 <__sprint_r.part.0+0x1a>
  409eb4:	2000      	movs	r0, #0
  409eb6:	e7ea      	b.n	409e8e <__sprint_r.part.0+0x42>
  409eb8:	f7fe ff80 	bl	408dbc <__sfvwrite_r>
  409ebc:	2300      	movs	r3, #0
  409ebe:	f8cb 3008 	str.w	r3, [fp, #8]
  409ec2:	f8cb 3004 	str.w	r3, [fp, #4]
  409ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409eca:	bf00      	nop

00409ecc <__sprint_r>:
  409ecc:	6893      	ldr	r3, [r2, #8]
  409ece:	b10b      	cbz	r3, 409ed4 <__sprint_r+0x8>
  409ed0:	f7ff bfbc 	b.w	409e4c <__sprint_r.part.0>
  409ed4:	b410      	push	{r4}
  409ed6:	4618      	mov	r0, r3
  409ed8:	6053      	str	r3, [r2, #4]
  409eda:	bc10      	pop	{r4}
  409edc:	4770      	bx	lr
  409ede:	bf00      	nop

00409ee0 <_write_r>:
  409ee0:	b570      	push	{r4, r5, r6, lr}
  409ee2:	460d      	mov	r5, r1
  409ee4:	4c08      	ldr	r4, [pc, #32]	; (409f08 <_write_r+0x28>)
  409ee6:	4611      	mov	r1, r2
  409ee8:	4606      	mov	r6, r0
  409eea:	461a      	mov	r2, r3
  409eec:	4628      	mov	r0, r5
  409eee:	2300      	movs	r3, #0
  409ef0:	6023      	str	r3, [r4, #0]
  409ef2:	f7f6 febb 	bl	400c6c <_write>
  409ef6:	1c43      	adds	r3, r0, #1
  409ef8:	d000      	beq.n	409efc <_write_r+0x1c>
  409efa:	bd70      	pop	{r4, r5, r6, pc}
  409efc:	6823      	ldr	r3, [r4, #0]
  409efe:	2b00      	cmp	r3, #0
  409f00:	d0fb      	beq.n	409efa <_write_r+0x1a>
  409f02:	6033      	str	r3, [r6, #0]
  409f04:	bd70      	pop	{r4, r5, r6, pc}
  409f06:	bf00      	nop
  409f08:	20400e90 	.word	0x20400e90

00409f0c <__register_exitproc>:
  409f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409f10:	4d2c      	ldr	r5, [pc, #176]	; (409fc4 <__register_exitproc+0xb8>)
  409f12:	4606      	mov	r6, r0
  409f14:	6828      	ldr	r0, [r5, #0]
  409f16:	4698      	mov	r8, r3
  409f18:	460f      	mov	r7, r1
  409f1a:	4691      	mov	r9, r2
  409f1c:	f7ff f902 	bl	409124 <__retarget_lock_acquire_recursive>
  409f20:	4b29      	ldr	r3, [pc, #164]	; (409fc8 <__register_exitproc+0xbc>)
  409f22:	681c      	ldr	r4, [r3, #0]
  409f24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409f28:	2b00      	cmp	r3, #0
  409f2a:	d03e      	beq.n	409faa <__register_exitproc+0x9e>
  409f2c:	685a      	ldr	r2, [r3, #4]
  409f2e:	2a1f      	cmp	r2, #31
  409f30:	dc1c      	bgt.n	409f6c <__register_exitproc+0x60>
  409f32:	f102 0e01 	add.w	lr, r2, #1
  409f36:	b176      	cbz	r6, 409f56 <__register_exitproc+0x4a>
  409f38:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409f3c:	2401      	movs	r4, #1
  409f3e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409f42:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409f46:	4094      	lsls	r4, r2
  409f48:	4320      	orrs	r0, r4
  409f4a:	2e02      	cmp	r6, #2
  409f4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409f50:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409f54:	d023      	beq.n	409f9e <__register_exitproc+0x92>
  409f56:	3202      	adds	r2, #2
  409f58:	f8c3 e004 	str.w	lr, [r3, #4]
  409f5c:	6828      	ldr	r0, [r5, #0]
  409f5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409f62:	f7ff f8e1 	bl	409128 <__retarget_lock_release_recursive>
  409f66:	2000      	movs	r0, #0
  409f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409f6c:	4b17      	ldr	r3, [pc, #92]	; (409fcc <__register_exitproc+0xc0>)
  409f6e:	b30b      	cbz	r3, 409fb4 <__register_exitproc+0xa8>
  409f70:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409f74:	f7fa f92a 	bl	4041cc <malloc>
  409f78:	4603      	mov	r3, r0
  409f7a:	b1d8      	cbz	r0, 409fb4 <__register_exitproc+0xa8>
  409f7c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409f80:	6002      	str	r2, [r0, #0]
  409f82:	2100      	movs	r1, #0
  409f84:	6041      	str	r1, [r0, #4]
  409f86:	460a      	mov	r2, r1
  409f88:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409f8c:	f04f 0e01 	mov.w	lr, #1
  409f90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409f94:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409f98:	2e00      	cmp	r6, #0
  409f9a:	d0dc      	beq.n	409f56 <__register_exitproc+0x4a>
  409f9c:	e7cc      	b.n	409f38 <__register_exitproc+0x2c>
  409f9e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409fa2:	430c      	orrs	r4, r1
  409fa4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409fa8:	e7d5      	b.n	409f56 <__register_exitproc+0x4a>
  409faa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409fae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409fb2:	e7bb      	b.n	409f2c <__register_exitproc+0x20>
  409fb4:	6828      	ldr	r0, [r5, #0]
  409fb6:	f7ff f8b7 	bl	409128 <__retarget_lock_release_recursive>
  409fba:	f04f 30ff 	mov.w	r0, #4294967295
  409fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409fc2:	bf00      	nop
  409fc4:	20400868 	.word	0x20400868
  409fc8:	0040b454 	.word	0x0040b454
  409fcc:	004041cd 	.word	0x004041cd

00409fd0 <_calloc_r>:
  409fd0:	b510      	push	{r4, lr}
  409fd2:	fb02 f101 	mul.w	r1, r2, r1
  409fd6:	f7fa f909 	bl	4041ec <_malloc_r>
  409fda:	4604      	mov	r4, r0
  409fdc:	b1d8      	cbz	r0, 40a016 <_calloc_r+0x46>
  409fde:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409fe2:	f022 0203 	bic.w	r2, r2, #3
  409fe6:	3a04      	subs	r2, #4
  409fe8:	2a24      	cmp	r2, #36	; 0x24
  409fea:	d818      	bhi.n	40a01e <_calloc_r+0x4e>
  409fec:	2a13      	cmp	r2, #19
  409fee:	d914      	bls.n	40a01a <_calloc_r+0x4a>
  409ff0:	2300      	movs	r3, #0
  409ff2:	2a1b      	cmp	r2, #27
  409ff4:	6003      	str	r3, [r0, #0]
  409ff6:	6043      	str	r3, [r0, #4]
  409ff8:	d916      	bls.n	40a028 <_calloc_r+0x58>
  409ffa:	2a24      	cmp	r2, #36	; 0x24
  409ffc:	6083      	str	r3, [r0, #8]
  409ffe:	60c3      	str	r3, [r0, #12]
  40a000:	bf11      	iteee	ne
  40a002:	f100 0210 	addne.w	r2, r0, #16
  40a006:	6103      	streq	r3, [r0, #16]
  40a008:	6143      	streq	r3, [r0, #20]
  40a00a:	f100 0218 	addeq.w	r2, r0, #24
  40a00e:	2300      	movs	r3, #0
  40a010:	6013      	str	r3, [r2, #0]
  40a012:	6053      	str	r3, [r2, #4]
  40a014:	6093      	str	r3, [r2, #8]
  40a016:	4620      	mov	r0, r4
  40a018:	bd10      	pop	{r4, pc}
  40a01a:	4602      	mov	r2, r0
  40a01c:	e7f7      	b.n	40a00e <_calloc_r+0x3e>
  40a01e:	2100      	movs	r1, #0
  40a020:	f7fa fc2e 	bl	404880 <memset>
  40a024:	4620      	mov	r0, r4
  40a026:	bd10      	pop	{r4, pc}
  40a028:	f100 0208 	add.w	r2, r0, #8
  40a02c:	e7ef      	b.n	40a00e <_calloc_r+0x3e>
  40a02e:	bf00      	nop

0040a030 <_close_r>:
  40a030:	b538      	push	{r3, r4, r5, lr}
  40a032:	4c07      	ldr	r4, [pc, #28]	; (40a050 <_close_r+0x20>)
  40a034:	2300      	movs	r3, #0
  40a036:	4605      	mov	r5, r0
  40a038:	4608      	mov	r0, r1
  40a03a:	6023      	str	r3, [r4, #0]
  40a03c:	f7f7 fc8e 	bl	40195c <_close>
  40a040:	1c43      	adds	r3, r0, #1
  40a042:	d000      	beq.n	40a046 <_close_r+0x16>
  40a044:	bd38      	pop	{r3, r4, r5, pc}
  40a046:	6823      	ldr	r3, [r4, #0]
  40a048:	2b00      	cmp	r3, #0
  40a04a:	d0fb      	beq.n	40a044 <_close_r+0x14>
  40a04c:	602b      	str	r3, [r5, #0]
  40a04e:	bd38      	pop	{r3, r4, r5, pc}
  40a050:	20400e90 	.word	0x20400e90

0040a054 <_fclose_r>:
  40a054:	b570      	push	{r4, r5, r6, lr}
  40a056:	b159      	cbz	r1, 40a070 <_fclose_r+0x1c>
  40a058:	4605      	mov	r5, r0
  40a05a:	460c      	mov	r4, r1
  40a05c:	b110      	cbz	r0, 40a064 <_fclose_r+0x10>
  40a05e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a060:	2b00      	cmp	r3, #0
  40a062:	d03c      	beq.n	40a0de <_fclose_r+0x8a>
  40a064:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a066:	07d8      	lsls	r0, r3, #31
  40a068:	d505      	bpl.n	40a076 <_fclose_r+0x22>
  40a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a06e:	b92b      	cbnz	r3, 40a07c <_fclose_r+0x28>
  40a070:	2600      	movs	r6, #0
  40a072:	4630      	mov	r0, r6
  40a074:	bd70      	pop	{r4, r5, r6, pc}
  40a076:	89a3      	ldrh	r3, [r4, #12]
  40a078:	0599      	lsls	r1, r3, #22
  40a07a:	d53c      	bpl.n	40a0f6 <_fclose_r+0xa2>
  40a07c:	4621      	mov	r1, r4
  40a07e:	4628      	mov	r0, r5
  40a080:	f7fe fc1c 	bl	4088bc <__sflush_r>
  40a084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a086:	4606      	mov	r6, r0
  40a088:	b133      	cbz	r3, 40a098 <_fclose_r+0x44>
  40a08a:	69e1      	ldr	r1, [r4, #28]
  40a08c:	4628      	mov	r0, r5
  40a08e:	4798      	blx	r3
  40a090:	2800      	cmp	r0, #0
  40a092:	bfb8      	it	lt
  40a094:	f04f 36ff 	movlt.w	r6, #4294967295
  40a098:	89a3      	ldrh	r3, [r4, #12]
  40a09a:	061a      	lsls	r2, r3, #24
  40a09c:	d422      	bmi.n	40a0e4 <_fclose_r+0x90>
  40a09e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a0a0:	b141      	cbz	r1, 40a0b4 <_fclose_r+0x60>
  40a0a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a0a6:	4299      	cmp	r1, r3
  40a0a8:	d002      	beq.n	40a0b0 <_fclose_r+0x5c>
  40a0aa:	4628      	mov	r0, r5
  40a0ac:	f7fe fda0 	bl	408bf0 <_free_r>
  40a0b0:	2300      	movs	r3, #0
  40a0b2:	6323      	str	r3, [r4, #48]	; 0x30
  40a0b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a0b6:	b121      	cbz	r1, 40a0c2 <_fclose_r+0x6e>
  40a0b8:	4628      	mov	r0, r5
  40a0ba:	f7fe fd99 	bl	408bf0 <_free_r>
  40a0be:	2300      	movs	r3, #0
  40a0c0:	6463      	str	r3, [r4, #68]	; 0x44
  40a0c2:	f7fe fd1f 	bl	408b04 <__sfp_lock_acquire>
  40a0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a0c8:	2200      	movs	r2, #0
  40a0ca:	07db      	lsls	r3, r3, #31
  40a0cc:	81a2      	strh	r2, [r4, #12]
  40a0ce:	d50e      	bpl.n	40a0ee <_fclose_r+0x9a>
  40a0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a0d2:	f7ff f825 	bl	409120 <__retarget_lock_close_recursive>
  40a0d6:	f7fe fd1b 	bl	408b10 <__sfp_lock_release>
  40a0da:	4630      	mov	r0, r6
  40a0dc:	bd70      	pop	{r4, r5, r6, pc}
  40a0de:	f7fe fce5 	bl	408aac <__sinit>
  40a0e2:	e7bf      	b.n	40a064 <_fclose_r+0x10>
  40a0e4:	6921      	ldr	r1, [r4, #16]
  40a0e6:	4628      	mov	r0, r5
  40a0e8:	f7fe fd82 	bl	408bf0 <_free_r>
  40a0ec:	e7d7      	b.n	40a09e <_fclose_r+0x4a>
  40a0ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a0f0:	f7ff f81a 	bl	409128 <__retarget_lock_release_recursive>
  40a0f4:	e7ec      	b.n	40a0d0 <_fclose_r+0x7c>
  40a0f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a0f8:	f7ff f814 	bl	409124 <__retarget_lock_acquire_recursive>
  40a0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a100:	2b00      	cmp	r3, #0
  40a102:	d1bb      	bne.n	40a07c <_fclose_r+0x28>
  40a104:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a106:	f016 0601 	ands.w	r6, r6, #1
  40a10a:	d1b1      	bne.n	40a070 <_fclose_r+0x1c>
  40a10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a10e:	f7ff f80b 	bl	409128 <__retarget_lock_release_recursive>
  40a112:	4630      	mov	r0, r6
  40a114:	bd70      	pop	{r4, r5, r6, pc}
  40a116:	bf00      	nop

0040a118 <__fputwc>:
  40a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a11c:	b082      	sub	sp, #8
  40a11e:	4680      	mov	r8, r0
  40a120:	4689      	mov	r9, r1
  40a122:	4614      	mov	r4, r2
  40a124:	f000 f8a2 	bl	40a26c <__locale_mb_cur_max>
  40a128:	2801      	cmp	r0, #1
  40a12a:	d036      	beq.n	40a19a <__fputwc+0x82>
  40a12c:	464a      	mov	r2, r9
  40a12e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a132:	a901      	add	r1, sp, #4
  40a134:	4640      	mov	r0, r8
  40a136:	f000 f941 	bl	40a3bc <_wcrtomb_r>
  40a13a:	1c42      	adds	r2, r0, #1
  40a13c:	4606      	mov	r6, r0
  40a13e:	d025      	beq.n	40a18c <__fputwc+0x74>
  40a140:	b3a8      	cbz	r0, 40a1ae <__fputwc+0x96>
  40a142:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a146:	2500      	movs	r5, #0
  40a148:	f10d 0a04 	add.w	sl, sp, #4
  40a14c:	e009      	b.n	40a162 <__fputwc+0x4a>
  40a14e:	6823      	ldr	r3, [r4, #0]
  40a150:	1c5a      	adds	r2, r3, #1
  40a152:	6022      	str	r2, [r4, #0]
  40a154:	f883 e000 	strb.w	lr, [r3]
  40a158:	3501      	adds	r5, #1
  40a15a:	42b5      	cmp	r5, r6
  40a15c:	d227      	bcs.n	40a1ae <__fputwc+0x96>
  40a15e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a162:	68a3      	ldr	r3, [r4, #8]
  40a164:	3b01      	subs	r3, #1
  40a166:	2b00      	cmp	r3, #0
  40a168:	60a3      	str	r3, [r4, #8]
  40a16a:	daf0      	bge.n	40a14e <__fputwc+0x36>
  40a16c:	69a7      	ldr	r7, [r4, #24]
  40a16e:	42bb      	cmp	r3, r7
  40a170:	4671      	mov	r1, lr
  40a172:	4622      	mov	r2, r4
  40a174:	4640      	mov	r0, r8
  40a176:	db02      	blt.n	40a17e <__fputwc+0x66>
  40a178:	f1be 0f0a 	cmp.w	lr, #10
  40a17c:	d1e7      	bne.n	40a14e <__fputwc+0x36>
  40a17e:	f000 f8c5 	bl	40a30c <__swbuf_r>
  40a182:	1c43      	adds	r3, r0, #1
  40a184:	d1e8      	bne.n	40a158 <__fputwc+0x40>
  40a186:	b002      	add	sp, #8
  40a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a18c:	89a3      	ldrh	r3, [r4, #12]
  40a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a192:	81a3      	strh	r3, [r4, #12]
  40a194:	b002      	add	sp, #8
  40a196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a19a:	f109 33ff 	add.w	r3, r9, #4294967295
  40a19e:	2bfe      	cmp	r3, #254	; 0xfe
  40a1a0:	d8c4      	bhi.n	40a12c <__fputwc+0x14>
  40a1a2:	fa5f fe89 	uxtb.w	lr, r9
  40a1a6:	4606      	mov	r6, r0
  40a1a8:	f88d e004 	strb.w	lr, [sp, #4]
  40a1ac:	e7cb      	b.n	40a146 <__fputwc+0x2e>
  40a1ae:	4648      	mov	r0, r9
  40a1b0:	b002      	add	sp, #8
  40a1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1b6:	bf00      	nop

0040a1b8 <_fputwc_r>:
  40a1b8:	b530      	push	{r4, r5, lr}
  40a1ba:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a1bc:	f013 0f01 	tst.w	r3, #1
  40a1c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a1c4:	4614      	mov	r4, r2
  40a1c6:	b083      	sub	sp, #12
  40a1c8:	4605      	mov	r5, r0
  40a1ca:	b29a      	uxth	r2, r3
  40a1cc:	d101      	bne.n	40a1d2 <_fputwc_r+0x1a>
  40a1ce:	0590      	lsls	r0, r2, #22
  40a1d0:	d51c      	bpl.n	40a20c <_fputwc_r+0x54>
  40a1d2:	0490      	lsls	r0, r2, #18
  40a1d4:	d406      	bmi.n	40a1e4 <_fputwc_r+0x2c>
  40a1d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a1d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a1dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a1e0:	81a3      	strh	r3, [r4, #12]
  40a1e2:	6662      	str	r2, [r4, #100]	; 0x64
  40a1e4:	4628      	mov	r0, r5
  40a1e6:	4622      	mov	r2, r4
  40a1e8:	f7ff ff96 	bl	40a118 <__fputwc>
  40a1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a1ee:	07da      	lsls	r2, r3, #31
  40a1f0:	4605      	mov	r5, r0
  40a1f2:	d402      	bmi.n	40a1fa <_fputwc_r+0x42>
  40a1f4:	89a3      	ldrh	r3, [r4, #12]
  40a1f6:	059b      	lsls	r3, r3, #22
  40a1f8:	d502      	bpl.n	40a200 <_fputwc_r+0x48>
  40a1fa:	4628      	mov	r0, r5
  40a1fc:	b003      	add	sp, #12
  40a1fe:	bd30      	pop	{r4, r5, pc}
  40a200:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a202:	f7fe ff91 	bl	409128 <__retarget_lock_release_recursive>
  40a206:	4628      	mov	r0, r5
  40a208:	b003      	add	sp, #12
  40a20a:	bd30      	pop	{r4, r5, pc}
  40a20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a20e:	9101      	str	r1, [sp, #4]
  40a210:	f7fe ff88 	bl	409124 <__retarget_lock_acquire_recursive>
  40a214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a218:	9901      	ldr	r1, [sp, #4]
  40a21a:	b29a      	uxth	r2, r3
  40a21c:	e7d9      	b.n	40a1d2 <_fputwc_r+0x1a>
  40a21e:	bf00      	nop

0040a220 <_fstat_r>:
  40a220:	b538      	push	{r3, r4, r5, lr}
  40a222:	460b      	mov	r3, r1
  40a224:	4c07      	ldr	r4, [pc, #28]	; (40a244 <_fstat_r+0x24>)
  40a226:	4605      	mov	r5, r0
  40a228:	4611      	mov	r1, r2
  40a22a:	4618      	mov	r0, r3
  40a22c:	2300      	movs	r3, #0
  40a22e:	6023      	str	r3, [r4, #0]
  40a230:	f7f7 fb97 	bl	401962 <_fstat>
  40a234:	1c43      	adds	r3, r0, #1
  40a236:	d000      	beq.n	40a23a <_fstat_r+0x1a>
  40a238:	bd38      	pop	{r3, r4, r5, pc}
  40a23a:	6823      	ldr	r3, [r4, #0]
  40a23c:	2b00      	cmp	r3, #0
  40a23e:	d0fb      	beq.n	40a238 <_fstat_r+0x18>
  40a240:	602b      	str	r3, [r5, #0]
  40a242:	bd38      	pop	{r3, r4, r5, pc}
  40a244:	20400e90 	.word	0x20400e90

0040a248 <_isatty_r>:
  40a248:	b538      	push	{r3, r4, r5, lr}
  40a24a:	4c07      	ldr	r4, [pc, #28]	; (40a268 <_isatty_r+0x20>)
  40a24c:	2300      	movs	r3, #0
  40a24e:	4605      	mov	r5, r0
  40a250:	4608      	mov	r0, r1
  40a252:	6023      	str	r3, [r4, #0]
  40a254:	f7f7 fb8a 	bl	40196c <_isatty>
  40a258:	1c43      	adds	r3, r0, #1
  40a25a:	d000      	beq.n	40a25e <_isatty_r+0x16>
  40a25c:	bd38      	pop	{r3, r4, r5, pc}
  40a25e:	6823      	ldr	r3, [r4, #0]
  40a260:	2b00      	cmp	r3, #0
  40a262:	d0fb      	beq.n	40a25c <_isatty_r+0x14>
  40a264:	602b      	str	r3, [r5, #0]
  40a266:	bd38      	pop	{r3, r4, r5, pc}
  40a268:	20400e90 	.word	0x20400e90

0040a26c <__locale_mb_cur_max>:
  40a26c:	4b04      	ldr	r3, [pc, #16]	; (40a280 <__locale_mb_cur_max+0x14>)
  40a26e:	4a05      	ldr	r2, [pc, #20]	; (40a284 <__locale_mb_cur_max+0x18>)
  40a270:	681b      	ldr	r3, [r3, #0]
  40a272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a274:	2b00      	cmp	r3, #0
  40a276:	bf08      	it	eq
  40a278:	4613      	moveq	r3, r2
  40a27a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a27e:	4770      	bx	lr
  40a280:	20400028 	.word	0x20400028
  40a284:	2040086c 	.word	0x2040086c

0040a288 <_lseek_r>:
  40a288:	b570      	push	{r4, r5, r6, lr}
  40a28a:	460d      	mov	r5, r1
  40a28c:	4c08      	ldr	r4, [pc, #32]	; (40a2b0 <_lseek_r+0x28>)
  40a28e:	4611      	mov	r1, r2
  40a290:	4606      	mov	r6, r0
  40a292:	461a      	mov	r2, r3
  40a294:	4628      	mov	r0, r5
  40a296:	2300      	movs	r3, #0
  40a298:	6023      	str	r3, [r4, #0]
  40a29a:	f7f7 fb69 	bl	401970 <_lseek>
  40a29e:	1c43      	adds	r3, r0, #1
  40a2a0:	d000      	beq.n	40a2a4 <_lseek_r+0x1c>
  40a2a2:	bd70      	pop	{r4, r5, r6, pc}
  40a2a4:	6823      	ldr	r3, [r4, #0]
  40a2a6:	2b00      	cmp	r3, #0
  40a2a8:	d0fb      	beq.n	40a2a2 <_lseek_r+0x1a>
  40a2aa:	6033      	str	r3, [r6, #0]
  40a2ac:	bd70      	pop	{r4, r5, r6, pc}
  40a2ae:	bf00      	nop
  40a2b0:	20400e90 	.word	0x20400e90

0040a2b4 <__ascii_mbtowc>:
  40a2b4:	b082      	sub	sp, #8
  40a2b6:	b149      	cbz	r1, 40a2cc <__ascii_mbtowc+0x18>
  40a2b8:	b15a      	cbz	r2, 40a2d2 <__ascii_mbtowc+0x1e>
  40a2ba:	b16b      	cbz	r3, 40a2d8 <__ascii_mbtowc+0x24>
  40a2bc:	7813      	ldrb	r3, [r2, #0]
  40a2be:	600b      	str	r3, [r1, #0]
  40a2c0:	7812      	ldrb	r2, [r2, #0]
  40a2c2:	1c10      	adds	r0, r2, #0
  40a2c4:	bf18      	it	ne
  40a2c6:	2001      	movne	r0, #1
  40a2c8:	b002      	add	sp, #8
  40a2ca:	4770      	bx	lr
  40a2cc:	a901      	add	r1, sp, #4
  40a2ce:	2a00      	cmp	r2, #0
  40a2d0:	d1f3      	bne.n	40a2ba <__ascii_mbtowc+0x6>
  40a2d2:	4610      	mov	r0, r2
  40a2d4:	b002      	add	sp, #8
  40a2d6:	4770      	bx	lr
  40a2d8:	f06f 0001 	mvn.w	r0, #1
  40a2dc:	e7f4      	b.n	40a2c8 <__ascii_mbtowc+0x14>
  40a2de:	bf00      	nop

0040a2e0 <_read_r>:
  40a2e0:	b570      	push	{r4, r5, r6, lr}
  40a2e2:	460d      	mov	r5, r1
  40a2e4:	4c08      	ldr	r4, [pc, #32]	; (40a308 <_read_r+0x28>)
  40a2e6:	4611      	mov	r1, r2
  40a2e8:	4606      	mov	r6, r0
  40a2ea:	461a      	mov	r2, r3
  40a2ec:	4628      	mov	r0, r5
  40a2ee:	2300      	movs	r3, #0
  40a2f0:	6023      	str	r3, [r4, #0]
  40a2f2:	f7f6 fc9d 	bl	400c30 <_read>
  40a2f6:	1c43      	adds	r3, r0, #1
  40a2f8:	d000      	beq.n	40a2fc <_read_r+0x1c>
  40a2fa:	bd70      	pop	{r4, r5, r6, pc}
  40a2fc:	6823      	ldr	r3, [r4, #0]
  40a2fe:	2b00      	cmp	r3, #0
  40a300:	d0fb      	beq.n	40a2fa <_read_r+0x1a>
  40a302:	6033      	str	r3, [r6, #0]
  40a304:	bd70      	pop	{r4, r5, r6, pc}
  40a306:	bf00      	nop
  40a308:	20400e90 	.word	0x20400e90

0040a30c <__swbuf_r>:
  40a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a30e:	460d      	mov	r5, r1
  40a310:	4614      	mov	r4, r2
  40a312:	4606      	mov	r6, r0
  40a314:	b110      	cbz	r0, 40a31c <__swbuf_r+0x10>
  40a316:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a318:	2b00      	cmp	r3, #0
  40a31a:	d04b      	beq.n	40a3b4 <__swbuf_r+0xa8>
  40a31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a320:	69a3      	ldr	r3, [r4, #24]
  40a322:	60a3      	str	r3, [r4, #8]
  40a324:	b291      	uxth	r1, r2
  40a326:	0708      	lsls	r0, r1, #28
  40a328:	d539      	bpl.n	40a39e <__swbuf_r+0x92>
  40a32a:	6923      	ldr	r3, [r4, #16]
  40a32c:	2b00      	cmp	r3, #0
  40a32e:	d036      	beq.n	40a39e <__swbuf_r+0x92>
  40a330:	b2ed      	uxtb	r5, r5
  40a332:	0489      	lsls	r1, r1, #18
  40a334:	462f      	mov	r7, r5
  40a336:	d515      	bpl.n	40a364 <__swbuf_r+0x58>
  40a338:	6822      	ldr	r2, [r4, #0]
  40a33a:	6961      	ldr	r1, [r4, #20]
  40a33c:	1ad3      	subs	r3, r2, r3
  40a33e:	428b      	cmp	r3, r1
  40a340:	da1c      	bge.n	40a37c <__swbuf_r+0x70>
  40a342:	3301      	adds	r3, #1
  40a344:	68a1      	ldr	r1, [r4, #8]
  40a346:	1c50      	adds	r0, r2, #1
  40a348:	3901      	subs	r1, #1
  40a34a:	60a1      	str	r1, [r4, #8]
  40a34c:	6020      	str	r0, [r4, #0]
  40a34e:	7015      	strb	r5, [r2, #0]
  40a350:	6962      	ldr	r2, [r4, #20]
  40a352:	429a      	cmp	r2, r3
  40a354:	d01a      	beq.n	40a38c <__swbuf_r+0x80>
  40a356:	89a3      	ldrh	r3, [r4, #12]
  40a358:	07db      	lsls	r3, r3, #31
  40a35a:	d501      	bpl.n	40a360 <__swbuf_r+0x54>
  40a35c:	2d0a      	cmp	r5, #10
  40a35e:	d015      	beq.n	40a38c <__swbuf_r+0x80>
  40a360:	4638      	mov	r0, r7
  40a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a364:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a36a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a36e:	81a2      	strh	r2, [r4, #12]
  40a370:	6822      	ldr	r2, [r4, #0]
  40a372:	6661      	str	r1, [r4, #100]	; 0x64
  40a374:	6961      	ldr	r1, [r4, #20]
  40a376:	1ad3      	subs	r3, r2, r3
  40a378:	428b      	cmp	r3, r1
  40a37a:	dbe2      	blt.n	40a342 <__swbuf_r+0x36>
  40a37c:	4621      	mov	r1, r4
  40a37e:	4630      	mov	r0, r6
  40a380:	f7fe fb3c 	bl	4089fc <_fflush_r>
  40a384:	b940      	cbnz	r0, 40a398 <__swbuf_r+0x8c>
  40a386:	6822      	ldr	r2, [r4, #0]
  40a388:	2301      	movs	r3, #1
  40a38a:	e7db      	b.n	40a344 <__swbuf_r+0x38>
  40a38c:	4621      	mov	r1, r4
  40a38e:	4630      	mov	r0, r6
  40a390:	f7fe fb34 	bl	4089fc <_fflush_r>
  40a394:	2800      	cmp	r0, #0
  40a396:	d0e3      	beq.n	40a360 <__swbuf_r+0x54>
  40a398:	f04f 37ff 	mov.w	r7, #4294967295
  40a39c:	e7e0      	b.n	40a360 <__swbuf_r+0x54>
  40a39e:	4621      	mov	r1, r4
  40a3a0:	4630      	mov	r0, r6
  40a3a2:	f7fd fa57 	bl	407854 <__swsetup_r>
  40a3a6:	2800      	cmp	r0, #0
  40a3a8:	d1f6      	bne.n	40a398 <__swbuf_r+0x8c>
  40a3aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a3ae:	6923      	ldr	r3, [r4, #16]
  40a3b0:	b291      	uxth	r1, r2
  40a3b2:	e7bd      	b.n	40a330 <__swbuf_r+0x24>
  40a3b4:	f7fe fb7a 	bl	408aac <__sinit>
  40a3b8:	e7b0      	b.n	40a31c <__swbuf_r+0x10>
  40a3ba:	bf00      	nop

0040a3bc <_wcrtomb_r>:
  40a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a3be:	4606      	mov	r6, r0
  40a3c0:	b085      	sub	sp, #20
  40a3c2:	461f      	mov	r7, r3
  40a3c4:	b189      	cbz	r1, 40a3ea <_wcrtomb_r+0x2e>
  40a3c6:	4c10      	ldr	r4, [pc, #64]	; (40a408 <_wcrtomb_r+0x4c>)
  40a3c8:	4d10      	ldr	r5, [pc, #64]	; (40a40c <_wcrtomb_r+0x50>)
  40a3ca:	6824      	ldr	r4, [r4, #0]
  40a3cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a3ce:	2c00      	cmp	r4, #0
  40a3d0:	bf08      	it	eq
  40a3d2:	462c      	moveq	r4, r5
  40a3d4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a3d8:	47a0      	blx	r4
  40a3da:	1c43      	adds	r3, r0, #1
  40a3dc:	d103      	bne.n	40a3e6 <_wcrtomb_r+0x2a>
  40a3de:	2200      	movs	r2, #0
  40a3e0:	238a      	movs	r3, #138	; 0x8a
  40a3e2:	603a      	str	r2, [r7, #0]
  40a3e4:	6033      	str	r3, [r6, #0]
  40a3e6:	b005      	add	sp, #20
  40a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a3ea:	460c      	mov	r4, r1
  40a3ec:	4906      	ldr	r1, [pc, #24]	; (40a408 <_wcrtomb_r+0x4c>)
  40a3ee:	4a07      	ldr	r2, [pc, #28]	; (40a40c <_wcrtomb_r+0x50>)
  40a3f0:	6809      	ldr	r1, [r1, #0]
  40a3f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a3f4:	2900      	cmp	r1, #0
  40a3f6:	bf08      	it	eq
  40a3f8:	4611      	moveq	r1, r2
  40a3fa:	4622      	mov	r2, r4
  40a3fc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a400:	a901      	add	r1, sp, #4
  40a402:	47a0      	blx	r4
  40a404:	e7e9      	b.n	40a3da <_wcrtomb_r+0x1e>
  40a406:	bf00      	nop
  40a408:	20400028 	.word	0x20400028
  40a40c:	2040086c 	.word	0x2040086c

0040a410 <__ascii_wctomb>:
  40a410:	b121      	cbz	r1, 40a41c <__ascii_wctomb+0xc>
  40a412:	2aff      	cmp	r2, #255	; 0xff
  40a414:	d804      	bhi.n	40a420 <__ascii_wctomb+0x10>
  40a416:	700a      	strb	r2, [r1, #0]
  40a418:	2001      	movs	r0, #1
  40a41a:	4770      	bx	lr
  40a41c:	4608      	mov	r0, r1
  40a41e:	4770      	bx	lr
  40a420:	238a      	movs	r3, #138	; 0x8a
  40a422:	6003      	str	r3, [r0, #0]
  40a424:	f04f 30ff 	mov.w	r0, #4294967295
  40a428:	4770      	bx	lr
  40a42a:	bf00      	nop

0040a42c <__aeabi_drsub>:
  40a42c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a430:	e002      	b.n	40a438 <__adddf3>
  40a432:	bf00      	nop

0040a434 <__aeabi_dsub>:
  40a434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a438 <__adddf3>:
  40a438:	b530      	push	{r4, r5, lr}
  40a43a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a43e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a442:	ea94 0f05 	teq	r4, r5
  40a446:	bf08      	it	eq
  40a448:	ea90 0f02 	teqeq	r0, r2
  40a44c:	bf1f      	itttt	ne
  40a44e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a452:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a45a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a45e:	f000 80e2 	beq.w	40a626 <__adddf3+0x1ee>
  40a462:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a46a:	bfb8      	it	lt
  40a46c:	426d      	neglt	r5, r5
  40a46e:	dd0c      	ble.n	40a48a <__adddf3+0x52>
  40a470:	442c      	add	r4, r5
  40a472:	ea80 0202 	eor.w	r2, r0, r2
  40a476:	ea81 0303 	eor.w	r3, r1, r3
  40a47a:	ea82 0000 	eor.w	r0, r2, r0
  40a47e:	ea83 0101 	eor.w	r1, r3, r1
  40a482:	ea80 0202 	eor.w	r2, r0, r2
  40a486:	ea81 0303 	eor.w	r3, r1, r3
  40a48a:	2d36      	cmp	r5, #54	; 0x36
  40a48c:	bf88      	it	hi
  40a48e:	bd30      	pophi	{r4, r5, pc}
  40a490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a494:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a49c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a4a0:	d002      	beq.n	40a4a8 <__adddf3+0x70>
  40a4a2:	4240      	negs	r0, r0
  40a4a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a4a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a4ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a4b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a4b4:	d002      	beq.n	40a4bc <__adddf3+0x84>
  40a4b6:	4252      	negs	r2, r2
  40a4b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a4bc:	ea94 0f05 	teq	r4, r5
  40a4c0:	f000 80a7 	beq.w	40a612 <__adddf3+0x1da>
  40a4c4:	f1a4 0401 	sub.w	r4, r4, #1
  40a4c8:	f1d5 0e20 	rsbs	lr, r5, #32
  40a4cc:	db0d      	blt.n	40a4ea <__adddf3+0xb2>
  40a4ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a4d2:	fa22 f205 	lsr.w	r2, r2, r5
  40a4d6:	1880      	adds	r0, r0, r2
  40a4d8:	f141 0100 	adc.w	r1, r1, #0
  40a4dc:	fa03 f20e 	lsl.w	r2, r3, lr
  40a4e0:	1880      	adds	r0, r0, r2
  40a4e2:	fa43 f305 	asr.w	r3, r3, r5
  40a4e6:	4159      	adcs	r1, r3
  40a4e8:	e00e      	b.n	40a508 <__adddf3+0xd0>
  40a4ea:	f1a5 0520 	sub.w	r5, r5, #32
  40a4ee:	f10e 0e20 	add.w	lr, lr, #32
  40a4f2:	2a01      	cmp	r2, #1
  40a4f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a4f8:	bf28      	it	cs
  40a4fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a4fe:	fa43 f305 	asr.w	r3, r3, r5
  40a502:	18c0      	adds	r0, r0, r3
  40a504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a50c:	d507      	bpl.n	40a51e <__adddf3+0xe6>
  40a50e:	f04f 0e00 	mov.w	lr, #0
  40a512:	f1dc 0c00 	rsbs	ip, ip, #0
  40a516:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a51a:	eb6e 0101 	sbc.w	r1, lr, r1
  40a51e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a522:	d31b      	bcc.n	40a55c <__adddf3+0x124>
  40a524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a528:	d30c      	bcc.n	40a544 <__adddf3+0x10c>
  40a52a:	0849      	lsrs	r1, r1, #1
  40a52c:	ea5f 0030 	movs.w	r0, r0, rrx
  40a530:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a534:	f104 0401 	add.w	r4, r4, #1
  40a538:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a53c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a540:	f080 809a 	bcs.w	40a678 <__adddf3+0x240>
  40a544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a548:	bf08      	it	eq
  40a54a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a54e:	f150 0000 	adcs.w	r0, r0, #0
  40a552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a556:	ea41 0105 	orr.w	r1, r1, r5
  40a55a:	bd30      	pop	{r4, r5, pc}
  40a55c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a560:	4140      	adcs	r0, r0
  40a562:	eb41 0101 	adc.w	r1, r1, r1
  40a566:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a56a:	f1a4 0401 	sub.w	r4, r4, #1
  40a56e:	d1e9      	bne.n	40a544 <__adddf3+0x10c>
  40a570:	f091 0f00 	teq	r1, #0
  40a574:	bf04      	itt	eq
  40a576:	4601      	moveq	r1, r0
  40a578:	2000      	moveq	r0, #0
  40a57a:	fab1 f381 	clz	r3, r1
  40a57e:	bf08      	it	eq
  40a580:	3320      	addeq	r3, #32
  40a582:	f1a3 030b 	sub.w	r3, r3, #11
  40a586:	f1b3 0220 	subs.w	r2, r3, #32
  40a58a:	da0c      	bge.n	40a5a6 <__adddf3+0x16e>
  40a58c:	320c      	adds	r2, #12
  40a58e:	dd08      	ble.n	40a5a2 <__adddf3+0x16a>
  40a590:	f102 0c14 	add.w	ip, r2, #20
  40a594:	f1c2 020c 	rsb	r2, r2, #12
  40a598:	fa01 f00c 	lsl.w	r0, r1, ip
  40a59c:	fa21 f102 	lsr.w	r1, r1, r2
  40a5a0:	e00c      	b.n	40a5bc <__adddf3+0x184>
  40a5a2:	f102 0214 	add.w	r2, r2, #20
  40a5a6:	bfd8      	it	le
  40a5a8:	f1c2 0c20 	rsble	ip, r2, #32
  40a5ac:	fa01 f102 	lsl.w	r1, r1, r2
  40a5b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a5b4:	bfdc      	itt	le
  40a5b6:	ea41 010c 	orrle.w	r1, r1, ip
  40a5ba:	4090      	lslle	r0, r2
  40a5bc:	1ae4      	subs	r4, r4, r3
  40a5be:	bfa2      	ittt	ge
  40a5c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a5c4:	4329      	orrge	r1, r5
  40a5c6:	bd30      	popge	{r4, r5, pc}
  40a5c8:	ea6f 0404 	mvn.w	r4, r4
  40a5cc:	3c1f      	subs	r4, #31
  40a5ce:	da1c      	bge.n	40a60a <__adddf3+0x1d2>
  40a5d0:	340c      	adds	r4, #12
  40a5d2:	dc0e      	bgt.n	40a5f2 <__adddf3+0x1ba>
  40a5d4:	f104 0414 	add.w	r4, r4, #20
  40a5d8:	f1c4 0220 	rsb	r2, r4, #32
  40a5dc:	fa20 f004 	lsr.w	r0, r0, r4
  40a5e0:	fa01 f302 	lsl.w	r3, r1, r2
  40a5e4:	ea40 0003 	orr.w	r0, r0, r3
  40a5e8:	fa21 f304 	lsr.w	r3, r1, r4
  40a5ec:	ea45 0103 	orr.w	r1, r5, r3
  40a5f0:	bd30      	pop	{r4, r5, pc}
  40a5f2:	f1c4 040c 	rsb	r4, r4, #12
  40a5f6:	f1c4 0220 	rsb	r2, r4, #32
  40a5fa:	fa20 f002 	lsr.w	r0, r0, r2
  40a5fe:	fa01 f304 	lsl.w	r3, r1, r4
  40a602:	ea40 0003 	orr.w	r0, r0, r3
  40a606:	4629      	mov	r1, r5
  40a608:	bd30      	pop	{r4, r5, pc}
  40a60a:	fa21 f004 	lsr.w	r0, r1, r4
  40a60e:	4629      	mov	r1, r5
  40a610:	bd30      	pop	{r4, r5, pc}
  40a612:	f094 0f00 	teq	r4, #0
  40a616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a61a:	bf06      	itte	eq
  40a61c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a620:	3401      	addeq	r4, #1
  40a622:	3d01      	subne	r5, #1
  40a624:	e74e      	b.n	40a4c4 <__adddf3+0x8c>
  40a626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a62a:	bf18      	it	ne
  40a62c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a630:	d029      	beq.n	40a686 <__adddf3+0x24e>
  40a632:	ea94 0f05 	teq	r4, r5
  40a636:	bf08      	it	eq
  40a638:	ea90 0f02 	teqeq	r0, r2
  40a63c:	d005      	beq.n	40a64a <__adddf3+0x212>
  40a63e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a642:	bf04      	itt	eq
  40a644:	4619      	moveq	r1, r3
  40a646:	4610      	moveq	r0, r2
  40a648:	bd30      	pop	{r4, r5, pc}
  40a64a:	ea91 0f03 	teq	r1, r3
  40a64e:	bf1e      	ittt	ne
  40a650:	2100      	movne	r1, #0
  40a652:	2000      	movne	r0, #0
  40a654:	bd30      	popne	{r4, r5, pc}
  40a656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a65a:	d105      	bne.n	40a668 <__adddf3+0x230>
  40a65c:	0040      	lsls	r0, r0, #1
  40a65e:	4149      	adcs	r1, r1
  40a660:	bf28      	it	cs
  40a662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a666:	bd30      	pop	{r4, r5, pc}
  40a668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a66c:	bf3c      	itt	cc
  40a66e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a672:	bd30      	popcc	{r4, r5, pc}
  40a674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a67c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a680:	f04f 0000 	mov.w	r0, #0
  40a684:	bd30      	pop	{r4, r5, pc}
  40a686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a68a:	bf1a      	itte	ne
  40a68c:	4619      	movne	r1, r3
  40a68e:	4610      	movne	r0, r2
  40a690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a694:	bf1c      	itt	ne
  40a696:	460b      	movne	r3, r1
  40a698:	4602      	movne	r2, r0
  40a69a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a69e:	bf06      	itte	eq
  40a6a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a6a4:	ea91 0f03 	teqeq	r1, r3
  40a6a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a6ac:	bd30      	pop	{r4, r5, pc}
  40a6ae:	bf00      	nop

0040a6b0 <__aeabi_ui2d>:
  40a6b0:	f090 0f00 	teq	r0, #0
  40a6b4:	bf04      	itt	eq
  40a6b6:	2100      	moveq	r1, #0
  40a6b8:	4770      	bxeq	lr
  40a6ba:	b530      	push	{r4, r5, lr}
  40a6bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a6c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a6c4:	f04f 0500 	mov.w	r5, #0
  40a6c8:	f04f 0100 	mov.w	r1, #0
  40a6cc:	e750      	b.n	40a570 <__adddf3+0x138>
  40a6ce:	bf00      	nop

0040a6d0 <__aeabi_i2d>:
  40a6d0:	f090 0f00 	teq	r0, #0
  40a6d4:	bf04      	itt	eq
  40a6d6:	2100      	moveq	r1, #0
  40a6d8:	4770      	bxeq	lr
  40a6da:	b530      	push	{r4, r5, lr}
  40a6dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a6e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a6e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a6e8:	bf48      	it	mi
  40a6ea:	4240      	negmi	r0, r0
  40a6ec:	f04f 0100 	mov.w	r1, #0
  40a6f0:	e73e      	b.n	40a570 <__adddf3+0x138>
  40a6f2:	bf00      	nop

0040a6f4 <__aeabi_f2d>:
  40a6f4:	0042      	lsls	r2, r0, #1
  40a6f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a6fa:	ea4f 0131 	mov.w	r1, r1, rrx
  40a6fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a702:	bf1f      	itttt	ne
  40a704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a70c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a710:	4770      	bxne	lr
  40a712:	f092 0f00 	teq	r2, #0
  40a716:	bf14      	ite	ne
  40a718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a71c:	4770      	bxeq	lr
  40a71e:	b530      	push	{r4, r5, lr}
  40a720:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a72c:	e720      	b.n	40a570 <__adddf3+0x138>
  40a72e:	bf00      	nop

0040a730 <__aeabi_ul2d>:
  40a730:	ea50 0201 	orrs.w	r2, r0, r1
  40a734:	bf08      	it	eq
  40a736:	4770      	bxeq	lr
  40a738:	b530      	push	{r4, r5, lr}
  40a73a:	f04f 0500 	mov.w	r5, #0
  40a73e:	e00a      	b.n	40a756 <__aeabi_l2d+0x16>

0040a740 <__aeabi_l2d>:
  40a740:	ea50 0201 	orrs.w	r2, r0, r1
  40a744:	bf08      	it	eq
  40a746:	4770      	bxeq	lr
  40a748:	b530      	push	{r4, r5, lr}
  40a74a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a74e:	d502      	bpl.n	40a756 <__aeabi_l2d+0x16>
  40a750:	4240      	negs	r0, r0
  40a752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a756:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a75a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a75e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a762:	f43f aedc 	beq.w	40a51e <__adddf3+0xe6>
  40a766:	f04f 0203 	mov.w	r2, #3
  40a76a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a76e:	bf18      	it	ne
  40a770:	3203      	addne	r2, #3
  40a772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a776:	bf18      	it	ne
  40a778:	3203      	addne	r2, #3
  40a77a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a77e:	f1c2 0320 	rsb	r3, r2, #32
  40a782:	fa00 fc03 	lsl.w	ip, r0, r3
  40a786:	fa20 f002 	lsr.w	r0, r0, r2
  40a78a:	fa01 fe03 	lsl.w	lr, r1, r3
  40a78e:	ea40 000e 	orr.w	r0, r0, lr
  40a792:	fa21 f102 	lsr.w	r1, r1, r2
  40a796:	4414      	add	r4, r2
  40a798:	e6c1      	b.n	40a51e <__adddf3+0xe6>
  40a79a:	bf00      	nop

0040a79c <__aeabi_dmul>:
  40a79c:	b570      	push	{r4, r5, r6, lr}
  40a79e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a7a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a7a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a7aa:	bf1d      	ittte	ne
  40a7ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a7b0:	ea94 0f0c 	teqne	r4, ip
  40a7b4:	ea95 0f0c 	teqne	r5, ip
  40a7b8:	f000 f8de 	bleq	40a978 <__aeabi_dmul+0x1dc>
  40a7bc:	442c      	add	r4, r5
  40a7be:	ea81 0603 	eor.w	r6, r1, r3
  40a7c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a7c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a7ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a7ce:	bf18      	it	ne
  40a7d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a7d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a7dc:	d038      	beq.n	40a850 <__aeabi_dmul+0xb4>
  40a7de:	fba0 ce02 	umull	ip, lr, r0, r2
  40a7e2:	f04f 0500 	mov.w	r5, #0
  40a7e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a7ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a7ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a7f2:	f04f 0600 	mov.w	r6, #0
  40a7f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a7fa:	f09c 0f00 	teq	ip, #0
  40a7fe:	bf18      	it	ne
  40a800:	f04e 0e01 	orrne.w	lr, lr, #1
  40a804:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a808:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a80c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a810:	d204      	bcs.n	40a81c <__aeabi_dmul+0x80>
  40a812:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a816:	416d      	adcs	r5, r5
  40a818:	eb46 0606 	adc.w	r6, r6, r6
  40a81c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a820:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a824:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a828:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a82c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a830:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a834:	bf88      	it	hi
  40a836:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a83a:	d81e      	bhi.n	40a87a <__aeabi_dmul+0xde>
  40a83c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a840:	bf08      	it	eq
  40a842:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a846:	f150 0000 	adcs.w	r0, r0, #0
  40a84a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a84e:	bd70      	pop	{r4, r5, r6, pc}
  40a850:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a854:	ea46 0101 	orr.w	r1, r6, r1
  40a858:	ea40 0002 	orr.w	r0, r0, r2
  40a85c:	ea81 0103 	eor.w	r1, r1, r3
  40a860:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a864:	bfc2      	ittt	gt
  40a866:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a86e:	bd70      	popgt	{r4, r5, r6, pc}
  40a870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a874:	f04f 0e00 	mov.w	lr, #0
  40a878:	3c01      	subs	r4, #1
  40a87a:	f300 80ab 	bgt.w	40a9d4 <__aeabi_dmul+0x238>
  40a87e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a882:	bfde      	ittt	le
  40a884:	2000      	movle	r0, #0
  40a886:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a88a:	bd70      	pople	{r4, r5, r6, pc}
  40a88c:	f1c4 0400 	rsb	r4, r4, #0
  40a890:	3c20      	subs	r4, #32
  40a892:	da35      	bge.n	40a900 <__aeabi_dmul+0x164>
  40a894:	340c      	adds	r4, #12
  40a896:	dc1b      	bgt.n	40a8d0 <__aeabi_dmul+0x134>
  40a898:	f104 0414 	add.w	r4, r4, #20
  40a89c:	f1c4 0520 	rsb	r5, r4, #32
  40a8a0:	fa00 f305 	lsl.w	r3, r0, r5
  40a8a4:	fa20 f004 	lsr.w	r0, r0, r4
  40a8a8:	fa01 f205 	lsl.w	r2, r1, r5
  40a8ac:	ea40 0002 	orr.w	r0, r0, r2
  40a8b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a8b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a8b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a8bc:	fa21 f604 	lsr.w	r6, r1, r4
  40a8c0:	eb42 0106 	adc.w	r1, r2, r6
  40a8c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a8c8:	bf08      	it	eq
  40a8ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a8ce:	bd70      	pop	{r4, r5, r6, pc}
  40a8d0:	f1c4 040c 	rsb	r4, r4, #12
  40a8d4:	f1c4 0520 	rsb	r5, r4, #32
  40a8d8:	fa00 f304 	lsl.w	r3, r0, r4
  40a8dc:	fa20 f005 	lsr.w	r0, r0, r5
  40a8e0:	fa01 f204 	lsl.w	r2, r1, r4
  40a8e4:	ea40 0002 	orr.w	r0, r0, r2
  40a8e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a8ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a8f0:	f141 0100 	adc.w	r1, r1, #0
  40a8f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a8f8:	bf08      	it	eq
  40a8fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a8fe:	bd70      	pop	{r4, r5, r6, pc}
  40a900:	f1c4 0520 	rsb	r5, r4, #32
  40a904:	fa00 f205 	lsl.w	r2, r0, r5
  40a908:	ea4e 0e02 	orr.w	lr, lr, r2
  40a90c:	fa20 f304 	lsr.w	r3, r0, r4
  40a910:	fa01 f205 	lsl.w	r2, r1, r5
  40a914:	ea43 0302 	orr.w	r3, r3, r2
  40a918:	fa21 f004 	lsr.w	r0, r1, r4
  40a91c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a920:	fa21 f204 	lsr.w	r2, r1, r4
  40a924:	ea20 0002 	bic.w	r0, r0, r2
  40a928:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a92c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a930:	bf08      	it	eq
  40a932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a936:	bd70      	pop	{r4, r5, r6, pc}
  40a938:	f094 0f00 	teq	r4, #0
  40a93c:	d10f      	bne.n	40a95e <__aeabi_dmul+0x1c2>
  40a93e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a942:	0040      	lsls	r0, r0, #1
  40a944:	eb41 0101 	adc.w	r1, r1, r1
  40a948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a94c:	bf08      	it	eq
  40a94e:	3c01      	subeq	r4, #1
  40a950:	d0f7      	beq.n	40a942 <__aeabi_dmul+0x1a6>
  40a952:	ea41 0106 	orr.w	r1, r1, r6
  40a956:	f095 0f00 	teq	r5, #0
  40a95a:	bf18      	it	ne
  40a95c:	4770      	bxne	lr
  40a95e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a962:	0052      	lsls	r2, r2, #1
  40a964:	eb43 0303 	adc.w	r3, r3, r3
  40a968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a96c:	bf08      	it	eq
  40a96e:	3d01      	subeq	r5, #1
  40a970:	d0f7      	beq.n	40a962 <__aeabi_dmul+0x1c6>
  40a972:	ea43 0306 	orr.w	r3, r3, r6
  40a976:	4770      	bx	lr
  40a978:	ea94 0f0c 	teq	r4, ip
  40a97c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a980:	bf18      	it	ne
  40a982:	ea95 0f0c 	teqne	r5, ip
  40a986:	d00c      	beq.n	40a9a2 <__aeabi_dmul+0x206>
  40a988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a98c:	bf18      	it	ne
  40a98e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a992:	d1d1      	bne.n	40a938 <__aeabi_dmul+0x19c>
  40a994:	ea81 0103 	eor.w	r1, r1, r3
  40a998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a99c:	f04f 0000 	mov.w	r0, #0
  40a9a0:	bd70      	pop	{r4, r5, r6, pc}
  40a9a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a9a6:	bf06      	itte	eq
  40a9a8:	4610      	moveq	r0, r2
  40a9aa:	4619      	moveq	r1, r3
  40a9ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a9b0:	d019      	beq.n	40a9e6 <__aeabi_dmul+0x24a>
  40a9b2:	ea94 0f0c 	teq	r4, ip
  40a9b6:	d102      	bne.n	40a9be <__aeabi_dmul+0x222>
  40a9b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a9bc:	d113      	bne.n	40a9e6 <__aeabi_dmul+0x24a>
  40a9be:	ea95 0f0c 	teq	r5, ip
  40a9c2:	d105      	bne.n	40a9d0 <__aeabi_dmul+0x234>
  40a9c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a9c8:	bf1c      	itt	ne
  40a9ca:	4610      	movne	r0, r2
  40a9cc:	4619      	movne	r1, r3
  40a9ce:	d10a      	bne.n	40a9e6 <__aeabi_dmul+0x24a>
  40a9d0:	ea81 0103 	eor.w	r1, r1, r3
  40a9d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a9d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a9dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a9e0:	f04f 0000 	mov.w	r0, #0
  40a9e4:	bd70      	pop	{r4, r5, r6, pc}
  40a9e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a9ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a9ee:	bd70      	pop	{r4, r5, r6, pc}

0040a9f0 <__aeabi_ddiv>:
  40a9f0:	b570      	push	{r4, r5, r6, lr}
  40a9f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a9f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a9fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a9fe:	bf1d      	ittte	ne
  40aa00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40aa04:	ea94 0f0c 	teqne	r4, ip
  40aa08:	ea95 0f0c 	teqne	r5, ip
  40aa0c:	f000 f8a7 	bleq	40ab5e <__aeabi_ddiv+0x16e>
  40aa10:	eba4 0405 	sub.w	r4, r4, r5
  40aa14:	ea81 0e03 	eor.w	lr, r1, r3
  40aa18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40aa1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40aa20:	f000 8088 	beq.w	40ab34 <__aeabi_ddiv+0x144>
  40aa24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40aa28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40aa2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40aa30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40aa34:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40aa38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40aa3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40aa40:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40aa44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40aa48:	429d      	cmp	r5, r3
  40aa4a:	bf08      	it	eq
  40aa4c:	4296      	cmpeq	r6, r2
  40aa4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40aa52:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40aa56:	d202      	bcs.n	40aa5e <__aeabi_ddiv+0x6e>
  40aa58:	085b      	lsrs	r3, r3, #1
  40aa5a:	ea4f 0232 	mov.w	r2, r2, rrx
  40aa5e:	1ab6      	subs	r6, r6, r2
  40aa60:	eb65 0503 	sbc.w	r5, r5, r3
  40aa64:	085b      	lsrs	r3, r3, #1
  40aa66:	ea4f 0232 	mov.w	r2, r2, rrx
  40aa6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40aa6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40aa72:	ebb6 0e02 	subs.w	lr, r6, r2
  40aa76:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aa7a:	bf22      	ittt	cs
  40aa7c:	1ab6      	subcs	r6, r6, r2
  40aa7e:	4675      	movcs	r5, lr
  40aa80:	ea40 000c 	orrcs.w	r0, r0, ip
  40aa84:	085b      	lsrs	r3, r3, #1
  40aa86:	ea4f 0232 	mov.w	r2, r2, rrx
  40aa8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40aa8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aa92:	bf22      	ittt	cs
  40aa94:	1ab6      	subcs	r6, r6, r2
  40aa96:	4675      	movcs	r5, lr
  40aa98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40aa9c:	085b      	lsrs	r3, r3, #1
  40aa9e:	ea4f 0232 	mov.w	r2, r2, rrx
  40aaa2:	ebb6 0e02 	subs.w	lr, r6, r2
  40aaa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aaaa:	bf22      	ittt	cs
  40aaac:	1ab6      	subcs	r6, r6, r2
  40aaae:	4675      	movcs	r5, lr
  40aab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40aab4:	085b      	lsrs	r3, r3, #1
  40aab6:	ea4f 0232 	mov.w	r2, r2, rrx
  40aaba:	ebb6 0e02 	subs.w	lr, r6, r2
  40aabe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aac2:	bf22      	ittt	cs
  40aac4:	1ab6      	subcs	r6, r6, r2
  40aac6:	4675      	movcs	r5, lr
  40aac8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40aacc:	ea55 0e06 	orrs.w	lr, r5, r6
  40aad0:	d018      	beq.n	40ab04 <__aeabi_ddiv+0x114>
  40aad2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40aad6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40aada:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40aade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40aae2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40aae6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40aaea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40aaee:	d1c0      	bne.n	40aa72 <__aeabi_ddiv+0x82>
  40aaf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aaf4:	d10b      	bne.n	40ab0e <__aeabi_ddiv+0x11e>
  40aaf6:	ea41 0100 	orr.w	r1, r1, r0
  40aafa:	f04f 0000 	mov.w	r0, #0
  40aafe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ab02:	e7b6      	b.n	40aa72 <__aeabi_ddiv+0x82>
  40ab04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ab08:	bf04      	itt	eq
  40ab0a:	4301      	orreq	r1, r0
  40ab0c:	2000      	moveq	r0, #0
  40ab0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ab12:	bf88      	it	hi
  40ab14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ab18:	f63f aeaf 	bhi.w	40a87a <__aeabi_dmul+0xde>
  40ab1c:	ebb5 0c03 	subs.w	ip, r5, r3
  40ab20:	bf04      	itt	eq
  40ab22:	ebb6 0c02 	subseq.w	ip, r6, r2
  40ab26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ab2a:	f150 0000 	adcs.w	r0, r0, #0
  40ab2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ab32:	bd70      	pop	{r4, r5, r6, pc}
  40ab34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ab38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ab3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40ab40:	bfc2      	ittt	gt
  40ab42:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ab46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ab4a:	bd70      	popgt	{r4, r5, r6, pc}
  40ab4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ab50:	f04f 0e00 	mov.w	lr, #0
  40ab54:	3c01      	subs	r4, #1
  40ab56:	e690      	b.n	40a87a <__aeabi_dmul+0xde>
  40ab58:	ea45 0e06 	orr.w	lr, r5, r6
  40ab5c:	e68d      	b.n	40a87a <__aeabi_dmul+0xde>
  40ab5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ab62:	ea94 0f0c 	teq	r4, ip
  40ab66:	bf08      	it	eq
  40ab68:	ea95 0f0c 	teqeq	r5, ip
  40ab6c:	f43f af3b 	beq.w	40a9e6 <__aeabi_dmul+0x24a>
  40ab70:	ea94 0f0c 	teq	r4, ip
  40ab74:	d10a      	bne.n	40ab8c <__aeabi_ddiv+0x19c>
  40ab76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ab7a:	f47f af34 	bne.w	40a9e6 <__aeabi_dmul+0x24a>
  40ab7e:	ea95 0f0c 	teq	r5, ip
  40ab82:	f47f af25 	bne.w	40a9d0 <__aeabi_dmul+0x234>
  40ab86:	4610      	mov	r0, r2
  40ab88:	4619      	mov	r1, r3
  40ab8a:	e72c      	b.n	40a9e6 <__aeabi_dmul+0x24a>
  40ab8c:	ea95 0f0c 	teq	r5, ip
  40ab90:	d106      	bne.n	40aba0 <__aeabi_ddiv+0x1b0>
  40ab92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ab96:	f43f aefd 	beq.w	40a994 <__aeabi_dmul+0x1f8>
  40ab9a:	4610      	mov	r0, r2
  40ab9c:	4619      	mov	r1, r3
  40ab9e:	e722      	b.n	40a9e6 <__aeabi_dmul+0x24a>
  40aba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aba4:	bf18      	it	ne
  40aba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40abaa:	f47f aec5 	bne.w	40a938 <__aeabi_dmul+0x19c>
  40abae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40abb2:	f47f af0d 	bne.w	40a9d0 <__aeabi_dmul+0x234>
  40abb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40abba:	f47f aeeb 	bne.w	40a994 <__aeabi_dmul+0x1f8>
  40abbe:	e712      	b.n	40a9e6 <__aeabi_dmul+0x24a>

0040abc0 <__gedf2>:
  40abc0:	f04f 3cff 	mov.w	ip, #4294967295
  40abc4:	e006      	b.n	40abd4 <__cmpdf2+0x4>
  40abc6:	bf00      	nop

0040abc8 <__ledf2>:
  40abc8:	f04f 0c01 	mov.w	ip, #1
  40abcc:	e002      	b.n	40abd4 <__cmpdf2+0x4>
  40abce:	bf00      	nop

0040abd0 <__cmpdf2>:
  40abd0:	f04f 0c01 	mov.w	ip, #1
  40abd4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40abd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40abdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40abe0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40abe4:	bf18      	it	ne
  40abe6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40abea:	d01b      	beq.n	40ac24 <__cmpdf2+0x54>
  40abec:	b001      	add	sp, #4
  40abee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40abf2:	bf0c      	ite	eq
  40abf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40abf8:	ea91 0f03 	teqne	r1, r3
  40abfc:	bf02      	ittt	eq
  40abfe:	ea90 0f02 	teqeq	r0, r2
  40ac02:	2000      	moveq	r0, #0
  40ac04:	4770      	bxeq	lr
  40ac06:	f110 0f00 	cmn.w	r0, #0
  40ac0a:	ea91 0f03 	teq	r1, r3
  40ac0e:	bf58      	it	pl
  40ac10:	4299      	cmppl	r1, r3
  40ac12:	bf08      	it	eq
  40ac14:	4290      	cmpeq	r0, r2
  40ac16:	bf2c      	ite	cs
  40ac18:	17d8      	asrcs	r0, r3, #31
  40ac1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ac1e:	f040 0001 	orr.w	r0, r0, #1
  40ac22:	4770      	bx	lr
  40ac24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ac28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac2c:	d102      	bne.n	40ac34 <__cmpdf2+0x64>
  40ac2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ac32:	d107      	bne.n	40ac44 <__cmpdf2+0x74>
  40ac34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ac38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac3c:	d1d6      	bne.n	40abec <__cmpdf2+0x1c>
  40ac3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ac42:	d0d3      	beq.n	40abec <__cmpdf2+0x1c>
  40ac44:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ac48:	4770      	bx	lr
  40ac4a:	bf00      	nop

0040ac4c <__aeabi_cdrcmple>:
  40ac4c:	4684      	mov	ip, r0
  40ac4e:	4610      	mov	r0, r2
  40ac50:	4662      	mov	r2, ip
  40ac52:	468c      	mov	ip, r1
  40ac54:	4619      	mov	r1, r3
  40ac56:	4663      	mov	r3, ip
  40ac58:	e000      	b.n	40ac5c <__aeabi_cdcmpeq>
  40ac5a:	bf00      	nop

0040ac5c <__aeabi_cdcmpeq>:
  40ac5c:	b501      	push	{r0, lr}
  40ac5e:	f7ff ffb7 	bl	40abd0 <__cmpdf2>
  40ac62:	2800      	cmp	r0, #0
  40ac64:	bf48      	it	mi
  40ac66:	f110 0f00 	cmnmi.w	r0, #0
  40ac6a:	bd01      	pop	{r0, pc}

0040ac6c <__aeabi_dcmpeq>:
  40ac6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ac70:	f7ff fff4 	bl	40ac5c <__aeabi_cdcmpeq>
  40ac74:	bf0c      	ite	eq
  40ac76:	2001      	moveq	r0, #1
  40ac78:	2000      	movne	r0, #0
  40ac7a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ac7e:	bf00      	nop

0040ac80 <__aeabi_dcmplt>:
  40ac80:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ac84:	f7ff ffea 	bl	40ac5c <__aeabi_cdcmpeq>
  40ac88:	bf34      	ite	cc
  40ac8a:	2001      	movcc	r0, #1
  40ac8c:	2000      	movcs	r0, #0
  40ac8e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ac92:	bf00      	nop

0040ac94 <__aeabi_dcmple>:
  40ac94:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ac98:	f7ff ffe0 	bl	40ac5c <__aeabi_cdcmpeq>
  40ac9c:	bf94      	ite	ls
  40ac9e:	2001      	movls	r0, #1
  40aca0:	2000      	movhi	r0, #0
  40aca2:	f85d fb08 	ldr.w	pc, [sp], #8
  40aca6:	bf00      	nop

0040aca8 <__aeabi_dcmpge>:
  40aca8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40acac:	f7ff ffce 	bl	40ac4c <__aeabi_cdrcmple>
  40acb0:	bf94      	ite	ls
  40acb2:	2001      	movls	r0, #1
  40acb4:	2000      	movhi	r0, #0
  40acb6:	f85d fb08 	ldr.w	pc, [sp], #8
  40acba:	bf00      	nop

0040acbc <__aeabi_dcmpgt>:
  40acbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40acc0:	f7ff ffc4 	bl	40ac4c <__aeabi_cdrcmple>
  40acc4:	bf34      	ite	cc
  40acc6:	2001      	movcc	r0, #1
  40acc8:	2000      	movcs	r0, #0
  40acca:	f85d fb08 	ldr.w	pc, [sp], #8
  40acce:	bf00      	nop

0040acd0 <__aeabi_dcmpun>:
  40acd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40acd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40acd8:	d102      	bne.n	40ace0 <__aeabi_dcmpun+0x10>
  40acda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40acde:	d10a      	bne.n	40acf6 <__aeabi_dcmpun+0x26>
  40ace0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ace4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ace8:	d102      	bne.n	40acf0 <__aeabi_dcmpun+0x20>
  40acea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40acee:	d102      	bne.n	40acf6 <__aeabi_dcmpun+0x26>
  40acf0:	f04f 0000 	mov.w	r0, #0
  40acf4:	4770      	bx	lr
  40acf6:	f04f 0001 	mov.w	r0, #1
  40acfa:	4770      	bx	lr

0040acfc <__aeabi_d2iz>:
  40acfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ad00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ad04:	d215      	bcs.n	40ad32 <__aeabi_d2iz+0x36>
  40ad06:	d511      	bpl.n	40ad2c <__aeabi_d2iz+0x30>
  40ad08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ad0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ad10:	d912      	bls.n	40ad38 <__aeabi_d2iz+0x3c>
  40ad12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ad16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ad1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ad1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ad22:	fa23 f002 	lsr.w	r0, r3, r2
  40ad26:	bf18      	it	ne
  40ad28:	4240      	negne	r0, r0
  40ad2a:	4770      	bx	lr
  40ad2c:	f04f 0000 	mov.w	r0, #0
  40ad30:	4770      	bx	lr
  40ad32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ad36:	d105      	bne.n	40ad44 <__aeabi_d2iz+0x48>
  40ad38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40ad3c:	bf08      	it	eq
  40ad3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ad42:	4770      	bx	lr
  40ad44:	f04f 0000 	mov.w	r0, #0
  40ad48:	4770      	bx	lr
  40ad4a:	bf00      	nop

0040ad4c <__aeabi_uldivmod>:
  40ad4c:	b953      	cbnz	r3, 40ad64 <__aeabi_uldivmod+0x18>
  40ad4e:	b94a      	cbnz	r2, 40ad64 <__aeabi_uldivmod+0x18>
  40ad50:	2900      	cmp	r1, #0
  40ad52:	bf08      	it	eq
  40ad54:	2800      	cmpeq	r0, #0
  40ad56:	bf1c      	itt	ne
  40ad58:	f04f 31ff 	movne.w	r1, #4294967295
  40ad5c:	f04f 30ff 	movne.w	r0, #4294967295
  40ad60:	f000 b97a 	b.w	40b058 <__aeabi_idiv0>
  40ad64:	f1ad 0c08 	sub.w	ip, sp, #8
  40ad68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40ad6c:	f000 f806 	bl	40ad7c <__udivmoddi4>
  40ad70:	f8dd e004 	ldr.w	lr, [sp, #4]
  40ad74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ad78:	b004      	add	sp, #16
  40ad7a:	4770      	bx	lr

0040ad7c <__udivmoddi4>:
  40ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ad80:	468c      	mov	ip, r1
  40ad82:	460d      	mov	r5, r1
  40ad84:	4604      	mov	r4, r0
  40ad86:	9e08      	ldr	r6, [sp, #32]
  40ad88:	2b00      	cmp	r3, #0
  40ad8a:	d151      	bne.n	40ae30 <__udivmoddi4+0xb4>
  40ad8c:	428a      	cmp	r2, r1
  40ad8e:	4617      	mov	r7, r2
  40ad90:	d96d      	bls.n	40ae6e <__udivmoddi4+0xf2>
  40ad92:	fab2 fe82 	clz	lr, r2
  40ad96:	f1be 0f00 	cmp.w	lr, #0
  40ad9a:	d00b      	beq.n	40adb4 <__udivmoddi4+0x38>
  40ad9c:	f1ce 0c20 	rsb	ip, lr, #32
  40ada0:	fa01 f50e 	lsl.w	r5, r1, lr
  40ada4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ada8:	fa02 f70e 	lsl.w	r7, r2, lr
  40adac:	ea4c 0c05 	orr.w	ip, ip, r5
  40adb0:	fa00 f40e 	lsl.w	r4, r0, lr
  40adb4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40adb8:	0c25      	lsrs	r5, r4, #16
  40adba:	fbbc f8fa 	udiv	r8, ip, sl
  40adbe:	fa1f f987 	uxth.w	r9, r7
  40adc2:	fb0a cc18 	mls	ip, sl, r8, ip
  40adc6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40adca:	fb08 f309 	mul.w	r3, r8, r9
  40adce:	42ab      	cmp	r3, r5
  40add0:	d90a      	bls.n	40ade8 <__udivmoddi4+0x6c>
  40add2:	19ed      	adds	r5, r5, r7
  40add4:	f108 32ff 	add.w	r2, r8, #4294967295
  40add8:	f080 8123 	bcs.w	40b022 <__udivmoddi4+0x2a6>
  40addc:	42ab      	cmp	r3, r5
  40adde:	f240 8120 	bls.w	40b022 <__udivmoddi4+0x2a6>
  40ade2:	f1a8 0802 	sub.w	r8, r8, #2
  40ade6:	443d      	add	r5, r7
  40ade8:	1aed      	subs	r5, r5, r3
  40adea:	b2a4      	uxth	r4, r4
  40adec:	fbb5 f0fa 	udiv	r0, r5, sl
  40adf0:	fb0a 5510 	mls	r5, sl, r0, r5
  40adf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40adf8:	fb00 f909 	mul.w	r9, r0, r9
  40adfc:	45a1      	cmp	r9, r4
  40adfe:	d909      	bls.n	40ae14 <__udivmoddi4+0x98>
  40ae00:	19e4      	adds	r4, r4, r7
  40ae02:	f100 33ff 	add.w	r3, r0, #4294967295
  40ae06:	f080 810a 	bcs.w	40b01e <__udivmoddi4+0x2a2>
  40ae0a:	45a1      	cmp	r9, r4
  40ae0c:	f240 8107 	bls.w	40b01e <__udivmoddi4+0x2a2>
  40ae10:	3802      	subs	r0, #2
  40ae12:	443c      	add	r4, r7
  40ae14:	eba4 0409 	sub.w	r4, r4, r9
  40ae18:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ae1c:	2100      	movs	r1, #0
  40ae1e:	2e00      	cmp	r6, #0
  40ae20:	d061      	beq.n	40aee6 <__udivmoddi4+0x16a>
  40ae22:	fa24 f40e 	lsr.w	r4, r4, lr
  40ae26:	2300      	movs	r3, #0
  40ae28:	6034      	str	r4, [r6, #0]
  40ae2a:	6073      	str	r3, [r6, #4]
  40ae2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae30:	428b      	cmp	r3, r1
  40ae32:	d907      	bls.n	40ae44 <__udivmoddi4+0xc8>
  40ae34:	2e00      	cmp	r6, #0
  40ae36:	d054      	beq.n	40aee2 <__udivmoddi4+0x166>
  40ae38:	2100      	movs	r1, #0
  40ae3a:	e886 0021 	stmia.w	r6, {r0, r5}
  40ae3e:	4608      	mov	r0, r1
  40ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae44:	fab3 f183 	clz	r1, r3
  40ae48:	2900      	cmp	r1, #0
  40ae4a:	f040 808e 	bne.w	40af6a <__udivmoddi4+0x1ee>
  40ae4e:	42ab      	cmp	r3, r5
  40ae50:	d302      	bcc.n	40ae58 <__udivmoddi4+0xdc>
  40ae52:	4282      	cmp	r2, r0
  40ae54:	f200 80fa 	bhi.w	40b04c <__udivmoddi4+0x2d0>
  40ae58:	1a84      	subs	r4, r0, r2
  40ae5a:	eb65 0503 	sbc.w	r5, r5, r3
  40ae5e:	2001      	movs	r0, #1
  40ae60:	46ac      	mov	ip, r5
  40ae62:	2e00      	cmp	r6, #0
  40ae64:	d03f      	beq.n	40aee6 <__udivmoddi4+0x16a>
  40ae66:	e886 1010 	stmia.w	r6, {r4, ip}
  40ae6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae6e:	b912      	cbnz	r2, 40ae76 <__udivmoddi4+0xfa>
  40ae70:	2701      	movs	r7, #1
  40ae72:	fbb7 f7f2 	udiv	r7, r7, r2
  40ae76:	fab7 fe87 	clz	lr, r7
  40ae7a:	f1be 0f00 	cmp.w	lr, #0
  40ae7e:	d134      	bne.n	40aeea <__udivmoddi4+0x16e>
  40ae80:	1beb      	subs	r3, r5, r7
  40ae82:	0c3a      	lsrs	r2, r7, #16
  40ae84:	fa1f fc87 	uxth.w	ip, r7
  40ae88:	2101      	movs	r1, #1
  40ae8a:	fbb3 f8f2 	udiv	r8, r3, r2
  40ae8e:	0c25      	lsrs	r5, r4, #16
  40ae90:	fb02 3318 	mls	r3, r2, r8, r3
  40ae94:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ae98:	fb0c f308 	mul.w	r3, ip, r8
  40ae9c:	42ab      	cmp	r3, r5
  40ae9e:	d907      	bls.n	40aeb0 <__udivmoddi4+0x134>
  40aea0:	19ed      	adds	r5, r5, r7
  40aea2:	f108 30ff 	add.w	r0, r8, #4294967295
  40aea6:	d202      	bcs.n	40aeae <__udivmoddi4+0x132>
  40aea8:	42ab      	cmp	r3, r5
  40aeaa:	f200 80d1 	bhi.w	40b050 <__udivmoddi4+0x2d4>
  40aeae:	4680      	mov	r8, r0
  40aeb0:	1aed      	subs	r5, r5, r3
  40aeb2:	b2a3      	uxth	r3, r4
  40aeb4:	fbb5 f0f2 	udiv	r0, r5, r2
  40aeb8:	fb02 5510 	mls	r5, r2, r0, r5
  40aebc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40aec0:	fb0c fc00 	mul.w	ip, ip, r0
  40aec4:	45a4      	cmp	ip, r4
  40aec6:	d907      	bls.n	40aed8 <__udivmoddi4+0x15c>
  40aec8:	19e4      	adds	r4, r4, r7
  40aeca:	f100 33ff 	add.w	r3, r0, #4294967295
  40aece:	d202      	bcs.n	40aed6 <__udivmoddi4+0x15a>
  40aed0:	45a4      	cmp	ip, r4
  40aed2:	f200 80b8 	bhi.w	40b046 <__udivmoddi4+0x2ca>
  40aed6:	4618      	mov	r0, r3
  40aed8:	eba4 040c 	sub.w	r4, r4, ip
  40aedc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40aee0:	e79d      	b.n	40ae1e <__udivmoddi4+0xa2>
  40aee2:	4631      	mov	r1, r6
  40aee4:	4630      	mov	r0, r6
  40aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aeea:	f1ce 0420 	rsb	r4, lr, #32
  40aeee:	fa05 f30e 	lsl.w	r3, r5, lr
  40aef2:	fa07 f70e 	lsl.w	r7, r7, lr
  40aef6:	fa20 f804 	lsr.w	r8, r0, r4
  40aefa:	0c3a      	lsrs	r2, r7, #16
  40aefc:	fa25 f404 	lsr.w	r4, r5, r4
  40af00:	ea48 0803 	orr.w	r8, r8, r3
  40af04:	fbb4 f1f2 	udiv	r1, r4, r2
  40af08:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40af0c:	fb02 4411 	mls	r4, r2, r1, r4
  40af10:	fa1f fc87 	uxth.w	ip, r7
  40af14:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40af18:	fb01 f30c 	mul.w	r3, r1, ip
  40af1c:	42ab      	cmp	r3, r5
  40af1e:	fa00 f40e 	lsl.w	r4, r0, lr
  40af22:	d909      	bls.n	40af38 <__udivmoddi4+0x1bc>
  40af24:	19ed      	adds	r5, r5, r7
  40af26:	f101 30ff 	add.w	r0, r1, #4294967295
  40af2a:	f080 808a 	bcs.w	40b042 <__udivmoddi4+0x2c6>
  40af2e:	42ab      	cmp	r3, r5
  40af30:	f240 8087 	bls.w	40b042 <__udivmoddi4+0x2c6>
  40af34:	3902      	subs	r1, #2
  40af36:	443d      	add	r5, r7
  40af38:	1aeb      	subs	r3, r5, r3
  40af3a:	fa1f f588 	uxth.w	r5, r8
  40af3e:	fbb3 f0f2 	udiv	r0, r3, r2
  40af42:	fb02 3310 	mls	r3, r2, r0, r3
  40af46:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40af4a:	fb00 f30c 	mul.w	r3, r0, ip
  40af4e:	42ab      	cmp	r3, r5
  40af50:	d907      	bls.n	40af62 <__udivmoddi4+0x1e6>
  40af52:	19ed      	adds	r5, r5, r7
  40af54:	f100 38ff 	add.w	r8, r0, #4294967295
  40af58:	d26f      	bcs.n	40b03a <__udivmoddi4+0x2be>
  40af5a:	42ab      	cmp	r3, r5
  40af5c:	d96d      	bls.n	40b03a <__udivmoddi4+0x2be>
  40af5e:	3802      	subs	r0, #2
  40af60:	443d      	add	r5, r7
  40af62:	1aeb      	subs	r3, r5, r3
  40af64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40af68:	e78f      	b.n	40ae8a <__udivmoddi4+0x10e>
  40af6a:	f1c1 0720 	rsb	r7, r1, #32
  40af6e:	fa22 f807 	lsr.w	r8, r2, r7
  40af72:	408b      	lsls	r3, r1
  40af74:	fa05 f401 	lsl.w	r4, r5, r1
  40af78:	ea48 0303 	orr.w	r3, r8, r3
  40af7c:	fa20 fe07 	lsr.w	lr, r0, r7
  40af80:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40af84:	40fd      	lsrs	r5, r7
  40af86:	ea4e 0e04 	orr.w	lr, lr, r4
  40af8a:	fbb5 f9fc 	udiv	r9, r5, ip
  40af8e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40af92:	fb0c 5519 	mls	r5, ip, r9, r5
  40af96:	fa1f f883 	uxth.w	r8, r3
  40af9a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40af9e:	fb09 f408 	mul.w	r4, r9, r8
  40afa2:	42ac      	cmp	r4, r5
  40afa4:	fa02 f201 	lsl.w	r2, r2, r1
  40afa8:	fa00 fa01 	lsl.w	sl, r0, r1
  40afac:	d908      	bls.n	40afc0 <__udivmoddi4+0x244>
  40afae:	18ed      	adds	r5, r5, r3
  40afb0:	f109 30ff 	add.w	r0, r9, #4294967295
  40afb4:	d243      	bcs.n	40b03e <__udivmoddi4+0x2c2>
  40afb6:	42ac      	cmp	r4, r5
  40afb8:	d941      	bls.n	40b03e <__udivmoddi4+0x2c2>
  40afba:	f1a9 0902 	sub.w	r9, r9, #2
  40afbe:	441d      	add	r5, r3
  40afc0:	1b2d      	subs	r5, r5, r4
  40afc2:	fa1f fe8e 	uxth.w	lr, lr
  40afc6:	fbb5 f0fc 	udiv	r0, r5, ip
  40afca:	fb0c 5510 	mls	r5, ip, r0, r5
  40afce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40afd2:	fb00 f808 	mul.w	r8, r0, r8
  40afd6:	45a0      	cmp	r8, r4
  40afd8:	d907      	bls.n	40afea <__udivmoddi4+0x26e>
  40afda:	18e4      	adds	r4, r4, r3
  40afdc:	f100 35ff 	add.w	r5, r0, #4294967295
  40afe0:	d229      	bcs.n	40b036 <__udivmoddi4+0x2ba>
  40afe2:	45a0      	cmp	r8, r4
  40afe4:	d927      	bls.n	40b036 <__udivmoddi4+0x2ba>
  40afe6:	3802      	subs	r0, #2
  40afe8:	441c      	add	r4, r3
  40afea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40afee:	eba4 0408 	sub.w	r4, r4, r8
  40aff2:	fba0 8902 	umull	r8, r9, r0, r2
  40aff6:	454c      	cmp	r4, r9
  40aff8:	46c6      	mov	lr, r8
  40affa:	464d      	mov	r5, r9
  40affc:	d315      	bcc.n	40b02a <__udivmoddi4+0x2ae>
  40affe:	d012      	beq.n	40b026 <__udivmoddi4+0x2aa>
  40b000:	b156      	cbz	r6, 40b018 <__udivmoddi4+0x29c>
  40b002:	ebba 030e 	subs.w	r3, sl, lr
  40b006:	eb64 0405 	sbc.w	r4, r4, r5
  40b00a:	fa04 f707 	lsl.w	r7, r4, r7
  40b00e:	40cb      	lsrs	r3, r1
  40b010:	431f      	orrs	r7, r3
  40b012:	40cc      	lsrs	r4, r1
  40b014:	6037      	str	r7, [r6, #0]
  40b016:	6074      	str	r4, [r6, #4]
  40b018:	2100      	movs	r1, #0
  40b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b01e:	4618      	mov	r0, r3
  40b020:	e6f8      	b.n	40ae14 <__udivmoddi4+0x98>
  40b022:	4690      	mov	r8, r2
  40b024:	e6e0      	b.n	40ade8 <__udivmoddi4+0x6c>
  40b026:	45c2      	cmp	sl, r8
  40b028:	d2ea      	bcs.n	40b000 <__udivmoddi4+0x284>
  40b02a:	ebb8 0e02 	subs.w	lr, r8, r2
  40b02e:	eb69 0503 	sbc.w	r5, r9, r3
  40b032:	3801      	subs	r0, #1
  40b034:	e7e4      	b.n	40b000 <__udivmoddi4+0x284>
  40b036:	4628      	mov	r0, r5
  40b038:	e7d7      	b.n	40afea <__udivmoddi4+0x26e>
  40b03a:	4640      	mov	r0, r8
  40b03c:	e791      	b.n	40af62 <__udivmoddi4+0x1e6>
  40b03e:	4681      	mov	r9, r0
  40b040:	e7be      	b.n	40afc0 <__udivmoddi4+0x244>
  40b042:	4601      	mov	r1, r0
  40b044:	e778      	b.n	40af38 <__udivmoddi4+0x1bc>
  40b046:	3802      	subs	r0, #2
  40b048:	443c      	add	r4, r7
  40b04a:	e745      	b.n	40aed8 <__udivmoddi4+0x15c>
  40b04c:	4608      	mov	r0, r1
  40b04e:	e708      	b.n	40ae62 <__udivmoddi4+0xe6>
  40b050:	f1a8 0802 	sub.w	r8, r8, #2
  40b054:	443d      	add	r5, r7
  40b056:	e72b      	b.n	40aeb0 <__udivmoddi4+0x134>

0040b058 <__aeabi_idiv0>:
  40b058:	4770      	bx	lr
  40b05a:	bf00      	nop

0040b05c <sysfont_glyphs>:
  40b05c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  40b06c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  40b07c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  40b08c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  40b09c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  40b0ac:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  40b0bc:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  40b0cc:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  40b0dc:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  40b0ec:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  40b0fc:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  40b10c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  40b11c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  40b12c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  40b13c:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  40b14c:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  40b15c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  40b16c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  40b17c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  40b18c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  40b19c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  40b1ac:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  40b1bc:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  40b1cc:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  40b1dc:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  40b1ec:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  40b1fc:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  40b20c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  40b21c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  40b22c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  40b23c:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  40b24c:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  40b25c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  40b26c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  40b27c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  40b28c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  40b29c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  40b2ac:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  40b2bc:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  40b2cc:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  40b2dc:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  40b2ec:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  40b2fc:	0000 0000 6d54 2072 7653 0063 0000 0000     ....Tmr Svc.....
  40b30c:	07e7 0000 0004 0000 0018 0000 0011 0000     ................
  40b31c:	0008 0000 0037 0000 0001 0000 6c6f 6465     ....7.......oled
  40b32c:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  40b33c:	6165 6574 6f20 656c 2064 6174 6b73 000d     eate oled task..
  40b34c:	6573 736e 726f 0000 6146 6c69 6465 7420     sensor..Failed t
  40b35c:	206f 7263 6165 6574 7320 6e65 6f73 2072     o create sensor 
  40b36c:	6174 6b73 000d 0000 7472 0074 6146 6c69     task....rtt.Fail
  40b37c:	6465 7420 206f 7263 6165 6574 7220 7474     ed to create rtt
  40b38c:	7420 7361 0d6b 0000 6374 0000 6146 6c69      task...tc..Fail
  40b39c:	6465 7420 206f 7263 6165 6574 7420 2063     ed to create tc 
  40b3ac:	6174 6b73 000d 0000 7472 0063 6146 6c69     task....rtc.Fail
  40b3bc:	6465 7420 206f 7263 6165 6574 7220 6374     ed to create rtc
  40b3cc:	7420 7361 0d6b 0000 6146 6c69 6465 7420      task...Failed t
  40b3dc:	206f 7263 6165 6574 7320 6d65 7061 6f68     o create semapho
  40b3ec:	6572 5220 5454 0000 6146 6c69 6465 7420     re RTT..Failed t
  40b3fc:	206f 7263 6165 6574 7320 6d65 7061 6f68     o create semapho
  40b40c:	6572 5420 0043 0000 6146 6c69 6465 7420     re TC...Failed t
  40b41c:	206f 7263 6165 6574 7320 6d65 7061 6f68     o create semapho
  40b42c:	6572 5220 4354 0000 6425 0000 003a 0000     re RTC..%d..:...
  40b43c:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  40b44c:	2078 7325 0a0d 0000                         x %s....

0040b454 <_global_impure_ptr>:
  40b454:	0030 2040 000a 0000 4e49 0046 6e69 0066     0.@ ....INF.inf.
  40b464:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
  40b474:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  40b484:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  40b494:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0040b4a0 <blanks.7223>:
  40b4a0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b4b0 <zeroes.7224>:
  40b4b0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040b4c0 <blanks.7238>:
  40b4c0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b4d0 <zeroes.7239>:
  40b4d0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40b4e0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0040b4f0 <__mprec_bigtens>:
  40b4f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40b500:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40b510:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040b518 <__mprec_tens>:
  40b518:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40b528:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40b538:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40b548:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40b558:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40b568:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40b578:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40b588:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40b598:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40b5a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40b5b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40b5c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40b5d8:	9db4 79d9 7843 44ea                         ...yCx.D

0040b5e0 <p05.6055>:
  40b5e0:	0005 0000 0019 0000 007d 0000 4f50 4953     ........}...POSI
  40b5f0:	0058 0000 002e 0000                         X.......

0040b5f8 <_ctype_>:
  40b5f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40b608:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40b618:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40b628:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40b638:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40b648:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40b658:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40b668:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40b678:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040b6fc <_init>:
  40b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b6fe:	bf00      	nop
  40b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b702:	bc08      	pop	{r3}
  40b704:	469e      	mov	lr, r3
  40b706:	4770      	bx	lr

0040b708 <__init_array_start>:
  40b708:	0040791d 	.word	0x0040791d

0040b70c <__frame_dummy_init_array_entry>:
  40b70c:	00400165                                e.@.

0040b710 <_fini>:
  40b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b712:	bf00      	nop
  40b714:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b716:	bc08      	pop	{r3}
  40b718:	469e      	mov	lr, r3
  40b71a:	4770      	bx	lr

<<<<<<< Updated upstream
0040b42c <__fini_array_start>:
  40b42c:	00400141 	.word	0x00400141
=======
00409000 <__fini_array_start>:
  409000:	00400141 	.word	0x00400141
=======
  403f40:	4e6f      	ldr	r6, [pc, #444]	; (404100 <main+0x218>)
  403f42:	6833      	ldr	r3, [r6, #0]
  403f44:	4621      	mov	r1, r4
  403f46:	6898      	ldr	r0, [r3, #8]
  403f48:	4d6e      	ldr	r5, [pc, #440]	; (404104 <main+0x21c>)
  403f4a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403f4c:	6833      	ldr	r3, [r6, #0]
  403f4e:	4621      	mov	r1, r4
  403f50:	6858      	ldr	r0, [r3, #4]
  403f52:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403f54:	6833      	ldr	r3, [r6, #0]
  403f56:	4621      	mov	r1, r4
  403f58:	6898      	ldr	r0, [r3, #8]
  403f5a:	47a8      	blx	r5
	/* Initialize the console uart */
	configure_console();
	
	WDT->WDT_MR = WDT_MR_WDDIS;  
  403f5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403f60:	4b69      	ldr	r3, [pc, #420]	; (404108 <main+0x220>)
  403f62:	605a      	str	r2, [r3, #4]
	
	xSemaphoreRTT = xSemaphoreCreateBinary();
  403f64:	2203      	movs	r2, #3
  403f66:	4621      	mov	r1, r4
  403f68:	2001      	movs	r0, #1
  403f6a:	4d68      	ldr	r5, [pc, #416]	; (40410c <main+0x224>)
  403f6c:	47a8      	blx	r5
  403f6e:	4b68      	ldr	r3, [pc, #416]	; (404110 <main+0x228>)
  403f70:	6018      	str	r0, [r3, #0]
	xSemaphoreRTC = xSemaphoreCreateBinary();
  403f72:	2203      	movs	r2, #3
  403f74:	4621      	mov	r1, r4
  403f76:	2001      	movs	r0, #1
  403f78:	47a8      	blx	r5
  403f7a:	4b66      	ldr	r3, [pc, #408]	; (404114 <main+0x22c>)
  403f7c:	6018      	str	r0, [r3, #0]
	xSemaphoreTC = xSemaphoreCreateBinary();
  403f7e:	2203      	movs	r2, #3
  403f80:	4621      	mov	r1, r4
  403f82:	2001      	movs	r0, #1
  403f84:	47a8      	blx	r5
  403f86:	4b64      	ldr	r3, [pc, #400]	; (404118 <main+0x230>)
  403f88:	6018      	str	r0, [r3, #0]
	
	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403f8a:	9403      	str	r4, [sp, #12]
  403f8c:	9402      	str	r4, [sp, #8]
  403f8e:	9401      	str	r4, [sp, #4]
  403f90:	9400      	str	r4, [sp, #0]
  403f92:	4623      	mov	r3, r4
  403f94:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403f98:	4960      	ldr	r1, [pc, #384]	; (40411c <main+0x234>)
  403f9a:	4861      	ldr	r0, [pc, #388]	; (404120 <main+0x238>)
  403f9c:	4c61      	ldr	r4, [pc, #388]	; (404124 <main+0x23c>)
  403f9e:	47a0      	blx	r4
  403fa0:	2801      	cmp	r0, #1
  403fa2:	d002      	beq.n	403faa <main+0xc2>
		printf("Failed to create oled task\r\n");
  403fa4:	4860      	ldr	r0, [pc, #384]	; (404128 <main+0x240>)
  403fa6:	4b61      	ldr	r3, [pc, #388]	; (40412c <main+0x244>)
  403fa8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_sensor, "sensor", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403faa:	2300      	movs	r3, #0
  403fac:	9303      	str	r3, [sp, #12]
  403fae:	9302      	str	r3, [sp, #8]
  403fb0:	9301      	str	r3, [sp, #4]
  403fb2:	9300      	str	r3, [sp, #0]
  403fb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403fb8:	495d      	ldr	r1, [pc, #372]	; (404130 <main+0x248>)
  403fba:	485e      	ldr	r0, [pc, #376]	; (404134 <main+0x24c>)
  403fbc:	4c59      	ldr	r4, [pc, #356]	; (404124 <main+0x23c>)
  403fbe:	47a0      	blx	r4
  403fc0:	2801      	cmp	r0, #1
  403fc2:	d002      	beq.n	403fca <main+0xe2>
		printf("Failed to create sensor task\r\n");
  403fc4:	485c      	ldr	r0, [pc, #368]	; (404138 <main+0x250>)
  403fc6:	4b59      	ldr	r3, [pc, #356]	; (40412c <main+0x244>)
  403fc8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_rtt, "rtt", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403fca:	2300      	movs	r3, #0
  403fcc:	9303      	str	r3, [sp, #12]
  403fce:	9302      	str	r3, [sp, #8]
  403fd0:	9301      	str	r3, [sp, #4]
  403fd2:	9300      	str	r3, [sp, #0]
  403fd4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403fd8:	4958      	ldr	r1, [pc, #352]	; (40413c <main+0x254>)
  403fda:	4859      	ldr	r0, [pc, #356]	; (404140 <main+0x258>)
  403fdc:	4c51      	ldr	r4, [pc, #324]	; (404124 <main+0x23c>)
  403fde:	47a0      	blx	r4
  403fe0:	2801      	cmp	r0, #1
  403fe2:	d002      	beq.n	403fea <main+0x102>
		printf("Failed to create rtt task\r\n");
  403fe4:	4857      	ldr	r0, [pc, #348]	; (404144 <main+0x25c>)
  403fe6:	4b51      	ldr	r3, [pc, #324]	; (40412c <main+0x244>)
  403fe8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_tc, "tc", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  403fea:	2300      	movs	r3, #0
  403fec:	9303      	str	r3, [sp, #12]
  403fee:	9302      	str	r3, [sp, #8]
  403ff0:	9301      	str	r3, [sp, #4]
  403ff2:	9300      	str	r3, [sp, #0]
  403ff4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403ff8:	4953      	ldr	r1, [pc, #332]	; (404148 <main+0x260>)
  403ffa:	4854      	ldr	r0, [pc, #336]	; (40414c <main+0x264>)
  403ffc:	4c49      	ldr	r4, [pc, #292]	; (404124 <main+0x23c>)
  403ffe:	47a0      	blx	r4
  404000:	2801      	cmp	r0, #1
  404002:	d002      	beq.n	40400a <main+0x122>
		printf("Failed to create tc task\r\n");
  404004:	4852      	ldr	r0, [pc, #328]	; (404150 <main+0x268>)
  404006:	4b49      	ldr	r3, [pc, #292]	; (40412c <main+0x244>)
  404008:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_rtc, "rtc", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  40400a:	2300      	movs	r3, #0
  40400c:	9303      	str	r3, [sp, #12]
  40400e:	9302      	str	r3, [sp, #8]
  404010:	9301      	str	r3, [sp, #4]
  404012:	9300      	str	r3, [sp, #0]
  404014:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404018:	494e      	ldr	r1, [pc, #312]	; (404154 <main+0x26c>)
  40401a:	484f      	ldr	r0, [pc, #316]	; (404158 <main+0x270>)
  40401c:	4c41      	ldr	r4, [pc, #260]	; (404124 <main+0x23c>)
  40401e:	47a0      	blx	r4
  404020:	2801      	cmp	r0, #1
  404022:	d002      	beq.n	40402a <main+0x142>
		printf("Failed to create rtc task\r\n");
  404024:	484d      	ldr	r0, [pc, #308]	; (40415c <main+0x274>)
  404026:	4b41      	ldr	r3, [pc, #260]	; (40412c <main+0x244>)
  404028:	4798      	blx	r3
	}
	
	if (xSemaphoreRTT == NULL){
  40402a:	4b39      	ldr	r3, [pc, #228]	; (404110 <main+0x228>)
  40402c:	681b      	ldr	r3, [r3, #0]
  40402e:	2b00      	cmp	r3, #0
  404030:	d03b      	beq.n	4040aa <main+0x1c2>
		printf("Failed to create semaphore RTT\n");
	}
	if (xSemaphoreTC == NULL){
  404032:	4b39      	ldr	r3, [pc, #228]	; (404118 <main+0x230>)
  404034:	681b      	ldr	r3, [r3, #0]
  404036:	2b00      	cmp	r3, #0
  404038:	d03b      	beq.n	4040b2 <main+0x1ca>
		printf("Failed to create semaphore TC\n");
	}
	if (xSemaphoreRTC == NULL){
  40403a:	4b36      	ldr	r3, [pc, #216]	; (404114 <main+0x22c>)
  40403c:	681b      	ldr	r3, [r3, #0]
  40403e:	2b00      	cmp	r3, #0
  404040:	d03b      	beq.n	4040ba <main+0x1d2>

		printf("Failed to create semaphore RTC\n");
	}

	TC_init(TC2, ID_TC7, 1, 4);
  404042:	4c47      	ldr	r4, [pc, #284]	; (404160 <main+0x278>)
  404044:	2304      	movs	r3, #4
  404046:	2201      	movs	r2, #1
  404048:	2130      	movs	r1, #48	; 0x30
  40404a:	4620      	mov	r0, r4
  40404c:	4e45      	ldr	r6, [pc, #276]	; (404164 <main+0x27c>)
  40404e:	47b0      	blx	r6
	tc_start(TC2, 1);
  404050:	2101      	movs	r1, #1
  404052:	4620      	mov	r0, r4
  404054:	4c44      	ldr	r4, [pc, #272]	; (404168 <main+0x280>)
  404056:	47a0      	blx	r4
	
	TC_init(TC1, ID_TC4, 1, 1);
  404058:	4d44      	ldr	r5, [pc, #272]	; (40416c <main+0x284>)
  40405a:	2301      	movs	r3, #1
  40405c:	461a      	mov	r2, r3
  40405e:	211b      	movs	r1, #27
  404060:	4628      	mov	r0, r5
  404062:	47b0      	blx	r6
	tc_start(TC1, 1);
  404064:	2101      	movs	r1, #1
  404066:	4628      	mov	r0, r5
  404068:	47a0      	blx	r4
	
	RTT_init(4, 16, RTT_MR_ALMIEN);
  40406a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40406e:	2010      	movs	r0, #16
  404070:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  404074:	4b3e      	ldr	r3, [pc, #248]	; (404170 <main+0x288>)
  404076:	4798      	blx	r3
	calendar rtc_initial = {2023, 4, 24, 17, 16, 15 ,1};
  404078:	ac0d      	add	r4, sp, #52	; 0x34
  40407a:	4d3e      	ldr	r5, [pc, #248]	; (404174 <main+0x28c>)
  40407c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40407e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  404084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_SECEN);
  404088:	2304      	movs	r3, #4
  40408a:	9305      	str	r3, [sp, #20]
  40408c:	466c      	mov	r4, sp
  40408e:	ad0f      	add	r5, sp, #60	; 0x3c
  404090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404094:	682b      	ldr	r3, [r5, #0]
  404096:	6023      	str	r3, [r4, #0]
  404098:	ab0d      	add	r3, sp, #52	; 0x34
  40409a:	cb0c      	ldmia	r3, {r2, r3}
  40409c:	2102      	movs	r1, #2
  40409e:	4836      	ldr	r0, [pc, #216]	; (404178 <main+0x290>)
  4040a0:	4c36      	ldr	r4, [pc, #216]	; (40417c <main+0x294>)
  4040a2:	47a0      	blx	r4
	/* Start the scheduler. */
	vTaskStartScheduler();
  4040a4:	4b36      	ldr	r3, [pc, #216]	; (404180 <main+0x298>)
  4040a6:	4798      	blx	r3
  4040a8:	e7fe      	b.n	4040a8 <main+0x1c0>
		printf("Failed to create semaphore RTT\n");
  4040aa:	4836      	ldr	r0, [pc, #216]	; (404184 <main+0x29c>)
  4040ac:	4b1f      	ldr	r3, [pc, #124]	; (40412c <main+0x244>)
  4040ae:	4798      	blx	r3
  4040b0:	e7bf      	b.n	404032 <main+0x14a>
		printf("Failed to create semaphore TC\n");
  4040b2:	4835      	ldr	r0, [pc, #212]	; (404188 <main+0x2a0>)
  4040b4:	4b1d      	ldr	r3, [pc, #116]	; (40412c <main+0x244>)
  4040b6:	4798      	blx	r3
  4040b8:	e7bf      	b.n	40403a <main+0x152>
		printf("Failed to create semaphore RTC\n");
  4040ba:	4834      	ldr	r0, [pc, #208]	; (40418c <main+0x2a4>)
  4040bc:	4b1b      	ldr	r3, [pc, #108]	; (40412c <main+0x244>)
  4040be:	4798      	blx	r3
  4040c0:	e7bf      	b.n	404042 <main+0x15a>
  4040c2:	bf00      	nop
  4040c4:	00400bc1 	.word	0x00400bc1
  4040c8:	00400cbd 	.word	0x00400cbd
  4040cc:	00403e09 	.word	0x00403e09
  4040d0:	00403e79 	.word	0x00403e79
  4040d4:	40028000 	.word	0x40028000
  4040d8:	20400e00 	.word	0x20400e00
  4040dc:	00403939 	.word	0x00403939
  4040e0:	20400dfc 	.word	0x20400dfc
  4040e4:	0040385d 	.word	0x0040385d
  4040e8:	20400df8 	.word	0x20400df8
  4040ec:	00401261 	.word	0x00401261
  4040f0:	08f0d180 	.word	0x08f0d180
  4040f4:	00401635 	.word	0x00401635
  4040f8:	00401689 	.word	0x00401689
  4040fc:	0040168f 	.word	0x0040168f
  404100:	20400028 	.word	0x20400028
  404104:	00404a41 	.word	0x00404a41
  404108:	400e1850 	.word	0x400e1850
  40410c:	00401fe1 	.word	0x00401fe1
  404110:	20400e5c 	.word	0x20400e5c
  404114:	20400e58 	.word	0x20400e58
  404118:	20400e64 	.word	0x20400e64
  40411c:	0040b330 	.word	0x0040b330
  404120:	0040378d 	.word	0x0040378d
  404124:	00402701 	.word	0x00402701
  404128:	0040b338 	.word	0x0040b338
  40412c:	00404a0d 	.word	0x00404a0d
  404130:	0040b354 	.word	0x0040b354
  404134:	0040377d 	.word	0x0040377d
  404138:	0040b35c 	.word	0x0040b35c
  40413c:	0040b37c 	.word	0x0040b37c
  404140:	00403dc1 	.word	0x00403dc1
  404144:	0040b380 	.word	0x0040b380
  404148:	0040b39c 	.word	0x0040b39c
  40414c:	00403d8d 	.word	0x00403d8d
  404150:	0040b3a0 	.word	0x0040b3a0
  404154:	0040b3bc 	.word	0x0040b3bc
  404158:	00403d59 	.word	0x00403d59
  40415c:	0040b3c0 	.word	0x0040b3c0
  404160:	40014000 	.word	0x40014000
  404164:	00403b81 	.word	0x00403b81
  404168:	00400599 	.word	0x00400599
  40416c:	40010000 	.word	0x40010000
  404170:	004036c5 	.word	0x004036c5
  404174:	0040b30c 	.word	0x0040b30c
  404178:	400e1860 	.word	0x400e1860
  40417c:	00403c39 	.word	0x00403c39
  404180:	00402935 	.word	0x00402935
  404184:	0040b3dc 	.word	0x0040b3dc
  404188:	0040b3fc 	.word	0x0040b3fc
  40418c:	0040b41c 	.word	0x0040b41c

00404190 <__libc_init_array>:
  404190:	b570      	push	{r4, r5, r6, lr}
  404192:	4e0f      	ldr	r6, [pc, #60]	; (4041d0 <__libc_init_array+0x40>)
  404194:	4d0f      	ldr	r5, [pc, #60]	; (4041d4 <__libc_init_array+0x44>)
  404196:	1b76      	subs	r6, r6, r5
  404198:	10b6      	asrs	r6, r6, #2
  40419a:	bf18      	it	ne
  40419c:	2400      	movne	r4, #0
  40419e:	d005      	beq.n	4041ac <__libc_init_array+0x1c>
  4041a0:	3401      	adds	r4, #1
  4041a2:	f855 3b04 	ldr.w	r3, [r5], #4
  4041a6:	4798      	blx	r3
  4041a8:	42a6      	cmp	r6, r4
  4041aa:	d1f9      	bne.n	4041a0 <__libc_init_array+0x10>
  4041ac:	4e0a      	ldr	r6, [pc, #40]	; (4041d8 <__libc_init_array+0x48>)
  4041ae:	4d0b      	ldr	r5, [pc, #44]	; (4041dc <__libc_init_array+0x4c>)
  4041b0:	1b76      	subs	r6, r6, r5
  4041b2:	f007 faa7 	bl	40b704 <_init>
  4041b6:	10b6      	asrs	r6, r6, #2
  4041b8:	bf18      	it	ne
  4041ba:	2400      	movne	r4, #0
  4041bc:	d006      	beq.n	4041cc <__libc_init_array+0x3c>
  4041be:	3401      	adds	r4, #1
  4041c0:	f855 3b04 	ldr.w	r3, [r5], #4
  4041c4:	4798      	blx	r3
  4041c6:	42a6      	cmp	r6, r4
  4041c8:	d1f9      	bne.n	4041be <__libc_init_array+0x2e>
  4041ca:	bd70      	pop	{r4, r5, r6, pc}
  4041cc:	bd70      	pop	{r4, r5, r6, pc}
  4041ce:	bf00      	nop
  4041d0:	0040b710 	.word	0x0040b710
  4041d4:	0040b710 	.word	0x0040b710
  4041d8:	0040b718 	.word	0x0040b718
  4041dc:	0040b710 	.word	0x0040b710

004041e0 <malloc>:
  4041e0:	4b02      	ldr	r3, [pc, #8]	; (4041ec <malloc+0xc>)
  4041e2:	4601      	mov	r1, r0
  4041e4:	6818      	ldr	r0, [r3, #0]
  4041e6:	f000 b80b 	b.w	404200 <_malloc_r>
  4041ea:	bf00      	nop
  4041ec:	20400028 	.word	0x20400028

004041f0 <free>:
  4041f0:	4b02      	ldr	r3, [pc, #8]	; (4041fc <free+0xc>)
  4041f2:	4601      	mov	r1, r0
  4041f4:	6818      	ldr	r0, [r3, #0]
  4041f6:	f004 bcfb 	b.w	408bf0 <_free_r>
  4041fa:	bf00      	nop
  4041fc:	20400028 	.word	0x20400028

00404200 <_malloc_r>:
  404200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404204:	f101 060b 	add.w	r6, r1, #11
  404208:	2e16      	cmp	r6, #22
  40420a:	b083      	sub	sp, #12
  40420c:	4605      	mov	r5, r0
  40420e:	f240 809e 	bls.w	40434e <_malloc_r+0x14e>
  404212:	f036 0607 	bics.w	r6, r6, #7
  404216:	f100 80bd 	bmi.w	404394 <_malloc_r+0x194>
  40421a:	42b1      	cmp	r1, r6
  40421c:	f200 80ba 	bhi.w	404394 <_malloc_r+0x194>
  404220:	f000 fb86 	bl	404930 <__malloc_lock>
  404224:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404228:	f0c0 8293 	bcc.w	404752 <_malloc_r+0x552>
  40422c:	0a73      	lsrs	r3, r6, #9
  40422e:	f000 80b8 	beq.w	4043a2 <_malloc_r+0x1a2>
  404232:	2b04      	cmp	r3, #4
  404234:	f200 8179 	bhi.w	40452a <_malloc_r+0x32a>
  404238:	09b3      	lsrs	r3, r6, #6
  40423a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40423e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404242:	00c3      	lsls	r3, r0, #3
  404244:	4fbf      	ldr	r7, [pc, #764]	; (404544 <_malloc_r+0x344>)
  404246:	443b      	add	r3, r7
  404248:	f1a3 0108 	sub.w	r1, r3, #8
  40424c:	685c      	ldr	r4, [r3, #4]
  40424e:	42a1      	cmp	r1, r4
  404250:	d106      	bne.n	404260 <_malloc_r+0x60>
  404252:	e00c      	b.n	40426e <_malloc_r+0x6e>
  404254:	2a00      	cmp	r2, #0
  404256:	f280 80aa 	bge.w	4043ae <_malloc_r+0x1ae>
  40425a:	68e4      	ldr	r4, [r4, #12]
  40425c:	42a1      	cmp	r1, r4
  40425e:	d006      	beq.n	40426e <_malloc_r+0x6e>
  404260:	6863      	ldr	r3, [r4, #4]
  404262:	f023 0303 	bic.w	r3, r3, #3
  404266:	1b9a      	subs	r2, r3, r6
  404268:	2a0f      	cmp	r2, #15
  40426a:	ddf3      	ble.n	404254 <_malloc_r+0x54>
  40426c:	4670      	mov	r0, lr
  40426e:	693c      	ldr	r4, [r7, #16]
  404270:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404558 <_malloc_r+0x358>
  404274:	4574      	cmp	r4, lr
  404276:	f000 81ab 	beq.w	4045d0 <_malloc_r+0x3d0>
  40427a:	6863      	ldr	r3, [r4, #4]
  40427c:	f023 0303 	bic.w	r3, r3, #3
  404280:	1b9a      	subs	r2, r3, r6
  404282:	2a0f      	cmp	r2, #15
  404284:	f300 8190 	bgt.w	4045a8 <_malloc_r+0x3a8>
  404288:	2a00      	cmp	r2, #0
  40428a:	f8c7 e014 	str.w	lr, [r7, #20]
  40428e:	f8c7 e010 	str.w	lr, [r7, #16]
  404292:	f280 809d 	bge.w	4043d0 <_malloc_r+0x1d0>
  404296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40429a:	f080 8161 	bcs.w	404560 <_malloc_r+0x360>
  40429e:	08db      	lsrs	r3, r3, #3
  4042a0:	f103 0c01 	add.w	ip, r3, #1
  4042a4:	1099      	asrs	r1, r3, #2
  4042a6:	687a      	ldr	r2, [r7, #4]
  4042a8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4042ac:	f8c4 8008 	str.w	r8, [r4, #8]
  4042b0:	2301      	movs	r3, #1
  4042b2:	408b      	lsls	r3, r1
  4042b4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4042b8:	4313      	orrs	r3, r2
  4042ba:	3908      	subs	r1, #8
  4042bc:	60e1      	str	r1, [r4, #12]
  4042be:	607b      	str	r3, [r7, #4]
  4042c0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4042c4:	f8c8 400c 	str.w	r4, [r8, #12]
  4042c8:	1082      	asrs	r2, r0, #2
  4042ca:	2401      	movs	r4, #1
  4042cc:	4094      	lsls	r4, r2
  4042ce:	429c      	cmp	r4, r3
  4042d0:	f200 808b 	bhi.w	4043ea <_malloc_r+0x1ea>
  4042d4:	421c      	tst	r4, r3
  4042d6:	d106      	bne.n	4042e6 <_malloc_r+0xe6>
  4042d8:	f020 0003 	bic.w	r0, r0, #3
  4042dc:	0064      	lsls	r4, r4, #1
  4042de:	421c      	tst	r4, r3
  4042e0:	f100 0004 	add.w	r0, r0, #4
  4042e4:	d0fa      	beq.n	4042dc <_malloc_r+0xdc>
  4042e6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4042ea:	46cc      	mov	ip, r9
  4042ec:	4680      	mov	r8, r0
  4042ee:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4042f2:	459c      	cmp	ip, r3
  4042f4:	d107      	bne.n	404306 <_malloc_r+0x106>
  4042f6:	e16d      	b.n	4045d4 <_malloc_r+0x3d4>
  4042f8:	2a00      	cmp	r2, #0
  4042fa:	f280 817b 	bge.w	4045f4 <_malloc_r+0x3f4>
  4042fe:	68db      	ldr	r3, [r3, #12]
  404300:	459c      	cmp	ip, r3
  404302:	f000 8167 	beq.w	4045d4 <_malloc_r+0x3d4>
  404306:	6859      	ldr	r1, [r3, #4]
  404308:	f021 0103 	bic.w	r1, r1, #3
  40430c:	1b8a      	subs	r2, r1, r6
  40430e:	2a0f      	cmp	r2, #15
  404310:	ddf2      	ble.n	4042f8 <_malloc_r+0xf8>
  404312:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404316:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40431a:	9300      	str	r3, [sp, #0]
  40431c:	199c      	adds	r4, r3, r6
  40431e:	4628      	mov	r0, r5
  404320:	f046 0601 	orr.w	r6, r6, #1
  404324:	f042 0501 	orr.w	r5, r2, #1
  404328:	605e      	str	r6, [r3, #4]
  40432a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40432e:	f8cc 8008 	str.w	r8, [ip, #8]
  404332:	617c      	str	r4, [r7, #20]
  404334:	613c      	str	r4, [r7, #16]
  404336:	f8c4 e00c 	str.w	lr, [r4, #12]
  40433a:	f8c4 e008 	str.w	lr, [r4, #8]
  40433e:	6065      	str	r5, [r4, #4]
  404340:	505a      	str	r2, [r3, r1]
  404342:	f000 fafb 	bl	40493c <__malloc_unlock>
  404346:	9b00      	ldr	r3, [sp, #0]
  404348:	f103 0408 	add.w	r4, r3, #8
  40434c:	e01e      	b.n	40438c <_malloc_r+0x18c>
  40434e:	2910      	cmp	r1, #16
  404350:	d820      	bhi.n	404394 <_malloc_r+0x194>
  404352:	f000 faed 	bl	404930 <__malloc_lock>
  404356:	2610      	movs	r6, #16
  404358:	2318      	movs	r3, #24
  40435a:	2002      	movs	r0, #2
  40435c:	4f79      	ldr	r7, [pc, #484]	; (404544 <_malloc_r+0x344>)
  40435e:	443b      	add	r3, r7
  404360:	f1a3 0208 	sub.w	r2, r3, #8
  404364:	685c      	ldr	r4, [r3, #4]
  404366:	4294      	cmp	r4, r2
  404368:	f000 813d 	beq.w	4045e6 <_malloc_r+0x3e6>
  40436c:	6863      	ldr	r3, [r4, #4]
  40436e:	68e1      	ldr	r1, [r4, #12]
  404370:	68a6      	ldr	r6, [r4, #8]
  404372:	f023 0303 	bic.w	r3, r3, #3
  404376:	4423      	add	r3, r4
  404378:	4628      	mov	r0, r5
  40437a:	685a      	ldr	r2, [r3, #4]
  40437c:	60f1      	str	r1, [r6, #12]
  40437e:	f042 0201 	orr.w	r2, r2, #1
  404382:	608e      	str	r6, [r1, #8]
  404384:	605a      	str	r2, [r3, #4]
  404386:	f000 fad9 	bl	40493c <__malloc_unlock>
  40438a:	3408      	adds	r4, #8
  40438c:	4620      	mov	r0, r4
  40438e:	b003      	add	sp, #12
  404390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404394:	2400      	movs	r4, #0
  404396:	230c      	movs	r3, #12
  404398:	4620      	mov	r0, r4
  40439a:	602b      	str	r3, [r5, #0]
  40439c:	b003      	add	sp, #12
  40439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043a2:	2040      	movs	r0, #64	; 0x40
  4043a4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4043a8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4043ac:	e74a      	b.n	404244 <_malloc_r+0x44>
  4043ae:	4423      	add	r3, r4
  4043b0:	68e1      	ldr	r1, [r4, #12]
  4043b2:	685a      	ldr	r2, [r3, #4]
  4043b4:	68a6      	ldr	r6, [r4, #8]
  4043b6:	f042 0201 	orr.w	r2, r2, #1
  4043ba:	60f1      	str	r1, [r6, #12]
  4043bc:	4628      	mov	r0, r5
  4043be:	608e      	str	r6, [r1, #8]
  4043c0:	605a      	str	r2, [r3, #4]
  4043c2:	f000 fabb 	bl	40493c <__malloc_unlock>
  4043c6:	3408      	adds	r4, #8
  4043c8:	4620      	mov	r0, r4
  4043ca:	b003      	add	sp, #12
  4043cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043d0:	4423      	add	r3, r4
  4043d2:	4628      	mov	r0, r5
  4043d4:	685a      	ldr	r2, [r3, #4]
  4043d6:	f042 0201 	orr.w	r2, r2, #1
  4043da:	605a      	str	r2, [r3, #4]
  4043dc:	f000 faae 	bl	40493c <__malloc_unlock>
  4043e0:	3408      	adds	r4, #8
  4043e2:	4620      	mov	r0, r4
  4043e4:	b003      	add	sp, #12
  4043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043ea:	68bc      	ldr	r4, [r7, #8]
  4043ec:	6863      	ldr	r3, [r4, #4]
  4043ee:	f023 0803 	bic.w	r8, r3, #3
  4043f2:	45b0      	cmp	r8, r6
  4043f4:	d304      	bcc.n	404400 <_malloc_r+0x200>
  4043f6:	eba8 0306 	sub.w	r3, r8, r6
  4043fa:	2b0f      	cmp	r3, #15
  4043fc:	f300 8085 	bgt.w	40450a <_malloc_r+0x30a>
  404400:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40455c <_malloc_r+0x35c>
  404404:	4b50      	ldr	r3, [pc, #320]	; (404548 <_malloc_r+0x348>)
  404406:	f8d9 2000 	ldr.w	r2, [r9]
  40440a:	681b      	ldr	r3, [r3, #0]
  40440c:	3201      	adds	r2, #1
  40440e:	4433      	add	r3, r6
  404410:	eb04 0a08 	add.w	sl, r4, r8
  404414:	f000 8155 	beq.w	4046c2 <_malloc_r+0x4c2>
  404418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40441c:	330f      	adds	r3, #15
  40441e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404422:	f02b 0b0f 	bic.w	fp, fp, #15
  404426:	4659      	mov	r1, fp
  404428:	4628      	mov	r0, r5
  40442a:	f000 faf7 	bl	404a1c <_sbrk_r>
  40442e:	1c41      	adds	r1, r0, #1
  404430:	4602      	mov	r2, r0
  404432:	f000 80fc 	beq.w	40462e <_malloc_r+0x42e>
  404436:	4582      	cmp	sl, r0
  404438:	f200 80f7 	bhi.w	40462a <_malloc_r+0x42a>
  40443c:	4b43      	ldr	r3, [pc, #268]	; (40454c <_malloc_r+0x34c>)
  40443e:	6819      	ldr	r1, [r3, #0]
  404440:	4459      	add	r1, fp
  404442:	6019      	str	r1, [r3, #0]
  404444:	f000 814d 	beq.w	4046e2 <_malloc_r+0x4e2>
  404448:	f8d9 0000 	ldr.w	r0, [r9]
  40444c:	3001      	adds	r0, #1
  40444e:	bf1b      	ittet	ne
  404450:	eba2 0a0a 	subne.w	sl, r2, sl
  404454:	4451      	addne	r1, sl
  404456:	f8c9 2000 	streq.w	r2, [r9]
  40445a:	6019      	strne	r1, [r3, #0]
  40445c:	f012 0107 	ands.w	r1, r2, #7
  404460:	f000 8115 	beq.w	40468e <_malloc_r+0x48e>
  404464:	f1c1 0008 	rsb	r0, r1, #8
  404468:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40446c:	4402      	add	r2, r0
  40446e:	3108      	adds	r1, #8
  404470:	eb02 090b 	add.w	r9, r2, fp
  404474:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404478:	eba1 0909 	sub.w	r9, r1, r9
  40447c:	4649      	mov	r1, r9
  40447e:	4628      	mov	r0, r5
  404480:	9301      	str	r3, [sp, #4]
  404482:	9200      	str	r2, [sp, #0]
  404484:	f000 faca 	bl	404a1c <_sbrk_r>
  404488:	1c43      	adds	r3, r0, #1
  40448a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40448e:	f000 8143 	beq.w	404718 <_malloc_r+0x518>
  404492:	1a80      	subs	r0, r0, r2
  404494:	4448      	add	r0, r9
  404496:	f040 0001 	orr.w	r0, r0, #1
  40449a:	6819      	ldr	r1, [r3, #0]
  40449c:	60ba      	str	r2, [r7, #8]
  40449e:	4449      	add	r1, r9
  4044a0:	42bc      	cmp	r4, r7
  4044a2:	6050      	str	r0, [r2, #4]
  4044a4:	6019      	str	r1, [r3, #0]
  4044a6:	d017      	beq.n	4044d8 <_malloc_r+0x2d8>
  4044a8:	f1b8 0f0f 	cmp.w	r8, #15
  4044ac:	f240 80fb 	bls.w	4046a6 <_malloc_r+0x4a6>
  4044b0:	6860      	ldr	r0, [r4, #4]
  4044b2:	f1a8 020c 	sub.w	r2, r8, #12
  4044b6:	f022 0207 	bic.w	r2, r2, #7
  4044ba:	eb04 0e02 	add.w	lr, r4, r2
  4044be:	f000 0001 	and.w	r0, r0, #1
  4044c2:	f04f 0c05 	mov.w	ip, #5
  4044c6:	4310      	orrs	r0, r2
  4044c8:	2a0f      	cmp	r2, #15
  4044ca:	6060      	str	r0, [r4, #4]
  4044cc:	f8ce c004 	str.w	ip, [lr, #4]
  4044d0:	f8ce c008 	str.w	ip, [lr, #8]
  4044d4:	f200 8117 	bhi.w	404706 <_malloc_r+0x506>
  4044d8:	4b1d      	ldr	r3, [pc, #116]	; (404550 <_malloc_r+0x350>)
  4044da:	68bc      	ldr	r4, [r7, #8]
  4044dc:	681a      	ldr	r2, [r3, #0]
  4044de:	4291      	cmp	r1, r2
  4044e0:	bf88      	it	hi
  4044e2:	6019      	strhi	r1, [r3, #0]
  4044e4:	4b1b      	ldr	r3, [pc, #108]	; (404554 <_malloc_r+0x354>)
  4044e6:	681a      	ldr	r2, [r3, #0]
  4044e8:	4291      	cmp	r1, r2
  4044ea:	6862      	ldr	r2, [r4, #4]
  4044ec:	bf88      	it	hi
  4044ee:	6019      	strhi	r1, [r3, #0]
  4044f0:	f022 0203 	bic.w	r2, r2, #3
  4044f4:	4296      	cmp	r6, r2
  4044f6:	eba2 0306 	sub.w	r3, r2, r6
  4044fa:	d801      	bhi.n	404500 <_malloc_r+0x300>
  4044fc:	2b0f      	cmp	r3, #15
  4044fe:	dc04      	bgt.n	40450a <_malloc_r+0x30a>
  404500:	4628      	mov	r0, r5
  404502:	f000 fa1b 	bl	40493c <__malloc_unlock>
  404506:	2400      	movs	r4, #0
  404508:	e740      	b.n	40438c <_malloc_r+0x18c>
  40450a:	19a2      	adds	r2, r4, r6
  40450c:	f043 0301 	orr.w	r3, r3, #1
  404510:	f046 0601 	orr.w	r6, r6, #1
  404514:	6066      	str	r6, [r4, #4]
  404516:	4628      	mov	r0, r5
  404518:	60ba      	str	r2, [r7, #8]
  40451a:	6053      	str	r3, [r2, #4]
  40451c:	f000 fa0e 	bl	40493c <__malloc_unlock>
  404520:	3408      	adds	r4, #8
  404522:	4620      	mov	r0, r4
  404524:	b003      	add	sp, #12
  404526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40452a:	2b14      	cmp	r3, #20
  40452c:	d971      	bls.n	404612 <_malloc_r+0x412>
  40452e:	2b54      	cmp	r3, #84	; 0x54
  404530:	f200 80a3 	bhi.w	40467a <_malloc_r+0x47a>
  404534:	0b33      	lsrs	r3, r6, #12
  404536:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40453a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40453e:	00c3      	lsls	r3, r0, #3
  404540:	e680      	b.n	404244 <_malloc_r+0x44>
  404542:	bf00      	nop
  404544:	20400458 	.word	0x20400458
  404548:	20400df4 	.word	0x20400df4
  40454c:	20400dc4 	.word	0x20400dc4
  404550:	20400dec 	.word	0x20400dec
  404554:	20400df0 	.word	0x20400df0
  404558:	20400460 	.word	0x20400460
  40455c:	20400860 	.word	0x20400860
  404560:	0a5a      	lsrs	r2, r3, #9
  404562:	2a04      	cmp	r2, #4
  404564:	d95b      	bls.n	40461e <_malloc_r+0x41e>
  404566:	2a14      	cmp	r2, #20
  404568:	f200 80ae 	bhi.w	4046c8 <_malloc_r+0x4c8>
  40456c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404570:	00c9      	lsls	r1, r1, #3
  404572:	325b      	adds	r2, #91	; 0x5b
  404574:	eb07 0c01 	add.w	ip, r7, r1
  404578:	5879      	ldr	r1, [r7, r1]
  40457a:	f1ac 0c08 	sub.w	ip, ip, #8
  40457e:	458c      	cmp	ip, r1
  404580:	f000 8088 	beq.w	404694 <_malloc_r+0x494>
  404584:	684a      	ldr	r2, [r1, #4]
  404586:	f022 0203 	bic.w	r2, r2, #3
  40458a:	4293      	cmp	r3, r2
  40458c:	d273      	bcs.n	404676 <_malloc_r+0x476>
  40458e:	6889      	ldr	r1, [r1, #8]
  404590:	458c      	cmp	ip, r1
  404592:	d1f7      	bne.n	404584 <_malloc_r+0x384>
  404594:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404598:	687b      	ldr	r3, [r7, #4]
  40459a:	60e2      	str	r2, [r4, #12]
  40459c:	f8c4 c008 	str.w	ip, [r4, #8]
  4045a0:	6094      	str	r4, [r2, #8]
  4045a2:	f8cc 400c 	str.w	r4, [ip, #12]
  4045a6:	e68f      	b.n	4042c8 <_malloc_r+0xc8>
  4045a8:	19a1      	adds	r1, r4, r6
  4045aa:	f046 0c01 	orr.w	ip, r6, #1
  4045ae:	f042 0601 	orr.w	r6, r2, #1
  4045b2:	f8c4 c004 	str.w	ip, [r4, #4]
  4045b6:	4628      	mov	r0, r5
  4045b8:	6179      	str	r1, [r7, #20]
  4045ba:	6139      	str	r1, [r7, #16]
  4045bc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4045c0:	f8c1 e008 	str.w	lr, [r1, #8]
  4045c4:	604e      	str	r6, [r1, #4]
  4045c6:	50e2      	str	r2, [r4, r3]
  4045c8:	f000 f9b8 	bl	40493c <__malloc_unlock>
  4045cc:	3408      	adds	r4, #8
  4045ce:	e6dd      	b.n	40438c <_malloc_r+0x18c>
  4045d0:	687b      	ldr	r3, [r7, #4]
  4045d2:	e679      	b.n	4042c8 <_malloc_r+0xc8>
  4045d4:	f108 0801 	add.w	r8, r8, #1
  4045d8:	f018 0f03 	tst.w	r8, #3
  4045dc:	f10c 0c08 	add.w	ip, ip, #8
  4045e0:	f47f ae85 	bne.w	4042ee <_malloc_r+0xee>
  4045e4:	e02d      	b.n	404642 <_malloc_r+0x442>
  4045e6:	68dc      	ldr	r4, [r3, #12]
  4045e8:	42a3      	cmp	r3, r4
  4045ea:	bf08      	it	eq
  4045ec:	3002      	addeq	r0, #2
  4045ee:	f43f ae3e 	beq.w	40426e <_malloc_r+0x6e>
  4045f2:	e6bb      	b.n	40436c <_malloc_r+0x16c>
  4045f4:	4419      	add	r1, r3
  4045f6:	461c      	mov	r4, r3
  4045f8:	684a      	ldr	r2, [r1, #4]
  4045fa:	68db      	ldr	r3, [r3, #12]
  4045fc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404600:	f042 0201 	orr.w	r2, r2, #1
  404604:	604a      	str	r2, [r1, #4]
  404606:	4628      	mov	r0, r5
  404608:	60f3      	str	r3, [r6, #12]
  40460a:	609e      	str	r6, [r3, #8]
  40460c:	f000 f996 	bl	40493c <__malloc_unlock>
  404610:	e6bc      	b.n	40438c <_malloc_r+0x18c>
  404612:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404616:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40461a:	00c3      	lsls	r3, r0, #3
  40461c:	e612      	b.n	404244 <_malloc_r+0x44>
  40461e:	099a      	lsrs	r2, r3, #6
  404620:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404624:	00c9      	lsls	r1, r1, #3
  404626:	3238      	adds	r2, #56	; 0x38
  404628:	e7a4      	b.n	404574 <_malloc_r+0x374>
  40462a:	42bc      	cmp	r4, r7
  40462c:	d054      	beq.n	4046d8 <_malloc_r+0x4d8>
  40462e:	68bc      	ldr	r4, [r7, #8]
  404630:	6862      	ldr	r2, [r4, #4]
  404632:	f022 0203 	bic.w	r2, r2, #3
  404636:	e75d      	b.n	4044f4 <_malloc_r+0x2f4>
  404638:	f859 3908 	ldr.w	r3, [r9], #-8
  40463c:	4599      	cmp	r9, r3
  40463e:	f040 8086 	bne.w	40474e <_malloc_r+0x54e>
  404642:	f010 0f03 	tst.w	r0, #3
  404646:	f100 30ff 	add.w	r0, r0, #4294967295
  40464a:	d1f5      	bne.n	404638 <_malloc_r+0x438>
  40464c:	687b      	ldr	r3, [r7, #4]
  40464e:	ea23 0304 	bic.w	r3, r3, r4
  404652:	607b      	str	r3, [r7, #4]
  404654:	0064      	lsls	r4, r4, #1
  404656:	429c      	cmp	r4, r3
  404658:	f63f aec7 	bhi.w	4043ea <_malloc_r+0x1ea>
  40465c:	2c00      	cmp	r4, #0
  40465e:	f43f aec4 	beq.w	4043ea <_malloc_r+0x1ea>
  404662:	421c      	tst	r4, r3
  404664:	4640      	mov	r0, r8
  404666:	f47f ae3e 	bne.w	4042e6 <_malloc_r+0xe6>
  40466a:	0064      	lsls	r4, r4, #1
  40466c:	421c      	tst	r4, r3
  40466e:	f100 0004 	add.w	r0, r0, #4
  404672:	d0fa      	beq.n	40466a <_malloc_r+0x46a>
  404674:	e637      	b.n	4042e6 <_malloc_r+0xe6>
  404676:	468c      	mov	ip, r1
  404678:	e78c      	b.n	404594 <_malloc_r+0x394>
  40467a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40467e:	d815      	bhi.n	4046ac <_malloc_r+0x4ac>
  404680:	0bf3      	lsrs	r3, r6, #15
  404682:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404686:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40468a:	00c3      	lsls	r3, r0, #3
  40468c:	e5da      	b.n	404244 <_malloc_r+0x44>
  40468e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404692:	e6ed      	b.n	404470 <_malloc_r+0x270>
  404694:	687b      	ldr	r3, [r7, #4]
  404696:	1092      	asrs	r2, r2, #2
  404698:	2101      	movs	r1, #1
  40469a:	fa01 f202 	lsl.w	r2, r1, r2
  40469e:	4313      	orrs	r3, r2
  4046a0:	607b      	str	r3, [r7, #4]
  4046a2:	4662      	mov	r2, ip
  4046a4:	e779      	b.n	40459a <_malloc_r+0x39a>
  4046a6:	2301      	movs	r3, #1
  4046a8:	6053      	str	r3, [r2, #4]
  4046aa:	e729      	b.n	404500 <_malloc_r+0x300>
  4046ac:	f240 5254 	movw	r2, #1364	; 0x554
  4046b0:	4293      	cmp	r3, r2
  4046b2:	d822      	bhi.n	4046fa <_malloc_r+0x4fa>
  4046b4:	0cb3      	lsrs	r3, r6, #18
  4046b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4046ba:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4046be:	00c3      	lsls	r3, r0, #3
  4046c0:	e5c0      	b.n	404244 <_malloc_r+0x44>
  4046c2:	f103 0b10 	add.w	fp, r3, #16
  4046c6:	e6ae      	b.n	404426 <_malloc_r+0x226>
  4046c8:	2a54      	cmp	r2, #84	; 0x54
  4046ca:	d829      	bhi.n	404720 <_malloc_r+0x520>
  4046cc:	0b1a      	lsrs	r2, r3, #12
  4046ce:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4046d2:	00c9      	lsls	r1, r1, #3
  4046d4:	326e      	adds	r2, #110	; 0x6e
  4046d6:	e74d      	b.n	404574 <_malloc_r+0x374>
  4046d8:	4b20      	ldr	r3, [pc, #128]	; (40475c <_malloc_r+0x55c>)
  4046da:	6819      	ldr	r1, [r3, #0]
  4046dc:	4459      	add	r1, fp
  4046de:	6019      	str	r1, [r3, #0]
  4046e0:	e6b2      	b.n	404448 <_malloc_r+0x248>
  4046e2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4046e6:	2800      	cmp	r0, #0
  4046e8:	f47f aeae 	bne.w	404448 <_malloc_r+0x248>
  4046ec:	eb08 030b 	add.w	r3, r8, fp
  4046f0:	68ba      	ldr	r2, [r7, #8]
  4046f2:	f043 0301 	orr.w	r3, r3, #1
  4046f6:	6053      	str	r3, [r2, #4]
  4046f8:	e6ee      	b.n	4044d8 <_malloc_r+0x2d8>
  4046fa:	207f      	movs	r0, #127	; 0x7f
  4046fc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404700:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404704:	e59e      	b.n	404244 <_malloc_r+0x44>
  404706:	f104 0108 	add.w	r1, r4, #8
  40470a:	4628      	mov	r0, r5
  40470c:	9300      	str	r3, [sp, #0]
  40470e:	f004 fa6f 	bl	408bf0 <_free_r>
  404712:	9b00      	ldr	r3, [sp, #0]
  404714:	6819      	ldr	r1, [r3, #0]
  404716:	e6df      	b.n	4044d8 <_malloc_r+0x2d8>
  404718:	2001      	movs	r0, #1
  40471a:	f04f 0900 	mov.w	r9, #0
  40471e:	e6bc      	b.n	40449a <_malloc_r+0x29a>
  404720:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404724:	d805      	bhi.n	404732 <_malloc_r+0x532>
  404726:	0bda      	lsrs	r2, r3, #15
  404728:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40472c:	00c9      	lsls	r1, r1, #3
  40472e:	3277      	adds	r2, #119	; 0x77
  404730:	e720      	b.n	404574 <_malloc_r+0x374>
  404732:	f240 5154 	movw	r1, #1364	; 0x554
  404736:	428a      	cmp	r2, r1
  404738:	d805      	bhi.n	404746 <_malloc_r+0x546>
  40473a:	0c9a      	lsrs	r2, r3, #18
  40473c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404740:	00c9      	lsls	r1, r1, #3
  404742:	327c      	adds	r2, #124	; 0x7c
  404744:	e716      	b.n	404574 <_malloc_r+0x374>
  404746:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40474a:	227e      	movs	r2, #126	; 0x7e
  40474c:	e712      	b.n	404574 <_malloc_r+0x374>
  40474e:	687b      	ldr	r3, [r7, #4]
  404750:	e780      	b.n	404654 <_malloc_r+0x454>
  404752:	08f0      	lsrs	r0, r6, #3
  404754:	f106 0308 	add.w	r3, r6, #8
  404758:	e600      	b.n	40435c <_malloc_r+0x15c>
  40475a:	bf00      	nop
  40475c:	20400dc4 	.word	0x20400dc4

00404760 <memcpy>:
  404760:	4684      	mov	ip, r0
  404762:	ea41 0300 	orr.w	r3, r1, r0
  404766:	f013 0303 	ands.w	r3, r3, #3
  40476a:	d16d      	bne.n	404848 <memcpy+0xe8>
  40476c:	3a40      	subs	r2, #64	; 0x40
  40476e:	d341      	bcc.n	4047f4 <memcpy+0x94>
  404770:	f851 3b04 	ldr.w	r3, [r1], #4
  404774:	f840 3b04 	str.w	r3, [r0], #4
  404778:	f851 3b04 	ldr.w	r3, [r1], #4
  40477c:	f840 3b04 	str.w	r3, [r0], #4
  404780:	f851 3b04 	ldr.w	r3, [r1], #4
  404784:	f840 3b04 	str.w	r3, [r0], #4
  404788:	f851 3b04 	ldr.w	r3, [r1], #4
  40478c:	f840 3b04 	str.w	r3, [r0], #4
  404790:	f851 3b04 	ldr.w	r3, [r1], #4
  404794:	f840 3b04 	str.w	r3, [r0], #4
  404798:	f851 3b04 	ldr.w	r3, [r1], #4
  40479c:	f840 3b04 	str.w	r3, [r0], #4
  4047a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a4:	f840 3b04 	str.w	r3, [r0], #4
  4047a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4047ac:	f840 3b04 	str.w	r3, [r0], #4
  4047b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b4:	f840 3b04 	str.w	r3, [r0], #4
  4047b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4047bc:	f840 3b04 	str.w	r3, [r0], #4
  4047c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c4:	f840 3b04 	str.w	r3, [r0], #4
  4047c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4047cc:	f840 3b04 	str.w	r3, [r0], #4
  4047d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d4:	f840 3b04 	str.w	r3, [r0], #4
  4047d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4047dc:	f840 3b04 	str.w	r3, [r0], #4
  4047e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4047e4:	f840 3b04 	str.w	r3, [r0], #4
  4047e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4047ec:	f840 3b04 	str.w	r3, [r0], #4
  4047f0:	3a40      	subs	r2, #64	; 0x40
  4047f2:	d2bd      	bcs.n	404770 <memcpy+0x10>
  4047f4:	3230      	adds	r2, #48	; 0x30
  4047f6:	d311      	bcc.n	40481c <memcpy+0xbc>
  4047f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4047fc:	f840 3b04 	str.w	r3, [r0], #4
  404800:	f851 3b04 	ldr.w	r3, [r1], #4
  404804:	f840 3b04 	str.w	r3, [r0], #4
  404808:	f851 3b04 	ldr.w	r3, [r1], #4
  40480c:	f840 3b04 	str.w	r3, [r0], #4
  404810:	f851 3b04 	ldr.w	r3, [r1], #4
  404814:	f840 3b04 	str.w	r3, [r0], #4
  404818:	3a10      	subs	r2, #16
  40481a:	d2ed      	bcs.n	4047f8 <memcpy+0x98>
  40481c:	320c      	adds	r2, #12
  40481e:	d305      	bcc.n	40482c <memcpy+0xcc>
  404820:	f851 3b04 	ldr.w	r3, [r1], #4
  404824:	f840 3b04 	str.w	r3, [r0], #4
  404828:	3a04      	subs	r2, #4
  40482a:	d2f9      	bcs.n	404820 <memcpy+0xc0>
  40482c:	3204      	adds	r2, #4
  40482e:	d008      	beq.n	404842 <memcpy+0xe2>
  404830:	07d2      	lsls	r2, r2, #31
  404832:	bf1c      	itt	ne
  404834:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404838:	f800 3b01 	strbne.w	r3, [r0], #1
  40483c:	d301      	bcc.n	404842 <memcpy+0xe2>
  40483e:	880b      	ldrh	r3, [r1, #0]
  404840:	8003      	strh	r3, [r0, #0]
  404842:	4660      	mov	r0, ip
  404844:	4770      	bx	lr
  404846:	bf00      	nop
  404848:	2a08      	cmp	r2, #8
  40484a:	d313      	bcc.n	404874 <memcpy+0x114>
  40484c:	078b      	lsls	r3, r1, #30
  40484e:	d08d      	beq.n	40476c <memcpy+0xc>
  404850:	f010 0303 	ands.w	r3, r0, #3
  404854:	d08a      	beq.n	40476c <memcpy+0xc>
  404856:	f1c3 0304 	rsb	r3, r3, #4
  40485a:	1ad2      	subs	r2, r2, r3
  40485c:	07db      	lsls	r3, r3, #31
  40485e:	bf1c      	itt	ne
  404860:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404864:	f800 3b01 	strbne.w	r3, [r0], #1
  404868:	d380      	bcc.n	40476c <memcpy+0xc>
  40486a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40486e:	f820 3b02 	strh.w	r3, [r0], #2
  404872:	e77b      	b.n	40476c <memcpy+0xc>
  404874:	3a04      	subs	r2, #4
  404876:	d3d9      	bcc.n	40482c <memcpy+0xcc>
  404878:	3a01      	subs	r2, #1
  40487a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40487e:	f800 3b01 	strb.w	r3, [r0], #1
  404882:	d2f9      	bcs.n	404878 <memcpy+0x118>
  404884:	780b      	ldrb	r3, [r1, #0]
  404886:	7003      	strb	r3, [r0, #0]
  404888:	784b      	ldrb	r3, [r1, #1]
  40488a:	7043      	strb	r3, [r0, #1]
  40488c:	788b      	ldrb	r3, [r1, #2]
  40488e:	7083      	strb	r3, [r0, #2]
  404890:	4660      	mov	r0, ip
  404892:	4770      	bx	lr

00404894 <memset>:
  404894:	b470      	push	{r4, r5, r6}
  404896:	0786      	lsls	r6, r0, #30
  404898:	d046      	beq.n	404928 <memset+0x94>
  40489a:	1e54      	subs	r4, r2, #1
  40489c:	2a00      	cmp	r2, #0
  40489e:	d041      	beq.n	404924 <memset+0x90>
  4048a0:	b2ca      	uxtb	r2, r1
  4048a2:	4603      	mov	r3, r0
  4048a4:	e002      	b.n	4048ac <memset+0x18>
  4048a6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4048aa:	d33b      	bcc.n	404924 <memset+0x90>
  4048ac:	f803 2b01 	strb.w	r2, [r3], #1
  4048b0:	079d      	lsls	r5, r3, #30
  4048b2:	d1f8      	bne.n	4048a6 <memset+0x12>
  4048b4:	2c03      	cmp	r4, #3
  4048b6:	d92e      	bls.n	404916 <memset+0x82>
  4048b8:	b2cd      	uxtb	r5, r1
  4048ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4048be:	2c0f      	cmp	r4, #15
  4048c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4048c4:	d919      	bls.n	4048fa <memset+0x66>
  4048c6:	f103 0210 	add.w	r2, r3, #16
  4048ca:	4626      	mov	r6, r4
  4048cc:	3e10      	subs	r6, #16
  4048ce:	2e0f      	cmp	r6, #15
  4048d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4048d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4048d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4048dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4048e0:	f102 0210 	add.w	r2, r2, #16
  4048e4:	d8f2      	bhi.n	4048cc <memset+0x38>
  4048e6:	f1a4 0210 	sub.w	r2, r4, #16
  4048ea:	f022 020f 	bic.w	r2, r2, #15
  4048ee:	f004 040f 	and.w	r4, r4, #15
  4048f2:	3210      	adds	r2, #16
  4048f4:	2c03      	cmp	r4, #3
  4048f6:	4413      	add	r3, r2
  4048f8:	d90d      	bls.n	404916 <memset+0x82>
  4048fa:	461e      	mov	r6, r3
  4048fc:	4622      	mov	r2, r4
  4048fe:	3a04      	subs	r2, #4
  404900:	2a03      	cmp	r2, #3
  404902:	f846 5b04 	str.w	r5, [r6], #4
  404906:	d8fa      	bhi.n	4048fe <memset+0x6a>
  404908:	1f22      	subs	r2, r4, #4
  40490a:	f022 0203 	bic.w	r2, r2, #3
  40490e:	3204      	adds	r2, #4
  404910:	4413      	add	r3, r2
  404912:	f004 0403 	and.w	r4, r4, #3
  404916:	b12c      	cbz	r4, 404924 <memset+0x90>
  404918:	b2c9      	uxtb	r1, r1
  40491a:	441c      	add	r4, r3
  40491c:	f803 1b01 	strb.w	r1, [r3], #1
  404920:	429c      	cmp	r4, r3
  404922:	d1fb      	bne.n	40491c <memset+0x88>
  404924:	bc70      	pop	{r4, r5, r6}
  404926:	4770      	bx	lr
  404928:	4614      	mov	r4, r2
  40492a:	4603      	mov	r3, r0
  40492c:	e7c2      	b.n	4048b4 <memset+0x20>
  40492e:	bf00      	nop

00404930 <__malloc_lock>:
  404930:	4801      	ldr	r0, [pc, #4]	; (404938 <__malloc_lock+0x8>)
  404932:	f004 bbf7 	b.w	409124 <__retarget_lock_acquire_recursive>
  404936:	bf00      	nop
  404938:	20400e7c 	.word	0x20400e7c

0040493c <__malloc_unlock>:
  40493c:	4801      	ldr	r0, [pc, #4]	; (404944 <__malloc_unlock+0x8>)
  40493e:	f004 bbf3 	b.w	409128 <__retarget_lock_release_recursive>
  404942:	bf00      	nop
  404944:	20400e7c 	.word	0x20400e7c

00404948 <printf>:
  404948:	b40f      	push	{r0, r1, r2, r3}
  40494a:	b500      	push	{lr}
  40494c:	4907      	ldr	r1, [pc, #28]	; (40496c <printf+0x24>)
  40494e:	b083      	sub	sp, #12
  404950:	ab04      	add	r3, sp, #16
  404952:	6808      	ldr	r0, [r1, #0]
  404954:	f853 2b04 	ldr.w	r2, [r3], #4
  404958:	6881      	ldr	r1, [r0, #8]
  40495a:	9301      	str	r3, [sp, #4]
  40495c:	f001 fc8c 	bl	406278 <_vfprintf_r>
  404960:	b003      	add	sp, #12
  404962:	f85d eb04 	ldr.w	lr, [sp], #4
  404966:	b004      	add	sp, #16
  404968:	4770      	bx	lr
  40496a:	bf00      	nop
  40496c:	20400028 	.word	0x20400028

00404970 <_puts_r>:
  404970:	b5f0      	push	{r4, r5, r6, r7, lr}
  404972:	4605      	mov	r5, r0
  404974:	b089      	sub	sp, #36	; 0x24
  404976:	4608      	mov	r0, r1
  404978:	460c      	mov	r4, r1
  40497a:	f000 f9e1 	bl	404d40 <strlen>
  40497e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404980:	4f21      	ldr	r7, [pc, #132]	; (404a08 <_puts_r+0x98>)
  404982:	9404      	str	r4, [sp, #16]
  404984:	2601      	movs	r6, #1
  404986:	1c44      	adds	r4, r0, #1
  404988:	a904      	add	r1, sp, #16
  40498a:	2202      	movs	r2, #2
  40498c:	9403      	str	r4, [sp, #12]
  40498e:	9005      	str	r0, [sp, #20]
  404990:	68ac      	ldr	r4, [r5, #8]
  404992:	9706      	str	r7, [sp, #24]
  404994:	9607      	str	r6, [sp, #28]
  404996:	9101      	str	r1, [sp, #4]
  404998:	9202      	str	r2, [sp, #8]
  40499a:	b353      	cbz	r3, 4049f2 <_puts_r+0x82>
  40499c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40499e:	f013 0f01 	tst.w	r3, #1
  4049a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049a6:	b29a      	uxth	r2, r3
  4049a8:	d101      	bne.n	4049ae <_puts_r+0x3e>
  4049aa:	0590      	lsls	r0, r2, #22
  4049ac:	d525      	bpl.n	4049fa <_puts_r+0x8a>
  4049ae:	0491      	lsls	r1, r2, #18
  4049b0:	d406      	bmi.n	4049c0 <_puts_r+0x50>
  4049b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4049b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4049b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4049bc:	81a3      	strh	r3, [r4, #12]
  4049be:	6662      	str	r2, [r4, #100]	; 0x64
  4049c0:	4628      	mov	r0, r5
  4049c2:	aa01      	add	r2, sp, #4
  4049c4:	4621      	mov	r1, r4
  4049c6:	f004 f9f9 	bl	408dbc <__sfvwrite_r>
  4049ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4049cc:	2800      	cmp	r0, #0
  4049ce:	bf0c      	ite	eq
  4049d0:	250a      	moveq	r5, #10
  4049d2:	f04f 35ff 	movne.w	r5, #4294967295
  4049d6:	07da      	lsls	r2, r3, #31
  4049d8:	d402      	bmi.n	4049e0 <_puts_r+0x70>
  4049da:	89a3      	ldrh	r3, [r4, #12]
  4049dc:	059b      	lsls	r3, r3, #22
  4049de:	d502      	bpl.n	4049e6 <_puts_r+0x76>
  4049e0:	4628      	mov	r0, r5
  4049e2:	b009      	add	sp, #36	; 0x24
  4049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049e8:	f004 fb9e 	bl	409128 <__retarget_lock_release_recursive>
  4049ec:	4628      	mov	r0, r5
  4049ee:	b009      	add	sp, #36	; 0x24
  4049f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049f2:	4628      	mov	r0, r5
  4049f4:	f004 f85a 	bl	408aac <__sinit>
  4049f8:	e7d0      	b.n	40499c <_puts_r+0x2c>
  4049fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049fc:	f004 fb92 	bl	409124 <__retarget_lock_acquire_recursive>
  404a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a04:	b29a      	uxth	r2, r3
  404a06:	e7d2      	b.n	4049ae <_puts_r+0x3e>
  404a08:	0040b460 	.word	0x0040b460

00404a0c <puts>:
  404a0c:	4b02      	ldr	r3, [pc, #8]	; (404a18 <puts+0xc>)
  404a0e:	4601      	mov	r1, r0
  404a10:	6818      	ldr	r0, [r3, #0]
  404a12:	f7ff bfad 	b.w	404970 <_puts_r>
  404a16:	bf00      	nop
  404a18:	20400028 	.word	0x20400028

00404a1c <_sbrk_r>:
  404a1c:	b538      	push	{r3, r4, r5, lr}
  404a1e:	4c07      	ldr	r4, [pc, #28]	; (404a3c <_sbrk_r+0x20>)
  404a20:	2300      	movs	r3, #0
  404a22:	4605      	mov	r5, r0
  404a24:	4608      	mov	r0, r1
  404a26:	6023      	str	r3, [r4, #0]
  404a28:	f7fc ff7c 	bl	401924 <_sbrk>
  404a2c:	1c43      	adds	r3, r0, #1
  404a2e:	d000      	beq.n	404a32 <_sbrk_r+0x16>
  404a30:	bd38      	pop	{r3, r4, r5, pc}
  404a32:	6823      	ldr	r3, [r4, #0]
  404a34:	2b00      	cmp	r3, #0
  404a36:	d0fb      	beq.n	404a30 <_sbrk_r+0x14>
  404a38:	602b      	str	r3, [r5, #0]
  404a3a:	bd38      	pop	{r3, r4, r5, pc}
  404a3c:	20400e90 	.word	0x20400e90

00404a40 <setbuf>:
  404a40:	2900      	cmp	r1, #0
  404a42:	bf0c      	ite	eq
  404a44:	2202      	moveq	r2, #2
  404a46:	2200      	movne	r2, #0
  404a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a4c:	f000 b800 	b.w	404a50 <setvbuf>

00404a50 <setvbuf>:
  404a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a54:	4c61      	ldr	r4, [pc, #388]	; (404bdc <setvbuf+0x18c>)
  404a56:	6825      	ldr	r5, [r4, #0]
  404a58:	b083      	sub	sp, #12
  404a5a:	4604      	mov	r4, r0
  404a5c:	460f      	mov	r7, r1
  404a5e:	4690      	mov	r8, r2
  404a60:	461e      	mov	r6, r3
  404a62:	b115      	cbz	r5, 404a6a <setvbuf+0x1a>
  404a64:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a66:	2b00      	cmp	r3, #0
  404a68:	d064      	beq.n	404b34 <setvbuf+0xe4>
  404a6a:	f1b8 0f02 	cmp.w	r8, #2
  404a6e:	d006      	beq.n	404a7e <setvbuf+0x2e>
  404a70:	f1b8 0f01 	cmp.w	r8, #1
  404a74:	f200 809f 	bhi.w	404bb6 <setvbuf+0x166>
  404a78:	2e00      	cmp	r6, #0
  404a7a:	f2c0 809c 	blt.w	404bb6 <setvbuf+0x166>
  404a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a80:	07d8      	lsls	r0, r3, #31
  404a82:	d534      	bpl.n	404aee <setvbuf+0x9e>
  404a84:	4621      	mov	r1, r4
  404a86:	4628      	mov	r0, r5
  404a88:	f003 ffb8 	bl	4089fc <_fflush_r>
  404a8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a8e:	b141      	cbz	r1, 404aa2 <setvbuf+0x52>
  404a90:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a94:	4299      	cmp	r1, r3
  404a96:	d002      	beq.n	404a9e <setvbuf+0x4e>
  404a98:	4628      	mov	r0, r5
  404a9a:	f004 f8a9 	bl	408bf0 <_free_r>
  404a9e:	2300      	movs	r3, #0
  404aa0:	6323      	str	r3, [r4, #48]	; 0x30
  404aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404aa6:	2200      	movs	r2, #0
  404aa8:	61a2      	str	r2, [r4, #24]
  404aaa:	6062      	str	r2, [r4, #4]
  404aac:	061a      	lsls	r2, r3, #24
  404aae:	d43a      	bmi.n	404b26 <setvbuf+0xd6>
  404ab0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404ab4:	f023 0303 	bic.w	r3, r3, #3
  404ab8:	f1b8 0f02 	cmp.w	r8, #2
  404abc:	81a3      	strh	r3, [r4, #12]
  404abe:	d01d      	beq.n	404afc <setvbuf+0xac>
  404ac0:	ab01      	add	r3, sp, #4
  404ac2:	466a      	mov	r2, sp
  404ac4:	4621      	mov	r1, r4
  404ac6:	4628      	mov	r0, r5
  404ac8:	f004 fb30 	bl	40912c <__swhatbuf_r>
  404acc:	89a3      	ldrh	r3, [r4, #12]
  404ace:	4318      	orrs	r0, r3
  404ad0:	81a0      	strh	r0, [r4, #12]
  404ad2:	2e00      	cmp	r6, #0
  404ad4:	d132      	bne.n	404b3c <setvbuf+0xec>
  404ad6:	9e00      	ldr	r6, [sp, #0]
  404ad8:	4630      	mov	r0, r6
  404ada:	f7ff fb81 	bl	4041e0 <malloc>
  404ade:	4607      	mov	r7, r0
  404ae0:	2800      	cmp	r0, #0
  404ae2:	d06b      	beq.n	404bbc <setvbuf+0x16c>
  404ae4:	89a3      	ldrh	r3, [r4, #12]
  404ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404aea:	81a3      	strh	r3, [r4, #12]
  404aec:	e028      	b.n	404b40 <setvbuf+0xf0>
  404aee:	89a3      	ldrh	r3, [r4, #12]
  404af0:	0599      	lsls	r1, r3, #22
  404af2:	d4c7      	bmi.n	404a84 <setvbuf+0x34>
  404af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404af6:	f004 fb15 	bl	409124 <__retarget_lock_acquire_recursive>
  404afa:	e7c3      	b.n	404a84 <setvbuf+0x34>
  404afc:	2500      	movs	r5, #0
  404afe:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404b00:	2600      	movs	r6, #0
  404b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404b06:	f043 0302 	orr.w	r3, r3, #2
  404b0a:	2001      	movs	r0, #1
  404b0c:	60a6      	str	r6, [r4, #8]
  404b0e:	07ce      	lsls	r6, r1, #31
  404b10:	81a3      	strh	r3, [r4, #12]
  404b12:	6022      	str	r2, [r4, #0]
  404b14:	6122      	str	r2, [r4, #16]
  404b16:	6160      	str	r0, [r4, #20]
  404b18:	d401      	bmi.n	404b1e <setvbuf+0xce>
  404b1a:	0598      	lsls	r0, r3, #22
  404b1c:	d53e      	bpl.n	404b9c <setvbuf+0x14c>
  404b1e:	4628      	mov	r0, r5
  404b20:	b003      	add	sp, #12
  404b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b26:	6921      	ldr	r1, [r4, #16]
  404b28:	4628      	mov	r0, r5
  404b2a:	f004 f861 	bl	408bf0 <_free_r>
  404b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b32:	e7bd      	b.n	404ab0 <setvbuf+0x60>
  404b34:	4628      	mov	r0, r5
  404b36:	f003 ffb9 	bl	408aac <__sinit>
  404b3a:	e796      	b.n	404a6a <setvbuf+0x1a>
  404b3c:	2f00      	cmp	r7, #0
  404b3e:	d0cb      	beq.n	404ad8 <setvbuf+0x88>
  404b40:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404b42:	2b00      	cmp	r3, #0
  404b44:	d033      	beq.n	404bae <setvbuf+0x15e>
  404b46:	9b00      	ldr	r3, [sp, #0]
  404b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b4c:	6027      	str	r7, [r4, #0]
  404b4e:	429e      	cmp	r6, r3
  404b50:	bf1c      	itt	ne
  404b52:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404b56:	81a2      	strhne	r2, [r4, #12]
  404b58:	f1b8 0f01 	cmp.w	r8, #1
  404b5c:	bf04      	itt	eq
  404b5e:	f042 0201 	orreq.w	r2, r2, #1
  404b62:	81a2      	strheq	r2, [r4, #12]
  404b64:	b292      	uxth	r2, r2
  404b66:	f012 0308 	ands.w	r3, r2, #8
  404b6a:	6127      	str	r7, [r4, #16]
  404b6c:	6166      	str	r6, [r4, #20]
  404b6e:	d00e      	beq.n	404b8e <setvbuf+0x13e>
  404b70:	07d1      	lsls	r1, r2, #31
  404b72:	d51a      	bpl.n	404baa <setvbuf+0x15a>
  404b74:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b76:	4276      	negs	r6, r6
  404b78:	2300      	movs	r3, #0
  404b7a:	f015 0501 	ands.w	r5, r5, #1
  404b7e:	61a6      	str	r6, [r4, #24]
  404b80:	60a3      	str	r3, [r4, #8]
  404b82:	d009      	beq.n	404b98 <setvbuf+0x148>
  404b84:	2500      	movs	r5, #0
  404b86:	4628      	mov	r0, r5
  404b88:	b003      	add	sp, #12
  404b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b8e:	60a3      	str	r3, [r4, #8]
  404b90:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b92:	f015 0501 	ands.w	r5, r5, #1
  404b96:	d1f5      	bne.n	404b84 <setvbuf+0x134>
  404b98:	0593      	lsls	r3, r2, #22
  404b9a:	d4c0      	bmi.n	404b1e <setvbuf+0xce>
  404b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b9e:	f004 fac3 	bl	409128 <__retarget_lock_release_recursive>
  404ba2:	4628      	mov	r0, r5
  404ba4:	b003      	add	sp, #12
  404ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404baa:	60a6      	str	r6, [r4, #8]
  404bac:	e7f0      	b.n	404b90 <setvbuf+0x140>
  404bae:	4628      	mov	r0, r5
  404bb0:	f003 ff7c 	bl	408aac <__sinit>
  404bb4:	e7c7      	b.n	404b46 <setvbuf+0xf6>
  404bb6:	f04f 35ff 	mov.w	r5, #4294967295
  404bba:	e7b0      	b.n	404b1e <setvbuf+0xce>
  404bbc:	f8dd 9000 	ldr.w	r9, [sp]
  404bc0:	45b1      	cmp	r9, r6
  404bc2:	d004      	beq.n	404bce <setvbuf+0x17e>
  404bc4:	4648      	mov	r0, r9
  404bc6:	f7ff fb0b 	bl	4041e0 <malloc>
  404bca:	4607      	mov	r7, r0
  404bcc:	b920      	cbnz	r0, 404bd8 <setvbuf+0x188>
  404bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bd2:	f04f 35ff 	mov.w	r5, #4294967295
  404bd6:	e792      	b.n	404afe <setvbuf+0xae>
  404bd8:	464e      	mov	r6, r9
  404bda:	e783      	b.n	404ae4 <setvbuf+0x94>
  404bdc:	20400028 	.word	0x20400028

00404be0 <sprintf>:
  404be0:	b40e      	push	{r1, r2, r3}
  404be2:	b5f0      	push	{r4, r5, r6, r7, lr}
  404be4:	b09c      	sub	sp, #112	; 0x70
  404be6:	ab21      	add	r3, sp, #132	; 0x84
  404be8:	490f      	ldr	r1, [pc, #60]	; (404c28 <sprintf+0x48>)
  404bea:	f853 2b04 	ldr.w	r2, [r3], #4
  404bee:	9301      	str	r3, [sp, #4]
  404bf0:	4605      	mov	r5, r0
  404bf2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404bf6:	6808      	ldr	r0, [r1, #0]
  404bf8:	9502      	str	r5, [sp, #8]
  404bfa:	f44f 7702 	mov.w	r7, #520	; 0x208
  404bfe:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404c02:	a902      	add	r1, sp, #8
  404c04:	9506      	str	r5, [sp, #24]
  404c06:	f8ad 7014 	strh.w	r7, [sp, #20]
  404c0a:	9404      	str	r4, [sp, #16]
  404c0c:	9407      	str	r4, [sp, #28]
  404c0e:	f8ad 6016 	strh.w	r6, [sp, #22]
  404c12:	f000 f903 	bl	404e1c <_svfprintf_r>
  404c16:	9b02      	ldr	r3, [sp, #8]
  404c18:	2200      	movs	r2, #0
  404c1a:	701a      	strb	r2, [r3, #0]
  404c1c:	b01c      	add	sp, #112	; 0x70
  404c1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404c22:	b003      	add	sp, #12
  404c24:	4770      	bx	lr
  404c26:	bf00      	nop
  404c28:	20400028 	.word	0x20400028

00404c2c <strcat>:
  404c2c:	0783      	lsls	r3, r0, #30
  404c2e:	b510      	push	{r4, lr}
  404c30:	4604      	mov	r4, r0
  404c32:	d110      	bne.n	404c56 <strcat+0x2a>
  404c34:	6802      	ldr	r2, [r0, #0]
  404c36:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404c3a:	ea23 0302 	bic.w	r3, r3, r2
  404c3e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404c42:	d108      	bne.n	404c56 <strcat+0x2a>
  404c44:	f850 2f04 	ldr.w	r2, [r0, #4]!
  404c48:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404c4c:	ea23 0302 	bic.w	r3, r3, r2
  404c50:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404c54:	d0f6      	beq.n	404c44 <strcat+0x18>
  404c56:	7803      	ldrb	r3, [r0, #0]
  404c58:	b11b      	cbz	r3, 404c62 <strcat+0x36>
  404c5a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404c5e:	2b00      	cmp	r3, #0
  404c60:	d1fb      	bne.n	404c5a <strcat+0x2e>
  404c62:	f000 f803 	bl	404c6c <strcpy>
  404c66:	4620      	mov	r0, r4
  404c68:	bd10      	pop	{r4, pc}
  404c6a:	bf00      	nop

00404c6c <strcpy>:
  404c6c:	ea80 0201 	eor.w	r2, r0, r1
  404c70:	4684      	mov	ip, r0
  404c72:	f012 0f03 	tst.w	r2, #3
  404c76:	d14f      	bne.n	404d18 <strcpy+0xac>
  404c78:	f011 0f03 	tst.w	r1, #3
  404c7c:	d132      	bne.n	404ce4 <strcpy+0x78>
  404c7e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  404c82:	f011 0f04 	tst.w	r1, #4
  404c86:	f851 3b04 	ldr.w	r3, [r1], #4
  404c8a:	d00b      	beq.n	404ca4 <strcpy+0x38>
  404c8c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404c90:	439a      	bics	r2, r3
  404c92:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404c96:	bf04      	itt	eq
  404c98:	f84c 3b04 	streq.w	r3, [ip], #4
  404c9c:	f851 3b04 	ldreq.w	r3, [r1], #4
  404ca0:	d116      	bne.n	404cd0 <strcpy+0x64>
  404ca2:	bf00      	nop
  404ca4:	f851 4b04 	ldr.w	r4, [r1], #4
  404ca8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404cac:	439a      	bics	r2, r3
  404cae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404cb2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  404cb6:	d10b      	bne.n	404cd0 <strcpy+0x64>
  404cb8:	f84c 3b04 	str.w	r3, [ip], #4
  404cbc:	43a2      	bics	r2, r4
  404cbe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404cc2:	bf04      	itt	eq
  404cc4:	f851 3b04 	ldreq.w	r3, [r1], #4
  404cc8:	f84c 4b04 	streq.w	r4, [ip], #4
  404ccc:	d0ea      	beq.n	404ca4 <strcpy+0x38>
  404cce:	4623      	mov	r3, r4
  404cd0:	f80c 3b01 	strb.w	r3, [ip], #1
  404cd4:	f013 0fff 	tst.w	r3, #255	; 0xff
  404cd8:	ea4f 2333 	mov.w	r3, r3, ror #8
  404cdc:	d1f8      	bne.n	404cd0 <strcpy+0x64>
  404cde:	f85d 4b04 	ldr.w	r4, [sp], #4
  404ce2:	4770      	bx	lr
  404ce4:	f011 0f01 	tst.w	r1, #1
  404ce8:	d006      	beq.n	404cf8 <strcpy+0x8c>
  404cea:	f811 2b01 	ldrb.w	r2, [r1], #1
  404cee:	f80c 2b01 	strb.w	r2, [ip], #1
  404cf2:	2a00      	cmp	r2, #0
  404cf4:	bf08      	it	eq
  404cf6:	4770      	bxeq	lr
  404cf8:	f011 0f02 	tst.w	r1, #2
  404cfc:	d0bf      	beq.n	404c7e <strcpy+0x12>
  404cfe:	f831 2b02 	ldrh.w	r2, [r1], #2
  404d02:	f012 0fff 	tst.w	r2, #255	; 0xff
  404d06:	bf16      	itet	ne
  404d08:	f82c 2b02 	strhne.w	r2, [ip], #2
  404d0c:	f88c 2000 	strbeq.w	r2, [ip]
  404d10:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404d14:	d1b3      	bne.n	404c7e <strcpy+0x12>
  404d16:	4770      	bx	lr
  404d18:	f811 2b01 	ldrb.w	r2, [r1], #1
  404d1c:	f80c 2b01 	strb.w	r2, [ip], #1
  404d20:	2a00      	cmp	r2, #0
  404d22:	d1f9      	bne.n	404d18 <strcpy+0xac>
  404d24:	4770      	bx	lr
  404d26:	bf00      	nop
	...

00404d40 <strlen>:
  404d40:	f890 f000 	pld	[r0]
  404d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404d48:	f020 0107 	bic.w	r1, r0, #7
  404d4c:	f06f 0c00 	mvn.w	ip, #0
  404d50:	f010 0407 	ands.w	r4, r0, #7
  404d54:	f891 f020 	pld	[r1, #32]
  404d58:	f040 8049 	bne.w	404dee <strlen+0xae>
  404d5c:	f04f 0400 	mov.w	r4, #0
  404d60:	f06f 0007 	mvn.w	r0, #7
  404d64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404d68:	f891 f040 	pld	[r1, #64]	; 0x40
  404d6c:	f100 0008 	add.w	r0, r0, #8
  404d70:	fa82 f24c 	uadd8	r2, r2, ip
  404d74:	faa4 f28c 	sel	r2, r4, ip
  404d78:	fa83 f34c 	uadd8	r3, r3, ip
  404d7c:	faa2 f38c 	sel	r3, r2, ip
  404d80:	bb4b      	cbnz	r3, 404dd6 <strlen+0x96>
  404d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404d86:	fa82 f24c 	uadd8	r2, r2, ip
  404d8a:	f100 0008 	add.w	r0, r0, #8
  404d8e:	faa4 f28c 	sel	r2, r4, ip
  404d92:	fa83 f34c 	uadd8	r3, r3, ip
  404d96:	faa2 f38c 	sel	r3, r2, ip
  404d9a:	b9e3      	cbnz	r3, 404dd6 <strlen+0x96>
  404d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404da0:	fa82 f24c 	uadd8	r2, r2, ip
  404da4:	f100 0008 	add.w	r0, r0, #8
  404da8:	faa4 f28c 	sel	r2, r4, ip
  404dac:	fa83 f34c 	uadd8	r3, r3, ip
  404db0:	faa2 f38c 	sel	r3, r2, ip
  404db4:	b97b      	cbnz	r3, 404dd6 <strlen+0x96>
  404db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404dba:	f101 0120 	add.w	r1, r1, #32
  404dbe:	fa82 f24c 	uadd8	r2, r2, ip
  404dc2:	f100 0008 	add.w	r0, r0, #8
  404dc6:	faa4 f28c 	sel	r2, r4, ip
  404dca:	fa83 f34c 	uadd8	r3, r3, ip
  404dce:	faa2 f38c 	sel	r3, r2, ip
  404dd2:	2b00      	cmp	r3, #0
  404dd4:	d0c6      	beq.n	404d64 <strlen+0x24>
  404dd6:	2a00      	cmp	r2, #0
  404dd8:	bf04      	itt	eq
  404dda:	3004      	addeq	r0, #4
  404ddc:	461a      	moveq	r2, r3
  404dde:	ba12      	rev	r2, r2
  404de0:	fab2 f282 	clz	r2, r2
  404de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404dec:	4770      	bx	lr
  404dee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404df2:	f004 0503 	and.w	r5, r4, #3
  404df6:	f1c4 0000 	rsb	r0, r4, #0
  404dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404dfe:	f014 0f04 	tst.w	r4, #4
  404e02:	f891 f040 	pld	[r1, #64]	; 0x40
  404e06:	fa0c f505 	lsl.w	r5, ip, r5
  404e0a:	ea62 0205 	orn	r2, r2, r5
  404e0e:	bf1c      	itt	ne
  404e10:	ea63 0305 	ornne	r3, r3, r5
  404e14:	4662      	movne	r2, ip
  404e16:	f04f 0400 	mov.w	r4, #0
  404e1a:	e7a9      	b.n	404d70 <strlen+0x30>

00404e1c <_svfprintf_r>:
  404e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e20:	b0c3      	sub	sp, #268	; 0x10c
  404e22:	460c      	mov	r4, r1
  404e24:	910b      	str	r1, [sp, #44]	; 0x2c
  404e26:	4692      	mov	sl, r2
  404e28:	930f      	str	r3, [sp, #60]	; 0x3c
  404e2a:	900c      	str	r0, [sp, #48]	; 0x30
  404e2c:	f004 f968 	bl	409100 <_localeconv_r>
  404e30:	6803      	ldr	r3, [r0, #0]
  404e32:	931a      	str	r3, [sp, #104]	; 0x68
  404e34:	4618      	mov	r0, r3
  404e36:	f7ff ff83 	bl	404d40 <strlen>
  404e3a:	89a3      	ldrh	r3, [r4, #12]
  404e3c:	9019      	str	r0, [sp, #100]	; 0x64
  404e3e:	0619      	lsls	r1, r3, #24
  404e40:	d503      	bpl.n	404e4a <_svfprintf_r+0x2e>
  404e42:	6923      	ldr	r3, [r4, #16]
  404e44:	2b00      	cmp	r3, #0
  404e46:	f001 8003 	beq.w	405e50 <_svfprintf_r+0x1034>
  404e4a:	2300      	movs	r3, #0
  404e4c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404e50:	9313      	str	r3, [sp, #76]	; 0x4c
  404e52:	9315      	str	r3, [sp, #84]	; 0x54
  404e54:	9314      	str	r3, [sp, #80]	; 0x50
  404e56:	9327      	str	r3, [sp, #156]	; 0x9c
  404e58:	9326      	str	r3, [sp, #152]	; 0x98
  404e5a:	9318      	str	r3, [sp, #96]	; 0x60
  404e5c:	931b      	str	r3, [sp, #108]	; 0x6c
  404e5e:	9309      	str	r3, [sp, #36]	; 0x24
  404e60:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404e64:	46c8      	mov	r8, r9
  404e66:	9316      	str	r3, [sp, #88]	; 0x58
  404e68:	9317      	str	r3, [sp, #92]	; 0x5c
  404e6a:	f89a 3000 	ldrb.w	r3, [sl]
  404e6e:	4654      	mov	r4, sl
  404e70:	b1e3      	cbz	r3, 404eac <_svfprintf_r+0x90>
  404e72:	2b25      	cmp	r3, #37	; 0x25
  404e74:	d102      	bne.n	404e7c <_svfprintf_r+0x60>
  404e76:	e019      	b.n	404eac <_svfprintf_r+0x90>
  404e78:	2b25      	cmp	r3, #37	; 0x25
  404e7a:	d003      	beq.n	404e84 <_svfprintf_r+0x68>
  404e7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404e80:	2b00      	cmp	r3, #0
  404e82:	d1f9      	bne.n	404e78 <_svfprintf_r+0x5c>
  404e84:	eba4 050a 	sub.w	r5, r4, sl
  404e88:	b185      	cbz	r5, 404eac <_svfprintf_r+0x90>
  404e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e8e:	f8c8 a000 	str.w	sl, [r8]
  404e92:	3301      	adds	r3, #1
  404e94:	442a      	add	r2, r5
  404e96:	2b07      	cmp	r3, #7
  404e98:	f8c8 5004 	str.w	r5, [r8, #4]
  404e9c:	9227      	str	r2, [sp, #156]	; 0x9c
  404e9e:	9326      	str	r3, [sp, #152]	; 0x98
  404ea0:	dc7f      	bgt.n	404fa2 <_svfprintf_r+0x186>
  404ea2:	f108 0808 	add.w	r8, r8, #8
  404ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ea8:	442b      	add	r3, r5
  404eaa:	9309      	str	r3, [sp, #36]	; 0x24
  404eac:	7823      	ldrb	r3, [r4, #0]
  404eae:	2b00      	cmp	r3, #0
  404eb0:	d07f      	beq.n	404fb2 <_svfprintf_r+0x196>
  404eb2:	2300      	movs	r3, #0
  404eb4:	461a      	mov	r2, r3
  404eb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404eba:	4619      	mov	r1, r3
  404ebc:	930d      	str	r3, [sp, #52]	; 0x34
  404ebe:	469b      	mov	fp, r3
  404ec0:	f04f 30ff 	mov.w	r0, #4294967295
  404ec4:	7863      	ldrb	r3, [r4, #1]
  404ec6:	900a      	str	r0, [sp, #40]	; 0x28
  404ec8:	f104 0a01 	add.w	sl, r4, #1
  404ecc:	f10a 0a01 	add.w	sl, sl, #1
  404ed0:	f1a3 0020 	sub.w	r0, r3, #32
  404ed4:	2858      	cmp	r0, #88	; 0x58
  404ed6:	f200 83c1 	bhi.w	40565c <_svfprintf_r+0x840>
  404eda:	e8df f010 	tbh	[pc, r0, lsl #1]
  404ede:	0238      	.short	0x0238
  404ee0:	03bf03bf 	.word	0x03bf03bf
  404ee4:	03bf0240 	.word	0x03bf0240
  404ee8:	03bf03bf 	.word	0x03bf03bf
  404eec:	03bf03bf 	.word	0x03bf03bf
  404ef0:	024503bf 	.word	0x024503bf
  404ef4:	03bf0203 	.word	0x03bf0203
  404ef8:	026b005d 	.word	0x026b005d
  404efc:	028603bf 	.word	0x028603bf
  404f00:	039d039d 	.word	0x039d039d
  404f04:	039d039d 	.word	0x039d039d
  404f08:	039d039d 	.word	0x039d039d
  404f0c:	039d039d 	.word	0x039d039d
  404f10:	03bf039d 	.word	0x03bf039d
  404f14:	03bf03bf 	.word	0x03bf03bf
  404f18:	03bf03bf 	.word	0x03bf03bf
  404f1c:	03bf03bf 	.word	0x03bf03bf
  404f20:	03bf03bf 	.word	0x03bf03bf
  404f24:	033703bf 	.word	0x033703bf
  404f28:	03bf0357 	.word	0x03bf0357
  404f2c:	03bf0357 	.word	0x03bf0357
  404f30:	03bf03bf 	.word	0x03bf03bf
  404f34:	039803bf 	.word	0x039803bf
  404f38:	03bf03bf 	.word	0x03bf03bf
  404f3c:	03bf03ad 	.word	0x03bf03ad
  404f40:	03bf03bf 	.word	0x03bf03bf
  404f44:	03bf03bf 	.word	0x03bf03bf
  404f48:	03bf0259 	.word	0x03bf0259
  404f4c:	031e03bf 	.word	0x031e03bf
  404f50:	03bf03bf 	.word	0x03bf03bf
  404f54:	03bf03bf 	.word	0x03bf03bf
  404f58:	03bf03bf 	.word	0x03bf03bf
  404f5c:	03bf03bf 	.word	0x03bf03bf
  404f60:	03bf03bf 	.word	0x03bf03bf
  404f64:	02db02c6 	.word	0x02db02c6
  404f68:	03570357 	.word	0x03570357
  404f6c:	028b0357 	.word	0x028b0357
  404f70:	03bf02db 	.word	0x03bf02db
  404f74:	029003bf 	.word	0x029003bf
  404f78:	029d03bf 	.word	0x029d03bf
  404f7c:	02b401cc 	.word	0x02b401cc
  404f80:	03bf0208 	.word	0x03bf0208
  404f84:	03bf01e1 	.word	0x03bf01e1
  404f88:	03bf007e 	.word	0x03bf007e
  404f8c:	020d03bf 	.word	0x020d03bf
  404f90:	980d      	ldr	r0, [sp, #52]	; 0x34
  404f92:	930f      	str	r3, [sp, #60]	; 0x3c
  404f94:	4240      	negs	r0, r0
  404f96:	900d      	str	r0, [sp, #52]	; 0x34
  404f98:	f04b 0b04 	orr.w	fp, fp, #4
  404f9c:	f89a 3000 	ldrb.w	r3, [sl]
  404fa0:	e794      	b.n	404ecc <_svfprintf_r+0xb0>
  404fa2:	aa25      	add	r2, sp, #148	; 0x94
  404fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fa8:	f004 fed2 	bl	409d50 <__ssprint_r>
  404fac:	b940      	cbnz	r0, 404fc0 <_svfprintf_r+0x1a4>
  404fae:	46c8      	mov	r8, r9
  404fb0:	e779      	b.n	404ea6 <_svfprintf_r+0x8a>
  404fb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404fb4:	b123      	cbz	r3, 404fc0 <_svfprintf_r+0x1a4>
  404fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fba:	aa25      	add	r2, sp, #148	; 0x94
  404fbc:	f004 fec8 	bl	409d50 <__ssprint_r>
  404fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fc2:	899b      	ldrh	r3, [r3, #12]
  404fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
  404fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fca:	bf18      	it	ne
  404fcc:	f04f 33ff 	movne.w	r3, #4294967295
  404fd0:	9309      	str	r3, [sp, #36]	; 0x24
  404fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fd4:	b043      	add	sp, #268	; 0x10c
  404fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fda:	f01b 0f20 	tst.w	fp, #32
  404fde:	9311      	str	r3, [sp, #68]	; 0x44
  404fe0:	f040 81dd 	bne.w	40539e <_svfprintf_r+0x582>
  404fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fe6:	f01b 0f10 	tst.w	fp, #16
  404fea:	4613      	mov	r3, r2
  404fec:	f040 856e 	bne.w	405acc <_svfprintf_r+0xcb0>
  404ff0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404ff4:	f000 856a 	beq.w	405acc <_svfprintf_r+0xcb0>
  404ff8:	8814      	ldrh	r4, [r2, #0]
  404ffa:	3204      	adds	r2, #4
  404ffc:	2500      	movs	r5, #0
  404ffe:	2301      	movs	r3, #1
  405000:	920f      	str	r2, [sp, #60]	; 0x3c
  405002:	2700      	movs	r7, #0
  405004:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405008:	990a      	ldr	r1, [sp, #40]	; 0x28
  40500a:	1c4a      	adds	r2, r1, #1
  40500c:	f000 8265 	beq.w	4054da <_svfprintf_r+0x6be>
  405010:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405014:	9207      	str	r2, [sp, #28]
  405016:	ea54 0205 	orrs.w	r2, r4, r5
  40501a:	f040 8264 	bne.w	4054e6 <_svfprintf_r+0x6ca>
  40501e:	2900      	cmp	r1, #0
  405020:	f040 843c 	bne.w	40589c <_svfprintf_r+0xa80>
  405024:	2b00      	cmp	r3, #0
  405026:	f040 84d7 	bne.w	4059d8 <_svfprintf_r+0xbbc>
  40502a:	f01b 0301 	ands.w	r3, fp, #1
  40502e:	930e      	str	r3, [sp, #56]	; 0x38
  405030:	f000 8604 	beq.w	405c3c <_svfprintf_r+0xe20>
  405034:	ae42      	add	r6, sp, #264	; 0x108
  405036:	2330      	movs	r3, #48	; 0x30
  405038:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40503e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405040:	4293      	cmp	r3, r2
  405042:	bfb8      	it	lt
  405044:	4613      	movlt	r3, r2
  405046:	9308      	str	r3, [sp, #32]
  405048:	2300      	movs	r3, #0
  40504a:	9312      	str	r3, [sp, #72]	; 0x48
  40504c:	b117      	cbz	r7, 405054 <_svfprintf_r+0x238>
  40504e:	9b08      	ldr	r3, [sp, #32]
  405050:	3301      	adds	r3, #1
  405052:	9308      	str	r3, [sp, #32]
  405054:	9b07      	ldr	r3, [sp, #28]
  405056:	f013 0302 	ands.w	r3, r3, #2
  40505a:	9310      	str	r3, [sp, #64]	; 0x40
  40505c:	d002      	beq.n	405064 <_svfprintf_r+0x248>
  40505e:	9b08      	ldr	r3, [sp, #32]
  405060:	3302      	adds	r3, #2
  405062:	9308      	str	r3, [sp, #32]
  405064:	9b07      	ldr	r3, [sp, #28]
  405066:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40506a:	f040 830e 	bne.w	40568a <_svfprintf_r+0x86e>
  40506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405070:	9a08      	ldr	r2, [sp, #32]
  405072:	eba3 0b02 	sub.w	fp, r3, r2
  405076:	f1bb 0f00 	cmp.w	fp, #0
  40507a:	f340 8306 	ble.w	40568a <_svfprintf_r+0x86e>
  40507e:	f1bb 0f10 	cmp.w	fp, #16
  405082:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405084:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405086:	dd29      	ble.n	4050dc <_svfprintf_r+0x2c0>
  405088:	4643      	mov	r3, r8
  40508a:	4621      	mov	r1, r4
  40508c:	46a8      	mov	r8, r5
  40508e:	2710      	movs	r7, #16
  405090:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405092:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405094:	e006      	b.n	4050a4 <_svfprintf_r+0x288>
  405096:	f1ab 0b10 	sub.w	fp, fp, #16
  40509a:	f1bb 0f10 	cmp.w	fp, #16
  40509e:	f103 0308 	add.w	r3, r3, #8
  4050a2:	dd18      	ble.n	4050d6 <_svfprintf_r+0x2ba>
  4050a4:	3201      	adds	r2, #1
  4050a6:	48b7      	ldr	r0, [pc, #732]	; (405384 <_svfprintf_r+0x568>)
  4050a8:	9226      	str	r2, [sp, #152]	; 0x98
  4050aa:	3110      	adds	r1, #16
  4050ac:	2a07      	cmp	r2, #7
  4050ae:	9127      	str	r1, [sp, #156]	; 0x9c
  4050b0:	e883 0081 	stmia.w	r3, {r0, r7}
  4050b4:	ddef      	ble.n	405096 <_svfprintf_r+0x27a>
  4050b6:	aa25      	add	r2, sp, #148	; 0x94
  4050b8:	4629      	mov	r1, r5
  4050ba:	4620      	mov	r0, r4
  4050bc:	f004 fe48 	bl	409d50 <__ssprint_r>
  4050c0:	2800      	cmp	r0, #0
  4050c2:	f47f af7d 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4050c6:	f1ab 0b10 	sub.w	fp, fp, #16
  4050ca:	f1bb 0f10 	cmp.w	fp, #16
  4050ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4050d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4050d2:	464b      	mov	r3, r9
  4050d4:	dce6      	bgt.n	4050a4 <_svfprintf_r+0x288>
  4050d6:	4645      	mov	r5, r8
  4050d8:	460c      	mov	r4, r1
  4050da:	4698      	mov	r8, r3
  4050dc:	3201      	adds	r2, #1
  4050de:	4ba9      	ldr	r3, [pc, #676]	; (405384 <_svfprintf_r+0x568>)
  4050e0:	9226      	str	r2, [sp, #152]	; 0x98
  4050e2:	445c      	add	r4, fp
  4050e4:	2a07      	cmp	r2, #7
  4050e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4050e8:	e888 0808 	stmia.w	r8, {r3, fp}
  4050ec:	f300 8498 	bgt.w	405a20 <_svfprintf_r+0xc04>
  4050f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4050f4:	f108 0808 	add.w	r8, r8, #8
  4050f8:	b177      	cbz	r7, 405118 <_svfprintf_r+0x2fc>
  4050fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050fc:	3301      	adds	r3, #1
  4050fe:	3401      	adds	r4, #1
  405100:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  405104:	2201      	movs	r2, #1
  405106:	2b07      	cmp	r3, #7
  405108:	9427      	str	r4, [sp, #156]	; 0x9c
  40510a:	9326      	str	r3, [sp, #152]	; 0x98
  40510c:	e888 0006 	stmia.w	r8, {r1, r2}
  405110:	f300 83db 	bgt.w	4058ca <_svfprintf_r+0xaae>
  405114:	f108 0808 	add.w	r8, r8, #8
  405118:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40511a:	b16b      	cbz	r3, 405138 <_svfprintf_r+0x31c>
  40511c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40511e:	3301      	adds	r3, #1
  405120:	3402      	adds	r4, #2
  405122:	a91e      	add	r1, sp, #120	; 0x78
  405124:	2202      	movs	r2, #2
  405126:	2b07      	cmp	r3, #7
  405128:	9427      	str	r4, [sp, #156]	; 0x9c
  40512a:	9326      	str	r3, [sp, #152]	; 0x98
  40512c:	e888 0006 	stmia.w	r8, {r1, r2}
  405130:	f300 83d6 	bgt.w	4058e0 <_svfprintf_r+0xac4>
  405134:	f108 0808 	add.w	r8, r8, #8
  405138:	2d80      	cmp	r5, #128	; 0x80
  40513a:	f000 8315 	beq.w	405768 <_svfprintf_r+0x94c>
  40513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405142:	1a9f      	subs	r7, r3, r2
  405144:	2f00      	cmp	r7, #0
  405146:	dd36      	ble.n	4051b6 <_svfprintf_r+0x39a>
  405148:	2f10      	cmp	r7, #16
  40514a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40514c:	4d8e      	ldr	r5, [pc, #568]	; (405388 <_svfprintf_r+0x56c>)
  40514e:	dd27      	ble.n	4051a0 <_svfprintf_r+0x384>
  405150:	4642      	mov	r2, r8
  405152:	4621      	mov	r1, r4
  405154:	46b0      	mov	r8, r6
  405156:	f04f 0b10 	mov.w	fp, #16
  40515a:	462e      	mov	r6, r5
  40515c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40515e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405160:	e004      	b.n	40516c <_svfprintf_r+0x350>
  405162:	3f10      	subs	r7, #16
  405164:	2f10      	cmp	r7, #16
  405166:	f102 0208 	add.w	r2, r2, #8
  40516a:	dd15      	ble.n	405198 <_svfprintf_r+0x37c>
  40516c:	3301      	adds	r3, #1
  40516e:	3110      	adds	r1, #16
  405170:	2b07      	cmp	r3, #7
  405172:	9127      	str	r1, [sp, #156]	; 0x9c
  405174:	9326      	str	r3, [sp, #152]	; 0x98
  405176:	e882 0840 	stmia.w	r2, {r6, fp}
  40517a:	ddf2      	ble.n	405162 <_svfprintf_r+0x346>
  40517c:	aa25      	add	r2, sp, #148	; 0x94
  40517e:	4629      	mov	r1, r5
  405180:	4620      	mov	r0, r4
  405182:	f004 fde5 	bl	409d50 <__ssprint_r>
  405186:	2800      	cmp	r0, #0
  405188:	f47f af1a 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  40518c:	3f10      	subs	r7, #16
  40518e:	2f10      	cmp	r7, #16
  405190:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405192:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405194:	464a      	mov	r2, r9
  405196:	dce9      	bgt.n	40516c <_svfprintf_r+0x350>
  405198:	4635      	mov	r5, r6
  40519a:	460c      	mov	r4, r1
  40519c:	4646      	mov	r6, r8
  40519e:	4690      	mov	r8, r2
  4051a0:	3301      	adds	r3, #1
  4051a2:	443c      	add	r4, r7
  4051a4:	2b07      	cmp	r3, #7
  4051a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4051a8:	9326      	str	r3, [sp, #152]	; 0x98
  4051aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051ae:	f300 8381 	bgt.w	4058b4 <_svfprintf_r+0xa98>
  4051b2:	f108 0808 	add.w	r8, r8, #8
  4051b6:	9b07      	ldr	r3, [sp, #28]
  4051b8:	05df      	lsls	r7, r3, #23
  4051ba:	f100 8268 	bmi.w	40568e <_svfprintf_r+0x872>
  4051be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051c0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4051c2:	f8c8 6000 	str.w	r6, [r8]
  4051c6:	3301      	adds	r3, #1
  4051c8:	440c      	add	r4, r1
  4051ca:	2b07      	cmp	r3, #7
  4051cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4051ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4051d2:	9326      	str	r3, [sp, #152]	; 0x98
  4051d4:	f300 834d 	bgt.w	405872 <_svfprintf_r+0xa56>
  4051d8:	f108 0808 	add.w	r8, r8, #8
  4051dc:	9b07      	ldr	r3, [sp, #28]
  4051de:	075b      	lsls	r3, r3, #29
  4051e0:	d53a      	bpl.n	405258 <_svfprintf_r+0x43c>
  4051e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051e4:	9a08      	ldr	r2, [sp, #32]
  4051e6:	1a9d      	subs	r5, r3, r2
  4051e8:	2d00      	cmp	r5, #0
  4051ea:	dd35      	ble.n	405258 <_svfprintf_r+0x43c>
  4051ec:	2d10      	cmp	r5, #16
  4051ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051f0:	dd20      	ble.n	405234 <_svfprintf_r+0x418>
  4051f2:	2610      	movs	r6, #16
  4051f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4051f6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4051fa:	e004      	b.n	405206 <_svfprintf_r+0x3ea>
  4051fc:	3d10      	subs	r5, #16
  4051fe:	2d10      	cmp	r5, #16
  405200:	f108 0808 	add.w	r8, r8, #8
  405204:	dd16      	ble.n	405234 <_svfprintf_r+0x418>
  405206:	3301      	adds	r3, #1
  405208:	4a5e      	ldr	r2, [pc, #376]	; (405384 <_svfprintf_r+0x568>)
  40520a:	9326      	str	r3, [sp, #152]	; 0x98
  40520c:	3410      	adds	r4, #16
  40520e:	2b07      	cmp	r3, #7
  405210:	9427      	str	r4, [sp, #156]	; 0x9c
  405212:	e888 0044 	stmia.w	r8, {r2, r6}
  405216:	ddf1      	ble.n	4051fc <_svfprintf_r+0x3e0>
  405218:	aa25      	add	r2, sp, #148	; 0x94
  40521a:	4659      	mov	r1, fp
  40521c:	4638      	mov	r0, r7
  40521e:	f004 fd97 	bl	409d50 <__ssprint_r>
  405222:	2800      	cmp	r0, #0
  405224:	f47f aecc 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405228:	3d10      	subs	r5, #16
  40522a:	2d10      	cmp	r5, #16
  40522c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40522e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405230:	46c8      	mov	r8, r9
  405232:	dce8      	bgt.n	405206 <_svfprintf_r+0x3ea>
  405234:	3301      	adds	r3, #1
  405236:	4a53      	ldr	r2, [pc, #332]	; (405384 <_svfprintf_r+0x568>)
  405238:	9326      	str	r3, [sp, #152]	; 0x98
  40523a:	442c      	add	r4, r5
  40523c:	2b07      	cmp	r3, #7
  40523e:	9427      	str	r4, [sp, #156]	; 0x9c
  405240:	e888 0024 	stmia.w	r8, {r2, r5}
  405244:	dd08      	ble.n	405258 <_svfprintf_r+0x43c>
  405246:	aa25      	add	r2, sp, #148	; 0x94
  405248:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40524a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40524c:	f004 fd80 	bl	409d50 <__ssprint_r>
  405250:	2800      	cmp	r0, #0
  405252:	f47f aeb5 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405256:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405258:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40525a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40525c:	9908      	ldr	r1, [sp, #32]
  40525e:	428a      	cmp	r2, r1
  405260:	bfac      	ite	ge
  405262:	189b      	addge	r3, r3, r2
  405264:	185b      	addlt	r3, r3, r1
  405266:	9309      	str	r3, [sp, #36]	; 0x24
  405268:	2c00      	cmp	r4, #0
  40526a:	f040 830d 	bne.w	405888 <_svfprintf_r+0xa6c>
  40526e:	2300      	movs	r3, #0
  405270:	9326      	str	r3, [sp, #152]	; 0x98
  405272:	46c8      	mov	r8, r9
  405274:	e5f9      	b.n	404e6a <_svfprintf_r+0x4e>
  405276:	9311      	str	r3, [sp, #68]	; 0x44
  405278:	f01b 0320 	ands.w	r3, fp, #32
  40527c:	f040 81e3 	bne.w	405646 <_svfprintf_r+0x82a>
  405280:	f01b 0210 	ands.w	r2, fp, #16
  405284:	f040 842e 	bne.w	405ae4 <_svfprintf_r+0xcc8>
  405288:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40528c:	f000 842a 	beq.w	405ae4 <_svfprintf_r+0xcc8>
  405290:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405292:	4613      	mov	r3, r2
  405294:	460a      	mov	r2, r1
  405296:	3204      	adds	r2, #4
  405298:	880c      	ldrh	r4, [r1, #0]
  40529a:	920f      	str	r2, [sp, #60]	; 0x3c
  40529c:	2500      	movs	r5, #0
  40529e:	e6b0      	b.n	405002 <_svfprintf_r+0x1e6>
  4052a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052a2:	9311      	str	r3, [sp, #68]	; 0x44
  4052a4:	6816      	ldr	r6, [r2, #0]
  4052a6:	2400      	movs	r4, #0
  4052a8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4052ac:	1d15      	adds	r5, r2, #4
  4052ae:	2e00      	cmp	r6, #0
  4052b0:	f000 86a7 	beq.w	406002 <_svfprintf_r+0x11e6>
  4052b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052b6:	1c53      	adds	r3, r2, #1
  4052b8:	f000 8609 	beq.w	405ece <_svfprintf_r+0x10b2>
  4052bc:	4621      	mov	r1, r4
  4052be:	4630      	mov	r0, r6
  4052c0:	f003 ffae 	bl	409220 <memchr>
  4052c4:	2800      	cmp	r0, #0
  4052c6:	f000 86e1 	beq.w	40608c <_svfprintf_r+0x1270>
  4052ca:	1b83      	subs	r3, r0, r6
  4052cc:	930e      	str	r3, [sp, #56]	; 0x38
  4052ce:	940a      	str	r4, [sp, #40]	; 0x28
  4052d0:	950f      	str	r5, [sp, #60]	; 0x3c
  4052d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4052d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052da:	9308      	str	r3, [sp, #32]
  4052dc:	9412      	str	r4, [sp, #72]	; 0x48
  4052de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4052e2:	e6b3      	b.n	40504c <_svfprintf_r+0x230>
  4052e4:	f89a 3000 	ldrb.w	r3, [sl]
  4052e8:	2201      	movs	r2, #1
  4052ea:	212b      	movs	r1, #43	; 0x2b
  4052ec:	e5ee      	b.n	404ecc <_svfprintf_r+0xb0>
  4052ee:	f04b 0b20 	orr.w	fp, fp, #32
  4052f2:	f89a 3000 	ldrb.w	r3, [sl]
  4052f6:	e5e9      	b.n	404ecc <_svfprintf_r+0xb0>
  4052f8:	9311      	str	r3, [sp, #68]	; 0x44
  4052fa:	2a00      	cmp	r2, #0
  4052fc:	f040 8795 	bne.w	40622a <_svfprintf_r+0x140e>
  405300:	4b22      	ldr	r3, [pc, #136]	; (40538c <_svfprintf_r+0x570>)
  405302:	9318      	str	r3, [sp, #96]	; 0x60
  405304:	f01b 0f20 	tst.w	fp, #32
  405308:	f040 8111 	bne.w	40552e <_svfprintf_r+0x712>
  40530c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40530e:	f01b 0f10 	tst.w	fp, #16
  405312:	4613      	mov	r3, r2
  405314:	f040 83e1 	bne.w	405ada <_svfprintf_r+0xcbe>
  405318:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40531c:	f000 83dd 	beq.w	405ada <_svfprintf_r+0xcbe>
  405320:	3304      	adds	r3, #4
  405322:	8814      	ldrh	r4, [r2, #0]
  405324:	930f      	str	r3, [sp, #60]	; 0x3c
  405326:	2500      	movs	r5, #0
  405328:	f01b 0f01 	tst.w	fp, #1
  40532c:	f000 810c 	beq.w	405548 <_svfprintf_r+0x72c>
  405330:	ea54 0305 	orrs.w	r3, r4, r5
  405334:	f000 8108 	beq.w	405548 <_svfprintf_r+0x72c>
  405338:	2330      	movs	r3, #48	; 0x30
  40533a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40533e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  405342:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405346:	f04b 0b02 	orr.w	fp, fp, #2
  40534a:	2302      	movs	r3, #2
  40534c:	e659      	b.n	405002 <_svfprintf_r+0x1e6>
  40534e:	f89a 3000 	ldrb.w	r3, [sl]
  405352:	2900      	cmp	r1, #0
  405354:	f47f adba 	bne.w	404ecc <_svfprintf_r+0xb0>
  405358:	2201      	movs	r2, #1
  40535a:	2120      	movs	r1, #32
  40535c:	e5b6      	b.n	404ecc <_svfprintf_r+0xb0>
  40535e:	f04b 0b01 	orr.w	fp, fp, #1
  405362:	f89a 3000 	ldrb.w	r3, [sl]
  405366:	e5b1      	b.n	404ecc <_svfprintf_r+0xb0>
  405368:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40536a:	6823      	ldr	r3, [r4, #0]
  40536c:	930d      	str	r3, [sp, #52]	; 0x34
  40536e:	4618      	mov	r0, r3
  405370:	2800      	cmp	r0, #0
  405372:	4623      	mov	r3, r4
  405374:	f103 0304 	add.w	r3, r3, #4
  405378:	f6ff ae0a 	blt.w	404f90 <_svfprintf_r+0x174>
  40537c:	930f      	str	r3, [sp, #60]	; 0x3c
  40537e:	f89a 3000 	ldrb.w	r3, [sl]
  405382:	e5a3      	b.n	404ecc <_svfprintf_r+0xb0>
  405384:	0040b4a8 	.word	0x0040b4a8
  405388:	0040b4b8 	.word	0x0040b4b8
  40538c:	0040b488 	.word	0x0040b488
  405390:	f04b 0b10 	orr.w	fp, fp, #16
  405394:	f01b 0f20 	tst.w	fp, #32
  405398:	9311      	str	r3, [sp, #68]	; 0x44
  40539a:	f43f ae23 	beq.w	404fe4 <_svfprintf_r+0x1c8>
  40539e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4053a0:	3507      	adds	r5, #7
  4053a2:	f025 0307 	bic.w	r3, r5, #7
  4053a6:	f103 0208 	add.w	r2, r3, #8
  4053aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4053ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4053b0:	2301      	movs	r3, #1
  4053b2:	e626      	b.n	405002 <_svfprintf_r+0x1e6>
  4053b4:	f89a 3000 	ldrb.w	r3, [sl]
  4053b8:	2b2a      	cmp	r3, #42	; 0x2a
  4053ba:	f10a 0401 	add.w	r4, sl, #1
  4053be:	f000 8727 	beq.w	406210 <_svfprintf_r+0x13f4>
  4053c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4053c6:	2809      	cmp	r0, #9
  4053c8:	46a2      	mov	sl, r4
  4053ca:	f200 86ad 	bhi.w	406128 <_svfprintf_r+0x130c>
  4053ce:	2300      	movs	r3, #0
  4053d0:	461c      	mov	r4, r3
  4053d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4053d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4053da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4053de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4053e2:	2809      	cmp	r0, #9
  4053e4:	d9f5      	bls.n	4053d2 <_svfprintf_r+0x5b6>
  4053e6:	940a      	str	r4, [sp, #40]	; 0x28
  4053e8:	e572      	b.n	404ed0 <_svfprintf_r+0xb4>
  4053ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4053ee:	f89a 3000 	ldrb.w	r3, [sl]
  4053f2:	e56b      	b.n	404ecc <_svfprintf_r+0xb0>
  4053f4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4053f8:	f89a 3000 	ldrb.w	r3, [sl]
  4053fc:	e566      	b.n	404ecc <_svfprintf_r+0xb0>
  4053fe:	f89a 3000 	ldrb.w	r3, [sl]
  405402:	2b6c      	cmp	r3, #108	; 0x6c
  405404:	bf03      	ittte	eq
  405406:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40540a:	f04b 0b20 	orreq.w	fp, fp, #32
  40540e:	f10a 0a01 	addeq.w	sl, sl, #1
  405412:	f04b 0b10 	orrne.w	fp, fp, #16
  405416:	e559      	b.n	404ecc <_svfprintf_r+0xb0>
  405418:	2a00      	cmp	r2, #0
  40541a:	f040 8711 	bne.w	406240 <_svfprintf_r+0x1424>
  40541e:	f01b 0f20 	tst.w	fp, #32
  405422:	f040 84f9 	bne.w	405e18 <_svfprintf_r+0xffc>
  405426:	f01b 0f10 	tst.w	fp, #16
  40542a:	f040 84ac 	bne.w	405d86 <_svfprintf_r+0xf6a>
  40542e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405432:	f000 84a8 	beq.w	405d86 <_svfprintf_r+0xf6a>
  405436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405438:	6813      	ldr	r3, [r2, #0]
  40543a:	3204      	adds	r2, #4
  40543c:	920f      	str	r2, [sp, #60]	; 0x3c
  40543e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405442:	801a      	strh	r2, [r3, #0]
  405444:	e511      	b.n	404e6a <_svfprintf_r+0x4e>
  405446:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405448:	4bb3      	ldr	r3, [pc, #716]	; (405718 <_svfprintf_r+0x8fc>)
  40544a:	680c      	ldr	r4, [r1, #0]
  40544c:	9318      	str	r3, [sp, #96]	; 0x60
  40544e:	2230      	movs	r2, #48	; 0x30
  405450:	2378      	movs	r3, #120	; 0x78
  405452:	3104      	adds	r1, #4
  405454:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405458:	9311      	str	r3, [sp, #68]	; 0x44
  40545a:	f04b 0b02 	orr.w	fp, fp, #2
  40545e:	910f      	str	r1, [sp, #60]	; 0x3c
  405460:	2500      	movs	r5, #0
  405462:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405466:	2302      	movs	r3, #2
  405468:	e5cb      	b.n	405002 <_svfprintf_r+0x1e6>
  40546a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40546c:	9311      	str	r3, [sp, #68]	; 0x44
  40546e:	680a      	ldr	r2, [r1, #0]
  405470:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405474:	2300      	movs	r3, #0
  405476:	460a      	mov	r2, r1
  405478:	461f      	mov	r7, r3
  40547a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40547e:	3204      	adds	r2, #4
  405480:	2301      	movs	r3, #1
  405482:	9308      	str	r3, [sp, #32]
  405484:	f8cd b01c 	str.w	fp, [sp, #28]
  405488:	970a      	str	r7, [sp, #40]	; 0x28
  40548a:	9712      	str	r7, [sp, #72]	; 0x48
  40548c:	920f      	str	r2, [sp, #60]	; 0x3c
  40548e:	930e      	str	r3, [sp, #56]	; 0x38
  405490:	ae28      	add	r6, sp, #160	; 0xa0
  405492:	e5df      	b.n	405054 <_svfprintf_r+0x238>
  405494:	9311      	str	r3, [sp, #68]	; 0x44
  405496:	2a00      	cmp	r2, #0
  405498:	f040 86ea 	bne.w	406270 <_svfprintf_r+0x1454>
  40549c:	f01b 0f20 	tst.w	fp, #32
  4054a0:	d15d      	bne.n	40555e <_svfprintf_r+0x742>
  4054a2:	f01b 0f10 	tst.w	fp, #16
  4054a6:	f040 8308 	bne.w	405aba <_svfprintf_r+0xc9e>
  4054aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4054ae:	f000 8304 	beq.w	405aba <_svfprintf_r+0xc9e>
  4054b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4054b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4054b8:	3104      	adds	r1, #4
  4054ba:	17e5      	asrs	r5, r4, #31
  4054bc:	4622      	mov	r2, r4
  4054be:	462b      	mov	r3, r5
  4054c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4054c2:	2a00      	cmp	r2, #0
  4054c4:	f173 0300 	sbcs.w	r3, r3, #0
  4054c8:	db58      	blt.n	40557c <_svfprintf_r+0x760>
  4054ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4054cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4054d0:	1c4a      	adds	r2, r1, #1
  4054d2:	f04f 0301 	mov.w	r3, #1
  4054d6:	f47f ad9b 	bne.w	405010 <_svfprintf_r+0x1f4>
  4054da:	ea54 0205 	orrs.w	r2, r4, r5
  4054de:	f000 81df 	beq.w	4058a0 <_svfprintf_r+0xa84>
  4054e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4054e6:	2b01      	cmp	r3, #1
  4054e8:	f000 827b 	beq.w	4059e2 <_svfprintf_r+0xbc6>
  4054ec:	2b02      	cmp	r3, #2
  4054ee:	f040 8206 	bne.w	4058fe <_svfprintf_r+0xae2>
  4054f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4054f4:	464e      	mov	r6, r9
  4054f6:	0923      	lsrs	r3, r4, #4
  4054f8:	f004 010f 	and.w	r1, r4, #15
  4054fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405500:	092a      	lsrs	r2, r5, #4
  405502:	461c      	mov	r4, r3
  405504:	4615      	mov	r5, r2
  405506:	5c43      	ldrb	r3, [r0, r1]
  405508:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40550c:	ea54 0305 	orrs.w	r3, r4, r5
  405510:	d1f1      	bne.n	4054f6 <_svfprintf_r+0x6da>
  405512:	eba9 0306 	sub.w	r3, r9, r6
  405516:	930e      	str	r3, [sp, #56]	; 0x38
  405518:	e590      	b.n	40503c <_svfprintf_r+0x220>
  40551a:	9311      	str	r3, [sp, #68]	; 0x44
  40551c:	2a00      	cmp	r2, #0
  40551e:	f040 86a3 	bne.w	406268 <_svfprintf_r+0x144c>
  405522:	4b7e      	ldr	r3, [pc, #504]	; (40571c <_svfprintf_r+0x900>)
  405524:	9318      	str	r3, [sp, #96]	; 0x60
  405526:	f01b 0f20 	tst.w	fp, #32
  40552a:	f43f aeef 	beq.w	40530c <_svfprintf_r+0x4f0>
  40552e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405530:	3507      	adds	r5, #7
  405532:	f025 0307 	bic.w	r3, r5, #7
  405536:	f103 0208 	add.w	r2, r3, #8
  40553a:	f01b 0f01 	tst.w	fp, #1
  40553e:	920f      	str	r2, [sp, #60]	; 0x3c
  405540:	e9d3 4500 	ldrd	r4, r5, [r3]
  405544:	f47f aef4 	bne.w	405330 <_svfprintf_r+0x514>
  405548:	2302      	movs	r3, #2
  40554a:	e55a      	b.n	405002 <_svfprintf_r+0x1e6>
  40554c:	9311      	str	r3, [sp, #68]	; 0x44
  40554e:	2a00      	cmp	r2, #0
  405550:	f040 8686 	bne.w	406260 <_svfprintf_r+0x1444>
  405554:	f04b 0b10 	orr.w	fp, fp, #16
  405558:	f01b 0f20 	tst.w	fp, #32
  40555c:	d0a1      	beq.n	4054a2 <_svfprintf_r+0x686>
  40555e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405560:	3507      	adds	r5, #7
  405562:	f025 0507 	bic.w	r5, r5, #7
  405566:	e9d5 2300 	ldrd	r2, r3, [r5]
  40556a:	2a00      	cmp	r2, #0
  40556c:	f105 0108 	add.w	r1, r5, #8
  405570:	461d      	mov	r5, r3
  405572:	f173 0300 	sbcs.w	r3, r3, #0
  405576:	910f      	str	r1, [sp, #60]	; 0x3c
  405578:	4614      	mov	r4, r2
  40557a:	daa6      	bge.n	4054ca <_svfprintf_r+0x6ae>
  40557c:	272d      	movs	r7, #45	; 0x2d
  40557e:	4264      	negs	r4, r4
  405580:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405584:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405588:	2301      	movs	r3, #1
  40558a:	e53d      	b.n	405008 <_svfprintf_r+0x1ec>
  40558c:	9311      	str	r3, [sp, #68]	; 0x44
  40558e:	2a00      	cmp	r2, #0
  405590:	f040 8662 	bne.w	406258 <_svfprintf_r+0x143c>
  405594:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405596:	3507      	adds	r5, #7
  405598:	f025 0307 	bic.w	r3, r5, #7
  40559c:	f103 0208 	add.w	r2, r3, #8
  4055a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4055a2:	681a      	ldr	r2, [r3, #0]
  4055a4:	9215      	str	r2, [sp, #84]	; 0x54
  4055a6:	685b      	ldr	r3, [r3, #4]
  4055a8:	9314      	str	r3, [sp, #80]	; 0x50
  4055aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4055ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4055b2:	4628      	mov	r0, r5
  4055b4:	4621      	mov	r1, r4
  4055b6:	f04f 32ff 	mov.w	r2, #4294967295
  4055ba:	4b59      	ldr	r3, [pc, #356]	; (405720 <_svfprintf_r+0x904>)
  4055bc:	f005 fb88 	bl	40acd0 <__aeabi_dcmpun>
  4055c0:	2800      	cmp	r0, #0
  4055c2:	f040 834a 	bne.w	405c5a <_svfprintf_r+0xe3e>
  4055c6:	4628      	mov	r0, r5
  4055c8:	4621      	mov	r1, r4
  4055ca:	f04f 32ff 	mov.w	r2, #4294967295
  4055ce:	4b54      	ldr	r3, [pc, #336]	; (405720 <_svfprintf_r+0x904>)
  4055d0:	f005 fb60 	bl	40ac94 <__aeabi_dcmple>
  4055d4:	2800      	cmp	r0, #0
  4055d6:	f040 8340 	bne.w	405c5a <_svfprintf_r+0xe3e>
  4055da:	a815      	add	r0, sp, #84	; 0x54
  4055dc:	c80d      	ldmia	r0, {r0, r2, r3}
  4055de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4055e0:	f005 fb4e 	bl	40ac80 <__aeabi_dcmplt>
  4055e4:	2800      	cmp	r0, #0
  4055e6:	f040 8530 	bne.w	40604a <_svfprintf_r+0x122e>
  4055ea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4055ee:	4e4d      	ldr	r6, [pc, #308]	; (405724 <_svfprintf_r+0x908>)
  4055f0:	4b4d      	ldr	r3, [pc, #308]	; (405728 <_svfprintf_r+0x90c>)
  4055f2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4055f6:	9007      	str	r0, [sp, #28]
  4055f8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4055fa:	2203      	movs	r2, #3
  4055fc:	2100      	movs	r1, #0
  4055fe:	9208      	str	r2, [sp, #32]
  405600:	910a      	str	r1, [sp, #40]	; 0x28
  405602:	2847      	cmp	r0, #71	; 0x47
  405604:	bfd8      	it	le
  405606:	461e      	movle	r6, r3
  405608:	920e      	str	r2, [sp, #56]	; 0x38
  40560a:	9112      	str	r1, [sp, #72]	; 0x48
  40560c:	e51e      	b.n	40504c <_svfprintf_r+0x230>
  40560e:	f04b 0b08 	orr.w	fp, fp, #8
  405612:	f89a 3000 	ldrb.w	r3, [sl]
  405616:	e459      	b.n	404ecc <_svfprintf_r+0xb0>
  405618:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40561c:	2300      	movs	r3, #0
  40561e:	461c      	mov	r4, r3
  405620:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405624:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405628:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40562c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405630:	2809      	cmp	r0, #9
  405632:	d9f5      	bls.n	405620 <_svfprintf_r+0x804>
  405634:	940d      	str	r4, [sp, #52]	; 0x34
  405636:	e44b      	b.n	404ed0 <_svfprintf_r+0xb4>
  405638:	f04b 0b10 	orr.w	fp, fp, #16
  40563c:	9311      	str	r3, [sp, #68]	; 0x44
  40563e:	f01b 0320 	ands.w	r3, fp, #32
  405642:	f43f ae1d 	beq.w	405280 <_svfprintf_r+0x464>
  405646:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405648:	3507      	adds	r5, #7
  40564a:	f025 0307 	bic.w	r3, r5, #7
  40564e:	f103 0208 	add.w	r2, r3, #8
  405652:	e9d3 4500 	ldrd	r4, r5, [r3]
  405656:	920f      	str	r2, [sp, #60]	; 0x3c
  405658:	2300      	movs	r3, #0
  40565a:	e4d2      	b.n	405002 <_svfprintf_r+0x1e6>
  40565c:	9311      	str	r3, [sp, #68]	; 0x44
  40565e:	2a00      	cmp	r2, #0
  405660:	f040 85e7 	bne.w	406232 <_svfprintf_r+0x1416>
  405664:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405666:	2a00      	cmp	r2, #0
  405668:	f43f aca3 	beq.w	404fb2 <_svfprintf_r+0x196>
  40566c:	2300      	movs	r3, #0
  40566e:	2101      	movs	r1, #1
  405670:	461f      	mov	r7, r3
  405672:	9108      	str	r1, [sp, #32]
  405674:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405678:	f8cd b01c 	str.w	fp, [sp, #28]
  40567c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405680:	930a      	str	r3, [sp, #40]	; 0x28
  405682:	9312      	str	r3, [sp, #72]	; 0x48
  405684:	910e      	str	r1, [sp, #56]	; 0x38
  405686:	ae28      	add	r6, sp, #160	; 0xa0
  405688:	e4e4      	b.n	405054 <_svfprintf_r+0x238>
  40568a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40568c:	e534      	b.n	4050f8 <_svfprintf_r+0x2dc>
  40568e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405690:	2b65      	cmp	r3, #101	; 0x65
  405692:	f340 80a7 	ble.w	4057e4 <_svfprintf_r+0x9c8>
  405696:	a815      	add	r0, sp, #84	; 0x54
  405698:	c80d      	ldmia	r0, {r0, r2, r3}
  40569a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40569c:	f005 fae6 	bl	40ac6c <__aeabi_dcmpeq>
  4056a0:	2800      	cmp	r0, #0
  4056a2:	f000 8150 	beq.w	405946 <_svfprintf_r+0xb2a>
  4056a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056a8:	4a20      	ldr	r2, [pc, #128]	; (40572c <_svfprintf_r+0x910>)
  4056aa:	f8c8 2000 	str.w	r2, [r8]
  4056ae:	3301      	adds	r3, #1
  4056b0:	3401      	adds	r4, #1
  4056b2:	2201      	movs	r2, #1
  4056b4:	2b07      	cmp	r3, #7
  4056b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4056b8:	9326      	str	r3, [sp, #152]	; 0x98
  4056ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4056be:	f300 836a 	bgt.w	405d96 <_svfprintf_r+0xf7a>
  4056c2:	f108 0808 	add.w	r8, r8, #8
  4056c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4056c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4056ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056cc:	4293      	cmp	r3, r2
  4056ce:	db03      	blt.n	4056d8 <_svfprintf_r+0x8bc>
  4056d0:	9b07      	ldr	r3, [sp, #28]
  4056d2:	07dd      	lsls	r5, r3, #31
  4056d4:	f57f ad82 	bpl.w	4051dc <_svfprintf_r+0x3c0>
  4056d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056da:	9919      	ldr	r1, [sp, #100]	; 0x64
  4056dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4056de:	f8c8 2000 	str.w	r2, [r8]
  4056e2:	3301      	adds	r3, #1
  4056e4:	440c      	add	r4, r1
  4056e6:	2b07      	cmp	r3, #7
  4056e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4056ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4056ee:	9326      	str	r3, [sp, #152]	; 0x98
  4056f0:	f300 839e 	bgt.w	405e30 <_svfprintf_r+0x1014>
  4056f4:	f108 0808 	add.w	r8, r8, #8
  4056f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056fa:	1e5e      	subs	r6, r3, #1
  4056fc:	2e00      	cmp	r6, #0
  4056fe:	f77f ad6d 	ble.w	4051dc <_svfprintf_r+0x3c0>
  405702:	2e10      	cmp	r6, #16
  405704:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405706:	4d0a      	ldr	r5, [pc, #40]	; (405730 <_svfprintf_r+0x914>)
  405708:	f340 81f5 	ble.w	405af6 <_svfprintf_r+0xcda>
  40570c:	4622      	mov	r2, r4
  40570e:	2710      	movs	r7, #16
  405710:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405714:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405716:	e013      	b.n	405740 <_svfprintf_r+0x924>
  405718:	0040b488 	.word	0x0040b488
  40571c:	0040b474 	.word	0x0040b474
  405720:	7fefffff 	.word	0x7fefffff
  405724:	0040b468 	.word	0x0040b468
  405728:	0040b464 	.word	0x0040b464
  40572c:	0040b4a4 	.word	0x0040b4a4
  405730:	0040b4b8 	.word	0x0040b4b8
  405734:	f108 0808 	add.w	r8, r8, #8
  405738:	3e10      	subs	r6, #16
  40573a:	2e10      	cmp	r6, #16
  40573c:	f340 81da 	ble.w	405af4 <_svfprintf_r+0xcd8>
  405740:	3301      	adds	r3, #1
  405742:	3210      	adds	r2, #16
  405744:	2b07      	cmp	r3, #7
  405746:	9227      	str	r2, [sp, #156]	; 0x9c
  405748:	9326      	str	r3, [sp, #152]	; 0x98
  40574a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40574e:	ddf1      	ble.n	405734 <_svfprintf_r+0x918>
  405750:	aa25      	add	r2, sp, #148	; 0x94
  405752:	4621      	mov	r1, r4
  405754:	4658      	mov	r0, fp
  405756:	f004 fafb 	bl	409d50 <__ssprint_r>
  40575a:	2800      	cmp	r0, #0
  40575c:	f47f ac30 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405760:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405762:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405764:	46c8      	mov	r8, r9
  405766:	e7e7      	b.n	405738 <_svfprintf_r+0x91c>
  405768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40576a:	9a08      	ldr	r2, [sp, #32]
  40576c:	1a9f      	subs	r7, r3, r2
  40576e:	2f00      	cmp	r7, #0
  405770:	f77f ace5 	ble.w	40513e <_svfprintf_r+0x322>
  405774:	2f10      	cmp	r7, #16
  405776:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405778:	4db6      	ldr	r5, [pc, #728]	; (405a54 <_svfprintf_r+0xc38>)
  40577a:	dd27      	ble.n	4057cc <_svfprintf_r+0x9b0>
  40577c:	4642      	mov	r2, r8
  40577e:	4621      	mov	r1, r4
  405780:	46b0      	mov	r8, r6
  405782:	f04f 0b10 	mov.w	fp, #16
  405786:	462e      	mov	r6, r5
  405788:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40578a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40578c:	e004      	b.n	405798 <_svfprintf_r+0x97c>
  40578e:	3f10      	subs	r7, #16
  405790:	2f10      	cmp	r7, #16
  405792:	f102 0208 	add.w	r2, r2, #8
  405796:	dd15      	ble.n	4057c4 <_svfprintf_r+0x9a8>
  405798:	3301      	adds	r3, #1
  40579a:	3110      	adds	r1, #16
  40579c:	2b07      	cmp	r3, #7
  40579e:	9127      	str	r1, [sp, #156]	; 0x9c
  4057a0:	9326      	str	r3, [sp, #152]	; 0x98
  4057a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4057a6:	ddf2      	ble.n	40578e <_svfprintf_r+0x972>
  4057a8:	aa25      	add	r2, sp, #148	; 0x94
  4057aa:	4629      	mov	r1, r5
  4057ac:	4620      	mov	r0, r4
  4057ae:	f004 facf 	bl	409d50 <__ssprint_r>
  4057b2:	2800      	cmp	r0, #0
  4057b4:	f47f ac04 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4057b8:	3f10      	subs	r7, #16
  4057ba:	2f10      	cmp	r7, #16
  4057bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4057be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057c0:	464a      	mov	r2, r9
  4057c2:	dce9      	bgt.n	405798 <_svfprintf_r+0x97c>
  4057c4:	4635      	mov	r5, r6
  4057c6:	460c      	mov	r4, r1
  4057c8:	4646      	mov	r6, r8
  4057ca:	4690      	mov	r8, r2
  4057cc:	3301      	adds	r3, #1
  4057ce:	443c      	add	r4, r7
  4057d0:	2b07      	cmp	r3, #7
  4057d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4057d4:	9326      	str	r3, [sp, #152]	; 0x98
  4057d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4057da:	f300 8232 	bgt.w	405c42 <_svfprintf_r+0xe26>
  4057de:	f108 0808 	add.w	r8, r8, #8
  4057e2:	e4ac      	b.n	40513e <_svfprintf_r+0x322>
  4057e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4057e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4057e8:	2b01      	cmp	r3, #1
  4057ea:	f340 81fe 	ble.w	405bea <_svfprintf_r+0xdce>
  4057ee:	3701      	adds	r7, #1
  4057f0:	3401      	adds	r4, #1
  4057f2:	2301      	movs	r3, #1
  4057f4:	2f07      	cmp	r7, #7
  4057f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4057f8:	9726      	str	r7, [sp, #152]	; 0x98
  4057fa:	f8c8 6000 	str.w	r6, [r8]
  4057fe:	f8c8 3004 	str.w	r3, [r8, #4]
  405802:	f300 8203 	bgt.w	405c0c <_svfprintf_r+0xdf0>
  405806:	f108 0808 	add.w	r8, r8, #8
  40580a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40580c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40580e:	f8c8 3000 	str.w	r3, [r8]
  405812:	3701      	adds	r7, #1
  405814:	4414      	add	r4, r2
  405816:	2f07      	cmp	r7, #7
  405818:	9427      	str	r4, [sp, #156]	; 0x9c
  40581a:	9726      	str	r7, [sp, #152]	; 0x98
  40581c:	f8c8 2004 	str.w	r2, [r8, #4]
  405820:	f300 8200 	bgt.w	405c24 <_svfprintf_r+0xe08>
  405824:	f108 0808 	add.w	r8, r8, #8
  405828:	a815      	add	r0, sp, #84	; 0x54
  40582a:	c80d      	ldmia	r0, {r0, r2, r3}
  40582c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40582e:	f005 fa1d 	bl	40ac6c <__aeabi_dcmpeq>
  405832:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405834:	2800      	cmp	r0, #0
  405836:	f040 8101 	bne.w	405a3c <_svfprintf_r+0xc20>
  40583a:	3b01      	subs	r3, #1
  40583c:	3701      	adds	r7, #1
  40583e:	3601      	adds	r6, #1
  405840:	441c      	add	r4, r3
  405842:	2f07      	cmp	r7, #7
  405844:	9726      	str	r7, [sp, #152]	; 0x98
  405846:	9427      	str	r4, [sp, #156]	; 0x9c
  405848:	f8c8 6000 	str.w	r6, [r8]
  40584c:	f8c8 3004 	str.w	r3, [r8, #4]
  405850:	f300 8127 	bgt.w	405aa2 <_svfprintf_r+0xc86>
  405854:	f108 0808 	add.w	r8, r8, #8
  405858:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40585a:	f8c8 2004 	str.w	r2, [r8, #4]
  40585e:	3701      	adds	r7, #1
  405860:	4414      	add	r4, r2
  405862:	ab21      	add	r3, sp, #132	; 0x84
  405864:	2f07      	cmp	r7, #7
  405866:	9427      	str	r4, [sp, #156]	; 0x9c
  405868:	9726      	str	r7, [sp, #152]	; 0x98
  40586a:	f8c8 3000 	str.w	r3, [r8]
  40586e:	f77f acb3 	ble.w	4051d8 <_svfprintf_r+0x3bc>
  405872:	aa25      	add	r2, sp, #148	; 0x94
  405874:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405876:	980c      	ldr	r0, [sp, #48]	; 0x30
  405878:	f004 fa6a 	bl	409d50 <__ssprint_r>
  40587c:	2800      	cmp	r0, #0
  40587e:	f47f ab9f 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405882:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405884:	46c8      	mov	r8, r9
  405886:	e4a9      	b.n	4051dc <_svfprintf_r+0x3c0>
  405888:	aa25      	add	r2, sp, #148	; 0x94
  40588a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40588c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40588e:	f004 fa5f 	bl	409d50 <__ssprint_r>
  405892:	2800      	cmp	r0, #0
  405894:	f43f aceb 	beq.w	40526e <_svfprintf_r+0x452>
  405898:	f7ff bb92 	b.w	404fc0 <_svfprintf_r+0x1a4>
  40589c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4058a0:	2b01      	cmp	r3, #1
  4058a2:	f000 8134 	beq.w	405b0e <_svfprintf_r+0xcf2>
  4058a6:	2b02      	cmp	r3, #2
  4058a8:	d125      	bne.n	4058f6 <_svfprintf_r+0xada>
  4058aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4058ae:	2400      	movs	r4, #0
  4058b0:	2500      	movs	r5, #0
  4058b2:	e61e      	b.n	4054f2 <_svfprintf_r+0x6d6>
  4058b4:	aa25      	add	r2, sp, #148	; 0x94
  4058b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058ba:	f004 fa49 	bl	409d50 <__ssprint_r>
  4058be:	2800      	cmp	r0, #0
  4058c0:	f47f ab7e 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4058c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058c6:	46c8      	mov	r8, r9
  4058c8:	e475      	b.n	4051b6 <_svfprintf_r+0x39a>
  4058ca:	aa25      	add	r2, sp, #148	; 0x94
  4058cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058d0:	f004 fa3e 	bl	409d50 <__ssprint_r>
  4058d4:	2800      	cmp	r0, #0
  4058d6:	f47f ab73 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4058da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058dc:	46c8      	mov	r8, r9
  4058de:	e41b      	b.n	405118 <_svfprintf_r+0x2fc>
  4058e0:	aa25      	add	r2, sp, #148	; 0x94
  4058e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058e6:	f004 fa33 	bl	409d50 <__ssprint_r>
  4058ea:	2800      	cmp	r0, #0
  4058ec:	f47f ab68 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4058f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058f2:	46c8      	mov	r8, r9
  4058f4:	e420      	b.n	405138 <_svfprintf_r+0x31c>
  4058f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4058fa:	2400      	movs	r4, #0
  4058fc:	2500      	movs	r5, #0
  4058fe:	4649      	mov	r1, r9
  405900:	e000      	b.n	405904 <_svfprintf_r+0xae8>
  405902:	4631      	mov	r1, r6
  405904:	08e2      	lsrs	r2, r4, #3
  405906:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40590a:	08e8      	lsrs	r0, r5, #3
  40590c:	f004 0307 	and.w	r3, r4, #7
  405910:	4605      	mov	r5, r0
  405912:	4614      	mov	r4, r2
  405914:	3330      	adds	r3, #48	; 0x30
  405916:	ea54 0205 	orrs.w	r2, r4, r5
  40591a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40591e:	f101 36ff 	add.w	r6, r1, #4294967295
  405922:	d1ee      	bne.n	405902 <_svfprintf_r+0xae6>
  405924:	9a07      	ldr	r2, [sp, #28]
  405926:	07d2      	lsls	r2, r2, #31
  405928:	f57f adf3 	bpl.w	405512 <_svfprintf_r+0x6f6>
  40592c:	2b30      	cmp	r3, #48	; 0x30
  40592e:	f43f adf0 	beq.w	405512 <_svfprintf_r+0x6f6>
  405932:	3902      	subs	r1, #2
  405934:	2330      	movs	r3, #48	; 0x30
  405936:	f806 3c01 	strb.w	r3, [r6, #-1]
  40593a:	eba9 0301 	sub.w	r3, r9, r1
  40593e:	930e      	str	r3, [sp, #56]	; 0x38
  405940:	460e      	mov	r6, r1
  405942:	f7ff bb7b 	b.w	40503c <_svfprintf_r+0x220>
  405946:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405948:	2900      	cmp	r1, #0
  40594a:	f340 822e 	ble.w	405daa <_svfprintf_r+0xf8e>
  40594e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405952:	4293      	cmp	r3, r2
  405954:	bfa8      	it	ge
  405956:	4613      	movge	r3, r2
  405958:	2b00      	cmp	r3, #0
  40595a:	461f      	mov	r7, r3
  40595c:	dd0d      	ble.n	40597a <_svfprintf_r+0xb5e>
  40595e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405960:	f8c8 6000 	str.w	r6, [r8]
  405964:	3301      	adds	r3, #1
  405966:	443c      	add	r4, r7
  405968:	2b07      	cmp	r3, #7
  40596a:	9427      	str	r4, [sp, #156]	; 0x9c
  40596c:	f8c8 7004 	str.w	r7, [r8, #4]
  405970:	9326      	str	r3, [sp, #152]	; 0x98
  405972:	f300 831f 	bgt.w	405fb4 <_svfprintf_r+0x1198>
  405976:	f108 0808 	add.w	r8, r8, #8
  40597a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40597c:	2f00      	cmp	r7, #0
  40597e:	bfa8      	it	ge
  405980:	1bdb      	subge	r3, r3, r7
  405982:	2b00      	cmp	r3, #0
  405984:	461f      	mov	r7, r3
  405986:	f340 80d6 	ble.w	405b36 <_svfprintf_r+0xd1a>
  40598a:	2f10      	cmp	r7, #16
  40598c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40598e:	4d31      	ldr	r5, [pc, #196]	; (405a54 <_svfprintf_r+0xc38>)
  405990:	f340 81ed 	ble.w	405d6e <_svfprintf_r+0xf52>
  405994:	4642      	mov	r2, r8
  405996:	4621      	mov	r1, r4
  405998:	46b0      	mov	r8, r6
  40599a:	f04f 0b10 	mov.w	fp, #16
  40599e:	462e      	mov	r6, r5
  4059a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4059a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4059a4:	e004      	b.n	4059b0 <_svfprintf_r+0xb94>
  4059a6:	3208      	adds	r2, #8
  4059a8:	3f10      	subs	r7, #16
  4059aa:	2f10      	cmp	r7, #16
  4059ac:	f340 81db 	ble.w	405d66 <_svfprintf_r+0xf4a>
  4059b0:	3301      	adds	r3, #1
  4059b2:	3110      	adds	r1, #16
  4059b4:	2b07      	cmp	r3, #7
  4059b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4059b8:	9326      	str	r3, [sp, #152]	; 0x98
  4059ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4059be:	ddf2      	ble.n	4059a6 <_svfprintf_r+0xb8a>
  4059c0:	aa25      	add	r2, sp, #148	; 0x94
  4059c2:	4629      	mov	r1, r5
  4059c4:	4620      	mov	r0, r4
  4059c6:	f004 f9c3 	bl	409d50 <__ssprint_r>
  4059ca:	2800      	cmp	r0, #0
  4059cc:	f47f aaf8 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  4059d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4059d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059d4:	464a      	mov	r2, r9
  4059d6:	e7e7      	b.n	4059a8 <_svfprintf_r+0xb8c>
  4059d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059da:	930e      	str	r3, [sp, #56]	; 0x38
  4059dc:	464e      	mov	r6, r9
  4059de:	f7ff bb2d 	b.w	40503c <_svfprintf_r+0x220>
  4059e2:	2d00      	cmp	r5, #0
  4059e4:	bf08      	it	eq
  4059e6:	2c0a      	cmpeq	r4, #10
  4059e8:	f0c0 808f 	bcc.w	405b0a <_svfprintf_r+0xcee>
  4059ec:	464e      	mov	r6, r9
  4059ee:	4620      	mov	r0, r4
  4059f0:	4629      	mov	r1, r5
  4059f2:	220a      	movs	r2, #10
  4059f4:	2300      	movs	r3, #0
  4059f6:	f005 f9a9 	bl	40ad4c <__aeabi_uldivmod>
  4059fa:	3230      	adds	r2, #48	; 0x30
  4059fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405a00:	4620      	mov	r0, r4
  405a02:	4629      	mov	r1, r5
  405a04:	2300      	movs	r3, #0
  405a06:	220a      	movs	r2, #10
  405a08:	f005 f9a0 	bl	40ad4c <__aeabi_uldivmod>
  405a0c:	4604      	mov	r4, r0
  405a0e:	460d      	mov	r5, r1
  405a10:	ea54 0305 	orrs.w	r3, r4, r5
  405a14:	d1eb      	bne.n	4059ee <_svfprintf_r+0xbd2>
  405a16:	eba9 0306 	sub.w	r3, r9, r6
  405a1a:	930e      	str	r3, [sp, #56]	; 0x38
  405a1c:	f7ff bb0e 	b.w	40503c <_svfprintf_r+0x220>
  405a20:	aa25      	add	r2, sp, #148	; 0x94
  405a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a24:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a26:	f004 f993 	bl	409d50 <__ssprint_r>
  405a2a:	2800      	cmp	r0, #0
  405a2c:	f47f aac8 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405a30:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405a34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a36:	46c8      	mov	r8, r9
  405a38:	f7ff bb5e 	b.w	4050f8 <_svfprintf_r+0x2dc>
  405a3c:	1e5e      	subs	r6, r3, #1
  405a3e:	2e00      	cmp	r6, #0
  405a40:	f77f af0a 	ble.w	405858 <_svfprintf_r+0xa3c>
  405a44:	2e10      	cmp	r6, #16
  405a46:	4d03      	ldr	r5, [pc, #12]	; (405a54 <_svfprintf_r+0xc38>)
  405a48:	dd22      	ble.n	405a90 <_svfprintf_r+0xc74>
  405a4a:	4622      	mov	r2, r4
  405a4c:	f04f 0b10 	mov.w	fp, #16
  405a50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405a52:	e006      	b.n	405a62 <_svfprintf_r+0xc46>
  405a54:	0040b4b8 	.word	0x0040b4b8
  405a58:	3e10      	subs	r6, #16
  405a5a:	2e10      	cmp	r6, #16
  405a5c:	f108 0808 	add.w	r8, r8, #8
  405a60:	dd15      	ble.n	405a8e <_svfprintf_r+0xc72>
  405a62:	3701      	adds	r7, #1
  405a64:	3210      	adds	r2, #16
  405a66:	2f07      	cmp	r7, #7
  405a68:	9227      	str	r2, [sp, #156]	; 0x9c
  405a6a:	9726      	str	r7, [sp, #152]	; 0x98
  405a6c:	e888 0820 	stmia.w	r8, {r5, fp}
  405a70:	ddf2      	ble.n	405a58 <_svfprintf_r+0xc3c>
  405a72:	aa25      	add	r2, sp, #148	; 0x94
  405a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a76:	4620      	mov	r0, r4
  405a78:	f004 f96a 	bl	409d50 <__ssprint_r>
  405a7c:	2800      	cmp	r0, #0
  405a7e:	f47f aa9f 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405a82:	3e10      	subs	r6, #16
  405a84:	2e10      	cmp	r6, #16
  405a86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a88:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405a8a:	46c8      	mov	r8, r9
  405a8c:	dce9      	bgt.n	405a62 <_svfprintf_r+0xc46>
  405a8e:	4614      	mov	r4, r2
  405a90:	3701      	adds	r7, #1
  405a92:	4434      	add	r4, r6
  405a94:	2f07      	cmp	r7, #7
  405a96:	9427      	str	r4, [sp, #156]	; 0x9c
  405a98:	9726      	str	r7, [sp, #152]	; 0x98
  405a9a:	e888 0060 	stmia.w	r8, {r5, r6}
  405a9e:	f77f aed9 	ble.w	405854 <_svfprintf_r+0xa38>
  405aa2:	aa25      	add	r2, sp, #148	; 0x94
  405aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aa8:	f004 f952 	bl	409d50 <__ssprint_r>
  405aac:	2800      	cmp	r0, #0
  405aae:	f47f aa87 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405ab2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ab4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405ab6:	46c8      	mov	r8, r9
  405ab8:	e6ce      	b.n	405858 <_svfprintf_r+0xa3c>
  405aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405abc:	6814      	ldr	r4, [r2, #0]
  405abe:	4613      	mov	r3, r2
  405ac0:	3304      	adds	r3, #4
  405ac2:	17e5      	asrs	r5, r4, #31
  405ac4:	930f      	str	r3, [sp, #60]	; 0x3c
  405ac6:	4622      	mov	r2, r4
  405ac8:	462b      	mov	r3, r5
  405aca:	e4fa      	b.n	4054c2 <_svfprintf_r+0x6a6>
  405acc:	3204      	adds	r2, #4
  405ace:	681c      	ldr	r4, [r3, #0]
  405ad0:	920f      	str	r2, [sp, #60]	; 0x3c
  405ad2:	2301      	movs	r3, #1
  405ad4:	2500      	movs	r5, #0
  405ad6:	f7ff ba94 	b.w	405002 <_svfprintf_r+0x1e6>
  405ada:	681c      	ldr	r4, [r3, #0]
  405adc:	3304      	adds	r3, #4
  405ade:	930f      	str	r3, [sp, #60]	; 0x3c
  405ae0:	2500      	movs	r5, #0
  405ae2:	e421      	b.n	405328 <_svfprintf_r+0x50c>
  405ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405ae6:	460a      	mov	r2, r1
  405ae8:	3204      	adds	r2, #4
  405aea:	680c      	ldr	r4, [r1, #0]
  405aec:	920f      	str	r2, [sp, #60]	; 0x3c
  405aee:	2500      	movs	r5, #0
  405af0:	f7ff ba87 	b.w	405002 <_svfprintf_r+0x1e6>
  405af4:	4614      	mov	r4, r2
  405af6:	3301      	adds	r3, #1
  405af8:	4434      	add	r4, r6
  405afa:	2b07      	cmp	r3, #7
  405afc:	9427      	str	r4, [sp, #156]	; 0x9c
  405afe:	9326      	str	r3, [sp, #152]	; 0x98
  405b00:	e888 0060 	stmia.w	r8, {r5, r6}
  405b04:	f77f ab68 	ble.w	4051d8 <_svfprintf_r+0x3bc>
  405b08:	e6b3      	b.n	405872 <_svfprintf_r+0xa56>
  405b0a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405b0e:	f8cd b01c 	str.w	fp, [sp, #28]
  405b12:	ae42      	add	r6, sp, #264	; 0x108
  405b14:	3430      	adds	r4, #48	; 0x30
  405b16:	2301      	movs	r3, #1
  405b18:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405b1c:	930e      	str	r3, [sp, #56]	; 0x38
  405b1e:	f7ff ba8d 	b.w	40503c <_svfprintf_r+0x220>
  405b22:	aa25      	add	r2, sp, #148	; 0x94
  405b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b26:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b28:	f004 f912 	bl	409d50 <__ssprint_r>
  405b2c:	2800      	cmp	r0, #0
  405b2e:	f47f aa47 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405b32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b34:	46c8      	mov	r8, r9
  405b36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b3a:	429a      	cmp	r2, r3
  405b3c:	db44      	blt.n	405bc8 <_svfprintf_r+0xdac>
  405b3e:	9b07      	ldr	r3, [sp, #28]
  405b40:	07d9      	lsls	r1, r3, #31
  405b42:	d441      	bmi.n	405bc8 <_svfprintf_r+0xdac>
  405b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b46:	9812      	ldr	r0, [sp, #72]	; 0x48
  405b48:	1a9a      	subs	r2, r3, r2
  405b4a:	1a1d      	subs	r5, r3, r0
  405b4c:	4295      	cmp	r5, r2
  405b4e:	bfa8      	it	ge
  405b50:	4615      	movge	r5, r2
  405b52:	2d00      	cmp	r5, #0
  405b54:	dd0e      	ble.n	405b74 <_svfprintf_r+0xd58>
  405b56:	9926      	ldr	r1, [sp, #152]	; 0x98
  405b58:	f8c8 5004 	str.w	r5, [r8, #4]
  405b5c:	3101      	adds	r1, #1
  405b5e:	4406      	add	r6, r0
  405b60:	442c      	add	r4, r5
  405b62:	2907      	cmp	r1, #7
  405b64:	f8c8 6000 	str.w	r6, [r8]
  405b68:	9427      	str	r4, [sp, #156]	; 0x9c
  405b6a:	9126      	str	r1, [sp, #152]	; 0x98
  405b6c:	f300 823b 	bgt.w	405fe6 <_svfprintf_r+0x11ca>
  405b70:	f108 0808 	add.w	r8, r8, #8
  405b74:	2d00      	cmp	r5, #0
  405b76:	bfac      	ite	ge
  405b78:	1b56      	subge	r6, r2, r5
  405b7a:	4616      	movlt	r6, r2
  405b7c:	2e00      	cmp	r6, #0
  405b7e:	f77f ab2d 	ble.w	4051dc <_svfprintf_r+0x3c0>
  405b82:	2e10      	cmp	r6, #16
  405b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b86:	4db0      	ldr	r5, [pc, #704]	; (405e48 <_svfprintf_r+0x102c>)
  405b88:	ddb5      	ble.n	405af6 <_svfprintf_r+0xcda>
  405b8a:	4622      	mov	r2, r4
  405b8c:	2710      	movs	r7, #16
  405b8e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405b92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405b94:	e004      	b.n	405ba0 <_svfprintf_r+0xd84>
  405b96:	f108 0808 	add.w	r8, r8, #8
  405b9a:	3e10      	subs	r6, #16
  405b9c:	2e10      	cmp	r6, #16
  405b9e:	dda9      	ble.n	405af4 <_svfprintf_r+0xcd8>
  405ba0:	3301      	adds	r3, #1
  405ba2:	3210      	adds	r2, #16
  405ba4:	2b07      	cmp	r3, #7
  405ba6:	9227      	str	r2, [sp, #156]	; 0x9c
  405ba8:	9326      	str	r3, [sp, #152]	; 0x98
  405baa:	e888 00a0 	stmia.w	r8, {r5, r7}
  405bae:	ddf2      	ble.n	405b96 <_svfprintf_r+0xd7a>
  405bb0:	aa25      	add	r2, sp, #148	; 0x94
  405bb2:	4621      	mov	r1, r4
  405bb4:	4658      	mov	r0, fp
  405bb6:	f004 f8cb 	bl	409d50 <__ssprint_r>
  405bba:	2800      	cmp	r0, #0
  405bbc:	f47f aa00 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405bc0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405bc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bc4:	46c8      	mov	r8, r9
  405bc6:	e7e8      	b.n	405b9a <_svfprintf_r+0xd7e>
  405bc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bca:	9819      	ldr	r0, [sp, #100]	; 0x64
  405bcc:	991a      	ldr	r1, [sp, #104]	; 0x68
  405bce:	f8c8 1000 	str.w	r1, [r8]
  405bd2:	3301      	adds	r3, #1
  405bd4:	4404      	add	r4, r0
  405bd6:	2b07      	cmp	r3, #7
  405bd8:	9427      	str	r4, [sp, #156]	; 0x9c
  405bda:	f8c8 0004 	str.w	r0, [r8, #4]
  405bde:	9326      	str	r3, [sp, #152]	; 0x98
  405be0:	f300 81f5 	bgt.w	405fce <_svfprintf_r+0x11b2>
  405be4:	f108 0808 	add.w	r8, r8, #8
  405be8:	e7ac      	b.n	405b44 <_svfprintf_r+0xd28>
  405bea:	9b07      	ldr	r3, [sp, #28]
  405bec:	07da      	lsls	r2, r3, #31
  405bee:	f53f adfe 	bmi.w	4057ee <_svfprintf_r+0x9d2>
  405bf2:	3701      	adds	r7, #1
  405bf4:	3401      	adds	r4, #1
  405bf6:	2301      	movs	r3, #1
  405bf8:	2f07      	cmp	r7, #7
  405bfa:	9427      	str	r4, [sp, #156]	; 0x9c
  405bfc:	9726      	str	r7, [sp, #152]	; 0x98
  405bfe:	f8c8 6000 	str.w	r6, [r8]
  405c02:	f8c8 3004 	str.w	r3, [r8, #4]
  405c06:	f77f ae25 	ble.w	405854 <_svfprintf_r+0xa38>
  405c0a:	e74a      	b.n	405aa2 <_svfprintf_r+0xc86>
  405c0c:	aa25      	add	r2, sp, #148	; 0x94
  405c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c10:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c12:	f004 f89d 	bl	409d50 <__ssprint_r>
  405c16:	2800      	cmp	r0, #0
  405c18:	f47f a9d2 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405c1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c1e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c20:	46c8      	mov	r8, r9
  405c22:	e5f2      	b.n	40580a <_svfprintf_r+0x9ee>
  405c24:	aa25      	add	r2, sp, #148	; 0x94
  405c26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c28:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c2a:	f004 f891 	bl	409d50 <__ssprint_r>
  405c2e:	2800      	cmp	r0, #0
  405c30:	f47f a9c6 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405c34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c36:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c38:	46c8      	mov	r8, r9
  405c3a:	e5f5      	b.n	405828 <_svfprintf_r+0xa0c>
  405c3c:	464e      	mov	r6, r9
  405c3e:	f7ff b9fd 	b.w	40503c <_svfprintf_r+0x220>
  405c42:	aa25      	add	r2, sp, #148	; 0x94
  405c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c46:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c48:	f004 f882 	bl	409d50 <__ssprint_r>
  405c4c:	2800      	cmp	r0, #0
  405c4e:	f47f a9b7 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405c52:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c54:	46c8      	mov	r8, r9
  405c56:	f7ff ba72 	b.w	40513e <_svfprintf_r+0x322>
  405c5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405c5c:	4622      	mov	r2, r4
  405c5e:	4620      	mov	r0, r4
  405c60:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405c62:	4623      	mov	r3, r4
  405c64:	4621      	mov	r1, r4
  405c66:	f005 f833 	bl	40acd0 <__aeabi_dcmpun>
  405c6a:	2800      	cmp	r0, #0
  405c6c:	f040 8286 	bne.w	40617c <_svfprintf_r+0x1360>
  405c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c72:	3301      	adds	r3, #1
  405c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405c76:	f023 0320 	bic.w	r3, r3, #32
  405c7a:	930e      	str	r3, [sp, #56]	; 0x38
  405c7c:	f000 81e2 	beq.w	406044 <_svfprintf_r+0x1228>
  405c80:	2b47      	cmp	r3, #71	; 0x47
  405c82:	f000 811e 	beq.w	405ec2 <_svfprintf_r+0x10a6>
  405c86:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405c8a:	9307      	str	r3, [sp, #28]
  405c8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405c8e:	1e1f      	subs	r7, r3, #0
  405c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405c92:	9308      	str	r3, [sp, #32]
  405c94:	bfbb      	ittet	lt
  405c96:	463b      	movlt	r3, r7
  405c98:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405c9c:	2300      	movge	r3, #0
  405c9e:	232d      	movlt	r3, #45	; 0x2d
  405ca0:	9310      	str	r3, [sp, #64]	; 0x40
  405ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ca4:	2b66      	cmp	r3, #102	; 0x66
  405ca6:	f000 81bb 	beq.w	406020 <_svfprintf_r+0x1204>
  405caa:	2b46      	cmp	r3, #70	; 0x46
  405cac:	f000 80df 	beq.w	405e6e <_svfprintf_r+0x1052>
  405cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cb2:	9a08      	ldr	r2, [sp, #32]
  405cb4:	2b45      	cmp	r3, #69	; 0x45
  405cb6:	bf0c      	ite	eq
  405cb8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405cba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405cbc:	a823      	add	r0, sp, #140	; 0x8c
  405cbe:	a920      	add	r1, sp, #128	; 0x80
  405cc0:	bf08      	it	eq
  405cc2:	1c5d      	addeq	r5, r3, #1
  405cc4:	9004      	str	r0, [sp, #16]
  405cc6:	9103      	str	r1, [sp, #12]
  405cc8:	a81f      	add	r0, sp, #124	; 0x7c
  405cca:	2102      	movs	r1, #2
  405ccc:	463b      	mov	r3, r7
  405cce:	9002      	str	r0, [sp, #8]
  405cd0:	9501      	str	r5, [sp, #4]
  405cd2:	9100      	str	r1, [sp, #0]
  405cd4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cd6:	f001 fec7 	bl	407a68 <_dtoa_r>
  405cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405cdc:	2b67      	cmp	r3, #103	; 0x67
  405cde:	4606      	mov	r6, r0
  405ce0:	f040 81e0 	bne.w	4060a4 <_svfprintf_r+0x1288>
  405ce4:	f01b 0f01 	tst.w	fp, #1
  405ce8:	f000 8246 	beq.w	406178 <_svfprintf_r+0x135c>
  405cec:	1974      	adds	r4, r6, r5
  405cee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405cf0:	9808      	ldr	r0, [sp, #32]
  405cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405cf4:	4639      	mov	r1, r7
  405cf6:	f004 ffb9 	bl	40ac6c <__aeabi_dcmpeq>
  405cfa:	2800      	cmp	r0, #0
  405cfc:	f040 8165 	bne.w	405fca <_svfprintf_r+0x11ae>
  405d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405d02:	42a3      	cmp	r3, r4
  405d04:	d206      	bcs.n	405d14 <_svfprintf_r+0xef8>
  405d06:	2130      	movs	r1, #48	; 0x30
  405d08:	1c5a      	adds	r2, r3, #1
  405d0a:	9223      	str	r2, [sp, #140]	; 0x8c
  405d0c:	7019      	strb	r1, [r3, #0]
  405d0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405d10:	429c      	cmp	r4, r3
  405d12:	d8f9      	bhi.n	405d08 <_svfprintf_r+0xeec>
  405d14:	1b9b      	subs	r3, r3, r6
  405d16:	9313      	str	r3, [sp, #76]	; 0x4c
  405d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d1a:	2b47      	cmp	r3, #71	; 0x47
  405d1c:	f000 80e9 	beq.w	405ef2 <_svfprintf_r+0x10d6>
  405d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d22:	2b65      	cmp	r3, #101	; 0x65
  405d24:	f340 81cd 	ble.w	4060c2 <_svfprintf_r+0x12a6>
  405d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d2a:	2b66      	cmp	r3, #102	; 0x66
  405d2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405d2e:	9312      	str	r3, [sp, #72]	; 0x48
  405d30:	f000 819e 	beq.w	406070 <_svfprintf_r+0x1254>
  405d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d38:	4619      	mov	r1, r3
  405d3a:	4291      	cmp	r1, r2
  405d3c:	f300 818a 	bgt.w	406054 <_svfprintf_r+0x1238>
  405d40:	f01b 0f01 	tst.w	fp, #1
  405d44:	f040 8213 	bne.w	40616e <_svfprintf_r+0x1352>
  405d48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405d4c:	9308      	str	r3, [sp, #32]
  405d4e:	2367      	movs	r3, #103	; 0x67
  405d50:	920e      	str	r2, [sp, #56]	; 0x38
  405d52:	9311      	str	r3, [sp, #68]	; 0x44
  405d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405d56:	2b00      	cmp	r3, #0
  405d58:	f040 80c4 	bne.w	405ee4 <_svfprintf_r+0x10c8>
  405d5c:	930a      	str	r3, [sp, #40]	; 0x28
  405d5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405d62:	f7ff b973 	b.w	40504c <_svfprintf_r+0x230>
  405d66:	4635      	mov	r5, r6
  405d68:	460c      	mov	r4, r1
  405d6a:	4646      	mov	r6, r8
  405d6c:	4690      	mov	r8, r2
  405d6e:	3301      	adds	r3, #1
  405d70:	443c      	add	r4, r7
  405d72:	2b07      	cmp	r3, #7
  405d74:	9427      	str	r4, [sp, #156]	; 0x9c
  405d76:	9326      	str	r3, [sp, #152]	; 0x98
  405d78:	e888 00a0 	stmia.w	r8, {r5, r7}
  405d7c:	f73f aed1 	bgt.w	405b22 <_svfprintf_r+0xd06>
  405d80:	f108 0808 	add.w	r8, r8, #8
  405d84:	e6d7      	b.n	405b36 <_svfprintf_r+0xd1a>
  405d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d88:	6813      	ldr	r3, [r2, #0]
  405d8a:	3204      	adds	r2, #4
  405d8c:	920f      	str	r2, [sp, #60]	; 0x3c
  405d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405d90:	601a      	str	r2, [r3, #0]
  405d92:	f7ff b86a 	b.w	404e6a <_svfprintf_r+0x4e>
  405d96:	aa25      	add	r2, sp, #148	; 0x94
  405d98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d9c:	f003 ffd8 	bl	409d50 <__ssprint_r>
  405da0:	2800      	cmp	r0, #0
  405da2:	f47f a90d 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405da6:	46c8      	mov	r8, r9
  405da8:	e48d      	b.n	4056c6 <_svfprintf_r+0x8aa>
  405daa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405dac:	4a27      	ldr	r2, [pc, #156]	; (405e4c <_svfprintf_r+0x1030>)
  405dae:	f8c8 2000 	str.w	r2, [r8]
  405db2:	3301      	adds	r3, #1
  405db4:	3401      	adds	r4, #1
  405db6:	2201      	movs	r2, #1
  405db8:	2b07      	cmp	r3, #7
  405dba:	9427      	str	r4, [sp, #156]	; 0x9c
  405dbc:	9326      	str	r3, [sp, #152]	; 0x98
  405dbe:	f8c8 2004 	str.w	r2, [r8, #4]
  405dc2:	dc72      	bgt.n	405eaa <_svfprintf_r+0x108e>
  405dc4:	f108 0808 	add.w	r8, r8, #8
  405dc8:	b929      	cbnz	r1, 405dd6 <_svfprintf_r+0xfba>
  405dca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405dcc:	b91b      	cbnz	r3, 405dd6 <_svfprintf_r+0xfba>
  405dce:	9b07      	ldr	r3, [sp, #28]
  405dd0:	07d8      	lsls	r0, r3, #31
  405dd2:	f57f aa03 	bpl.w	4051dc <_svfprintf_r+0x3c0>
  405dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405dd8:	9819      	ldr	r0, [sp, #100]	; 0x64
  405dda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405ddc:	f8c8 2000 	str.w	r2, [r8]
  405de0:	3301      	adds	r3, #1
  405de2:	4602      	mov	r2, r0
  405de4:	4422      	add	r2, r4
  405de6:	2b07      	cmp	r3, #7
  405de8:	9227      	str	r2, [sp, #156]	; 0x9c
  405dea:	f8c8 0004 	str.w	r0, [r8, #4]
  405dee:	9326      	str	r3, [sp, #152]	; 0x98
  405df0:	f300 818d 	bgt.w	40610e <_svfprintf_r+0x12f2>
  405df4:	f108 0808 	add.w	r8, r8, #8
  405df8:	2900      	cmp	r1, #0
  405dfa:	f2c0 8165 	blt.w	4060c8 <_svfprintf_r+0x12ac>
  405dfe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405e00:	f8c8 6000 	str.w	r6, [r8]
  405e04:	3301      	adds	r3, #1
  405e06:	188c      	adds	r4, r1, r2
  405e08:	2b07      	cmp	r3, #7
  405e0a:	9427      	str	r4, [sp, #156]	; 0x9c
  405e0c:	9326      	str	r3, [sp, #152]	; 0x98
  405e0e:	f8c8 1004 	str.w	r1, [r8, #4]
  405e12:	f77f a9e1 	ble.w	4051d8 <_svfprintf_r+0x3bc>
  405e16:	e52c      	b.n	405872 <_svfprintf_r+0xa56>
  405e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405e1c:	6813      	ldr	r3, [r2, #0]
  405e1e:	17cd      	asrs	r5, r1, #31
  405e20:	4608      	mov	r0, r1
  405e22:	3204      	adds	r2, #4
  405e24:	4629      	mov	r1, r5
  405e26:	920f      	str	r2, [sp, #60]	; 0x3c
  405e28:	e9c3 0100 	strd	r0, r1, [r3]
  405e2c:	f7ff b81d 	b.w	404e6a <_svfprintf_r+0x4e>
  405e30:	aa25      	add	r2, sp, #148	; 0x94
  405e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e34:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e36:	f003 ff8b 	bl	409d50 <__ssprint_r>
  405e3a:	2800      	cmp	r0, #0
  405e3c:	f47f a8c0 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405e40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e42:	46c8      	mov	r8, r9
  405e44:	e458      	b.n	4056f8 <_svfprintf_r+0x8dc>
  405e46:	bf00      	nop
  405e48:	0040b4b8 	.word	0x0040b4b8
  405e4c:	0040b4a4 	.word	0x0040b4a4
  405e50:	2140      	movs	r1, #64	; 0x40
  405e52:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e54:	f7fe f9d4 	bl	404200 <_malloc_r>
  405e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e5a:	6010      	str	r0, [r2, #0]
  405e5c:	6110      	str	r0, [r2, #16]
  405e5e:	2800      	cmp	r0, #0
  405e60:	f000 81f2 	beq.w	406248 <_svfprintf_r+0x142c>
  405e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e66:	2340      	movs	r3, #64	; 0x40
  405e68:	6153      	str	r3, [r2, #20]
  405e6a:	f7fe bfee 	b.w	404e4a <_svfprintf_r+0x2e>
  405e6e:	a823      	add	r0, sp, #140	; 0x8c
  405e70:	a920      	add	r1, sp, #128	; 0x80
  405e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405e74:	9004      	str	r0, [sp, #16]
  405e76:	9103      	str	r1, [sp, #12]
  405e78:	a81f      	add	r0, sp, #124	; 0x7c
  405e7a:	2103      	movs	r1, #3
  405e7c:	9002      	str	r0, [sp, #8]
  405e7e:	9a08      	ldr	r2, [sp, #32]
  405e80:	9401      	str	r4, [sp, #4]
  405e82:	463b      	mov	r3, r7
  405e84:	9100      	str	r1, [sp, #0]
  405e86:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e88:	f001 fdee 	bl	407a68 <_dtoa_r>
  405e8c:	4625      	mov	r5, r4
  405e8e:	4606      	mov	r6, r0
  405e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e92:	2b46      	cmp	r3, #70	; 0x46
  405e94:	eb06 0405 	add.w	r4, r6, r5
  405e98:	f47f af29 	bne.w	405cee <_svfprintf_r+0xed2>
  405e9c:	7833      	ldrb	r3, [r6, #0]
  405e9e:	2b30      	cmp	r3, #48	; 0x30
  405ea0:	f000 8178 	beq.w	406194 <_svfprintf_r+0x1378>
  405ea4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405ea6:	442c      	add	r4, r5
  405ea8:	e721      	b.n	405cee <_svfprintf_r+0xed2>
  405eaa:	aa25      	add	r2, sp, #148	; 0x94
  405eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405eae:	980c      	ldr	r0, [sp, #48]	; 0x30
  405eb0:	f003 ff4e 	bl	409d50 <__ssprint_r>
  405eb4:	2800      	cmp	r0, #0
  405eb6:	f47f a883 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405eba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405ebc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ebe:	46c8      	mov	r8, r9
  405ec0:	e782      	b.n	405dc8 <_svfprintf_r+0xfac>
  405ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ec4:	2b00      	cmp	r3, #0
  405ec6:	bf08      	it	eq
  405ec8:	2301      	moveq	r3, #1
  405eca:	930a      	str	r3, [sp, #40]	; 0x28
  405ecc:	e6db      	b.n	405c86 <_svfprintf_r+0xe6a>
  405ece:	4630      	mov	r0, r6
  405ed0:	940a      	str	r4, [sp, #40]	; 0x28
  405ed2:	f7fe ff35 	bl	404d40 <strlen>
  405ed6:	950f      	str	r5, [sp, #60]	; 0x3c
  405ed8:	900e      	str	r0, [sp, #56]	; 0x38
  405eda:	f8cd b01c 	str.w	fp, [sp, #28]
  405ede:	4603      	mov	r3, r0
  405ee0:	f7ff b9f9 	b.w	4052d6 <_svfprintf_r+0x4ba>
  405ee4:	272d      	movs	r7, #45	; 0x2d
  405ee6:	2300      	movs	r3, #0
  405ee8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405eec:	930a      	str	r3, [sp, #40]	; 0x28
  405eee:	f7ff b8ae 	b.w	40504e <_svfprintf_r+0x232>
  405ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405ef4:	9312      	str	r3, [sp, #72]	; 0x48
  405ef6:	461a      	mov	r2, r3
  405ef8:	3303      	adds	r3, #3
  405efa:	db04      	blt.n	405f06 <_svfprintf_r+0x10ea>
  405efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405efe:	4619      	mov	r1, r3
  405f00:	4291      	cmp	r1, r2
  405f02:	f6bf af17 	bge.w	405d34 <_svfprintf_r+0xf18>
  405f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f08:	3b02      	subs	r3, #2
  405f0a:	9311      	str	r3, [sp, #68]	; 0x44
  405f0c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405f10:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f16:	3b01      	subs	r3, #1
  405f18:	2b00      	cmp	r3, #0
  405f1a:	931f      	str	r3, [sp, #124]	; 0x7c
  405f1c:	bfbd      	ittte	lt
  405f1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405f20:	f1c3 0301 	rsblt	r3, r3, #1
  405f24:	222d      	movlt	r2, #45	; 0x2d
  405f26:	222b      	movge	r2, #43	; 0x2b
  405f28:	2b09      	cmp	r3, #9
  405f2a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405f2e:	f340 8116 	ble.w	40615e <_svfprintf_r+0x1342>
  405f32:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405f36:	4620      	mov	r0, r4
  405f38:	4dab      	ldr	r5, [pc, #684]	; (4061e8 <_svfprintf_r+0x13cc>)
  405f3a:	e000      	b.n	405f3e <_svfprintf_r+0x1122>
  405f3c:	4610      	mov	r0, r2
  405f3e:	fb85 1203 	smull	r1, r2, r5, r3
  405f42:	17d9      	asrs	r1, r3, #31
  405f44:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405f48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405f4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405f50:	3230      	adds	r2, #48	; 0x30
  405f52:	2909      	cmp	r1, #9
  405f54:	f800 2c01 	strb.w	r2, [r0, #-1]
  405f58:	460b      	mov	r3, r1
  405f5a:	f100 32ff 	add.w	r2, r0, #4294967295
  405f5e:	dced      	bgt.n	405f3c <_svfprintf_r+0x1120>
  405f60:	3330      	adds	r3, #48	; 0x30
  405f62:	3802      	subs	r0, #2
  405f64:	b2d9      	uxtb	r1, r3
  405f66:	4284      	cmp	r4, r0
  405f68:	f802 1c01 	strb.w	r1, [r2, #-1]
  405f6c:	f240 8165 	bls.w	40623a <_svfprintf_r+0x141e>
  405f70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405f74:	4613      	mov	r3, r2
  405f76:	e001      	b.n	405f7c <_svfprintf_r+0x1160>
  405f78:	f813 1b01 	ldrb.w	r1, [r3], #1
  405f7c:	f800 1b01 	strb.w	r1, [r0], #1
  405f80:	42a3      	cmp	r3, r4
  405f82:	d1f9      	bne.n	405f78 <_svfprintf_r+0x115c>
  405f84:	3301      	adds	r3, #1
  405f86:	1a9b      	subs	r3, r3, r2
  405f88:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405f8c:	4413      	add	r3, r2
  405f8e:	aa21      	add	r2, sp, #132	; 0x84
  405f90:	1a9b      	subs	r3, r3, r2
  405f92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405f94:	931b      	str	r3, [sp, #108]	; 0x6c
  405f96:	2a01      	cmp	r2, #1
  405f98:	4413      	add	r3, r2
  405f9a:	930e      	str	r3, [sp, #56]	; 0x38
  405f9c:	f340 8119 	ble.w	4061d2 <_svfprintf_r+0x13b6>
  405fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405fa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405fa4:	4413      	add	r3, r2
  405fa6:	930e      	str	r3, [sp, #56]	; 0x38
  405fa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fac:	9308      	str	r3, [sp, #32]
  405fae:	2300      	movs	r3, #0
  405fb0:	9312      	str	r3, [sp, #72]	; 0x48
  405fb2:	e6cf      	b.n	405d54 <_svfprintf_r+0xf38>
  405fb4:	aa25      	add	r2, sp, #148	; 0x94
  405fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fba:	f003 fec9 	bl	409d50 <__ssprint_r>
  405fbe:	2800      	cmp	r0, #0
  405fc0:	f47e affe 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405fc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fc6:	46c8      	mov	r8, r9
  405fc8:	e4d7      	b.n	40597a <_svfprintf_r+0xb5e>
  405fca:	4623      	mov	r3, r4
  405fcc:	e6a2      	b.n	405d14 <_svfprintf_r+0xef8>
  405fce:	aa25      	add	r2, sp, #148	; 0x94
  405fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fd4:	f003 febc 	bl	409d50 <__ssprint_r>
  405fd8:	2800      	cmp	r0, #0
  405fda:	f47e aff1 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405fde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405fe0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fe2:	46c8      	mov	r8, r9
  405fe4:	e5ae      	b.n	405b44 <_svfprintf_r+0xd28>
  405fe6:	aa25      	add	r2, sp, #148	; 0x94
  405fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fea:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fec:	f003 feb0 	bl	409d50 <__ssprint_r>
  405ff0:	2800      	cmp	r0, #0
  405ff2:	f47e afe5 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  405ff6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ffa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ffc:	1a9a      	subs	r2, r3, r2
  405ffe:	46c8      	mov	r8, r9
  406000:	e5b8      	b.n	405b74 <_svfprintf_r+0xd58>
  406002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406004:	9612      	str	r6, [sp, #72]	; 0x48
  406006:	2b06      	cmp	r3, #6
  406008:	bf28      	it	cs
  40600a:	2306      	movcs	r3, #6
  40600c:	960a      	str	r6, [sp, #40]	; 0x28
  40600e:	4637      	mov	r7, r6
  406010:	9308      	str	r3, [sp, #32]
  406012:	950f      	str	r5, [sp, #60]	; 0x3c
  406014:	f8cd b01c 	str.w	fp, [sp, #28]
  406018:	930e      	str	r3, [sp, #56]	; 0x38
  40601a:	4e74      	ldr	r6, [pc, #464]	; (4061ec <_svfprintf_r+0x13d0>)
  40601c:	f7ff b816 	b.w	40504c <_svfprintf_r+0x230>
  406020:	a823      	add	r0, sp, #140	; 0x8c
  406022:	a920      	add	r1, sp, #128	; 0x80
  406024:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406026:	9004      	str	r0, [sp, #16]
  406028:	9103      	str	r1, [sp, #12]
  40602a:	a81f      	add	r0, sp, #124	; 0x7c
  40602c:	2103      	movs	r1, #3
  40602e:	9002      	str	r0, [sp, #8]
  406030:	9a08      	ldr	r2, [sp, #32]
  406032:	9501      	str	r5, [sp, #4]
  406034:	463b      	mov	r3, r7
  406036:	9100      	str	r1, [sp, #0]
  406038:	980c      	ldr	r0, [sp, #48]	; 0x30
  40603a:	f001 fd15 	bl	407a68 <_dtoa_r>
  40603e:	4606      	mov	r6, r0
  406040:	1944      	adds	r4, r0, r5
  406042:	e72b      	b.n	405e9c <_svfprintf_r+0x1080>
  406044:	2306      	movs	r3, #6
  406046:	930a      	str	r3, [sp, #40]	; 0x28
  406048:	e61d      	b.n	405c86 <_svfprintf_r+0xe6a>
  40604a:	272d      	movs	r7, #45	; 0x2d
  40604c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406050:	f7ff bacd 	b.w	4055ee <_svfprintf_r+0x7d2>
  406054:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406058:	4413      	add	r3, r2
  40605a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40605c:	930e      	str	r3, [sp, #56]	; 0x38
  40605e:	2a00      	cmp	r2, #0
  406060:	f340 80b0 	ble.w	4061c4 <_svfprintf_r+0x13a8>
  406064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406068:	9308      	str	r3, [sp, #32]
  40606a:	2367      	movs	r3, #103	; 0x67
  40606c:	9311      	str	r3, [sp, #68]	; 0x44
  40606e:	e671      	b.n	405d54 <_svfprintf_r+0xf38>
  406070:	2b00      	cmp	r3, #0
  406072:	f340 80c3 	ble.w	4061fc <_svfprintf_r+0x13e0>
  406076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406078:	2a00      	cmp	r2, #0
  40607a:	f040 8099 	bne.w	4061b0 <_svfprintf_r+0x1394>
  40607e:	f01b 0f01 	tst.w	fp, #1
  406082:	f040 8095 	bne.w	4061b0 <_svfprintf_r+0x1394>
  406086:	9308      	str	r3, [sp, #32]
  406088:	930e      	str	r3, [sp, #56]	; 0x38
  40608a:	e663      	b.n	405d54 <_svfprintf_r+0xf38>
  40608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40608e:	9308      	str	r3, [sp, #32]
  406090:	930e      	str	r3, [sp, #56]	; 0x38
  406092:	900a      	str	r0, [sp, #40]	; 0x28
  406094:	950f      	str	r5, [sp, #60]	; 0x3c
  406096:	f8cd b01c 	str.w	fp, [sp, #28]
  40609a:	9012      	str	r0, [sp, #72]	; 0x48
  40609c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4060a0:	f7fe bfd4 	b.w	40504c <_svfprintf_r+0x230>
  4060a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060a6:	2b47      	cmp	r3, #71	; 0x47
  4060a8:	f47f ae20 	bne.w	405cec <_svfprintf_r+0xed0>
  4060ac:	f01b 0f01 	tst.w	fp, #1
  4060b0:	f47f aeee 	bne.w	405e90 <_svfprintf_r+0x1074>
  4060b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4060b6:	1b9b      	subs	r3, r3, r6
  4060b8:	9313      	str	r3, [sp, #76]	; 0x4c
  4060ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4060bc:	2b47      	cmp	r3, #71	; 0x47
  4060be:	f43f af18 	beq.w	405ef2 <_svfprintf_r+0x10d6>
  4060c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4060c4:	9312      	str	r3, [sp, #72]	; 0x48
  4060c6:	e721      	b.n	405f0c <_svfprintf_r+0x10f0>
  4060c8:	424f      	negs	r7, r1
  4060ca:	3110      	adds	r1, #16
  4060cc:	4d48      	ldr	r5, [pc, #288]	; (4061f0 <_svfprintf_r+0x13d4>)
  4060ce:	da2f      	bge.n	406130 <_svfprintf_r+0x1314>
  4060d0:	2410      	movs	r4, #16
  4060d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4060d6:	e004      	b.n	4060e2 <_svfprintf_r+0x12c6>
  4060d8:	f108 0808 	add.w	r8, r8, #8
  4060dc:	3f10      	subs	r7, #16
  4060de:	2f10      	cmp	r7, #16
  4060e0:	dd26      	ble.n	406130 <_svfprintf_r+0x1314>
  4060e2:	3301      	adds	r3, #1
  4060e4:	3210      	adds	r2, #16
  4060e6:	2b07      	cmp	r3, #7
  4060e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4060ea:	9326      	str	r3, [sp, #152]	; 0x98
  4060ec:	f8c8 5000 	str.w	r5, [r8]
  4060f0:	f8c8 4004 	str.w	r4, [r8, #4]
  4060f4:	ddf0      	ble.n	4060d8 <_svfprintf_r+0x12bc>
  4060f6:	aa25      	add	r2, sp, #148	; 0x94
  4060f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4060fa:	4658      	mov	r0, fp
  4060fc:	f003 fe28 	bl	409d50 <__ssprint_r>
  406100:	2800      	cmp	r0, #0
  406102:	f47e af5d 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  406106:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406108:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40610a:	46c8      	mov	r8, r9
  40610c:	e7e6      	b.n	4060dc <_svfprintf_r+0x12c0>
  40610e:	aa25      	add	r2, sp, #148	; 0x94
  406110:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406112:	980c      	ldr	r0, [sp, #48]	; 0x30
  406114:	f003 fe1c 	bl	409d50 <__ssprint_r>
  406118:	2800      	cmp	r0, #0
  40611a:	f47e af51 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  40611e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406120:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406122:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406124:	46c8      	mov	r8, r9
  406126:	e667      	b.n	405df8 <_svfprintf_r+0xfdc>
  406128:	2000      	movs	r0, #0
  40612a:	900a      	str	r0, [sp, #40]	; 0x28
  40612c:	f7fe bed0 	b.w	404ed0 <_svfprintf_r+0xb4>
  406130:	3301      	adds	r3, #1
  406132:	443a      	add	r2, r7
  406134:	2b07      	cmp	r3, #7
  406136:	e888 00a0 	stmia.w	r8, {r5, r7}
  40613a:	9227      	str	r2, [sp, #156]	; 0x9c
  40613c:	9326      	str	r3, [sp, #152]	; 0x98
  40613e:	f108 0808 	add.w	r8, r8, #8
  406142:	f77f ae5c 	ble.w	405dfe <_svfprintf_r+0xfe2>
  406146:	aa25      	add	r2, sp, #148	; 0x94
  406148:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40614a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40614c:	f003 fe00 	bl	409d50 <__ssprint_r>
  406150:	2800      	cmp	r0, #0
  406152:	f47e af35 	bne.w	404fc0 <_svfprintf_r+0x1a4>
  406156:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406158:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40615a:	46c8      	mov	r8, r9
  40615c:	e64f      	b.n	405dfe <_svfprintf_r+0xfe2>
  40615e:	3330      	adds	r3, #48	; 0x30
  406160:	2230      	movs	r2, #48	; 0x30
  406162:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  406166:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40616a:	ab22      	add	r3, sp, #136	; 0x88
  40616c:	e70f      	b.n	405f8e <_svfprintf_r+0x1172>
  40616e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406170:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406172:	4413      	add	r3, r2
  406174:	930e      	str	r3, [sp, #56]	; 0x38
  406176:	e775      	b.n	406064 <_svfprintf_r+0x1248>
  406178:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40617a:	e5cb      	b.n	405d14 <_svfprintf_r+0xef8>
  40617c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40617e:	4e1d      	ldr	r6, [pc, #116]	; (4061f4 <_svfprintf_r+0x13d8>)
  406180:	2b00      	cmp	r3, #0
  406182:	bfb6      	itet	lt
  406184:	272d      	movlt	r7, #45	; 0x2d
  406186:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40618a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40618e:	4b1a      	ldr	r3, [pc, #104]	; (4061f8 <_svfprintf_r+0x13dc>)
  406190:	f7ff ba2f 	b.w	4055f2 <_svfprintf_r+0x7d6>
  406194:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406196:	9808      	ldr	r0, [sp, #32]
  406198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40619a:	4639      	mov	r1, r7
  40619c:	f004 fd66 	bl	40ac6c <__aeabi_dcmpeq>
  4061a0:	2800      	cmp	r0, #0
  4061a2:	f47f ae7f 	bne.w	405ea4 <_svfprintf_r+0x1088>
  4061a6:	f1c5 0501 	rsb	r5, r5, #1
  4061aa:	951f      	str	r5, [sp, #124]	; 0x7c
  4061ac:	442c      	add	r4, r5
  4061ae:	e59e      	b.n	405cee <_svfprintf_r+0xed2>
  4061b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4061b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4061b4:	4413      	add	r3, r2
  4061b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061b8:	441a      	add	r2, r3
  4061ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4061be:	920e      	str	r2, [sp, #56]	; 0x38
  4061c0:	9308      	str	r3, [sp, #32]
  4061c2:	e5c7      	b.n	405d54 <_svfprintf_r+0xf38>
  4061c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4061c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4061c8:	f1c3 0301 	rsb	r3, r3, #1
  4061cc:	441a      	add	r2, r3
  4061ce:	4613      	mov	r3, r2
  4061d0:	e7d0      	b.n	406174 <_svfprintf_r+0x1358>
  4061d2:	f01b 0301 	ands.w	r3, fp, #1
  4061d6:	9312      	str	r3, [sp, #72]	; 0x48
  4061d8:	f47f aee2 	bne.w	405fa0 <_svfprintf_r+0x1184>
  4061dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4061de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4061e2:	9308      	str	r3, [sp, #32]
  4061e4:	e5b6      	b.n	405d54 <_svfprintf_r+0xf38>
  4061e6:	bf00      	nop
  4061e8:	66666667 	.word	0x66666667
  4061ec:	0040b49c 	.word	0x0040b49c
  4061f0:	0040b4b8 	.word	0x0040b4b8
  4061f4:	0040b470 	.word	0x0040b470
  4061f8:	0040b46c 	.word	0x0040b46c
  4061fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061fe:	b913      	cbnz	r3, 406206 <_svfprintf_r+0x13ea>
  406200:	f01b 0f01 	tst.w	fp, #1
  406204:	d002      	beq.n	40620c <_svfprintf_r+0x13f0>
  406206:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406208:	3301      	adds	r3, #1
  40620a:	e7d4      	b.n	4061b6 <_svfprintf_r+0x139a>
  40620c:	2301      	movs	r3, #1
  40620e:	e73a      	b.n	406086 <_svfprintf_r+0x126a>
  406210:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406212:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406216:	6828      	ldr	r0, [r5, #0]
  406218:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40621c:	900a      	str	r0, [sp, #40]	; 0x28
  40621e:	4628      	mov	r0, r5
  406220:	3004      	adds	r0, #4
  406222:	46a2      	mov	sl, r4
  406224:	900f      	str	r0, [sp, #60]	; 0x3c
  406226:	f7fe be51 	b.w	404ecc <_svfprintf_r+0xb0>
  40622a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40622e:	f7ff b867 	b.w	405300 <_svfprintf_r+0x4e4>
  406232:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406236:	f7ff ba15 	b.w	405664 <_svfprintf_r+0x848>
  40623a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40623e:	e6a6      	b.n	405f8e <_svfprintf_r+0x1172>
  406240:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406244:	f7ff b8eb 	b.w	40541e <_svfprintf_r+0x602>
  406248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40624a:	230c      	movs	r3, #12
  40624c:	6013      	str	r3, [r2, #0]
  40624e:	f04f 33ff 	mov.w	r3, #4294967295
  406252:	9309      	str	r3, [sp, #36]	; 0x24
  406254:	f7fe bebd 	b.w	404fd2 <_svfprintf_r+0x1b6>
  406258:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40625c:	f7ff b99a 	b.w	405594 <_svfprintf_r+0x778>
  406260:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406264:	f7ff b976 	b.w	405554 <_svfprintf_r+0x738>
  406268:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40626c:	f7ff b959 	b.w	405522 <_svfprintf_r+0x706>
  406270:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406274:	f7ff b912 	b.w	40549c <_svfprintf_r+0x680>

00406278 <_vfprintf_r>:
  406278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40627c:	b0c1      	sub	sp, #260	; 0x104
  40627e:	461d      	mov	r5, r3
  406280:	468a      	mov	sl, r1
  406282:	4691      	mov	r9, r2
  406284:	4604      	mov	r4, r0
  406286:	9008      	str	r0, [sp, #32]
  406288:	f002 ff3a 	bl	409100 <_localeconv_r>
  40628c:	6803      	ldr	r3, [r0, #0]
  40628e:	9315      	str	r3, [sp, #84]	; 0x54
  406290:	4618      	mov	r0, r3
  406292:	f7fe fd55 	bl	404d40 <strlen>
  406296:	950e      	str	r5, [sp, #56]	; 0x38
  406298:	9014      	str	r0, [sp, #80]	; 0x50
  40629a:	b11c      	cbz	r4, 4062a4 <_vfprintf_r+0x2c>
  40629c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40629e:	2b00      	cmp	r3, #0
  4062a0:	f000 825f 	beq.w	406762 <_vfprintf_r+0x4ea>
  4062a4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4062a8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4062ac:	f013 0f01 	tst.w	r3, #1
  4062b0:	b293      	uxth	r3, r2
  4062b2:	d102      	bne.n	4062ba <_vfprintf_r+0x42>
  4062b4:	0599      	lsls	r1, r3, #22
  4062b6:	f140 8275 	bpl.w	4067a4 <_vfprintf_r+0x52c>
  4062ba:	049f      	lsls	r7, r3, #18
  4062bc:	d40a      	bmi.n	4062d4 <_vfprintf_r+0x5c>
  4062be:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  4062c2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  4062c6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4062ca:	f8aa 300c 	strh.w	r3, [sl, #12]
  4062ce:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  4062d2:	b29b      	uxth	r3, r3
  4062d4:	071e      	lsls	r6, r3, #28
  4062d6:	f140 8223 	bpl.w	406720 <_vfprintf_r+0x4a8>
  4062da:	f8da 2010 	ldr.w	r2, [sl, #16]
  4062de:	2a00      	cmp	r2, #0
  4062e0:	f000 821e 	beq.w	406720 <_vfprintf_r+0x4a8>
  4062e4:	f003 021a 	and.w	r2, r3, #26
  4062e8:	2a0a      	cmp	r2, #10
  4062ea:	f000 823e 	beq.w	40676a <_vfprintf_r+0x4f2>
  4062ee:	2300      	movs	r3, #0
  4062f0:	4618      	mov	r0, r3
  4062f2:	9311      	str	r3, [sp, #68]	; 0x44
  4062f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4062f6:	9312      	str	r3, [sp, #72]	; 0x48
  4062f8:	9325      	str	r3, [sp, #148]	; 0x94
  4062fa:	9324      	str	r3, [sp, #144]	; 0x90
  4062fc:	9318      	str	r3, [sp, #96]	; 0x60
  4062fe:	9319      	str	r3, [sp, #100]	; 0x64
  406300:	930b      	str	r3, [sp, #44]	; 0x2c
  406302:	ab30      	add	r3, sp, #192	; 0xc0
  406304:	9323      	str	r3, [sp, #140]	; 0x8c
  406306:	4698      	mov	r8, r3
  406308:	9016      	str	r0, [sp, #88]	; 0x58
  40630a:	9017      	str	r0, [sp, #92]	; 0x5c
  40630c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  406310:	f899 3000 	ldrb.w	r3, [r9]
  406314:	464c      	mov	r4, r9
  406316:	b1eb      	cbz	r3, 406354 <_vfprintf_r+0xdc>
  406318:	2b25      	cmp	r3, #37	; 0x25
  40631a:	d102      	bne.n	406322 <_vfprintf_r+0xaa>
  40631c:	e01a      	b.n	406354 <_vfprintf_r+0xdc>
  40631e:	2b25      	cmp	r3, #37	; 0x25
  406320:	d003      	beq.n	40632a <_vfprintf_r+0xb2>
  406322:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406326:	2b00      	cmp	r3, #0
  406328:	d1f9      	bne.n	40631e <_vfprintf_r+0xa6>
  40632a:	eba4 0509 	sub.w	r5, r4, r9
  40632e:	b18d      	cbz	r5, 406354 <_vfprintf_r+0xdc>
  406330:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406332:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406334:	f8c8 9000 	str.w	r9, [r8]
  406338:	3301      	adds	r3, #1
  40633a:	442a      	add	r2, r5
  40633c:	2b07      	cmp	r3, #7
  40633e:	f8c8 5004 	str.w	r5, [r8, #4]
  406342:	9225      	str	r2, [sp, #148]	; 0x94
  406344:	9324      	str	r3, [sp, #144]	; 0x90
  406346:	f300 8201 	bgt.w	40674c <_vfprintf_r+0x4d4>
  40634a:	f108 0808 	add.w	r8, r8, #8
  40634e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406350:	442b      	add	r3, r5
  406352:	930b      	str	r3, [sp, #44]	; 0x2c
  406354:	7823      	ldrb	r3, [r4, #0]
  406356:	2b00      	cmp	r3, #0
  406358:	f000 83f0 	beq.w	406b3c <_vfprintf_r+0x8c4>
  40635c:	2300      	movs	r3, #0
  40635e:	461a      	mov	r2, r3
  406360:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406364:	4619      	mov	r1, r3
  406366:	930c      	str	r3, [sp, #48]	; 0x30
  406368:	469b      	mov	fp, r3
  40636a:	7866      	ldrb	r6, [r4, #1]
  40636c:	f04f 33ff 	mov.w	r3, #4294967295
  406370:	f104 0901 	add.w	r9, r4, #1
  406374:	9309      	str	r3, [sp, #36]	; 0x24
  406376:	f109 0901 	add.w	r9, r9, #1
  40637a:	f1a6 0320 	sub.w	r3, r6, #32
  40637e:	2b58      	cmp	r3, #88	; 0x58
  406380:	f200 83bf 	bhi.w	406b02 <_vfprintf_r+0x88a>
  406384:	e8df f013 	tbh	[pc, r3, lsl #1]
  406388:	03bd02e0 	.word	0x03bd02e0
  40638c:	034f03bd 	.word	0x034f03bd
  406390:	03bd03bd 	.word	0x03bd03bd
  406394:	03bd03bd 	.word	0x03bd03bd
  406398:	03bd03bd 	.word	0x03bd03bd
  40639c:	03080354 	.word	0x03080354
  4063a0:	021a03bd 	.word	0x021a03bd
  4063a4:	03bd02e8 	.word	0x03bd02e8
  4063a8:	033a0303 	.word	0x033a0303
  4063ac:	033a033a 	.word	0x033a033a
  4063b0:	033a033a 	.word	0x033a033a
  4063b4:	033a033a 	.word	0x033a033a
  4063b8:	033a033a 	.word	0x033a033a
  4063bc:	03bd03bd 	.word	0x03bd03bd
  4063c0:	03bd03bd 	.word	0x03bd03bd
  4063c4:	03bd03bd 	.word	0x03bd03bd
  4063c8:	03bd03bd 	.word	0x03bd03bd
  4063cc:	03bd03bd 	.word	0x03bd03bd
  4063d0:	03620349 	.word	0x03620349
  4063d4:	036203bd 	.word	0x036203bd
  4063d8:	03bd03bd 	.word	0x03bd03bd
  4063dc:	03bd03bd 	.word	0x03bd03bd
  4063e0:	03bd03a2 	.word	0x03bd03a2
  4063e4:	006f03bd 	.word	0x006f03bd
  4063e8:	03bd03bd 	.word	0x03bd03bd
  4063ec:	03bd03bd 	.word	0x03bd03bd
  4063f0:	005903bd 	.word	0x005903bd
  4063f4:	03bd03bd 	.word	0x03bd03bd
  4063f8:	03bd031e 	.word	0x03bd031e
  4063fc:	03bd03bd 	.word	0x03bd03bd
  406400:	03bd03bd 	.word	0x03bd03bd
  406404:	03bd03bd 	.word	0x03bd03bd
  406408:	03bd03bd 	.word	0x03bd03bd
  40640c:	032403bd 	.word	0x032403bd
  406410:	03620273 	.word	0x03620273
  406414:	03620362 	.word	0x03620362
  406418:	027302b7 	.word	0x027302b7
  40641c:	03bd03bd 	.word	0x03bd03bd
  406420:	03bd02bc 	.word	0x03bd02bc
  406424:	007102c9 	.word	0x007102c9
  406428:	0247030d 	.word	0x0247030d
  40642c:	025203bd 	.word	0x025203bd
  406430:	005b03bd 	.word	0x005b03bd
  406434:	03bd03bd 	.word	0x03bd03bd
  406438:	021f      	.short	0x021f
  40643a:	f04b 0b10 	orr.w	fp, fp, #16
  40643e:	f01b 0f20 	tst.w	fp, #32
  406442:	f040 8353 	bne.w	406aec <_vfprintf_r+0x874>
  406446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406448:	f01b 0f10 	tst.w	fp, #16
  40644c:	4613      	mov	r3, r2
  40644e:	f040 85b4 	bne.w	406fba <_vfprintf_r+0xd42>
  406452:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406456:	f000 85b0 	beq.w	406fba <_vfprintf_r+0xd42>
  40645a:	8814      	ldrh	r4, [r2, #0]
  40645c:	3204      	adds	r2, #4
  40645e:	2500      	movs	r5, #0
  406460:	2301      	movs	r3, #1
  406462:	920e      	str	r2, [sp, #56]	; 0x38
  406464:	e014      	b.n	406490 <_vfprintf_r+0x218>
  406466:	f04b 0b10 	orr.w	fp, fp, #16
  40646a:	f01b 0320 	ands.w	r3, fp, #32
  40646e:	f040 8332 	bne.w	406ad6 <_vfprintf_r+0x85e>
  406472:	f01b 0210 	ands.w	r2, fp, #16
  406476:	f040 8589 	bne.w	406f8c <_vfprintf_r+0xd14>
  40647a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40647e:	f000 8585 	beq.w	406f8c <_vfprintf_r+0xd14>
  406482:	990e      	ldr	r1, [sp, #56]	; 0x38
  406484:	4613      	mov	r3, r2
  406486:	460a      	mov	r2, r1
  406488:	3204      	adds	r2, #4
  40648a:	880c      	ldrh	r4, [r1, #0]
  40648c:	920e      	str	r2, [sp, #56]	; 0x38
  40648e:	2500      	movs	r5, #0
  406490:	f04f 0a00 	mov.w	sl, #0
  406494:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406498:	9909      	ldr	r1, [sp, #36]	; 0x24
  40649a:	1c4a      	adds	r2, r1, #1
  40649c:	f000 820b 	beq.w	4068b6 <_vfprintf_r+0x63e>
  4064a0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4064a4:	9206      	str	r2, [sp, #24]
  4064a6:	ea54 0205 	orrs.w	r2, r4, r5
  4064aa:	f040 820a 	bne.w	4068c2 <_vfprintf_r+0x64a>
  4064ae:	2900      	cmp	r1, #0
  4064b0:	f040 846f 	bne.w	406d92 <_vfprintf_r+0xb1a>
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	f040 852d 	bne.w	406f14 <_vfprintf_r+0xc9c>
  4064ba:	f01b 0301 	ands.w	r3, fp, #1
  4064be:	930d      	str	r3, [sp, #52]	; 0x34
  4064c0:	f000 8668 	beq.w	407194 <_vfprintf_r+0xf1c>
  4064c4:	af40      	add	r7, sp, #256	; 0x100
  4064c6:	2330      	movs	r3, #48	; 0x30
  4064c8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4064cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4064d0:	4293      	cmp	r3, r2
  4064d2:	bfb8      	it	lt
  4064d4:	4613      	movlt	r3, r2
  4064d6:	9307      	str	r3, [sp, #28]
  4064d8:	2300      	movs	r3, #0
  4064da:	9310      	str	r3, [sp, #64]	; 0x40
  4064dc:	f1ba 0f00 	cmp.w	sl, #0
  4064e0:	d002      	beq.n	4064e8 <_vfprintf_r+0x270>
  4064e2:	9b07      	ldr	r3, [sp, #28]
  4064e4:	3301      	adds	r3, #1
  4064e6:	9307      	str	r3, [sp, #28]
  4064e8:	9b06      	ldr	r3, [sp, #24]
  4064ea:	f013 0302 	ands.w	r3, r3, #2
  4064ee:	930f      	str	r3, [sp, #60]	; 0x3c
  4064f0:	d002      	beq.n	4064f8 <_vfprintf_r+0x280>
  4064f2:	9b07      	ldr	r3, [sp, #28]
  4064f4:	3302      	adds	r3, #2
  4064f6:	9307      	str	r3, [sp, #28]
  4064f8:	9b06      	ldr	r3, [sp, #24]
  4064fa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4064fe:	f040 831b 	bne.w	406b38 <_vfprintf_r+0x8c0>
  406502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406504:	9a07      	ldr	r2, [sp, #28]
  406506:	eba3 0b02 	sub.w	fp, r3, r2
  40650a:	f1bb 0f00 	cmp.w	fp, #0
  40650e:	f340 8313 	ble.w	406b38 <_vfprintf_r+0x8c0>
  406512:	f1bb 0f10 	cmp.w	fp, #16
  406516:	9925      	ldr	r1, [sp, #148]	; 0x94
  406518:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40651a:	dd28      	ble.n	40656e <_vfprintf_r+0x2f6>
  40651c:	4643      	mov	r3, r8
  40651e:	2410      	movs	r4, #16
  406520:	46a8      	mov	r8, r5
  406522:	f8dd a020 	ldr.w	sl, [sp, #32]
  406526:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406528:	e006      	b.n	406538 <_vfprintf_r+0x2c0>
  40652a:	f1ab 0b10 	sub.w	fp, fp, #16
  40652e:	f1bb 0f10 	cmp.w	fp, #16
  406532:	f103 0308 	add.w	r3, r3, #8
  406536:	dd18      	ble.n	40656a <_vfprintf_r+0x2f2>
  406538:	3201      	adds	r2, #1
  40653a:	48b9      	ldr	r0, [pc, #740]	; (406820 <_vfprintf_r+0x5a8>)
  40653c:	9224      	str	r2, [sp, #144]	; 0x90
  40653e:	3110      	adds	r1, #16
  406540:	2a07      	cmp	r2, #7
  406542:	9125      	str	r1, [sp, #148]	; 0x94
  406544:	e883 0011 	stmia.w	r3, {r0, r4}
  406548:	ddef      	ble.n	40652a <_vfprintf_r+0x2b2>
  40654a:	aa23      	add	r2, sp, #140	; 0x8c
  40654c:	4629      	mov	r1, r5
  40654e:	4650      	mov	r0, sl
  406550:	f003 fcbc 	bl	409ecc <__sprint_r>
  406554:	2800      	cmp	r0, #0
  406556:	f040 836a 	bne.w	406c2e <_vfprintf_r+0x9b6>
  40655a:	f1ab 0b10 	sub.w	fp, fp, #16
  40655e:	f1bb 0f10 	cmp.w	fp, #16
  406562:	9925      	ldr	r1, [sp, #148]	; 0x94
  406564:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406566:	ab30      	add	r3, sp, #192	; 0xc0
  406568:	dce6      	bgt.n	406538 <_vfprintf_r+0x2c0>
  40656a:	4645      	mov	r5, r8
  40656c:	4698      	mov	r8, r3
  40656e:	3201      	adds	r2, #1
  406570:	4bab      	ldr	r3, [pc, #684]	; (406820 <_vfprintf_r+0x5a8>)
  406572:	9224      	str	r2, [sp, #144]	; 0x90
  406574:	eb0b 0401 	add.w	r4, fp, r1
  406578:	2a07      	cmp	r2, #7
  40657a:	9425      	str	r4, [sp, #148]	; 0x94
  40657c:	e888 0808 	stmia.w	r8, {r3, fp}
  406580:	f300 84cd 	bgt.w	406f1e <_vfprintf_r+0xca6>
  406584:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406588:	f108 0808 	add.w	r8, r8, #8
  40658c:	f1ba 0f00 	cmp.w	sl, #0
  406590:	d00e      	beq.n	4065b0 <_vfprintf_r+0x338>
  406592:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406594:	3301      	adds	r3, #1
  406596:	3401      	adds	r4, #1
  406598:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40659c:	2201      	movs	r2, #1
  40659e:	2b07      	cmp	r3, #7
  4065a0:	9425      	str	r4, [sp, #148]	; 0x94
  4065a2:	9324      	str	r3, [sp, #144]	; 0x90
  4065a4:	e888 0006 	stmia.w	r8, {r1, r2}
  4065a8:	f300 840a 	bgt.w	406dc0 <_vfprintf_r+0xb48>
  4065ac:	f108 0808 	add.w	r8, r8, #8
  4065b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4065b2:	b16b      	cbz	r3, 4065d0 <_vfprintf_r+0x358>
  4065b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4065b6:	3301      	adds	r3, #1
  4065b8:	3402      	adds	r4, #2
  4065ba:	a91c      	add	r1, sp, #112	; 0x70
  4065bc:	2202      	movs	r2, #2
  4065be:	2b07      	cmp	r3, #7
  4065c0:	9425      	str	r4, [sp, #148]	; 0x94
  4065c2:	9324      	str	r3, [sp, #144]	; 0x90
  4065c4:	e888 0006 	stmia.w	r8, {r1, r2}
  4065c8:	f300 8406 	bgt.w	406dd8 <_vfprintf_r+0xb60>
  4065cc:	f108 0808 	add.w	r8, r8, #8
  4065d0:	2d80      	cmp	r5, #128	; 0x80
  4065d2:	f000 832e 	beq.w	406c32 <_vfprintf_r+0x9ba>
  4065d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4065d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4065da:	eba3 0a02 	sub.w	sl, r3, r2
  4065de:	f1ba 0f00 	cmp.w	sl, #0
  4065e2:	dd3b      	ble.n	40665c <_vfprintf_r+0x3e4>
  4065e4:	f1ba 0f10 	cmp.w	sl, #16
  4065e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4065ea:	4d8e      	ldr	r5, [pc, #568]	; (406824 <_vfprintf_r+0x5ac>)
  4065ec:	dd2b      	ble.n	406646 <_vfprintf_r+0x3ce>
  4065ee:	4642      	mov	r2, r8
  4065f0:	4621      	mov	r1, r4
  4065f2:	46b0      	mov	r8, r6
  4065f4:	f04f 0b10 	mov.w	fp, #16
  4065f8:	462e      	mov	r6, r5
  4065fa:	9c08      	ldr	r4, [sp, #32]
  4065fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4065fe:	e006      	b.n	40660e <_vfprintf_r+0x396>
  406600:	f1aa 0a10 	sub.w	sl, sl, #16
  406604:	f1ba 0f10 	cmp.w	sl, #16
  406608:	f102 0208 	add.w	r2, r2, #8
  40660c:	dd17      	ble.n	40663e <_vfprintf_r+0x3c6>
  40660e:	3301      	adds	r3, #1
  406610:	3110      	adds	r1, #16
  406612:	2b07      	cmp	r3, #7
  406614:	9125      	str	r1, [sp, #148]	; 0x94
  406616:	9324      	str	r3, [sp, #144]	; 0x90
  406618:	e882 0840 	stmia.w	r2, {r6, fp}
  40661c:	ddf0      	ble.n	406600 <_vfprintf_r+0x388>
  40661e:	aa23      	add	r2, sp, #140	; 0x8c
  406620:	4629      	mov	r1, r5
  406622:	4620      	mov	r0, r4
  406624:	f003 fc52 	bl	409ecc <__sprint_r>
  406628:	2800      	cmp	r0, #0
  40662a:	f040 8300 	bne.w	406c2e <_vfprintf_r+0x9b6>
  40662e:	f1aa 0a10 	sub.w	sl, sl, #16
  406632:	f1ba 0f10 	cmp.w	sl, #16
  406636:	9925      	ldr	r1, [sp, #148]	; 0x94
  406638:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40663a:	aa30      	add	r2, sp, #192	; 0xc0
  40663c:	dce7      	bgt.n	40660e <_vfprintf_r+0x396>
  40663e:	4635      	mov	r5, r6
  406640:	460c      	mov	r4, r1
  406642:	4646      	mov	r6, r8
  406644:	4690      	mov	r8, r2
  406646:	3301      	adds	r3, #1
  406648:	4454      	add	r4, sl
  40664a:	2b07      	cmp	r3, #7
  40664c:	9425      	str	r4, [sp, #148]	; 0x94
  40664e:	9324      	str	r3, [sp, #144]	; 0x90
  406650:	e888 0420 	stmia.w	r8, {r5, sl}
  406654:	f300 83a9 	bgt.w	406daa <_vfprintf_r+0xb32>
  406658:	f108 0808 	add.w	r8, r8, #8
  40665c:	9b06      	ldr	r3, [sp, #24]
  40665e:	05db      	lsls	r3, r3, #23
  406660:	f100 8285 	bmi.w	406b6e <_vfprintf_r+0x8f6>
  406664:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406666:	990d      	ldr	r1, [sp, #52]	; 0x34
  406668:	f8c8 7000 	str.w	r7, [r8]
  40666c:	3301      	adds	r3, #1
  40666e:	440c      	add	r4, r1
  406670:	2b07      	cmp	r3, #7
  406672:	9425      	str	r4, [sp, #148]	; 0x94
  406674:	f8c8 1004 	str.w	r1, [r8, #4]
  406678:	9324      	str	r3, [sp, #144]	; 0x90
  40667a:	f300 8375 	bgt.w	406d68 <_vfprintf_r+0xaf0>
  40667e:	f108 0808 	add.w	r8, r8, #8
  406682:	9b06      	ldr	r3, [sp, #24]
  406684:	0759      	lsls	r1, r3, #29
  406686:	d53b      	bpl.n	406700 <_vfprintf_r+0x488>
  406688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40668a:	9a07      	ldr	r2, [sp, #28]
  40668c:	1a9d      	subs	r5, r3, r2
  40668e:	2d00      	cmp	r5, #0
  406690:	dd36      	ble.n	406700 <_vfprintf_r+0x488>
  406692:	2d10      	cmp	r5, #16
  406694:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406696:	dd21      	ble.n	4066dc <_vfprintf_r+0x464>
  406698:	2610      	movs	r6, #16
  40669a:	9f08      	ldr	r7, [sp, #32]
  40669c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4066a0:	e004      	b.n	4066ac <_vfprintf_r+0x434>
  4066a2:	3d10      	subs	r5, #16
  4066a4:	2d10      	cmp	r5, #16
  4066a6:	f108 0808 	add.w	r8, r8, #8
  4066aa:	dd17      	ble.n	4066dc <_vfprintf_r+0x464>
  4066ac:	3301      	adds	r3, #1
  4066ae:	4a5c      	ldr	r2, [pc, #368]	; (406820 <_vfprintf_r+0x5a8>)
  4066b0:	9324      	str	r3, [sp, #144]	; 0x90
  4066b2:	3410      	adds	r4, #16
  4066b4:	2b07      	cmp	r3, #7
  4066b6:	9425      	str	r4, [sp, #148]	; 0x94
  4066b8:	e888 0044 	stmia.w	r8, {r2, r6}
  4066bc:	ddf1      	ble.n	4066a2 <_vfprintf_r+0x42a>
  4066be:	aa23      	add	r2, sp, #140	; 0x8c
  4066c0:	4651      	mov	r1, sl
  4066c2:	4638      	mov	r0, r7
  4066c4:	f003 fc02 	bl	409ecc <__sprint_r>
  4066c8:	2800      	cmp	r0, #0
  4066ca:	f040 823f 	bne.w	406b4c <_vfprintf_r+0x8d4>
  4066ce:	3d10      	subs	r5, #16
  4066d0:	2d10      	cmp	r5, #16
  4066d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4066d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4066d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4066da:	dce7      	bgt.n	4066ac <_vfprintf_r+0x434>
  4066dc:	3301      	adds	r3, #1
  4066de:	4a50      	ldr	r2, [pc, #320]	; (406820 <_vfprintf_r+0x5a8>)
  4066e0:	9324      	str	r3, [sp, #144]	; 0x90
  4066e2:	442c      	add	r4, r5
  4066e4:	2b07      	cmp	r3, #7
  4066e6:	9425      	str	r4, [sp, #148]	; 0x94
  4066e8:	e888 0024 	stmia.w	r8, {r2, r5}
  4066ec:	dd08      	ble.n	406700 <_vfprintf_r+0x488>
  4066ee:	aa23      	add	r2, sp, #140	; 0x8c
  4066f0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4066f2:	9808      	ldr	r0, [sp, #32]
  4066f4:	f003 fbea 	bl	409ecc <__sprint_r>
  4066f8:	2800      	cmp	r0, #0
  4066fa:	f040 8347 	bne.w	406d8c <_vfprintf_r+0xb14>
  4066fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406704:	9907      	ldr	r1, [sp, #28]
  406706:	428a      	cmp	r2, r1
  406708:	bfac      	ite	ge
  40670a:	189b      	addge	r3, r3, r2
  40670c:	185b      	addlt	r3, r3, r1
  40670e:	930b      	str	r3, [sp, #44]	; 0x2c
  406710:	2c00      	cmp	r4, #0
  406712:	f040 8333 	bne.w	406d7c <_vfprintf_r+0xb04>
  406716:	2300      	movs	r3, #0
  406718:	9324      	str	r3, [sp, #144]	; 0x90
  40671a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40671e:	e5f7      	b.n	406310 <_vfprintf_r+0x98>
  406720:	4651      	mov	r1, sl
  406722:	9808      	ldr	r0, [sp, #32]
  406724:	f001 f896 	bl	407854 <__swsetup_r>
  406728:	2800      	cmp	r0, #0
  40672a:	d038      	beq.n	40679e <_vfprintf_r+0x526>
  40672c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406730:	07dd      	lsls	r5, r3, #31
  406732:	d404      	bmi.n	40673e <_vfprintf_r+0x4c6>
  406734:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406738:	059c      	lsls	r4, r3, #22
  40673a:	f140 85ca 	bpl.w	4072d2 <_vfprintf_r+0x105a>
  40673e:	f04f 33ff 	mov.w	r3, #4294967295
  406742:	930b      	str	r3, [sp, #44]	; 0x2c
  406744:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406746:	b041      	add	sp, #260	; 0x104
  406748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40674c:	aa23      	add	r2, sp, #140	; 0x8c
  40674e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406750:	9808      	ldr	r0, [sp, #32]
  406752:	f003 fbbb 	bl	409ecc <__sprint_r>
  406756:	2800      	cmp	r0, #0
  406758:	f040 8318 	bne.w	406d8c <_vfprintf_r+0xb14>
  40675c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406760:	e5f5      	b.n	40634e <_vfprintf_r+0xd6>
  406762:	9808      	ldr	r0, [sp, #32]
  406764:	f002 f9a2 	bl	408aac <__sinit>
  406768:	e59c      	b.n	4062a4 <_vfprintf_r+0x2c>
  40676a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  40676e:	2a00      	cmp	r2, #0
  406770:	f6ff adbd 	blt.w	4062ee <_vfprintf_r+0x76>
  406774:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  406778:	07d0      	lsls	r0, r2, #31
  40677a:	d405      	bmi.n	406788 <_vfprintf_r+0x510>
  40677c:	0599      	lsls	r1, r3, #22
  40677e:	d403      	bmi.n	406788 <_vfprintf_r+0x510>
  406780:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406784:	f002 fcd0 	bl	409128 <__retarget_lock_release_recursive>
  406788:	462b      	mov	r3, r5
  40678a:	464a      	mov	r2, r9
  40678c:	4651      	mov	r1, sl
  40678e:	9808      	ldr	r0, [sp, #32]
  406790:	f001 f81e 	bl	4077d0 <__sbprintf>
  406794:	900b      	str	r0, [sp, #44]	; 0x2c
  406796:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406798:	b041      	add	sp, #260	; 0x104
  40679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40679e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4067a2:	e59f      	b.n	4062e4 <_vfprintf_r+0x6c>
  4067a4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4067a8:	f002 fcbc 	bl	409124 <__retarget_lock_acquire_recursive>
  4067ac:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4067b0:	b293      	uxth	r3, r2
  4067b2:	e582      	b.n	4062ba <_vfprintf_r+0x42>
  4067b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4067b6:	930e      	str	r3, [sp, #56]	; 0x38
  4067b8:	4240      	negs	r0, r0
  4067ba:	900c      	str	r0, [sp, #48]	; 0x30
  4067bc:	f04b 0b04 	orr.w	fp, fp, #4
  4067c0:	f899 6000 	ldrb.w	r6, [r9]
  4067c4:	e5d7      	b.n	406376 <_vfprintf_r+0xfe>
  4067c6:	2a00      	cmp	r2, #0
  4067c8:	f040 87df 	bne.w	40778a <_vfprintf_r+0x1512>
  4067cc:	4b16      	ldr	r3, [pc, #88]	; (406828 <_vfprintf_r+0x5b0>)
  4067ce:	9318      	str	r3, [sp, #96]	; 0x60
  4067d0:	f01b 0f20 	tst.w	fp, #32
  4067d4:	f040 84b9 	bne.w	40714a <_vfprintf_r+0xed2>
  4067d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4067da:	f01b 0f10 	tst.w	fp, #16
  4067de:	4613      	mov	r3, r2
  4067e0:	f040 83dc 	bne.w	406f9c <_vfprintf_r+0xd24>
  4067e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4067e8:	f000 83d8 	beq.w	406f9c <_vfprintf_r+0xd24>
  4067ec:	3304      	adds	r3, #4
  4067ee:	8814      	ldrh	r4, [r2, #0]
  4067f0:	930e      	str	r3, [sp, #56]	; 0x38
  4067f2:	2500      	movs	r5, #0
  4067f4:	f01b 0f01 	tst.w	fp, #1
  4067f8:	f000 8322 	beq.w	406e40 <_vfprintf_r+0xbc8>
  4067fc:	ea54 0305 	orrs.w	r3, r4, r5
  406800:	f000 831e 	beq.w	406e40 <_vfprintf_r+0xbc8>
  406804:	2330      	movs	r3, #48	; 0x30
  406806:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40680a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40680e:	f04b 0b02 	orr.w	fp, fp, #2
  406812:	2302      	movs	r3, #2
  406814:	e63c      	b.n	406490 <_vfprintf_r+0x218>
  406816:	f04b 0b20 	orr.w	fp, fp, #32
  40681a:	f899 6000 	ldrb.w	r6, [r9]
  40681e:	e5aa      	b.n	406376 <_vfprintf_r+0xfe>
  406820:	0040b4c8 	.word	0x0040b4c8
  406824:	0040b4d8 	.word	0x0040b4d8
  406828:	0040b488 	.word	0x0040b488
  40682c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40682e:	6817      	ldr	r7, [r2, #0]
  406830:	2400      	movs	r4, #0
  406832:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406836:	1d15      	adds	r5, r2, #4
  406838:	2f00      	cmp	r7, #0
  40683a:	f000 864e 	beq.w	4074da <_vfprintf_r+0x1262>
  40683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406840:	1c53      	adds	r3, r2, #1
  406842:	f000 85cc 	beq.w	4073de <_vfprintf_r+0x1166>
  406846:	4621      	mov	r1, r4
  406848:	4638      	mov	r0, r7
  40684a:	f002 fce9 	bl	409220 <memchr>
  40684e:	2800      	cmp	r0, #0
  406850:	f000 8697 	beq.w	407582 <_vfprintf_r+0x130a>
  406854:	1bc3      	subs	r3, r0, r7
  406856:	930d      	str	r3, [sp, #52]	; 0x34
  406858:	9409      	str	r4, [sp, #36]	; 0x24
  40685a:	950e      	str	r5, [sp, #56]	; 0x38
  40685c:	f8cd b018 	str.w	fp, [sp, #24]
  406860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406864:	9307      	str	r3, [sp, #28]
  406866:	9410      	str	r4, [sp, #64]	; 0x40
  406868:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40686c:	e636      	b.n	4064dc <_vfprintf_r+0x264>
  40686e:	2a00      	cmp	r2, #0
  406870:	f040 8796 	bne.w	4077a0 <_vfprintf_r+0x1528>
  406874:	f01b 0f20 	tst.w	fp, #32
  406878:	f040 845a 	bne.w	407130 <_vfprintf_r+0xeb8>
  40687c:	f01b 0f10 	tst.w	fp, #16
  406880:	f040 83a2 	bne.w	406fc8 <_vfprintf_r+0xd50>
  406884:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406888:	f000 839e 	beq.w	406fc8 <_vfprintf_r+0xd50>
  40688c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40688e:	f9b1 4000 	ldrsh.w	r4, [r1]
  406892:	3104      	adds	r1, #4
  406894:	17e5      	asrs	r5, r4, #31
  406896:	4622      	mov	r2, r4
  406898:	462b      	mov	r3, r5
  40689a:	910e      	str	r1, [sp, #56]	; 0x38
  40689c:	2a00      	cmp	r2, #0
  40689e:	f173 0300 	sbcs.w	r3, r3, #0
  4068a2:	f2c0 8487 	blt.w	4071b4 <_vfprintf_r+0xf3c>
  4068a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4068a8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4068ac:	1c4a      	adds	r2, r1, #1
  4068ae:	f04f 0301 	mov.w	r3, #1
  4068b2:	f47f adf5 	bne.w	4064a0 <_vfprintf_r+0x228>
  4068b6:	ea54 0205 	orrs.w	r2, r4, r5
  4068ba:	f000 826c 	beq.w	406d96 <_vfprintf_r+0xb1e>
  4068be:	f8cd b018 	str.w	fp, [sp, #24]
  4068c2:	2b01      	cmp	r3, #1
  4068c4:	f000 8308 	beq.w	406ed8 <_vfprintf_r+0xc60>
  4068c8:	2b02      	cmp	r3, #2
  4068ca:	f040 8295 	bne.w	406df8 <_vfprintf_r+0xb80>
  4068ce:	9818      	ldr	r0, [sp, #96]	; 0x60
  4068d0:	af30      	add	r7, sp, #192	; 0xc0
  4068d2:	0923      	lsrs	r3, r4, #4
  4068d4:	f004 010f 	and.w	r1, r4, #15
  4068d8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4068dc:	092a      	lsrs	r2, r5, #4
  4068de:	461c      	mov	r4, r3
  4068e0:	4615      	mov	r5, r2
  4068e2:	5c43      	ldrb	r3, [r0, r1]
  4068e4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4068e8:	ea54 0305 	orrs.w	r3, r4, r5
  4068ec:	d1f1      	bne.n	4068d2 <_vfprintf_r+0x65a>
  4068ee:	ab30      	add	r3, sp, #192	; 0xc0
  4068f0:	1bdb      	subs	r3, r3, r7
  4068f2:	930d      	str	r3, [sp, #52]	; 0x34
  4068f4:	e5ea      	b.n	4064cc <_vfprintf_r+0x254>
  4068f6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4068fa:	f899 6000 	ldrb.w	r6, [r9]
  4068fe:	e53a      	b.n	406376 <_vfprintf_r+0xfe>
  406900:	f899 6000 	ldrb.w	r6, [r9]
  406904:	2e6c      	cmp	r6, #108	; 0x6c
  406906:	bf03      	ittte	eq
  406908:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  40690c:	f04b 0b20 	orreq.w	fp, fp, #32
  406910:	f109 0901 	addeq.w	r9, r9, #1
  406914:	f04b 0b10 	orrne.w	fp, fp, #16
  406918:	e52d      	b.n	406376 <_vfprintf_r+0xfe>
  40691a:	2a00      	cmp	r2, #0
  40691c:	f040 874c 	bne.w	4077b8 <_vfprintf_r+0x1540>
  406920:	f01b 0f20 	tst.w	fp, #32
  406924:	f040 853f 	bne.w	4073a6 <_vfprintf_r+0x112e>
  406928:	f01b 0f10 	tst.w	fp, #16
  40692c:	f040 80fc 	bne.w	406b28 <_vfprintf_r+0x8b0>
  406930:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406934:	f000 80f8 	beq.w	406b28 <_vfprintf_r+0x8b0>
  406938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40693a:	6813      	ldr	r3, [r2, #0]
  40693c:	3204      	adds	r2, #4
  40693e:	920e      	str	r2, [sp, #56]	; 0x38
  406940:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  406944:	801a      	strh	r2, [r3, #0]
  406946:	e4e3      	b.n	406310 <_vfprintf_r+0x98>
  406948:	f899 6000 	ldrb.w	r6, [r9]
  40694c:	2900      	cmp	r1, #0
  40694e:	f47f ad12 	bne.w	406376 <_vfprintf_r+0xfe>
  406952:	2201      	movs	r2, #1
  406954:	2120      	movs	r1, #32
  406956:	e50e      	b.n	406376 <_vfprintf_r+0xfe>
  406958:	f899 6000 	ldrb.w	r6, [r9]
  40695c:	2e2a      	cmp	r6, #42	; 0x2a
  40695e:	f109 0001 	add.w	r0, r9, #1
  406962:	f000 86f1 	beq.w	407748 <_vfprintf_r+0x14d0>
  406966:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40696a:	2b09      	cmp	r3, #9
  40696c:	4681      	mov	r9, r0
  40696e:	bf98      	it	ls
  406970:	2000      	movls	r0, #0
  406972:	f200 863d 	bhi.w	4075f0 <_vfprintf_r+0x1378>
  406976:	f819 6b01 	ldrb.w	r6, [r9], #1
  40697a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40697e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406982:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406986:	2b09      	cmp	r3, #9
  406988:	d9f5      	bls.n	406976 <_vfprintf_r+0x6fe>
  40698a:	9009      	str	r0, [sp, #36]	; 0x24
  40698c:	e4f5      	b.n	40637a <_vfprintf_r+0x102>
  40698e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406992:	f899 6000 	ldrb.w	r6, [r9]
  406996:	e4ee      	b.n	406376 <_vfprintf_r+0xfe>
  406998:	f899 6000 	ldrb.w	r6, [r9]
  40699c:	2201      	movs	r2, #1
  40699e:	212b      	movs	r1, #43	; 0x2b
  4069a0:	e4e9      	b.n	406376 <_vfprintf_r+0xfe>
  4069a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4069a4:	4bae      	ldr	r3, [pc, #696]	; (406c60 <_vfprintf_r+0x9e8>)
  4069a6:	6814      	ldr	r4, [r2, #0]
  4069a8:	9318      	str	r3, [sp, #96]	; 0x60
  4069aa:	2678      	movs	r6, #120	; 0x78
  4069ac:	2330      	movs	r3, #48	; 0x30
  4069ae:	3204      	adds	r2, #4
  4069b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4069b4:	f04b 0b02 	orr.w	fp, fp, #2
  4069b8:	920e      	str	r2, [sp, #56]	; 0x38
  4069ba:	2500      	movs	r5, #0
  4069bc:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4069c0:	2302      	movs	r3, #2
  4069c2:	e565      	b.n	406490 <_vfprintf_r+0x218>
  4069c4:	2a00      	cmp	r2, #0
  4069c6:	f040 86e4 	bne.w	407792 <_vfprintf_r+0x151a>
  4069ca:	4ba6      	ldr	r3, [pc, #664]	; (406c64 <_vfprintf_r+0x9ec>)
  4069cc:	9318      	str	r3, [sp, #96]	; 0x60
  4069ce:	e6ff      	b.n	4067d0 <_vfprintf_r+0x558>
  4069d0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4069d2:	f8cd b018 	str.w	fp, [sp, #24]
  4069d6:	680a      	ldr	r2, [r1, #0]
  4069d8:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4069dc:	2300      	movs	r3, #0
  4069de:	460a      	mov	r2, r1
  4069e0:	469a      	mov	sl, r3
  4069e2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4069e6:	3204      	adds	r2, #4
  4069e8:	2301      	movs	r3, #1
  4069ea:	9307      	str	r3, [sp, #28]
  4069ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  4069f0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  4069f4:	920e      	str	r2, [sp, #56]	; 0x38
  4069f6:	930d      	str	r3, [sp, #52]	; 0x34
  4069f8:	af26      	add	r7, sp, #152	; 0x98
  4069fa:	e575      	b.n	4064e8 <_vfprintf_r+0x270>
  4069fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406a00:	2000      	movs	r0, #0
  406a02:	f819 6b01 	ldrb.w	r6, [r9], #1
  406a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406a0a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406a0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406a12:	2b09      	cmp	r3, #9
  406a14:	d9f5      	bls.n	406a02 <_vfprintf_r+0x78a>
  406a16:	900c      	str	r0, [sp, #48]	; 0x30
  406a18:	e4af      	b.n	40637a <_vfprintf_r+0x102>
  406a1a:	2a00      	cmp	r2, #0
  406a1c:	f040 86c8 	bne.w	4077b0 <_vfprintf_r+0x1538>
  406a20:	f04b 0b10 	orr.w	fp, fp, #16
  406a24:	e726      	b.n	406874 <_vfprintf_r+0x5fc>
  406a26:	f04b 0b01 	orr.w	fp, fp, #1
  406a2a:	f899 6000 	ldrb.w	r6, [r9]
  406a2e:	e4a2      	b.n	406376 <_vfprintf_r+0xfe>
  406a30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406a32:	6823      	ldr	r3, [r4, #0]
  406a34:	930c      	str	r3, [sp, #48]	; 0x30
  406a36:	4618      	mov	r0, r3
  406a38:	2800      	cmp	r0, #0
  406a3a:	4623      	mov	r3, r4
  406a3c:	f103 0304 	add.w	r3, r3, #4
  406a40:	f6ff aeb8 	blt.w	4067b4 <_vfprintf_r+0x53c>
  406a44:	930e      	str	r3, [sp, #56]	; 0x38
  406a46:	f899 6000 	ldrb.w	r6, [r9]
  406a4a:	e494      	b.n	406376 <_vfprintf_r+0xfe>
  406a4c:	2a00      	cmp	r2, #0
  406a4e:	f040 86b7 	bne.w	4077c0 <_vfprintf_r+0x1548>
  406a52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406a54:	3507      	adds	r5, #7
  406a56:	f025 0307 	bic.w	r3, r5, #7
  406a5a:	f103 0208 	add.w	r2, r3, #8
  406a5e:	920e      	str	r2, [sp, #56]	; 0x38
  406a60:	681a      	ldr	r2, [r3, #0]
  406a62:	9213      	str	r2, [sp, #76]	; 0x4c
  406a64:	685b      	ldr	r3, [r3, #4]
  406a66:	9312      	str	r3, [sp, #72]	; 0x48
  406a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  406a6c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  406a70:	4628      	mov	r0, r5
  406a72:	4621      	mov	r1, r4
  406a74:	f04f 32ff 	mov.w	r2, #4294967295
  406a78:	4b7b      	ldr	r3, [pc, #492]	; (406c68 <_vfprintf_r+0x9f0>)
  406a7a:	f004 f929 	bl	40acd0 <__aeabi_dcmpun>
  406a7e:	2800      	cmp	r0, #0
  406a80:	f040 83a2 	bne.w	4071c8 <_vfprintf_r+0xf50>
  406a84:	4628      	mov	r0, r5
  406a86:	4621      	mov	r1, r4
  406a88:	f04f 32ff 	mov.w	r2, #4294967295
  406a8c:	4b76      	ldr	r3, [pc, #472]	; (406c68 <_vfprintf_r+0x9f0>)
  406a8e:	f004 f901 	bl	40ac94 <__aeabi_dcmple>
  406a92:	2800      	cmp	r0, #0
  406a94:	f040 8398 	bne.w	4071c8 <_vfprintf_r+0xf50>
  406a98:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406a9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406a9e:	9912      	ldr	r1, [sp, #72]	; 0x48
  406aa0:	f004 f8ee 	bl	40ac80 <__aeabi_dcmplt>
  406aa4:	2800      	cmp	r0, #0
  406aa6:	f040 8435 	bne.w	407314 <_vfprintf_r+0x109c>
  406aaa:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406aae:	4f6f      	ldr	r7, [pc, #444]	; (406c6c <_vfprintf_r+0x9f4>)
  406ab0:	4b6f      	ldr	r3, [pc, #444]	; (406c70 <_vfprintf_r+0x9f8>)
  406ab2:	2203      	movs	r2, #3
  406ab4:	2100      	movs	r1, #0
  406ab6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406aba:	9207      	str	r2, [sp, #28]
  406abc:	9109      	str	r1, [sp, #36]	; 0x24
  406abe:	9006      	str	r0, [sp, #24]
  406ac0:	2e47      	cmp	r6, #71	; 0x47
  406ac2:	bfd8      	it	le
  406ac4:	461f      	movle	r7, r3
  406ac6:	920d      	str	r2, [sp, #52]	; 0x34
  406ac8:	9110      	str	r1, [sp, #64]	; 0x40
  406aca:	e507      	b.n	4064dc <_vfprintf_r+0x264>
  406acc:	f04b 0b08 	orr.w	fp, fp, #8
  406ad0:	f899 6000 	ldrb.w	r6, [r9]
  406ad4:	e44f      	b.n	406376 <_vfprintf_r+0xfe>
  406ad6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406ad8:	3507      	adds	r5, #7
  406ada:	f025 0307 	bic.w	r3, r5, #7
  406ade:	f103 0208 	add.w	r2, r3, #8
  406ae2:	e9d3 4500 	ldrd	r4, r5, [r3]
  406ae6:	920e      	str	r2, [sp, #56]	; 0x38
  406ae8:	2300      	movs	r3, #0
  406aea:	e4d1      	b.n	406490 <_vfprintf_r+0x218>
  406aec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406aee:	3507      	adds	r5, #7
  406af0:	f025 0307 	bic.w	r3, r5, #7
  406af4:	f103 0208 	add.w	r2, r3, #8
  406af8:	e9d3 4500 	ldrd	r4, r5, [r3]
  406afc:	920e      	str	r2, [sp, #56]	; 0x38
  406afe:	2301      	movs	r3, #1
  406b00:	e4c6      	b.n	406490 <_vfprintf_r+0x218>
  406b02:	2a00      	cmp	r2, #0
  406b04:	f040 8650 	bne.w	4077a8 <_vfprintf_r+0x1530>
  406b08:	b1c6      	cbz	r6, 406b3c <_vfprintf_r+0x8c4>
  406b0a:	2300      	movs	r3, #0
  406b0c:	2201      	movs	r2, #1
  406b0e:	469a      	mov	sl, r3
  406b10:	9207      	str	r2, [sp, #28]
  406b12:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  406b16:	f8cd b018 	str.w	fp, [sp, #24]
  406b1a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406b1e:	9309      	str	r3, [sp, #36]	; 0x24
  406b20:	9310      	str	r3, [sp, #64]	; 0x40
  406b22:	920d      	str	r2, [sp, #52]	; 0x34
  406b24:	af26      	add	r7, sp, #152	; 0x98
  406b26:	e4df      	b.n	4064e8 <_vfprintf_r+0x270>
  406b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406b2a:	6813      	ldr	r3, [r2, #0]
  406b2c:	3204      	adds	r2, #4
  406b2e:	920e      	str	r2, [sp, #56]	; 0x38
  406b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406b32:	601a      	str	r2, [r3, #0]
  406b34:	f7ff bbec 	b.w	406310 <_vfprintf_r+0x98>
  406b38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406b3a:	e527      	b.n	40658c <_vfprintf_r+0x314>
  406b3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406b3e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406b42:	2b00      	cmp	r3, #0
  406b44:	f040 8594 	bne.w	407670 <_vfprintf_r+0x13f8>
  406b48:	2300      	movs	r3, #0
  406b4a:	9324      	str	r3, [sp, #144]	; 0x90
  406b4c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406b50:	f013 0f01 	tst.w	r3, #1
  406b54:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406b58:	d102      	bne.n	406b60 <_vfprintf_r+0x8e8>
  406b5a:	059a      	lsls	r2, r3, #22
  406b5c:	f140 8249 	bpl.w	406ff2 <_vfprintf_r+0xd7a>
  406b60:	065b      	lsls	r3, r3, #25
  406b62:	f53f adec 	bmi.w	40673e <_vfprintf_r+0x4c6>
  406b66:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406b68:	b041      	add	sp, #260	; 0x104
  406b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b6e:	2e65      	cmp	r6, #101	; 0x65
  406b70:	f340 80b2 	ble.w	406cd8 <_vfprintf_r+0xa60>
  406b74:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406b76:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406b7a:	9912      	ldr	r1, [sp, #72]	; 0x48
  406b7c:	f004 f876 	bl	40ac6c <__aeabi_dcmpeq>
  406b80:	2800      	cmp	r0, #0
  406b82:	f000 8160 	beq.w	406e46 <_vfprintf_r+0xbce>
  406b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b88:	4a3a      	ldr	r2, [pc, #232]	; (406c74 <_vfprintf_r+0x9fc>)
  406b8a:	f8c8 2000 	str.w	r2, [r8]
  406b8e:	3301      	adds	r3, #1
  406b90:	3401      	adds	r4, #1
  406b92:	2201      	movs	r2, #1
  406b94:	2b07      	cmp	r3, #7
  406b96:	9425      	str	r4, [sp, #148]	; 0x94
  406b98:	9324      	str	r3, [sp, #144]	; 0x90
  406b9a:	f8c8 2004 	str.w	r2, [r8, #4]
  406b9e:	f300 83bf 	bgt.w	407320 <_vfprintf_r+0x10a8>
  406ba2:	f108 0808 	add.w	r8, r8, #8
  406ba6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406baa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406bac:	4293      	cmp	r3, r2
  406bae:	db03      	blt.n	406bb8 <_vfprintf_r+0x940>
  406bb0:	9b06      	ldr	r3, [sp, #24]
  406bb2:	07df      	lsls	r7, r3, #31
  406bb4:	f57f ad65 	bpl.w	406682 <_vfprintf_r+0x40a>
  406bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bba:	9914      	ldr	r1, [sp, #80]	; 0x50
  406bbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  406bbe:	f8c8 2000 	str.w	r2, [r8]
  406bc2:	3301      	adds	r3, #1
  406bc4:	440c      	add	r4, r1
  406bc6:	2b07      	cmp	r3, #7
  406bc8:	f8c8 1004 	str.w	r1, [r8, #4]
  406bcc:	9425      	str	r4, [sp, #148]	; 0x94
  406bce:	9324      	str	r3, [sp, #144]	; 0x90
  406bd0:	f300 83f8 	bgt.w	4073c4 <_vfprintf_r+0x114c>
  406bd4:	f108 0808 	add.w	r8, r8, #8
  406bd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bda:	1e5e      	subs	r6, r3, #1
  406bdc:	2e00      	cmp	r6, #0
  406bde:	f77f ad50 	ble.w	406682 <_vfprintf_r+0x40a>
  406be2:	2e10      	cmp	r6, #16
  406be4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406be6:	4d24      	ldr	r5, [pc, #144]	; (406c78 <_vfprintf_r+0xa00>)
  406be8:	f340 81dd 	ble.w	406fa6 <_vfprintf_r+0xd2e>
  406bec:	2710      	movs	r7, #16
  406bee:	f8dd a020 	ldr.w	sl, [sp, #32]
  406bf2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406bf6:	e005      	b.n	406c04 <_vfprintf_r+0x98c>
  406bf8:	f108 0808 	add.w	r8, r8, #8
  406bfc:	3e10      	subs	r6, #16
  406bfe:	2e10      	cmp	r6, #16
  406c00:	f340 81d1 	ble.w	406fa6 <_vfprintf_r+0xd2e>
  406c04:	3301      	adds	r3, #1
  406c06:	3410      	adds	r4, #16
  406c08:	2b07      	cmp	r3, #7
  406c0a:	9425      	str	r4, [sp, #148]	; 0x94
  406c0c:	9324      	str	r3, [sp, #144]	; 0x90
  406c0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  406c12:	ddf1      	ble.n	406bf8 <_vfprintf_r+0x980>
  406c14:	aa23      	add	r2, sp, #140	; 0x8c
  406c16:	4659      	mov	r1, fp
  406c18:	4650      	mov	r0, sl
  406c1a:	f003 f957 	bl	409ecc <__sprint_r>
  406c1e:	2800      	cmp	r0, #0
  406c20:	f040 83cd 	bne.w	4073be <_vfprintf_r+0x1146>
  406c24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c28:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c2c:	e7e6      	b.n	406bfc <_vfprintf_r+0x984>
  406c2e:	46aa      	mov	sl, r5
  406c30:	e78c      	b.n	406b4c <_vfprintf_r+0x8d4>
  406c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c34:	9a07      	ldr	r2, [sp, #28]
  406c36:	eba3 0a02 	sub.w	sl, r3, r2
  406c3a:	f1ba 0f00 	cmp.w	sl, #0
  406c3e:	f77f acca 	ble.w	4065d6 <_vfprintf_r+0x35e>
  406c42:	f1ba 0f10 	cmp.w	sl, #16
  406c46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c48:	4d0b      	ldr	r5, [pc, #44]	; (406c78 <_vfprintf_r+0xa00>)
  406c4a:	dd39      	ble.n	406cc0 <_vfprintf_r+0xa48>
  406c4c:	4642      	mov	r2, r8
  406c4e:	4621      	mov	r1, r4
  406c50:	46b0      	mov	r8, r6
  406c52:	f04f 0b10 	mov.w	fp, #16
  406c56:	462e      	mov	r6, r5
  406c58:	9c08      	ldr	r4, [sp, #32]
  406c5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406c5c:	e015      	b.n	406c8a <_vfprintf_r+0xa12>
  406c5e:	bf00      	nop
  406c60:	0040b488 	.word	0x0040b488
  406c64:	0040b474 	.word	0x0040b474
  406c68:	7fefffff 	.word	0x7fefffff
  406c6c:	0040b468 	.word	0x0040b468
  406c70:	0040b464 	.word	0x0040b464
  406c74:	0040b4a4 	.word	0x0040b4a4
  406c78:	0040b4d8 	.word	0x0040b4d8
  406c7c:	f1aa 0a10 	sub.w	sl, sl, #16
  406c80:	f1ba 0f10 	cmp.w	sl, #16
  406c84:	f102 0208 	add.w	r2, r2, #8
  406c88:	dd16      	ble.n	406cb8 <_vfprintf_r+0xa40>
  406c8a:	3301      	adds	r3, #1
  406c8c:	3110      	adds	r1, #16
  406c8e:	2b07      	cmp	r3, #7
  406c90:	9125      	str	r1, [sp, #148]	; 0x94
  406c92:	9324      	str	r3, [sp, #144]	; 0x90
  406c94:	e882 0840 	stmia.w	r2, {r6, fp}
  406c98:	ddf0      	ble.n	406c7c <_vfprintf_r+0xa04>
  406c9a:	aa23      	add	r2, sp, #140	; 0x8c
  406c9c:	4629      	mov	r1, r5
  406c9e:	4620      	mov	r0, r4
  406ca0:	f003 f914 	bl	409ecc <__sprint_r>
  406ca4:	2800      	cmp	r0, #0
  406ca6:	d1c2      	bne.n	406c2e <_vfprintf_r+0x9b6>
  406ca8:	f1aa 0a10 	sub.w	sl, sl, #16
  406cac:	f1ba 0f10 	cmp.w	sl, #16
  406cb0:	9925      	ldr	r1, [sp, #148]	; 0x94
  406cb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406cb4:	aa30      	add	r2, sp, #192	; 0xc0
  406cb6:	dce8      	bgt.n	406c8a <_vfprintf_r+0xa12>
  406cb8:	4635      	mov	r5, r6
  406cba:	460c      	mov	r4, r1
  406cbc:	4646      	mov	r6, r8
  406cbe:	4690      	mov	r8, r2
  406cc0:	3301      	adds	r3, #1
  406cc2:	4454      	add	r4, sl
  406cc4:	2b07      	cmp	r3, #7
  406cc6:	9425      	str	r4, [sp, #148]	; 0x94
  406cc8:	9324      	str	r3, [sp, #144]	; 0x90
  406cca:	e888 0420 	stmia.w	r8, {r5, sl}
  406cce:	f300 8264 	bgt.w	40719a <_vfprintf_r+0xf22>
  406cd2:	f108 0808 	add.w	r8, r8, #8
  406cd6:	e47e      	b.n	4065d6 <_vfprintf_r+0x35e>
  406cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406cda:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406cdc:	2b01      	cmp	r3, #1
  406cde:	f340 81fd 	ble.w	4070dc <_vfprintf_r+0xe64>
  406ce2:	3601      	adds	r6, #1
  406ce4:	3401      	adds	r4, #1
  406ce6:	2301      	movs	r3, #1
  406ce8:	2e07      	cmp	r6, #7
  406cea:	9425      	str	r4, [sp, #148]	; 0x94
  406cec:	9624      	str	r6, [sp, #144]	; 0x90
  406cee:	f8c8 7000 	str.w	r7, [r8]
  406cf2:	f8c8 3004 	str.w	r3, [r8, #4]
  406cf6:	f300 820e 	bgt.w	407116 <_vfprintf_r+0xe9e>
  406cfa:	f108 0808 	add.w	r8, r8, #8
  406cfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406d00:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406d02:	f8c8 3000 	str.w	r3, [r8]
  406d06:	3601      	adds	r6, #1
  406d08:	4414      	add	r4, r2
  406d0a:	2e07      	cmp	r6, #7
  406d0c:	9425      	str	r4, [sp, #148]	; 0x94
  406d0e:	9624      	str	r6, [sp, #144]	; 0x90
  406d10:	f8c8 2004 	str.w	r2, [r8, #4]
  406d14:	f300 822e 	bgt.w	407174 <_vfprintf_r+0xefc>
  406d18:	f108 0808 	add.w	r8, r8, #8
  406d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406d1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406d20:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406d22:	9912      	ldr	r1, [sp, #72]	; 0x48
  406d24:	f003 ffa2 	bl	40ac6c <__aeabi_dcmpeq>
  406d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d2a:	2800      	cmp	r0, #0
  406d2c:	f040 8106 	bne.w	406f3c <_vfprintf_r+0xcc4>
  406d30:	3b01      	subs	r3, #1
  406d32:	3601      	adds	r6, #1
  406d34:	3701      	adds	r7, #1
  406d36:	441c      	add	r4, r3
  406d38:	2e07      	cmp	r6, #7
  406d3a:	9624      	str	r6, [sp, #144]	; 0x90
  406d3c:	9425      	str	r4, [sp, #148]	; 0x94
  406d3e:	f8c8 7000 	str.w	r7, [r8]
  406d42:	f8c8 3004 	str.w	r3, [r8, #4]
  406d46:	f300 81d9 	bgt.w	4070fc <_vfprintf_r+0xe84>
  406d4a:	f108 0808 	add.w	r8, r8, #8
  406d4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406d50:	f8c8 2004 	str.w	r2, [r8, #4]
  406d54:	3601      	adds	r6, #1
  406d56:	4414      	add	r4, r2
  406d58:	ab1f      	add	r3, sp, #124	; 0x7c
  406d5a:	2e07      	cmp	r6, #7
  406d5c:	9425      	str	r4, [sp, #148]	; 0x94
  406d5e:	9624      	str	r6, [sp, #144]	; 0x90
  406d60:	f8c8 3000 	str.w	r3, [r8]
  406d64:	f77f ac8b 	ble.w	40667e <_vfprintf_r+0x406>
  406d68:	aa23      	add	r2, sp, #140	; 0x8c
  406d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d6c:	9808      	ldr	r0, [sp, #32]
  406d6e:	f003 f8ad 	bl	409ecc <__sprint_r>
  406d72:	b958      	cbnz	r0, 406d8c <_vfprintf_r+0xb14>
  406d74:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406d76:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406d7a:	e482      	b.n	406682 <_vfprintf_r+0x40a>
  406d7c:	aa23      	add	r2, sp, #140	; 0x8c
  406d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d80:	9808      	ldr	r0, [sp, #32]
  406d82:	f003 f8a3 	bl	409ecc <__sprint_r>
  406d86:	2800      	cmp	r0, #0
  406d88:	f43f acc5 	beq.w	406716 <_vfprintf_r+0x49e>
  406d8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406d90:	e6dc      	b.n	406b4c <_vfprintf_r+0x8d4>
  406d92:	f8dd b018 	ldr.w	fp, [sp, #24]
  406d96:	2b01      	cmp	r3, #1
  406d98:	f000 8121 	beq.w	406fde <_vfprintf_r+0xd66>
  406d9c:	2b02      	cmp	r3, #2
  406d9e:	d127      	bne.n	406df0 <_vfprintf_r+0xb78>
  406da0:	f8cd b018 	str.w	fp, [sp, #24]
  406da4:	2400      	movs	r4, #0
  406da6:	2500      	movs	r5, #0
  406da8:	e591      	b.n	4068ce <_vfprintf_r+0x656>
  406daa:	aa23      	add	r2, sp, #140	; 0x8c
  406dac:	990a      	ldr	r1, [sp, #40]	; 0x28
  406dae:	9808      	ldr	r0, [sp, #32]
  406db0:	f003 f88c 	bl	409ecc <__sprint_r>
  406db4:	2800      	cmp	r0, #0
  406db6:	d1e9      	bne.n	406d8c <_vfprintf_r+0xb14>
  406db8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406dba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dbe:	e44d      	b.n	40665c <_vfprintf_r+0x3e4>
  406dc0:	aa23      	add	r2, sp, #140	; 0x8c
  406dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
  406dc4:	9808      	ldr	r0, [sp, #32]
  406dc6:	f003 f881 	bl	409ecc <__sprint_r>
  406dca:	2800      	cmp	r0, #0
  406dcc:	d1de      	bne.n	406d8c <_vfprintf_r+0xb14>
  406dce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406dd0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dd4:	f7ff bbec 	b.w	4065b0 <_vfprintf_r+0x338>
  406dd8:	aa23      	add	r2, sp, #140	; 0x8c
  406dda:	990a      	ldr	r1, [sp, #40]	; 0x28
  406ddc:	9808      	ldr	r0, [sp, #32]
  406dde:	f003 f875 	bl	409ecc <__sprint_r>
  406de2:	2800      	cmp	r0, #0
  406de4:	d1d2      	bne.n	406d8c <_vfprintf_r+0xb14>
  406de6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406de8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dec:	f7ff bbf0 	b.w	4065d0 <_vfprintf_r+0x358>
  406df0:	f8cd b018 	str.w	fp, [sp, #24]
  406df4:	2400      	movs	r4, #0
  406df6:	2500      	movs	r5, #0
  406df8:	a930      	add	r1, sp, #192	; 0xc0
  406dfa:	e000      	b.n	406dfe <_vfprintf_r+0xb86>
  406dfc:	4639      	mov	r1, r7
  406dfe:	08e2      	lsrs	r2, r4, #3
  406e00:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406e04:	08e8      	lsrs	r0, r5, #3
  406e06:	f004 0307 	and.w	r3, r4, #7
  406e0a:	4605      	mov	r5, r0
  406e0c:	4614      	mov	r4, r2
  406e0e:	3330      	adds	r3, #48	; 0x30
  406e10:	ea54 0205 	orrs.w	r2, r4, r5
  406e14:	f801 3c01 	strb.w	r3, [r1, #-1]
  406e18:	f101 37ff 	add.w	r7, r1, #4294967295
  406e1c:	d1ee      	bne.n	406dfc <_vfprintf_r+0xb84>
  406e1e:	9a06      	ldr	r2, [sp, #24]
  406e20:	07d2      	lsls	r2, r2, #31
  406e22:	f57f ad64 	bpl.w	4068ee <_vfprintf_r+0x676>
  406e26:	2b30      	cmp	r3, #48	; 0x30
  406e28:	f43f ad61 	beq.w	4068ee <_vfprintf_r+0x676>
  406e2c:	2330      	movs	r3, #48	; 0x30
  406e2e:	3902      	subs	r1, #2
  406e30:	f807 3c01 	strb.w	r3, [r7, #-1]
  406e34:	ab30      	add	r3, sp, #192	; 0xc0
  406e36:	1a5b      	subs	r3, r3, r1
  406e38:	930d      	str	r3, [sp, #52]	; 0x34
  406e3a:	460f      	mov	r7, r1
  406e3c:	f7ff bb46 	b.w	4064cc <_vfprintf_r+0x254>
  406e40:	2302      	movs	r3, #2
  406e42:	f7ff bb25 	b.w	406490 <_vfprintf_r+0x218>
  406e46:	991d      	ldr	r1, [sp, #116]	; 0x74
  406e48:	2900      	cmp	r1, #0
  406e4a:	f340 8274 	ble.w	407336 <_vfprintf_r+0x10be>
  406e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e52:	4293      	cmp	r3, r2
  406e54:	bfa8      	it	ge
  406e56:	4613      	movge	r3, r2
  406e58:	2b00      	cmp	r3, #0
  406e5a:	461e      	mov	r6, r3
  406e5c:	dd0d      	ble.n	406e7a <_vfprintf_r+0xc02>
  406e5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e60:	f8c8 7000 	str.w	r7, [r8]
  406e64:	3301      	adds	r3, #1
  406e66:	4434      	add	r4, r6
  406e68:	2b07      	cmp	r3, #7
  406e6a:	9425      	str	r4, [sp, #148]	; 0x94
  406e6c:	f8c8 6004 	str.w	r6, [r8, #4]
  406e70:	9324      	str	r3, [sp, #144]	; 0x90
  406e72:	f300 8324 	bgt.w	4074be <_vfprintf_r+0x1246>
  406e76:	f108 0808 	add.w	r8, r8, #8
  406e7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406e7c:	2e00      	cmp	r6, #0
  406e7e:	bfa8      	it	ge
  406e80:	1b9b      	subge	r3, r3, r6
  406e82:	2b00      	cmp	r3, #0
  406e84:	461e      	mov	r6, r3
  406e86:	f340 80d0 	ble.w	40702a <_vfprintf_r+0xdb2>
  406e8a:	2e10      	cmp	r6, #16
  406e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e8e:	4dc0      	ldr	r5, [pc, #768]	; (407190 <_vfprintf_r+0xf18>)
  406e90:	f340 80b7 	ble.w	407002 <_vfprintf_r+0xd8a>
  406e94:	4622      	mov	r2, r4
  406e96:	f04f 0a10 	mov.w	sl, #16
  406e9a:	f8dd b020 	ldr.w	fp, [sp, #32]
  406e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406ea0:	e005      	b.n	406eae <_vfprintf_r+0xc36>
  406ea2:	f108 0808 	add.w	r8, r8, #8
  406ea6:	3e10      	subs	r6, #16
  406ea8:	2e10      	cmp	r6, #16
  406eaa:	f340 80a9 	ble.w	407000 <_vfprintf_r+0xd88>
  406eae:	3301      	adds	r3, #1
  406eb0:	3210      	adds	r2, #16
  406eb2:	2b07      	cmp	r3, #7
  406eb4:	9225      	str	r2, [sp, #148]	; 0x94
  406eb6:	9324      	str	r3, [sp, #144]	; 0x90
  406eb8:	e888 0420 	stmia.w	r8, {r5, sl}
  406ebc:	ddf1      	ble.n	406ea2 <_vfprintf_r+0xc2a>
  406ebe:	aa23      	add	r2, sp, #140	; 0x8c
  406ec0:	4621      	mov	r1, r4
  406ec2:	4658      	mov	r0, fp
  406ec4:	f003 f802 	bl	409ecc <__sprint_r>
  406ec8:	2800      	cmp	r0, #0
  406eca:	f040 8324 	bne.w	407516 <_vfprintf_r+0x129e>
  406ece:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406ed2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406ed6:	e7e6      	b.n	406ea6 <_vfprintf_r+0xc2e>
  406ed8:	2d00      	cmp	r5, #0
  406eda:	bf08      	it	eq
  406edc:	2c0a      	cmpeq	r4, #10
  406ede:	d37c      	bcc.n	406fda <_vfprintf_r+0xd62>
  406ee0:	af30      	add	r7, sp, #192	; 0xc0
  406ee2:	4620      	mov	r0, r4
  406ee4:	4629      	mov	r1, r5
  406ee6:	220a      	movs	r2, #10
  406ee8:	2300      	movs	r3, #0
  406eea:	f003 ff2f 	bl	40ad4c <__aeabi_uldivmod>
  406eee:	3230      	adds	r2, #48	; 0x30
  406ef0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  406ef4:	4620      	mov	r0, r4
  406ef6:	4629      	mov	r1, r5
  406ef8:	2300      	movs	r3, #0
  406efa:	220a      	movs	r2, #10
  406efc:	f003 ff26 	bl	40ad4c <__aeabi_uldivmod>
  406f00:	4604      	mov	r4, r0
  406f02:	460d      	mov	r5, r1
  406f04:	ea54 0305 	orrs.w	r3, r4, r5
  406f08:	d1eb      	bne.n	406ee2 <_vfprintf_r+0xc6a>
  406f0a:	ab30      	add	r3, sp, #192	; 0xc0
  406f0c:	1bdb      	subs	r3, r3, r7
  406f0e:	930d      	str	r3, [sp, #52]	; 0x34
  406f10:	f7ff badc 	b.w	4064cc <_vfprintf_r+0x254>
  406f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f16:	930d      	str	r3, [sp, #52]	; 0x34
  406f18:	af30      	add	r7, sp, #192	; 0xc0
  406f1a:	f7ff bad7 	b.w	4064cc <_vfprintf_r+0x254>
  406f1e:	aa23      	add	r2, sp, #140	; 0x8c
  406f20:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f22:	9808      	ldr	r0, [sp, #32]
  406f24:	f002 ffd2 	bl	409ecc <__sprint_r>
  406f28:	2800      	cmp	r0, #0
  406f2a:	f47f af2f 	bne.w	406d8c <_vfprintf_r+0xb14>
  406f2e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406f32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f38:	f7ff bb28 	b.w	40658c <_vfprintf_r+0x314>
  406f3c:	1e5f      	subs	r7, r3, #1
  406f3e:	2f00      	cmp	r7, #0
  406f40:	f77f af05 	ble.w	406d4e <_vfprintf_r+0xad6>
  406f44:	2f10      	cmp	r7, #16
  406f46:	4d92      	ldr	r5, [pc, #584]	; (407190 <_vfprintf_r+0xf18>)
  406f48:	f340 810a 	ble.w	407160 <_vfprintf_r+0xee8>
  406f4c:	f04f 0a10 	mov.w	sl, #16
  406f50:	f8dd b020 	ldr.w	fp, [sp, #32]
  406f54:	e005      	b.n	406f62 <_vfprintf_r+0xcea>
  406f56:	f108 0808 	add.w	r8, r8, #8
  406f5a:	3f10      	subs	r7, #16
  406f5c:	2f10      	cmp	r7, #16
  406f5e:	f340 80ff 	ble.w	407160 <_vfprintf_r+0xee8>
  406f62:	3601      	adds	r6, #1
  406f64:	3410      	adds	r4, #16
  406f66:	2e07      	cmp	r6, #7
  406f68:	9425      	str	r4, [sp, #148]	; 0x94
  406f6a:	9624      	str	r6, [sp, #144]	; 0x90
  406f6c:	e888 0420 	stmia.w	r8, {r5, sl}
  406f70:	ddf1      	ble.n	406f56 <_vfprintf_r+0xcde>
  406f72:	aa23      	add	r2, sp, #140	; 0x8c
  406f74:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f76:	4658      	mov	r0, fp
  406f78:	f002 ffa8 	bl	409ecc <__sprint_r>
  406f7c:	2800      	cmp	r0, #0
  406f7e:	f47f af05 	bne.w	406d8c <_vfprintf_r+0xb14>
  406f82:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f84:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406f86:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f8a:	e7e6      	b.n	406f5a <_vfprintf_r+0xce2>
  406f8c:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f8e:	460a      	mov	r2, r1
  406f90:	3204      	adds	r2, #4
  406f92:	680c      	ldr	r4, [r1, #0]
  406f94:	920e      	str	r2, [sp, #56]	; 0x38
  406f96:	2500      	movs	r5, #0
  406f98:	f7ff ba7a 	b.w	406490 <_vfprintf_r+0x218>
  406f9c:	681c      	ldr	r4, [r3, #0]
  406f9e:	3304      	adds	r3, #4
  406fa0:	930e      	str	r3, [sp, #56]	; 0x38
  406fa2:	2500      	movs	r5, #0
  406fa4:	e426      	b.n	4067f4 <_vfprintf_r+0x57c>
  406fa6:	3301      	adds	r3, #1
  406fa8:	4434      	add	r4, r6
  406faa:	2b07      	cmp	r3, #7
  406fac:	9425      	str	r4, [sp, #148]	; 0x94
  406fae:	9324      	str	r3, [sp, #144]	; 0x90
  406fb0:	e888 0060 	stmia.w	r8, {r5, r6}
  406fb4:	f77f ab63 	ble.w	40667e <_vfprintf_r+0x406>
  406fb8:	e6d6      	b.n	406d68 <_vfprintf_r+0xaf0>
  406fba:	3204      	adds	r2, #4
  406fbc:	681c      	ldr	r4, [r3, #0]
  406fbe:	920e      	str	r2, [sp, #56]	; 0x38
  406fc0:	2301      	movs	r3, #1
  406fc2:	2500      	movs	r5, #0
  406fc4:	f7ff ba64 	b.w	406490 <_vfprintf_r+0x218>
  406fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406fca:	6814      	ldr	r4, [r2, #0]
  406fcc:	4613      	mov	r3, r2
  406fce:	3304      	adds	r3, #4
  406fd0:	17e5      	asrs	r5, r4, #31
  406fd2:	930e      	str	r3, [sp, #56]	; 0x38
  406fd4:	4622      	mov	r2, r4
  406fd6:	462b      	mov	r3, r5
  406fd8:	e460      	b.n	40689c <_vfprintf_r+0x624>
  406fda:	f8dd b018 	ldr.w	fp, [sp, #24]
  406fde:	f8cd b018 	str.w	fp, [sp, #24]
  406fe2:	af40      	add	r7, sp, #256	; 0x100
  406fe4:	3430      	adds	r4, #48	; 0x30
  406fe6:	2301      	movs	r3, #1
  406fe8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  406fec:	930d      	str	r3, [sp, #52]	; 0x34
  406fee:	f7ff ba6d 	b.w	4064cc <_vfprintf_r+0x254>
  406ff2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406ff6:	f002 f897 	bl	409128 <__retarget_lock_release_recursive>
  406ffa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406ffe:	e5af      	b.n	406b60 <_vfprintf_r+0x8e8>
  407000:	4614      	mov	r4, r2
  407002:	3301      	adds	r3, #1
  407004:	4434      	add	r4, r6
  407006:	2b07      	cmp	r3, #7
  407008:	9425      	str	r4, [sp, #148]	; 0x94
  40700a:	9324      	str	r3, [sp, #144]	; 0x90
  40700c:	e888 0060 	stmia.w	r8, {r5, r6}
  407010:	f340 816d 	ble.w	4072ee <_vfprintf_r+0x1076>
  407014:	aa23      	add	r2, sp, #140	; 0x8c
  407016:	990a      	ldr	r1, [sp, #40]	; 0x28
  407018:	9808      	ldr	r0, [sp, #32]
  40701a:	f002 ff57 	bl	409ecc <__sprint_r>
  40701e:	2800      	cmp	r0, #0
  407020:	f47f aeb4 	bne.w	406d8c <_vfprintf_r+0xb14>
  407024:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407026:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40702a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40702c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40702e:	4293      	cmp	r3, r2
  407030:	f280 8158 	bge.w	4072e4 <_vfprintf_r+0x106c>
  407034:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407036:	9814      	ldr	r0, [sp, #80]	; 0x50
  407038:	9915      	ldr	r1, [sp, #84]	; 0x54
  40703a:	f8c8 1000 	str.w	r1, [r8]
  40703e:	3201      	adds	r2, #1
  407040:	4404      	add	r4, r0
  407042:	2a07      	cmp	r2, #7
  407044:	9425      	str	r4, [sp, #148]	; 0x94
  407046:	f8c8 0004 	str.w	r0, [r8, #4]
  40704a:	9224      	str	r2, [sp, #144]	; 0x90
  40704c:	f300 8152 	bgt.w	4072f4 <_vfprintf_r+0x107c>
  407050:	f108 0808 	add.w	r8, r8, #8
  407054:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407056:	9910      	ldr	r1, [sp, #64]	; 0x40
  407058:	1ad3      	subs	r3, r2, r3
  40705a:	1a56      	subs	r6, r2, r1
  40705c:	429e      	cmp	r6, r3
  40705e:	bfa8      	it	ge
  407060:	461e      	movge	r6, r3
  407062:	2e00      	cmp	r6, #0
  407064:	dd0e      	ble.n	407084 <_vfprintf_r+0xe0c>
  407066:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407068:	f8c8 6004 	str.w	r6, [r8, #4]
  40706c:	3201      	adds	r2, #1
  40706e:	440f      	add	r7, r1
  407070:	4434      	add	r4, r6
  407072:	2a07      	cmp	r2, #7
  407074:	f8c8 7000 	str.w	r7, [r8]
  407078:	9425      	str	r4, [sp, #148]	; 0x94
  40707a:	9224      	str	r2, [sp, #144]	; 0x90
  40707c:	f300 823c 	bgt.w	4074f8 <_vfprintf_r+0x1280>
  407080:	f108 0808 	add.w	r8, r8, #8
  407084:	2e00      	cmp	r6, #0
  407086:	bfac      	ite	ge
  407088:	1b9e      	subge	r6, r3, r6
  40708a:	461e      	movlt	r6, r3
  40708c:	2e00      	cmp	r6, #0
  40708e:	f77f aaf8 	ble.w	406682 <_vfprintf_r+0x40a>
  407092:	2e10      	cmp	r6, #16
  407094:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407096:	4d3e      	ldr	r5, [pc, #248]	; (407190 <_vfprintf_r+0xf18>)
  407098:	dd85      	ble.n	406fa6 <_vfprintf_r+0xd2e>
  40709a:	2710      	movs	r7, #16
  40709c:	f8dd a020 	ldr.w	sl, [sp, #32]
  4070a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4070a4:	e005      	b.n	4070b2 <_vfprintf_r+0xe3a>
  4070a6:	f108 0808 	add.w	r8, r8, #8
  4070aa:	3e10      	subs	r6, #16
  4070ac:	2e10      	cmp	r6, #16
  4070ae:	f77f af7a 	ble.w	406fa6 <_vfprintf_r+0xd2e>
  4070b2:	3301      	adds	r3, #1
  4070b4:	3410      	adds	r4, #16
  4070b6:	2b07      	cmp	r3, #7
  4070b8:	9425      	str	r4, [sp, #148]	; 0x94
  4070ba:	9324      	str	r3, [sp, #144]	; 0x90
  4070bc:	e888 00a0 	stmia.w	r8, {r5, r7}
  4070c0:	ddf1      	ble.n	4070a6 <_vfprintf_r+0xe2e>
  4070c2:	aa23      	add	r2, sp, #140	; 0x8c
  4070c4:	4659      	mov	r1, fp
  4070c6:	4650      	mov	r0, sl
  4070c8:	f002 ff00 	bl	409ecc <__sprint_r>
  4070cc:	2800      	cmp	r0, #0
  4070ce:	f040 8176 	bne.w	4073be <_vfprintf_r+0x1146>
  4070d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4070d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4070d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4070da:	e7e6      	b.n	4070aa <_vfprintf_r+0xe32>
  4070dc:	9b06      	ldr	r3, [sp, #24]
  4070de:	07d8      	lsls	r0, r3, #31
  4070e0:	f53f adff 	bmi.w	406ce2 <_vfprintf_r+0xa6a>
  4070e4:	3601      	adds	r6, #1
  4070e6:	3401      	adds	r4, #1
  4070e8:	2301      	movs	r3, #1
  4070ea:	2e07      	cmp	r6, #7
  4070ec:	9425      	str	r4, [sp, #148]	; 0x94
  4070ee:	9624      	str	r6, [sp, #144]	; 0x90
  4070f0:	f8c8 7000 	str.w	r7, [r8]
  4070f4:	f8c8 3004 	str.w	r3, [r8, #4]
  4070f8:	f77f ae27 	ble.w	406d4a <_vfprintf_r+0xad2>
  4070fc:	aa23      	add	r2, sp, #140	; 0x8c
  4070fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  407100:	9808      	ldr	r0, [sp, #32]
  407102:	f002 fee3 	bl	409ecc <__sprint_r>
  407106:	2800      	cmp	r0, #0
  407108:	f47f ae40 	bne.w	406d8c <_vfprintf_r+0xb14>
  40710c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40710e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407110:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407114:	e61b      	b.n	406d4e <_vfprintf_r+0xad6>
  407116:	aa23      	add	r2, sp, #140	; 0x8c
  407118:	990a      	ldr	r1, [sp, #40]	; 0x28
  40711a:	9808      	ldr	r0, [sp, #32]
  40711c:	f002 fed6 	bl	409ecc <__sprint_r>
  407120:	2800      	cmp	r0, #0
  407122:	f47f ae33 	bne.w	406d8c <_vfprintf_r+0xb14>
  407126:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407128:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40712a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40712e:	e5e6      	b.n	406cfe <_vfprintf_r+0xa86>
  407130:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407132:	3507      	adds	r5, #7
  407134:	f025 0507 	bic.w	r5, r5, #7
  407138:	e9d5 2300 	ldrd	r2, r3, [r5]
  40713c:	f105 0108 	add.w	r1, r5, #8
  407140:	910e      	str	r1, [sp, #56]	; 0x38
  407142:	4614      	mov	r4, r2
  407144:	461d      	mov	r5, r3
  407146:	f7ff bba9 	b.w	40689c <_vfprintf_r+0x624>
  40714a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40714c:	3507      	adds	r5, #7
  40714e:	f025 0307 	bic.w	r3, r5, #7
  407152:	f103 0208 	add.w	r2, r3, #8
  407156:	920e      	str	r2, [sp, #56]	; 0x38
  407158:	e9d3 4500 	ldrd	r4, r5, [r3]
  40715c:	f7ff bb4a 	b.w	4067f4 <_vfprintf_r+0x57c>
  407160:	3601      	adds	r6, #1
  407162:	443c      	add	r4, r7
  407164:	2e07      	cmp	r6, #7
  407166:	9425      	str	r4, [sp, #148]	; 0x94
  407168:	9624      	str	r6, [sp, #144]	; 0x90
  40716a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40716e:	f77f adec 	ble.w	406d4a <_vfprintf_r+0xad2>
  407172:	e7c3      	b.n	4070fc <_vfprintf_r+0xe84>
  407174:	aa23      	add	r2, sp, #140	; 0x8c
  407176:	990a      	ldr	r1, [sp, #40]	; 0x28
  407178:	9808      	ldr	r0, [sp, #32]
  40717a:	f002 fea7 	bl	409ecc <__sprint_r>
  40717e:	2800      	cmp	r0, #0
  407180:	f47f ae04 	bne.w	406d8c <_vfprintf_r+0xb14>
  407184:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407186:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407188:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40718c:	e5c6      	b.n	406d1c <_vfprintf_r+0xaa4>
  40718e:	bf00      	nop
  407190:	0040b4d8 	.word	0x0040b4d8
  407194:	af30      	add	r7, sp, #192	; 0xc0
  407196:	f7ff b999 	b.w	4064cc <_vfprintf_r+0x254>
  40719a:	aa23      	add	r2, sp, #140	; 0x8c
  40719c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40719e:	9808      	ldr	r0, [sp, #32]
  4071a0:	f002 fe94 	bl	409ecc <__sprint_r>
  4071a4:	2800      	cmp	r0, #0
  4071a6:	f47f adf1 	bne.w	406d8c <_vfprintf_r+0xb14>
  4071aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4071ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071b0:	f7ff ba11 	b.w	4065d6 <_vfprintf_r+0x35e>
  4071b4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4071b8:	4264      	negs	r4, r4
  4071ba:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4071be:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4071c2:	2301      	movs	r3, #1
  4071c4:	f7ff b968 	b.w	406498 <_vfprintf_r+0x220>
  4071c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  4071ca:	4622      	mov	r2, r4
  4071cc:	4620      	mov	r0, r4
  4071ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4071d0:	4623      	mov	r3, r4
  4071d2:	4621      	mov	r1, r4
  4071d4:	f003 fd7c 	bl	40acd0 <__aeabi_dcmpun>
  4071d8:	2800      	cmp	r0, #0
  4071da:	f040 828c 	bne.w	4076f6 <_vfprintf_r+0x147e>
  4071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071e0:	3301      	adds	r3, #1
  4071e2:	f026 0320 	bic.w	r3, r6, #32
  4071e6:	930d      	str	r3, [sp, #52]	; 0x34
  4071e8:	f000 8091 	beq.w	40730e <_vfprintf_r+0x1096>
  4071ec:	2b47      	cmp	r3, #71	; 0x47
  4071ee:	d104      	bne.n	4071fa <_vfprintf_r+0xf82>
  4071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071f2:	2b00      	cmp	r3, #0
  4071f4:	bf08      	it	eq
  4071f6:	2301      	moveq	r3, #1
  4071f8:	9309      	str	r3, [sp, #36]	; 0x24
  4071fa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4071fe:	9306      	str	r3, [sp, #24]
  407200:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407202:	f1b3 0a00 	subs.w	sl, r3, #0
  407206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407208:	9307      	str	r3, [sp, #28]
  40720a:	bfbb      	ittet	lt
  40720c:	4653      	movlt	r3, sl
  40720e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  407212:	2300      	movge	r3, #0
  407214:	232d      	movlt	r3, #45	; 0x2d
  407216:	2e66      	cmp	r6, #102	; 0x66
  407218:	930f      	str	r3, [sp, #60]	; 0x3c
  40721a:	f000 817f 	beq.w	40751c <_vfprintf_r+0x12a4>
  40721e:	2e46      	cmp	r6, #70	; 0x46
  407220:	f000 81d4 	beq.w	4075cc <_vfprintf_r+0x1354>
  407224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407226:	9a07      	ldr	r2, [sp, #28]
  407228:	2b45      	cmp	r3, #69	; 0x45
  40722a:	bf0c      	ite	eq
  40722c:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  40722e:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  407230:	a821      	add	r0, sp, #132	; 0x84
  407232:	a91e      	add	r1, sp, #120	; 0x78
  407234:	bf08      	it	eq
  407236:	1c5d      	addeq	r5, r3, #1
  407238:	9004      	str	r0, [sp, #16]
  40723a:	9103      	str	r1, [sp, #12]
  40723c:	a81d      	add	r0, sp, #116	; 0x74
  40723e:	2102      	movs	r1, #2
  407240:	9002      	str	r0, [sp, #8]
  407242:	4653      	mov	r3, sl
  407244:	9501      	str	r5, [sp, #4]
  407246:	9100      	str	r1, [sp, #0]
  407248:	9808      	ldr	r0, [sp, #32]
  40724a:	f000 fc0d 	bl	407a68 <_dtoa_r>
  40724e:	2e67      	cmp	r6, #103	; 0x67
  407250:	4607      	mov	r7, r0
  407252:	f040 81af 	bne.w	4075b4 <_vfprintf_r+0x133c>
  407256:	f01b 0f01 	tst.w	fp, #1
  40725a:	f000 8213 	beq.w	407684 <_vfprintf_r+0x140c>
  40725e:	197c      	adds	r4, r7, r5
  407260:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407262:	9807      	ldr	r0, [sp, #28]
  407264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407266:	4651      	mov	r1, sl
  407268:	f003 fd00 	bl	40ac6c <__aeabi_dcmpeq>
  40726c:	2800      	cmp	r0, #0
  40726e:	f040 8132 	bne.w	4074d6 <_vfprintf_r+0x125e>
  407272:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407274:	42a3      	cmp	r3, r4
  407276:	d206      	bcs.n	407286 <_vfprintf_r+0x100e>
  407278:	2130      	movs	r1, #48	; 0x30
  40727a:	1c5a      	adds	r2, r3, #1
  40727c:	9221      	str	r2, [sp, #132]	; 0x84
  40727e:	7019      	strb	r1, [r3, #0]
  407280:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407282:	429c      	cmp	r4, r3
  407284:	d8f9      	bhi.n	40727a <_vfprintf_r+0x1002>
  407286:	1bdb      	subs	r3, r3, r7
  407288:	9311      	str	r3, [sp, #68]	; 0x44
  40728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40728c:	2b47      	cmp	r3, #71	; 0x47
  40728e:	f000 80b9 	beq.w	407404 <_vfprintf_r+0x118c>
  407292:	2e65      	cmp	r6, #101	; 0x65
  407294:	f340 8276 	ble.w	407784 <_vfprintf_r+0x150c>
  407298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40729a:	9310      	str	r3, [sp, #64]	; 0x40
  40729c:	2e66      	cmp	r6, #102	; 0x66
  40729e:	f000 8162 	beq.w	407566 <_vfprintf_r+0x12ee>
  4072a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4072a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4072a6:	4619      	mov	r1, r3
  4072a8:	4291      	cmp	r1, r2
  4072aa:	f300 814f 	bgt.w	40754c <_vfprintf_r+0x12d4>
  4072ae:	f01b 0f01 	tst.w	fp, #1
  4072b2:	f040 8209 	bne.w	4076c8 <_vfprintf_r+0x1450>
  4072b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4072ba:	9307      	str	r3, [sp, #28]
  4072bc:	920d      	str	r2, [sp, #52]	; 0x34
  4072be:	2667      	movs	r6, #103	; 0x67
  4072c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072c2:	2b00      	cmp	r3, #0
  4072c4:	f040 8096 	bne.w	4073f4 <_vfprintf_r+0x117c>
  4072c8:	9309      	str	r3, [sp, #36]	; 0x24
  4072ca:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4072ce:	f7ff b905 	b.w	4064dc <_vfprintf_r+0x264>
  4072d2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4072d6:	f001 ff27 	bl	409128 <__retarget_lock_release_recursive>
  4072da:	f04f 33ff 	mov.w	r3, #4294967295
  4072de:	930b      	str	r3, [sp, #44]	; 0x2c
  4072e0:	f7ff ba30 	b.w	406744 <_vfprintf_r+0x4cc>
  4072e4:	9a06      	ldr	r2, [sp, #24]
  4072e6:	07d5      	lsls	r5, r2, #31
  4072e8:	f57f aeb4 	bpl.w	407054 <_vfprintf_r+0xddc>
  4072ec:	e6a2      	b.n	407034 <_vfprintf_r+0xdbc>
  4072ee:	f108 0808 	add.w	r8, r8, #8
  4072f2:	e69a      	b.n	40702a <_vfprintf_r+0xdb2>
  4072f4:	aa23      	add	r2, sp, #140	; 0x8c
  4072f6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4072f8:	9808      	ldr	r0, [sp, #32]
  4072fa:	f002 fde7 	bl	409ecc <__sprint_r>
  4072fe:	2800      	cmp	r0, #0
  407300:	f47f ad44 	bne.w	406d8c <_vfprintf_r+0xb14>
  407304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407306:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407308:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40730c:	e6a2      	b.n	407054 <_vfprintf_r+0xddc>
  40730e:	2306      	movs	r3, #6
  407310:	9309      	str	r3, [sp, #36]	; 0x24
  407312:	e772      	b.n	4071fa <_vfprintf_r+0xf82>
  407314:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407318:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40731c:	f7ff bbc7 	b.w	406aae <_vfprintf_r+0x836>
  407320:	aa23      	add	r2, sp, #140	; 0x8c
  407322:	990a      	ldr	r1, [sp, #40]	; 0x28
  407324:	9808      	ldr	r0, [sp, #32]
  407326:	f002 fdd1 	bl	409ecc <__sprint_r>
  40732a:	2800      	cmp	r0, #0
  40732c:	f47f ad2e 	bne.w	406d8c <_vfprintf_r+0xb14>
  407330:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407334:	e437      	b.n	406ba6 <_vfprintf_r+0x92e>
  407336:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407338:	4ab4      	ldr	r2, [pc, #720]	; (40760c <_vfprintf_r+0x1394>)
  40733a:	f8c8 2000 	str.w	r2, [r8]
  40733e:	3301      	adds	r3, #1
  407340:	3401      	adds	r4, #1
  407342:	2201      	movs	r2, #1
  407344:	2b07      	cmp	r3, #7
  407346:	9425      	str	r4, [sp, #148]	; 0x94
  407348:	9324      	str	r3, [sp, #144]	; 0x90
  40734a:	f8c8 2004 	str.w	r2, [r8, #4]
  40734e:	f300 8124 	bgt.w	40759a <_vfprintf_r+0x1322>
  407352:	f108 0808 	add.w	r8, r8, #8
  407356:	b929      	cbnz	r1, 407364 <_vfprintf_r+0x10ec>
  407358:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40735a:	b91b      	cbnz	r3, 407364 <_vfprintf_r+0x10ec>
  40735c:	9b06      	ldr	r3, [sp, #24]
  40735e:	07de      	lsls	r6, r3, #31
  407360:	f57f a98f 	bpl.w	406682 <_vfprintf_r+0x40a>
  407364:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407366:	9814      	ldr	r0, [sp, #80]	; 0x50
  407368:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40736a:	f8c8 2000 	str.w	r2, [r8]
  40736e:	3301      	adds	r3, #1
  407370:	4602      	mov	r2, r0
  407372:	4422      	add	r2, r4
  407374:	2b07      	cmp	r3, #7
  407376:	9225      	str	r2, [sp, #148]	; 0x94
  407378:	f8c8 0004 	str.w	r0, [r8, #4]
  40737c:	9324      	str	r3, [sp, #144]	; 0x90
  40737e:	f300 8169 	bgt.w	407654 <_vfprintf_r+0x13dc>
  407382:	f108 0808 	add.w	r8, r8, #8
  407386:	2900      	cmp	r1, #0
  407388:	f2c0 8136 	blt.w	4075f8 <_vfprintf_r+0x1380>
  40738c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40738e:	f8c8 7000 	str.w	r7, [r8]
  407392:	3301      	adds	r3, #1
  407394:	188c      	adds	r4, r1, r2
  407396:	2b07      	cmp	r3, #7
  407398:	9425      	str	r4, [sp, #148]	; 0x94
  40739a:	9324      	str	r3, [sp, #144]	; 0x90
  40739c:	f8c8 1004 	str.w	r1, [r8, #4]
  4073a0:	f77f a96d 	ble.w	40667e <_vfprintf_r+0x406>
  4073a4:	e4e0      	b.n	406d68 <_vfprintf_r+0xaf0>
  4073a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4073a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4073aa:	6813      	ldr	r3, [r2, #0]
  4073ac:	17cd      	asrs	r5, r1, #31
  4073ae:	4608      	mov	r0, r1
  4073b0:	3204      	adds	r2, #4
  4073b2:	4629      	mov	r1, r5
  4073b4:	920e      	str	r2, [sp, #56]	; 0x38
  4073b6:	e9c3 0100 	strd	r0, r1, [r3]
  4073ba:	f7fe bfa9 	b.w	406310 <_vfprintf_r+0x98>
  4073be:	46da      	mov	sl, fp
  4073c0:	f7ff bbc4 	b.w	406b4c <_vfprintf_r+0x8d4>
  4073c4:	aa23      	add	r2, sp, #140	; 0x8c
  4073c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4073c8:	9808      	ldr	r0, [sp, #32]
  4073ca:	f002 fd7f 	bl	409ecc <__sprint_r>
  4073ce:	2800      	cmp	r0, #0
  4073d0:	f47f acdc 	bne.w	406d8c <_vfprintf_r+0xb14>
  4073d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4073d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4073da:	f7ff bbfd 	b.w	406bd8 <_vfprintf_r+0x960>
  4073de:	4638      	mov	r0, r7
  4073e0:	9409      	str	r4, [sp, #36]	; 0x24
  4073e2:	f7fd fcad 	bl	404d40 <strlen>
  4073e6:	950e      	str	r5, [sp, #56]	; 0x38
  4073e8:	900d      	str	r0, [sp, #52]	; 0x34
  4073ea:	f8cd b018 	str.w	fp, [sp, #24]
  4073ee:	4603      	mov	r3, r0
  4073f0:	f7ff ba36 	b.w	406860 <_vfprintf_r+0x5e8>
  4073f4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4073f8:	2300      	movs	r3, #0
  4073fa:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4073fe:	9309      	str	r3, [sp, #36]	; 0x24
  407400:	f7ff b86f 	b.w	4064e2 <_vfprintf_r+0x26a>
  407404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407406:	9310      	str	r3, [sp, #64]	; 0x40
  407408:	461a      	mov	r2, r3
  40740a:	3303      	adds	r3, #3
  40740c:	db04      	blt.n	407418 <_vfprintf_r+0x11a0>
  40740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407410:	4619      	mov	r1, r3
  407412:	4291      	cmp	r1, r2
  407414:	f6bf af45 	bge.w	4072a2 <_vfprintf_r+0x102a>
  407418:	3e02      	subs	r6, #2
  40741a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40741c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  407420:	3b01      	subs	r3, #1
  407422:	2b00      	cmp	r3, #0
  407424:	931d      	str	r3, [sp, #116]	; 0x74
  407426:	bfbd      	ittte	lt
  407428:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40742a:	f1c3 0301 	rsblt	r3, r3, #1
  40742e:	222d      	movlt	r2, #45	; 0x2d
  407430:	222b      	movge	r2, #43	; 0x2b
  407432:	2b09      	cmp	r3, #9
  407434:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  407438:	f340 813e 	ble.w	4076b8 <_vfprintf_r+0x1440>
  40743c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  407440:	4620      	mov	r0, r4
  407442:	4d73      	ldr	r5, [pc, #460]	; (407610 <_vfprintf_r+0x1398>)
  407444:	e000      	b.n	407448 <_vfprintf_r+0x11d0>
  407446:	4610      	mov	r0, r2
  407448:	fb85 1203 	smull	r1, r2, r5, r3
  40744c:	17d9      	asrs	r1, r3, #31
  40744e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407452:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407456:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40745a:	3230      	adds	r2, #48	; 0x30
  40745c:	2909      	cmp	r1, #9
  40745e:	f800 2c01 	strb.w	r2, [r0, #-1]
  407462:	460b      	mov	r3, r1
  407464:	f100 32ff 	add.w	r2, r0, #4294967295
  407468:	dced      	bgt.n	407446 <_vfprintf_r+0x11ce>
  40746a:	3330      	adds	r3, #48	; 0x30
  40746c:	3802      	subs	r0, #2
  40746e:	b2d9      	uxtb	r1, r3
  407470:	4284      	cmp	r4, r0
  407472:	f802 1c01 	strb.w	r1, [r2, #-1]
  407476:	f240 8190 	bls.w	40779a <_vfprintf_r+0x1522>
  40747a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  40747e:	4613      	mov	r3, r2
  407480:	e001      	b.n	407486 <_vfprintf_r+0x120e>
  407482:	f813 1b01 	ldrb.w	r1, [r3], #1
  407486:	f800 1b01 	strb.w	r1, [r0], #1
  40748a:	42a3      	cmp	r3, r4
  40748c:	d1f9      	bne.n	407482 <_vfprintf_r+0x120a>
  40748e:	3301      	adds	r3, #1
  407490:	1a9b      	subs	r3, r3, r2
  407492:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407496:	4413      	add	r3, r2
  407498:	aa1f      	add	r2, sp, #124	; 0x7c
  40749a:	1a9b      	subs	r3, r3, r2
  40749c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40749e:	9319      	str	r3, [sp, #100]	; 0x64
  4074a0:	2a01      	cmp	r2, #1
  4074a2:	4413      	add	r3, r2
  4074a4:	930d      	str	r3, [sp, #52]	; 0x34
  4074a6:	f340 8145 	ble.w	407734 <_vfprintf_r+0x14bc>
  4074aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4074ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4074ae:	4413      	add	r3, r2
  4074b0:	930d      	str	r3, [sp, #52]	; 0x34
  4074b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4074b6:	9307      	str	r3, [sp, #28]
  4074b8:	2300      	movs	r3, #0
  4074ba:	9310      	str	r3, [sp, #64]	; 0x40
  4074bc:	e700      	b.n	4072c0 <_vfprintf_r+0x1048>
  4074be:	aa23      	add	r2, sp, #140	; 0x8c
  4074c0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074c2:	9808      	ldr	r0, [sp, #32]
  4074c4:	f002 fd02 	bl	409ecc <__sprint_r>
  4074c8:	2800      	cmp	r0, #0
  4074ca:	f47f ac5f 	bne.w	406d8c <_vfprintf_r+0xb14>
  4074ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4074d0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4074d4:	e4d1      	b.n	406e7a <_vfprintf_r+0xc02>
  4074d6:	4623      	mov	r3, r4
  4074d8:	e6d5      	b.n	407286 <_vfprintf_r+0x100e>
  4074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074dc:	9710      	str	r7, [sp, #64]	; 0x40
  4074de:	2b06      	cmp	r3, #6
  4074e0:	bf28      	it	cs
  4074e2:	2306      	movcs	r3, #6
  4074e4:	9709      	str	r7, [sp, #36]	; 0x24
  4074e6:	46ba      	mov	sl, r7
  4074e8:	9307      	str	r3, [sp, #28]
  4074ea:	950e      	str	r5, [sp, #56]	; 0x38
  4074ec:	f8cd b018 	str.w	fp, [sp, #24]
  4074f0:	930d      	str	r3, [sp, #52]	; 0x34
  4074f2:	4f48      	ldr	r7, [pc, #288]	; (407614 <_vfprintf_r+0x139c>)
  4074f4:	f7fe bff2 	b.w	4064dc <_vfprintf_r+0x264>
  4074f8:	aa23      	add	r2, sp, #140	; 0x8c
  4074fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074fc:	9808      	ldr	r0, [sp, #32]
  4074fe:	f002 fce5 	bl	409ecc <__sprint_r>
  407502:	2800      	cmp	r0, #0
  407504:	f47f ac42 	bne.w	406d8c <_vfprintf_r+0xb14>
  407508:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40750a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40750c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40750e:	1ad3      	subs	r3, r2, r3
  407510:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407514:	e5b6      	b.n	407084 <_vfprintf_r+0xe0c>
  407516:	46a2      	mov	sl, r4
  407518:	f7ff bb18 	b.w	406b4c <_vfprintf_r+0x8d4>
  40751c:	a821      	add	r0, sp, #132	; 0x84
  40751e:	a91e      	add	r1, sp, #120	; 0x78
  407520:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407522:	9004      	str	r0, [sp, #16]
  407524:	9103      	str	r1, [sp, #12]
  407526:	a81d      	add	r0, sp, #116	; 0x74
  407528:	2103      	movs	r1, #3
  40752a:	9002      	str	r0, [sp, #8]
  40752c:	9a07      	ldr	r2, [sp, #28]
  40752e:	9501      	str	r5, [sp, #4]
  407530:	4653      	mov	r3, sl
  407532:	9100      	str	r1, [sp, #0]
  407534:	9808      	ldr	r0, [sp, #32]
  407536:	f000 fa97 	bl	407a68 <_dtoa_r>
  40753a:	4607      	mov	r7, r0
  40753c:	1944      	adds	r4, r0, r5
  40753e:	783b      	ldrb	r3, [r7, #0]
  407540:	2b30      	cmp	r3, #48	; 0x30
  407542:	f000 80ca 	beq.w	4076da <_vfprintf_r+0x1462>
  407546:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407548:	442c      	add	r4, r5
  40754a:	e689      	b.n	407260 <_vfprintf_r+0xfe8>
  40754c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40754e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407550:	4413      	add	r3, r2
  407552:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407554:	930d      	str	r3, [sp, #52]	; 0x34
  407556:	2a00      	cmp	r2, #0
  407558:	f340 80e4 	ble.w	407724 <_vfprintf_r+0x14ac>
  40755c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407560:	9307      	str	r3, [sp, #28]
  407562:	2667      	movs	r6, #103	; 0x67
  407564:	e6ac      	b.n	4072c0 <_vfprintf_r+0x1048>
  407566:	2b00      	cmp	r3, #0
  407568:	f340 80fb 	ble.w	407762 <_vfprintf_r+0x14ea>
  40756c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40756e:	2a00      	cmp	r2, #0
  407570:	f040 80ce 	bne.w	407710 <_vfprintf_r+0x1498>
  407574:	f01b 0f01 	tst.w	fp, #1
  407578:	f040 80ca 	bne.w	407710 <_vfprintf_r+0x1498>
  40757c:	9307      	str	r3, [sp, #28]
  40757e:	930d      	str	r3, [sp, #52]	; 0x34
  407580:	e69e      	b.n	4072c0 <_vfprintf_r+0x1048>
  407582:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407584:	9307      	str	r3, [sp, #28]
  407586:	930d      	str	r3, [sp, #52]	; 0x34
  407588:	9009      	str	r0, [sp, #36]	; 0x24
  40758a:	950e      	str	r5, [sp, #56]	; 0x38
  40758c:	f8cd b018 	str.w	fp, [sp, #24]
  407590:	9010      	str	r0, [sp, #64]	; 0x40
  407592:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407596:	f7fe bfa1 	b.w	4064dc <_vfprintf_r+0x264>
  40759a:	aa23      	add	r2, sp, #140	; 0x8c
  40759c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40759e:	9808      	ldr	r0, [sp, #32]
  4075a0:	f002 fc94 	bl	409ecc <__sprint_r>
  4075a4:	2800      	cmp	r0, #0
  4075a6:	f47f abf1 	bne.w	406d8c <_vfprintf_r+0xb14>
  4075aa:	991d      	ldr	r1, [sp, #116]	; 0x74
  4075ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4075ae:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4075b2:	e6d0      	b.n	407356 <_vfprintf_r+0x10de>
  4075b4:	2e47      	cmp	r6, #71	; 0x47
  4075b6:	f47f ae52 	bne.w	40725e <_vfprintf_r+0xfe6>
  4075ba:	f01b 0f01 	tst.w	fp, #1
  4075be:	f000 80da 	beq.w	407776 <_vfprintf_r+0x14fe>
  4075c2:	2e46      	cmp	r6, #70	; 0x46
  4075c4:	eb07 0405 	add.w	r4, r7, r5
  4075c8:	d0b9      	beq.n	40753e <_vfprintf_r+0x12c6>
  4075ca:	e649      	b.n	407260 <_vfprintf_r+0xfe8>
  4075cc:	a821      	add	r0, sp, #132	; 0x84
  4075ce:	a91e      	add	r1, sp, #120	; 0x78
  4075d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4075d2:	9004      	str	r0, [sp, #16]
  4075d4:	9103      	str	r1, [sp, #12]
  4075d6:	a81d      	add	r0, sp, #116	; 0x74
  4075d8:	2103      	movs	r1, #3
  4075da:	9002      	str	r0, [sp, #8]
  4075dc:	9a07      	ldr	r2, [sp, #28]
  4075de:	9401      	str	r4, [sp, #4]
  4075e0:	4653      	mov	r3, sl
  4075e2:	9100      	str	r1, [sp, #0]
  4075e4:	9808      	ldr	r0, [sp, #32]
  4075e6:	f000 fa3f 	bl	407a68 <_dtoa_r>
  4075ea:	4625      	mov	r5, r4
  4075ec:	4607      	mov	r7, r0
  4075ee:	e7e8      	b.n	4075c2 <_vfprintf_r+0x134a>
  4075f0:	2300      	movs	r3, #0
  4075f2:	9309      	str	r3, [sp, #36]	; 0x24
  4075f4:	f7fe bec1 	b.w	40637a <_vfprintf_r+0x102>
  4075f8:	424e      	negs	r6, r1
  4075fa:	3110      	adds	r1, #16
  4075fc:	4d06      	ldr	r5, [pc, #24]	; (407618 <_vfprintf_r+0x13a0>)
  4075fe:	da43      	bge.n	407688 <_vfprintf_r+0x1410>
  407600:	2410      	movs	r4, #16
  407602:	f8dd a020 	ldr.w	sl, [sp, #32]
  407606:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40760a:	e00c      	b.n	407626 <_vfprintf_r+0x13ae>
  40760c:	0040b4a4 	.word	0x0040b4a4
  407610:	66666667 	.word	0x66666667
  407614:	0040b49c 	.word	0x0040b49c
  407618:	0040b4d8 	.word	0x0040b4d8
  40761c:	f108 0808 	add.w	r8, r8, #8
  407620:	3e10      	subs	r6, #16
  407622:	2e10      	cmp	r6, #16
  407624:	dd30      	ble.n	407688 <_vfprintf_r+0x1410>
  407626:	3301      	adds	r3, #1
  407628:	3210      	adds	r2, #16
  40762a:	2b07      	cmp	r3, #7
  40762c:	9225      	str	r2, [sp, #148]	; 0x94
  40762e:	9324      	str	r3, [sp, #144]	; 0x90
  407630:	f8c8 5000 	str.w	r5, [r8]
  407634:	f8c8 4004 	str.w	r4, [r8, #4]
  407638:	ddf0      	ble.n	40761c <_vfprintf_r+0x13a4>
  40763a:	aa23      	add	r2, sp, #140	; 0x8c
  40763c:	4659      	mov	r1, fp
  40763e:	4650      	mov	r0, sl
  407640:	f002 fc44 	bl	409ecc <__sprint_r>
  407644:	2800      	cmp	r0, #0
  407646:	f47f aeba 	bne.w	4073be <_vfprintf_r+0x1146>
  40764a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40764c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40764e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407652:	e7e5      	b.n	407620 <_vfprintf_r+0x13a8>
  407654:	aa23      	add	r2, sp, #140	; 0x8c
  407656:	990a      	ldr	r1, [sp, #40]	; 0x28
  407658:	9808      	ldr	r0, [sp, #32]
  40765a:	f002 fc37 	bl	409ecc <__sprint_r>
  40765e:	2800      	cmp	r0, #0
  407660:	f47f ab94 	bne.w	406d8c <_vfprintf_r+0xb14>
  407664:	991d      	ldr	r1, [sp, #116]	; 0x74
  407666:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407668:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40766a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40766e:	e68a      	b.n	407386 <_vfprintf_r+0x110e>
  407670:	9808      	ldr	r0, [sp, #32]
  407672:	aa23      	add	r2, sp, #140	; 0x8c
  407674:	4651      	mov	r1, sl
  407676:	f002 fc29 	bl	409ecc <__sprint_r>
  40767a:	2800      	cmp	r0, #0
  40767c:	f43f aa64 	beq.w	406b48 <_vfprintf_r+0x8d0>
  407680:	f7ff ba64 	b.w	406b4c <_vfprintf_r+0x8d4>
  407684:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407686:	e5fe      	b.n	407286 <_vfprintf_r+0x100e>
  407688:	3301      	adds	r3, #1
  40768a:	4432      	add	r2, r6
  40768c:	2b07      	cmp	r3, #7
  40768e:	e888 0060 	stmia.w	r8, {r5, r6}
  407692:	9225      	str	r2, [sp, #148]	; 0x94
  407694:	9324      	str	r3, [sp, #144]	; 0x90
  407696:	f108 0808 	add.w	r8, r8, #8
  40769a:	f77f ae77 	ble.w	40738c <_vfprintf_r+0x1114>
  40769e:	aa23      	add	r2, sp, #140	; 0x8c
  4076a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4076a2:	9808      	ldr	r0, [sp, #32]
  4076a4:	f002 fc12 	bl	409ecc <__sprint_r>
  4076a8:	2800      	cmp	r0, #0
  4076aa:	f47f ab6f 	bne.w	406d8c <_vfprintf_r+0xb14>
  4076ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4076b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076b2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4076b6:	e669      	b.n	40738c <_vfprintf_r+0x1114>
  4076b8:	3330      	adds	r3, #48	; 0x30
  4076ba:	2230      	movs	r2, #48	; 0x30
  4076bc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4076c0:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4076c4:	ab20      	add	r3, sp, #128	; 0x80
  4076c6:	e6e7      	b.n	407498 <_vfprintf_r+0x1220>
  4076c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4076ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4076cc:	4413      	add	r3, r2
  4076ce:	930d      	str	r3, [sp, #52]	; 0x34
  4076d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4076d4:	9307      	str	r3, [sp, #28]
  4076d6:	2667      	movs	r6, #103	; 0x67
  4076d8:	e5f2      	b.n	4072c0 <_vfprintf_r+0x1048>
  4076da:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4076dc:	9807      	ldr	r0, [sp, #28]
  4076de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4076e0:	4651      	mov	r1, sl
  4076e2:	f003 fac3 	bl	40ac6c <__aeabi_dcmpeq>
  4076e6:	2800      	cmp	r0, #0
  4076e8:	f47f af2d 	bne.w	407546 <_vfprintf_r+0x12ce>
  4076ec:	f1c5 0501 	rsb	r5, r5, #1
  4076f0:	951d      	str	r5, [sp, #116]	; 0x74
  4076f2:	442c      	add	r4, r5
  4076f4:	e5b4      	b.n	407260 <_vfprintf_r+0xfe8>
  4076f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076f8:	4f33      	ldr	r7, [pc, #204]	; (4077c8 <_vfprintf_r+0x1550>)
  4076fa:	2b00      	cmp	r3, #0
  4076fc:	bfb6      	itet	lt
  4076fe:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  407702:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  407706:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40770a:	4b30      	ldr	r3, [pc, #192]	; (4077cc <_vfprintf_r+0x1554>)
  40770c:	f7ff b9d1 	b.w	406ab2 <_vfprintf_r+0x83a>
  407710:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407712:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407714:	4413      	add	r3, r2
  407716:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407718:	441a      	add	r2, r3
  40771a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40771e:	920d      	str	r2, [sp, #52]	; 0x34
  407720:	9307      	str	r3, [sp, #28]
  407722:	e5cd      	b.n	4072c0 <_vfprintf_r+0x1048>
  407724:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407728:	f1c3 0301 	rsb	r3, r3, #1
  40772c:	441a      	add	r2, r3
  40772e:	4613      	mov	r3, r2
  407730:	920d      	str	r2, [sp, #52]	; 0x34
  407732:	e713      	b.n	40755c <_vfprintf_r+0x12e4>
  407734:	f01b 0301 	ands.w	r3, fp, #1
  407738:	9310      	str	r3, [sp, #64]	; 0x40
  40773a:	f47f aeb6 	bne.w	4074aa <_vfprintf_r+0x1232>
  40773e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407744:	9307      	str	r3, [sp, #28]
  407746:	e5bb      	b.n	4072c0 <_vfprintf_r+0x1048>
  407748:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40774a:	f899 6001 	ldrb.w	r6, [r9, #1]
  40774e:	6823      	ldr	r3, [r4, #0]
  407750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  407754:	9309      	str	r3, [sp, #36]	; 0x24
  407756:	4623      	mov	r3, r4
  407758:	3304      	adds	r3, #4
  40775a:	4681      	mov	r9, r0
  40775c:	930e      	str	r3, [sp, #56]	; 0x38
  40775e:	f7fe be0a 	b.w	406376 <_vfprintf_r+0xfe>
  407762:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407764:	b913      	cbnz	r3, 40776c <_vfprintf_r+0x14f4>
  407766:	f01b 0f01 	tst.w	fp, #1
  40776a:	d002      	beq.n	407772 <_vfprintf_r+0x14fa>
  40776c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40776e:	3301      	adds	r3, #1
  407770:	e7d1      	b.n	407716 <_vfprintf_r+0x149e>
  407772:	2301      	movs	r3, #1
  407774:	e702      	b.n	40757c <_vfprintf_r+0x1304>
  407776:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407778:	1bdb      	subs	r3, r3, r7
  40777a:	9311      	str	r3, [sp, #68]	; 0x44
  40777c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40777e:	2b47      	cmp	r3, #71	; 0x47
  407780:	f43f ae40 	beq.w	407404 <_vfprintf_r+0x118c>
  407784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407786:	9310      	str	r3, [sp, #64]	; 0x40
  407788:	e647      	b.n	40741a <_vfprintf_r+0x11a2>
  40778a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40778e:	f7ff b81d 	b.w	4067cc <_vfprintf_r+0x554>
  407792:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407796:	f7ff b918 	b.w	4069ca <_vfprintf_r+0x752>
  40779a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40779e:	e67b      	b.n	407498 <_vfprintf_r+0x1220>
  4077a0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077a4:	f7ff b866 	b.w	406874 <_vfprintf_r+0x5fc>
  4077a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077ac:	f7ff b9ac 	b.w	406b08 <_vfprintf_r+0x890>
  4077b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077b4:	f7ff b934 	b.w	406a20 <_vfprintf_r+0x7a8>
  4077b8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077bc:	f7ff b8b0 	b.w	406920 <_vfprintf_r+0x6a8>
  4077c0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4077c4:	f7ff b945 	b.w	406a52 <_vfprintf_r+0x7da>
  4077c8:	0040b470 	.word	0x0040b470
  4077cc:	0040b46c 	.word	0x0040b46c

004077d0 <__sbprintf>:
  4077d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4077d4:	460c      	mov	r4, r1
  4077d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4077da:	8989      	ldrh	r1, [r1, #12]
  4077dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4077de:	89e5      	ldrh	r5, [r4, #14]
  4077e0:	9619      	str	r6, [sp, #100]	; 0x64
  4077e2:	f021 0102 	bic.w	r1, r1, #2
  4077e6:	4606      	mov	r6, r0
  4077e8:	69e0      	ldr	r0, [r4, #28]
  4077ea:	f8ad 100c 	strh.w	r1, [sp, #12]
  4077ee:	4617      	mov	r7, r2
  4077f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4077f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4077f6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4077fa:	4698      	mov	r8, r3
  4077fc:	ad1a      	add	r5, sp, #104	; 0x68
  4077fe:	2300      	movs	r3, #0
  407800:	9007      	str	r0, [sp, #28]
  407802:	a816      	add	r0, sp, #88	; 0x58
  407804:	9209      	str	r2, [sp, #36]	; 0x24
  407806:	9306      	str	r3, [sp, #24]
  407808:	9500      	str	r5, [sp, #0]
  40780a:	9504      	str	r5, [sp, #16]
  40780c:	9102      	str	r1, [sp, #8]
  40780e:	9105      	str	r1, [sp, #20]
  407810:	f001 fc84 	bl	40911c <__retarget_lock_init_recursive>
  407814:	4643      	mov	r3, r8
  407816:	463a      	mov	r2, r7
  407818:	4669      	mov	r1, sp
  40781a:	4630      	mov	r0, r6
  40781c:	f7fe fd2c 	bl	406278 <_vfprintf_r>
  407820:	1e05      	subs	r5, r0, #0
  407822:	db07      	blt.n	407834 <__sbprintf+0x64>
  407824:	4630      	mov	r0, r6
  407826:	4669      	mov	r1, sp
  407828:	f001 f8e8 	bl	4089fc <_fflush_r>
  40782c:	2800      	cmp	r0, #0
  40782e:	bf18      	it	ne
  407830:	f04f 35ff 	movne.w	r5, #4294967295
  407834:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407838:	065b      	lsls	r3, r3, #25
  40783a:	d503      	bpl.n	407844 <__sbprintf+0x74>
  40783c:	89a3      	ldrh	r3, [r4, #12]
  40783e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407842:	81a3      	strh	r3, [r4, #12]
  407844:	9816      	ldr	r0, [sp, #88]	; 0x58
  407846:	f001 fc6b 	bl	409120 <__retarget_lock_close_recursive>
  40784a:	4628      	mov	r0, r5
  40784c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407854 <__swsetup_r>:
  407854:	b538      	push	{r3, r4, r5, lr}
  407856:	4b30      	ldr	r3, [pc, #192]	; (407918 <__swsetup_r+0xc4>)
  407858:	681b      	ldr	r3, [r3, #0]
  40785a:	4605      	mov	r5, r0
  40785c:	460c      	mov	r4, r1
  40785e:	b113      	cbz	r3, 407866 <__swsetup_r+0x12>
  407860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407862:	2a00      	cmp	r2, #0
  407864:	d038      	beq.n	4078d8 <__swsetup_r+0x84>
  407866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40786a:	b293      	uxth	r3, r2
  40786c:	0718      	lsls	r0, r3, #28
  40786e:	d50c      	bpl.n	40788a <__swsetup_r+0x36>
  407870:	6920      	ldr	r0, [r4, #16]
  407872:	b1a8      	cbz	r0, 4078a0 <__swsetup_r+0x4c>
  407874:	f013 0201 	ands.w	r2, r3, #1
  407878:	d01e      	beq.n	4078b8 <__swsetup_r+0x64>
  40787a:	6963      	ldr	r3, [r4, #20]
  40787c:	2200      	movs	r2, #0
  40787e:	425b      	negs	r3, r3
  407880:	61a3      	str	r3, [r4, #24]
  407882:	60a2      	str	r2, [r4, #8]
  407884:	b1f0      	cbz	r0, 4078c4 <__swsetup_r+0x70>
  407886:	2000      	movs	r0, #0
  407888:	bd38      	pop	{r3, r4, r5, pc}
  40788a:	06d9      	lsls	r1, r3, #27
  40788c:	d53c      	bpl.n	407908 <__swsetup_r+0xb4>
  40788e:	0758      	lsls	r0, r3, #29
  407890:	d426      	bmi.n	4078e0 <__swsetup_r+0x8c>
  407892:	6920      	ldr	r0, [r4, #16]
  407894:	f042 0308 	orr.w	r3, r2, #8
  407898:	81a3      	strh	r3, [r4, #12]
  40789a:	b29b      	uxth	r3, r3
  40789c:	2800      	cmp	r0, #0
  40789e:	d1e9      	bne.n	407874 <__swsetup_r+0x20>
  4078a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4078a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4078a8:	d0e4      	beq.n	407874 <__swsetup_r+0x20>
  4078aa:	4628      	mov	r0, r5
  4078ac:	4621      	mov	r1, r4
  4078ae:	f001 fc6b 	bl	409188 <__smakebuf_r>
  4078b2:	89a3      	ldrh	r3, [r4, #12]
  4078b4:	6920      	ldr	r0, [r4, #16]
  4078b6:	e7dd      	b.n	407874 <__swsetup_r+0x20>
  4078b8:	0799      	lsls	r1, r3, #30
  4078ba:	bf58      	it	pl
  4078bc:	6962      	ldrpl	r2, [r4, #20]
  4078be:	60a2      	str	r2, [r4, #8]
  4078c0:	2800      	cmp	r0, #0
  4078c2:	d1e0      	bne.n	407886 <__swsetup_r+0x32>
  4078c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078c8:	061a      	lsls	r2, r3, #24
  4078ca:	d5dd      	bpl.n	407888 <__swsetup_r+0x34>
  4078cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4078d0:	81a3      	strh	r3, [r4, #12]
  4078d2:	f04f 30ff 	mov.w	r0, #4294967295
  4078d6:	bd38      	pop	{r3, r4, r5, pc}
  4078d8:	4618      	mov	r0, r3
  4078da:	f001 f8e7 	bl	408aac <__sinit>
  4078de:	e7c2      	b.n	407866 <__swsetup_r+0x12>
  4078e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4078e2:	b151      	cbz	r1, 4078fa <__swsetup_r+0xa6>
  4078e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4078e8:	4299      	cmp	r1, r3
  4078ea:	d004      	beq.n	4078f6 <__swsetup_r+0xa2>
  4078ec:	4628      	mov	r0, r5
  4078ee:	f001 f97f 	bl	408bf0 <_free_r>
  4078f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4078f6:	2300      	movs	r3, #0
  4078f8:	6323      	str	r3, [r4, #48]	; 0x30
  4078fa:	2300      	movs	r3, #0
  4078fc:	6920      	ldr	r0, [r4, #16]
  4078fe:	6063      	str	r3, [r4, #4]
  407900:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407904:	6020      	str	r0, [r4, #0]
  407906:	e7c5      	b.n	407894 <__swsetup_r+0x40>
  407908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40790c:	2309      	movs	r3, #9
  40790e:	602b      	str	r3, [r5, #0]
  407910:	f04f 30ff 	mov.w	r0, #4294967295
  407914:	81a2      	strh	r2, [r4, #12]
  407916:	bd38      	pop	{r3, r4, r5, pc}
  407918:	20400028 	.word	0x20400028

0040791c <register_fini>:
  40791c:	4b02      	ldr	r3, [pc, #8]	; (407928 <register_fini+0xc>)
  40791e:	b113      	cbz	r3, 407926 <register_fini+0xa>
  407920:	4802      	ldr	r0, [pc, #8]	; (40792c <register_fini+0x10>)
  407922:	f000 b805 	b.w	407930 <atexit>
  407926:	4770      	bx	lr
  407928:	00000000 	.word	0x00000000
  40792c:	00408b1d 	.word	0x00408b1d

00407930 <atexit>:
  407930:	2300      	movs	r3, #0
  407932:	4601      	mov	r1, r0
  407934:	461a      	mov	r2, r3
  407936:	4618      	mov	r0, r3
  407938:	f002 bae8 	b.w	409f0c <__register_exitproc>

0040793c <quorem>:
  40793c:	6902      	ldr	r2, [r0, #16]
  40793e:	690b      	ldr	r3, [r1, #16]
  407940:	4293      	cmp	r3, r2
  407942:	f300 808d 	bgt.w	407a60 <quorem+0x124>
  407946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40794a:	f103 38ff 	add.w	r8, r3, #4294967295
  40794e:	f101 0714 	add.w	r7, r1, #20
  407952:	f100 0b14 	add.w	fp, r0, #20
  407956:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40795a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40795e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407962:	b083      	sub	sp, #12
  407964:	3201      	adds	r2, #1
  407966:	fbb3 f9f2 	udiv	r9, r3, r2
  40796a:	eb0b 0304 	add.w	r3, fp, r4
  40796e:	9400      	str	r4, [sp, #0]
  407970:	eb07 0a04 	add.w	sl, r7, r4
  407974:	9301      	str	r3, [sp, #4]
  407976:	f1b9 0f00 	cmp.w	r9, #0
  40797a:	d039      	beq.n	4079f0 <quorem+0xb4>
  40797c:	2500      	movs	r5, #0
  40797e:	462e      	mov	r6, r5
  407980:	46bc      	mov	ip, r7
  407982:	46de      	mov	lr, fp
  407984:	f85c 4b04 	ldr.w	r4, [ip], #4
  407988:	f8de 3000 	ldr.w	r3, [lr]
  40798c:	b2a2      	uxth	r2, r4
  40798e:	fb09 5502 	mla	r5, r9, r2, r5
  407992:	0c22      	lsrs	r2, r4, #16
  407994:	0c2c      	lsrs	r4, r5, #16
  407996:	fb09 4202 	mla	r2, r9, r2, r4
  40799a:	b2ad      	uxth	r5, r5
  40799c:	1b75      	subs	r5, r6, r5
  40799e:	b296      	uxth	r6, r2
  4079a0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4079a4:	fa15 f383 	uxtah	r3, r5, r3
  4079a8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4079ac:	b29b      	uxth	r3, r3
  4079ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4079b2:	45e2      	cmp	sl, ip
  4079b4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4079b8:	f84e 3b04 	str.w	r3, [lr], #4
  4079bc:	ea4f 4626 	mov.w	r6, r6, asr #16
  4079c0:	d2e0      	bcs.n	407984 <quorem+0x48>
  4079c2:	9b00      	ldr	r3, [sp, #0]
  4079c4:	f85b 3003 	ldr.w	r3, [fp, r3]
  4079c8:	b993      	cbnz	r3, 4079f0 <quorem+0xb4>
  4079ca:	9c01      	ldr	r4, [sp, #4]
  4079cc:	1f23      	subs	r3, r4, #4
  4079ce:	459b      	cmp	fp, r3
  4079d0:	d20c      	bcs.n	4079ec <quorem+0xb0>
  4079d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4079d6:	b94b      	cbnz	r3, 4079ec <quorem+0xb0>
  4079d8:	f1a4 0308 	sub.w	r3, r4, #8
  4079dc:	e002      	b.n	4079e4 <quorem+0xa8>
  4079de:	681a      	ldr	r2, [r3, #0]
  4079e0:	3b04      	subs	r3, #4
  4079e2:	b91a      	cbnz	r2, 4079ec <quorem+0xb0>
  4079e4:	459b      	cmp	fp, r3
  4079e6:	f108 38ff 	add.w	r8, r8, #4294967295
  4079ea:	d3f8      	bcc.n	4079de <quorem+0xa2>
  4079ec:	f8c0 8010 	str.w	r8, [r0, #16]
  4079f0:	4604      	mov	r4, r0
  4079f2:	f001 fec7 	bl	409784 <__mcmp>
  4079f6:	2800      	cmp	r0, #0
  4079f8:	db2e      	blt.n	407a58 <quorem+0x11c>
  4079fa:	f109 0901 	add.w	r9, r9, #1
  4079fe:	465d      	mov	r5, fp
  407a00:	2300      	movs	r3, #0
  407a02:	f857 1b04 	ldr.w	r1, [r7], #4
  407a06:	6828      	ldr	r0, [r5, #0]
  407a08:	b28a      	uxth	r2, r1
  407a0a:	1a9a      	subs	r2, r3, r2
  407a0c:	0c0b      	lsrs	r3, r1, #16
  407a0e:	fa12 f280 	uxtah	r2, r2, r0
  407a12:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407a16:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407a1a:	b292      	uxth	r2, r2
  407a1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407a20:	45ba      	cmp	sl, r7
  407a22:	f845 2b04 	str.w	r2, [r5], #4
  407a26:	ea4f 4323 	mov.w	r3, r3, asr #16
  407a2a:	d2ea      	bcs.n	407a02 <quorem+0xc6>
  407a2c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407a30:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407a34:	b982      	cbnz	r2, 407a58 <quorem+0x11c>
  407a36:	1f1a      	subs	r2, r3, #4
  407a38:	4593      	cmp	fp, r2
  407a3a:	d20b      	bcs.n	407a54 <quorem+0x118>
  407a3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407a40:	b942      	cbnz	r2, 407a54 <quorem+0x118>
  407a42:	3b08      	subs	r3, #8
  407a44:	e002      	b.n	407a4c <quorem+0x110>
  407a46:	681a      	ldr	r2, [r3, #0]
  407a48:	3b04      	subs	r3, #4
  407a4a:	b91a      	cbnz	r2, 407a54 <quorem+0x118>
  407a4c:	459b      	cmp	fp, r3
  407a4e:	f108 38ff 	add.w	r8, r8, #4294967295
  407a52:	d3f8      	bcc.n	407a46 <quorem+0x10a>
  407a54:	f8c4 8010 	str.w	r8, [r4, #16]
  407a58:	4648      	mov	r0, r9
  407a5a:	b003      	add	sp, #12
  407a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a60:	2000      	movs	r0, #0
  407a62:	4770      	bx	lr
  407a64:	0000      	movs	r0, r0
	...

00407a68 <_dtoa_r>:
  407a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407a6e:	b09b      	sub	sp, #108	; 0x6c
  407a70:	4604      	mov	r4, r0
  407a72:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407a74:	4692      	mov	sl, r2
  407a76:	469b      	mov	fp, r3
  407a78:	b141      	cbz	r1, 407a8c <_dtoa_r+0x24>
  407a7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407a7c:	604a      	str	r2, [r1, #4]
  407a7e:	2301      	movs	r3, #1
  407a80:	4093      	lsls	r3, r2
  407a82:	608b      	str	r3, [r1, #8]
  407a84:	f001 fca6 	bl	4093d4 <_Bfree>
  407a88:	2300      	movs	r3, #0
  407a8a:	6423      	str	r3, [r4, #64]	; 0x40
  407a8c:	f1bb 0f00 	cmp.w	fp, #0
  407a90:	465d      	mov	r5, fp
  407a92:	db35      	blt.n	407b00 <_dtoa_r+0x98>
  407a94:	2300      	movs	r3, #0
  407a96:	6033      	str	r3, [r6, #0]
  407a98:	4b9d      	ldr	r3, [pc, #628]	; (407d10 <_dtoa_r+0x2a8>)
  407a9a:	43ab      	bics	r3, r5
  407a9c:	d015      	beq.n	407aca <_dtoa_r+0x62>
  407a9e:	4650      	mov	r0, sl
  407aa0:	4659      	mov	r1, fp
  407aa2:	2200      	movs	r2, #0
  407aa4:	2300      	movs	r3, #0
  407aa6:	f003 f8e1 	bl	40ac6c <__aeabi_dcmpeq>
  407aaa:	4680      	mov	r8, r0
  407aac:	2800      	cmp	r0, #0
  407aae:	d02d      	beq.n	407b0c <_dtoa_r+0xa4>
  407ab0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407ab2:	2301      	movs	r3, #1
  407ab4:	6013      	str	r3, [r2, #0]
  407ab6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407ab8:	2b00      	cmp	r3, #0
  407aba:	f000 80bd 	beq.w	407c38 <_dtoa_r+0x1d0>
  407abe:	4895      	ldr	r0, [pc, #596]	; (407d14 <_dtoa_r+0x2ac>)
  407ac0:	6018      	str	r0, [r3, #0]
  407ac2:	3801      	subs	r0, #1
  407ac4:	b01b      	add	sp, #108	; 0x6c
  407ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407aca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407acc:	f242 730f 	movw	r3, #9999	; 0x270f
  407ad0:	6013      	str	r3, [r2, #0]
  407ad2:	f1ba 0f00 	cmp.w	sl, #0
  407ad6:	d10d      	bne.n	407af4 <_dtoa_r+0x8c>
  407ad8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407adc:	b955      	cbnz	r5, 407af4 <_dtoa_r+0x8c>
  407ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407ae0:	488d      	ldr	r0, [pc, #564]	; (407d18 <_dtoa_r+0x2b0>)
  407ae2:	2b00      	cmp	r3, #0
  407ae4:	d0ee      	beq.n	407ac4 <_dtoa_r+0x5c>
  407ae6:	f100 0308 	add.w	r3, r0, #8
  407aea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407aec:	6013      	str	r3, [r2, #0]
  407aee:	b01b      	add	sp, #108	; 0x6c
  407af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407af4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407af6:	4889      	ldr	r0, [pc, #548]	; (407d1c <_dtoa_r+0x2b4>)
  407af8:	2b00      	cmp	r3, #0
  407afa:	d0e3      	beq.n	407ac4 <_dtoa_r+0x5c>
  407afc:	1cc3      	adds	r3, r0, #3
  407afe:	e7f4      	b.n	407aea <_dtoa_r+0x82>
  407b00:	2301      	movs	r3, #1
  407b02:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407b06:	6033      	str	r3, [r6, #0]
  407b08:	46ab      	mov	fp, r5
  407b0a:	e7c5      	b.n	407a98 <_dtoa_r+0x30>
  407b0c:	aa18      	add	r2, sp, #96	; 0x60
  407b0e:	ab19      	add	r3, sp, #100	; 0x64
  407b10:	9201      	str	r2, [sp, #4]
  407b12:	9300      	str	r3, [sp, #0]
  407b14:	4652      	mov	r2, sl
  407b16:	465b      	mov	r3, fp
  407b18:	4620      	mov	r0, r4
  407b1a:	f001 fed3 	bl	4098c4 <__d2b>
  407b1e:	0d2b      	lsrs	r3, r5, #20
  407b20:	4681      	mov	r9, r0
  407b22:	d071      	beq.n	407c08 <_dtoa_r+0x1a0>
  407b24:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407b28:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407b2c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407b2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407b32:	4650      	mov	r0, sl
  407b34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407b38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407b3c:	2200      	movs	r2, #0
  407b3e:	4b78      	ldr	r3, [pc, #480]	; (407d20 <_dtoa_r+0x2b8>)
  407b40:	f002 fc78 	bl	40a434 <__aeabi_dsub>
  407b44:	a36c      	add	r3, pc, #432	; (adr r3, 407cf8 <_dtoa_r+0x290>)
  407b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b4a:	f002 fe27 	bl	40a79c <__aeabi_dmul>
  407b4e:	a36c      	add	r3, pc, #432	; (adr r3, 407d00 <_dtoa_r+0x298>)
  407b50:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b54:	f002 fc70 	bl	40a438 <__adddf3>
  407b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407b5c:	4630      	mov	r0, r6
  407b5e:	f002 fdb7 	bl	40a6d0 <__aeabi_i2d>
  407b62:	a369      	add	r3, pc, #420	; (adr r3, 407d08 <_dtoa_r+0x2a0>)
  407b64:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b68:	f002 fe18 	bl	40a79c <__aeabi_dmul>
  407b6c:	4602      	mov	r2, r0
  407b6e:	460b      	mov	r3, r1
  407b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407b74:	f002 fc60 	bl	40a438 <__adddf3>
  407b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407b7c:	f003 f8be 	bl	40acfc <__aeabi_d2iz>
  407b80:	2200      	movs	r2, #0
  407b82:	9002      	str	r0, [sp, #8]
  407b84:	2300      	movs	r3, #0
  407b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407b8a:	f003 f879 	bl	40ac80 <__aeabi_dcmplt>
  407b8e:	2800      	cmp	r0, #0
  407b90:	f040 8173 	bne.w	407e7a <_dtoa_r+0x412>
  407b94:	9d02      	ldr	r5, [sp, #8]
  407b96:	2d16      	cmp	r5, #22
  407b98:	f200 815d 	bhi.w	407e56 <_dtoa_r+0x3ee>
  407b9c:	4b61      	ldr	r3, [pc, #388]	; (407d24 <_dtoa_r+0x2bc>)
  407b9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  407ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
  407ba6:	4652      	mov	r2, sl
  407ba8:	465b      	mov	r3, fp
  407baa:	f003 f887 	bl	40acbc <__aeabi_dcmpgt>
  407bae:	2800      	cmp	r0, #0
  407bb0:	f000 81c5 	beq.w	407f3e <_dtoa_r+0x4d6>
  407bb4:	1e6b      	subs	r3, r5, #1
  407bb6:	9302      	str	r3, [sp, #8]
  407bb8:	2300      	movs	r3, #0
  407bba:	930e      	str	r3, [sp, #56]	; 0x38
  407bbc:	1bbf      	subs	r7, r7, r6
  407bbe:	1e7b      	subs	r3, r7, #1
  407bc0:	9306      	str	r3, [sp, #24]
  407bc2:	f100 8154 	bmi.w	407e6e <_dtoa_r+0x406>
  407bc6:	2300      	movs	r3, #0
  407bc8:	9308      	str	r3, [sp, #32]
  407bca:	9b02      	ldr	r3, [sp, #8]
  407bcc:	2b00      	cmp	r3, #0
  407bce:	f2c0 8145 	blt.w	407e5c <_dtoa_r+0x3f4>
  407bd2:	9a06      	ldr	r2, [sp, #24]
  407bd4:	930d      	str	r3, [sp, #52]	; 0x34
  407bd6:	4611      	mov	r1, r2
  407bd8:	4419      	add	r1, r3
  407bda:	2300      	movs	r3, #0
  407bdc:	9106      	str	r1, [sp, #24]
  407bde:	930c      	str	r3, [sp, #48]	; 0x30
  407be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407be2:	2b09      	cmp	r3, #9
  407be4:	d82a      	bhi.n	407c3c <_dtoa_r+0x1d4>
  407be6:	2b05      	cmp	r3, #5
  407be8:	f340 865b 	ble.w	4088a2 <_dtoa_r+0xe3a>
  407bec:	3b04      	subs	r3, #4
  407bee:	9324      	str	r3, [sp, #144]	; 0x90
  407bf0:	2500      	movs	r5, #0
  407bf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bf4:	3b02      	subs	r3, #2
  407bf6:	2b03      	cmp	r3, #3
  407bf8:	f200 8642 	bhi.w	408880 <_dtoa_r+0xe18>
  407bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
  407c00:	02c903d4 	.word	0x02c903d4
  407c04:	046103df 	.word	0x046103df
  407c08:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407c0a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407c0c:	443e      	add	r6, r7
  407c0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407c12:	2b20      	cmp	r3, #32
  407c14:	f340 818e 	ble.w	407f34 <_dtoa_r+0x4cc>
  407c18:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407c1c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407c20:	409d      	lsls	r5, r3
  407c22:	fa2a f000 	lsr.w	r0, sl, r0
  407c26:	4328      	orrs	r0, r5
  407c28:	f002 fd42 	bl	40a6b0 <__aeabi_ui2d>
  407c2c:	2301      	movs	r3, #1
  407c2e:	3e01      	subs	r6, #1
  407c30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407c34:	9314      	str	r3, [sp, #80]	; 0x50
  407c36:	e781      	b.n	407b3c <_dtoa_r+0xd4>
  407c38:	483b      	ldr	r0, [pc, #236]	; (407d28 <_dtoa_r+0x2c0>)
  407c3a:	e743      	b.n	407ac4 <_dtoa_r+0x5c>
  407c3c:	2100      	movs	r1, #0
  407c3e:	6461      	str	r1, [r4, #68]	; 0x44
  407c40:	4620      	mov	r0, r4
  407c42:	9125      	str	r1, [sp, #148]	; 0x94
  407c44:	f001 fba0 	bl	409388 <_Balloc>
  407c48:	f04f 33ff 	mov.w	r3, #4294967295
  407c4c:	930a      	str	r3, [sp, #40]	; 0x28
  407c4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407c50:	930f      	str	r3, [sp, #60]	; 0x3c
  407c52:	2301      	movs	r3, #1
  407c54:	9004      	str	r0, [sp, #16]
  407c56:	6420      	str	r0, [r4, #64]	; 0x40
  407c58:	9224      	str	r2, [sp, #144]	; 0x90
  407c5a:	930b      	str	r3, [sp, #44]	; 0x2c
  407c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407c5e:	2b00      	cmp	r3, #0
  407c60:	f2c0 80d9 	blt.w	407e16 <_dtoa_r+0x3ae>
  407c64:	9a02      	ldr	r2, [sp, #8]
  407c66:	2a0e      	cmp	r2, #14
  407c68:	f300 80d5 	bgt.w	407e16 <_dtoa_r+0x3ae>
  407c6c:	4b2d      	ldr	r3, [pc, #180]	; (407d24 <_dtoa_r+0x2bc>)
  407c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407c72:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407c7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407c7c:	2b00      	cmp	r3, #0
  407c7e:	f2c0 83ba 	blt.w	4083f6 <_dtoa_r+0x98e>
  407c82:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  407c86:	4650      	mov	r0, sl
  407c88:	462a      	mov	r2, r5
  407c8a:	4633      	mov	r3, r6
  407c8c:	4659      	mov	r1, fp
  407c8e:	f002 feaf 	bl	40a9f0 <__aeabi_ddiv>
  407c92:	f003 f833 	bl	40acfc <__aeabi_d2iz>
  407c96:	4680      	mov	r8, r0
  407c98:	f002 fd1a 	bl	40a6d0 <__aeabi_i2d>
  407c9c:	462a      	mov	r2, r5
  407c9e:	4633      	mov	r3, r6
  407ca0:	f002 fd7c 	bl	40a79c <__aeabi_dmul>
  407ca4:	460b      	mov	r3, r1
  407ca6:	4602      	mov	r2, r0
  407ca8:	4659      	mov	r1, fp
  407caa:	4650      	mov	r0, sl
  407cac:	f002 fbc2 	bl	40a434 <__aeabi_dsub>
  407cb0:	9d04      	ldr	r5, [sp, #16]
  407cb2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  407cb6:	702b      	strb	r3, [r5, #0]
  407cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cba:	2b01      	cmp	r3, #1
  407cbc:	4606      	mov	r6, r0
  407cbe:	460f      	mov	r7, r1
  407cc0:	f105 0501 	add.w	r5, r5, #1
  407cc4:	d068      	beq.n	407d98 <_dtoa_r+0x330>
  407cc6:	2200      	movs	r2, #0
  407cc8:	4b18      	ldr	r3, [pc, #96]	; (407d2c <_dtoa_r+0x2c4>)
  407cca:	f002 fd67 	bl	40a79c <__aeabi_dmul>
  407cce:	2200      	movs	r2, #0
  407cd0:	2300      	movs	r3, #0
  407cd2:	4606      	mov	r6, r0
  407cd4:	460f      	mov	r7, r1
  407cd6:	f002 ffc9 	bl	40ac6c <__aeabi_dcmpeq>
  407cda:	2800      	cmp	r0, #0
  407cdc:	f040 8088 	bne.w	407df0 <_dtoa_r+0x388>
  407ce0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  407ce4:	f04f 0a00 	mov.w	sl, #0
  407ce8:	f8df b040 	ldr.w	fp, [pc, #64]	; 407d2c <_dtoa_r+0x2c4>
  407cec:	940c      	str	r4, [sp, #48]	; 0x30
  407cee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407cf2:	e028      	b.n	407d46 <_dtoa_r+0x2de>
  407cf4:	f3af 8000 	nop.w
  407cf8:	636f4361 	.word	0x636f4361
  407cfc:	3fd287a7 	.word	0x3fd287a7
  407d00:	8b60c8b3 	.word	0x8b60c8b3
  407d04:	3fc68a28 	.word	0x3fc68a28
  407d08:	509f79fb 	.word	0x509f79fb
  407d0c:	3fd34413 	.word	0x3fd34413
  407d10:	7ff00000 	.word	0x7ff00000
  407d14:	0040b4a5 	.word	0x0040b4a5
  407d18:	0040b4e8 	.word	0x0040b4e8
  407d1c:	0040b4f4 	.word	0x0040b4f4
  407d20:	3ff80000 	.word	0x3ff80000
  407d24:	0040b520 	.word	0x0040b520
  407d28:	0040b4a4 	.word	0x0040b4a4
  407d2c:	40240000 	.word	0x40240000
  407d30:	f002 fd34 	bl	40a79c <__aeabi_dmul>
  407d34:	2200      	movs	r2, #0
  407d36:	2300      	movs	r3, #0
  407d38:	4606      	mov	r6, r0
  407d3a:	460f      	mov	r7, r1
  407d3c:	f002 ff96 	bl	40ac6c <__aeabi_dcmpeq>
  407d40:	2800      	cmp	r0, #0
  407d42:	f040 83c1 	bne.w	4084c8 <_dtoa_r+0xa60>
  407d46:	4642      	mov	r2, r8
  407d48:	464b      	mov	r3, r9
  407d4a:	4630      	mov	r0, r6
  407d4c:	4639      	mov	r1, r7
  407d4e:	f002 fe4f 	bl	40a9f0 <__aeabi_ddiv>
  407d52:	f002 ffd3 	bl	40acfc <__aeabi_d2iz>
  407d56:	4604      	mov	r4, r0
  407d58:	f002 fcba 	bl	40a6d0 <__aeabi_i2d>
  407d5c:	4642      	mov	r2, r8
  407d5e:	464b      	mov	r3, r9
  407d60:	f002 fd1c 	bl	40a79c <__aeabi_dmul>
  407d64:	4602      	mov	r2, r0
  407d66:	460b      	mov	r3, r1
  407d68:	4630      	mov	r0, r6
  407d6a:	4639      	mov	r1, r7
  407d6c:	f002 fb62 	bl	40a434 <__aeabi_dsub>
  407d70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407d74:	9e04      	ldr	r6, [sp, #16]
  407d76:	f805 eb01 	strb.w	lr, [r5], #1
  407d7a:	eba5 0e06 	sub.w	lr, r5, r6
  407d7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407d80:	45b6      	cmp	lr, r6
  407d82:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407d86:	4652      	mov	r2, sl
  407d88:	465b      	mov	r3, fp
  407d8a:	d1d1      	bne.n	407d30 <_dtoa_r+0x2c8>
  407d8c:	46a0      	mov	r8, r4
  407d8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407d92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407d94:	4606      	mov	r6, r0
  407d96:	460f      	mov	r7, r1
  407d98:	4632      	mov	r2, r6
  407d9a:	463b      	mov	r3, r7
  407d9c:	4630      	mov	r0, r6
  407d9e:	4639      	mov	r1, r7
  407da0:	f002 fb4a 	bl	40a438 <__adddf3>
  407da4:	4606      	mov	r6, r0
  407da6:	460f      	mov	r7, r1
  407da8:	4602      	mov	r2, r0
  407daa:	460b      	mov	r3, r1
  407dac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407db0:	f002 ff66 	bl	40ac80 <__aeabi_dcmplt>
  407db4:	b948      	cbnz	r0, 407dca <_dtoa_r+0x362>
  407db6:	4632      	mov	r2, r6
  407db8:	463b      	mov	r3, r7
  407dba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407dbe:	f002 ff55 	bl	40ac6c <__aeabi_dcmpeq>
  407dc2:	b1a8      	cbz	r0, 407df0 <_dtoa_r+0x388>
  407dc4:	f018 0f01 	tst.w	r8, #1
  407dc8:	d012      	beq.n	407df0 <_dtoa_r+0x388>
  407dca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407dce:	9a04      	ldr	r2, [sp, #16]
  407dd0:	1e6b      	subs	r3, r5, #1
  407dd2:	e004      	b.n	407dde <_dtoa_r+0x376>
  407dd4:	429a      	cmp	r2, r3
  407dd6:	f000 8401 	beq.w	4085dc <_dtoa_r+0xb74>
  407dda:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407dde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  407de2:	f103 0501 	add.w	r5, r3, #1
  407de6:	d0f5      	beq.n	407dd4 <_dtoa_r+0x36c>
  407de8:	f108 0801 	add.w	r8, r8, #1
  407dec:	f883 8000 	strb.w	r8, [r3]
  407df0:	4649      	mov	r1, r9
  407df2:	4620      	mov	r0, r4
  407df4:	f001 faee 	bl	4093d4 <_Bfree>
  407df8:	2200      	movs	r2, #0
  407dfa:	9b02      	ldr	r3, [sp, #8]
  407dfc:	702a      	strb	r2, [r5, #0]
  407dfe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407e00:	3301      	adds	r3, #1
  407e02:	6013      	str	r3, [r2, #0]
  407e04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407e06:	2b00      	cmp	r3, #0
  407e08:	f000 839e 	beq.w	408548 <_dtoa_r+0xae0>
  407e0c:	9804      	ldr	r0, [sp, #16]
  407e0e:	601d      	str	r5, [r3, #0]
  407e10:	b01b      	add	sp, #108	; 0x6c
  407e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407e18:	2a00      	cmp	r2, #0
  407e1a:	d03e      	beq.n	407e9a <_dtoa_r+0x432>
  407e1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e1e:	2a01      	cmp	r2, #1
  407e20:	f340 8311 	ble.w	408446 <_dtoa_r+0x9de>
  407e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e28:	1e5f      	subs	r7, r3, #1
  407e2a:	42ba      	cmp	r2, r7
  407e2c:	f2c0 838f 	blt.w	40854e <_dtoa_r+0xae6>
  407e30:	1bd7      	subs	r7, r2, r7
  407e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e34:	2b00      	cmp	r3, #0
  407e36:	f2c0 848b 	blt.w	408750 <_dtoa_r+0xce8>
  407e3a:	9d08      	ldr	r5, [sp, #32]
  407e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e3e:	9a08      	ldr	r2, [sp, #32]
  407e40:	441a      	add	r2, r3
  407e42:	9208      	str	r2, [sp, #32]
  407e44:	9a06      	ldr	r2, [sp, #24]
  407e46:	2101      	movs	r1, #1
  407e48:	441a      	add	r2, r3
  407e4a:	4620      	mov	r0, r4
  407e4c:	9206      	str	r2, [sp, #24]
  407e4e:	f001 fb5b 	bl	409508 <__i2b>
  407e52:	4606      	mov	r6, r0
  407e54:	e024      	b.n	407ea0 <_dtoa_r+0x438>
  407e56:	2301      	movs	r3, #1
  407e58:	930e      	str	r3, [sp, #56]	; 0x38
  407e5a:	e6af      	b.n	407bbc <_dtoa_r+0x154>
  407e5c:	9a08      	ldr	r2, [sp, #32]
  407e5e:	9b02      	ldr	r3, [sp, #8]
  407e60:	1ad2      	subs	r2, r2, r3
  407e62:	425b      	negs	r3, r3
  407e64:	930c      	str	r3, [sp, #48]	; 0x30
  407e66:	2300      	movs	r3, #0
  407e68:	9208      	str	r2, [sp, #32]
  407e6a:	930d      	str	r3, [sp, #52]	; 0x34
  407e6c:	e6b8      	b.n	407be0 <_dtoa_r+0x178>
  407e6e:	f1c7 0301 	rsb	r3, r7, #1
  407e72:	9308      	str	r3, [sp, #32]
  407e74:	2300      	movs	r3, #0
  407e76:	9306      	str	r3, [sp, #24]
  407e78:	e6a7      	b.n	407bca <_dtoa_r+0x162>
  407e7a:	9d02      	ldr	r5, [sp, #8]
  407e7c:	4628      	mov	r0, r5
  407e7e:	f002 fc27 	bl	40a6d0 <__aeabi_i2d>
  407e82:	4602      	mov	r2, r0
  407e84:	460b      	mov	r3, r1
  407e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407e8a:	f002 feef 	bl	40ac6c <__aeabi_dcmpeq>
  407e8e:	2800      	cmp	r0, #0
  407e90:	f47f ae80 	bne.w	407b94 <_dtoa_r+0x12c>
  407e94:	1e6b      	subs	r3, r5, #1
  407e96:	9302      	str	r3, [sp, #8]
  407e98:	e67c      	b.n	407b94 <_dtoa_r+0x12c>
  407e9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407e9c:	9d08      	ldr	r5, [sp, #32]
  407e9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407ea0:	2d00      	cmp	r5, #0
  407ea2:	dd0c      	ble.n	407ebe <_dtoa_r+0x456>
  407ea4:	9906      	ldr	r1, [sp, #24]
  407ea6:	2900      	cmp	r1, #0
  407ea8:	460b      	mov	r3, r1
  407eaa:	dd08      	ble.n	407ebe <_dtoa_r+0x456>
  407eac:	42a9      	cmp	r1, r5
  407eae:	9a08      	ldr	r2, [sp, #32]
  407eb0:	bfa8      	it	ge
  407eb2:	462b      	movge	r3, r5
  407eb4:	1ad2      	subs	r2, r2, r3
  407eb6:	1aed      	subs	r5, r5, r3
  407eb8:	1acb      	subs	r3, r1, r3
  407eba:	9208      	str	r2, [sp, #32]
  407ebc:	9306      	str	r3, [sp, #24]
  407ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407ec0:	b1d3      	cbz	r3, 407ef8 <_dtoa_r+0x490>
  407ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ec4:	2b00      	cmp	r3, #0
  407ec6:	f000 82b7 	beq.w	408438 <_dtoa_r+0x9d0>
  407eca:	2f00      	cmp	r7, #0
  407ecc:	dd10      	ble.n	407ef0 <_dtoa_r+0x488>
  407ece:	4631      	mov	r1, r6
  407ed0:	463a      	mov	r2, r7
  407ed2:	4620      	mov	r0, r4
  407ed4:	f001 fbb4 	bl	409640 <__pow5mult>
  407ed8:	464a      	mov	r2, r9
  407eda:	4601      	mov	r1, r0
  407edc:	4606      	mov	r6, r0
  407ede:	4620      	mov	r0, r4
  407ee0:	f001 fb1c 	bl	40951c <__multiply>
  407ee4:	4649      	mov	r1, r9
  407ee6:	4680      	mov	r8, r0
  407ee8:	4620      	mov	r0, r4
  407eea:	f001 fa73 	bl	4093d4 <_Bfree>
  407eee:	46c1      	mov	r9, r8
  407ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407ef2:	1bda      	subs	r2, r3, r7
  407ef4:	f040 82a1 	bne.w	40843a <_dtoa_r+0x9d2>
  407ef8:	2101      	movs	r1, #1
  407efa:	4620      	mov	r0, r4
  407efc:	f001 fb04 	bl	409508 <__i2b>
  407f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f02:	2b00      	cmp	r3, #0
  407f04:	4680      	mov	r8, r0
  407f06:	dd1c      	ble.n	407f42 <_dtoa_r+0x4da>
  407f08:	4601      	mov	r1, r0
  407f0a:	461a      	mov	r2, r3
  407f0c:	4620      	mov	r0, r4
  407f0e:	f001 fb97 	bl	409640 <__pow5mult>
  407f12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f14:	2b01      	cmp	r3, #1
  407f16:	4680      	mov	r8, r0
  407f18:	f340 8254 	ble.w	4083c4 <_dtoa_r+0x95c>
  407f1c:	2300      	movs	r3, #0
  407f1e:	930c      	str	r3, [sp, #48]	; 0x30
  407f20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407f24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407f28:	6918      	ldr	r0, [r3, #16]
  407f2a:	f001 fa9d 	bl	409468 <__hi0bits>
  407f2e:	f1c0 0020 	rsb	r0, r0, #32
  407f32:	e010      	b.n	407f56 <_dtoa_r+0x4ee>
  407f34:	f1c3 0520 	rsb	r5, r3, #32
  407f38:	fa0a f005 	lsl.w	r0, sl, r5
  407f3c:	e674      	b.n	407c28 <_dtoa_r+0x1c0>
  407f3e:	900e      	str	r0, [sp, #56]	; 0x38
  407f40:	e63c      	b.n	407bbc <_dtoa_r+0x154>
  407f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f44:	2b01      	cmp	r3, #1
  407f46:	f340 8287 	ble.w	408458 <_dtoa_r+0x9f0>
  407f4a:	2300      	movs	r3, #0
  407f4c:	930c      	str	r3, [sp, #48]	; 0x30
  407f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f50:	2001      	movs	r0, #1
  407f52:	2b00      	cmp	r3, #0
  407f54:	d1e4      	bne.n	407f20 <_dtoa_r+0x4b8>
  407f56:	9a06      	ldr	r2, [sp, #24]
  407f58:	4410      	add	r0, r2
  407f5a:	f010 001f 	ands.w	r0, r0, #31
  407f5e:	f000 80a1 	beq.w	4080a4 <_dtoa_r+0x63c>
  407f62:	f1c0 0320 	rsb	r3, r0, #32
  407f66:	2b04      	cmp	r3, #4
  407f68:	f340 849e 	ble.w	4088a8 <_dtoa_r+0xe40>
  407f6c:	9b08      	ldr	r3, [sp, #32]
  407f6e:	f1c0 001c 	rsb	r0, r0, #28
  407f72:	4403      	add	r3, r0
  407f74:	9308      	str	r3, [sp, #32]
  407f76:	4613      	mov	r3, r2
  407f78:	4403      	add	r3, r0
  407f7a:	4405      	add	r5, r0
  407f7c:	9306      	str	r3, [sp, #24]
  407f7e:	9b08      	ldr	r3, [sp, #32]
  407f80:	2b00      	cmp	r3, #0
  407f82:	dd05      	ble.n	407f90 <_dtoa_r+0x528>
  407f84:	4649      	mov	r1, r9
  407f86:	461a      	mov	r2, r3
  407f88:	4620      	mov	r0, r4
  407f8a:	f001 fba9 	bl	4096e0 <__lshift>
  407f8e:	4681      	mov	r9, r0
  407f90:	9b06      	ldr	r3, [sp, #24]
  407f92:	2b00      	cmp	r3, #0
  407f94:	dd05      	ble.n	407fa2 <_dtoa_r+0x53a>
  407f96:	4641      	mov	r1, r8
  407f98:	461a      	mov	r2, r3
  407f9a:	4620      	mov	r0, r4
  407f9c:	f001 fba0 	bl	4096e0 <__lshift>
  407fa0:	4680      	mov	r8, r0
  407fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407fa4:	2b00      	cmp	r3, #0
  407fa6:	f040 8086 	bne.w	4080b6 <_dtoa_r+0x64e>
  407faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fac:	2b00      	cmp	r3, #0
  407fae:	f340 8266 	ble.w	40847e <_dtoa_r+0xa16>
  407fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407fb4:	2b00      	cmp	r3, #0
  407fb6:	f000 8098 	beq.w	4080ea <_dtoa_r+0x682>
  407fba:	2d00      	cmp	r5, #0
  407fbc:	dd05      	ble.n	407fca <_dtoa_r+0x562>
  407fbe:	4631      	mov	r1, r6
  407fc0:	462a      	mov	r2, r5
  407fc2:	4620      	mov	r0, r4
  407fc4:	f001 fb8c 	bl	4096e0 <__lshift>
  407fc8:	4606      	mov	r6, r0
  407fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407fcc:	2b00      	cmp	r3, #0
  407fce:	f040 8337 	bne.w	408640 <_dtoa_r+0xbd8>
  407fd2:	9606      	str	r6, [sp, #24]
  407fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fd6:	9a04      	ldr	r2, [sp, #16]
  407fd8:	f8dd b018 	ldr.w	fp, [sp, #24]
  407fdc:	3b01      	subs	r3, #1
  407fde:	18d3      	adds	r3, r2, r3
  407fe0:	930b      	str	r3, [sp, #44]	; 0x2c
  407fe2:	f00a 0301 	and.w	r3, sl, #1
  407fe6:	930c      	str	r3, [sp, #48]	; 0x30
  407fe8:	4617      	mov	r7, r2
  407fea:	46c2      	mov	sl, r8
  407fec:	4651      	mov	r1, sl
  407fee:	4648      	mov	r0, r9
  407ff0:	f7ff fca4 	bl	40793c <quorem>
  407ff4:	4631      	mov	r1, r6
  407ff6:	4605      	mov	r5, r0
  407ff8:	4648      	mov	r0, r9
  407ffa:	f001 fbc3 	bl	409784 <__mcmp>
  407ffe:	465a      	mov	r2, fp
  408000:	900a      	str	r0, [sp, #40]	; 0x28
  408002:	4651      	mov	r1, sl
  408004:	4620      	mov	r0, r4
  408006:	f001 fbd9 	bl	4097bc <__mdiff>
  40800a:	68c2      	ldr	r2, [r0, #12]
  40800c:	4680      	mov	r8, r0
  40800e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  408012:	2a00      	cmp	r2, #0
  408014:	f040 822b 	bne.w	40846e <_dtoa_r+0xa06>
  408018:	4601      	mov	r1, r0
  40801a:	4648      	mov	r0, r9
  40801c:	9308      	str	r3, [sp, #32]
  40801e:	f001 fbb1 	bl	409784 <__mcmp>
  408022:	4641      	mov	r1, r8
  408024:	9006      	str	r0, [sp, #24]
  408026:	4620      	mov	r0, r4
  408028:	f001 f9d4 	bl	4093d4 <_Bfree>
  40802c:	9a06      	ldr	r2, [sp, #24]
  40802e:	9b08      	ldr	r3, [sp, #32]
  408030:	b932      	cbnz	r2, 408040 <_dtoa_r+0x5d8>
  408032:	9924      	ldr	r1, [sp, #144]	; 0x90
  408034:	b921      	cbnz	r1, 408040 <_dtoa_r+0x5d8>
  408036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408038:	2a00      	cmp	r2, #0
  40803a:	f000 83ef 	beq.w	40881c <_dtoa_r+0xdb4>
  40803e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408040:	990a      	ldr	r1, [sp, #40]	; 0x28
  408042:	2900      	cmp	r1, #0
  408044:	f2c0 829f 	blt.w	408586 <_dtoa_r+0xb1e>
  408048:	d105      	bne.n	408056 <_dtoa_r+0x5ee>
  40804a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40804c:	b919      	cbnz	r1, 408056 <_dtoa_r+0x5ee>
  40804e:	990c      	ldr	r1, [sp, #48]	; 0x30
  408050:	2900      	cmp	r1, #0
  408052:	f000 8298 	beq.w	408586 <_dtoa_r+0xb1e>
  408056:	2a00      	cmp	r2, #0
  408058:	f300 8306 	bgt.w	408668 <_dtoa_r+0xc00>
  40805c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40805e:	703b      	strb	r3, [r7, #0]
  408060:	f107 0801 	add.w	r8, r7, #1
  408064:	4297      	cmp	r7, r2
  408066:	4645      	mov	r5, r8
  408068:	f000 830c 	beq.w	408684 <_dtoa_r+0xc1c>
  40806c:	4649      	mov	r1, r9
  40806e:	2300      	movs	r3, #0
  408070:	220a      	movs	r2, #10
  408072:	4620      	mov	r0, r4
  408074:	f001 f9b8 	bl	4093e8 <__multadd>
  408078:	455e      	cmp	r6, fp
  40807a:	4681      	mov	r9, r0
  40807c:	4631      	mov	r1, r6
  40807e:	f04f 0300 	mov.w	r3, #0
  408082:	f04f 020a 	mov.w	r2, #10
  408086:	4620      	mov	r0, r4
  408088:	f000 81eb 	beq.w	408462 <_dtoa_r+0x9fa>
  40808c:	f001 f9ac 	bl	4093e8 <__multadd>
  408090:	4659      	mov	r1, fp
  408092:	4606      	mov	r6, r0
  408094:	2300      	movs	r3, #0
  408096:	220a      	movs	r2, #10
  408098:	4620      	mov	r0, r4
  40809a:	f001 f9a5 	bl	4093e8 <__multadd>
  40809e:	4647      	mov	r7, r8
  4080a0:	4683      	mov	fp, r0
  4080a2:	e7a3      	b.n	407fec <_dtoa_r+0x584>
  4080a4:	201c      	movs	r0, #28
  4080a6:	9b08      	ldr	r3, [sp, #32]
  4080a8:	4403      	add	r3, r0
  4080aa:	9308      	str	r3, [sp, #32]
  4080ac:	9b06      	ldr	r3, [sp, #24]
  4080ae:	4403      	add	r3, r0
  4080b0:	4405      	add	r5, r0
  4080b2:	9306      	str	r3, [sp, #24]
  4080b4:	e763      	b.n	407f7e <_dtoa_r+0x516>
  4080b6:	4641      	mov	r1, r8
  4080b8:	4648      	mov	r0, r9
  4080ba:	f001 fb63 	bl	409784 <__mcmp>
  4080be:	2800      	cmp	r0, #0
  4080c0:	f6bf af73 	bge.w	407faa <_dtoa_r+0x542>
  4080c4:	9f02      	ldr	r7, [sp, #8]
  4080c6:	4649      	mov	r1, r9
  4080c8:	2300      	movs	r3, #0
  4080ca:	220a      	movs	r2, #10
  4080cc:	4620      	mov	r0, r4
  4080ce:	3f01      	subs	r7, #1
  4080d0:	9702      	str	r7, [sp, #8]
  4080d2:	f001 f989 	bl	4093e8 <__multadd>
  4080d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4080d8:	4681      	mov	r9, r0
  4080da:	2b00      	cmp	r3, #0
  4080dc:	f040 83b6 	bne.w	40884c <_dtoa_r+0xde4>
  4080e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4080e2:	2b00      	cmp	r3, #0
  4080e4:	f340 83bf 	ble.w	408866 <_dtoa_r+0xdfe>
  4080e8:	930a      	str	r3, [sp, #40]	; 0x28
  4080ea:	f8dd b010 	ldr.w	fp, [sp, #16]
  4080ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4080f0:	465d      	mov	r5, fp
  4080f2:	e002      	b.n	4080fa <_dtoa_r+0x692>
  4080f4:	f001 f978 	bl	4093e8 <__multadd>
  4080f8:	4681      	mov	r9, r0
  4080fa:	4641      	mov	r1, r8
  4080fc:	4648      	mov	r0, r9
  4080fe:	f7ff fc1d 	bl	40793c <quorem>
  408102:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  408106:	f805 ab01 	strb.w	sl, [r5], #1
  40810a:	eba5 030b 	sub.w	r3, r5, fp
  40810e:	42bb      	cmp	r3, r7
  408110:	f04f 020a 	mov.w	r2, #10
  408114:	f04f 0300 	mov.w	r3, #0
  408118:	4649      	mov	r1, r9
  40811a:	4620      	mov	r0, r4
  40811c:	dbea      	blt.n	4080f4 <_dtoa_r+0x68c>
  40811e:	9b04      	ldr	r3, [sp, #16]
  408120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408122:	2a01      	cmp	r2, #1
  408124:	bfac      	ite	ge
  408126:	189b      	addge	r3, r3, r2
  408128:	3301      	addlt	r3, #1
  40812a:	461d      	mov	r5, r3
  40812c:	f04f 0b00 	mov.w	fp, #0
  408130:	4649      	mov	r1, r9
  408132:	2201      	movs	r2, #1
  408134:	4620      	mov	r0, r4
  408136:	f001 fad3 	bl	4096e0 <__lshift>
  40813a:	4641      	mov	r1, r8
  40813c:	4681      	mov	r9, r0
  40813e:	f001 fb21 	bl	409784 <__mcmp>
  408142:	2800      	cmp	r0, #0
  408144:	f340 823d 	ble.w	4085c2 <_dtoa_r+0xb5a>
  408148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40814c:	9904      	ldr	r1, [sp, #16]
  40814e:	1e6b      	subs	r3, r5, #1
  408150:	e004      	b.n	40815c <_dtoa_r+0x6f4>
  408152:	428b      	cmp	r3, r1
  408154:	f000 81ae 	beq.w	4084b4 <_dtoa_r+0xa4c>
  408158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40815c:	2a39      	cmp	r2, #57	; 0x39
  40815e:	f103 0501 	add.w	r5, r3, #1
  408162:	d0f6      	beq.n	408152 <_dtoa_r+0x6ea>
  408164:	3201      	adds	r2, #1
  408166:	701a      	strb	r2, [r3, #0]
  408168:	4641      	mov	r1, r8
  40816a:	4620      	mov	r0, r4
  40816c:	f001 f932 	bl	4093d4 <_Bfree>
  408170:	2e00      	cmp	r6, #0
  408172:	f43f ae3d 	beq.w	407df0 <_dtoa_r+0x388>
  408176:	f1bb 0f00 	cmp.w	fp, #0
  40817a:	d005      	beq.n	408188 <_dtoa_r+0x720>
  40817c:	45b3      	cmp	fp, r6
  40817e:	d003      	beq.n	408188 <_dtoa_r+0x720>
  408180:	4659      	mov	r1, fp
  408182:	4620      	mov	r0, r4
  408184:	f001 f926 	bl	4093d4 <_Bfree>
  408188:	4631      	mov	r1, r6
  40818a:	4620      	mov	r0, r4
  40818c:	f001 f922 	bl	4093d4 <_Bfree>
  408190:	e62e      	b.n	407df0 <_dtoa_r+0x388>
  408192:	2300      	movs	r3, #0
  408194:	930b      	str	r3, [sp, #44]	; 0x2c
  408196:	9b02      	ldr	r3, [sp, #8]
  408198:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40819a:	4413      	add	r3, r2
  40819c:	930f      	str	r3, [sp, #60]	; 0x3c
  40819e:	3301      	adds	r3, #1
  4081a0:	2b01      	cmp	r3, #1
  4081a2:	461f      	mov	r7, r3
  4081a4:	461e      	mov	r6, r3
  4081a6:	930a      	str	r3, [sp, #40]	; 0x28
  4081a8:	bfb8      	it	lt
  4081aa:	2701      	movlt	r7, #1
  4081ac:	2100      	movs	r1, #0
  4081ae:	2f17      	cmp	r7, #23
  4081b0:	6461      	str	r1, [r4, #68]	; 0x44
  4081b2:	d90a      	bls.n	4081ca <_dtoa_r+0x762>
  4081b4:	2201      	movs	r2, #1
  4081b6:	2304      	movs	r3, #4
  4081b8:	005b      	lsls	r3, r3, #1
  4081ba:	f103 0014 	add.w	r0, r3, #20
  4081be:	4287      	cmp	r7, r0
  4081c0:	4611      	mov	r1, r2
  4081c2:	f102 0201 	add.w	r2, r2, #1
  4081c6:	d2f7      	bcs.n	4081b8 <_dtoa_r+0x750>
  4081c8:	6461      	str	r1, [r4, #68]	; 0x44
  4081ca:	4620      	mov	r0, r4
  4081cc:	f001 f8dc 	bl	409388 <_Balloc>
  4081d0:	2e0e      	cmp	r6, #14
  4081d2:	9004      	str	r0, [sp, #16]
  4081d4:	6420      	str	r0, [r4, #64]	; 0x40
  4081d6:	f63f ad41 	bhi.w	407c5c <_dtoa_r+0x1f4>
  4081da:	2d00      	cmp	r5, #0
  4081dc:	f43f ad3e 	beq.w	407c5c <_dtoa_r+0x1f4>
  4081e0:	9902      	ldr	r1, [sp, #8]
  4081e2:	2900      	cmp	r1, #0
  4081e4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4081e8:	f340 8202 	ble.w	4085f0 <_dtoa_r+0xb88>
  4081ec:	4bb8      	ldr	r3, [pc, #736]	; (4084d0 <_dtoa_r+0xa68>)
  4081ee:	f001 020f 	and.w	r2, r1, #15
  4081f2:	110d      	asrs	r5, r1, #4
  4081f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4081f8:	06e9      	lsls	r1, r5, #27
  4081fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4081fe:	f140 81ae 	bpl.w	40855e <_dtoa_r+0xaf6>
  408202:	4bb4      	ldr	r3, [pc, #720]	; (4084d4 <_dtoa_r+0xa6c>)
  408204:	4650      	mov	r0, sl
  408206:	4659      	mov	r1, fp
  408208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40820c:	f002 fbf0 	bl	40a9f0 <__aeabi_ddiv>
  408210:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  408214:	f005 050f 	and.w	r5, r5, #15
  408218:	f04f 0a03 	mov.w	sl, #3
  40821c:	b18d      	cbz	r5, 408242 <_dtoa_r+0x7da>
  40821e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4084d4 <_dtoa_r+0xa6c>
  408222:	07ea      	lsls	r2, r5, #31
  408224:	d509      	bpl.n	40823a <_dtoa_r+0x7d2>
  408226:	4630      	mov	r0, r6
  408228:	4639      	mov	r1, r7
  40822a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40822e:	f002 fab5 	bl	40a79c <__aeabi_dmul>
  408232:	f10a 0a01 	add.w	sl, sl, #1
  408236:	4606      	mov	r6, r0
  408238:	460f      	mov	r7, r1
  40823a:	106d      	asrs	r5, r5, #1
  40823c:	f108 0808 	add.w	r8, r8, #8
  408240:	d1ef      	bne.n	408222 <_dtoa_r+0x7ba>
  408242:	463b      	mov	r3, r7
  408244:	4632      	mov	r2, r6
  408246:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40824a:	f002 fbd1 	bl	40a9f0 <__aeabi_ddiv>
  40824e:	4607      	mov	r7, r0
  408250:	4688      	mov	r8, r1
  408252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408254:	b143      	cbz	r3, 408268 <_dtoa_r+0x800>
  408256:	2200      	movs	r2, #0
  408258:	4b9f      	ldr	r3, [pc, #636]	; (4084d8 <_dtoa_r+0xa70>)
  40825a:	4638      	mov	r0, r7
  40825c:	4641      	mov	r1, r8
  40825e:	f002 fd0f 	bl	40ac80 <__aeabi_dcmplt>
  408262:	2800      	cmp	r0, #0
  408264:	f040 8286 	bne.w	408774 <_dtoa_r+0xd0c>
  408268:	4650      	mov	r0, sl
  40826a:	f002 fa31 	bl	40a6d0 <__aeabi_i2d>
  40826e:	463a      	mov	r2, r7
  408270:	4643      	mov	r3, r8
  408272:	f002 fa93 	bl	40a79c <__aeabi_dmul>
  408276:	4b99      	ldr	r3, [pc, #612]	; (4084dc <_dtoa_r+0xa74>)
  408278:	2200      	movs	r2, #0
  40827a:	f002 f8dd 	bl	40a438 <__adddf3>
  40827e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408280:	4605      	mov	r5, r0
  408282:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408286:	2b00      	cmp	r3, #0
  408288:	f000 813e 	beq.w	408508 <_dtoa_r+0xaa0>
  40828c:	9b02      	ldr	r3, [sp, #8]
  40828e:	9315      	str	r3, [sp, #84]	; 0x54
  408290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408292:	9312      	str	r3, [sp, #72]	; 0x48
  408294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408296:	2b00      	cmp	r3, #0
  408298:	f000 81fa 	beq.w	408690 <_dtoa_r+0xc28>
  40829c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40829e:	4b8c      	ldr	r3, [pc, #560]	; (4084d0 <_dtoa_r+0xa68>)
  4082a0:	498f      	ldr	r1, [pc, #572]	; (4084e0 <_dtoa_r+0xa78>)
  4082a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4082a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4082aa:	2000      	movs	r0, #0
  4082ac:	f002 fba0 	bl	40a9f0 <__aeabi_ddiv>
  4082b0:	462a      	mov	r2, r5
  4082b2:	4633      	mov	r3, r6
  4082b4:	f002 f8be 	bl	40a434 <__aeabi_dsub>
  4082b8:	4682      	mov	sl, r0
  4082ba:	468b      	mov	fp, r1
  4082bc:	4638      	mov	r0, r7
  4082be:	4641      	mov	r1, r8
  4082c0:	f002 fd1c 	bl	40acfc <__aeabi_d2iz>
  4082c4:	4605      	mov	r5, r0
  4082c6:	f002 fa03 	bl	40a6d0 <__aeabi_i2d>
  4082ca:	4602      	mov	r2, r0
  4082cc:	460b      	mov	r3, r1
  4082ce:	4638      	mov	r0, r7
  4082d0:	4641      	mov	r1, r8
  4082d2:	f002 f8af 	bl	40a434 <__aeabi_dsub>
  4082d6:	3530      	adds	r5, #48	; 0x30
  4082d8:	fa5f f885 	uxtb.w	r8, r5
  4082dc:	9d04      	ldr	r5, [sp, #16]
  4082de:	4606      	mov	r6, r0
  4082e0:	460f      	mov	r7, r1
  4082e2:	f885 8000 	strb.w	r8, [r5]
  4082e6:	4602      	mov	r2, r0
  4082e8:	460b      	mov	r3, r1
  4082ea:	4650      	mov	r0, sl
  4082ec:	4659      	mov	r1, fp
  4082ee:	3501      	adds	r5, #1
  4082f0:	f002 fce4 	bl	40acbc <__aeabi_dcmpgt>
  4082f4:	2800      	cmp	r0, #0
  4082f6:	d154      	bne.n	4083a2 <_dtoa_r+0x93a>
  4082f8:	4632      	mov	r2, r6
  4082fa:	463b      	mov	r3, r7
  4082fc:	2000      	movs	r0, #0
  4082fe:	4976      	ldr	r1, [pc, #472]	; (4084d8 <_dtoa_r+0xa70>)
  408300:	f002 f898 	bl	40a434 <__aeabi_dsub>
  408304:	4602      	mov	r2, r0
  408306:	460b      	mov	r3, r1
  408308:	4650      	mov	r0, sl
  40830a:	4659      	mov	r1, fp
  40830c:	f002 fcd6 	bl	40acbc <__aeabi_dcmpgt>
  408310:	2800      	cmp	r0, #0
  408312:	f040 8270 	bne.w	4087f6 <_dtoa_r+0xd8e>
  408316:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408318:	2a01      	cmp	r2, #1
  40831a:	f000 8111 	beq.w	408540 <_dtoa_r+0xad8>
  40831e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408320:	9a04      	ldr	r2, [sp, #16]
  408322:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408326:	4413      	add	r3, r2
  408328:	4699      	mov	r9, r3
  40832a:	e00d      	b.n	408348 <_dtoa_r+0x8e0>
  40832c:	2000      	movs	r0, #0
  40832e:	496a      	ldr	r1, [pc, #424]	; (4084d8 <_dtoa_r+0xa70>)
  408330:	f002 f880 	bl	40a434 <__aeabi_dsub>
  408334:	4652      	mov	r2, sl
  408336:	465b      	mov	r3, fp
  408338:	f002 fca2 	bl	40ac80 <__aeabi_dcmplt>
  40833c:	2800      	cmp	r0, #0
  40833e:	f040 8258 	bne.w	4087f2 <_dtoa_r+0xd8a>
  408342:	454d      	cmp	r5, r9
  408344:	f000 80fa 	beq.w	40853c <_dtoa_r+0xad4>
  408348:	4650      	mov	r0, sl
  40834a:	4659      	mov	r1, fp
  40834c:	2200      	movs	r2, #0
  40834e:	4b65      	ldr	r3, [pc, #404]	; (4084e4 <_dtoa_r+0xa7c>)
  408350:	f002 fa24 	bl	40a79c <__aeabi_dmul>
  408354:	2200      	movs	r2, #0
  408356:	4b63      	ldr	r3, [pc, #396]	; (4084e4 <_dtoa_r+0xa7c>)
  408358:	4682      	mov	sl, r0
  40835a:	468b      	mov	fp, r1
  40835c:	4630      	mov	r0, r6
  40835e:	4639      	mov	r1, r7
  408360:	f002 fa1c 	bl	40a79c <__aeabi_dmul>
  408364:	460f      	mov	r7, r1
  408366:	4606      	mov	r6, r0
  408368:	f002 fcc8 	bl	40acfc <__aeabi_d2iz>
  40836c:	4680      	mov	r8, r0
  40836e:	f002 f9af 	bl	40a6d0 <__aeabi_i2d>
  408372:	4602      	mov	r2, r0
  408374:	460b      	mov	r3, r1
  408376:	4630      	mov	r0, r6
  408378:	4639      	mov	r1, r7
  40837a:	f002 f85b 	bl	40a434 <__aeabi_dsub>
  40837e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408382:	fa5f f888 	uxtb.w	r8, r8
  408386:	4652      	mov	r2, sl
  408388:	465b      	mov	r3, fp
  40838a:	f805 8b01 	strb.w	r8, [r5], #1
  40838e:	4606      	mov	r6, r0
  408390:	460f      	mov	r7, r1
  408392:	f002 fc75 	bl	40ac80 <__aeabi_dcmplt>
  408396:	4632      	mov	r2, r6
  408398:	463b      	mov	r3, r7
  40839a:	2800      	cmp	r0, #0
  40839c:	d0c6      	beq.n	40832c <_dtoa_r+0x8c4>
  40839e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4083a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4083a4:	9302      	str	r3, [sp, #8]
  4083a6:	e523      	b.n	407df0 <_dtoa_r+0x388>
  4083a8:	2300      	movs	r3, #0
  4083aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4083ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4083ae:	2b00      	cmp	r3, #0
  4083b0:	f340 80dc 	ble.w	40856c <_dtoa_r+0xb04>
  4083b4:	461f      	mov	r7, r3
  4083b6:	461e      	mov	r6, r3
  4083b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4083ba:	930a      	str	r3, [sp, #40]	; 0x28
  4083bc:	e6f6      	b.n	4081ac <_dtoa_r+0x744>
  4083be:	2301      	movs	r3, #1
  4083c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4083c2:	e7f3      	b.n	4083ac <_dtoa_r+0x944>
  4083c4:	f1ba 0f00 	cmp.w	sl, #0
  4083c8:	f47f ada8 	bne.w	407f1c <_dtoa_r+0x4b4>
  4083cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4083d0:	2b00      	cmp	r3, #0
  4083d2:	f47f adba 	bne.w	407f4a <_dtoa_r+0x4e2>
  4083d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4083da:	0d3f      	lsrs	r7, r7, #20
  4083dc:	053f      	lsls	r7, r7, #20
  4083de:	2f00      	cmp	r7, #0
  4083e0:	f000 820d 	beq.w	4087fe <_dtoa_r+0xd96>
  4083e4:	9b08      	ldr	r3, [sp, #32]
  4083e6:	3301      	adds	r3, #1
  4083e8:	9308      	str	r3, [sp, #32]
  4083ea:	9b06      	ldr	r3, [sp, #24]
  4083ec:	3301      	adds	r3, #1
  4083ee:	9306      	str	r3, [sp, #24]
  4083f0:	2301      	movs	r3, #1
  4083f2:	930c      	str	r3, [sp, #48]	; 0x30
  4083f4:	e5ab      	b.n	407f4e <_dtoa_r+0x4e6>
  4083f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083f8:	2b00      	cmp	r3, #0
  4083fa:	f73f ac42 	bgt.w	407c82 <_dtoa_r+0x21a>
  4083fe:	f040 8221 	bne.w	408844 <_dtoa_r+0xddc>
  408402:	2200      	movs	r2, #0
  408404:	4b38      	ldr	r3, [pc, #224]	; (4084e8 <_dtoa_r+0xa80>)
  408406:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40840a:	f002 f9c7 	bl	40a79c <__aeabi_dmul>
  40840e:	4652      	mov	r2, sl
  408410:	465b      	mov	r3, fp
  408412:	f002 fc49 	bl	40aca8 <__aeabi_dcmpge>
  408416:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40841a:	4646      	mov	r6, r8
  40841c:	2800      	cmp	r0, #0
  40841e:	d041      	beq.n	4084a4 <_dtoa_r+0xa3c>
  408420:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408422:	9d04      	ldr	r5, [sp, #16]
  408424:	43db      	mvns	r3, r3
  408426:	9302      	str	r3, [sp, #8]
  408428:	4641      	mov	r1, r8
  40842a:	4620      	mov	r0, r4
  40842c:	f000 ffd2 	bl	4093d4 <_Bfree>
  408430:	2e00      	cmp	r6, #0
  408432:	f43f acdd 	beq.w	407df0 <_dtoa_r+0x388>
  408436:	e6a7      	b.n	408188 <_dtoa_r+0x720>
  408438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40843a:	4649      	mov	r1, r9
  40843c:	4620      	mov	r0, r4
  40843e:	f001 f8ff 	bl	409640 <__pow5mult>
  408442:	4681      	mov	r9, r0
  408444:	e558      	b.n	407ef8 <_dtoa_r+0x490>
  408446:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408448:	2a00      	cmp	r2, #0
  40844a:	f000 8187 	beq.w	40875c <_dtoa_r+0xcf4>
  40844e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408452:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408454:	9d08      	ldr	r5, [sp, #32]
  408456:	e4f2      	b.n	407e3e <_dtoa_r+0x3d6>
  408458:	f1ba 0f00 	cmp.w	sl, #0
  40845c:	f47f ad75 	bne.w	407f4a <_dtoa_r+0x4e2>
  408460:	e7b4      	b.n	4083cc <_dtoa_r+0x964>
  408462:	f000 ffc1 	bl	4093e8 <__multadd>
  408466:	4647      	mov	r7, r8
  408468:	4606      	mov	r6, r0
  40846a:	4683      	mov	fp, r0
  40846c:	e5be      	b.n	407fec <_dtoa_r+0x584>
  40846e:	4601      	mov	r1, r0
  408470:	4620      	mov	r0, r4
  408472:	9306      	str	r3, [sp, #24]
  408474:	f000 ffae 	bl	4093d4 <_Bfree>
  408478:	2201      	movs	r2, #1
  40847a:	9b06      	ldr	r3, [sp, #24]
  40847c:	e5e0      	b.n	408040 <_dtoa_r+0x5d8>
  40847e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408480:	2b02      	cmp	r3, #2
  408482:	f77f ad96 	ble.w	407fb2 <_dtoa_r+0x54a>
  408486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408488:	2b00      	cmp	r3, #0
  40848a:	d1c9      	bne.n	408420 <_dtoa_r+0x9b8>
  40848c:	4641      	mov	r1, r8
  40848e:	2205      	movs	r2, #5
  408490:	4620      	mov	r0, r4
  408492:	f000 ffa9 	bl	4093e8 <__multadd>
  408496:	4601      	mov	r1, r0
  408498:	4680      	mov	r8, r0
  40849a:	4648      	mov	r0, r9
  40849c:	f001 f972 	bl	409784 <__mcmp>
  4084a0:	2800      	cmp	r0, #0
  4084a2:	ddbd      	ble.n	408420 <_dtoa_r+0x9b8>
  4084a4:	9a02      	ldr	r2, [sp, #8]
  4084a6:	9904      	ldr	r1, [sp, #16]
  4084a8:	2331      	movs	r3, #49	; 0x31
  4084aa:	3201      	adds	r2, #1
  4084ac:	9202      	str	r2, [sp, #8]
  4084ae:	700b      	strb	r3, [r1, #0]
  4084b0:	1c4d      	adds	r5, r1, #1
  4084b2:	e7b9      	b.n	408428 <_dtoa_r+0x9c0>
  4084b4:	9a02      	ldr	r2, [sp, #8]
  4084b6:	3201      	adds	r2, #1
  4084b8:	9202      	str	r2, [sp, #8]
  4084ba:	9a04      	ldr	r2, [sp, #16]
  4084bc:	2331      	movs	r3, #49	; 0x31
  4084be:	7013      	strb	r3, [r2, #0]
  4084c0:	e652      	b.n	408168 <_dtoa_r+0x700>
  4084c2:	2301      	movs	r3, #1
  4084c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4084c6:	e666      	b.n	408196 <_dtoa_r+0x72e>
  4084c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4084cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4084ce:	e48f      	b.n	407df0 <_dtoa_r+0x388>
  4084d0:	0040b520 	.word	0x0040b520
  4084d4:	0040b4f8 	.word	0x0040b4f8
  4084d8:	3ff00000 	.word	0x3ff00000
  4084dc:	401c0000 	.word	0x401c0000
  4084e0:	3fe00000 	.word	0x3fe00000
  4084e4:	40240000 	.word	0x40240000
  4084e8:	40140000 	.word	0x40140000
  4084ec:	4650      	mov	r0, sl
  4084ee:	f002 f8ef 	bl	40a6d0 <__aeabi_i2d>
  4084f2:	463a      	mov	r2, r7
  4084f4:	4643      	mov	r3, r8
  4084f6:	f002 f951 	bl	40a79c <__aeabi_dmul>
  4084fa:	2200      	movs	r2, #0
  4084fc:	4bc1      	ldr	r3, [pc, #772]	; (408804 <_dtoa_r+0xd9c>)
  4084fe:	f001 ff9b 	bl	40a438 <__adddf3>
  408502:	4605      	mov	r5, r0
  408504:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408508:	4641      	mov	r1, r8
  40850a:	2200      	movs	r2, #0
  40850c:	4bbe      	ldr	r3, [pc, #760]	; (408808 <_dtoa_r+0xda0>)
  40850e:	4638      	mov	r0, r7
  408510:	f001 ff90 	bl	40a434 <__aeabi_dsub>
  408514:	462a      	mov	r2, r5
  408516:	4633      	mov	r3, r6
  408518:	4682      	mov	sl, r0
  40851a:	468b      	mov	fp, r1
  40851c:	f002 fbce 	bl	40acbc <__aeabi_dcmpgt>
  408520:	4680      	mov	r8, r0
  408522:	2800      	cmp	r0, #0
  408524:	f040 8110 	bne.w	408748 <_dtoa_r+0xce0>
  408528:	462a      	mov	r2, r5
  40852a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40852e:	4650      	mov	r0, sl
  408530:	4659      	mov	r1, fp
  408532:	f002 fba5 	bl	40ac80 <__aeabi_dcmplt>
  408536:	b118      	cbz	r0, 408540 <_dtoa_r+0xad8>
  408538:	4646      	mov	r6, r8
  40853a:	e771      	b.n	408420 <_dtoa_r+0x9b8>
  40853c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408540:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408544:	f7ff bb8a 	b.w	407c5c <_dtoa_r+0x1f4>
  408548:	9804      	ldr	r0, [sp, #16]
  40854a:	f7ff babb 	b.w	407ac4 <_dtoa_r+0x5c>
  40854e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408550:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408552:	970c      	str	r7, [sp, #48]	; 0x30
  408554:	1afb      	subs	r3, r7, r3
  408556:	441a      	add	r2, r3
  408558:	920d      	str	r2, [sp, #52]	; 0x34
  40855a:	2700      	movs	r7, #0
  40855c:	e469      	b.n	407e32 <_dtoa_r+0x3ca>
  40855e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408562:	f04f 0a02 	mov.w	sl, #2
  408566:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40856a:	e657      	b.n	40821c <_dtoa_r+0x7b4>
  40856c:	2100      	movs	r1, #0
  40856e:	2301      	movs	r3, #1
  408570:	6461      	str	r1, [r4, #68]	; 0x44
  408572:	4620      	mov	r0, r4
  408574:	9325      	str	r3, [sp, #148]	; 0x94
  408576:	f000 ff07 	bl	409388 <_Balloc>
  40857a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40857c:	9004      	str	r0, [sp, #16]
  40857e:	6420      	str	r0, [r4, #64]	; 0x40
  408580:	930a      	str	r3, [sp, #40]	; 0x28
  408582:	930f      	str	r3, [sp, #60]	; 0x3c
  408584:	e629      	b.n	4081da <_dtoa_r+0x772>
  408586:	2a00      	cmp	r2, #0
  408588:	46d0      	mov	r8, sl
  40858a:	f8cd b018 	str.w	fp, [sp, #24]
  40858e:	469a      	mov	sl, r3
  408590:	dd11      	ble.n	4085b6 <_dtoa_r+0xb4e>
  408592:	4649      	mov	r1, r9
  408594:	2201      	movs	r2, #1
  408596:	4620      	mov	r0, r4
  408598:	f001 f8a2 	bl	4096e0 <__lshift>
  40859c:	4641      	mov	r1, r8
  40859e:	4681      	mov	r9, r0
  4085a0:	f001 f8f0 	bl	409784 <__mcmp>
  4085a4:	2800      	cmp	r0, #0
  4085a6:	f340 8146 	ble.w	408836 <_dtoa_r+0xdce>
  4085aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4085ae:	f000 8106 	beq.w	4087be <_dtoa_r+0xd56>
  4085b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4085b6:	46b3      	mov	fp, r6
  4085b8:	f887 a000 	strb.w	sl, [r7]
  4085bc:	1c7d      	adds	r5, r7, #1
  4085be:	9e06      	ldr	r6, [sp, #24]
  4085c0:	e5d2      	b.n	408168 <_dtoa_r+0x700>
  4085c2:	d104      	bne.n	4085ce <_dtoa_r+0xb66>
  4085c4:	f01a 0f01 	tst.w	sl, #1
  4085c8:	d001      	beq.n	4085ce <_dtoa_r+0xb66>
  4085ca:	e5bd      	b.n	408148 <_dtoa_r+0x6e0>
  4085cc:	4615      	mov	r5, r2
  4085ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4085d2:	2b30      	cmp	r3, #48	; 0x30
  4085d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4085d8:	d0f8      	beq.n	4085cc <_dtoa_r+0xb64>
  4085da:	e5c5      	b.n	408168 <_dtoa_r+0x700>
  4085dc:	9904      	ldr	r1, [sp, #16]
  4085de:	2230      	movs	r2, #48	; 0x30
  4085e0:	700a      	strb	r2, [r1, #0]
  4085e2:	9a02      	ldr	r2, [sp, #8]
  4085e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4085e8:	3201      	adds	r2, #1
  4085ea:	9202      	str	r2, [sp, #8]
  4085ec:	f7ff bbfc 	b.w	407de8 <_dtoa_r+0x380>
  4085f0:	f000 80bb 	beq.w	40876a <_dtoa_r+0xd02>
  4085f4:	9b02      	ldr	r3, [sp, #8]
  4085f6:	425d      	negs	r5, r3
  4085f8:	4b84      	ldr	r3, [pc, #528]	; (40880c <_dtoa_r+0xda4>)
  4085fa:	f005 020f 	and.w	r2, r5, #15
  4085fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408602:	e9d3 2300 	ldrd	r2, r3, [r3]
  408606:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40860a:	f002 f8c7 	bl	40a79c <__aeabi_dmul>
  40860e:	112d      	asrs	r5, r5, #4
  408610:	4607      	mov	r7, r0
  408612:	4688      	mov	r8, r1
  408614:	f000 812c 	beq.w	408870 <_dtoa_r+0xe08>
  408618:	4e7d      	ldr	r6, [pc, #500]	; (408810 <_dtoa_r+0xda8>)
  40861a:	f04f 0a02 	mov.w	sl, #2
  40861e:	07eb      	lsls	r3, r5, #31
  408620:	d509      	bpl.n	408636 <_dtoa_r+0xbce>
  408622:	4638      	mov	r0, r7
  408624:	4641      	mov	r1, r8
  408626:	e9d6 2300 	ldrd	r2, r3, [r6]
  40862a:	f002 f8b7 	bl	40a79c <__aeabi_dmul>
  40862e:	f10a 0a01 	add.w	sl, sl, #1
  408632:	4607      	mov	r7, r0
  408634:	4688      	mov	r8, r1
  408636:	106d      	asrs	r5, r5, #1
  408638:	f106 0608 	add.w	r6, r6, #8
  40863c:	d1ef      	bne.n	40861e <_dtoa_r+0xbb6>
  40863e:	e608      	b.n	408252 <_dtoa_r+0x7ea>
  408640:	6871      	ldr	r1, [r6, #4]
  408642:	4620      	mov	r0, r4
  408644:	f000 fea0 	bl	409388 <_Balloc>
  408648:	6933      	ldr	r3, [r6, #16]
  40864a:	3302      	adds	r3, #2
  40864c:	009a      	lsls	r2, r3, #2
  40864e:	4605      	mov	r5, r0
  408650:	f106 010c 	add.w	r1, r6, #12
  408654:	300c      	adds	r0, #12
  408656:	f7fc f883 	bl	404760 <memcpy>
  40865a:	4629      	mov	r1, r5
  40865c:	2201      	movs	r2, #1
  40865e:	4620      	mov	r0, r4
  408660:	f001 f83e 	bl	4096e0 <__lshift>
  408664:	9006      	str	r0, [sp, #24]
  408666:	e4b5      	b.n	407fd4 <_dtoa_r+0x56c>
  408668:	2b39      	cmp	r3, #57	; 0x39
  40866a:	f8cd b018 	str.w	fp, [sp, #24]
  40866e:	46d0      	mov	r8, sl
  408670:	f000 80a5 	beq.w	4087be <_dtoa_r+0xd56>
  408674:	f103 0a01 	add.w	sl, r3, #1
  408678:	46b3      	mov	fp, r6
  40867a:	f887 a000 	strb.w	sl, [r7]
  40867e:	1c7d      	adds	r5, r7, #1
  408680:	9e06      	ldr	r6, [sp, #24]
  408682:	e571      	b.n	408168 <_dtoa_r+0x700>
  408684:	465a      	mov	r2, fp
  408686:	46d0      	mov	r8, sl
  408688:	46b3      	mov	fp, r6
  40868a:	469a      	mov	sl, r3
  40868c:	4616      	mov	r6, r2
  40868e:	e54f      	b.n	408130 <_dtoa_r+0x6c8>
  408690:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408692:	495e      	ldr	r1, [pc, #376]	; (40880c <_dtoa_r+0xda4>)
  408694:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408698:	462a      	mov	r2, r5
  40869a:	4633      	mov	r3, r6
  40869c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4086a0:	f002 f87c 	bl	40a79c <__aeabi_dmul>
  4086a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4086a8:	4638      	mov	r0, r7
  4086aa:	4641      	mov	r1, r8
  4086ac:	f002 fb26 	bl	40acfc <__aeabi_d2iz>
  4086b0:	4605      	mov	r5, r0
  4086b2:	f002 f80d 	bl	40a6d0 <__aeabi_i2d>
  4086b6:	460b      	mov	r3, r1
  4086b8:	4602      	mov	r2, r0
  4086ba:	4641      	mov	r1, r8
  4086bc:	4638      	mov	r0, r7
  4086be:	f001 feb9 	bl	40a434 <__aeabi_dsub>
  4086c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4086c4:	460f      	mov	r7, r1
  4086c6:	9904      	ldr	r1, [sp, #16]
  4086c8:	3530      	adds	r5, #48	; 0x30
  4086ca:	2b01      	cmp	r3, #1
  4086cc:	700d      	strb	r5, [r1, #0]
  4086ce:	4606      	mov	r6, r0
  4086d0:	f101 0501 	add.w	r5, r1, #1
  4086d4:	d026      	beq.n	408724 <_dtoa_r+0xcbc>
  4086d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4086d8:	9a04      	ldr	r2, [sp, #16]
  4086da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408818 <_dtoa_r+0xdb0>
  4086de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4086e2:	4413      	add	r3, r2
  4086e4:	f04f 0a00 	mov.w	sl, #0
  4086e8:	4699      	mov	r9, r3
  4086ea:	4652      	mov	r2, sl
  4086ec:	465b      	mov	r3, fp
  4086ee:	4630      	mov	r0, r6
  4086f0:	4639      	mov	r1, r7
  4086f2:	f002 f853 	bl	40a79c <__aeabi_dmul>
  4086f6:	460f      	mov	r7, r1
  4086f8:	4606      	mov	r6, r0
  4086fa:	f002 faff 	bl	40acfc <__aeabi_d2iz>
  4086fe:	4680      	mov	r8, r0
  408700:	f001 ffe6 	bl	40a6d0 <__aeabi_i2d>
  408704:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408708:	4602      	mov	r2, r0
  40870a:	460b      	mov	r3, r1
  40870c:	4630      	mov	r0, r6
  40870e:	4639      	mov	r1, r7
  408710:	f001 fe90 	bl	40a434 <__aeabi_dsub>
  408714:	f805 8b01 	strb.w	r8, [r5], #1
  408718:	454d      	cmp	r5, r9
  40871a:	4606      	mov	r6, r0
  40871c:	460f      	mov	r7, r1
  40871e:	d1e4      	bne.n	4086ea <_dtoa_r+0xc82>
  408720:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408724:	4b3b      	ldr	r3, [pc, #236]	; (408814 <_dtoa_r+0xdac>)
  408726:	2200      	movs	r2, #0
  408728:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40872c:	f001 fe84 	bl	40a438 <__adddf3>
  408730:	4632      	mov	r2, r6
  408732:	463b      	mov	r3, r7
  408734:	f002 faa4 	bl	40ac80 <__aeabi_dcmplt>
  408738:	2800      	cmp	r0, #0
  40873a:	d046      	beq.n	4087ca <_dtoa_r+0xd62>
  40873c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40873e:	9302      	str	r3, [sp, #8]
  408740:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408744:	f7ff bb43 	b.w	407dce <_dtoa_r+0x366>
  408748:	f04f 0800 	mov.w	r8, #0
  40874c:	4646      	mov	r6, r8
  40874e:	e6a9      	b.n	4084a4 <_dtoa_r+0xa3c>
  408750:	9b08      	ldr	r3, [sp, #32]
  408752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408754:	1a9d      	subs	r5, r3, r2
  408756:	2300      	movs	r3, #0
  408758:	f7ff bb71 	b.w	407e3e <_dtoa_r+0x3d6>
  40875c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40875e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408760:	9d08      	ldr	r5, [sp, #32]
  408762:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408766:	f7ff bb6a 	b.w	407e3e <_dtoa_r+0x3d6>
  40876a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40876e:	f04f 0a02 	mov.w	sl, #2
  408772:	e56e      	b.n	408252 <_dtoa_r+0x7ea>
  408774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408776:	2b00      	cmp	r3, #0
  408778:	f43f aeb8 	beq.w	4084ec <_dtoa_r+0xa84>
  40877c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40877e:	2b00      	cmp	r3, #0
  408780:	f77f aede 	ble.w	408540 <_dtoa_r+0xad8>
  408784:	2200      	movs	r2, #0
  408786:	4b24      	ldr	r3, [pc, #144]	; (408818 <_dtoa_r+0xdb0>)
  408788:	4638      	mov	r0, r7
  40878a:	4641      	mov	r1, r8
  40878c:	f002 f806 	bl	40a79c <__aeabi_dmul>
  408790:	4607      	mov	r7, r0
  408792:	4688      	mov	r8, r1
  408794:	f10a 0001 	add.w	r0, sl, #1
  408798:	f001 ff9a 	bl	40a6d0 <__aeabi_i2d>
  40879c:	463a      	mov	r2, r7
  40879e:	4643      	mov	r3, r8
  4087a0:	f001 fffc 	bl	40a79c <__aeabi_dmul>
  4087a4:	2200      	movs	r2, #0
  4087a6:	4b17      	ldr	r3, [pc, #92]	; (408804 <_dtoa_r+0xd9c>)
  4087a8:	f001 fe46 	bl	40a438 <__adddf3>
  4087ac:	9a02      	ldr	r2, [sp, #8]
  4087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4087b0:	9312      	str	r3, [sp, #72]	; 0x48
  4087b2:	3a01      	subs	r2, #1
  4087b4:	4605      	mov	r5, r0
  4087b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4087ba:	9215      	str	r2, [sp, #84]	; 0x54
  4087bc:	e56a      	b.n	408294 <_dtoa_r+0x82c>
  4087be:	2239      	movs	r2, #57	; 0x39
  4087c0:	46b3      	mov	fp, r6
  4087c2:	703a      	strb	r2, [r7, #0]
  4087c4:	9e06      	ldr	r6, [sp, #24]
  4087c6:	1c7d      	adds	r5, r7, #1
  4087c8:	e4c0      	b.n	40814c <_dtoa_r+0x6e4>
  4087ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4087ce:	2000      	movs	r0, #0
  4087d0:	4910      	ldr	r1, [pc, #64]	; (408814 <_dtoa_r+0xdac>)
  4087d2:	f001 fe2f 	bl	40a434 <__aeabi_dsub>
  4087d6:	4632      	mov	r2, r6
  4087d8:	463b      	mov	r3, r7
  4087da:	f002 fa6f 	bl	40acbc <__aeabi_dcmpgt>
  4087de:	b908      	cbnz	r0, 4087e4 <_dtoa_r+0xd7c>
  4087e0:	e6ae      	b.n	408540 <_dtoa_r+0xad8>
  4087e2:	4615      	mov	r5, r2
  4087e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4087e8:	2b30      	cmp	r3, #48	; 0x30
  4087ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4087ee:	d0f8      	beq.n	4087e2 <_dtoa_r+0xd7a>
  4087f0:	e5d7      	b.n	4083a2 <_dtoa_r+0x93a>
  4087f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4087f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4087f8:	9302      	str	r3, [sp, #8]
  4087fa:	f7ff bae8 	b.w	407dce <_dtoa_r+0x366>
  4087fe:	970c      	str	r7, [sp, #48]	; 0x30
  408800:	f7ff bba5 	b.w	407f4e <_dtoa_r+0x4e6>
  408804:	401c0000 	.word	0x401c0000
  408808:	40140000 	.word	0x40140000
  40880c:	0040b520 	.word	0x0040b520
  408810:	0040b4f8 	.word	0x0040b4f8
  408814:	3fe00000 	.word	0x3fe00000
  408818:	40240000 	.word	0x40240000
  40881c:	2b39      	cmp	r3, #57	; 0x39
  40881e:	f8cd b018 	str.w	fp, [sp, #24]
  408822:	46d0      	mov	r8, sl
  408824:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408828:	469a      	mov	sl, r3
  40882a:	d0c8      	beq.n	4087be <_dtoa_r+0xd56>
  40882c:	f1bb 0f00 	cmp.w	fp, #0
  408830:	f73f aebf 	bgt.w	4085b2 <_dtoa_r+0xb4a>
  408834:	e6bf      	b.n	4085b6 <_dtoa_r+0xb4e>
  408836:	f47f aebe 	bne.w	4085b6 <_dtoa_r+0xb4e>
  40883a:	f01a 0f01 	tst.w	sl, #1
  40883e:	f43f aeba 	beq.w	4085b6 <_dtoa_r+0xb4e>
  408842:	e6b2      	b.n	4085aa <_dtoa_r+0xb42>
  408844:	f04f 0800 	mov.w	r8, #0
  408848:	4646      	mov	r6, r8
  40884a:	e5e9      	b.n	408420 <_dtoa_r+0x9b8>
  40884c:	4631      	mov	r1, r6
  40884e:	2300      	movs	r3, #0
  408850:	220a      	movs	r2, #10
  408852:	4620      	mov	r0, r4
  408854:	f000 fdc8 	bl	4093e8 <__multadd>
  408858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40885a:	2b00      	cmp	r3, #0
  40885c:	4606      	mov	r6, r0
  40885e:	dd0a      	ble.n	408876 <_dtoa_r+0xe0e>
  408860:	930a      	str	r3, [sp, #40]	; 0x28
  408862:	f7ff bbaa 	b.w	407fba <_dtoa_r+0x552>
  408866:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408868:	2b02      	cmp	r3, #2
  40886a:	dc23      	bgt.n	4088b4 <_dtoa_r+0xe4c>
  40886c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40886e:	e43b      	b.n	4080e8 <_dtoa_r+0x680>
  408870:	f04f 0a02 	mov.w	sl, #2
  408874:	e4ed      	b.n	408252 <_dtoa_r+0x7ea>
  408876:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408878:	2b02      	cmp	r3, #2
  40887a:	dc1b      	bgt.n	4088b4 <_dtoa_r+0xe4c>
  40887c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40887e:	e7ef      	b.n	408860 <_dtoa_r+0xdf8>
  408880:	2500      	movs	r5, #0
  408882:	6465      	str	r5, [r4, #68]	; 0x44
  408884:	4629      	mov	r1, r5
  408886:	4620      	mov	r0, r4
  408888:	f000 fd7e 	bl	409388 <_Balloc>
  40888c:	f04f 33ff 	mov.w	r3, #4294967295
  408890:	930a      	str	r3, [sp, #40]	; 0x28
  408892:	930f      	str	r3, [sp, #60]	; 0x3c
  408894:	2301      	movs	r3, #1
  408896:	9004      	str	r0, [sp, #16]
  408898:	9525      	str	r5, [sp, #148]	; 0x94
  40889a:	6420      	str	r0, [r4, #64]	; 0x40
  40889c:	930b      	str	r3, [sp, #44]	; 0x2c
  40889e:	f7ff b9dd 	b.w	407c5c <_dtoa_r+0x1f4>
  4088a2:	2501      	movs	r5, #1
  4088a4:	f7ff b9a5 	b.w	407bf2 <_dtoa_r+0x18a>
  4088a8:	f43f ab69 	beq.w	407f7e <_dtoa_r+0x516>
  4088ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4088b0:	f7ff bbf9 	b.w	4080a6 <_dtoa_r+0x63e>
  4088b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4088b6:	930a      	str	r3, [sp, #40]	; 0x28
  4088b8:	e5e5      	b.n	408486 <_dtoa_r+0xa1e>
  4088ba:	bf00      	nop

004088bc <__sflush_r>:
  4088bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4088c0:	b29a      	uxth	r2, r3
  4088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088c6:	460d      	mov	r5, r1
  4088c8:	0711      	lsls	r1, r2, #28
  4088ca:	4680      	mov	r8, r0
  4088cc:	d43a      	bmi.n	408944 <__sflush_r+0x88>
  4088ce:	686a      	ldr	r2, [r5, #4]
  4088d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4088d4:	2a00      	cmp	r2, #0
  4088d6:	81ab      	strh	r3, [r5, #12]
  4088d8:	dd6f      	ble.n	4089ba <__sflush_r+0xfe>
  4088da:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4088dc:	2c00      	cmp	r4, #0
  4088de:	d049      	beq.n	408974 <__sflush_r+0xb8>
  4088e0:	2200      	movs	r2, #0
  4088e2:	b29b      	uxth	r3, r3
  4088e4:	f8d8 6000 	ldr.w	r6, [r8]
  4088e8:	f8c8 2000 	str.w	r2, [r8]
  4088ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4088f0:	d067      	beq.n	4089c2 <__sflush_r+0x106>
  4088f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4088f4:	075f      	lsls	r7, r3, #29
  4088f6:	d505      	bpl.n	408904 <__sflush_r+0x48>
  4088f8:	6869      	ldr	r1, [r5, #4]
  4088fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4088fc:	1a52      	subs	r2, r2, r1
  4088fe:	b10b      	cbz	r3, 408904 <__sflush_r+0x48>
  408900:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408902:	1ad2      	subs	r2, r2, r3
  408904:	2300      	movs	r3, #0
  408906:	69e9      	ldr	r1, [r5, #28]
  408908:	4640      	mov	r0, r8
  40890a:	47a0      	blx	r4
  40890c:	1c44      	adds	r4, r0, #1
  40890e:	d03c      	beq.n	40898a <__sflush_r+0xce>
  408910:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408914:	692a      	ldr	r2, [r5, #16]
  408916:	602a      	str	r2, [r5, #0]
  408918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40891c:	2200      	movs	r2, #0
  40891e:	81ab      	strh	r3, [r5, #12]
  408920:	04db      	lsls	r3, r3, #19
  408922:	606a      	str	r2, [r5, #4]
  408924:	d447      	bmi.n	4089b6 <__sflush_r+0xfa>
  408926:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408928:	f8c8 6000 	str.w	r6, [r8]
  40892c:	b311      	cbz	r1, 408974 <__sflush_r+0xb8>
  40892e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408932:	4299      	cmp	r1, r3
  408934:	d002      	beq.n	40893c <__sflush_r+0x80>
  408936:	4640      	mov	r0, r8
  408938:	f000 f95a 	bl	408bf0 <_free_r>
  40893c:	2000      	movs	r0, #0
  40893e:	6328      	str	r0, [r5, #48]	; 0x30
  408940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408944:	692e      	ldr	r6, [r5, #16]
  408946:	b1ae      	cbz	r6, 408974 <__sflush_r+0xb8>
  408948:	682c      	ldr	r4, [r5, #0]
  40894a:	602e      	str	r6, [r5, #0]
  40894c:	0791      	lsls	r1, r2, #30
  40894e:	bf0c      	ite	eq
  408950:	696b      	ldreq	r3, [r5, #20]
  408952:	2300      	movne	r3, #0
  408954:	1ba4      	subs	r4, r4, r6
  408956:	60ab      	str	r3, [r5, #8]
  408958:	e00a      	b.n	408970 <__sflush_r+0xb4>
  40895a:	4623      	mov	r3, r4
  40895c:	4632      	mov	r2, r6
  40895e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408960:	69e9      	ldr	r1, [r5, #28]
  408962:	4640      	mov	r0, r8
  408964:	47b8      	blx	r7
  408966:	2800      	cmp	r0, #0
  408968:	eba4 0400 	sub.w	r4, r4, r0
  40896c:	4406      	add	r6, r0
  40896e:	dd04      	ble.n	40897a <__sflush_r+0xbe>
  408970:	2c00      	cmp	r4, #0
  408972:	dcf2      	bgt.n	40895a <__sflush_r+0x9e>
  408974:	2000      	movs	r0, #0
  408976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40897a:	89ab      	ldrh	r3, [r5, #12]
  40897c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408980:	81ab      	strh	r3, [r5, #12]
  408982:	f04f 30ff 	mov.w	r0, #4294967295
  408986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40898a:	f8d8 4000 	ldr.w	r4, [r8]
  40898e:	2c1d      	cmp	r4, #29
  408990:	d8f3      	bhi.n	40897a <__sflush_r+0xbe>
  408992:	4b19      	ldr	r3, [pc, #100]	; (4089f8 <__sflush_r+0x13c>)
  408994:	40e3      	lsrs	r3, r4
  408996:	43db      	mvns	r3, r3
  408998:	f013 0301 	ands.w	r3, r3, #1
  40899c:	d1ed      	bne.n	40897a <__sflush_r+0xbe>
  40899e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4089a2:	606b      	str	r3, [r5, #4]
  4089a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4089a8:	6929      	ldr	r1, [r5, #16]
  4089aa:	81ab      	strh	r3, [r5, #12]
  4089ac:	04da      	lsls	r2, r3, #19
  4089ae:	6029      	str	r1, [r5, #0]
  4089b0:	d5b9      	bpl.n	408926 <__sflush_r+0x6a>
  4089b2:	2c00      	cmp	r4, #0
  4089b4:	d1b7      	bne.n	408926 <__sflush_r+0x6a>
  4089b6:	6528      	str	r0, [r5, #80]	; 0x50
  4089b8:	e7b5      	b.n	408926 <__sflush_r+0x6a>
  4089ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4089bc:	2a00      	cmp	r2, #0
  4089be:	dc8c      	bgt.n	4088da <__sflush_r+0x1e>
  4089c0:	e7d8      	b.n	408974 <__sflush_r+0xb8>
  4089c2:	2301      	movs	r3, #1
  4089c4:	69e9      	ldr	r1, [r5, #28]
  4089c6:	4640      	mov	r0, r8
  4089c8:	47a0      	blx	r4
  4089ca:	1c43      	adds	r3, r0, #1
  4089cc:	4602      	mov	r2, r0
  4089ce:	d002      	beq.n	4089d6 <__sflush_r+0x11a>
  4089d0:	89ab      	ldrh	r3, [r5, #12]
  4089d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4089d4:	e78e      	b.n	4088f4 <__sflush_r+0x38>
  4089d6:	f8d8 3000 	ldr.w	r3, [r8]
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d0f8      	beq.n	4089d0 <__sflush_r+0x114>
  4089de:	2b1d      	cmp	r3, #29
  4089e0:	d001      	beq.n	4089e6 <__sflush_r+0x12a>
  4089e2:	2b16      	cmp	r3, #22
  4089e4:	d102      	bne.n	4089ec <__sflush_r+0x130>
  4089e6:	f8c8 6000 	str.w	r6, [r8]
  4089ea:	e7c3      	b.n	408974 <__sflush_r+0xb8>
  4089ec:	89ab      	ldrh	r3, [r5, #12]
  4089ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4089f2:	81ab      	strh	r3, [r5, #12]
  4089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4089f8:	20400001 	.word	0x20400001

004089fc <_fflush_r>:
  4089fc:	b538      	push	{r3, r4, r5, lr}
  4089fe:	460d      	mov	r5, r1
  408a00:	4604      	mov	r4, r0
  408a02:	b108      	cbz	r0, 408a08 <_fflush_r+0xc>
  408a04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408a06:	b1bb      	cbz	r3, 408a38 <_fflush_r+0x3c>
  408a08:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408a0c:	b188      	cbz	r0, 408a32 <_fflush_r+0x36>
  408a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408a10:	07db      	lsls	r3, r3, #31
  408a12:	d401      	bmi.n	408a18 <_fflush_r+0x1c>
  408a14:	0581      	lsls	r1, r0, #22
  408a16:	d517      	bpl.n	408a48 <_fflush_r+0x4c>
  408a18:	4620      	mov	r0, r4
  408a1a:	4629      	mov	r1, r5
  408a1c:	f7ff ff4e 	bl	4088bc <__sflush_r>
  408a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408a22:	07da      	lsls	r2, r3, #31
  408a24:	4604      	mov	r4, r0
  408a26:	d402      	bmi.n	408a2e <_fflush_r+0x32>
  408a28:	89ab      	ldrh	r3, [r5, #12]
  408a2a:	059b      	lsls	r3, r3, #22
  408a2c:	d507      	bpl.n	408a3e <_fflush_r+0x42>
  408a2e:	4620      	mov	r0, r4
  408a30:	bd38      	pop	{r3, r4, r5, pc}
  408a32:	4604      	mov	r4, r0
  408a34:	4620      	mov	r0, r4
  408a36:	bd38      	pop	{r3, r4, r5, pc}
  408a38:	f000 f838 	bl	408aac <__sinit>
  408a3c:	e7e4      	b.n	408a08 <_fflush_r+0xc>
  408a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408a40:	f000 fb72 	bl	409128 <__retarget_lock_release_recursive>
  408a44:	4620      	mov	r0, r4
  408a46:	bd38      	pop	{r3, r4, r5, pc}
  408a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408a4a:	f000 fb6b 	bl	409124 <__retarget_lock_acquire_recursive>
  408a4e:	e7e3      	b.n	408a18 <_fflush_r+0x1c>

00408a50 <_cleanup_r>:
  408a50:	4901      	ldr	r1, [pc, #4]	; (408a58 <_cleanup_r+0x8>)
  408a52:	f000 bb2b 	b.w	4090ac <_fwalk_reent>
  408a56:	bf00      	nop
  408a58:	0040a055 	.word	0x0040a055

00408a5c <std.isra.0>:
  408a5c:	b510      	push	{r4, lr}
  408a5e:	2300      	movs	r3, #0
  408a60:	4604      	mov	r4, r0
  408a62:	8181      	strh	r1, [r0, #12]
  408a64:	81c2      	strh	r2, [r0, #14]
  408a66:	6003      	str	r3, [r0, #0]
  408a68:	6043      	str	r3, [r0, #4]
  408a6a:	6083      	str	r3, [r0, #8]
  408a6c:	6643      	str	r3, [r0, #100]	; 0x64
  408a6e:	6103      	str	r3, [r0, #16]
  408a70:	6143      	str	r3, [r0, #20]
  408a72:	6183      	str	r3, [r0, #24]
  408a74:	4619      	mov	r1, r3
  408a76:	2208      	movs	r2, #8
  408a78:	305c      	adds	r0, #92	; 0x5c
  408a7a:	f7fb ff0b 	bl	404894 <memset>
  408a7e:	4807      	ldr	r0, [pc, #28]	; (408a9c <std.isra.0+0x40>)
  408a80:	4907      	ldr	r1, [pc, #28]	; (408aa0 <std.isra.0+0x44>)
  408a82:	4a08      	ldr	r2, [pc, #32]	; (408aa4 <std.isra.0+0x48>)
  408a84:	4b08      	ldr	r3, [pc, #32]	; (408aa8 <std.isra.0+0x4c>)
  408a86:	6220      	str	r0, [r4, #32]
  408a88:	61e4      	str	r4, [r4, #28]
  408a8a:	6261      	str	r1, [r4, #36]	; 0x24
  408a8c:	62a2      	str	r2, [r4, #40]	; 0x28
  408a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408a98:	f000 bb40 	b.w	40911c <__retarget_lock_init_recursive>
  408a9c:	00409cc9 	.word	0x00409cc9
  408aa0:	00409ced 	.word	0x00409ced
  408aa4:	00409d29 	.word	0x00409d29
  408aa8:	00409d49 	.word	0x00409d49

00408aac <__sinit>:
  408aac:	b510      	push	{r4, lr}
  408aae:	4604      	mov	r4, r0
  408ab0:	4812      	ldr	r0, [pc, #72]	; (408afc <__sinit+0x50>)
  408ab2:	f000 fb37 	bl	409124 <__retarget_lock_acquire_recursive>
  408ab6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408ab8:	b9d2      	cbnz	r2, 408af0 <__sinit+0x44>
  408aba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  408abe:	4810      	ldr	r0, [pc, #64]	; (408b00 <__sinit+0x54>)
  408ac0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  408ac4:	2103      	movs	r1, #3
  408ac6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408aca:	63e0      	str	r0, [r4, #60]	; 0x3c
  408acc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408ad0:	6860      	ldr	r0, [r4, #4]
  408ad2:	2104      	movs	r1, #4
  408ad4:	f7ff ffc2 	bl	408a5c <std.isra.0>
  408ad8:	2201      	movs	r2, #1
  408ada:	2109      	movs	r1, #9
  408adc:	68a0      	ldr	r0, [r4, #8]
  408ade:	f7ff ffbd 	bl	408a5c <std.isra.0>
  408ae2:	2202      	movs	r2, #2
  408ae4:	2112      	movs	r1, #18
  408ae6:	68e0      	ldr	r0, [r4, #12]
  408ae8:	f7ff ffb8 	bl	408a5c <std.isra.0>
  408aec:	2301      	movs	r3, #1
  408aee:	63a3      	str	r3, [r4, #56]	; 0x38
  408af0:	4802      	ldr	r0, [pc, #8]	; (408afc <__sinit+0x50>)
  408af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408af6:	f000 bb17 	b.w	409128 <__retarget_lock_release_recursive>
  408afa:	bf00      	nop
  408afc:	20400e78 	.word	0x20400e78
  408b00:	00408a51 	.word	0x00408a51

00408b04 <__sfp_lock_acquire>:
  408b04:	4801      	ldr	r0, [pc, #4]	; (408b0c <__sfp_lock_acquire+0x8>)
  408b06:	f000 bb0d 	b.w	409124 <__retarget_lock_acquire_recursive>
  408b0a:	bf00      	nop
  408b0c:	20400e8c 	.word	0x20400e8c

00408b10 <__sfp_lock_release>:
  408b10:	4801      	ldr	r0, [pc, #4]	; (408b18 <__sfp_lock_release+0x8>)
  408b12:	f000 bb09 	b.w	409128 <__retarget_lock_release_recursive>
  408b16:	bf00      	nop
  408b18:	20400e8c 	.word	0x20400e8c

00408b1c <__libc_fini_array>:
  408b1c:	b538      	push	{r3, r4, r5, lr}
  408b1e:	4c0a      	ldr	r4, [pc, #40]	; (408b48 <__libc_fini_array+0x2c>)
  408b20:	4d0a      	ldr	r5, [pc, #40]	; (408b4c <__libc_fini_array+0x30>)
  408b22:	1b64      	subs	r4, r4, r5
  408b24:	10a4      	asrs	r4, r4, #2
  408b26:	d00a      	beq.n	408b3e <__libc_fini_array+0x22>
  408b28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408b2c:	3b01      	subs	r3, #1
  408b2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408b32:	3c01      	subs	r4, #1
  408b34:	f855 3904 	ldr.w	r3, [r5], #-4
  408b38:	4798      	blx	r3
  408b3a:	2c00      	cmp	r4, #0
  408b3c:	d1f9      	bne.n	408b32 <__libc_fini_array+0x16>
  408b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408b42:	f002 bde9 	b.w	40b718 <_fini>
  408b46:	bf00      	nop
  408b48:	0040b728 	.word	0x0040b728
  408b4c:	0040b724 	.word	0x0040b724

00408b50 <_malloc_trim_r>:
  408b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b52:	4f24      	ldr	r7, [pc, #144]	; (408be4 <_malloc_trim_r+0x94>)
  408b54:	460c      	mov	r4, r1
  408b56:	4606      	mov	r6, r0
  408b58:	f7fb feea 	bl	404930 <__malloc_lock>
  408b5c:	68bb      	ldr	r3, [r7, #8]
  408b5e:	685d      	ldr	r5, [r3, #4]
  408b60:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408b64:	310f      	adds	r1, #15
  408b66:	f025 0503 	bic.w	r5, r5, #3
  408b6a:	4429      	add	r1, r5
  408b6c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408b70:	f021 010f 	bic.w	r1, r1, #15
  408b74:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408b78:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408b7c:	db07      	blt.n	408b8e <_malloc_trim_r+0x3e>
  408b7e:	2100      	movs	r1, #0
  408b80:	4630      	mov	r0, r6
  408b82:	f7fb ff4b 	bl	404a1c <_sbrk_r>
  408b86:	68bb      	ldr	r3, [r7, #8]
  408b88:	442b      	add	r3, r5
  408b8a:	4298      	cmp	r0, r3
  408b8c:	d004      	beq.n	408b98 <_malloc_trim_r+0x48>
  408b8e:	4630      	mov	r0, r6
  408b90:	f7fb fed4 	bl	40493c <__malloc_unlock>
  408b94:	2000      	movs	r0, #0
  408b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b98:	4261      	negs	r1, r4
  408b9a:	4630      	mov	r0, r6
  408b9c:	f7fb ff3e 	bl	404a1c <_sbrk_r>
  408ba0:	3001      	adds	r0, #1
  408ba2:	d00d      	beq.n	408bc0 <_malloc_trim_r+0x70>
  408ba4:	4b10      	ldr	r3, [pc, #64]	; (408be8 <_malloc_trim_r+0x98>)
  408ba6:	68ba      	ldr	r2, [r7, #8]
  408ba8:	6819      	ldr	r1, [r3, #0]
  408baa:	1b2d      	subs	r5, r5, r4
  408bac:	f045 0501 	orr.w	r5, r5, #1
  408bb0:	4630      	mov	r0, r6
  408bb2:	1b09      	subs	r1, r1, r4
  408bb4:	6055      	str	r5, [r2, #4]
  408bb6:	6019      	str	r1, [r3, #0]
  408bb8:	f7fb fec0 	bl	40493c <__malloc_unlock>
  408bbc:	2001      	movs	r0, #1
  408bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408bc0:	2100      	movs	r1, #0
  408bc2:	4630      	mov	r0, r6
  408bc4:	f7fb ff2a 	bl	404a1c <_sbrk_r>
  408bc8:	68ba      	ldr	r2, [r7, #8]
  408bca:	1a83      	subs	r3, r0, r2
  408bcc:	2b0f      	cmp	r3, #15
  408bce:	ddde      	ble.n	408b8e <_malloc_trim_r+0x3e>
  408bd0:	4c06      	ldr	r4, [pc, #24]	; (408bec <_malloc_trim_r+0x9c>)
  408bd2:	4905      	ldr	r1, [pc, #20]	; (408be8 <_malloc_trim_r+0x98>)
  408bd4:	6824      	ldr	r4, [r4, #0]
  408bd6:	f043 0301 	orr.w	r3, r3, #1
  408bda:	1b00      	subs	r0, r0, r4
  408bdc:	6053      	str	r3, [r2, #4]
  408bde:	6008      	str	r0, [r1, #0]
  408be0:	e7d5      	b.n	408b8e <_malloc_trim_r+0x3e>
  408be2:	bf00      	nop
  408be4:	20400458 	.word	0x20400458
  408be8:	20400dc4 	.word	0x20400dc4
  408bec:	20400860 	.word	0x20400860

00408bf0 <_free_r>:
  408bf0:	2900      	cmp	r1, #0
  408bf2:	d044      	beq.n	408c7e <_free_r+0x8e>
  408bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bf8:	460d      	mov	r5, r1
  408bfa:	4680      	mov	r8, r0
  408bfc:	f7fb fe98 	bl	404930 <__malloc_lock>
  408c00:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408c04:	4969      	ldr	r1, [pc, #420]	; (408dac <_free_r+0x1bc>)
  408c06:	f027 0301 	bic.w	r3, r7, #1
  408c0a:	f1a5 0408 	sub.w	r4, r5, #8
  408c0e:	18e2      	adds	r2, r4, r3
  408c10:	688e      	ldr	r6, [r1, #8]
  408c12:	6850      	ldr	r0, [r2, #4]
  408c14:	42b2      	cmp	r2, r6
  408c16:	f020 0003 	bic.w	r0, r0, #3
  408c1a:	d05e      	beq.n	408cda <_free_r+0xea>
  408c1c:	07fe      	lsls	r6, r7, #31
  408c1e:	6050      	str	r0, [r2, #4]
  408c20:	d40b      	bmi.n	408c3a <_free_r+0x4a>
  408c22:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408c26:	1be4      	subs	r4, r4, r7
  408c28:	f101 0e08 	add.w	lr, r1, #8
  408c2c:	68a5      	ldr	r5, [r4, #8]
  408c2e:	4575      	cmp	r5, lr
  408c30:	443b      	add	r3, r7
  408c32:	d06d      	beq.n	408d10 <_free_r+0x120>
  408c34:	68e7      	ldr	r7, [r4, #12]
  408c36:	60ef      	str	r7, [r5, #12]
  408c38:	60bd      	str	r5, [r7, #8]
  408c3a:	1815      	adds	r5, r2, r0
  408c3c:	686d      	ldr	r5, [r5, #4]
  408c3e:	07ed      	lsls	r5, r5, #31
  408c40:	d53e      	bpl.n	408cc0 <_free_r+0xd0>
  408c42:	f043 0201 	orr.w	r2, r3, #1
  408c46:	6062      	str	r2, [r4, #4]
  408c48:	50e3      	str	r3, [r4, r3]
  408c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c4e:	d217      	bcs.n	408c80 <_free_r+0x90>
  408c50:	08db      	lsrs	r3, r3, #3
  408c52:	1c58      	adds	r0, r3, #1
  408c54:	109a      	asrs	r2, r3, #2
  408c56:	684d      	ldr	r5, [r1, #4]
  408c58:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408c5c:	60a7      	str	r7, [r4, #8]
  408c5e:	2301      	movs	r3, #1
  408c60:	4093      	lsls	r3, r2
  408c62:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408c66:	432b      	orrs	r3, r5
  408c68:	3a08      	subs	r2, #8
  408c6a:	60e2      	str	r2, [r4, #12]
  408c6c:	604b      	str	r3, [r1, #4]
  408c6e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408c72:	60fc      	str	r4, [r7, #12]
  408c74:	4640      	mov	r0, r8
  408c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408c7a:	f7fb be5f 	b.w	40493c <__malloc_unlock>
  408c7e:	4770      	bx	lr
  408c80:	0a5a      	lsrs	r2, r3, #9
  408c82:	2a04      	cmp	r2, #4
  408c84:	d852      	bhi.n	408d2c <_free_r+0x13c>
  408c86:	099a      	lsrs	r2, r3, #6
  408c88:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408c8c:	00ff      	lsls	r7, r7, #3
  408c8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408c92:	19c8      	adds	r0, r1, r7
  408c94:	59ca      	ldr	r2, [r1, r7]
  408c96:	3808      	subs	r0, #8
  408c98:	4290      	cmp	r0, r2
  408c9a:	d04f      	beq.n	408d3c <_free_r+0x14c>
  408c9c:	6851      	ldr	r1, [r2, #4]
  408c9e:	f021 0103 	bic.w	r1, r1, #3
  408ca2:	428b      	cmp	r3, r1
  408ca4:	d232      	bcs.n	408d0c <_free_r+0x11c>
  408ca6:	6892      	ldr	r2, [r2, #8]
  408ca8:	4290      	cmp	r0, r2
  408caa:	d1f7      	bne.n	408c9c <_free_r+0xac>
  408cac:	68c3      	ldr	r3, [r0, #12]
  408cae:	60a0      	str	r0, [r4, #8]
  408cb0:	60e3      	str	r3, [r4, #12]
  408cb2:	609c      	str	r4, [r3, #8]
  408cb4:	60c4      	str	r4, [r0, #12]
  408cb6:	4640      	mov	r0, r8
  408cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408cbc:	f7fb be3e 	b.w	40493c <__malloc_unlock>
  408cc0:	6895      	ldr	r5, [r2, #8]
  408cc2:	4f3b      	ldr	r7, [pc, #236]	; (408db0 <_free_r+0x1c0>)
  408cc4:	42bd      	cmp	r5, r7
  408cc6:	4403      	add	r3, r0
  408cc8:	d040      	beq.n	408d4c <_free_r+0x15c>
  408cca:	68d0      	ldr	r0, [r2, #12]
  408ccc:	60e8      	str	r0, [r5, #12]
  408cce:	f043 0201 	orr.w	r2, r3, #1
  408cd2:	6085      	str	r5, [r0, #8]
  408cd4:	6062      	str	r2, [r4, #4]
  408cd6:	50e3      	str	r3, [r4, r3]
  408cd8:	e7b7      	b.n	408c4a <_free_r+0x5a>
  408cda:	07ff      	lsls	r7, r7, #31
  408cdc:	4403      	add	r3, r0
  408cde:	d407      	bmi.n	408cf0 <_free_r+0x100>
  408ce0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408ce4:	1aa4      	subs	r4, r4, r2
  408ce6:	4413      	add	r3, r2
  408ce8:	68a0      	ldr	r0, [r4, #8]
  408cea:	68e2      	ldr	r2, [r4, #12]
  408cec:	60c2      	str	r2, [r0, #12]
  408cee:	6090      	str	r0, [r2, #8]
  408cf0:	4a30      	ldr	r2, [pc, #192]	; (408db4 <_free_r+0x1c4>)
  408cf2:	6812      	ldr	r2, [r2, #0]
  408cf4:	f043 0001 	orr.w	r0, r3, #1
  408cf8:	4293      	cmp	r3, r2
  408cfa:	6060      	str	r0, [r4, #4]
  408cfc:	608c      	str	r4, [r1, #8]
  408cfe:	d3b9      	bcc.n	408c74 <_free_r+0x84>
  408d00:	4b2d      	ldr	r3, [pc, #180]	; (408db8 <_free_r+0x1c8>)
  408d02:	4640      	mov	r0, r8
  408d04:	6819      	ldr	r1, [r3, #0]
  408d06:	f7ff ff23 	bl	408b50 <_malloc_trim_r>
  408d0a:	e7b3      	b.n	408c74 <_free_r+0x84>
  408d0c:	4610      	mov	r0, r2
  408d0e:	e7cd      	b.n	408cac <_free_r+0xbc>
  408d10:	1811      	adds	r1, r2, r0
  408d12:	6849      	ldr	r1, [r1, #4]
  408d14:	07c9      	lsls	r1, r1, #31
  408d16:	d444      	bmi.n	408da2 <_free_r+0x1b2>
  408d18:	6891      	ldr	r1, [r2, #8]
  408d1a:	68d2      	ldr	r2, [r2, #12]
  408d1c:	60ca      	str	r2, [r1, #12]
  408d1e:	4403      	add	r3, r0
  408d20:	f043 0001 	orr.w	r0, r3, #1
  408d24:	6091      	str	r1, [r2, #8]
  408d26:	6060      	str	r0, [r4, #4]
  408d28:	50e3      	str	r3, [r4, r3]
  408d2a:	e7a3      	b.n	408c74 <_free_r+0x84>
  408d2c:	2a14      	cmp	r2, #20
  408d2e:	d816      	bhi.n	408d5e <_free_r+0x16e>
  408d30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408d34:	00ff      	lsls	r7, r7, #3
  408d36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408d3a:	e7aa      	b.n	408c92 <_free_r+0xa2>
  408d3c:	10aa      	asrs	r2, r5, #2
  408d3e:	2301      	movs	r3, #1
  408d40:	684d      	ldr	r5, [r1, #4]
  408d42:	4093      	lsls	r3, r2
  408d44:	432b      	orrs	r3, r5
  408d46:	604b      	str	r3, [r1, #4]
  408d48:	4603      	mov	r3, r0
  408d4a:	e7b0      	b.n	408cae <_free_r+0xbe>
  408d4c:	f043 0201 	orr.w	r2, r3, #1
  408d50:	614c      	str	r4, [r1, #20]
  408d52:	610c      	str	r4, [r1, #16]
  408d54:	60e5      	str	r5, [r4, #12]
  408d56:	60a5      	str	r5, [r4, #8]
  408d58:	6062      	str	r2, [r4, #4]
  408d5a:	50e3      	str	r3, [r4, r3]
  408d5c:	e78a      	b.n	408c74 <_free_r+0x84>
  408d5e:	2a54      	cmp	r2, #84	; 0x54
  408d60:	d806      	bhi.n	408d70 <_free_r+0x180>
  408d62:	0b1a      	lsrs	r2, r3, #12
  408d64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408d68:	00ff      	lsls	r7, r7, #3
  408d6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408d6e:	e790      	b.n	408c92 <_free_r+0xa2>
  408d70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408d74:	d806      	bhi.n	408d84 <_free_r+0x194>
  408d76:	0bda      	lsrs	r2, r3, #15
  408d78:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408d7c:	00ff      	lsls	r7, r7, #3
  408d7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408d82:	e786      	b.n	408c92 <_free_r+0xa2>
  408d84:	f240 5054 	movw	r0, #1364	; 0x554
  408d88:	4282      	cmp	r2, r0
  408d8a:	d806      	bhi.n	408d9a <_free_r+0x1aa>
  408d8c:	0c9a      	lsrs	r2, r3, #18
  408d8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408d92:	00ff      	lsls	r7, r7, #3
  408d94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408d98:	e77b      	b.n	408c92 <_free_r+0xa2>
  408d9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408d9e:	257e      	movs	r5, #126	; 0x7e
  408da0:	e777      	b.n	408c92 <_free_r+0xa2>
  408da2:	f043 0101 	orr.w	r1, r3, #1
  408da6:	6061      	str	r1, [r4, #4]
  408da8:	6013      	str	r3, [r2, #0]
  408daa:	e763      	b.n	408c74 <_free_r+0x84>
  408dac:	20400458 	.word	0x20400458
  408db0:	20400460 	.word	0x20400460
  408db4:	20400864 	.word	0x20400864
  408db8:	20400df4 	.word	0x20400df4

00408dbc <__sfvwrite_r>:
  408dbc:	6893      	ldr	r3, [r2, #8]
  408dbe:	2b00      	cmp	r3, #0
  408dc0:	d073      	beq.n	408eaa <__sfvwrite_r+0xee>
  408dc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dc6:	898b      	ldrh	r3, [r1, #12]
  408dc8:	b083      	sub	sp, #12
  408dca:	460c      	mov	r4, r1
  408dcc:	0719      	lsls	r1, r3, #28
  408dce:	9000      	str	r0, [sp, #0]
  408dd0:	4616      	mov	r6, r2
  408dd2:	d526      	bpl.n	408e22 <__sfvwrite_r+0x66>
  408dd4:	6922      	ldr	r2, [r4, #16]
  408dd6:	b322      	cbz	r2, 408e22 <__sfvwrite_r+0x66>
  408dd8:	f013 0002 	ands.w	r0, r3, #2
  408ddc:	6835      	ldr	r5, [r6, #0]
  408dde:	d02c      	beq.n	408e3a <__sfvwrite_r+0x7e>
  408de0:	f04f 0900 	mov.w	r9, #0
  408de4:	4fb0      	ldr	r7, [pc, #704]	; (4090a8 <__sfvwrite_r+0x2ec>)
  408de6:	46c8      	mov	r8, r9
  408de8:	46b2      	mov	sl, r6
  408dea:	45b8      	cmp	r8, r7
  408dec:	4643      	mov	r3, r8
  408dee:	464a      	mov	r2, r9
  408df0:	bf28      	it	cs
  408df2:	463b      	movcs	r3, r7
  408df4:	9800      	ldr	r0, [sp, #0]
  408df6:	f1b8 0f00 	cmp.w	r8, #0
  408dfa:	d050      	beq.n	408e9e <__sfvwrite_r+0xe2>
  408dfc:	69e1      	ldr	r1, [r4, #28]
  408dfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408e00:	47b0      	blx	r6
  408e02:	2800      	cmp	r0, #0
  408e04:	dd58      	ble.n	408eb8 <__sfvwrite_r+0xfc>
  408e06:	f8da 3008 	ldr.w	r3, [sl, #8]
  408e0a:	1a1b      	subs	r3, r3, r0
  408e0c:	4481      	add	r9, r0
  408e0e:	eba8 0800 	sub.w	r8, r8, r0
  408e12:	f8ca 3008 	str.w	r3, [sl, #8]
  408e16:	2b00      	cmp	r3, #0
  408e18:	d1e7      	bne.n	408dea <__sfvwrite_r+0x2e>
  408e1a:	2000      	movs	r0, #0
  408e1c:	b003      	add	sp, #12
  408e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e22:	4621      	mov	r1, r4
  408e24:	9800      	ldr	r0, [sp, #0]
  408e26:	f7fe fd15 	bl	407854 <__swsetup_r>
  408e2a:	2800      	cmp	r0, #0
  408e2c:	f040 8133 	bne.w	409096 <__sfvwrite_r+0x2da>
  408e30:	89a3      	ldrh	r3, [r4, #12]
  408e32:	6835      	ldr	r5, [r6, #0]
  408e34:	f013 0002 	ands.w	r0, r3, #2
  408e38:	d1d2      	bne.n	408de0 <__sfvwrite_r+0x24>
  408e3a:	f013 0901 	ands.w	r9, r3, #1
  408e3e:	d145      	bne.n	408ecc <__sfvwrite_r+0x110>
  408e40:	464f      	mov	r7, r9
  408e42:	9601      	str	r6, [sp, #4]
  408e44:	b337      	cbz	r7, 408e94 <__sfvwrite_r+0xd8>
  408e46:	059a      	lsls	r2, r3, #22
  408e48:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408e4c:	f140 8083 	bpl.w	408f56 <__sfvwrite_r+0x19a>
  408e50:	4547      	cmp	r7, r8
  408e52:	46c3      	mov	fp, r8
  408e54:	f0c0 80ab 	bcc.w	408fae <__sfvwrite_r+0x1f2>
  408e58:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408e5c:	f040 80ac 	bne.w	408fb8 <__sfvwrite_r+0x1fc>
  408e60:	6820      	ldr	r0, [r4, #0]
  408e62:	46ba      	mov	sl, r7
  408e64:	465a      	mov	r2, fp
  408e66:	4649      	mov	r1, r9
  408e68:	f000 fa2a 	bl	4092c0 <memmove>
  408e6c:	68a2      	ldr	r2, [r4, #8]
  408e6e:	6823      	ldr	r3, [r4, #0]
  408e70:	eba2 0208 	sub.w	r2, r2, r8
  408e74:	445b      	add	r3, fp
  408e76:	60a2      	str	r2, [r4, #8]
  408e78:	6023      	str	r3, [r4, #0]
  408e7a:	9a01      	ldr	r2, [sp, #4]
  408e7c:	6893      	ldr	r3, [r2, #8]
  408e7e:	eba3 030a 	sub.w	r3, r3, sl
  408e82:	44d1      	add	r9, sl
  408e84:	eba7 070a 	sub.w	r7, r7, sl
  408e88:	6093      	str	r3, [r2, #8]
  408e8a:	2b00      	cmp	r3, #0
  408e8c:	d0c5      	beq.n	408e1a <__sfvwrite_r+0x5e>
  408e8e:	89a3      	ldrh	r3, [r4, #12]
  408e90:	2f00      	cmp	r7, #0
  408e92:	d1d8      	bne.n	408e46 <__sfvwrite_r+0x8a>
  408e94:	f8d5 9000 	ldr.w	r9, [r5]
  408e98:	686f      	ldr	r7, [r5, #4]
  408e9a:	3508      	adds	r5, #8
  408e9c:	e7d2      	b.n	408e44 <__sfvwrite_r+0x88>
  408e9e:	f8d5 9000 	ldr.w	r9, [r5]
  408ea2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408ea6:	3508      	adds	r5, #8
  408ea8:	e79f      	b.n	408dea <__sfvwrite_r+0x2e>
  408eaa:	2000      	movs	r0, #0
  408eac:	4770      	bx	lr
  408eae:	4621      	mov	r1, r4
  408eb0:	9800      	ldr	r0, [sp, #0]
  408eb2:	f7ff fda3 	bl	4089fc <_fflush_r>
  408eb6:	b370      	cbz	r0, 408f16 <__sfvwrite_r+0x15a>
  408eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ec0:	f04f 30ff 	mov.w	r0, #4294967295
  408ec4:	81a3      	strh	r3, [r4, #12]
  408ec6:	b003      	add	sp, #12
  408ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ecc:	4681      	mov	r9, r0
  408ece:	4633      	mov	r3, r6
  408ed0:	464e      	mov	r6, r9
  408ed2:	46a8      	mov	r8, r5
  408ed4:	469a      	mov	sl, r3
  408ed6:	464d      	mov	r5, r9
  408ed8:	b34e      	cbz	r6, 408f2e <__sfvwrite_r+0x172>
  408eda:	b380      	cbz	r0, 408f3e <__sfvwrite_r+0x182>
  408edc:	6820      	ldr	r0, [r4, #0]
  408ede:	6923      	ldr	r3, [r4, #16]
  408ee0:	6962      	ldr	r2, [r4, #20]
  408ee2:	45b1      	cmp	r9, r6
  408ee4:	46cb      	mov	fp, r9
  408ee6:	bf28      	it	cs
  408ee8:	46b3      	movcs	fp, r6
  408eea:	4298      	cmp	r0, r3
  408eec:	465f      	mov	r7, fp
  408eee:	d904      	bls.n	408efa <__sfvwrite_r+0x13e>
  408ef0:	68a3      	ldr	r3, [r4, #8]
  408ef2:	4413      	add	r3, r2
  408ef4:	459b      	cmp	fp, r3
  408ef6:	f300 80a6 	bgt.w	409046 <__sfvwrite_r+0x28a>
  408efa:	4593      	cmp	fp, r2
  408efc:	db4b      	blt.n	408f96 <__sfvwrite_r+0x1da>
  408efe:	4613      	mov	r3, r2
  408f00:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408f02:	69e1      	ldr	r1, [r4, #28]
  408f04:	9800      	ldr	r0, [sp, #0]
  408f06:	462a      	mov	r2, r5
  408f08:	47b8      	blx	r7
  408f0a:	1e07      	subs	r7, r0, #0
  408f0c:	ddd4      	ble.n	408eb8 <__sfvwrite_r+0xfc>
  408f0e:	ebb9 0907 	subs.w	r9, r9, r7
  408f12:	d0cc      	beq.n	408eae <__sfvwrite_r+0xf2>
  408f14:	2001      	movs	r0, #1
  408f16:	f8da 3008 	ldr.w	r3, [sl, #8]
  408f1a:	1bdb      	subs	r3, r3, r7
  408f1c:	443d      	add	r5, r7
  408f1e:	1bf6      	subs	r6, r6, r7
  408f20:	f8ca 3008 	str.w	r3, [sl, #8]
  408f24:	2b00      	cmp	r3, #0
  408f26:	f43f af78 	beq.w	408e1a <__sfvwrite_r+0x5e>
  408f2a:	2e00      	cmp	r6, #0
  408f2c:	d1d5      	bne.n	408eda <__sfvwrite_r+0x11e>
  408f2e:	f108 0308 	add.w	r3, r8, #8
  408f32:	e913 0060 	ldmdb	r3, {r5, r6}
  408f36:	4698      	mov	r8, r3
  408f38:	3308      	adds	r3, #8
  408f3a:	2e00      	cmp	r6, #0
  408f3c:	d0f9      	beq.n	408f32 <__sfvwrite_r+0x176>
  408f3e:	4632      	mov	r2, r6
  408f40:	210a      	movs	r1, #10
  408f42:	4628      	mov	r0, r5
  408f44:	f000 f96c 	bl	409220 <memchr>
  408f48:	2800      	cmp	r0, #0
  408f4a:	f000 80a1 	beq.w	409090 <__sfvwrite_r+0x2d4>
  408f4e:	3001      	adds	r0, #1
  408f50:	eba0 0905 	sub.w	r9, r0, r5
  408f54:	e7c2      	b.n	408edc <__sfvwrite_r+0x120>
  408f56:	6820      	ldr	r0, [r4, #0]
  408f58:	6923      	ldr	r3, [r4, #16]
  408f5a:	4298      	cmp	r0, r3
  408f5c:	d802      	bhi.n	408f64 <__sfvwrite_r+0x1a8>
  408f5e:	6963      	ldr	r3, [r4, #20]
  408f60:	429f      	cmp	r7, r3
  408f62:	d25d      	bcs.n	409020 <__sfvwrite_r+0x264>
  408f64:	45b8      	cmp	r8, r7
  408f66:	bf28      	it	cs
  408f68:	46b8      	movcs	r8, r7
  408f6a:	4642      	mov	r2, r8
  408f6c:	4649      	mov	r1, r9
  408f6e:	f000 f9a7 	bl	4092c0 <memmove>
  408f72:	68a3      	ldr	r3, [r4, #8]
  408f74:	6822      	ldr	r2, [r4, #0]
  408f76:	eba3 0308 	sub.w	r3, r3, r8
  408f7a:	4442      	add	r2, r8
  408f7c:	60a3      	str	r3, [r4, #8]
  408f7e:	6022      	str	r2, [r4, #0]
  408f80:	b10b      	cbz	r3, 408f86 <__sfvwrite_r+0x1ca>
  408f82:	46c2      	mov	sl, r8
  408f84:	e779      	b.n	408e7a <__sfvwrite_r+0xbe>
  408f86:	4621      	mov	r1, r4
  408f88:	9800      	ldr	r0, [sp, #0]
  408f8a:	f7ff fd37 	bl	4089fc <_fflush_r>
  408f8e:	2800      	cmp	r0, #0
  408f90:	d192      	bne.n	408eb8 <__sfvwrite_r+0xfc>
  408f92:	46c2      	mov	sl, r8
  408f94:	e771      	b.n	408e7a <__sfvwrite_r+0xbe>
  408f96:	465a      	mov	r2, fp
  408f98:	4629      	mov	r1, r5
  408f9a:	f000 f991 	bl	4092c0 <memmove>
  408f9e:	68a2      	ldr	r2, [r4, #8]
  408fa0:	6823      	ldr	r3, [r4, #0]
  408fa2:	eba2 020b 	sub.w	r2, r2, fp
  408fa6:	445b      	add	r3, fp
  408fa8:	60a2      	str	r2, [r4, #8]
  408faa:	6023      	str	r3, [r4, #0]
  408fac:	e7af      	b.n	408f0e <__sfvwrite_r+0x152>
  408fae:	6820      	ldr	r0, [r4, #0]
  408fb0:	46b8      	mov	r8, r7
  408fb2:	46ba      	mov	sl, r7
  408fb4:	46bb      	mov	fp, r7
  408fb6:	e755      	b.n	408e64 <__sfvwrite_r+0xa8>
  408fb8:	6962      	ldr	r2, [r4, #20]
  408fba:	6820      	ldr	r0, [r4, #0]
  408fbc:	6921      	ldr	r1, [r4, #16]
  408fbe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408fc2:	eba0 0a01 	sub.w	sl, r0, r1
  408fc6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408fca:	f10a 0001 	add.w	r0, sl, #1
  408fce:	ea4f 0868 	mov.w	r8, r8, asr #1
  408fd2:	4438      	add	r0, r7
  408fd4:	4540      	cmp	r0, r8
  408fd6:	4642      	mov	r2, r8
  408fd8:	bf84      	itt	hi
  408fda:	4680      	movhi	r8, r0
  408fdc:	4642      	movhi	r2, r8
  408fde:	055b      	lsls	r3, r3, #21
  408fe0:	d544      	bpl.n	40906c <__sfvwrite_r+0x2b0>
  408fe2:	4611      	mov	r1, r2
  408fe4:	9800      	ldr	r0, [sp, #0]
  408fe6:	f7fb f90b 	bl	404200 <_malloc_r>
  408fea:	4683      	mov	fp, r0
  408fec:	2800      	cmp	r0, #0
  408fee:	d055      	beq.n	40909c <__sfvwrite_r+0x2e0>
  408ff0:	4652      	mov	r2, sl
  408ff2:	6921      	ldr	r1, [r4, #16]
  408ff4:	f7fb fbb4 	bl	404760 <memcpy>
  408ff8:	89a3      	ldrh	r3, [r4, #12]
  408ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409002:	81a3      	strh	r3, [r4, #12]
  409004:	eb0b 000a 	add.w	r0, fp, sl
  409008:	eba8 030a 	sub.w	r3, r8, sl
  40900c:	f8c4 b010 	str.w	fp, [r4, #16]
  409010:	f8c4 8014 	str.w	r8, [r4, #20]
  409014:	6020      	str	r0, [r4, #0]
  409016:	60a3      	str	r3, [r4, #8]
  409018:	46b8      	mov	r8, r7
  40901a:	46ba      	mov	sl, r7
  40901c:	46bb      	mov	fp, r7
  40901e:	e721      	b.n	408e64 <__sfvwrite_r+0xa8>
  409020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  409024:	42b9      	cmp	r1, r7
  409026:	bf28      	it	cs
  409028:	4639      	movcs	r1, r7
  40902a:	464a      	mov	r2, r9
  40902c:	fb91 f1f3 	sdiv	r1, r1, r3
  409030:	9800      	ldr	r0, [sp, #0]
  409032:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409034:	fb03 f301 	mul.w	r3, r3, r1
  409038:	69e1      	ldr	r1, [r4, #28]
  40903a:	47b0      	blx	r6
  40903c:	f1b0 0a00 	subs.w	sl, r0, #0
  409040:	f73f af1b 	bgt.w	408e7a <__sfvwrite_r+0xbe>
  409044:	e738      	b.n	408eb8 <__sfvwrite_r+0xfc>
  409046:	461a      	mov	r2, r3
  409048:	4629      	mov	r1, r5
  40904a:	9301      	str	r3, [sp, #4]
  40904c:	f000 f938 	bl	4092c0 <memmove>
  409050:	6822      	ldr	r2, [r4, #0]
  409052:	9b01      	ldr	r3, [sp, #4]
  409054:	9800      	ldr	r0, [sp, #0]
  409056:	441a      	add	r2, r3
  409058:	6022      	str	r2, [r4, #0]
  40905a:	4621      	mov	r1, r4
  40905c:	f7ff fcce 	bl	4089fc <_fflush_r>
  409060:	9b01      	ldr	r3, [sp, #4]
  409062:	2800      	cmp	r0, #0
  409064:	f47f af28 	bne.w	408eb8 <__sfvwrite_r+0xfc>
  409068:	461f      	mov	r7, r3
  40906a:	e750      	b.n	408f0e <__sfvwrite_r+0x152>
  40906c:	9800      	ldr	r0, [sp, #0]
  40906e:	f000 fc85 	bl	40997c <_realloc_r>
  409072:	4683      	mov	fp, r0
  409074:	2800      	cmp	r0, #0
  409076:	d1c5      	bne.n	409004 <__sfvwrite_r+0x248>
  409078:	9d00      	ldr	r5, [sp, #0]
  40907a:	6921      	ldr	r1, [r4, #16]
  40907c:	4628      	mov	r0, r5
  40907e:	f7ff fdb7 	bl	408bf0 <_free_r>
  409082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409086:	220c      	movs	r2, #12
  409088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40908c:	602a      	str	r2, [r5, #0]
  40908e:	e715      	b.n	408ebc <__sfvwrite_r+0x100>
  409090:	f106 0901 	add.w	r9, r6, #1
  409094:	e722      	b.n	408edc <__sfvwrite_r+0x120>
  409096:	f04f 30ff 	mov.w	r0, #4294967295
  40909a:	e6bf      	b.n	408e1c <__sfvwrite_r+0x60>
  40909c:	9a00      	ldr	r2, [sp, #0]
  40909e:	230c      	movs	r3, #12
  4090a0:	6013      	str	r3, [r2, #0]
  4090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4090a6:	e709      	b.n	408ebc <__sfvwrite_r+0x100>
  4090a8:	7ffffc00 	.word	0x7ffffc00

004090ac <_fwalk_reent>:
  4090ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4090b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4090b4:	d01f      	beq.n	4090f6 <_fwalk_reent+0x4a>
  4090b6:	4688      	mov	r8, r1
  4090b8:	4606      	mov	r6, r0
  4090ba:	f04f 0900 	mov.w	r9, #0
  4090be:	687d      	ldr	r5, [r7, #4]
  4090c0:	68bc      	ldr	r4, [r7, #8]
  4090c2:	3d01      	subs	r5, #1
  4090c4:	d411      	bmi.n	4090ea <_fwalk_reent+0x3e>
  4090c6:	89a3      	ldrh	r3, [r4, #12]
  4090c8:	2b01      	cmp	r3, #1
  4090ca:	f105 35ff 	add.w	r5, r5, #4294967295
  4090ce:	d908      	bls.n	4090e2 <_fwalk_reent+0x36>
  4090d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4090d4:	3301      	adds	r3, #1
  4090d6:	4621      	mov	r1, r4
  4090d8:	4630      	mov	r0, r6
  4090da:	d002      	beq.n	4090e2 <_fwalk_reent+0x36>
  4090dc:	47c0      	blx	r8
  4090de:	ea49 0900 	orr.w	r9, r9, r0
  4090e2:	1c6b      	adds	r3, r5, #1
  4090e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4090e8:	d1ed      	bne.n	4090c6 <_fwalk_reent+0x1a>
  4090ea:	683f      	ldr	r7, [r7, #0]
  4090ec:	2f00      	cmp	r7, #0
  4090ee:	d1e6      	bne.n	4090be <_fwalk_reent+0x12>
  4090f0:	4648      	mov	r0, r9
  4090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090f6:	46b9      	mov	r9, r7
  4090f8:	4648      	mov	r0, r9
  4090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090fe:	bf00      	nop

00409100 <_localeconv_r>:
  409100:	4a04      	ldr	r2, [pc, #16]	; (409114 <_localeconv_r+0x14>)
  409102:	4b05      	ldr	r3, [pc, #20]	; (409118 <_localeconv_r+0x18>)
  409104:	6812      	ldr	r2, [r2, #0]
  409106:	6b50      	ldr	r0, [r2, #52]	; 0x34
  409108:	2800      	cmp	r0, #0
  40910a:	bf08      	it	eq
  40910c:	4618      	moveq	r0, r3
  40910e:	30f0      	adds	r0, #240	; 0xf0
  409110:	4770      	bx	lr
  409112:	bf00      	nop
  409114:	20400028 	.word	0x20400028
  409118:	2040086c 	.word	0x2040086c

0040911c <__retarget_lock_init_recursive>:
  40911c:	4770      	bx	lr
  40911e:	bf00      	nop

00409120 <__retarget_lock_close_recursive>:
  409120:	4770      	bx	lr
  409122:	bf00      	nop

00409124 <__retarget_lock_acquire_recursive>:
  409124:	4770      	bx	lr
  409126:	bf00      	nop

00409128 <__retarget_lock_release_recursive>:
  409128:	4770      	bx	lr
  40912a:	bf00      	nop

0040912c <__swhatbuf_r>:
  40912c:	b570      	push	{r4, r5, r6, lr}
  40912e:	460c      	mov	r4, r1
  409130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409134:	2900      	cmp	r1, #0
  409136:	b090      	sub	sp, #64	; 0x40
  409138:	4615      	mov	r5, r2
  40913a:	461e      	mov	r6, r3
  40913c:	db14      	blt.n	409168 <__swhatbuf_r+0x3c>
  40913e:	aa01      	add	r2, sp, #4
  409140:	f001 f86e 	bl	40a220 <_fstat_r>
  409144:	2800      	cmp	r0, #0
  409146:	db0f      	blt.n	409168 <__swhatbuf_r+0x3c>
  409148:	9a02      	ldr	r2, [sp, #8]
  40914a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40914e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  409152:	fab2 f282 	clz	r2, r2
  409156:	0952      	lsrs	r2, r2, #5
  409158:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40915c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409160:	6032      	str	r2, [r6, #0]
  409162:	602b      	str	r3, [r5, #0]
  409164:	b010      	add	sp, #64	; 0x40
  409166:	bd70      	pop	{r4, r5, r6, pc}
  409168:	89a2      	ldrh	r2, [r4, #12]
  40916a:	2300      	movs	r3, #0
  40916c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409170:	6033      	str	r3, [r6, #0]
  409172:	d004      	beq.n	40917e <__swhatbuf_r+0x52>
  409174:	2240      	movs	r2, #64	; 0x40
  409176:	4618      	mov	r0, r3
  409178:	602a      	str	r2, [r5, #0]
  40917a:	b010      	add	sp, #64	; 0x40
  40917c:	bd70      	pop	{r4, r5, r6, pc}
  40917e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409182:	602b      	str	r3, [r5, #0]
  409184:	b010      	add	sp, #64	; 0x40
  409186:	bd70      	pop	{r4, r5, r6, pc}

00409188 <__smakebuf_r>:
  409188:	898a      	ldrh	r2, [r1, #12]
  40918a:	0792      	lsls	r2, r2, #30
  40918c:	460b      	mov	r3, r1
  40918e:	d506      	bpl.n	40919e <__smakebuf_r+0x16>
  409190:	f101 0243 	add.w	r2, r1, #67	; 0x43
  409194:	2101      	movs	r1, #1
  409196:	601a      	str	r2, [r3, #0]
  409198:	611a      	str	r2, [r3, #16]
  40919a:	6159      	str	r1, [r3, #20]
  40919c:	4770      	bx	lr
  40919e:	b5f0      	push	{r4, r5, r6, r7, lr}
  4091a0:	b083      	sub	sp, #12
  4091a2:	ab01      	add	r3, sp, #4
  4091a4:	466a      	mov	r2, sp
  4091a6:	460c      	mov	r4, r1
  4091a8:	4606      	mov	r6, r0
  4091aa:	f7ff ffbf 	bl	40912c <__swhatbuf_r>
  4091ae:	9900      	ldr	r1, [sp, #0]
  4091b0:	4605      	mov	r5, r0
  4091b2:	4630      	mov	r0, r6
  4091b4:	f7fb f824 	bl	404200 <_malloc_r>
  4091b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4091bc:	b1d8      	cbz	r0, 4091f6 <__smakebuf_r+0x6e>
  4091be:	9a01      	ldr	r2, [sp, #4]
  4091c0:	4f15      	ldr	r7, [pc, #84]	; (409218 <__smakebuf_r+0x90>)
  4091c2:	9900      	ldr	r1, [sp, #0]
  4091c4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4091c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4091ca:	81a3      	strh	r3, [r4, #12]
  4091cc:	6020      	str	r0, [r4, #0]
  4091ce:	6120      	str	r0, [r4, #16]
  4091d0:	6161      	str	r1, [r4, #20]
  4091d2:	b91a      	cbnz	r2, 4091dc <__smakebuf_r+0x54>
  4091d4:	432b      	orrs	r3, r5
  4091d6:	81a3      	strh	r3, [r4, #12]
  4091d8:	b003      	add	sp, #12
  4091da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4091dc:	4630      	mov	r0, r6
  4091de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4091e2:	f001 f831 	bl	40a248 <_isatty_r>
  4091e6:	b1a0      	cbz	r0, 409212 <__smakebuf_r+0x8a>
  4091e8:	89a3      	ldrh	r3, [r4, #12]
  4091ea:	f023 0303 	bic.w	r3, r3, #3
  4091ee:	f043 0301 	orr.w	r3, r3, #1
  4091f2:	b21b      	sxth	r3, r3
  4091f4:	e7ee      	b.n	4091d4 <__smakebuf_r+0x4c>
  4091f6:	059a      	lsls	r2, r3, #22
  4091f8:	d4ee      	bmi.n	4091d8 <__smakebuf_r+0x50>
  4091fa:	f023 0303 	bic.w	r3, r3, #3
  4091fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
  409202:	f043 0302 	orr.w	r3, r3, #2
  409206:	2101      	movs	r1, #1
  409208:	81a3      	strh	r3, [r4, #12]
  40920a:	6022      	str	r2, [r4, #0]
  40920c:	6122      	str	r2, [r4, #16]
  40920e:	6161      	str	r1, [r4, #20]
  409210:	e7e2      	b.n	4091d8 <__smakebuf_r+0x50>
  409212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409216:	e7dd      	b.n	4091d4 <__smakebuf_r+0x4c>
  409218:	00408a51 	.word	0x00408a51
  40921c:	00000000 	.word	0x00000000

00409220 <memchr>:
  409220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409224:	2a10      	cmp	r2, #16
  409226:	db2b      	blt.n	409280 <memchr+0x60>
  409228:	f010 0f07 	tst.w	r0, #7
  40922c:	d008      	beq.n	409240 <memchr+0x20>
  40922e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409232:	3a01      	subs	r2, #1
  409234:	428b      	cmp	r3, r1
  409236:	d02d      	beq.n	409294 <memchr+0x74>
  409238:	f010 0f07 	tst.w	r0, #7
  40923c:	b342      	cbz	r2, 409290 <memchr+0x70>
  40923e:	d1f6      	bne.n	40922e <memchr+0xe>
  409240:	b4f0      	push	{r4, r5, r6, r7}
  409242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40924a:	f022 0407 	bic.w	r4, r2, #7
  40924e:	f07f 0700 	mvns.w	r7, #0
  409252:	2300      	movs	r3, #0
  409254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409258:	3c08      	subs	r4, #8
  40925a:	ea85 0501 	eor.w	r5, r5, r1
  40925e:	ea86 0601 	eor.w	r6, r6, r1
  409262:	fa85 f547 	uadd8	r5, r5, r7
  409266:	faa3 f587 	sel	r5, r3, r7
  40926a:	fa86 f647 	uadd8	r6, r6, r7
  40926e:	faa5 f687 	sel	r6, r5, r7
  409272:	b98e      	cbnz	r6, 409298 <memchr+0x78>
  409274:	d1ee      	bne.n	409254 <memchr+0x34>
  409276:	bcf0      	pop	{r4, r5, r6, r7}
  409278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40927c:	f002 0207 	and.w	r2, r2, #7
  409280:	b132      	cbz	r2, 409290 <memchr+0x70>
  409282:	f810 3b01 	ldrb.w	r3, [r0], #1
  409286:	3a01      	subs	r2, #1
  409288:	ea83 0301 	eor.w	r3, r3, r1
  40928c:	b113      	cbz	r3, 409294 <memchr+0x74>
  40928e:	d1f8      	bne.n	409282 <memchr+0x62>
  409290:	2000      	movs	r0, #0
  409292:	4770      	bx	lr
  409294:	3801      	subs	r0, #1
  409296:	4770      	bx	lr
  409298:	2d00      	cmp	r5, #0
  40929a:	bf06      	itte	eq
  40929c:	4635      	moveq	r5, r6
  40929e:	3803      	subeq	r0, #3
  4092a0:	3807      	subne	r0, #7
  4092a2:	f015 0f01 	tst.w	r5, #1
  4092a6:	d107      	bne.n	4092b8 <memchr+0x98>
  4092a8:	3001      	adds	r0, #1
  4092aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4092ae:	bf02      	ittt	eq
  4092b0:	3001      	addeq	r0, #1
  4092b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4092b6:	3001      	addeq	r0, #1
  4092b8:	bcf0      	pop	{r4, r5, r6, r7}
  4092ba:	3801      	subs	r0, #1
  4092bc:	4770      	bx	lr
  4092be:	bf00      	nop

004092c0 <memmove>:
  4092c0:	4288      	cmp	r0, r1
  4092c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4092c4:	d90d      	bls.n	4092e2 <memmove+0x22>
  4092c6:	188b      	adds	r3, r1, r2
  4092c8:	4298      	cmp	r0, r3
  4092ca:	d20a      	bcs.n	4092e2 <memmove+0x22>
  4092cc:	1884      	adds	r4, r0, r2
  4092ce:	2a00      	cmp	r2, #0
  4092d0:	d051      	beq.n	409376 <memmove+0xb6>
  4092d2:	4622      	mov	r2, r4
  4092d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4092d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4092dc:	4299      	cmp	r1, r3
  4092de:	d1f9      	bne.n	4092d4 <memmove+0x14>
  4092e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4092e2:	2a0f      	cmp	r2, #15
  4092e4:	d948      	bls.n	409378 <memmove+0xb8>
  4092e6:	ea41 0300 	orr.w	r3, r1, r0
  4092ea:	079b      	lsls	r3, r3, #30
  4092ec:	d146      	bne.n	40937c <memmove+0xbc>
  4092ee:	f100 0410 	add.w	r4, r0, #16
  4092f2:	f101 0310 	add.w	r3, r1, #16
  4092f6:	4615      	mov	r5, r2
  4092f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4092fc:	f844 6c10 	str.w	r6, [r4, #-16]
  409300:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409304:	f844 6c0c 	str.w	r6, [r4, #-12]
  409308:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40930c:	f844 6c08 	str.w	r6, [r4, #-8]
  409310:	3d10      	subs	r5, #16
  409312:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409316:	f844 6c04 	str.w	r6, [r4, #-4]
  40931a:	2d0f      	cmp	r5, #15
  40931c:	f103 0310 	add.w	r3, r3, #16
  409320:	f104 0410 	add.w	r4, r4, #16
  409324:	d8e8      	bhi.n	4092f8 <memmove+0x38>
  409326:	f1a2 0310 	sub.w	r3, r2, #16
  40932a:	f023 030f 	bic.w	r3, r3, #15
  40932e:	f002 0e0f 	and.w	lr, r2, #15
  409332:	3310      	adds	r3, #16
  409334:	f1be 0f03 	cmp.w	lr, #3
  409338:	4419      	add	r1, r3
  40933a:	4403      	add	r3, r0
  40933c:	d921      	bls.n	409382 <memmove+0xc2>
  40933e:	1f1e      	subs	r6, r3, #4
  409340:	460d      	mov	r5, r1
  409342:	4674      	mov	r4, lr
  409344:	3c04      	subs	r4, #4
  409346:	f855 7b04 	ldr.w	r7, [r5], #4
  40934a:	f846 7f04 	str.w	r7, [r6, #4]!
  40934e:	2c03      	cmp	r4, #3
  409350:	d8f8      	bhi.n	409344 <memmove+0x84>
  409352:	f1ae 0404 	sub.w	r4, lr, #4
  409356:	f024 0403 	bic.w	r4, r4, #3
  40935a:	3404      	adds	r4, #4
  40935c:	4421      	add	r1, r4
  40935e:	4423      	add	r3, r4
  409360:	f002 0203 	and.w	r2, r2, #3
  409364:	b162      	cbz	r2, 409380 <memmove+0xc0>
  409366:	3b01      	subs	r3, #1
  409368:	440a      	add	r2, r1
  40936a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40936e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409372:	428a      	cmp	r2, r1
  409374:	d1f9      	bne.n	40936a <memmove+0xaa>
  409376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409378:	4603      	mov	r3, r0
  40937a:	e7f3      	b.n	409364 <memmove+0xa4>
  40937c:	4603      	mov	r3, r0
  40937e:	e7f2      	b.n	409366 <memmove+0xa6>
  409380:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409382:	4672      	mov	r2, lr
  409384:	e7ee      	b.n	409364 <memmove+0xa4>
  409386:	bf00      	nop

00409388 <_Balloc>:
  409388:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40938a:	b570      	push	{r4, r5, r6, lr}
  40938c:	4605      	mov	r5, r0
  40938e:	460c      	mov	r4, r1
  409390:	b14b      	cbz	r3, 4093a6 <_Balloc+0x1e>
  409392:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409396:	b180      	cbz	r0, 4093ba <_Balloc+0x32>
  409398:	6802      	ldr	r2, [r0, #0]
  40939a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40939e:	2300      	movs	r3, #0
  4093a0:	6103      	str	r3, [r0, #16]
  4093a2:	60c3      	str	r3, [r0, #12]
  4093a4:	bd70      	pop	{r4, r5, r6, pc}
  4093a6:	2221      	movs	r2, #33	; 0x21
  4093a8:	2104      	movs	r1, #4
  4093aa:	f000 fe11 	bl	409fd0 <_calloc_r>
  4093ae:	64e8      	str	r0, [r5, #76]	; 0x4c
  4093b0:	4603      	mov	r3, r0
  4093b2:	2800      	cmp	r0, #0
  4093b4:	d1ed      	bne.n	409392 <_Balloc+0xa>
  4093b6:	2000      	movs	r0, #0
  4093b8:	bd70      	pop	{r4, r5, r6, pc}
  4093ba:	2101      	movs	r1, #1
  4093bc:	fa01 f604 	lsl.w	r6, r1, r4
  4093c0:	1d72      	adds	r2, r6, #5
  4093c2:	4628      	mov	r0, r5
  4093c4:	0092      	lsls	r2, r2, #2
  4093c6:	f000 fe03 	bl	409fd0 <_calloc_r>
  4093ca:	2800      	cmp	r0, #0
  4093cc:	d0f3      	beq.n	4093b6 <_Balloc+0x2e>
  4093ce:	6044      	str	r4, [r0, #4]
  4093d0:	6086      	str	r6, [r0, #8]
  4093d2:	e7e4      	b.n	40939e <_Balloc+0x16>

004093d4 <_Bfree>:
  4093d4:	b131      	cbz	r1, 4093e4 <_Bfree+0x10>
  4093d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4093d8:	684a      	ldr	r2, [r1, #4]
  4093da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4093de:	6008      	str	r0, [r1, #0]
  4093e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4093e4:	4770      	bx	lr
  4093e6:	bf00      	nop

004093e8 <__multadd>:
  4093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4093ea:	690c      	ldr	r4, [r1, #16]
  4093ec:	b083      	sub	sp, #12
  4093ee:	460d      	mov	r5, r1
  4093f0:	4606      	mov	r6, r0
  4093f2:	f101 0e14 	add.w	lr, r1, #20
  4093f6:	2700      	movs	r7, #0
  4093f8:	f8de 0000 	ldr.w	r0, [lr]
  4093fc:	b281      	uxth	r1, r0
  4093fe:	fb02 3301 	mla	r3, r2, r1, r3
  409402:	0c01      	lsrs	r1, r0, #16
  409404:	0c18      	lsrs	r0, r3, #16
  409406:	fb02 0101 	mla	r1, r2, r1, r0
  40940a:	b29b      	uxth	r3, r3
  40940c:	3701      	adds	r7, #1
  40940e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  409412:	42bc      	cmp	r4, r7
  409414:	f84e 3b04 	str.w	r3, [lr], #4
  409418:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40941c:	dcec      	bgt.n	4093f8 <__multadd+0x10>
  40941e:	b13b      	cbz	r3, 409430 <__multadd+0x48>
  409420:	68aa      	ldr	r2, [r5, #8]
  409422:	4294      	cmp	r4, r2
  409424:	da07      	bge.n	409436 <__multadd+0x4e>
  409426:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40942a:	3401      	adds	r4, #1
  40942c:	6153      	str	r3, [r2, #20]
  40942e:	612c      	str	r4, [r5, #16]
  409430:	4628      	mov	r0, r5
  409432:	b003      	add	sp, #12
  409434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409436:	6869      	ldr	r1, [r5, #4]
  409438:	9301      	str	r3, [sp, #4]
  40943a:	3101      	adds	r1, #1
  40943c:	4630      	mov	r0, r6
  40943e:	f7ff ffa3 	bl	409388 <_Balloc>
  409442:	692a      	ldr	r2, [r5, #16]
  409444:	3202      	adds	r2, #2
  409446:	f105 010c 	add.w	r1, r5, #12
  40944a:	4607      	mov	r7, r0
  40944c:	0092      	lsls	r2, r2, #2
  40944e:	300c      	adds	r0, #12
  409450:	f7fb f986 	bl	404760 <memcpy>
  409454:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409456:	6869      	ldr	r1, [r5, #4]
  409458:	9b01      	ldr	r3, [sp, #4]
  40945a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40945e:	6028      	str	r0, [r5, #0]
  409460:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409464:	463d      	mov	r5, r7
  409466:	e7de      	b.n	409426 <__multadd+0x3e>

00409468 <__hi0bits>:
  409468:	0c02      	lsrs	r2, r0, #16
  40946a:	0412      	lsls	r2, r2, #16
  40946c:	4603      	mov	r3, r0
  40946e:	b9b2      	cbnz	r2, 40949e <__hi0bits+0x36>
  409470:	0403      	lsls	r3, r0, #16
  409472:	2010      	movs	r0, #16
  409474:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409478:	bf04      	itt	eq
  40947a:	021b      	lsleq	r3, r3, #8
  40947c:	3008      	addeq	r0, #8
  40947e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409482:	bf04      	itt	eq
  409484:	011b      	lsleq	r3, r3, #4
  409486:	3004      	addeq	r0, #4
  409488:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40948c:	bf04      	itt	eq
  40948e:	009b      	lsleq	r3, r3, #2
  409490:	3002      	addeq	r0, #2
  409492:	2b00      	cmp	r3, #0
  409494:	db02      	blt.n	40949c <__hi0bits+0x34>
  409496:	005b      	lsls	r3, r3, #1
  409498:	d403      	bmi.n	4094a2 <__hi0bits+0x3a>
  40949a:	2020      	movs	r0, #32
  40949c:	4770      	bx	lr
  40949e:	2000      	movs	r0, #0
  4094a0:	e7e8      	b.n	409474 <__hi0bits+0xc>
  4094a2:	3001      	adds	r0, #1
  4094a4:	4770      	bx	lr
  4094a6:	bf00      	nop

004094a8 <__lo0bits>:
  4094a8:	6803      	ldr	r3, [r0, #0]
  4094aa:	f013 0207 	ands.w	r2, r3, #7
  4094ae:	4601      	mov	r1, r0
  4094b0:	d007      	beq.n	4094c2 <__lo0bits+0x1a>
  4094b2:	07da      	lsls	r2, r3, #31
  4094b4:	d421      	bmi.n	4094fa <__lo0bits+0x52>
  4094b6:	0798      	lsls	r0, r3, #30
  4094b8:	d421      	bmi.n	4094fe <__lo0bits+0x56>
  4094ba:	089b      	lsrs	r3, r3, #2
  4094bc:	600b      	str	r3, [r1, #0]
  4094be:	2002      	movs	r0, #2
  4094c0:	4770      	bx	lr
  4094c2:	b298      	uxth	r0, r3
  4094c4:	b198      	cbz	r0, 4094ee <__lo0bits+0x46>
  4094c6:	4610      	mov	r0, r2
  4094c8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4094cc:	bf04      	itt	eq
  4094ce:	0a1b      	lsreq	r3, r3, #8
  4094d0:	3008      	addeq	r0, #8
  4094d2:	071a      	lsls	r2, r3, #28
  4094d4:	bf04      	itt	eq
  4094d6:	091b      	lsreq	r3, r3, #4
  4094d8:	3004      	addeq	r0, #4
  4094da:	079a      	lsls	r2, r3, #30
  4094dc:	bf04      	itt	eq
  4094de:	089b      	lsreq	r3, r3, #2
  4094e0:	3002      	addeq	r0, #2
  4094e2:	07da      	lsls	r2, r3, #31
  4094e4:	d407      	bmi.n	4094f6 <__lo0bits+0x4e>
  4094e6:	085b      	lsrs	r3, r3, #1
  4094e8:	d104      	bne.n	4094f4 <__lo0bits+0x4c>
  4094ea:	2020      	movs	r0, #32
  4094ec:	4770      	bx	lr
  4094ee:	0c1b      	lsrs	r3, r3, #16
  4094f0:	2010      	movs	r0, #16
  4094f2:	e7e9      	b.n	4094c8 <__lo0bits+0x20>
  4094f4:	3001      	adds	r0, #1
  4094f6:	600b      	str	r3, [r1, #0]
  4094f8:	4770      	bx	lr
  4094fa:	2000      	movs	r0, #0
  4094fc:	4770      	bx	lr
  4094fe:	085b      	lsrs	r3, r3, #1
  409500:	600b      	str	r3, [r1, #0]
  409502:	2001      	movs	r0, #1
  409504:	4770      	bx	lr
  409506:	bf00      	nop

00409508 <__i2b>:
  409508:	b510      	push	{r4, lr}
  40950a:	460c      	mov	r4, r1
  40950c:	2101      	movs	r1, #1
  40950e:	f7ff ff3b 	bl	409388 <_Balloc>
  409512:	2201      	movs	r2, #1
  409514:	6144      	str	r4, [r0, #20]
  409516:	6102      	str	r2, [r0, #16]
  409518:	bd10      	pop	{r4, pc}
  40951a:	bf00      	nop

0040951c <__multiply>:
  40951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409520:	690c      	ldr	r4, [r1, #16]
  409522:	6915      	ldr	r5, [r2, #16]
  409524:	42ac      	cmp	r4, r5
  409526:	b083      	sub	sp, #12
  409528:	468b      	mov	fp, r1
  40952a:	4616      	mov	r6, r2
  40952c:	da04      	bge.n	409538 <__multiply+0x1c>
  40952e:	4622      	mov	r2, r4
  409530:	46b3      	mov	fp, r6
  409532:	462c      	mov	r4, r5
  409534:	460e      	mov	r6, r1
  409536:	4615      	mov	r5, r2
  409538:	f8db 3008 	ldr.w	r3, [fp, #8]
  40953c:	f8db 1004 	ldr.w	r1, [fp, #4]
  409540:	eb04 0805 	add.w	r8, r4, r5
  409544:	4598      	cmp	r8, r3
  409546:	bfc8      	it	gt
  409548:	3101      	addgt	r1, #1
  40954a:	f7ff ff1d 	bl	409388 <_Balloc>
  40954e:	f100 0914 	add.w	r9, r0, #20
  409552:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409556:	45d1      	cmp	r9, sl
  409558:	9000      	str	r0, [sp, #0]
  40955a:	d205      	bcs.n	409568 <__multiply+0x4c>
  40955c:	464b      	mov	r3, r9
  40955e:	2100      	movs	r1, #0
  409560:	f843 1b04 	str.w	r1, [r3], #4
  409564:	459a      	cmp	sl, r3
  409566:	d8fb      	bhi.n	409560 <__multiply+0x44>
  409568:	f106 0c14 	add.w	ip, r6, #20
  40956c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409570:	f10b 0b14 	add.w	fp, fp, #20
  409574:	459c      	cmp	ip, r3
  409576:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40957a:	d24c      	bcs.n	409616 <__multiply+0xfa>
  40957c:	f8cd a004 	str.w	sl, [sp, #4]
  409580:	469a      	mov	sl, r3
  409582:	f8dc 5000 	ldr.w	r5, [ip]
  409586:	b2af      	uxth	r7, r5
  409588:	b1ef      	cbz	r7, 4095c6 <__multiply+0xaa>
  40958a:	2100      	movs	r1, #0
  40958c:	464d      	mov	r5, r9
  40958e:	465e      	mov	r6, fp
  409590:	460c      	mov	r4, r1
  409592:	f856 2b04 	ldr.w	r2, [r6], #4
  409596:	6828      	ldr	r0, [r5, #0]
  409598:	b293      	uxth	r3, r2
  40959a:	b281      	uxth	r1, r0
  40959c:	fb07 1303 	mla	r3, r7, r3, r1
  4095a0:	0c12      	lsrs	r2, r2, #16
  4095a2:	0c01      	lsrs	r1, r0, #16
  4095a4:	4423      	add	r3, r4
  4095a6:	fb07 1102 	mla	r1, r7, r2, r1
  4095aa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4095ae:	b29b      	uxth	r3, r3
  4095b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4095b4:	45b6      	cmp	lr, r6
  4095b6:	f845 3b04 	str.w	r3, [r5], #4
  4095ba:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4095be:	d8e8      	bhi.n	409592 <__multiply+0x76>
  4095c0:	602c      	str	r4, [r5, #0]
  4095c2:	f8dc 5000 	ldr.w	r5, [ip]
  4095c6:	0c2d      	lsrs	r5, r5, #16
  4095c8:	d01d      	beq.n	409606 <__multiply+0xea>
  4095ca:	f8d9 3000 	ldr.w	r3, [r9]
  4095ce:	4648      	mov	r0, r9
  4095d0:	461c      	mov	r4, r3
  4095d2:	4659      	mov	r1, fp
  4095d4:	2200      	movs	r2, #0
  4095d6:	880e      	ldrh	r6, [r1, #0]
  4095d8:	0c24      	lsrs	r4, r4, #16
  4095da:	fb05 4406 	mla	r4, r5, r6, r4
  4095de:	4422      	add	r2, r4
  4095e0:	b29b      	uxth	r3, r3
  4095e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4095e6:	f840 3b04 	str.w	r3, [r0], #4
  4095ea:	f851 3b04 	ldr.w	r3, [r1], #4
  4095ee:	6804      	ldr	r4, [r0, #0]
  4095f0:	0c1b      	lsrs	r3, r3, #16
  4095f2:	b2a6      	uxth	r6, r4
  4095f4:	fb05 6303 	mla	r3, r5, r3, r6
  4095f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4095fc:	458e      	cmp	lr, r1
  4095fe:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409602:	d8e8      	bhi.n	4095d6 <__multiply+0xba>
  409604:	6003      	str	r3, [r0, #0]
  409606:	f10c 0c04 	add.w	ip, ip, #4
  40960a:	45e2      	cmp	sl, ip
  40960c:	f109 0904 	add.w	r9, r9, #4
  409610:	d8b7      	bhi.n	409582 <__multiply+0x66>
  409612:	f8dd a004 	ldr.w	sl, [sp, #4]
  409616:	f1b8 0f00 	cmp.w	r8, #0
  40961a:	dd0b      	ble.n	409634 <__multiply+0x118>
  40961c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409620:	f1aa 0a04 	sub.w	sl, sl, #4
  409624:	b11b      	cbz	r3, 40962e <__multiply+0x112>
  409626:	e005      	b.n	409634 <__multiply+0x118>
  409628:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40962c:	b913      	cbnz	r3, 409634 <__multiply+0x118>
  40962e:	f1b8 0801 	subs.w	r8, r8, #1
  409632:	d1f9      	bne.n	409628 <__multiply+0x10c>
  409634:	9800      	ldr	r0, [sp, #0]
  409636:	f8c0 8010 	str.w	r8, [r0, #16]
  40963a:	b003      	add	sp, #12
  40963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409640 <__pow5mult>:
  409640:	f012 0303 	ands.w	r3, r2, #3
  409644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409648:	4614      	mov	r4, r2
  40964a:	4607      	mov	r7, r0
  40964c:	d12e      	bne.n	4096ac <__pow5mult+0x6c>
  40964e:	460d      	mov	r5, r1
  409650:	10a4      	asrs	r4, r4, #2
  409652:	d01c      	beq.n	40968e <__pow5mult+0x4e>
  409654:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409656:	b396      	cbz	r6, 4096be <__pow5mult+0x7e>
  409658:	07e3      	lsls	r3, r4, #31
  40965a:	f04f 0800 	mov.w	r8, #0
  40965e:	d406      	bmi.n	40966e <__pow5mult+0x2e>
  409660:	1064      	asrs	r4, r4, #1
  409662:	d014      	beq.n	40968e <__pow5mult+0x4e>
  409664:	6830      	ldr	r0, [r6, #0]
  409666:	b1a8      	cbz	r0, 409694 <__pow5mult+0x54>
  409668:	4606      	mov	r6, r0
  40966a:	07e3      	lsls	r3, r4, #31
  40966c:	d5f8      	bpl.n	409660 <__pow5mult+0x20>
  40966e:	4632      	mov	r2, r6
  409670:	4629      	mov	r1, r5
  409672:	4638      	mov	r0, r7
  409674:	f7ff ff52 	bl	40951c <__multiply>
  409678:	b1b5      	cbz	r5, 4096a8 <__pow5mult+0x68>
  40967a:	686a      	ldr	r2, [r5, #4]
  40967c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40967e:	1064      	asrs	r4, r4, #1
  409680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409684:	6029      	str	r1, [r5, #0]
  409686:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40968a:	4605      	mov	r5, r0
  40968c:	d1ea      	bne.n	409664 <__pow5mult+0x24>
  40968e:	4628      	mov	r0, r5
  409690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409694:	4632      	mov	r2, r6
  409696:	4631      	mov	r1, r6
  409698:	4638      	mov	r0, r7
  40969a:	f7ff ff3f 	bl	40951c <__multiply>
  40969e:	6030      	str	r0, [r6, #0]
  4096a0:	f8c0 8000 	str.w	r8, [r0]
  4096a4:	4606      	mov	r6, r0
  4096a6:	e7e0      	b.n	40966a <__pow5mult+0x2a>
  4096a8:	4605      	mov	r5, r0
  4096aa:	e7d9      	b.n	409660 <__pow5mult+0x20>
  4096ac:	1e5a      	subs	r2, r3, #1
  4096ae:	4d0b      	ldr	r5, [pc, #44]	; (4096dc <__pow5mult+0x9c>)
  4096b0:	2300      	movs	r3, #0
  4096b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4096b6:	f7ff fe97 	bl	4093e8 <__multadd>
  4096ba:	4605      	mov	r5, r0
  4096bc:	e7c8      	b.n	409650 <__pow5mult+0x10>
  4096be:	2101      	movs	r1, #1
  4096c0:	4638      	mov	r0, r7
  4096c2:	f7ff fe61 	bl	409388 <_Balloc>
  4096c6:	f240 2171 	movw	r1, #625	; 0x271
  4096ca:	2201      	movs	r2, #1
  4096cc:	2300      	movs	r3, #0
  4096ce:	6141      	str	r1, [r0, #20]
  4096d0:	6102      	str	r2, [r0, #16]
  4096d2:	4606      	mov	r6, r0
  4096d4:	64b8      	str	r0, [r7, #72]	; 0x48
  4096d6:	6003      	str	r3, [r0, #0]
  4096d8:	e7be      	b.n	409658 <__pow5mult+0x18>
  4096da:	bf00      	nop
  4096dc:	0040b5e8 	.word	0x0040b5e8

004096e0 <__lshift>:
  4096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4096e4:	4691      	mov	r9, r2
  4096e6:	690a      	ldr	r2, [r1, #16]
  4096e8:	688b      	ldr	r3, [r1, #8]
  4096ea:	ea4f 1469 	mov.w	r4, r9, asr #5
  4096ee:	eb04 0802 	add.w	r8, r4, r2
  4096f2:	f108 0501 	add.w	r5, r8, #1
  4096f6:	429d      	cmp	r5, r3
  4096f8:	460e      	mov	r6, r1
  4096fa:	4607      	mov	r7, r0
  4096fc:	6849      	ldr	r1, [r1, #4]
  4096fe:	dd04      	ble.n	40970a <__lshift+0x2a>
  409700:	005b      	lsls	r3, r3, #1
  409702:	429d      	cmp	r5, r3
  409704:	f101 0101 	add.w	r1, r1, #1
  409708:	dcfa      	bgt.n	409700 <__lshift+0x20>
  40970a:	4638      	mov	r0, r7
  40970c:	f7ff fe3c 	bl	409388 <_Balloc>
  409710:	2c00      	cmp	r4, #0
  409712:	f100 0314 	add.w	r3, r0, #20
  409716:	dd06      	ble.n	409726 <__lshift+0x46>
  409718:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40971c:	2100      	movs	r1, #0
  40971e:	f843 1b04 	str.w	r1, [r3], #4
  409722:	429a      	cmp	r2, r3
  409724:	d1fb      	bne.n	40971e <__lshift+0x3e>
  409726:	6934      	ldr	r4, [r6, #16]
  409728:	f106 0114 	add.w	r1, r6, #20
  40972c:	f019 091f 	ands.w	r9, r9, #31
  409730:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409734:	d01d      	beq.n	409772 <__lshift+0x92>
  409736:	f1c9 0c20 	rsb	ip, r9, #32
  40973a:	2200      	movs	r2, #0
  40973c:	680c      	ldr	r4, [r1, #0]
  40973e:	fa04 f409 	lsl.w	r4, r4, r9
  409742:	4314      	orrs	r4, r2
  409744:	f843 4b04 	str.w	r4, [r3], #4
  409748:	f851 2b04 	ldr.w	r2, [r1], #4
  40974c:	458e      	cmp	lr, r1
  40974e:	fa22 f20c 	lsr.w	r2, r2, ip
  409752:	d8f3      	bhi.n	40973c <__lshift+0x5c>
  409754:	601a      	str	r2, [r3, #0]
  409756:	b10a      	cbz	r2, 40975c <__lshift+0x7c>
  409758:	f108 0502 	add.w	r5, r8, #2
  40975c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40975e:	6872      	ldr	r2, [r6, #4]
  409760:	3d01      	subs	r5, #1
  409762:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409766:	6105      	str	r5, [r0, #16]
  409768:	6031      	str	r1, [r6, #0]
  40976a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409772:	3b04      	subs	r3, #4
  409774:	f851 2b04 	ldr.w	r2, [r1], #4
  409778:	f843 2f04 	str.w	r2, [r3, #4]!
  40977c:	458e      	cmp	lr, r1
  40977e:	d8f9      	bhi.n	409774 <__lshift+0x94>
  409780:	e7ec      	b.n	40975c <__lshift+0x7c>
  409782:	bf00      	nop

00409784 <__mcmp>:
  409784:	b430      	push	{r4, r5}
  409786:	690b      	ldr	r3, [r1, #16]
  409788:	4605      	mov	r5, r0
  40978a:	6900      	ldr	r0, [r0, #16]
  40978c:	1ac0      	subs	r0, r0, r3
  40978e:	d10f      	bne.n	4097b0 <__mcmp+0x2c>
  409790:	009b      	lsls	r3, r3, #2
  409792:	3514      	adds	r5, #20
  409794:	3114      	adds	r1, #20
  409796:	4419      	add	r1, r3
  409798:	442b      	add	r3, r5
  40979a:	e001      	b.n	4097a0 <__mcmp+0x1c>
  40979c:	429d      	cmp	r5, r3
  40979e:	d207      	bcs.n	4097b0 <__mcmp+0x2c>
  4097a0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4097a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4097a8:	4294      	cmp	r4, r2
  4097aa:	d0f7      	beq.n	40979c <__mcmp+0x18>
  4097ac:	d302      	bcc.n	4097b4 <__mcmp+0x30>
  4097ae:	2001      	movs	r0, #1
  4097b0:	bc30      	pop	{r4, r5}
  4097b2:	4770      	bx	lr
  4097b4:	f04f 30ff 	mov.w	r0, #4294967295
  4097b8:	e7fa      	b.n	4097b0 <__mcmp+0x2c>
  4097ba:	bf00      	nop

004097bc <__mdiff>:
  4097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4097c0:	690f      	ldr	r7, [r1, #16]
  4097c2:	460e      	mov	r6, r1
  4097c4:	6911      	ldr	r1, [r2, #16]
  4097c6:	1a7f      	subs	r7, r7, r1
  4097c8:	2f00      	cmp	r7, #0
  4097ca:	4690      	mov	r8, r2
  4097cc:	d117      	bne.n	4097fe <__mdiff+0x42>
  4097ce:	0089      	lsls	r1, r1, #2
  4097d0:	f106 0514 	add.w	r5, r6, #20
  4097d4:	f102 0e14 	add.w	lr, r2, #20
  4097d8:	186b      	adds	r3, r5, r1
  4097da:	4471      	add	r1, lr
  4097dc:	e001      	b.n	4097e2 <__mdiff+0x26>
  4097de:	429d      	cmp	r5, r3
  4097e0:	d25c      	bcs.n	40989c <__mdiff+0xe0>
  4097e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4097e6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4097ea:	42a2      	cmp	r2, r4
  4097ec:	d0f7      	beq.n	4097de <__mdiff+0x22>
  4097ee:	d25e      	bcs.n	4098ae <__mdiff+0xf2>
  4097f0:	4633      	mov	r3, r6
  4097f2:	462c      	mov	r4, r5
  4097f4:	4646      	mov	r6, r8
  4097f6:	4675      	mov	r5, lr
  4097f8:	4698      	mov	r8, r3
  4097fa:	2701      	movs	r7, #1
  4097fc:	e005      	b.n	40980a <__mdiff+0x4e>
  4097fe:	db58      	blt.n	4098b2 <__mdiff+0xf6>
  409800:	f106 0514 	add.w	r5, r6, #20
  409804:	f108 0414 	add.w	r4, r8, #20
  409808:	2700      	movs	r7, #0
  40980a:	6871      	ldr	r1, [r6, #4]
  40980c:	f7ff fdbc 	bl	409388 <_Balloc>
  409810:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409814:	6936      	ldr	r6, [r6, #16]
  409816:	60c7      	str	r7, [r0, #12]
  409818:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40981c:	46a6      	mov	lr, r4
  40981e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409822:	f100 0414 	add.w	r4, r0, #20
  409826:	2300      	movs	r3, #0
  409828:	f85e 1b04 	ldr.w	r1, [lr], #4
  40982c:	f855 8b04 	ldr.w	r8, [r5], #4
  409830:	b28a      	uxth	r2, r1
  409832:	fa13 f388 	uxtah	r3, r3, r8
  409836:	0c09      	lsrs	r1, r1, #16
  409838:	1a9a      	subs	r2, r3, r2
  40983a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40983e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409842:	b292      	uxth	r2, r2
  409844:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409848:	45f4      	cmp	ip, lr
  40984a:	f844 2b04 	str.w	r2, [r4], #4
  40984e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409852:	d8e9      	bhi.n	409828 <__mdiff+0x6c>
  409854:	42af      	cmp	r7, r5
  409856:	d917      	bls.n	409888 <__mdiff+0xcc>
  409858:	46a4      	mov	ip, r4
  40985a:	46ae      	mov	lr, r5
  40985c:	f85e 2b04 	ldr.w	r2, [lr], #4
  409860:	fa13 f382 	uxtah	r3, r3, r2
  409864:	1419      	asrs	r1, r3, #16
  409866:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40986a:	b29b      	uxth	r3, r3
  40986c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409870:	4577      	cmp	r7, lr
  409872:	f84c 2b04 	str.w	r2, [ip], #4
  409876:	ea4f 4321 	mov.w	r3, r1, asr #16
  40987a:	d8ef      	bhi.n	40985c <__mdiff+0xa0>
  40987c:	43ed      	mvns	r5, r5
  40987e:	442f      	add	r7, r5
  409880:	f027 0703 	bic.w	r7, r7, #3
  409884:	3704      	adds	r7, #4
  409886:	443c      	add	r4, r7
  409888:	3c04      	subs	r4, #4
  40988a:	b922      	cbnz	r2, 409896 <__mdiff+0xda>
  40988c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409890:	3e01      	subs	r6, #1
  409892:	2b00      	cmp	r3, #0
  409894:	d0fa      	beq.n	40988c <__mdiff+0xd0>
  409896:	6106      	str	r6, [r0, #16]
  409898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40989c:	2100      	movs	r1, #0
  40989e:	f7ff fd73 	bl	409388 <_Balloc>
  4098a2:	2201      	movs	r2, #1
  4098a4:	2300      	movs	r3, #0
  4098a6:	6102      	str	r2, [r0, #16]
  4098a8:	6143      	str	r3, [r0, #20]
  4098aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4098ae:	4674      	mov	r4, lr
  4098b0:	e7ab      	b.n	40980a <__mdiff+0x4e>
  4098b2:	4633      	mov	r3, r6
  4098b4:	f106 0414 	add.w	r4, r6, #20
  4098b8:	f102 0514 	add.w	r5, r2, #20
  4098bc:	4616      	mov	r6, r2
  4098be:	2701      	movs	r7, #1
  4098c0:	4698      	mov	r8, r3
  4098c2:	e7a2      	b.n	40980a <__mdiff+0x4e>

004098c4 <__d2b>:
  4098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4098c8:	b082      	sub	sp, #8
  4098ca:	2101      	movs	r1, #1
  4098cc:	461c      	mov	r4, r3
  4098ce:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4098d2:	4615      	mov	r5, r2
  4098d4:	9e08      	ldr	r6, [sp, #32]
  4098d6:	f7ff fd57 	bl	409388 <_Balloc>
  4098da:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4098de:	4680      	mov	r8, r0
  4098e0:	b10f      	cbz	r7, 4098e6 <__d2b+0x22>
  4098e2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4098e6:	9401      	str	r4, [sp, #4]
  4098e8:	b31d      	cbz	r5, 409932 <__d2b+0x6e>
  4098ea:	a802      	add	r0, sp, #8
  4098ec:	f840 5d08 	str.w	r5, [r0, #-8]!
  4098f0:	f7ff fdda 	bl	4094a8 <__lo0bits>
  4098f4:	2800      	cmp	r0, #0
  4098f6:	d134      	bne.n	409962 <__d2b+0x9e>
  4098f8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4098fc:	f8c8 2014 	str.w	r2, [r8, #20]
  409900:	2b00      	cmp	r3, #0
  409902:	bf0c      	ite	eq
  409904:	2101      	moveq	r1, #1
  409906:	2102      	movne	r1, #2
  409908:	f8c8 3018 	str.w	r3, [r8, #24]
  40990c:	f8c8 1010 	str.w	r1, [r8, #16]
  409910:	b9df      	cbnz	r7, 40994a <__d2b+0x86>
  409912:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409916:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40991a:	6030      	str	r0, [r6, #0]
  40991c:	6918      	ldr	r0, [r3, #16]
  40991e:	f7ff fda3 	bl	409468 <__hi0bits>
  409922:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409924:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409928:	6018      	str	r0, [r3, #0]
  40992a:	4640      	mov	r0, r8
  40992c:	b002      	add	sp, #8
  40992e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409932:	a801      	add	r0, sp, #4
  409934:	f7ff fdb8 	bl	4094a8 <__lo0bits>
  409938:	9b01      	ldr	r3, [sp, #4]
  40993a:	f8c8 3014 	str.w	r3, [r8, #20]
  40993e:	2101      	movs	r1, #1
  409940:	3020      	adds	r0, #32
  409942:	f8c8 1010 	str.w	r1, [r8, #16]
  409946:	2f00      	cmp	r7, #0
  409948:	d0e3      	beq.n	409912 <__d2b+0x4e>
  40994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40994c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409950:	4407      	add	r7, r0
  409952:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409956:	6037      	str	r7, [r6, #0]
  409958:	6018      	str	r0, [r3, #0]
  40995a:	4640      	mov	r0, r8
  40995c:	b002      	add	sp, #8
  40995e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409962:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409966:	f1c0 0220 	rsb	r2, r0, #32
  40996a:	fa03 f202 	lsl.w	r2, r3, r2
  40996e:	430a      	orrs	r2, r1
  409970:	40c3      	lsrs	r3, r0
  409972:	9301      	str	r3, [sp, #4]
  409974:	f8c8 2014 	str.w	r2, [r8, #20]
  409978:	e7c2      	b.n	409900 <__d2b+0x3c>
  40997a:	bf00      	nop

0040997c <_realloc_r>:
  40997c:	2900      	cmp	r1, #0
  40997e:	f000 8095 	beq.w	409aac <_realloc_r+0x130>
  409982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409986:	460d      	mov	r5, r1
  409988:	4616      	mov	r6, r2
  40998a:	b083      	sub	sp, #12
  40998c:	4680      	mov	r8, r0
  40998e:	f106 070b 	add.w	r7, r6, #11
  409992:	f7fa ffcd 	bl	404930 <__malloc_lock>
  409996:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40999a:	2f16      	cmp	r7, #22
  40999c:	f02e 0403 	bic.w	r4, lr, #3
  4099a0:	f1a5 0908 	sub.w	r9, r5, #8
  4099a4:	d83c      	bhi.n	409a20 <_realloc_r+0xa4>
  4099a6:	2210      	movs	r2, #16
  4099a8:	4617      	mov	r7, r2
  4099aa:	42be      	cmp	r6, r7
  4099ac:	d83d      	bhi.n	409a2a <_realloc_r+0xae>
  4099ae:	4294      	cmp	r4, r2
  4099b0:	da43      	bge.n	409a3a <_realloc_r+0xbe>
  4099b2:	4bc4      	ldr	r3, [pc, #784]	; (409cc4 <_realloc_r+0x348>)
  4099b4:	6899      	ldr	r1, [r3, #8]
  4099b6:	eb09 0004 	add.w	r0, r9, r4
  4099ba:	4288      	cmp	r0, r1
  4099bc:	f000 80b4 	beq.w	409b28 <_realloc_r+0x1ac>
  4099c0:	6843      	ldr	r3, [r0, #4]
  4099c2:	f023 0101 	bic.w	r1, r3, #1
  4099c6:	4401      	add	r1, r0
  4099c8:	6849      	ldr	r1, [r1, #4]
  4099ca:	07c9      	lsls	r1, r1, #31
  4099cc:	d54c      	bpl.n	409a68 <_realloc_r+0xec>
  4099ce:	f01e 0f01 	tst.w	lr, #1
  4099d2:	f000 809b 	beq.w	409b0c <_realloc_r+0x190>
  4099d6:	4631      	mov	r1, r6
  4099d8:	4640      	mov	r0, r8
  4099da:	f7fa fc11 	bl	404200 <_malloc_r>
  4099de:	4606      	mov	r6, r0
  4099e0:	2800      	cmp	r0, #0
  4099e2:	d03a      	beq.n	409a5a <_realloc_r+0xde>
  4099e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4099e8:	f023 0301 	bic.w	r3, r3, #1
  4099ec:	444b      	add	r3, r9
  4099ee:	f1a0 0208 	sub.w	r2, r0, #8
  4099f2:	429a      	cmp	r2, r3
  4099f4:	f000 8121 	beq.w	409c3a <_realloc_r+0x2be>
  4099f8:	1f22      	subs	r2, r4, #4
  4099fa:	2a24      	cmp	r2, #36	; 0x24
  4099fc:	f200 8107 	bhi.w	409c0e <_realloc_r+0x292>
  409a00:	2a13      	cmp	r2, #19
  409a02:	f200 80db 	bhi.w	409bbc <_realloc_r+0x240>
  409a06:	4603      	mov	r3, r0
  409a08:	462a      	mov	r2, r5
  409a0a:	6811      	ldr	r1, [r2, #0]
  409a0c:	6019      	str	r1, [r3, #0]
  409a0e:	6851      	ldr	r1, [r2, #4]
  409a10:	6059      	str	r1, [r3, #4]
  409a12:	6892      	ldr	r2, [r2, #8]
  409a14:	609a      	str	r2, [r3, #8]
  409a16:	4629      	mov	r1, r5
  409a18:	4640      	mov	r0, r8
  409a1a:	f7ff f8e9 	bl	408bf0 <_free_r>
  409a1e:	e01c      	b.n	409a5a <_realloc_r+0xde>
  409a20:	f027 0707 	bic.w	r7, r7, #7
  409a24:	2f00      	cmp	r7, #0
  409a26:	463a      	mov	r2, r7
  409a28:	dabf      	bge.n	4099aa <_realloc_r+0x2e>
  409a2a:	2600      	movs	r6, #0
  409a2c:	230c      	movs	r3, #12
  409a2e:	4630      	mov	r0, r6
  409a30:	f8c8 3000 	str.w	r3, [r8]
  409a34:	b003      	add	sp, #12
  409a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a3a:	462e      	mov	r6, r5
  409a3c:	1be3      	subs	r3, r4, r7
  409a3e:	2b0f      	cmp	r3, #15
  409a40:	d81e      	bhi.n	409a80 <_realloc_r+0x104>
  409a42:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409a46:	f003 0301 	and.w	r3, r3, #1
  409a4a:	4323      	orrs	r3, r4
  409a4c:	444c      	add	r4, r9
  409a4e:	f8c9 3004 	str.w	r3, [r9, #4]
  409a52:	6863      	ldr	r3, [r4, #4]
  409a54:	f043 0301 	orr.w	r3, r3, #1
  409a58:	6063      	str	r3, [r4, #4]
  409a5a:	4640      	mov	r0, r8
  409a5c:	f7fa ff6e 	bl	40493c <__malloc_unlock>
  409a60:	4630      	mov	r0, r6
  409a62:	b003      	add	sp, #12
  409a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a68:	f023 0303 	bic.w	r3, r3, #3
  409a6c:	18e1      	adds	r1, r4, r3
  409a6e:	4291      	cmp	r1, r2
  409a70:	db1f      	blt.n	409ab2 <_realloc_r+0x136>
  409a72:	68c3      	ldr	r3, [r0, #12]
  409a74:	6882      	ldr	r2, [r0, #8]
  409a76:	462e      	mov	r6, r5
  409a78:	60d3      	str	r3, [r2, #12]
  409a7a:	460c      	mov	r4, r1
  409a7c:	609a      	str	r2, [r3, #8]
  409a7e:	e7dd      	b.n	409a3c <_realloc_r+0xc0>
  409a80:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409a84:	eb09 0107 	add.w	r1, r9, r7
  409a88:	f002 0201 	and.w	r2, r2, #1
  409a8c:	444c      	add	r4, r9
  409a8e:	f043 0301 	orr.w	r3, r3, #1
  409a92:	4317      	orrs	r7, r2
  409a94:	f8c9 7004 	str.w	r7, [r9, #4]
  409a98:	604b      	str	r3, [r1, #4]
  409a9a:	6863      	ldr	r3, [r4, #4]
  409a9c:	f043 0301 	orr.w	r3, r3, #1
  409aa0:	3108      	adds	r1, #8
  409aa2:	6063      	str	r3, [r4, #4]
  409aa4:	4640      	mov	r0, r8
  409aa6:	f7ff f8a3 	bl	408bf0 <_free_r>
  409aaa:	e7d6      	b.n	409a5a <_realloc_r+0xde>
  409aac:	4611      	mov	r1, r2
  409aae:	f7fa bba7 	b.w	404200 <_malloc_r>
  409ab2:	f01e 0f01 	tst.w	lr, #1
  409ab6:	d18e      	bne.n	4099d6 <_realloc_r+0x5a>
  409ab8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409abc:	eba9 0a01 	sub.w	sl, r9, r1
  409ac0:	f8da 1004 	ldr.w	r1, [sl, #4]
  409ac4:	f021 0103 	bic.w	r1, r1, #3
  409ac8:	440b      	add	r3, r1
  409aca:	4423      	add	r3, r4
  409acc:	4293      	cmp	r3, r2
  409ace:	db25      	blt.n	409b1c <_realloc_r+0x1a0>
  409ad0:	68c2      	ldr	r2, [r0, #12]
  409ad2:	6881      	ldr	r1, [r0, #8]
  409ad4:	4656      	mov	r6, sl
  409ad6:	60ca      	str	r2, [r1, #12]
  409ad8:	6091      	str	r1, [r2, #8]
  409ada:	f8da 100c 	ldr.w	r1, [sl, #12]
  409ade:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409ae2:	1f22      	subs	r2, r4, #4
  409ae4:	2a24      	cmp	r2, #36	; 0x24
  409ae6:	60c1      	str	r1, [r0, #12]
  409ae8:	6088      	str	r0, [r1, #8]
  409aea:	f200 8094 	bhi.w	409c16 <_realloc_r+0x29a>
  409aee:	2a13      	cmp	r2, #19
  409af0:	d96f      	bls.n	409bd2 <_realloc_r+0x256>
  409af2:	6829      	ldr	r1, [r5, #0]
  409af4:	f8ca 1008 	str.w	r1, [sl, #8]
  409af8:	6869      	ldr	r1, [r5, #4]
  409afa:	f8ca 100c 	str.w	r1, [sl, #12]
  409afe:	2a1b      	cmp	r2, #27
  409b00:	f200 80a2 	bhi.w	409c48 <_realloc_r+0x2cc>
  409b04:	3508      	adds	r5, #8
  409b06:	f10a 0210 	add.w	r2, sl, #16
  409b0a:	e063      	b.n	409bd4 <_realloc_r+0x258>
  409b0c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409b10:	eba9 0a03 	sub.w	sl, r9, r3
  409b14:	f8da 1004 	ldr.w	r1, [sl, #4]
  409b18:	f021 0103 	bic.w	r1, r1, #3
  409b1c:	1863      	adds	r3, r4, r1
  409b1e:	4293      	cmp	r3, r2
  409b20:	f6ff af59 	blt.w	4099d6 <_realloc_r+0x5a>
  409b24:	4656      	mov	r6, sl
  409b26:	e7d8      	b.n	409ada <_realloc_r+0x15e>
  409b28:	6841      	ldr	r1, [r0, #4]
  409b2a:	f021 0b03 	bic.w	fp, r1, #3
  409b2e:	44a3      	add	fp, r4
  409b30:	f107 0010 	add.w	r0, r7, #16
  409b34:	4583      	cmp	fp, r0
  409b36:	da56      	bge.n	409be6 <_realloc_r+0x26a>
  409b38:	f01e 0f01 	tst.w	lr, #1
  409b3c:	f47f af4b 	bne.w	4099d6 <_realloc_r+0x5a>
  409b40:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409b44:	eba9 0a01 	sub.w	sl, r9, r1
  409b48:	f8da 1004 	ldr.w	r1, [sl, #4]
  409b4c:	f021 0103 	bic.w	r1, r1, #3
  409b50:	448b      	add	fp, r1
  409b52:	4558      	cmp	r0, fp
  409b54:	dce2      	bgt.n	409b1c <_realloc_r+0x1a0>
  409b56:	4656      	mov	r6, sl
  409b58:	f8da 100c 	ldr.w	r1, [sl, #12]
  409b5c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409b60:	1f22      	subs	r2, r4, #4
  409b62:	2a24      	cmp	r2, #36	; 0x24
  409b64:	60c1      	str	r1, [r0, #12]
  409b66:	6088      	str	r0, [r1, #8]
  409b68:	f200 808f 	bhi.w	409c8a <_realloc_r+0x30e>
  409b6c:	2a13      	cmp	r2, #19
  409b6e:	f240 808a 	bls.w	409c86 <_realloc_r+0x30a>
  409b72:	6829      	ldr	r1, [r5, #0]
  409b74:	f8ca 1008 	str.w	r1, [sl, #8]
  409b78:	6869      	ldr	r1, [r5, #4]
  409b7a:	f8ca 100c 	str.w	r1, [sl, #12]
  409b7e:	2a1b      	cmp	r2, #27
  409b80:	f200 808a 	bhi.w	409c98 <_realloc_r+0x31c>
  409b84:	3508      	adds	r5, #8
  409b86:	f10a 0210 	add.w	r2, sl, #16
  409b8a:	6829      	ldr	r1, [r5, #0]
  409b8c:	6011      	str	r1, [r2, #0]
  409b8e:	6869      	ldr	r1, [r5, #4]
  409b90:	6051      	str	r1, [r2, #4]
  409b92:	68a9      	ldr	r1, [r5, #8]
  409b94:	6091      	str	r1, [r2, #8]
  409b96:	eb0a 0107 	add.w	r1, sl, r7
  409b9a:	ebab 0207 	sub.w	r2, fp, r7
  409b9e:	f042 0201 	orr.w	r2, r2, #1
  409ba2:	6099      	str	r1, [r3, #8]
  409ba4:	604a      	str	r2, [r1, #4]
  409ba6:	f8da 3004 	ldr.w	r3, [sl, #4]
  409baa:	f003 0301 	and.w	r3, r3, #1
  409bae:	431f      	orrs	r7, r3
  409bb0:	4640      	mov	r0, r8
  409bb2:	f8ca 7004 	str.w	r7, [sl, #4]
  409bb6:	f7fa fec1 	bl	40493c <__malloc_unlock>
  409bba:	e751      	b.n	409a60 <_realloc_r+0xe4>
  409bbc:	682b      	ldr	r3, [r5, #0]
  409bbe:	6003      	str	r3, [r0, #0]
  409bc0:	686b      	ldr	r3, [r5, #4]
  409bc2:	6043      	str	r3, [r0, #4]
  409bc4:	2a1b      	cmp	r2, #27
  409bc6:	d82d      	bhi.n	409c24 <_realloc_r+0x2a8>
  409bc8:	f100 0308 	add.w	r3, r0, #8
  409bcc:	f105 0208 	add.w	r2, r5, #8
  409bd0:	e71b      	b.n	409a0a <_realloc_r+0x8e>
  409bd2:	4632      	mov	r2, r6
  409bd4:	6829      	ldr	r1, [r5, #0]
  409bd6:	6011      	str	r1, [r2, #0]
  409bd8:	6869      	ldr	r1, [r5, #4]
  409bda:	6051      	str	r1, [r2, #4]
  409bdc:	68a9      	ldr	r1, [r5, #8]
  409bde:	6091      	str	r1, [r2, #8]
  409be0:	461c      	mov	r4, r3
  409be2:	46d1      	mov	r9, sl
  409be4:	e72a      	b.n	409a3c <_realloc_r+0xc0>
  409be6:	eb09 0107 	add.w	r1, r9, r7
  409bea:	ebab 0b07 	sub.w	fp, fp, r7
  409bee:	f04b 0201 	orr.w	r2, fp, #1
  409bf2:	6099      	str	r1, [r3, #8]
  409bf4:	604a      	str	r2, [r1, #4]
  409bf6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409bfa:	f003 0301 	and.w	r3, r3, #1
  409bfe:	431f      	orrs	r7, r3
  409c00:	4640      	mov	r0, r8
  409c02:	f845 7c04 	str.w	r7, [r5, #-4]
  409c06:	f7fa fe99 	bl	40493c <__malloc_unlock>
  409c0a:	462e      	mov	r6, r5
  409c0c:	e728      	b.n	409a60 <_realloc_r+0xe4>
  409c0e:	4629      	mov	r1, r5
  409c10:	f7ff fb56 	bl	4092c0 <memmove>
  409c14:	e6ff      	b.n	409a16 <_realloc_r+0x9a>
  409c16:	4629      	mov	r1, r5
  409c18:	4630      	mov	r0, r6
  409c1a:	461c      	mov	r4, r3
  409c1c:	46d1      	mov	r9, sl
  409c1e:	f7ff fb4f 	bl	4092c0 <memmove>
  409c22:	e70b      	b.n	409a3c <_realloc_r+0xc0>
  409c24:	68ab      	ldr	r3, [r5, #8]
  409c26:	6083      	str	r3, [r0, #8]
  409c28:	68eb      	ldr	r3, [r5, #12]
  409c2a:	60c3      	str	r3, [r0, #12]
  409c2c:	2a24      	cmp	r2, #36	; 0x24
  409c2e:	d017      	beq.n	409c60 <_realloc_r+0x2e4>
  409c30:	f100 0310 	add.w	r3, r0, #16
  409c34:	f105 0210 	add.w	r2, r5, #16
  409c38:	e6e7      	b.n	409a0a <_realloc_r+0x8e>
  409c3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409c3e:	f023 0303 	bic.w	r3, r3, #3
  409c42:	441c      	add	r4, r3
  409c44:	462e      	mov	r6, r5
  409c46:	e6f9      	b.n	409a3c <_realloc_r+0xc0>
  409c48:	68a9      	ldr	r1, [r5, #8]
  409c4a:	f8ca 1010 	str.w	r1, [sl, #16]
  409c4e:	68e9      	ldr	r1, [r5, #12]
  409c50:	f8ca 1014 	str.w	r1, [sl, #20]
  409c54:	2a24      	cmp	r2, #36	; 0x24
  409c56:	d00c      	beq.n	409c72 <_realloc_r+0x2f6>
  409c58:	3510      	adds	r5, #16
  409c5a:	f10a 0218 	add.w	r2, sl, #24
  409c5e:	e7b9      	b.n	409bd4 <_realloc_r+0x258>
  409c60:	692b      	ldr	r3, [r5, #16]
  409c62:	6103      	str	r3, [r0, #16]
  409c64:	696b      	ldr	r3, [r5, #20]
  409c66:	6143      	str	r3, [r0, #20]
  409c68:	f105 0218 	add.w	r2, r5, #24
  409c6c:	f100 0318 	add.w	r3, r0, #24
  409c70:	e6cb      	b.n	409a0a <_realloc_r+0x8e>
  409c72:	692a      	ldr	r2, [r5, #16]
  409c74:	f8ca 2018 	str.w	r2, [sl, #24]
  409c78:	696a      	ldr	r2, [r5, #20]
  409c7a:	f8ca 201c 	str.w	r2, [sl, #28]
  409c7e:	3518      	adds	r5, #24
  409c80:	f10a 0220 	add.w	r2, sl, #32
  409c84:	e7a6      	b.n	409bd4 <_realloc_r+0x258>
  409c86:	4632      	mov	r2, r6
  409c88:	e77f      	b.n	409b8a <_realloc_r+0x20e>
  409c8a:	4629      	mov	r1, r5
  409c8c:	4630      	mov	r0, r6
  409c8e:	9301      	str	r3, [sp, #4]
  409c90:	f7ff fb16 	bl	4092c0 <memmove>
  409c94:	9b01      	ldr	r3, [sp, #4]
  409c96:	e77e      	b.n	409b96 <_realloc_r+0x21a>
  409c98:	68a9      	ldr	r1, [r5, #8]
  409c9a:	f8ca 1010 	str.w	r1, [sl, #16]
  409c9e:	68e9      	ldr	r1, [r5, #12]
  409ca0:	f8ca 1014 	str.w	r1, [sl, #20]
  409ca4:	2a24      	cmp	r2, #36	; 0x24
  409ca6:	d003      	beq.n	409cb0 <_realloc_r+0x334>
  409ca8:	3510      	adds	r5, #16
  409caa:	f10a 0218 	add.w	r2, sl, #24
  409cae:	e76c      	b.n	409b8a <_realloc_r+0x20e>
  409cb0:	692a      	ldr	r2, [r5, #16]
  409cb2:	f8ca 2018 	str.w	r2, [sl, #24]
  409cb6:	696a      	ldr	r2, [r5, #20]
  409cb8:	f8ca 201c 	str.w	r2, [sl, #28]
  409cbc:	3518      	adds	r5, #24
  409cbe:	f10a 0220 	add.w	r2, sl, #32
  409cc2:	e762      	b.n	409b8a <_realloc_r+0x20e>
  409cc4:	20400458 	.word	0x20400458

00409cc8 <__sread>:
  409cc8:	b510      	push	{r4, lr}
  409cca:	460c      	mov	r4, r1
  409ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409cd0:	f000 fb06 	bl	40a2e0 <_read_r>
  409cd4:	2800      	cmp	r0, #0
  409cd6:	db03      	blt.n	409ce0 <__sread+0x18>
  409cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409cda:	4403      	add	r3, r0
  409cdc:	6523      	str	r3, [r4, #80]	; 0x50
  409cde:	bd10      	pop	{r4, pc}
  409ce0:	89a3      	ldrh	r3, [r4, #12]
  409ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409ce6:	81a3      	strh	r3, [r4, #12]
  409ce8:	bd10      	pop	{r4, pc}
  409cea:	bf00      	nop

00409cec <__swrite>:
  409cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cf0:	4616      	mov	r6, r2
  409cf2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409cf6:	461f      	mov	r7, r3
  409cf8:	05d3      	lsls	r3, r2, #23
  409cfa:	460c      	mov	r4, r1
  409cfc:	4605      	mov	r5, r0
  409cfe:	d507      	bpl.n	409d10 <__swrite+0x24>
  409d00:	2200      	movs	r2, #0
  409d02:	2302      	movs	r3, #2
  409d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d08:	f000 fabe 	bl	40a288 <_lseek_r>
  409d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409d18:	81a2      	strh	r2, [r4, #12]
  409d1a:	463b      	mov	r3, r7
  409d1c:	4632      	mov	r2, r6
  409d1e:	4628      	mov	r0, r5
  409d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409d24:	f000 b8dc 	b.w	409ee0 <_write_r>

00409d28 <__sseek>:
  409d28:	b510      	push	{r4, lr}
  409d2a:	460c      	mov	r4, r1
  409d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d30:	f000 faaa 	bl	40a288 <_lseek_r>
  409d34:	89a3      	ldrh	r3, [r4, #12]
  409d36:	1c42      	adds	r2, r0, #1
  409d38:	bf0e      	itee	eq
  409d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409d42:	6520      	strne	r0, [r4, #80]	; 0x50
  409d44:	81a3      	strh	r3, [r4, #12]
  409d46:	bd10      	pop	{r4, pc}

00409d48 <__sclose>:
  409d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d4c:	f000 b970 	b.w	40a030 <_close_r>

00409d50 <__ssprint_r>:
  409d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409d54:	6893      	ldr	r3, [r2, #8]
  409d56:	b083      	sub	sp, #12
  409d58:	4690      	mov	r8, r2
  409d5a:	2b00      	cmp	r3, #0
  409d5c:	d070      	beq.n	409e40 <__ssprint_r+0xf0>
  409d5e:	4682      	mov	sl, r0
  409d60:	460c      	mov	r4, r1
  409d62:	6817      	ldr	r7, [r2, #0]
  409d64:	688d      	ldr	r5, [r1, #8]
  409d66:	6808      	ldr	r0, [r1, #0]
  409d68:	e042      	b.n	409df0 <__ssprint_r+0xa0>
  409d6a:	89a3      	ldrh	r3, [r4, #12]
  409d6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409d70:	d02e      	beq.n	409dd0 <__ssprint_r+0x80>
  409d72:	6965      	ldr	r5, [r4, #20]
  409d74:	6921      	ldr	r1, [r4, #16]
  409d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409d7a:	eba0 0b01 	sub.w	fp, r0, r1
  409d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409d82:	f10b 0001 	add.w	r0, fp, #1
  409d86:	106d      	asrs	r5, r5, #1
  409d88:	4430      	add	r0, r6
  409d8a:	42a8      	cmp	r0, r5
  409d8c:	462a      	mov	r2, r5
  409d8e:	bf84      	itt	hi
  409d90:	4605      	movhi	r5, r0
  409d92:	462a      	movhi	r2, r5
  409d94:	055b      	lsls	r3, r3, #21
  409d96:	d538      	bpl.n	409e0a <__ssprint_r+0xba>
  409d98:	4611      	mov	r1, r2
  409d9a:	4650      	mov	r0, sl
  409d9c:	f7fa fa30 	bl	404200 <_malloc_r>
  409da0:	2800      	cmp	r0, #0
  409da2:	d03c      	beq.n	409e1e <__ssprint_r+0xce>
  409da4:	465a      	mov	r2, fp
  409da6:	6921      	ldr	r1, [r4, #16]
  409da8:	9001      	str	r0, [sp, #4]
  409daa:	f7fa fcd9 	bl	404760 <memcpy>
  409dae:	89a2      	ldrh	r2, [r4, #12]
  409db0:	9b01      	ldr	r3, [sp, #4]
  409db2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409dba:	81a2      	strh	r2, [r4, #12]
  409dbc:	eba5 020b 	sub.w	r2, r5, fp
  409dc0:	eb03 000b 	add.w	r0, r3, fp
  409dc4:	6165      	str	r5, [r4, #20]
  409dc6:	6123      	str	r3, [r4, #16]
  409dc8:	6020      	str	r0, [r4, #0]
  409dca:	60a2      	str	r2, [r4, #8]
  409dcc:	4635      	mov	r5, r6
  409dce:	46b3      	mov	fp, r6
  409dd0:	465a      	mov	r2, fp
  409dd2:	4649      	mov	r1, r9
  409dd4:	f7ff fa74 	bl	4092c0 <memmove>
  409dd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409ddc:	68a2      	ldr	r2, [r4, #8]
  409dde:	6820      	ldr	r0, [r4, #0]
  409de0:	1b55      	subs	r5, r2, r5
  409de2:	4458      	add	r0, fp
  409de4:	1b9e      	subs	r6, r3, r6
  409de6:	60a5      	str	r5, [r4, #8]
  409de8:	6020      	str	r0, [r4, #0]
  409dea:	f8c8 6008 	str.w	r6, [r8, #8]
  409dee:	b33e      	cbz	r6, 409e40 <__ssprint_r+0xf0>
  409df0:	687e      	ldr	r6, [r7, #4]
  409df2:	463b      	mov	r3, r7
  409df4:	3708      	adds	r7, #8
  409df6:	2e00      	cmp	r6, #0
  409df8:	d0fa      	beq.n	409df0 <__ssprint_r+0xa0>
  409dfa:	42ae      	cmp	r6, r5
  409dfc:	f8d3 9000 	ldr.w	r9, [r3]
  409e00:	46ab      	mov	fp, r5
  409e02:	d2b2      	bcs.n	409d6a <__ssprint_r+0x1a>
  409e04:	4635      	mov	r5, r6
  409e06:	46b3      	mov	fp, r6
  409e08:	e7e2      	b.n	409dd0 <__ssprint_r+0x80>
  409e0a:	4650      	mov	r0, sl
  409e0c:	f7ff fdb6 	bl	40997c <_realloc_r>
  409e10:	4603      	mov	r3, r0
  409e12:	2800      	cmp	r0, #0
  409e14:	d1d2      	bne.n	409dbc <__ssprint_r+0x6c>
  409e16:	6921      	ldr	r1, [r4, #16]
  409e18:	4650      	mov	r0, sl
  409e1a:	f7fe fee9 	bl	408bf0 <_free_r>
  409e1e:	230c      	movs	r3, #12
  409e20:	f8ca 3000 	str.w	r3, [sl]
  409e24:	89a3      	ldrh	r3, [r4, #12]
  409e26:	2200      	movs	r2, #0
  409e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e2c:	f04f 30ff 	mov.w	r0, #4294967295
  409e30:	81a3      	strh	r3, [r4, #12]
  409e32:	f8c8 2008 	str.w	r2, [r8, #8]
  409e36:	f8c8 2004 	str.w	r2, [r8, #4]
  409e3a:	b003      	add	sp, #12
  409e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e40:	2000      	movs	r0, #0
  409e42:	f8c8 0004 	str.w	r0, [r8, #4]
  409e46:	b003      	add	sp, #12
  409e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409e4c <__sprint_r.part.0>:
  409e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  409e52:	049c      	lsls	r4, r3, #18
  409e54:	4693      	mov	fp, r2
  409e56:	d52f      	bpl.n	409eb8 <__sprint_r.part.0+0x6c>
  409e58:	6893      	ldr	r3, [r2, #8]
  409e5a:	6812      	ldr	r2, [r2, #0]
  409e5c:	b353      	cbz	r3, 409eb4 <__sprint_r.part.0+0x68>
  409e5e:	460e      	mov	r6, r1
  409e60:	4607      	mov	r7, r0
  409e62:	f102 0908 	add.w	r9, r2, #8
  409e66:	e919 0420 	ldmdb	r9, {r5, sl}
  409e6a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  409e6e:	d017      	beq.n	409ea0 <__sprint_r.part.0+0x54>
  409e70:	3d04      	subs	r5, #4
  409e72:	2400      	movs	r4, #0
  409e74:	e001      	b.n	409e7a <__sprint_r.part.0+0x2e>
  409e76:	45a0      	cmp	r8, r4
  409e78:	d010      	beq.n	409e9c <__sprint_r.part.0+0x50>
  409e7a:	4632      	mov	r2, r6
  409e7c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  409e80:	4638      	mov	r0, r7
  409e82:	f000 f999 	bl	40a1b8 <_fputwc_r>
  409e86:	1c43      	adds	r3, r0, #1
  409e88:	f104 0401 	add.w	r4, r4, #1
  409e8c:	d1f3      	bne.n	409e76 <__sprint_r.part.0+0x2a>
  409e8e:	2300      	movs	r3, #0
  409e90:	f8cb 3008 	str.w	r3, [fp, #8]
  409e94:	f8cb 3004 	str.w	r3, [fp, #4]
  409e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e9c:	f8db 3008 	ldr.w	r3, [fp, #8]
  409ea0:	f02a 0a03 	bic.w	sl, sl, #3
  409ea4:	eba3 030a 	sub.w	r3, r3, sl
  409ea8:	f8cb 3008 	str.w	r3, [fp, #8]
  409eac:	f109 0908 	add.w	r9, r9, #8
  409eb0:	2b00      	cmp	r3, #0
  409eb2:	d1d8      	bne.n	409e66 <__sprint_r.part.0+0x1a>
  409eb4:	2000      	movs	r0, #0
  409eb6:	e7ea      	b.n	409e8e <__sprint_r.part.0+0x42>
  409eb8:	f7fe ff80 	bl	408dbc <__sfvwrite_r>
  409ebc:	2300      	movs	r3, #0
  409ebe:	f8cb 3008 	str.w	r3, [fp, #8]
  409ec2:	f8cb 3004 	str.w	r3, [fp, #4]
  409ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409eca:	bf00      	nop

00409ecc <__sprint_r>:
  409ecc:	6893      	ldr	r3, [r2, #8]
  409ece:	b10b      	cbz	r3, 409ed4 <__sprint_r+0x8>
  409ed0:	f7ff bfbc 	b.w	409e4c <__sprint_r.part.0>
  409ed4:	b410      	push	{r4}
  409ed6:	4618      	mov	r0, r3
  409ed8:	6053      	str	r3, [r2, #4]
  409eda:	bc10      	pop	{r4}
  409edc:	4770      	bx	lr
  409ede:	bf00      	nop

00409ee0 <_write_r>:
  409ee0:	b570      	push	{r4, r5, r6, lr}
  409ee2:	460d      	mov	r5, r1
  409ee4:	4c08      	ldr	r4, [pc, #32]	; (409f08 <_write_r+0x28>)
  409ee6:	4611      	mov	r1, r2
  409ee8:	4606      	mov	r6, r0
  409eea:	461a      	mov	r2, r3
  409eec:	4628      	mov	r0, r5
  409eee:	2300      	movs	r3, #0
  409ef0:	6023      	str	r3, [r4, #0]
  409ef2:	f7f6 febb 	bl	400c6c <_write>
  409ef6:	1c43      	adds	r3, r0, #1
  409ef8:	d000      	beq.n	409efc <_write_r+0x1c>
  409efa:	bd70      	pop	{r4, r5, r6, pc}
  409efc:	6823      	ldr	r3, [r4, #0]
  409efe:	2b00      	cmp	r3, #0
  409f00:	d0fb      	beq.n	409efa <_write_r+0x1a>
  409f02:	6033      	str	r3, [r6, #0]
  409f04:	bd70      	pop	{r4, r5, r6, pc}
  409f06:	bf00      	nop
  409f08:	20400e90 	.word	0x20400e90

00409f0c <__register_exitproc>:
  409f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409f10:	4d2c      	ldr	r5, [pc, #176]	; (409fc4 <__register_exitproc+0xb8>)
  409f12:	4606      	mov	r6, r0
  409f14:	6828      	ldr	r0, [r5, #0]
  409f16:	4698      	mov	r8, r3
  409f18:	460f      	mov	r7, r1
  409f1a:	4691      	mov	r9, r2
  409f1c:	f7ff f902 	bl	409124 <__retarget_lock_acquire_recursive>
  409f20:	4b29      	ldr	r3, [pc, #164]	; (409fc8 <__register_exitproc+0xbc>)
  409f22:	681c      	ldr	r4, [r3, #0]
  409f24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409f28:	2b00      	cmp	r3, #0
  409f2a:	d03e      	beq.n	409faa <__register_exitproc+0x9e>
  409f2c:	685a      	ldr	r2, [r3, #4]
  409f2e:	2a1f      	cmp	r2, #31
  409f30:	dc1c      	bgt.n	409f6c <__register_exitproc+0x60>
  409f32:	f102 0e01 	add.w	lr, r2, #1
  409f36:	b176      	cbz	r6, 409f56 <__register_exitproc+0x4a>
  409f38:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409f3c:	2401      	movs	r4, #1
  409f3e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409f42:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409f46:	4094      	lsls	r4, r2
  409f48:	4320      	orrs	r0, r4
  409f4a:	2e02      	cmp	r6, #2
  409f4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409f50:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409f54:	d023      	beq.n	409f9e <__register_exitproc+0x92>
  409f56:	3202      	adds	r2, #2
  409f58:	f8c3 e004 	str.w	lr, [r3, #4]
  409f5c:	6828      	ldr	r0, [r5, #0]
  409f5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409f62:	f7ff f8e1 	bl	409128 <__retarget_lock_release_recursive>
  409f66:	2000      	movs	r0, #0
  409f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409f6c:	4b17      	ldr	r3, [pc, #92]	; (409fcc <__register_exitproc+0xc0>)
  409f6e:	b30b      	cbz	r3, 409fb4 <__register_exitproc+0xa8>
  409f70:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409f74:	f7fa f934 	bl	4041e0 <malloc>
  409f78:	4603      	mov	r3, r0
  409f7a:	b1d8      	cbz	r0, 409fb4 <__register_exitproc+0xa8>
  409f7c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409f80:	6002      	str	r2, [r0, #0]
  409f82:	2100      	movs	r1, #0
  409f84:	6041      	str	r1, [r0, #4]
  409f86:	460a      	mov	r2, r1
  409f88:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409f8c:	f04f 0e01 	mov.w	lr, #1
  409f90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409f94:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409f98:	2e00      	cmp	r6, #0
  409f9a:	d0dc      	beq.n	409f56 <__register_exitproc+0x4a>
  409f9c:	e7cc      	b.n	409f38 <__register_exitproc+0x2c>
  409f9e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409fa2:	430c      	orrs	r4, r1
  409fa4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409fa8:	e7d5      	b.n	409f56 <__register_exitproc+0x4a>
  409faa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409fae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409fb2:	e7bb      	b.n	409f2c <__register_exitproc+0x20>
  409fb4:	6828      	ldr	r0, [r5, #0]
  409fb6:	f7ff f8b7 	bl	409128 <__retarget_lock_release_recursive>
  409fba:	f04f 30ff 	mov.w	r0, #4294967295
  409fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409fc2:	bf00      	nop
  409fc4:	20400868 	.word	0x20400868
  409fc8:	0040b45c 	.word	0x0040b45c
  409fcc:	004041e1 	.word	0x004041e1

00409fd0 <_calloc_r>:
  409fd0:	b510      	push	{r4, lr}
  409fd2:	fb02 f101 	mul.w	r1, r2, r1
  409fd6:	f7fa f913 	bl	404200 <_malloc_r>
  409fda:	4604      	mov	r4, r0
  409fdc:	b1d8      	cbz	r0, 40a016 <_calloc_r+0x46>
  409fde:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409fe2:	f022 0203 	bic.w	r2, r2, #3
  409fe6:	3a04      	subs	r2, #4
  409fe8:	2a24      	cmp	r2, #36	; 0x24
  409fea:	d818      	bhi.n	40a01e <_calloc_r+0x4e>
  409fec:	2a13      	cmp	r2, #19
  409fee:	d914      	bls.n	40a01a <_calloc_r+0x4a>
  409ff0:	2300      	movs	r3, #0
  409ff2:	2a1b      	cmp	r2, #27
  409ff4:	6003      	str	r3, [r0, #0]
  409ff6:	6043      	str	r3, [r0, #4]
  409ff8:	d916      	bls.n	40a028 <_calloc_r+0x58>
  409ffa:	2a24      	cmp	r2, #36	; 0x24
  409ffc:	6083      	str	r3, [r0, #8]
  409ffe:	60c3      	str	r3, [r0, #12]
  40a000:	bf11      	iteee	ne
  40a002:	f100 0210 	addne.w	r2, r0, #16
  40a006:	6103      	streq	r3, [r0, #16]
  40a008:	6143      	streq	r3, [r0, #20]
  40a00a:	f100 0218 	addeq.w	r2, r0, #24
  40a00e:	2300      	movs	r3, #0
  40a010:	6013      	str	r3, [r2, #0]
  40a012:	6053      	str	r3, [r2, #4]
  40a014:	6093      	str	r3, [r2, #8]
  40a016:	4620      	mov	r0, r4
  40a018:	bd10      	pop	{r4, pc}
  40a01a:	4602      	mov	r2, r0
  40a01c:	e7f7      	b.n	40a00e <_calloc_r+0x3e>
  40a01e:	2100      	movs	r1, #0
  40a020:	f7fa fc38 	bl	404894 <memset>
  40a024:	4620      	mov	r0, r4
  40a026:	bd10      	pop	{r4, pc}
  40a028:	f100 0208 	add.w	r2, r0, #8
  40a02c:	e7ef      	b.n	40a00e <_calloc_r+0x3e>
  40a02e:	bf00      	nop

0040a030 <_close_r>:
  40a030:	b538      	push	{r3, r4, r5, lr}
  40a032:	4c07      	ldr	r4, [pc, #28]	; (40a050 <_close_r+0x20>)
  40a034:	2300      	movs	r3, #0
  40a036:	4605      	mov	r5, r0
  40a038:	4608      	mov	r0, r1
  40a03a:	6023      	str	r3, [r4, #0]
  40a03c:	f7f7 fc8e 	bl	40195c <_close>
  40a040:	1c43      	adds	r3, r0, #1
  40a042:	d000      	beq.n	40a046 <_close_r+0x16>
  40a044:	bd38      	pop	{r3, r4, r5, pc}
  40a046:	6823      	ldr	r3, [r4, #0]
  40a048:	2b00      	cmp	r3, #0
  40a04a:	d0fb      	beq.n	40a044 <_close_r+0x14>
  40a04c:	602b      	str	r3, [r5, #0]
  40a04e:	bd38      	pop	{r3, r4, r5, pc}
  40a050:	20400e90 	.word	0x20400e90

0040a054 <_fclose_r>:
  40a054:	b570      	push	{r4, r5, r6, lr}
  40a056:	b159      	cbz	r1, 40a070 <_fclose_r+0x1c>
  40a058:	4605      	mov	r5, r0
  40a05a:	460c      	mov	r4, r1
  40a05c:	b110      	cbz	r0, 40a064 <_fclose_r+0x10>
  40a05e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a060:	2b00      	cmp	r3, #0
  40a062:	d03c      	beq.n	40a0de <_fclose_r+0x8a>
  40a064:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a066:	07d8      	lsls	r0, r3, #31
  40a068:	d505      	bpl.n	40a076 <_fclose_r+0x22>
  40a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a06e:	b92b      	cbnz	r3, 40a07c <_fclose_r+0x28>
  40a070:	2600      	movs	r6, #0
  40a072:	4630      	mov	r0, r6
  40a074:	bd70      	pop	{r4, r5, r6, pc}
  40a076:	89a3      	ldrh	r3, [r4, #12]
  40a078:	0599      	lsls	r1, r3, #22
  40a07a:	d53c      	bpl.n	40a0f6 <_fclose_r+0xa2>
  40a07c:	4621      	mov	r1, r4
  40a07e:	4628      	mov	r0, r5
  40a080:	f7fe fc1c 	bl	4088bc <__sflush_r>
  40a084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a086:	4606      	mov	r6, r0
  40a088:	b133      	cbz	r3, 40a098 <_fclose_r+0x44>
  40a08a:	69e1      	ldr	r1, [r4, #28]
  40a08c:	4628      	mov	r0, r5
  40a08e:	4798      	blx	r3
  40a090:	2800      	cmp	r0, #0
  40a092:	bfb8      	it	lt
  40a094:	f04f 36ff 	movlt.w	r6, #4294967295
  40a098:	89a3      	ldrh	r3, [r4, #12]
  40a09a:	061a      	lsls	r2, r3, #24
  40a09c:	d422      	bmi.n	40a0e4 <_fclose_r+0x90>
  40a09e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a0a0:	b141      	cbz	r1, 40a0b4 <_fclose_r+0x60>
  40a0a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a0a6:	4299      	cmp	r1, r3
  40a0a8:	d002      	beq.n	40a0b0 <_fclose_r+0x5c>
  40a0aa:	4628      	mov	r0, r5
  40a0ac:	f7fe fda0 	bl	408bf0 <_free_r>
  40a0b0:	2300      	movs	r3, #0
  40a0b2:	6323      	str	r3, [r4, #48]	; 0x30
  40a0b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a0b6:	b121      	cbz	r1, 40a0c2 <_fclose_r+0x6e>
  40a0b8:	4628      	mov	r0, r5
  40a0ba:	f7fe fd99 	bl	408bf0 <_free_r>
  40a0be:	2300      	movs	r3, #0
  40a0c0:	6463      	str	r3, [r4, #68]	; 0x44
  40a0c2:	f7fe fd1f 	bl	408b04 <__sfp_lock_acquire>
  40a0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a0c8:	2200      	movs	r2, #0
  40a0ca:	07db      	lsls	r3, r3, #31
  40a0cc:	81a2      	strh	r2, [r4, #12]
  40a0ce:	d50e      	bpl.n	40a0ee <_fclose_r+0x9a>
  40a0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a0d2:	f7ff f825 	bl	409120 <__retarget_lock_close_recursive>
  40a0d6:	f7fe fd1b 	bl	408b10 <__sfp_lock_release>
  40a0da:	4630      	mov	r0, r6
  40a0dc:	bd70      	pop	{r4, r5, r6, pc}
  40a0de:	f7fe fce5 	bl	408aac <__sinit>
  40a0e2:	e7bf      	b.n	40a064 <_fclose_r+0x10>
  40a0e4:	6921      	ldr	r1, [r4, #16]
  40a0e6:	4628      	mov	r0, r5
  40a0e8:	f7fe fd82 	bl	408bf0 <_free_r>
  40a0ec:	e7d7      	b.n	40a09e <_fclose_r+0x4a>
  40a0ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a0f0:	f7ff f81a 	bl	409128 <__retarget_lock_release_recursive>
  40a0f4:	e7ec      	b.n	40a0d0 <_fclose_r+0x7c>
  40a0f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a0f8:	f7ff f814 	bl	409124 <__retarget_lock_acquire_recursive>
  40a0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a100:	2b00      	cmp	r3, #0
  40a102:	d1bb      	bne.n	40a07c <_fclose_r+0x28>
  40a104:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a106:	f016 0601 	ands.w	r6, r6, #1
  40a10a:	d1b1      	bne.n	40a070 <_fclose_r+0x1c>
  40a10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a10e:	f7ff f80b 	bl	409128 <__retarget_lock_release_recursive>
  40a112:	4630      	mov	r0, r6
  40a114:	bd70      	pop	{r4, r5, r6, pc}
  40a116:	bf00      	nop

0040a118 <__fputwc>:
  40a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a11c:	b082      	sub	sp, #8
  40a11e:	4680      	mov	r8, r0
  40a120:	4689      	mov	r9, r1
  40a122:	4614      	mov	r4, r2
  40a124:	f000 f8a2 	bl	40a26c <__locale_mb_cur_max>
  40a128:	2801      	cmp	r0, #1
  40a12a:	d036      	beq.n	40a19a <__fputwc+0x82>
  40a12c:	464a      	mov	r2, r9
  40a12e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a132:	a901      	add	r1, sp, #4
  40a134:	4640      	mov	r0, r8
  40a136:	f000 f941 	bl	40a3bc <_wcrtomb_r>
  40a13a:	1c42      	adds	r2, r0, #1
  40a13c:	4606      	mov	r6, r0
  40a13e:	d025      	beq.n	40a18c <__fputwc+0x74>
  40a140:	b3a8      	cbz	r0, 40a1ae <__fputwc+0x96>
  40a142:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a146:	2500      	movs	r5, #0
  40a148:	f10d 0a04 	add.w	sl, sp, #4
  40a14c:	e009      	b.n	40a162 <__fputwc+0x4a>
  40a14e:	6823      	ldr	r3, [r4, #0]
  40a150:	1c5a      	adds	r2, r3, #1
  40a152:	6022      	str	r2, [r4, #0]
  40a154:	f883 e000 	strb.w	lr, [r3]
  40a158:	3501      	adds	r5, #1
  40a15a:	42b5      	cmp	r5, r6
  40a15c:	d227      	bcs.n	40a1ae <__fputwc+0x96>
  40a15e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a162:	68a3      	ldr	r3, [r4, #8]
  40a164:	3b01      	subs	r3, #1
  40a166:	2b00      	cmp	r3, #0
  40a168:	60a3      	str	r3, [r4, #8]
  40a16a:	daf0      	bge.n	40a14e <__fputwc+0x36>
  40a16c:	69a7      	ldr	r7, [r4, #24]
  40a16e:	42bb      	cmp	r3, r7
  40a170:	4671      	mov	r1, lr
  40a172:	4622      	mov	r2, r4
  40a174:	4640      	mov	r0, r8
  40a176:	db02      	blt.n	40a17e <__fputwc+0x66>
  40a178:	f1be 0f0a 	cmp.w	lr, #10
  40a17c:	d1e7      	bne.n	40a14e <__fputwc+0x36>
  40a17e:	f000 f8c5 	bl	40a30c <__swbuf_r>
  40a182:	1c43      	adds	r3, r0, #1
  40a184:	d1e8      	bne.n	40a158 <__fputwc+0x40>
  40a186:	b002      	add	sp, #8
  40a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a18c:	89a3      	ldrh	r3, [r4, #12]
  40a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a192:	81a3      	strh	r3, [r4, #12]
  40a194:	b002      	add	sp, #8
  40a196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a19a:	f109 33ff 	add.w	r3, r9, #4294967295
  40a19e:	2bfe      	cmp	r3, #254	; 0xfe
  40a1a0:	d8c4      	bhi.n	40a12c <__fputwc+0x14>
  40a1a2:	fa5f fe89 	uxtb.w	lr, r9
  40a1a6:	4606      	mov	r6, r0
  40a1a8:	f88d e004 	strb.w	lr, [sp, #4]
  40a1ac:	e7cb      	b.n	40a146 <__fputwc+0x2e>
  40a1ae:	4648      	mov	r0, r9
  40a1b0:	b002      	add	sp, #8
  40a1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1b6:	bf00      	nop

0040a1b8 <_fputwc_r>:
  40a1b8:	b530      	push	{r4, r5, lr}
  40a1ba:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a1bc:	f013 0f01 	tst.w	r3, #1
  40a1c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a1c4:	4614      	mov	r4, r2
  40a1c6:	b083      	sub	sp, #12
  40a1c8:	4605      	mov	r5, r0
  40a1ca:	b29a      	uxth	r2, r3
  40a1cc:	d101      	bne.n	40a1d2 <_fputwc_r+0x1a>
  40a1ce:	0590      	lsls	r0, r2, #22
  40a1d0:	d51c      	bpl.n	40a20c <_fputwc_r+0x54>
  40a1d2:	0490      	lsls	r0, r2, #18
  40a1d4:	d406      	bmi.n	40a1e4 <_fputwc_r+0x2c>
  40a1d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a1d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a1dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a1e0:	81a3      	strh	r3, [r4, #12]
  40a1e2:	6662      	str	r2, [r4, #100]	; 0x64
  40a1e4:	4628      	mov	r0, r5
  40a1e6:	4622      	mov	r2, r4
  40a1e8:	f7ff ff96 	bl	40a118 <__fputwc>
  40a1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a1ee:	07da      	lsls	r2, r3, #31
  40a1f0:	4605      	mov	r5, r0
  40a1f2:	d402      	bmi.n	40a1fa <_fputwc_r+0x42>
  40a1f4:	89a3      	ldrh	r3, [r4, #12]
  40a1f6:	059b      	lsls	r3, r3, #22
  40a1f8:	d502      	bpl.n	40a200 <_fputwc_r+0x48>
  40a1fa:	4628      	mov	r0, r5
  40a1fc:	b003      	add	sp, #12
  40a1fe:	bd30      	pop	{r4, r5, pc}
  40a200:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a202:	f7fe ff91 	bl	409128 <__retarget_lock_release_recursive>
  40a206:	4628      	mov	r0, r5
  40a208:	b003      	add	sp, #12
  40a20a:	bd30      	pop	{r4, r5, pc}
  40a20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a20e:	9101      	str	r1, [sp, #4]
  40a210:	f7fe ff88 	bl	409124 <__retarget_lock_acquire_recursive>
  40a214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a218:	9901      	ldr	r1, [sp, #4]
  40a21a:	b29a      	uxth	r2, r3
  40a21c:	e7d9      	b.n	40a1d2 <_fputwc_r+0x1a>
  40a21e:	bf00      	nop

0040a220 <_fstat_r>:
  40a220:	b538      	push	{r3, r4, r5, lr}
  40a222:	460b      	mov	r3, r1
  40a224:	4c07      	ldr	r4, [pc, #28]	; (40a244 <_fstat_r+0x24>)
  40a226:	4605      	mov	r5, r0
  40a228:	4611      	mov	r1, r2
  40a22a:	4618      	mov	r0, r3
  40a22c:	2300      	movs	r3, #0
  40a22e:	6023      	str	r3, [r4, #0]
  40a230:	f7f7 fb97 	bl	401962 <_fstat>
  40a234:	1c43      	adds	r3, r0, #1
  40a236:	d000      	beq.n	40a23a <_fstat_r+0x1a>
  40a238:	bd38      	pop	{r3, r4, r5, pc}
  40a23a:	6823      	ldr	r3, [r4, #0]
  40a23c:	2b00      	cmp	r3, #0
  40a23e:	d0fb      	beq.n	40a238 <_fstat_r+0x18>
  40a240:	602b      	str	r3, [r5, #0]
  40a242:	bd38      	pop	{r3, r4, r5, pc}
  40a244:	20400e90 	.word	0x20400e90

0040a248 <_isatty_r>:
  40a248:	b538      	push	{r3, r4, r5, lr}
  40a24a:	4c07      	ldr	r4, [pc, #28]	; (40a268 <_isatty_r+0x20>)
  40a24c:	2300      	movs	r3, #0
  40a24e:	4605      	mov	r5, r0
  40a250:	4608      	mov	r0, r1
  40a252:	6023      	str	r3, [r4, #0]
  40a254:	f7f7 fb8a 	bl	40196c <_isatty>
  40a258:	1c43      	adds	r3, r0, #1
  40a25a:	d000      	beq.n	40a25e <_isatty_r+0x16>
  40a25c:	bd38      	pop	{r3, r4, r5, pc}
  40a25e:	6823      	ldr	r3, [r4, #0]
  40a260:	2b00      	cmp	r3, #0
  40a262:	d0fb      	beq.n	40a25c <_isatty_r+0x14>
  40a264:	602b      	str	r3, [r5, #0]
  40a266:	bd38      	pop	{r3, r4, r5, pc}
  40a268:	20400e90 	.word	0x20400e90

0040a26c <__locale_mb_cur_max>:
  40a26c:	4b04      	ldr	r3, [pc, #16]	; (40a280 <__locale_mb_cur_max+0x14>)
  40a26e:	4a05      	ldr	r2, [pc, #20]	; (40a284 <__locale_mb_cur_max+0x18>)
  40a270:	681b      	ldr	r3, [r3, #0]
  40a272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a274:	2b00      	cmp	r3, #0
  40a276:	bf08      	it	eq
  40a278:	4613      	moveq	r3, r2
  40a27a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a27e:	4770      	bx	lr
  40a280:	20400028 	.word	0x20400028
  40a284:	2040086c 	.word	0x2040086c

0040a288 <_lseek_r>:
  40a288:	b570      	push	{r4, r5, r6, lr}
  40a28a:	460d      	mov	r5, r1
  40a28c:	4c08      	ldr	r4, [pc, #32]	; (40a2b0 <_lseek_r+0x28>)
  40a28e:	4611      	mov	r1, r2
  40a290:	4606      	mov	r6, r0
  40a292:	461a      	mov	r2, r3
  40a294:	4628      	mov	r0, r5
  40a296:	2300      	movs	r3, #0
  40a298:	6023      	str	r3, [r4, #0]
  40a29a:	f7f7 fb69 	bl	401970 <_lseek>
  40a29e:	1c43      	adds	r3, r0, #1
  40a2a0:	d000      	beq.n	40a2a4 <_lseek_r+0x1c>
  40a2a2:	bd70      	pop	{r4, r5, r6, pc}
  40a2a4:	6823      	ldr	r3, [r4, #0]
  40a2a6:	2b00      	cmp	r3, #0
  40a2a8:	d0fb      	beq.n	40a2a2 <_lseek_r+0x1a>
  40a2aa:	6033      	str	r3, [r6, #0]
  40a2ac:	bd70      	pop	{r4, r5, r6, pc}
  40a2ae:	bf00      	nop
  40a2b0:	20400e90 	.word	0x20400e90

0040a2b4 <__ascii_mbtowc>:
  40a2b4:	b082      	sub	sp, #8
  40a2b6:	b149      	cbz	r1, 40a2cc <__ascii_mbtowc+0x18>
  40a2b8:	b15a      	cbz	r2, 40a2d2 <__ascii_mbtowc+0x1e>
  40a2ba:	b16b      	cbz	r3, 40a2d8 <__ascii_mbtowc+0x24>
  40a2bc:	7813      	ldrb	r3, [r2, #0]
  40a2be:	600b      	str	r3, [r1, #0]
  40a2c0:	7812      	ldrb	r2, [r2, #0]
  40a2c2:	1c10      	adds	r0, r2, #0
  40a2c4:	bf18      	it	ne
  40a2c6:	2001      	movne	r0, #1
  40a2c8:	b002      	add	sp, #8
  40a2ca:	4770      	bx	lr
  40a2cc:	a901      	add	r1, sp, #4
  40a2ce:	2a00      	cmp	r2, #0
  40a2d0:	d1f3      	bne.n	40a2ba <__ascii_mbtowc+0x6>
  40a2d2:	4610      	mov	r0, r2
  40a2d4:	b002      	add	sp, #8
  40a2d6:	4770      	bx	lr
  40a2d8:	f06f 0001 	mvn.w	r0, #1
  40a2dc:	e7f4      	b.n	40a2c8 <__ascii_mbtowc+0x14>
  40a2de:	bf00      	nop

0040a2e0 <_read_r>:
  40a2e0:	b570      	push	{r4, r5, r6, lr}
  40a2e2:	460d      	mov	r5, r1
  40a2e4:	4c08      	ldr	r4, [pc, #32]	; (40a308 <_read_r+0x28>)
  40a2e6:	4611      	mov	r1, r2
  40a2e8:	4606      	mov	r6, r0
  40a2ea:	461a      	mov	r2, r3
  40a2ec:	4628      	mov	r0, r5
  40a2ee:	2300      	movs	r3, #0
  40a2f0:	6023      	str	r3, [r4, #0]
  40a2f2:	f7f6 fc9d 	bl	400c30 <_read>
  40a2f6:	1c43      	adds	r3, r0, #1
  40a2f8:	d000      	beq.n	40a2fc <_read_r+0x1c>
  40a2fa:	bd70      	pop	{r4, r5, r6, pc}
  40a2fc:	6823      	ldr	r3, [r4, #0]
  40a2fe:	2b00      	cmp	r3, #0
  40a300:	d0fb      	beq.n	40a2fa <_read_r+0x1a>
  40a302:	6033      	str	r3, [r6, #0]
  40a304:	bd70      	pop	{r4, r5, r6, pc}
  40a306:	bf00      	nop
  40a308:	20400e90 	.word	0x20400e90

0040a30c <__swbuf_r>:
  40a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a30e:	460d      	mov	r5, r1
  40a310:	4614      	mov	r4, r2
  40a312:	4606      	mov	r6, r0
  40a314:	b110      	cbz	r0, 40a31c <__swbuf_r+0x10>
  40a316:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a318:	2b00      	cmp	r3, #0
  40a31a:	d04b      	beq.n	40a3b4 <__swbuf_r+0xa8>
  40a31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a320:	69a3      	ldr	r3, [r4, #24]
  40a322:	60a3      	str	r3, [r4, #8]
  40a324:	b291      	uxth	r1, r2
  40a326:	0708      	lsls	r0, r1, #28
  40a328:	d539      	bpl.n	40a39e <__swbuf_r+0x92>
  40a32a:	6923      	ldr	r3, [r4, #16]
  40a32c:	2b00      	cmp	r3, #0
  40a32e:	d036      	beq.n	40a39e <__swbuf_r+0x92>
  40a330:	b2ed      	uxtb	r5, r5
  40a332:	0489      	lsls	r1, r1, #18
  40a334:	462f      	mov	r7, r5
  40a336:	d515      	bpl.n	40a364 <__swbuf_r+0x58>
  40a338:	6822      	ldr	r2, [r4, #0]
  40a33a:	6961      	ldr	r1, [r4, #20]
  40a33c:	1ad3      	subs	r3, r2, r3
  40a33e:	428b      	cmp	r3, r1
  40a340:	da1c      	bge.n	40a37c <__swbuf_r+0x70>
  40a342:	3301      	adds	r3, #1
  40a344:	68a1      	ldr	r1, [r4, #8]
  40a346:	1c50      	adds	r0, r2, #1
  40a348:	3901      	subs	r1, #1
  40a34a:	60a1      	str	r1, [r4, #8]
  40a34c:	6020      	str	r0, [r4, #0]
  40a34e:	7015      	strb	r5, [r2, #0]
  40a350:	6962      	ldr	r2, [r4, #20]
  40a352:	429a      	cmp	r2, r3
  40a354:	d01a      	beq.n	40a38c <__swbuf_r+0x80>
  40a356:	89a3      	ldrh	r3, [r4, #12]
  40a358:	07db      	lsls	r3, r3, #31
  40a35a:	d501      	bpl.n	40a360 <__swbuf_r+0x54>
  40a35c:	2d0a      	cmp	r5, #10
  40a35e:	d015      	beq.n	40a38c <__swbuf_r+0x80>
  40a360:	4638      	mov	r0, r7
  40a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a364:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a36a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a36e:	81a2      	strh	r2, [r4, #12]
  40a370:	6822      	ldr	r2, [r4, #0]
  40a372:	6661      	str	r1, [r4, #100]	; 0x64
  40a374:	6961      	ldr	r1, [r4, #20]
  40a376:	1ad3      	subs	r3, r2, r3
  40a378:	428b      	cmp	r3, r1
  40a37a:	dbe2      	blt.n	40a342 <__swbuf_r+0x36>
  40a37c:	4621      	mov	r1, r4
  40a37e:	4630      	mov	r0, r6
  40a380:	f7fe fb3c 	bl	4089fc <_fflush_r>
  40a384:	b940      	cbnz	r0, 40a398 <__swbuf_r+0x8c>
  40a386:	6822      	ldr	r2, [r4, #0]
  40a388:	2301      	movs	r3, #1
  40a38a:	e7db      	b.n	40a344 <__swbuf_r+0x38>
  40a38c:	4621      	mov	r1, r4
  40a38e:	4630      	mov	r0, r6
  40a390:	f7fe fb34 	bl	4089fc <_fflush_r>
  40a394:	2800      	cmp	r0, #0
  40a396:	d0e3      	beq.n	40a360 <__swbuf_r+0x54>
  40a398:	f04f 37ff 	mov.w	r7, #4294967295
  40a39c:	e7e0      	b.n	40a360 <__swbuf_r+0x54>
  40a39e:	4621      	mov	r1, r4
  40a3a0:	4630      	mov	r0, r6
  40a3a2:	f7fd fa57 	bl	407854 <__swsetup_r>
  40a3a6:	2800      	cmp	r0, #0
  40a3a8:	d1f6      	bne.n	40a398 <__swbuf_r+0x8c>
  40a3aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a3ae:	6923      	ldr	r3, [r4, #16]
  40a3b0:	b291      	uxth	r1, r2
  40a3b2:	e7bd      	b.n	40a330 <__swbuf_r+0x24>
  40a3b4:	f7fe fb7a 	bl	408aac <__sinit>
  40a3b8:	e7b0      	b.n	40a31c <__swbuf_r+0x10>
  40a3ba:	bf00      	nop

0040a3bc <_wcrtomb_r>:
  40a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a3be:	4606      	mov	r6, r0
  40a3c0:	b085      	sub	sp, #20
  40a3c2:	461f      	mov	r7, r3
  40a3c4:	b189      	cbz	r1, 40a3ea <_wcrtomb_r+0x2e>
  40a3c6:	4c10      	ldr	r4, [pc, #64]	; (40a408 <_wcrtomb_r+0x4c>)
  40a3c8:	4d10      	ldr	r5, [pc, #64]	; (40a40c <_wcrtomb_r+0x50>)
  40a3ca:	6824      	ldr	r4, [r4, #0]
  40a3cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a3ce:	2c00      	cmp	r4, #0
  40a3d0:	bf08      	it	eq
  40a3d2:	462c      	moveq	r4, r5
  40a3d4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a3d8:	47a0      	blx	r4
  40a3da:	1c43      	adds	r3, r0, #1
  40a3dc:	d103      	bne.n	40a3e6 <_wcrtomb_r+0x2a>
  40a3de:	2200      	movs	r2, #0
  40a3e0:	238a      	movs	r3, #138	; 0x8a
  40a3e2:	603a      	str	r2, [r7, #0]
  40a3e4:	6033      	str	r3, [r6, #0]
  40a3e6:	b005      	add	sp, #20
  40a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a3ea:	460c      	mov	r4, r1
  40a3ec:	4906      	ldr	r1, [pc, #24]	; (40a408 <_wcrtomb_r+0x4c>)
  40a3ee:	4a07      	ldr	r2, [pc, #28]	; (40a40c <_wcrtomb_r+0x50>)
  40a3f0:	6809      	ldr	r1, [r1, #0]
  40a3f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a3f4:	2900      	cmp	r1, #0
  40a3f6:	bf08      	it	eq
  40a3f8:	4611      	moveq	r1, r2
  40a3fa:	4622      	mov	r2, r4
  40a3fc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a400:	a901      	add	r1, sp, #4
  40a402:	47a0      	blx	r4
  40a404:	e7e9      	b.n	40a3da <_wcrtomb_r+0x1e>
  40a406:	bf00      	nop
  40a408:	20400028 	.word	0x20400028
  40a40c:	2040086c 	.word	0x2040086c

0040a410 <__ascii_wctomb>:
  40a410:	b121      	cbz	r1, 40a41c <__ascii_wctomb+0xc>
  40a412:	2aff      	cmp	r2, #255	; 0xff
  40a414:	d804      	bhi.n	40a420 <__ascii_wctomb+0x10>
  40a416:	700a      	strb	r2, [r1, #0]
  40a418:	2001      	movs	r0, #1
  40a41a:	4770      	bx	lr
  40a41c:	4608      	mov	r0, r1
  40a41e:	4770      	bx	lr
  40a420:	238a      	movs	r3, #138	; 0x8a
  40a422:	6003      	str	r3, [r0, #0]
  40a424:	f04f 30ff 	mov.w	r0, #4294967295
  40a428:	4770      	bx	lr
  40a42a:	bf00      	nop

0040a42c <__aeabi_drsub>:
  40a42c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a430:	e002      	b.n	40a438 <__adddf3>
  40a432:	bf00      	nop

0040a434 <__aeabi_dsub>:
  40a434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a438 <__adddf3>:
  40a438:	b530      	push	{r4, r5, lr}
  40a43a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a43e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a442:	ea94 0f05 	teq	r4, r5
  40a446:	bf08      	it	eq
  40a448:	ea90 0f02 	teqeq	r0, r2
  40a44c:	bf1f      	itttt	ne
  40a44e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a452:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a45a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a45e:	f000 80e2 	beq.w	40a626 <__adddf3+0x1ee>
  40a462:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a46a:	bfb8      	it	lt
  40a46c:	426d      	neglt	r5, r5
  40a46e:	dd0c      	ble.n	40a48a <__adddf3+0x52>
  40a470:	442c      	add	r4, r5
  40a472:	ea80 0202 	eor.w	r2, r0, r2
  40a476:	ea81 0303 	eor.w	r3, r1, r3
  40a47a:	ea82 0000 	eor.w	r0, r2, r0
  40a47e:	ea83 0101 	eor.w	r1, r3, r1
  40a482:	ea80 0202 	eor.w	r2, r0, r2
  40a486:	ea81 0303 	eor.w	r3, r1, r3
  40a48a:	2d36      	cmp	r5, #54	; 0x36
  40a48c:	bf88      	it	hi
  40a48e:	bd30      	pophi	{r4, r5, pc}
  40a490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a494:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a49c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a4a0:	d002      	beq.n	40a4a8 <__adddf3+0x70>
  40a4a2:	4240      	negs	r0, r0
  40a4a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a4a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a4ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a4b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a4b4:	d002      	beq.n	40a4bc <__adddf3+0x84>
  40a4b6:	4252      	negs	r2, r2
  40a4b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a4bc:	ea94 0f05 	teq	r4, r5
  40a4c0:	f000 80a7 	beq.w	40a612 <__adddf3+0x1da>
  40a4c4:	f1a4 0401 	sub.w	r4, r4, #1
  40a4c8:	f1d5 0e20 	rsbs	lr, r5, #32
  40a4cc:	db0d      	blt.n	40a4ea <__adddf3+0xb2>
  40a4ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a4d2:	fa22 f205 	lsr.w	r2, r2, r5
  40a4d6:	1880      	adds	r0, r0, r2
  40a4d8:	f141 0100 	adc.w	r1, r1, #0
  40a4dc:	fa03 f20e 	lsl.w	r2, r3, lr
  40a4e0:	1880      	adds	r0, r0, r2
  40a4e2:	fa43 f305 	asr.w	r3, r3, r5
  40a4e6:	4159      	adcs	r1, r3
  40a4e8:	e00e      	b.n	40a508 <__adddf3+0xd0>
  40a4ea:	f1a5 0520 	sub.w	r5, r5, #32
  40a4ee:	f10e 0e20 	add.w	lr, lr, #32
  40a4f2:	2a01      	cmp	r2, #1
  40a4f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a4f8:	bf28      	it	cs
  40a4fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a4fe:	fa43 f305 	asr.w	r3, r3, r5
  40a502:	18c0      	adds	r0, r0, r3
  40a504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a50c:	d507      	bpl.n	40a51e <__adddf3+0xe6>
  40a50e:	f04f 0e00 	mov.w	lr, #0
  40a512:	f1dc 0c00 	rsbs	ip, ip, #0
  40a516:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a51a:	eb6e 0101 	sbc.w	r1, lr, r1
  40a51e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a522:	d31b      	bcc.n	40a55c <__adddf3+0x124>
  40a524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a528:	d30c      	bcc.n	40a544 <__adddf3+0x10c>
  40a52a:	0849      	lsrs	r1, r1, #1
  40a52c:	ea5f 0030 	movs.w	r0, r0, rrx
  40a530:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a534:	f104 0401 	add.w	r4, r4, #1
  40a538:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a53c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a540:	f080 809a 	bcs.w	40a678 <__adddf3+0x240>
  40a544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a548:	bf08      	it	eq
  40a54a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a54e:	f150 0000 	adcs.w	r0, r0, #0
  40a552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a556:	ea41 0105 	orr.w	r1, r1, r5
  40a55a:	bd30      	pop	{r4, r5, pc}
  40a55c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a560:	4140      	adcs	r0, r0
  40a562:	eb41 0101 	adc.w	r1, r1, r1
  40a566:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a56a:	f1a4 0401 	sub.w	r4, r4, #1
  40a56e:	d1e9      	bne.n	40a544 <__adddf3+0x10c>
  40a570:	f091 0f00 	teq	r1, #0
  40a574:	bf04      	itt	eq
  40a576:	4601      	moveq	r1, r0
  40a578:	2000      	moveq	r0, #0
  40a57a:	fab1 f381 	clz	r3, r1
  40a57e:	bf08      	it	eq
  40a580:	3320      	addeq	r3, #32
  40a582:	f1a3 030b 	sub.w	r3, r3, #11
  40a586:	f1b3 0220 	subs.w	r2, r3, #32
  40a58a:	da0c      	bge.n	40a5a6 <__adddf3+0x16e>
  40a58c:	320c      	adds	r2, #12
  40a58e:	dd08      	ble.n	40a5a2 <__adddf3+0x16a>
  40a590:	f102 0c14 	add.w	ip, r2, #20
  40a594:	f1c2 020c 	rsb	r2, r2, #12
  40a598:	fa01 f00c 	lsl.w	r0, r1, ip
  40a59c:	fa21 f102 	lsr.w	r1, r1, r2
  40a5a0:	e00c      	b.n	40a5bc <__adddf3+0x184>
  40a5a2:	f102 0214 	add.w	r2, r2, #20
  40a5a6:	bfd8      	it	le
  40a5a8:	f1c2 0c20 	rsble	ip, r2, #32
  40a5ac:	fa01 f102 	lsl.w	r1, r1, r2
  40a5b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a5b4:	bfdc      	itt	le
  40a5b6:	ea41 010c 	orrle.w	r1, r1, ip
  40a5ba:	4090      	lslle	r0, r2
  40a5bc:	1ae4      	subs	r4, r4, r3
  40a5be:	bfa2      	ittt	ge
  40a5c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a5c4:	4329      	orrge	r1, r5
  40a5c6:	bd30      	popge	{r4, r5, pc}
  40a5c8:	ea6f 0404 	mvn.w	r4, r4
  40a5cc:	3c1f      	subs	r4, #31
  40a5ce:	da1c      	bge.n	40a60a <__adddf3+0x1d2>
  40a5d0:	340c      	adds	r4, #12
  40a5d2:	dc0e      	bgt.n	40a5f2 <__adddf3+0x1ba>
  40a5d4:	f104 0414 	add.w	r4, r4, #20
  40a5d8:	f1c4 0220 	rsb	r2, r4, #32
  40a5dc:	fa20 f004 	lsr.w	r0, r0, r4
  40a5e0:	fa01 f302 	lsl.w	r3, r1, r2
  40a5e4:	ea40 0003 	orr.w	r0, r0, r3
  40a5e8:	fa21 f304 	lsr.w	r3, r1, r4
  40a5ec:	ea45 0103 	orr.w	r1, r5, r3
  40a5f0:	bd30      	pop	{r4, r5, pc}
  40a5f2:	f1c4 040c 	rsb	r4, r4, #12
  40a5f6:	f1c4 0220 	rsb	r2, r4, #32
  40a5fa:	fa20 f002 	lsr.w	r0, r0, r2
  40a5fe:	fa01 f304 	lsl.w	r3, r1, r4
  40a602:	ea40 0003 	orr.w	r0, r0, r3
  40a606:	4629      	mov	r1, r5
  40a608:	bd30      	pop	{r4, r5, pc}
  40a60a:	fa21 f004 	lsr.w	r0, r1, r4
  40a60e:	4629      	mov	r1, r5
  40a610:	bd30      	pop	{r4, r5, pc}
  40a612:	f094 0f00 	teq	r4, #0
  40a616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a61a:	bf06      	itte	eq
  40a61c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a620:	3401      	addeq	r4, #1
  40a622:	3d01      	subne	r5, #1
  40a624:	e74e      	b.n	40a4c4 <__adddf3+0x8c>
  40a626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a62a:	bf18      	it	ne
  40a62c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a630:	d029      	beq.n	40a686 <__adddf3+0x24e>
  40a632:	ea94 0f05 	teq	r4, r5
  40a636:	bf08      	it	eq
  40a638:	ea90 0f02 	teqeq	r0, r2
  40a63c:	d005      	beq.n	40a64a <__adddf3+0x212>
  40a63e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a642:	bf04      	itt	eq
  40a644:	4619      	moveq	r1, r3
  40a646:	4610      	moveq	r0, r2
  40a648:	bd30      	pop	{r4, r5, pc}
  40a64a:	ea91 0f03 	teq	r1, r3
  40a64e:	bf1e      	ittt	ne
  40a650:	2100      	movne	r1, #0
  40a652:	2000      	movne	r0, #0
  40a654:	bd30      	popne	{r4, r5, pc}
  40a656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a65a:	d105      	bne.n	40a668 <__adddf3+0x230>
  40a65c:	0040      	lsls	r0, r0, #1
  40a65e:	4149      	adcs	r1, r1
  40a660:	bf28      	it	cs
  40a662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a666:	bd30      	pop	{r4, r5, pc}
  40a668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a66c:	bf3c      	itt	cc
  40a66e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a672:	bd30      	popcc	{r4, r5, pc}
  40a674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a67c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a680:	f04f 0000 	mov.w	r0, #0
  40a684:	bd30      	pop	{r4, r5, pc}
  40a686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a68a:	bf1a      	itte	ne
  40a68c:	4619      	movne	r1, r3
  40a68e:	4610      	movne	r0, r2
  40a690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a694:	bf1c      	itt	ne
  40a696:	460b      	movne	r3, r1
  40a698:	4602      	movne	r2, r0
  40a69a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a69e:	bf06      	itte	eq
  40a6a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a6a4:	ea91 0f03 	teqeq	r1, r3
  40a6a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a6ac:	bd30      	pop	{r4, r5, pc}
  40a6ae:	bf00      	nop

0040a6b0 <__aeabi_ui2d>:
  40a6b0:	f090 0f00 	teq	r0, #0
  40a6b4:	bf04      	itt	eq
  40a6b6:	2100      	moveq	r1, #0
  40a6b8:	4770      	bxeq	lr
  40a6ba:	b530      	push	{r4, r5, lr}
  40a6bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a6c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a6c4:	f04f 0500 	mov.w	r5, #0
  40a6c8:	f04f 0100 	mov.w	r1, #0
  40a6cc:	e750      	b.n	40a570 <__adddf3+0x138>
  40a6ce:	bf00      	nop

0040a6d0 <__aeabi_i2d>:
  40a6d0:	f090 0f00 	teq	r0, #0
  40a6d4:	bf04      	itt	eq
  40a6d6:	2100      	moveq	r1, #0
  40a6d8:	4770      	bxeq	lr
  40a6da:	b530      	push	{r4, r5, lr}
  40a6dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a6e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a6e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a6e8:	bf48      	it	mi
  40a6ea:	4240      	negmi	r0, r0
  40a6ec:	f04f 0100 	mov.w	r1, #0
  40a6f0:	e73e      	b.n	40a570 <__adddf3+0x138>
  40a6f2:	bf00      	nop

0040a6f4 <__aeabi_f2d>:
  40a6f4:	0042      	lsls	r2, r0, #1
  40a6f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a6fa:	ea4f 0131 	mov.w	r1, r1, rrx
  40a6fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a702:	bf1f      	itttt	ne
  40a704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a70c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a710:	4770      	bxne	lr
  40a712:	f092 0f00 	teq	r2, #0
  40a716:	bf14      	ite	ne
  40a718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a71c:	4770      	bxeq	lr
  40a71e:	b530      	push	{r4, r5, lr}
  40a720:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a72c:	e720      	b.n	40a570 <__adddf3+0x138>
  40a72e:	bf00      	nop

0040a730 <__aeabi_ul2d>:
  40a730:	ea50 0201 	orrs.w	r2, r0, r1
  40a734:	bf08      	it	eq
  40a736:	4770      	bxeq	lr
  40a738:	b530      	push	{r4, r5, lr}
  40a73a:	f04f 0500 	mov.w	r5, #0
  40a73e:	e00a      	b.n	40a756 <__aeabi_l2d+0x16>

0040a740 <__aeabi_l2d>:
  40a740:	ea50 0201 	orrs.w	r2, r0, r1
  40a744:	bf08      	it	eq
  40a746:	4770      	bxeq	lr
  40a748:	b530      	push	{r4, r5, lr}
  40a74a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a74e:	d502      	bpl.n	40a756 <__aeabi_l2d+0x16>
  40a750:	4240      	negs	r0, r0
  40a752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a756:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a75a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a75e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a762:	f43f aedc 	beq.w	40a51e <__adddf3+0xe6>
  40a766:	f04f 0203 	mov.w	r2, #3
  40a76a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a76e:	bf18      	it	ne
  40a770:	3203      	addne	r2, #3
  40a772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a776:	bf18      	it	ne
  40a778:	3203      	addne	r2, #3
  40a77a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a77e:	f1c2 0320 	rsb	r3, r2, #32
  40a782:	fa00 fc03 	lsl.w	ip, r0, r3
  40a786:	fa20 f002 	lsr.w	r0, r0, r2
  40a78a:	fa01 fe03 	lsl.w	lr, r1, r3
  40a78e:	ea40 000e 	orr.w	r0, r0, lr
  40a792:	fa21 f102 	lsr.w	r1, r1, r2
  40a796:	4414      	add	r4, r2
  40a798:	e6c1      	b.n	40a51e <__adddf3+0xe6>
  40a79a:	bf00      	nop

0040a79c <__aeabi_dmul>:
  40a79c:	b570      	push	{r4, r5, r6, lr}
  40a79e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a7a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a7a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a7aa:	bf1d      	ittte	ne
  40a7ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a7b0:	ea94 0f0c 	teqne	r4, ip
  40a7b4:	ea95 0f0c 	teqne	r5, ip
  40a7b8:	f000 f8de 	bleq	40a978 <__aeabi_dmul+0x1dc>
  40a7bc:	442c      	add	r4, r5
  40a7be:	ea81 0603 	eor.w	r6, r1, r3
  40a7c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a7c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a7ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a7ce:	bf18      	it	ne
  40a7d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a7d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a7dc:	d038      	beq.n	40a850 <__aeabi_dmul+0xb4>
  40a7de:	fba0 ce02 	umull	ip, lr, r0, r2
  40a7e2:	f04f 0500 	mov.w	r5, #0
  40a7e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a7ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a7ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a7f2:	f04f 0600 	mov.w	r6, #0
  40a7f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a7fa:	f09c 0f00 	teq	ip, #0
  40a7fe:	bf18      	it	ne
  40a800:	f04e 0e01 	orrne.w	lr, lr, #1
  40a804:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a808:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a80c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a810:	d204      	bcs.n	40a81c <__aeabi_dmul+0x80>
  40a812:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a816:	416d      	adcs	r5, r5
  40a818:	eb46 0606 	adc.w	r6, r6, r6
  40a81c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a820:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a824:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a828:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a82c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a830:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a834:	bf88      	it	hi
  40a836:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a83a:	d81e      	bhi.n	40a87a <__aeabi_dmul+0xde>
  40a83c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a840:	bf08      	it	eq
  40a842:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a846:	f150 0000 	adcs.w	r0, r0, #0
  40a84a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a84e:	bd70      	pop	{r4, r5, r6, pc}
  40a850:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a854:	ea46 0101 	orr.w	r1, r6, r1
  40a858:	ea40 0002 	orr.w	r0, r0, r2
  40a85c:	ea81 0103 	eor.w	r1, r1, r3
  40a860:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a864:	bfc2      	ittt	gt
  40a866:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a86e:	bd70      	popgt	{r4, r5, r6, pc}
  40a870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a874:	f04f 0e00 	mov.w	lr, #0
  40a878:	3c01      	subs	r4, #1
  40a87a:	f300 80ab 	bgt.w	40a9d4 <__aeabi_dmul+0x238>
  40a87e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a882:	bfde      	ittt	le
  40a884:	2000      	movle	r0, #0
  40a886:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a88a:	bd70      	pople	{r4, r5, r6, pc}
  40a88c:	f1c4 0400 	rsb	r4, r4, #0
  40a890:	3c20      	subs	r4, #32
  40a892:	da35      	bge.n	40a900 <__aeabi_dmul+0x164>
  40a894:	340c      	adds	r4, #12
  40a896:	dc1b      	bgt.n	40a8d0 <__aeabi_dmul+0x134>
  40a898:	f104 0414 	add.w	r4, r4, #20
  40a89c:	f1c4 0520 	rsb	r5, r4, #32
  40a8a0:	fa00 f305 	lsl.w	r3, r0, r5
  40a8a4:	fa20 f004 	lsr.w	r0, r0, r4
  40a8a8:	fa01 f205 	lsl.w	r2, r1, r5
  40a8ac:	ea40 0002 	orr.w	r0, r0, r2
  40a8b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a8b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a8b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a8bc:	fa21 f604 	lsr.w	r6, r1, r4
  40a8c0:	eb42 0106 	adc.w	r1, r2, r6
  40a8c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a8c8:	bf08      	it	eq
  40a8ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a8ce:	bd70      	pop	{r4, r5, r6, pc}
  40a8d0:	f1c4 040c 	rsb	r4, r4, #12
  40a8d4:	f1c4 0520 	rsb	r5, r4, #32
  40a8d8:	fa00 f304 	lsl.w	r3, r0, r4
  40a8dc:	fa20 f005 	lsr.w	r0, r0, r5
  40a8e0:	fa01 f204 	lsl.w	r2, r1, r4
  40a8e4:	ea40 0002 	orr.w	r0, r0, r2
  40a8e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a8ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a8f0:	f141 0100 	adc.w	r1, r1, #0
  40a8f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a8f8:	bf08      	it	eq
  40a8fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a8fe:	bd70      	pop	{r4, r5, r6, pc}
  40a900:	f1c4 0520 	rsb	r5, r4, #32
  40a904:	fa00 f205 	lsl.w	r2, r0, r5
  40a908:	ea4e 0e02 	orr.w	lr, lr, r2
  40a90c:	fa20 f304 	lsr.w	r3, r0, r4
  40a910:	fa01 f205 	lsl.w	r2, r1, r5
  40a914:	ea43 0302 	orr.w	r3, r3, r2
  40a918:	fa21 f004 	lsr.w	r0, r1, r4
  40a91c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a920:	fa21 f204 	lsr.w	r2, r1, r4
  40a924:	ea20 0002 	bic.w	r0, r0, r2
  40a928:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a92c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a930:	bf08      	it	eq
  40a932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a936:	bd70      	pop	{r4, r5, r6, pc}
  40a938:	f094 0f00 	teq	r4, #0
  40a93c:	d10f      	bne.n	40a95e <__aeabi_dmul+0x1c2>
  40a93e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a942:	0040      	lsls	r0, r0, #1
  40a944:	eb41 0101 	adc.w	r1, r1, r1
  40a948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a94c:	bf08      	it	eq
  40a94e:	3c01      	subeq	r4, #1
  40a950:	d0f7      	beq.n	40a942 <__aeabi_dmul+0x1a6>
  40a952:	ea41 0106 	orr.w	r1, r1, r6
  40a956:	f095 0f00 	teq	r5, #0
  40a95a:	bf18      	it	ne
  40a95c:	4770      	bxne	lr
  40a95e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a962:	0052      	lsls	r2, r2, #1
  40a964:	eb43 0303 	adc.w	r3, r3, r3
  40a968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a96c:	bf08      	it	eq
  40a96e:	3d01      	subeq	r5, #1
  40a970:	d0f7      	beq.n	40a962 <__aeabi_dmul+0x1c6>
  40a972:	ea43 0306 	orr.w	r3, r3, r6
  40a976:	4770      	bx	lr
  40a978:	ea94 0f0c 	teq	r4, ip
  40a97c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a980:	bf18      	it	ne
  40a982:	ea95 0f0c 	teqne	r5, ip
  40a986:	d00c      	beq.n	40a9a2 <__aeabi_dmul+0x206>
  40a988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a98c:	bf18      	it	ne
  40a98e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a992:	d1d1      	bne.n	40a938 <__aeabi_dmul+0x19c>
  40a994:	ea81 0103 	eor.w	r1, r1, r3
  40a998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a99c:	f04f 0000 	mov.w	r0, #0
  40a9a0:	bd70      	pop	{r4, r5, r6, pc}
  40a9a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a9a6:	bf06      	itte	eq
  40a9a8:	4610      	moveq	r0, r2
  40a9aa:	4619      	moveq	r1, r3
  40a9ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a9b0:	d019      	beq.n	40a9e6 <__aeabi_dmul+0x24a>
  40a9b2:	ea94 0f0c 	teq	r4, ip
  40a9b6:	d102      	bne.n	40a9be <__aeabi_dmul+0x222>
  40a9b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a9bc:	d113      	bne.n	40a9e6 <__aeabi_dmul+0x24a>
  40a9be:	ea95 0f0c 	teq	r5, ip
  40a9c2:	d105      	bne.n	40a9d0 <__aeabi_dmul+0x234>
  40a9c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a9c8:	bf1c      	itt	ne
  40a9ca:	4610      	movne	r0, r2
  40a9cc:	4619      	movne	r1, r3
  40a9ce:	d10a      	bne.n	40a9e6 <__aeabi_dmul+0x24a>
  40a9d0:	ea81 0103 	eor.w	r1, r1, r3
  40a9d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a9d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a9dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a9e0:	f04f 0000 	mov.w	r0, #0
  40a9e4:	bd70      	pop	{r4, r5, r6, pc}
  40a9e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a9ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a9ee:	bd70      	pop	{r4, r5, r6, pc}

0040a9f0 <__aeabi_ddiv>:
  40a9f0:	b570      	push	{r4, r5, r6, lr}
  40a9f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a9f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a9fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a9fe:	bf1d      	ittte	ne
  40aa00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40aa04:	ea94 0f0c 	teqne	r4, ip
  40aa08:	ea95 0f0c 	teqne	r5, ip
  40aa0c:	f000 f8a7 	bleq	40ab5e <__aeabi_ddiv+0x16e>
  40aa10:	eba4 0405 	sub.w	r4, r4, r5
  40aa14:	ea81 0e03 	eor.w	lr, r1, r3
  40aa18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40aa1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40aa20:	f000 8088 	beq.w	40ab34 <__aeabi_ddiv+0x144>
  40aa24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40aa28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40aa2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40aa30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40aa34:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40aa38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40aa3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40aa40:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40aa44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40aa48:	429d      	cmp	r5, r3
  40aa4a:	bf08      	it	eq
  40aa4c:	4296      	cmpeq	r6, r2
  40aa4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40aa52:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40aa56:	d202      	bcs.n	40aa5e <__aeabi_ddiv+0x6e>
  40aa58:	085b      	lsrs	r3, r3, #1
  40aa5a:	ea4f 0232 	mov.w	r2, r2, rrx
  40aa5e:	1ab6      	subs	r6, r6, r2
  40aa60:	eb65 0503 	sbc.w	r5, r5, r3
  40aa64:	085b      	lsrs	r3, r3, #1
  40aa66:	ea4f 0232 	mov.w	r2, r2, rrx
  40aa6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40aa6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40aa72:	ebb6 0e02 	subs.w	lr, r6, r2
  40aa76:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aa7a:	bf22      	ittt	cs
  40aa7c:	1ab6      	subcs	r6, r6, r2
  40aa7e:	4675      	movcs	r5, lr
  40aa80:	ea40 000c 	orrcs.w	r0, r0, ip
  40aa84:	085b      	lsrs	r3, r3, #1
  40aa86:	ea4f 0232 	mov.w	r2, r2, rrx
  40aa8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40aa8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aa92:	bf22      	ittt	cs
  40aa94:	1ab6      	subcs	r6, r6, r2
  40aa96:	4675      	movcs	r5, lr
  40aa98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40aa9c:	085b      	lsrs	r3, r3, #1
  40aa9e:	ea4f 0232 	mov.w	r2, r2, rrx
  40aaa2:	ebb6 0e02 	subs.w	lr, r6, r2
  40aaa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aaaa:	bf22      	ittt	cs
  40aaac:	1ab6      	subcs	r6, r6, r2
  40aaae:	4675      	movcs	r5, lr
  40aab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40aab4:	085b      	lsrs	r3, r3, #1
  40aab6:	ea4f 0232 	mov.w	r2, r2, rrx
  40aaba:	ebb6 0e02 	subs.w	lr, r6, r2
  40aabe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aac2:	bf22      	ittt	cs
  40aac4:	1ab6      	subcs	r6, r6, r2
  40aac6:	4675      	movcs	r5, lr
  40aac8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40aacc:	ea55 0e06 	orrs.w	lr, r5, r6
  40aad0:	d018      	beq.n	40ab04 <__aeabi_ddiv+0x114>
  40aad2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40aad6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40aada:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40aade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40aae2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40aae6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40aaea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40aaee:	d1c0      	bne.n	40aa72 <__aeabi_ddiv+0x82>
  40aaf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aaf4:	d10b      	bne.n	40ab0e <__aeabi_ddiv+0x11e>
  40aaf6:	ea41 0100 	orr.w	r1, r1, r0
  40aafa:	f04f 0000 	mov.w	r0, #0
  40aafe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ab02:	e7b6      	b.n	40aa72 <__aeabi_ddiv+0x82>
  40ab04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ab08:	bf04      	itt	eq
  40ab0a:	4301      	orreq	r1, r0
  40ab0c:	2000      	moveq	r0, #0
  40ab0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ab12:	bf88      	it	hi
  40ab14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ab18:	f63f aeaf 	bhi.w	40a87a <__aeabi_dmul+0xde>
  40ab1c:	ebb5 0c03 	subs.w	ip, r5, r3
  40ab20:	bf04      	itt	eq
  40ab22:	ebb6 0c02 	subseq.w	ip, r6, r2
  40ab26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ab2a:	f150 0000 	adcs.w	r0, r0, #0
  40ab2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ab32:	bd70      	pop	{r4, r5, r6, pc}
  40ab34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ab38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ab3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40ab40:	bfc2      	ittt	gt
  40ab42:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ab46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ab4a:	bd70      	popgt	{r4, r5, r6, pc}
  40ab4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ab50:	f04f 0e00 	mov.w	lr, #0
  40ab54:	3c01      	subs	r4, #1
  40ab56:	e690      	b.n	40a87a <__aeabi_dmul+0xde>
  40ab58:	ea45 0e06 	orr.w	lr, r5, r6
  40ab5c:	e68d      	b.n	40a87a <__aeabi_dmul+0xde>
  40ab5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ab62:	ea94 0f0c 	teq	r4, ip
  40ab66:	bf08      	it	eq
  40ab68:	ea95 0f0c 	teqeq	r5, ip
  40ab6c:	f43f af3b 	beq.w	40a9e6 <__aeabi_dmul+0x24a>
  40ab70:	ea94 0f0c 	teq	r4, ip
  40ab74:	d10a      	bne.n	40ab8c <__aeabi_ddiv+0x19c>
  40ab76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ab7a:	f47f af34 	bne.w	40a9e6 <__aeabi_dmul+0x24a>
  40ab7e:	ea95 0f0c 	teq	r5, ip
  40ab82:	f47f af25 	bne.w	40a9d0 <__aeabi_dmul+0x234>
  40ab86:	4610      	mov	r0, r2
  40ab88:	4619      	mov	r1, r3
  40ab8a:	e72c      	b.n	40a9e6 <__aeabi_dmul+0x24a>
  40ab8c:	ea95 0f0c 	teq	r5, ip
  40ab90:	d106      	bne.n	40aba0 <__aeabi_ddiv+0x1b0>
  40ab92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ab96:	f43f aefd 	beq.w	40a994 <__aeabi_dmul+0x1f8>
  40ab9a:	4610      	mov	r0, r2
  40ab9c:	4619      	mov	r1, r3
  40ab9e:	e722      	b.n	40a9e6 <__aeabi_dmul+0x24a>
  40aba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aba4:	bf18      	it	ne
  40aba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40abaa:	f47f aec5 	bne.w	40a938 <__aeabi_dmul+0x19c>
  40abae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40abb2:	f47f af0d 	bne.w	40a9d0 <__aeabi_dmul+0x234>
  40abb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40abba:	f47f aeeb 	bne.w	40a994 <__aeabi_dmul+0x1f8>
  40abbe:	e712      	b.n	40a9e6 <__aeabi_dmul+0x24a>

0040abc0 <__gedf2>:
  40abc0:	f04f 3cff 	mov.w	ip, #4294967295
  40abc4:	e006      	b.n	40abd4 <__cmpdf2+0x4>
  40abc6:	bf00      	nop

0040abc8 <__ledf2>:
  40abc8:	f04f 0c01 	mov.w	ip, #1
  40abcc:	e002      	b.n	40abd4 <__cmpdf2+0x4>
  40abce:	bf00      	nop

0040abd0 <__cmpdf2>:
  40abd0:	f04f 0c01 	mov.w	ip, #1
  40abd4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40abd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40abdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40abe0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40abe4:	bf18      	it	ne
  40abe6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40abea:	d01b      	beq.n	40ac24 <__cmpdf2+0x54>
  40abec:	b001      	add	sp, #4
  40abee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40abf2:	bf0c      	ite	eq
  40abf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40abf8:	ea91 0f03 	teqne	r1, r3
  40abfc:	bf02      	ittt	eq
  40abfe:	ea90 0f02 	teqeq	r0, r2
  40ac02:	2000      	moveq	r0, #0
  40ac04:	4770      	bxeq	lr
  40ac06:	f110 0f00 	cmn.w	r0, #0
  40ac0a:	ea91 0f03 	teq	r1, r3
  40ac0e:	bf58      	it	pl
  40ac10:	4299      	cmppl	r1, r3
  40ac12:	bf08      	it	eq
  40ac14:	4290      	cmpeq	r0, r2
  40ac16:	bf2c      	ite	cs
  40ac18:	17d8      	asrcs	r0, r3, #31
  40ac1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ac1e:	f040 0001 	orr.w	r0, r0, #1
  40ac22:	4770      	bx	lr
  40ac24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ac28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac2c:	d102      	bne.n	40ac34 <__cmpdf2+0x64>
  40ac2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ac32:	d107      	bne.n	40ac44 <__cmpdf2+0x74>
  40ac34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ac38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac3c:	d1d6      	bne.n	40abec <__cmpdf2+0x1c>
  40ac3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ac42:	d0d3      	beq.n	40abec <__cmpdf2+0x1c>
  40ac44:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ac48:	4770      	bx	lr
  40ac4a:	bf00      	nop

0040ac4c <__aeabi_cdrcmple>:
  40ac4c:	4684      	mov	ip, r0
  40ac4e:	4610      	mov	r0, r2
  40ac50:	4662      	mov	r2, ip
  40ac52:	468c      	mov	ip, r1
  40ac54:	4619      	mov	r1, r3
  40ac56:	4663      	mov	r3, ip
  40ac58:	e000      	b.n	40ac5c <__aeabi_cdcmpeq>
  40ac5a:	bf00      	nop

0040ac5c <__aeabi_cdcmpeq>:
  40ac5c:	b501      	push	{r0, lr}
  40ac5e:	f7ff ffb7 	bl	40abd0 <__cmpdf2>
  40ac62:	2800      	cmp	r0, #0
  40ac64:	bf48      	it	mi
  40ac66:	f110 0f00 	cmnmi.w	r0, #0
  40ac6a:	bd01      	pop	{r0, pc}

0040ac6c <__aeabi_dcmpeq>:
  40ac6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ac70:	f7ff fff4 	bl	40ac5c <__aeabi_cdcmpeq>
  40ac74:	bf0c      	ite	eq
  40ac76:	2001      	moveq	r0, #1
  40ac78:	2000      	movne	r0, #0
  40ac7a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ac7e:	bf00      	nop

0040ac80 <__aeabi_dcmplt>:
  40ac80:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ac84:	f7ff ffea 	bl	40ac5c <__aeabi_cdcmpeq>
  40ac88:	bf34      	ite	cc
  40ac8a:	2001      	movcc	r0, #1
  40ac8c:	2000      	movcs	r0, #0
  40ac8e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ac92:	bf00      	nop

0040ac94 <__aeabi_dcmple>:
  40ac94:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ac98:	f7ff ffe0 	bl	40ac5c <__aeabi_cdcmpeq>
  40ac9c:	bf94      	ite	ls
  40ac9e:	2001      	movls	r0, #1
  40aca0:	2000      	movhi	r0, #0
  40aca2:	f85d fb08 	ldr.w	pc, [sp], #8
  40aca6:	bf00      	nop

0040aca8 <__aeabi_dcmpge>:
  40aca8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40acac:	f7ff ffce 	bl	40ac4c <__aeabi_cdrcmple>
  40acb0:	bf94      	ite	ls
  40acb2:	2001      	movls	r0, #1
  40acb4:	2000      	movhi	r0, #0
  40acb6:	f85d fb08 	ldr.w	pc, [sp], #8
  40acba:	bf00      	nop

0040acbc <__aeabi_dcmpgt>:
  40acbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40acc0:	f7ff ffc4 	bl	40ac4c <__aeabi_cdrcmple>
  40acc4:	bf34      	ite	cc
  40acc6:	2001      	movcc	r0, #1
  40acc8:	2000      	movcs	r0, #0
  40acca:	f85d fb08 	ldr.w	pc, [sp], #8
  40acce:	bf00      	nop

0040acd0 <__aeabi_dcmpun>:
  40acd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40acd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40acd8:	d102      	bne.n	40ace0 <__aeabi_dcmpun+0x10>
  40acda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40acde:	d10a      	bne.n	40acf6 <__aeabi_dcmpun+0x26>
  40ace0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ace4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ace8:	d102      	bne.n	40acf0 <__aeabi_dcmpun+0x20>
  40acea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40acee:	d102      	bne.n	40acf6 <__aeabi_dcmpun+0x26>
  40acf0:	f04f 0000 	mov.w	r0, #0
  40acf4:	4770      	bx	lr
  40acf6:	f04f 0001 	mov.w	r0, #1
  40acfa:	4770      	bx	lr

0040acfc <__aeabi_d2iz>:
  40acfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ad00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ad04:	d215      	bcs.n	40ad32 <__aeabi_d2iz+0x36>
  40ad06:	d511      	bpl.n	40ad2c <__aeabi_d2iz+0x30>
  40ad08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ad0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ad10:	d912      	bls.n	40ad38 <__aeabi_d2iz+0x3c>
  40ad12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ad16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ad1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ad1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ad22:	fa23 f002 	lsr.w	r0, r3, r2
  40ad26:	bf18      	it	ne
  40ad28:	4240      	negne	r0, r0
  40ad2a:	4770      	bx	lr
  40ad2c:	f04f 0000 	mov.w	r0, #0
  40ad30:	4770      	bx	lr
  40ad32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ad36:	d105      	bne.n	40ad44 <__aeabi_d2iz+0x48>
  40ad38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40ad3c:	bf08      	it	eq
  40ad3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ad42:	4770      	bx	lr
  40ad44:	f04f 0000 	mov.w	r0, #0
  40ad48:	4770      	bx	lr
  40ad4a:	bf00      	nop

0040ad4c <__aeabi_uldivmod>:
  40ad4c:	b953      	cbnz	r3, 40ad64 <__aeabi_uldivmod+0x18>
  40ad4e:	b94a      	cbnz	r2, 40ad64 <__aeabi_uldivmod+0x18>
  40ad50:	2900      	cmp	r1, #0
  40ad52:	bf08      	it	eq
  40ad54:	2800      	cmpeq	r0, #0
  40ad56:	bf1c      	itt	ne
  40ad58:	f04f 31ff 	movne.w	r1, #4294967295
  40ad5c:	f04f 30ff 	movne.w	r0, #4294967295
  40ad60:	f000 b97a 	b.w	40b058 <__aeabi_idiv0>
  40ad64:	f1ad 0c08 	sub.w	ip, sp, #8
  40ad68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40ad6c:	f000 f806 	bl	40ad7c <__udivmoddi4>
  40ad70:	f8dd e004 	ldr.w	lr, [sp, #4]
  40ad74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ad78:	b004      	add	sp, #16
  40ad7a:	4770      	bx	lr

0040ad7c <__udivmoddi4>:
  40ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ad80:	468c      	mov	ip, r1
  40ad82:	460d      	mov	r5, r1
  40ad84:	4604      	mov	r4, r0
  40ad86:	9e08      	ldr	r6, [sp, #32]
  40ad88:	2b00      	cmp	r3, #0
  40ad8a:	d151      	bne.n	40ae30 <__udivmoddi4+0xb4>
  40ad8c:	428a      	cmp	r2, r1
  40ad8e:	4617      	mov	r7, r2
  40ad90:	d96d      	bls.n	40ae6e <__udivmoddi4+0xf2>
  40ad92:	fab2 fe82 	clz	lr, r2
  40ad96:	f1be 0f00 	cmp.w	lr, #0
  40ad9a:	d00b      	beq.n	40adb4 <__udivmoddi4+0x38>
  40ad9c:	f1ce 0c20 	rsb	ip, lr, #32
  40ada0:	fa01 f50e 	lsl.w	r5, r1, lr
  40ada4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ada8:	fa02 f70e 	lsl.w	r7, r2, lr
  40adac:	ea4c 0c05 	orr.w	ip, ip, r5
  40adb0:	fa00 f40e 	lsl.w	r4, r0, lr
  40adb4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40adb8:	0c25      	lsrs	r5, r4, #16
  40adba:	fbbc f8fa 	udiv	r8, ip, sl
  40adbe:	fa1f f987 	uxth.w	r9, r7
  40adc2:	fb0a cc18 	mls	ip, sl, r8, ip
  40adc6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40adca:	fb08 f309 	mul.w	r3, r8, r9
  40adce:	42ab      	cmp	r3, r5
  40add0:	d90a      	bls.n	40ade8 <__udivmoddi4+0x6c>
  40add2:	19ed      	adds	r5, r5, r7
  40add4:	f108 32ff 	add.w	r2, r8, #4294967295
  40add8:	f080 8123 	bcs.w	40b022 <__udivmoddi4+0x2a6>
  40addc:	42ab      	cmp	r3, r5
  40adde:	f240 8120 	bls.w	40b022 <__udivmoddi4+0x2a6>
  40ade2:	f1a8 0802 	sub.w	r8, r8, #2
  40ade6:	443d      	add	r5, r7
  40ade8:	1aed      	subs	r5, r5, r3
  40adea:	b2a4      	uxth	r4, r4
  40adec:	fbb5 f0fa 	udiv	r0, r5, sl
  40adf0:	fb0a 5510 	mls	r5, sl, r0, r5
  40adf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40adf8:	fb00 f909 	mul.w	r9, r0, r9
  40adfc:	45a1      	cmp	r9, r4
  40adfe:	d909      	bls.n	40ae14 <__udivmoddi4+0x98>
  40ae00:	19e4      	adds	r4, r4, r7
  40ae02:	f100 33ff 	add.w	r3, r0, #4294967295
  40ae06:	f080 810a 	bcs.w	40b01e <__udivmoddi4+0x2a2>
  40ae0a:	45a1      	cmp	r9, r4
  40ae0c:	f240 8107 	bls.w	40b01e <__udivmoddi4+0x2a2>
  40ae10:	3802      	subs	r0, #2
  40ae12:	443c      	add	r4, r7
  40ae14:	eba4 0409 	sub.w	r4, r4, r9
  40ae18:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ae1c:	2100      	movs	r1, #0
  40ae1e:	2e00      	cmp	r6, #0
  40ae20:	d061      	beq.n	40aee6 <__udivmoddi4+0x16a>
  40ae22:	fa24 f40e 	lsr.w	r4, r4, lr
  40ae26:	2300      	movs	r3, #0
  40ae28:	6034      	str	r4, [r6, #0]
  40ae2a:	6073      	str	r3, [r6, #4]
  40ae2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae30:	428b      	cmp	r3, r1
  40ae32:	d907      	bls.n	40ae44 <__udivmoddi4+0xc8>
  40ae34:	2e00      	cmp	r6, #0
  40ae36:	d054      	beq.n	40aee2 <__udivmoddi4+0x166>
  40ae38:	2100      	movs	r1, #0
  40ae3a:	e886 0021 	stmia.w	r6, {r0, r5}
  40ae3e:	4608      	mov	r0, r1
  40ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae44:	fab3 f183 	clz	r1, r3
  40ae48:	2900      	cmp	r1, #0
  40ae4a:	f040 808e 	bne.w	40af6a <__udivmoddi4+0x1ee>
  40ae4e:	42ab      	cmp	r3, r5
  40ae50:	d302      	bcc.n	40ae58 <__udivmoddi4+0xdc>
  40ae52:	4282      	cmp	r2, r0
  40ae54:	f200 80fa 	bhi.w	40b04c <__udivmoddi4+0x2d0>
  40ae58:	1a84      	subs	r4, r0, r2
  40ae5a:	eb65 0503 	sbc.w	r5, r5, r3
  40ae5e:	2001      	movs	r0, #1
  40ae60:	46ac      	mov	ip, r5
  40ae62:	2e00      	cmp	r6, #0
  40ae64:	d03f      	beq.n	40aee6 <__udivmoddi4+0x16a>
  40ae66:	e886 1010 	stmia.w	r6, {r4, ip}
  40ae6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae6e:	b912      	cbnz	r2, 40ae76 <__udivmoddi4+0xfa>
  40ae70:	2701      	movs	r7, #1
  40ae72:	fbb7 f7f2 	udiv	r7, r7, r2
  40ae76:	fab7 fe87 	clz	lr, r7
  40ae7a:	f1be 0f00 	cmp.w	lr, #0
  40ae7e:	d134      	bne.n	40aeea <__udivmoddi4+0x16e>
  40ae80:	1beb      	subs	r3, r5, r7
  40ae82:	0c3a      	lsrs	r2, r7, #16
  40ae84:	fa1f fc87 	uxth.w	ip, r7
  40ae88:	2101      	movs	r1, #1
  40ae8a:	fbb3 f8f2 	udiv	r8, r3, r2
  40ae8e:	0c25      	lsrs	r5, r4, #16
  40ae90:	fb02 3318 	mls	r3, r2, r8, r3
  40ae94:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ae98:	fb0c f308 	mul.w	r3, ip, r8
  40ae9c:	42ab      	cmp	r3, r5
  40ae9e:	d907      	bls.n	40aeb0 <__udivmoddi4+0x134>
  40aea0:	19ed      	adds	r5, r5, r7
  40aea2:	f108 30ff 	add.w	r0, r8, #4294967295
  40aea6:	d202      	bcs.n	40aeae <__udivmoddi4+0x132>
  40aea8:	42ab      	cmp	r3, r5
  40aeaa:	f200 80d1 	bhi.w	40b050 <__udivmoddi4+0x2d4>
  40aeae:	4680      	mov	r8, r0
  40aeb0:	1aed      	subs	r5, r5, r3
  40aeb2:	b2a3      	uxth	r3, r4
  40aeb4:	fbb5 f0f2 	udiv	r0, r5, r2
  40aeb8:	fb02 5510 	mls	r5, r2, r0, r5
  40aebc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40aec0:	fb0c fc00 	mul.w	ip, ip, r0
  40aec4:	45a4      	cmp	ip, r4
  40aec6:	d907      	bls.n	40aed8 <__udivmoddi4+0x15c>
  40aec8:	19e4      	adds	r4, r4, r7
  40aeca:	f100 33ff 	add.w	r3, r0, #4294967295
  40aece:	d202      	bcs.n	40aed6 <__udivmoddi4+0x15a>
  40aed0:	45a4      	cmp	ip, r4
  40aed2:	f200 80b8 	bhi.w	40b046 <__udivmoddi4+0x2ca>
  40aed6:	4618      	mov	r0, r3
  40aed8:	eba4 040c 	sub.w	r4, r4, ip
  40aedc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40aee0:	e79d      	b.n	40ae1e <__udivmoddi4+0xa2>
  40aee2:	4631      	mov	r1, r6
  40aee4:	4630      	mov	r0, r6
  40aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aeea:	f1ce 0420 	rsb	r4, lr, #32
  40aeee:	fa05 f30e 	lsl.w	r3, r5, lr
  40aef2:	fa07 f70e 	lsl.w	r7, r7, lr
  40aef6:	fa20 f804 	lsr.w	r8, r0, r4
  40aefa:	0c3a      	lsrs	r2, r7, #16
  40aefc:	fa25 f404 	lsr.w	r4, r5, r4
  40af00:	ea48 0803 	orr.w	r8, r8, r3
  40af04:	fbb4 f1f2 	udiv	r1, r4, r2
  40af08:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40af0c:	fb02 4411 	mls	r4, r2, r1, r4
  40af10:	fa1f fc87 	uxth.w	ip, r7
  40af14:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40af18:	fb01 f30c 	mul.w	r3, r1, ip
  40af1c:	42ab      	cmp	r3, r5
  40af1e:	fa00 f40e 	lsl.w	r4, r0, lr
  40af22:	d909      	bls.n	40af38 <__udivmoddi4+0x1bc>
  40af24:	19ed      	adds	r5, r5, r7
  40af26:	f101 30ff 	add.w	r0, r1, #4294967295
  40af2a:	f080 808a 	bcs.w	40b042 <__udivmoddi4+0x2c6>
  40af2e:	42ab      	cmp	r3, r5
  40af30:	f240 8087 	bls.w	40b042 <__udivmoddi4+0x2c6>
  40af34:	3902      	subs	r1, #2
  40af36:	443d      	add	r5, r7
  40af38:	1aeb      	subs	r3, r5, r3
  40af3a:	fa1f f588 	uxth.w	r5, r8
  40af3e:	fbb3 f0f2 	udiv	r0, r3, r2
  40af42:	fb02 3310 	mls	r3, r2, r0, r3
  40af46:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40af4a:	fb00 f30c 	mul.w	r3, r0, ip
  40af4e:	42ab      	cmp	r3, r5
  40af50:	d907      	bls.n	40af62 <__udivmoddi4+0x1e6>
  40af52:	19ed      	adds	r5, r5, r7
  40af54:	f100 38ff 	add.w	r8, r0, #4294967295
  40af58:	d26f      	bcs.n	40b03a <__udivmoddi4+0x2be>
  40af5a:	42ab      	cmp	r3, r5
  40af5c:	d96d      	bls.n	40b03a <__udivmoddi4+0x2be>
  40af5e:	3802      	subs	r0, #2
  40af60:	443d      	add	r5, r7
  40af62:	1aeb      	subs	r3, r5, r3
  40af64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40af68:	e78f      	b.n	40ae8a <__udivmoddi4+0x10e>
  40af6a:	f1c1 0720 	rsb	r7, r1, #32
  40af6e:	fa22 f807 	lsr.w	r8, r2, r7
  40af72:	408b      	lsls	r3, r1
  40af74:	fa05 f401 	lsl.w	r4, r5, r1
  40af78:	ea48 0303 	orr.w	r3, r8, r3
  40af7c:	fa20 fe07 	lsr.w	lr, r0, r7
  40af80:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40af84:	40fd      	lsrs	r5, r7
  40af86:	ea4e 0e04 	orr.w	lr, lr, r4
  40af8a:	fbb5 f9fc 	udiv	r9, r5, ip
  40af8e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40af92:	fb0c 5519 	mls	r5, ip, r9, r5
  40af96:	fa1f f883 	uxth.w	r8, r3
  40af9a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40af9e:	fb09 f408 	mul.w	r4, r9, r8
  40afa2:	42ac      	cmp	r4, r5
  40afa4:	fa02 f201 	lsl.w	r2, r2, r1
  40afa8:	fa00 fa01 	lsl.w	sl, r0, r1
  40afac:	d908      	bls.n	40afc0 <__udivmoddi4+0x244>
  40afae:	18ed      	adds	r5, r5, r3
  40afb0:	f109 30ff 	add.w	r0, r9, #4294967295
  40afb4:	d243      	bcs.n	40b03e <__udivmoddi4+0x2c2>
  40afb6:	42ac      	cmp	r4, r5
  40afb8:	d941      	bls.n	40b03e <__udivmoddi4+0x2c2>
  40afba:	f1a9 0902 	sub.w	r9, r9, #2
  40afbe:	441d      	add	r5, r3
  40afc0:	1b2d      	subs	r5, r5, r4
  40afc2:	fa1f fe8e 	uxth.w	lr, lr
  40afc6:	fbb5 f0fc 	udiv	r0, r5, ip
  40afca:	fb0c 5510 	mls	r5, ip, r0, r5
  40afce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40afd2:	fb00 f808 	mul.w	r8, r0, r8
  40afd6:	45a0      	cmp	r8, r4
  40afd8:	d907      	bls.n	40afea <__udivmoddi4+0x26e>
  40afda:	18e4      	adds	r4, r4, r3
  40afdc:	f100 35ff 	add.w	r5, r0, #4294967295
  40afe0:	d229      	bcs.n	40b036 <__udivmoddi4+0x2ba>
  40afe2:	45a0      	cmp	r8, r4
  40afe4:	d927      	bls.n	40b036 <__udivmoddi4+0x2ba>
  40afe6:	3802      	subs	r0, #2
  40afe8:	441c      	add	r4, r3
  40afea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40afee:	eba4 0408 	sub.w	r4, r4, r8
  40aff2:	fba0 8902 	umull	r8, r9, r0, r2
  40aff6:	454c      	cmp	r4, r9
  40aff8:	46c6      	mov	lr, r8
  40affa:	464d      	mov	r5, r9
  40affc:	d315      	bcc.n	40b02a <__udivmoddi4+0x2ae>
  40affe:	d012      	beq.n	40b026 <__udivmoddi4+0x2aa>
  40b000:	b156      	cbz	r6, 40b018 <__udivmoddi4+0x29c>
  40b002:	ebba 030e 	subs.w	r3, sl, lr
  40b006:	eb64 0405 	sbc.w	r4, r4, r5
  40b00a:	fa04 f707 	lsl.w	r7, r4, r7
  40b00e:	40cb      	lsrs	r3, r1
  40b010:	431f      	orrs	r7, r3
  40b012:	40cc      	lsrs	r4, r1
  40b014:	6037      	str	r7, [r6, #0]
  40b016:	6074      	str	r4, [r6, #4]
  40b018:	2100      	movs	r1, #0
  40b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b01e:	4618      	mov	r0, r3
  40b020:	e6f8      	b.n	40ae14 <__udivmoddi4+0x98>
  40b022:	4690      	mov	r8, r2
  40b024:	e6e0      	b.n	40ade8 <__udivmoddi4+0x6c>
  40b026:	45c2      	cmp	sl, r8
  40b028:	d2ea      	bcs.n	40b000 <__udivmoddi4+0x284>
  40b02a:	ebb8 0e02 	subs.w	lr, r8, r2
  40b02e:	eb69 0503 	sbc.w	r5, r9, r3
  40b032:	3801      	subs	r0, #1
  40b034:	e7e4      	b.n	40b000 <__udivmoddi4+0x284>
  40b036:	4628      	mov	r0, r5
  40b038:	e7d7      	b.n	40afea <__udivmoddi4+0x26e>
  40b03a:	4640      	mov	r0, r8
  40b03c:	e791      	b.n	40af62 <__udivmoddi4+0x1e6>
  40b03e:	4681      	mov	r9, r0
  40b040:	e7be      	b.n	40afc0 <__udivmoddi4+0x244>
  40b042:	4601      	mov	r1, r0
  40b044:	e778      	b.n	40af38 <__udivmoddi4+0x1bc>
  40b046:	3802      	subs	r0, #2
  40b048:	443c      	add	r4, r7
  40b04a:	e745      	b.n	40aed8 <__udivmoddi4+0x15c>
  40b04c:	4608      	mov	r0, r1
  40b04e:	e708      	b.n	40ae62 <__udivmoddi4+0xe6>
  40b050:	f1a8 0802 	sub.w	r8, r8, #2
  40b054:	443d      	add	r5, r7
  40b056:	e72b      	b.n	40aeb0 <__udivmoddi4+0x134>

0040b058 <__aeabi_idiv0>:
  40b058:	4770      	bx	lr
  40b05a:	bf00      	nop

0040b05c <sysfont_glyphs>:
  40b05c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  40b06c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  40b07c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  40b08c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  40b09c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  40b0ac:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  40b0bc:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  40b0cc:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  40b0dc:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  40b0ec:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  40b0fc:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  40b10c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  40b11c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  40b12c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  40b13c:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  40b14c:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  40b15c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  40b16c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  40b17c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  40b18c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  40b19c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  40b1ac:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  40b1bc:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  40b1cc:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  40b1dc:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  40b1ec:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  40b1fc:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  40b20c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  40b21c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  40b22c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  40b23c:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  40b24c:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  40b25c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  40b26c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  40b27c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  40b28c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  40b29c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  40b2ac:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  40b2bc:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  40b2cc:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  40b2dc:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  40b2ec:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  40b2fc:	0000 0000 6d54 2072 7653 0063 0000 0000     ....Tmr Svc.....
  40b30c:	07e7 0000 0004 0000 0018 0000 0011 0000     ................
  40b31c:	0010 0000 000f 0000 0001 0000 6425 2520     ............%d %
  40b32c:	0a64 0000 6c6f 6465 0000 0000 6146 6c69     d...oled....Fail
  40b33c:	6465 7420 206f 7263 6165 6574 6f20 656c     ed to create ole
  40b34c:	2064 6174 6b73 000d 6573 736e 726f 0000     d task..sensor..
  40b35c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  40b36c:	7320 6e65 6f73 2072 6174 6b73 000d 0000      sensor task....
  40b37c:	7472 0074 6146 6c69 6465 7420 206f 7263     rtt.Failed to cr
  40b38c:	6165 6574 7220 7474 7420 7361 0d6b 0000     eate rtt task...
  40b39c:	6374 0000 6146 6c69 6465 7420 206f 7263     tc..Failed to cr
  40b3ac:	6165 6574 7420 2063 6174 6b73 000d 0000     eate tc task....
  40b3bc:	7472 0063 6146 6c69 6465 7420 206f 7263     rtc.Failed to cr
  40b3cc:	6165 6574 7220 6374 7420 7361 0d6b 0000     eate rtc task...
  40b3dc:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  40b3ec:	7320 6d65 7061 6f68 6572 5220 5454 0000      semaphore RTT..
  40b3fc:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  40b40c:	7320 6d65 7061 6f68 6572 5420 0043 0000      semaphore TC...
  40b41c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  40b42c:	7320 6d65 7061 6f68 6572 5220 4354 0000      semaphore RTC..
  40b43c:	6425 0000 003a 0000 7473 6361 206b 766f     %d..:...stack ov
  40b44c:	7265 6c66 776f 2520 2078 7325 0a0d 0000     erflow %x %s....

0040b45c <_global_impure_ptr>:
  40b45c:	0030 2040 000a 0000 4e49 0046 6e69 0066     0.@ ....INF.inf.
  40b46c:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
  40b47c:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  40b48c:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  40b49c:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0040b4a8 <blanks.7223>:
  40b4a8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b4b8 <zeroes.7224>:
  40b4b8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040b4c8 <blanks.7238>:
  40b4c8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b4d8 <zeroes.7239>:
  40b4d8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40b4e8:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0040b4f8 <__mprec_bigtens>:
  40b4f8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40b508:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40b518:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040b520 <__mprec_tens>:
  40b520:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40b530:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40b540:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40b550:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40b560:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40b570:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40b580:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40b590:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40b5a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40b5b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40b5c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40b5d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40b5e0:	9db4 79d9 7843 44ea                         ...yCx.D

0040b5e8 <p05.6055>:
  40b5e8:	0005 0000 0019 0000 007d 0000 4f50 4953     ........}...POSI
  40b5f8:	0058 0000 002e 0000                         X.......

0040b600 <_ctype_>:
  40b600:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40b610:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40b620:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40b630:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40b640:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40b650:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40b660:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40b670:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40b680:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040b704 <_init>:
  40b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b706:	bf00      	nop
  40b708:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b70a:	bc08      	pop	{r3}
  40b70c:	469e      	mov	lr, r3
  40b70e:	4770      	bx	lr

0040b710 <__init_array_start>:
  40b710:	0040791d 	.word	0x0040791d

0040b714 <__frame_dummy_init_array_entry>:
  40b714:	00400165                                e.@.

0040b718 <_fini>:
  40b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b71a:	bf00      	nop
  40b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b71e:	bc08      	pop	{r3}
  40b720:	469e      	mov	lr, r3
  40b722:	4770      	bx	lr

0040b724 <__fini_array_start>:
  40b724:	00400141 	.word	0x00400141
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
0040b71c <__fini_array_start>:
  40b71c:	00400141 	.word	0x00400141
>>>>>>> Stashed changes

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

<<<<<<< Updated upstream
2040000c <sysfont>:
<<<<<<< Updated upstream
2040000c:	0000 0000 ad5c 0040 0706 7d20               ....\.@... }
=======
<<<<<<< Updated upstream
20400448 <__malloc_av_>:
=======
2040000c <sysfont>:
2040000c:	0000 0000 b05c 0040 0706 7d20               ....\.@... }
>>>>>>> Stashed changes
=======
2040000c:	0000 0000 b05c 0040 0706 7d20               ....\.@... }
>>>>>>> Stashed changes

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <xHigherPriorityTaskWoken>:
20400024:	0001 0000                                   ....

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__malloc_av_>:
<<<<<<< Updated upstream
=======
>>>>>>> Stashed changes
>>>>>>> Stashed changes
	...
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 

20400860 <__malloc_sbrk_base>:
20400860:	ffff ffff                                   ....

20400864 <__malloc_trim_threshold>:
20400864:	0000 0002                                   ....

<<<<<<< Updated upstream
20400868 <__atexit_recursive_mutex>:
<<<<<<< Updated upstream
20400868:	0e5c 2040                                   \.@ 
=======
<<<<<<< Updated upstream
20400858 <__atexit_recursive_mutex>:
20400858:	0e34 2040                                   4.@ 
=======
20400868 <__atexit_recursive_mutex>:
20400868:	0e6c 2040                                   l.@ 
>>>>>>> Stashed changes
>>>>>>> Stashed changes
=======
20400868:	0e6c 2040                                   l.@ 
>>>>>>> Stashed changes

2040086c <__global_locale>:
2040086c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
<<<<<<< Updated upstream
<<<<<<< Updated upstream
2040094c:	a111 0040 9fb5 0040 0000 0000 b308 0040     ..@...@.......@.
2040095c:	b304 0040 aff4 0040 aff4 0040 aff4 0040     ..@...@...@...@.
2040096c:	aff4 0040 aff4 0040 aff4 0040 aff4 0040     ..@...@...@...@.
2040097c:	aff4 0040 aff4 0040 ffff ffff ffff ffff     ..@...@.........
=======
2040094c:	a411 0040 a2b5 0040 0000 0000 b5f8 0040     ..@...@.......@.
2040095c:	b5f4 0040 b2f4 0040 b2f4 0040 b2f4 0040     ..@...@...@...@.
2040096c:	b2f4 0040 b2f4 0040 b2f4 0040 b2f4 0040     ..@...@...@...@.
2040097c:	b2f4 0040 b2f4 0040 ffff ffff ffff ffff     ..@...@.........
>>>>>>> Stashed changes
2040098c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
=======
<<<<<<< Updated upstream
2040093c:	7ff5 0040 7e99 0040 0000 0000 8edc 0040     ..@..~@.......@.
2040094c:	8ed8 0040 8c44 0040 8c44 0040 8c44 0040     ..@.D.@.D.@.D.@.
2040095c:	8c44 0040 8c44 0040 8c44 0040 8c44 0040     D.@.D.@.D.@.D.@.
2040096c:	8c44 0040 8c44 0040 ffff ffff ffff ffff     D.@.D.@.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
=======
2040094c:	a411 0040 a2b5 0040 0000 0000 b600 0040     ..@...@.......@.
2040095c:	b5fc 0040 b2f4 0040 b2f4 0040 b2f4 0040     ..@...@...@...@.
2040096c:	b2f4 0040 b2f4 0040 b2f4 0040 b2f4 0040     ..@...@...@...@.
2040097c:	b2f4 0040 b2f4 0040 ffff ffff ffff ffff     ..@...@.........
2040098c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
>>>>>>> Stashed changes
>>>>>>> Stashed changes
	...
204009b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
