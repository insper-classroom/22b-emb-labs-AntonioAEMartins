
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008010  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408010  00408010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00408018  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000774  204009d0  004089e8  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20401144  0040915c  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20403148  0040b160  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002976c  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000053ca  00000000  00000000  0004a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000dac1  00000000  00000000  0004f58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001068  00000000  00000000  0005d04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001260  00000000  00000000  0005e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024a20  00000000  00000000  0005f316  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015893  00000000  00000000  00083d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009214b  00000000  00000000  000995c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003710  00000000  00000000  0012b714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 31 40 20 bd 37 40 00 bb 37 40 00 bb 37 40 00     H1@ .7@..7@..7@.
  400010:	bb 37 40 00 bb 37 40 00 bb 37 40 00 00 00 00 00     .7@..7@..7@.....
	...
  40002c:	bb 37 40 00 bb 37 40 00 00 00 00 00 bb 37 40 00     .7@..7@......7@.
  40003c:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  40004c:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  40005c:	bb 37 40 00 bb 37 40 00 00 00 00 00 d5 32 40 00     .7@..7@......2@.
  40006c:	e9 32 40 00 fd 32 40 00 bb 37 40 00 bb 37 40 00     .2@..2@..7@..7@.
  40007c:	bb 37 40 00 11 33 40 00 25 33 40 00 bb 37 40 00     .7@..3@.%3@..7@.
  40008c:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  40009c:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  4000ac:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  4000bc:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  4000cc:	bb 37 40 00 00 00 00 00 bb 37 40 00 00 00 00 00     .7@......7@.....
  4000dc:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  4000ec:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  4000fc:	bb 37 40 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .7@..7@..7@..7@.
  40010c:	bb 37 40 00 bb 37 40 00 00 00 00 00 00 00 00 00     .7@..7@.........
  40011c:	00 00 00 00 bb 37 40 00 bb 37 40 00 bb 37 40 00     .....7@..7@..7@.
  40012c:	bb 37 40 00 bb 37 40 00 00 00 00 00 bb 37 40 00     .7@..7@......7@.
  40013c:	bb 37 40 00                                         .7@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00408018 	.word	0x00408018

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408018 	.word	0x00408018
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00408018 	.word	0x00408018
  4001a8:	00000000 	.word	0x00000000

004001ac <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4001ac:	2810      	cmp	r0, #16
  4001ae:	d108      	bne.n	4001c2 <chip_isr+0x16>
  4001b0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001b4:	d105      	bne.n	4001c2 <chip_isr+0x16>
{
  4001b6:	b508      	push	{r3, lr}
		if (gpfIsr) {
  4001b8:	4b02      	ldr	r3, [pc, #8]	; (4001c4 <chip_isr+0x18>)
  4001ba:	681b      	ldr	r3, [r3, #0]
  4001bc:	b103      	cbz	r3, 4001c0 <chip_isr+0x14>
			gpfIsr();
  4001be:	4798      	blx	r3
  4001c0:	bd08      	pop	{r3, pc}
  4001c2:	4770      	bx	lr
  4001c4:	204009ec 	.word	0x204009ec

004001c8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001c8:	b150      	cbz	r0, 4001e0 <nm_bsp_sleep+0x18>
{
  4001ca:	b570      	push	{r4, r5, r6, lr}
  4001cc:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  4001ce:	4e05      	ldr	r6, [pc, #20]	; (4001e4 <nm_bsp_sleep+0x1c>)
  4001d0:	4d05      	ldr	r5, [pc, #20]	; (4001e8 <nm_bsp_sleep+0x20>)
  4001d2:	4630      	mov	r0, r6
  4001d4:	47a8      	blx	r5
	while(u32TimeMsec--) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4001dc:	d1f9      	bne.n	4001d2 <nm_bsp_sleep+0xa>
  4001de:	bd70      	pop	{r4, r5, r6, pc}
  4001e0:	4770      	bx	lr
  4001e2:	bf00      	nop
  4001e4:	00031635 	.word	0x00031635
  4001e8:	20400001 	.word	0x20400001

004001ec <nm_bsp_reset>:
{
  4001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001f0:	4f09      	ldr	r7, [pc, #36]	; (400218 <nm_bsp_reset+0x2c>)
  4001f2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4001f6:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4001fa:	4d08      	ldr	r5, [pc, #32]	; (40021c <nm_bsp_reset+0x30>)
  4001fc:	2608      	movs	r6, #8
  4001fe:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  400200:	2064      	movs	r0, #100	; 0x64
  400202:	4c07      	ldr	r4, [pc, #28]	; (400220 <nm_bsp_reset+0x34>)
  400204:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400206:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  40020a:	2064      	movs	r0, #100	; 0x64
  40020c:	47a0      	blx	r4
  40020e:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  400210:	2064      	movs	r0, #100	; 0x64
  400212:	47a0      	blx	r4
  400214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400218:	400e1200 	.word	0x400e1200
  40021c:	400e1000 	.word	0x400e1000
  400220:	004001c9 	.word	0x004001c9

00400224 <nm_bsp_init>:
{
  400224:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400226:	2200      	movs	r2, #0
  400228:	4b14      	ldr	r3, [pc, #80]	; (40027c <nm_bsp_init+0x58>)
  40022a:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40022c:	200a      	movs	r0, #10
  40022e:	4c14      	ldr	r4, [pc, #80]	; (400280 <nm_bsp_init+0x5c>)
  400230:	47a0      	blx	r4
  400232:	200b      	movs	r0, #11
  400234:	47a0      	blx	r4
  400236:	200c      	movs	r0, #12
  400238:	47a0      	blx	r4
  40023a:	2010      	movs	r0, #16
  40023c:	47a0      	blx	r4
  40023e:	2011      	movs	r0, #17
  400240:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400242:	4b10      	ldr	r3, [pc, #64]	; (400284 <nm_bsp_init+0x60>)
  400244:	2208      	movs	r2, #8
  400246:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400248:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40024c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40024e:	4a0e      	ldr	r2, [pc, #56]	; (400288 <nm_bsp_init+0x64>)
  400250:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400254:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400256:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40025a:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40025c:	2204      	movs	r2, #4
  40025e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400264:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400266:	4b09      	ldr	r3, [pc, #36]	; (40028c <nm_bsp_init+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	f013 0f01 	tst.w	r3, #1
  40026e:	d001      	beq.n	400274 <nm_bsp_init+0x50>
  400270:	4b06      	ldr	r3, [pc, #24]	; (40028c <nm_bsp_init+0x68>)
  400272:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  400274:	4b06      	ldr	r3, [pc, #24]	; (400290 <nm_bsp_init+0x6c>)
  400276:	4798      	blx	r3
}
  400278:	2000      	movs	r0, #0
  40027a:	bd10      	pop	{r4, pc}
  40027c:	204009ec 	.word	0x204009ec
  400280:	004034dd 	.word	0x004034dd
  400284:	400e1000 	.word	0x400e1000
  400288:	400e1200 	.word	0x400e1200
  40028c:	e000e010 	.word	0xe000e010
  400290:	004001ed 	.word	0x004001ed

00400294 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400294:	b530      	push	{r4, r5, lr}
  400296:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400298:	4b14      	ldr	r3, [pc, #80]	; (4002ec <nm_bsp_register_isr+0x58>)
  40029a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40029c:	2010      	movs	r0, #16
  40029e:	4b14      	ldr	r3, [pc, #80]	; (4002f0 <nm_bsp_register_isr+0x5c>)
  4002a0:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  4002a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4002a6:	207c      	movs	r0, #124	; 0x7c
  4002a8:	4b12      	ldr	r3, [pc, #72]	; (4002f4 <nm_bsp_register_isr+0x60>)
  4002aa:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  4002ac:	4c12      	ldr	r4, [pc, #72]	; (4002f8 <nm_bsp_register_isr+0x64>)
  4002ae:	2201      	movs	r2, #1
  4002b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002b4:	4620      	mov	r0, r4
  4002b6:	4b11      	ldr	r3, [pc, #68]	; (4002fc <nm_bsp_register_isr+0x68>)
  4002b8:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4002ba:	4b11      	ldr	r3, [pc, #68]	; (400300 <nm_bsp_register_isr+0x6c>)
  4002bc:	9300      	str	r3, [sp, #0]
  4002be:	2351      	movs	r3, #81	; 0x51
  4002c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002c4:	2110      	movs	r1, #16
  4002c6:	4620      	mov	r0, r4
  4002c8:	4d0e      	ldr	r5, [pc, #56]	; (400304 <nm_bsp_register_isr+0x70>)
  4002ca:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002d0:	4620      	mov	r0, r4
  4002d2:	4b0d      	ldr	r3, [pc, #52]	; (400308 <nm_bsp_register_isr+0x74>)
  4002d4:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002da:	4b0c      	ldr	r3, [pc, #48]	; (40030c <nm_bsp_register_isr+0x78>)
  4002dc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002de:	2200      	movs	r2, #0
  4002e0:	2110      	movs	r1, #16
  4002e2:	4620      	mov	r0, r4
  4002e4:	4b0a      	ldr	r3, [pc, #40]	; (400310 <nm_bsp_register_isr+0x7c>)
  4002e6:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002e8:	b003      	add	sp, #12
  4002ea:	bd30      	pop	{r4, r5, pc}
  4002ec:	204009ec 	.word	0x204009ec
  4002f0:	004034dd 	.word	0x004034dd
  4002f4:	004030e5 	.word	0x004030e5
  4002f8:	400e1400 	.word	0x400e1400
  4002fc:	00402f11 	.word	0x00402f11
  400300:	004001ad 	.word	0x004001ad
  400304:	00403265 	.word	0x00403265
  400308:	004030d3 	.word	0x004030d3
  40030c:	e000e100 	.word	0xe000e100
  400310:	00403339 	.word	0x00403339

00400314 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400314:	b508      	push	{r3, lr}
	if (u8Enable) {
  400316:	b928      	cbnz	r0, 400324 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400318:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40031c:	4804      	ldr	r0, [pc, #16]	; (400330 <nm_bsp_interrupt_ctrl+0x1c>)
  40031e:	4b05      	ldr	r3, [pc, #20]	; (400334 <nm_bsp_interrupt_ctrl+0x20>)
  400320:	4798      	blx	r3
  400322:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400324:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400328:	4801      	ldr	r0, [pc, #4]	; (400330 <nm_bsp_interrupt_ctrl+0x1c>)
  40032a:	4b03      	ldr	r3, [pc, #12]	; (400338 <nm_bsp_interrupt_ctrl+0x24>)
  40032c:	4798      	blx	r3
  40032e:	bd08      	pop	{r3, pc}
  400330:	400e1400 	.word	0x400e1400
  400334:	004030d7 	.word	0x004030d7
  400338:	004030d3 	.word	0x004030d3

0040033c <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  40033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  40033e:	4c39      	ldr	r4, [pc, #228]	; (400424 <nm_bus_init+0xe8>)
  400340:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400344:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400346:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40034a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40034c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40034e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400352:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400354:	430b      	orrs	r3, r1
  400356:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400358:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40035a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40035e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  400360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400364:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400366:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40036a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40036c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40036e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400372:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400374:	4313      	orrs	r3, r2
  400376:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400378:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40037a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40037e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  400380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400384:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400386:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40038a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40038c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40038e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400392:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400394:	4318      	orrs	r0, r3
  400396:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400398:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40039a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40039e:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003a0:	6061      	str	r1, [r4, #4]
  4003a2:	6062      	str	r2, [r4, #4]
  4003a4:	6063      	str	r3, [r4, #4]
  4003a6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  4003aa:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  4003ac:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  4003ae:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  4003b0:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  4003b2:	4d1d      	ldr	r5, [pc, #116]	; (400428 <nm_bus_init+0xec>)
  4003b4:	4628      	mov	r0, r5
  4003b6:	4b1d      	ldr	r3, [pc, #116]	; (40042c <nm_bus_init+0xf0>)
  4003b8:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003ba:	2302      	movs	r3, #2
  4003bc:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003be:	2380      	movs	r3, #128	; 0x80
  4003c0:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003c2:	686b      	ldr	r3, [r5, #4]
  4003c4:	f043 0301 	orr.w	r3, r3, #1
  4003c8:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003ca:	686b      	ldr	r3, [r5, #4]
  4003cc:	f043 0310 	orr.w	r3, r3, #16
  4003d0:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003d2:	2101      	movs	r1, #1
  4003d4:	4628      	mov	r0, r5
  4003d6:	4b16      	ldr	r3, [pc, #88]	; (400430 <nm_bus_init+0xf4>)
  4003d8:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003da:	2200      	movs	r2, #0
  4003dc:	2101      	movs	r1, #1
  4003de:	4628      	mov	r0, r5
  4003e0:	4b14      	ldr	r3, [pc, #80]	; (400434 <nm_bus_init+0xf8>)
  4003e2:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4003e4:	2201      	movs	r2, #1
  4003e6:	4611      	mov	r1, r2
  4003e8:	4628      	mov	r0, r5
  4003ea:	4b13      	ldr	r3, [pc, #76]	; (400438 <nm_bus_init+0xfc>)
  4003ec:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4003ee:	2200      	movs	r2, #0
  4003f0:	2101      	movs	r1, #1
  4003f2:	4628      	mov	r0, r5
  4003f4:	4b11      	ldr	r3, [pc, #68]	; (40043c <nm_bus_init+0x100>)
  4003f6:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4003f8:	4911      	ldr	r1, [pc, #68]	; (400440 <nm_bus_init+0x104>)
  4003fa:	4812      	ldr	r0, [pc, #72]	; (400444 <nm_bus_init+0x108>)
  4003fc:	4b12      	ldr	r3, [pc, #72]	; (400448 <nm_bus_init+0x10c>)
  4003fe:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400400:	b2c2      	uxtb	r2, r0
  400402:	2101      	movs	r1, #1
  400404:	4628      	mov	r0, r5
  400406:	4b11      	ldr	r3, [pc, #68]	; (40044c <nm_bus_init+0x110>)
  400408:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40040a:	2300      	movs	r3, #0
  40040c:	461a      	mov	r2, r3
  40040e:	2101      	movs	r1, #1
  400410:	4628      	mov	r0, r5
  400412:	4f0f      	ldr	r7, [pc, #60]	; (400450 <nm_bus_init+0x114>)
  400414:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400416:	2301      	movs	r3, #1
  400418:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  40041a:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  40041c:	4b0d      	ldr	r3, [pc, #52]	; (400454 <nm_bus_init+0x118>)
  40041e:	4798      	blx	r3
#endif
	return result;
}
  400420:	2000      	movs	r0, #0
  400422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400424:	400e1400 	.word	0x400e1400
  400428:	40008000 	.word	0x40008000
  40042c:	00403531 	.word	0x00403531
  400430:	0040355d 	.word	0x0040355d
  400434:	004035d7 	.word	0x004035d7
  400438:	004035f5 	.word	0x004035f5
  40043c:	00403613 	.word	0x00403613
  400440:	11e1a300 	.word	0x11e1a300
  400444:	02dc6c00 	.word	0x02dc6c00
  400448:	00403627 	.word	0x00403627
  40044c:	0040363d 	.word	0x0040363d
  400450:	00403665 	.word	0x00403665
  400454:	004001ed 	.word	0x004001ed

00400458 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40045c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40045e:	2803      	cmp	r0, #3
  400460:	d144      	bne.n	4004ec <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  400462:	680e      	ldr	r6, [r1, #0]
  400464:	684d      	ldr	r5, [r1, #4]
  400466:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  400468:	2300      	movs	r3, #0
  40046a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40046e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  400472:	b186      	cbz	r6, 400496 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  400474:	2d00      	cmp	r5, #0
  400476:	d136      	bne.n	4004e6 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  400478:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40047c:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40047e:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  400480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400484:	4b20      	ldr	r3, [pc, #128]	; (400508 <nm_bus_ioctl+0xb0>)
  400486:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400488:	b32c      	cbz	r4, 4004d6 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40048a:	4f20      	ldr	r7, [pc, #128]	; (40050c <nm_bus_ioctl+0xb4>)
  40048c:	f8df b094 	ldr.w	fp, [pc, #148]	; 400524 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400490:	f8df a094 	ldr.w	sl, [pc, #148]	; 400528 <nm_bus_ioctl+0xd0>
  400494:	e006      	b.n	4004a4 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400496:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  40049a:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40049e:	ae01      	add	r6, sp, #4
  4004a0:	e7ee      	b.n	400480 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  4004a2:	b1c4      	cbz	r4, 4004d6 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4004a4:	2300      	movs	r3, #0
  4004a6:	461a      	mov	r2, r3
  4004a8:	7831      	ldrb	r1, [r6, #0]
  4004aa:	4638      	mov	r0, r7
  4004ac:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4004ae:	f10d 0205 	add.w	r2, sp, #5
  4004b2:	f10d 0106 	add.w	r1, sp, #6
  4004b6:	4638      	mov	r0, r7
  4004b8:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4004ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4004be:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4004c0:	3c01      	subs	r4, #1
  4004c2:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4004c4:	f1b8 0f00 	cmp.w	r8, #0
  4004c8:	d100      	bne.n	4004cc <nm_bus_ioctl+0x74>
			pu8Miso++;
  4004ca:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4004cc:	f1b9 0f00 	cmp.w	r9, #0
  4004d0:	d1e7      	bne.n	4004a2 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4004d2:	3601      	adds	r6, #1
  4004d4:	e7e5      	b.n	4004a2 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4004d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4004da:	4b0b      	ldr	r3, [pc, #44]	; (400508 <nm_bus_ioctl+0xb0>)
  4004dc:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4004de:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4004e0:	b003      	add	sp, #12
  4004e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4004e6:	f06f 0005 	mvn.w	r0, #5
		break;
  4004ea:	e7f9      	b.n	4004e0 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4004ec:	f240 121f 	movw	r2, #287	; 0x11f
  4004f0:	4907      	ldr	r1, [pc, #28]	; (400510 <nm_bus_ioctl+0xb8>)
  4004f2:	4808      	ldr	r0, [pc, #32]	; (400514 <nm_bus_ioctl+0xbc>)
  4004f4:	4c08      	ldr	r4, [pc, #32]	; (400518 <nm_bus_ioctl+0xc0>)
  4004f6:	47a0      	blx	r4
  4004f8:	4808      	ldr	r0, [pc, #32]	; (40051c <nm_bus_ioctl+0xc4>)
  4004fa:	47a0      	blx	r4
  4004fc:	4808      	ldr	r0, [pc, #32]	; (400520 <nm_bus_ioctl+0xc8>)
  4004fe:	47a0      	blx	r4
			s8Ret = -1;
  400500:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  400504:	e7ec      	b.n	4004e0 <nm_bus_ioctl+0x88>
  400506:	bf00      	nop
  400508:	400e1400 	.word	0x400e1400
  40050c:	40008000 	.word	0x40008000
  400510:	00406ff8 	.word	0x00406ff8
  400514:	00407008 	.word	0x00407008
  400518:	004040b9 	.word	0x004040b9
  40051c:	0040701c 	.word	0x0040701c
  400520:	00407034 	.word	0x00407034
  400524:	004035a3 	.word	0x004035a3
  400528:	00403573 	.word	0x00403573

0040052c <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40052c:	2202      	movs	r2, #2
  40052e:	4b0e      	ldr	r3, [pc, #56]	; (400568 <nm_bus_deinit+0x3c>)
  400530:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400532:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  400536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40053a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40053e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400540:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400548:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40054a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40054e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400552:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400554:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40055c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40055e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  400562:	2000      	movs	r0, #0
  400564:	4770      	bx	lr
  400566:	bf00      	nop
  400568:	40008000 	.word	0x40008000

0040056c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  40056c:	b13a      	cbz	r2, 40057e <m2m_memcpy+0x12>
  40056e:	3901      	subs	r1, #1
  400570:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  400572:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  400576:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  40057a:	4290      	cmp	r0, r2
  40057c:	d1f9      	bne.n	400572 <m2m_memcpy+0x6>
  40057e:	4770      	bx	lr

00400580 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400580:	b122      	cbz	r2, 40058c <m2m_memset+0xc>
  400582:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  400584:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400588:	4290      	cmp	r0, r2
  40058a:	d1fb      	bne.n	400584 <m2m_memset+0x4>
  40058c:	4770      	bx	lr

0040058e <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40058e:	7803      	ldrb	r3, [r0, #0]
  400590:	b143      	cbz	r3, 4005a4 <m2m_strlen+0x16>
  400592:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  400594:	3301      	adds	r3, #1
  400596:	b29b      	uxth	r3, r3
	while(*pcStr)
  400598:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40059c:	2a00      	cmp	r2, #0
  40059e:	d1f9      	bne.n	400594 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  4005a0:	4618      	mov	r0, r3
  4005a2:	4770      	bx	lr
	uint16	u16StrLen = 0;
  4005a4:	2300      	movs	r3, #0
  4005a6:	e7fb      	b.n	4005a0 <m2m_strlen+0x12>

004005a8 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  4005a8:	4a02      	ldr	r2, [pc, #8]	; (4005b4 <isr+0xc>)
  4005aa:	7813      	ldrb	r3, [r2, #0]
  4005ac:	3301      	adds	r3, #1
  4005ae:	b2db      	uxtb	r3, r3
  4005b0:	7013      	strb	r3, [r2, #0]
  4005b2:	4770      	bx	lr
  4005b4:	204009f3 	.word	0x204009f3

004005b8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4005b8:	4770      	bx	lr
	...

004005bc <hif_set_rx_done>:
{
  4005bc:	b500      	push	{lr}
  4005be:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4005c0:	2001      	movs	r0, #1
  4005c2:	4b0b      	ldr	r3, [pc, #44]	; (4005f0 <hif_set_rx_done+0x34>)
  4005c4:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4005c6:	a901      	add	r1, sp, #4
  4005c8:	f241 0070 	movw	r0, #4208	; 0x1070
  4005cc:	4b09      	ldr	r3, [pc, #36]	; (4005f4 <hif_set_rx_done+0x38>)
  4005ce:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4005d0:	4603      	mov	r3, r0
  4005d2:	b118      	cbz	r0, 4005dc <hif_set_rx_done+0x20>
}
  4005d4:	4618      	mov	r0, r3
  4005d6:	b003      	add	sp, #12
  4005d8:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4005dc:	9901      	ldr	r1, [sp, #4]
  4005de:	f041 0102 	orr.w	r1, r1, #2
  4005e2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4005e4:	f241 0070 	movw	r0, #4208	; 0x1070
  4005e8:	4b03      	ldr	r3, [pc, #12]	; (4005f8 <hif_set_rx_done+0x3c>)
  4005ea:	4798      	blx	r3
  4005ec:	4603      	mov	r3, r0
  4005ee:	e7f1      	b.n	4005d4 <hif_set_rx_done+0x18>
  4005f0:	00400315 	.word	0x00400315
  4005f4:	004018a9 	.word	0x004018a9
  4005f8:	004018b5 	.word	0x004018b5

004005fc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4005fc:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4005fe:	4b12      	ldr	r3, [pc, #72]	; (400648 <hif_chip_wake+0x4c>)
  400600:	781b      	ldrb	r3, [r3, #0]
  400602:	b94b      	cbnz	r3, 400618 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400604:	4b11      	ldr	r3, [pc, #68]	; (40064c <hif_chip_wake+0x50>)
  400606:	781b      	ldrb	r3, [r3, #0]
  400608:	b2db      	uxtb	r3, r3
  40060a:	2b03      	cmp	r3, #3
  40060c:	d00c      	beq.n	400628 <hif_chip_wake+0x2c>
  40060e:	4b0f      	ldr	r3, [pc, #60]	; (40064c <hif_chip_wake+0x50>)
  400610:	781b      	ldrb	r3, [r3, #0]
  400612:	b2db      	uxtb	r3, r3
  400614:	2b04      	cmp	r3, #4
  400616:	d007      	beq.n	400628 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400618:	4a0b      	ldr	r2, [pc, #44]	; (400648 <hif_chip_wake+0x4c>)
  40061a:	7813      	ldrb	r3, [r2, #0]
  40061c:	3301      	adds	r3, #1
  40061e:	b2db      	uxtb	r3, r3
  400620:	7013      	strb	r3, [r2, #0]
  400622:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  400624:	4618      	mov	r0, r3
  400626:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  400628:	4b09      	ldr	r3, [pc, #36]	; (400650 <hif_chip_wake+0x54>)
  40062a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40062c:	4603      	mov	r3, r0
  40062e:	2800      	cmp	r0, #0
  400630:	d1f8      	bne.n	400624 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400632:	f245 6178 	movw	r1, #22136	; 0x5678
  400636:	f241 0074 	movw	r0, #4212	; 0x1074
  40063a:	4b06      	ldr	r3, [pc, #24]	; (400654 <hif_chip_wake+0x58>)
  40063c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40063e:	4603      	mov	r3, r0
  400640:	2800      	cmp	r0, #0
  400642:	d0e9      	beq.n	400618 <hif_chip_wake+0x1c>
  400644:	e7ee      	b.n	400624 <hif_chip_wake+0x28>
  400646:	bf00      	nop
  400648:	204009f1 	.word	0x204009f1
  40064c:	204009f0 	.word	0x204009f0
  400650:	00401419 	.word	0x00401419
  400654:	004018b5 	.word	0x004018b5

00400658 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400658:	4b1e      	ldr	r3, [pc, #120]	; (4006d4 <hif_chip_sleep+0x7c>)
  40065a:	781b      	ldrb	r3, [r3, #0]
  40065c:	b123      	cbz	r3, 400668 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40065e:	4a1d      	ldr	r2, [pc, #116]	; (4006d4 <hif_chip_sleep+0x7c>)
  400660:	7813      	ldrb	r3, [r2, #0]
  400662:	3b01      	subs	r3, #1
  400664:	b2db      	uxtb	r3, r3
  400666:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  400668:	4b1a      	ldr	r3, [pc, #104]	; (4006d4 <hif_chip_sleep+0x7c>)
  40066a:	781b      	ldrb	r3, [r3, #0]
  40066c:	2b00      	cmp	r3, #0
  40066e:	d12e      	bne.n	4006ce <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400670:	4b19      	ldr	r3, [pc, #100]	; (4006d8 <hif_chip_sleep+0x80>)
  400672:	781b      	ldrb	r3, [r3, #0]
  400674:	b2db      	uxtb	r3, r3
  400676:	2b03      	cmp	r3, #3
  400678:	d006      	beq.n	400688 <hif_chip_sleep+0x30>
  40067a:	4b17      	ldr	r3, [pc, #92]	; (4006d8 <hif_chip_sleep+0x80>)
  40067c:	781b      	ldrb	r3, [r3, #0]
  40067e:	b2db      	uxtb	r3, r3
  400680:	2b04      	cmp	r3, #4
  400682:	d001      	beq.n	400688 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  400684:	2300      	movs	r3, #0
  400686:	e023      	b.n	4006d0 <hif_chip_sleep+0x78>
{
  400688:	b500      	push	{lr}
  40068a:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  40068c:	2300      	movs	r3, #0
  40068e:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  400690:	f244 3121 	movw	r1, #17185	; 0x4321
  400694:	f241 0074 	movw	r0, #4212	; 0x1074
  400698:	4b10      	ldr	r3, [pc, #64]	; (4006dc <hif_chip_sleep+0x84>)
  40069a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40069c:	4603      	mov	r3, r0
  40069e:	b118      	cbz	r0, 4006a8 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  4006a0:	4618      	mov	r0, r3
  4006a2:	b003      	add	sp, #12
  4006a4:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  4006a8:	a901      	add	r1, sp, #4
  4006aa:	2001      	movs	r0, #1
  4006ac:	4b0c      	ldr	r3, [pc, #48]	; (4006e0 <hif_chip_sleep+0x88>)
  4006ae:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4006b0:	4603      	mov	r3, r0
  4006b2:	2800      	cmp	r0, #0
  4006b4:	d1f4      	bne.n	4006a0 <hif_chip_sleep+0x48>
			if(reg&0x2)
  4006b6:	9901      	ldr	r1, [sp, #4]
  4006b8:	f011 0f02 	tst.w	r1, #2
  4006bc:	d0f0      	beq.n	4006a0 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4006be:	f021 0102 	bic.w	r1, r1, #2
  4006c2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4006c4:	2001      	movs	r0, #1
  4006c6:	4b05      	ldr	r3, [pc, #20]	; (4006dc <hif_chip_sleep+0x84>)
  4006c8:	4798      	blx	r3
  4006ca:	4603      	mov	r3, r0
  4006cc:	e7e8      	b.n	4006a0 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4006ce:	2300      	movs	r3, #0
}
  4006d0:	4618      	mov	r0, r3
  4006d2:	4770      	bx	lr
  4006d4:	204009f1 	.word	0x204009f1
  4006d8:	204009f0 	.word	0x204009f0
  4006dc:	004018b5 	.word	0x004018b5
  4006e0:	004018a9 	.word	0x004018a9

004006e4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4006e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006e8:	b087      	sub	sp, #28
  4006ea:	4607      	mov	r7, r0
  4006ec:	4688      	mov	r8, r1
  4006ee:	4692      	mov	sl, r2
  4006f0:	4699      	mov	r9, r3
  4006f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4006f4:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4006f8:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4006fc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  400700:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  400704:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  400708:	2308      	movs	r3, #8
  40070a:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40070e:	2c00      	cmp	r4, #0
  400710:	f000 809f 	beq.w	400852 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  400714:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400718:	fa16 f383 	uxtah	r3, r6, r3
  40071c:	442b      	add	r3, r5
  40071e:	b29b      	uxth	r3, r3
  400720:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  400724:	4b5c      	ldr	r3, [pc, #368]	; (400898 <hif_send+0x1b4>)
  400726:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  400728:	4683      	mov	fp, r0
  40072a:	2800      	cmp	r0, #0
  40072c:	f040 80a2 	bne.w	400874 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  400730:	2300      	movs	r3, #0
  400732:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400734:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  400738:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  40073a:	9b02      	ldr	r3, [sp, #8]
  40073c:	431f      	orrs	r7, r3
  40073e:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400740:	9b02      	ldr	r3, [sp, #8]
  400742:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  400746:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  400748:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40074c:	9b02      	ldr	r3, [sp, #8]
  40074e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400752:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  400754:	9902      	ldr	r1, [sp, #8]
  400756:	f241 008c 	movw	r0, #4236	; 0x108c
  40075a:	4b50      	ldr	r3, [pc, #320]	; (40089c <hif_send+0x1b8>)
  40075c:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40075e:	4683      	mov	fp, r0
  400760:	2800      	cmp	r0, #0
  400762:	f040 8091 	bne.w	400888 <hif_send+0x1a4>


		reg = 0;
  400766:	2300      	movs	r3, #0
  400768:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  40076a:	9b02      	ldr	r3, [sp, #8]
  40076c:	f043 0302 	orr.w	r3, r3, #2
  400770:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400772:	9902      	ldr	r1, [sp, #8]
  400774:	f241 0078 	movw	r0, #4216	; 0x1078
  400778:	4b48      	ldr	r3, [pc, #288]	; (40089c <hif_send+0x1b8>)
  40077a:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40077c:	4683      	mov	fp, r0
  40077e:	2800      	cmp	r0, #0
  400780:	f040 8082 	bne.w	400888 <hif_send+0x1a4>
		dma_addr = 0;
  400784:	2300      	movs	r3, #0
  400786:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400788:	f8ad 3006 	strh.w	r3, [sp, #6]
  40078c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400790:	b29b      	uxth	r3, r3
  400792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400796:	d216      	bcs.n	4007c6 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  400798:	f241 0878 	movw	r8, #4216	; 0x1078
  40079c:	4f40      	ldr	r7, [pc, #256]	; (4008a0 <hif_send+0x1bc>)
  40079e:	a902      	add	r1, sp, #8
  4007a0:	4640      	mov	r0, r8
  4007a2:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  4007a4:	b978      	cbnz	r0, 4007c6 <hif_send+0xe2>
			if (!(reg & 0x2))
  4007a6:	9b02      	ldr	r3, [sp, #8]
  4007a8:	f013 0f02 	tst.w	r3, #2
  4007ac:	d059      	beq.n	400862 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  4007ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007b2:	3301      	adds	r3, #1
  4007b4:	b29b      	uxth	r3, r3
  4007b6:	f8ad 3006 	strh.w	r3, [sp, #6]
  4007ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007be:	b29b      	uxth	r3, r3
  4007c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4007c4:	d3eb      	bcc.n	40079e <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4007c6:	9b03      	ldr	r3, [sp, #12]
  4007c8:	2b00      	cmp	r3, #0
  4007ca:	d061      	beq.n	400890 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4007cc:	9b03      	ldr	r3, [sp, #12]
  4007ce:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4007d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4007d4:	b29b      	uxth	r3, r3
  4007d6:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4007da:	9804      	ldr	r0, [sp, #16]
  4007dc:	2208      	movs	r2, #8
  4007de:	a905      	add	r1, sp, #20
  4007e0:	4b30      	ldr	r3, [pc, #192]	; (4008a4 <hif_send+0x1c0>)
  4007e2:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4007e4:	4683      	mov	fp, r0
  4007e6:	2800      	cmp	r0, #0
  4007e8:	d14e      	bne.n	400888 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4007ea:	9b04      	ldr	r3, [sp, #16]
  4007ec:	3308      	adds	r3, #8
  4007ee:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4007f0:	f1ba 0f00 	cmp.w	sl, #0
  4007f4:	d00a      	beq.n	40080c <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4007f6:	9804      	ldr	r0, [sp, #16]
  4007f8:	464a      	mov	r2, r9
  4007fa:	4651      	mov	r1, sl
  4007fc:	4b29      	ldr	r3, [pc, #164]	; (4008a4 <hif_send+0x1c0>)
  4007fe:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400800:	4683      	mov	fp, r0
  400802:	2800      	cmp	r0, #0
  400804:	d140      	bne.n	400888 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  400806:	9b04      	ldr	r3, [sp, #16]
  400808:	444b      	add	r3, r9
  40080a:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  40080c:	b17c      	cbz	r4, 40082e <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  40080e:	9b04      	ldr	r3, [sp, #16]
  400810:	eba5 0509 	sub.w	r5, r5, r9
  400814:	441d      	add	r5, r3
  400816:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  400818:	9804      	ldr	r0, [sp, #16]
  40081a:	4632      	mov	r2, r6
  40081c:	4621      	mov	r1, r4
  40081e:	4b21      	ldr	r3, [pc, #132]	; (4008a4 <hif_send+0x1c0>)
  400820:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400822:	4683      	mov	fp, r0
  400824:	2800      	cmp	r0, #0
  400826:	d12f      	bne.n	400888 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  400828:	9b04      	ldr	r3, [sp, #16]
  40082a:	441e      	add	r6, r3
  40082c:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  40082e:	9b03      	ldr	r3, [sp, #12]
  400830:	009b      	lsls	r3, r3, #2
  400832:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400834:	9b02      	ldr	r3, [sp, #8]
  400836:	f043 0302 	orr.w	r3, r3, #2
  40083a:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  40083c:	9902      	ldr	r1, [sp, #8]
  40083e:	f241 006c 	movw	r0, #4204	; 0x106c
  400842:	4b16      	ldr	r3, [pc, #88]	; (40089c <hif_send+0x1b8>)
  400844:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400846:	4683      	mov	fp, r0
  400848:	b9f0      	cbnz	r0, 400888 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  40084a:	4b17      	ldr	r3, [pc, #92]	; (4008a8 <hif_send+0x1c4>)
  40084c:	4798      	blx	r3
  40084e:	4683      	mov	fp, r0
  400850:	e01a      	b.n	400888 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  400852:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400856:	fa19 f383 	uxtah	r3, r9, r3
  40085a:	b29b      	uxth	r3, r3
  40085c:	f8ad 3016 	strh.w	r3, [sp, #22]
  400860:	e760      	b.n	400724 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  400862:	a903      	add	r1, sp, #12
  400864:	4811      	ldr	r0, [pc, #68]	; (4008ac <hif_send+0x1c8>)
  400866:	4b0e      	ldr	r3, [pc, #56]	; (4008a0 <hif_send+0x1bc>)
  400868:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40086a:	2800      	cmp	r0, #0
  40086c:	d0ab      	beq.n	4007c6 <hif_send+0xe2>
					dma_addr = 0;
  40086e:	2300      	movs	r3, #0
  400870:	9303      	str	r3, [sp, #12]
  400872:	e7a8      	b.n	4007c6 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  400874:	f240 129f 	movw	r2, #415	; 0x19f
  400878:	490d      	ldr	r1, [pc, #52]	; (4008b0 <hif_send+0x1cc>)
  40087a:	480e      	ldr	r0, [pc, #56]	; (4008b4 <hif_send+0x1d0>)
  40087c:	4c0e      	ldr	r4, [pc, #56]	; (4008b8 <hif_send+0x1d4>)
  40087e:	47a0      	blx	r4
  400880:	480e      	ldr	r0, [pc, #56]	; (4008bc <hif_send+0x1d8>)
  400882:	47a0      	blx	r4
  400884:	480e      	ldr	r0, [pc, #56]	; (4008c0 <hif_send+0x1dc>)
  400886:	47a0      	blx	r4

ERR1:
	return ret;
}
  400888:	4658      	mov	r0, fp
  40088a:	b007      	add	sp, #28
  40088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  400890:	f06f 0b02 	mvn.w	fp, #2
  400894:	e7f8      	b.n	400888 <hif_send+0x1a4>
  400896:	bf00      	nop
  400898:	004005fd 	.word	0x004005fd
  40089c:	004018b5 	.word	0x004018b5
  4008a0:	004018a9 	.word	0x004018a9
  4008a4:	0040191d 	.word	0x0040191d
  4008a8:	00400659 	.word	0x00400659
  4008ac:	00150400 	.word	0x00150400
  4008b0:	00407038 	.word	0x00407038
  4008b4:	00407008 	.word	0x00407008
  4008b8:	004040b9 	.word	0x004040b9
  4008bc:	0040728c 	.word	0x0040728c
  4008c0:	00407034 	.word	0x00407034

004008c4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4008c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008c8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008ca:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 400bc4 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  4008ce:	4fa2      	ldr	r7, [pc, #648]	; (400b58 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4008d0:	4ea2      	ldr	r6, [pc, #648]	; (400b5c <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4008d2:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 400bc8 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  4008d6:	e0d5      	b.n	400a84 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4008d8:	2204      	movs	r2, #4
  4008da:	a904      	add	r1, sp, #16
  4008dc:	9805      	ldr	r0, [sp, #20]
  4008de:	4ba0      	ldr	r3, [pc, #640]	; (400b60 <hif_handle_isr+0x29c>)
  4008e0:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4008e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4008e6:	b29b      	uxth	r3, r3
  4008e8:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4008ec:	4604      	mov	r4, r0
  4008ee:	2800      	cmp	r0, #0
  4008f0:	d130      	bne.n	400954 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4008f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4008f6:	b29b      	uxth	r3, r3
  4008f8:	429d      	cmp	r5, r3
  4008fa:	d005      	beq.n	400908 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  4008fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400900:	b29b      	uxth	r3, r3
  400902:	1aeb      	subs	r3, r5, r3
  400904:	2b04      	cmp	r3, #4
  400906:	dc33      	bgt.n	400970 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  400908:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40090c:	b2db      	uxtb	r3, r3
  40090e:	2b01      	cmp	r3, #1
  400910:	d047      	beq.n	4009a2 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  400912:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400916:	b2db      	uxtb	r3, r3
  400918:	2b02      	cmp	r3, #2
  40091a:	d05f      	beq.n	4009dc <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  40091c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400920:	b2db      	uxtb	r3, r3
  400922:	2b04      	cmp	r3, #4
  400924:	d068      	beq.n	4009f8 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400926:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40092a:	b2db      	uxtb	r3, r3
  40092c:	2b06      	cmp	r3, #6
  40092e:	d071      	beq.n	400a14 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400930:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400934:	b2db      	uxtb	r3, r3
  400936:	2b07      	cmp	r3, #7
  400938:	d07a      	beq.n	400a30 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  40093a:	f240 2202 	movw	r2, #514	; 0x202
  40093e:	4641      	mov	r1, r8
  400940:	4630      	mov	r0, r6
  400942:	4c88      	ldr	r4, [pc, #544]	; (400b64 <hif_handle_isr+0x2a0>)
  400944:	47a0      	blx	r4
  400946:	4888      	ldr	r0, [pc, #544]	; (400b68 <hif_handle_isr+0x2a4>)
  400948:	47a0      	blx	r4
  40094a:	4888      	ldr	r0, [pc, #544]	; (400b6c <hif_handle_isr+0x2a8>)
  40094c:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  40094e:	f06f 0405 	mvn.w	r4, #5
  400952:	e096      	b.n	400a82 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  400954:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400958:	4641      	mov	r1, r8
  40095a:	4630      	mov	r0, r6
  40095c:	4d81      	ldr	r5, [pc, #516]	; (400b64 <hif_handle_isr+0x2a0>)
  40095e:	47a8      	blx	r5
  400960:	4883      	ldr	r0, [pc, #524]	; (400b70 <hif_handle_isr+0x2ac>)
  400962:	47a8      	blx	r5
  400964:	4881      	ldr	r0, [pc, #516]	; (400b6c <hif_handle_isr+0x2a8>)
  400966:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400968:	2001      	movs	r0, #1
  40096a:	4b82      	ldr	r3, [pc, #520]	; (400b74 <hif_handle_isr+0x2b0>)
  40096c:	4798      	blx	r3
  40096e:	e088      	b.n	400a82 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400970:	f240 12df 	movw	r2, #479	; 0x1df
  400974:	4641      	mov	r1, r8
  400976:	4630      	mov	r0, r6
  400978:	4c7a      	ldr	r4, [pc, #488]	; (400b64 <hif_handle_isr+0x2a0>)
  40097a:	47a0      	blx	r4
  40097c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  400980:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400984:	f89d 1011 	ldrb.w	r1, [sp, #17]
  400988:	9100      	str	r1, [sp, #0]
  40098a:	b292      	uxth	r2, r2
  40098c:	4629      	mov	r1, r5
  40098e:	487a      	ldr	r0, [pc, #488]	; (400b78 <hif_handle_isr+0x2b4>)
  400990:	47a0      	blx	r4
  400992:	4876      	ldr	r0, [pc, #472]	; (400b6c <hif_handle_isr+0x2a8>)
  400994:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  400996:	2001      	movs	r0, #1
  400998:	4b76      	ldr	r3, [pc, #472]	; (400b74 <hif_handle_isr+0x2b0>)
  40099a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  40099c:	f06f 0405 	mvn.w	r4, #5
  4009a0:	e06f      	b.n	400a82 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  4009a2:	4b76      	ldr	r3, [pc, #472]	; (400b7c <hif_handle_isr+0x2b8>)
  4009a4:	681b      	ldr	r3, [r3, #0]
  4009a6:	b143      	cbz	r3, 4009ba <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009a8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009ac:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009b0:	3908      	subs	r1, #8
  4009b2:	9a05      	ldr	r2, [sp, #20]
  4009b4:	3208      	adds	r2, #8
  4009b6:	b289      	uxth	r1, r1
  4009b8:	4798      	blx	r3
					if(!gu8HifSizeDone)
  4009ba:	4b71      	ldr	r3, [pc, #452]	; (400b80 <hif_handle_isr+0x2bc>)
  4009bc:	781b      	ldrb	r3, [r3, #0]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d15c      	bne.n	400a7c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  4009c2:	f240 2209 	movw	r2, #521	; 0x209
  4009c6:	4641      	mov	r1, r8
  4009c8:	4630      	mov	r0, r6
  4009ca:	4c66      	ldr	r4, [pc, #408]	; (400b64 <hif_handle_isr+0x2a0>)
  4009cc:	47a0      	blx	r4
  4009ce:	486d      	ldr	r0, [pc, #436]	; (400b84 <hif_handle_isr+0x2c0>)
  4009d0:	47a0      	blx	r4
  4009d2:	4866      	ldr	r0, [pc, #408]	; (400b6c <hif_handle_isr+0x2a8>)
  4009d4:	47a0      	blx	r4
						ret = hif_set_rx_done();
  4009d6:	4b6c      	ldr	r3, [pc, #432]	; (400b88 <hif_handle_isr+0x2c4>)
  4009d8:	4798      	blx	r3
  4009da:	e04f      	b.n	400a7c <hif_handle_isr+0x1b8>
						if(pfIpCb)
  4009dc:	4b6b      	ldr	r3, [pc, #428]	; (400b8c <hif_handle_isr+0x2c8>)
  4009de:	681b      	ldr	r3, [r3, #0]
  4009e0:	2b00      	cmp	r3, #0
  4009e2:	d0ea      	beq.n	4009ba <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009e4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009e8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009ec:	3908      	subs	r1, #8
  4009ee:	9a05      	ldr	r2, [sp, #20]
  4009f0:	3208      	adds	r2, #8
  4009f2:	b289      	uxth	r1, r1
  4009f4:	4798      	blx	r3
  4009f6:	e7e0      	b.n	4009ba <hif_handle_isr+0xf6>
						if(pfOtaCb)
  4009f8:	4b65      	ldr	r3, [pc, #404]	; (400b90 <hif_handle_isr+0x2cc>)
  4009fa:	681b      	ldr	r3, [r3, #0]
  4009fc:	2b00      	cmp	r3, #0
  4009fe:	d0dc      	beq.n	4009ba <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a00:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a04:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a08:	3908      	subs	r1, #8
  400a0a:	9a05      	ldr	r2, [sp, #20]
  400a0c:	3208      	adds	r2, #8
  400a0e:	b289      	uxth	r1, r1
  400a10:	4798      	blx	r3
  400a12:	e7d2      	b.n	4009ba <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  400a14:	4b5f      	ldr	r3, [pc, #380]	; (400b94 <hif_handle_isr+0x2d0>)
  400a16:	681b      	ldr	r3, [r3, #0]
  400a18:	2b00      	cmp	r3, #0
  400a1a:	d0ce      	beq.n	4009ba <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a1c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a20:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a24:	3908      	subs	r1, #8
  400a26:	9a05      	ldr	r2, [sp, #20]
  400a28:	3208      	adds	r2, #8
  400a2a:	b289      	uxth	r1, r1
  400a2c:	4798      	blx	r3
  400a2e:	e7c4      	b.n	4009ba <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  400a30:	4b59      	ldr	r3, [pc, #356]	; (400b98 <hif_handle_isr+0x2d4>)
  400a32:	681b      	ldr	r3, [r3, #0]
  400a34:	2b00      	cmp	r3, #0
  400a36:	d0c0      	beq.n	4009ba <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a38:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a3c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a40:	3908      	subs	r1, #8
  400a42:	9a05      	ldr	r2, [sp, #20]
  400a44:	3208      	adds	r2, #8
  400a46:	b289      	uxth	r1, r1
  400a48:	4798      	blx	r3
  400a4a:	e7b6      	b.n	4009ba <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  400a4c:	f240 2211 	movw	r2, #529	; 0x211
  400a50:	4641      	mov	r1, r8
  400a52:	4630      	mov	r0, r6
  400a54:	4c43      	ldr	r4, [pc, #268]	; (400b64 <hif_handle_isr+0x2a0>)
  400a56:	47a0      	blx	r4
  400a58:	4850      	ldr	r0, [pc, #320]	; (400b9c <hif_handle_isr+0x2d8>)
  400a5a:	47a0      	blx	r4
  400a5c:	4843      	ldr	r0, [pc, #268]	; (400b6c <hif_handle_isr+0x2a8>)
  400a5e:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  400a60:	f06f 0401 	mvn.w	r4, #1
  400a64:	e02f      	b.n	400ac6 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  400a66:	f44f 7206 	mov.w	r2, #536	; 0x218
  400a6a:	4641      	mov	r1, r8
  400a6c:	4630      	mov	r0, r6
  400a6e:	4c3d      	ldr	r4, [pc, #244]	; (400b64 <hif_handle_isr+0x2a0>)
  400a70:	47a0      	blx	r4
  400a72:	9903      	ldr	r1, [sp, #12]
  400a74:	484a      	ldr	r0, [pc, #296]	; (400ba0 <hif_handle_isr+0x2dc>)
  400a76:	47a0      	blx	r4
  400a78:	483c      	ldr	r0, [pc, #240]	; (400b6c <hif_handle_isr+0x2a8>)
  400a7a:	47a0      	blx	r4
	ret = hif_chip_sleep();
  400a7c:	4b49      	ldr	r3, [pc, #292]	; (400ba4 <hif_handle_isr+0x2e0>)
  400a7e:	4798      	blx	r3
  400a80:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  400a82:	bb04      	cbnz	r4, 400ac6 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  400a84:	f899 3000 	ldrb.w	r3, [r9]
  400a88:	2b00      	cmp	r3, #0
  400a8a:	f000 809f 	beq.w	400bcc <hif_handle_isr+0x308>
		gu8Interrupt--;
  400a8e:	f899 3000 	ldrb.w	r3, [r9]
  400a92:	3b01      	subs	r3, #1
  400a94:	b2db      	uxtb	r3, r3
  400a96:	f889 3000 	strb.w	r3, [r9]
  400a9a:	e01f      	b.n	400adc <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400a9c:	f240 221e 	movw	r2, #542	; 0x21e
  400aa0:	4641      	mov	r1, r8
  400aa2:	4630      	mov	r0, r6
  400aa4:	4d2f      	ldr	r5, [pc, #188]	; (400b64 <hif_handle_isr+0x2a0>)
  400aa6:	47a8      	blx	r5
  400aa8:	483f      	ldr	r0, [pc, #252]	; (400ba8 <hif_handle_isr+0x2e4>)
  400aaa:	47a8      	blx	r5
  400aac:	482f      	ldr	r0, [pc, #188]	; (400b6c <hif_handle_isr+0x2a8>)
  400aae:	47a8      	blx	r5
  400ab0:	e009      	b.n	400ac6 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400ab2:	f44f 7209 	mov.w	r2, #548	; 0x224
  400ab6:	4641      	mov	r1, r8
  400ab8:	4630      	mov	r0, r6
  400aba:	4d2a      	ldr	r5, [pc, #168]	; (400b64 <hif_handle_isr+0x2a0>)
  400abc:	47a8      	blx	r5
  400abe:	483b      	ldr	r0, [pc, #236]	; (400bac <hif_handle_isr+0x2e8>)
  400ac0:	47a8      	blx	r5
  400ac2:	482a      	ldr	r0, [pc, #168]	; (400b6c <hif_handle_isr+0x2a8>)
  400ac4:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400ac6:	f240 2243 	movw	r2, #579	; 0x243
  400aca:	4939      	ldr	r1, [pc, #228]	; (400bb0 <hif_handle_isr+0x2ec>)
  400acc:	4630      	mov	r0, r6
  400ace:	4d25      	ldr	r5, [pc, #148]	; (400b64 <hif_handle_isr+0x2a0>)
  400ad0:	47a8      	blx	r5
  400ad2:	4621      	mov	r1, r4
  400ad4:	4837      	ldr	r0, [pc, #220]	; (400bb4 <hif_handle_isr+0x2f0>)
  400ad6:	47a8      	blx	r5
  400ad8:	4824      	ldr	r0, [pc, #144]	; (400b6c <hif_handle_isr+0x2a8>)
  400ada:	47a8      	blx	r5
	ret = hif_chip_wake();
  400adc:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  400ade:	4604      	mov	r4, r0
  400ae0:	2800      	cmp	r0, #0
  400ae2:	d1e6      	bne.n	400ab2 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  400ae4:	a903      	add	r1, sp, #12
  400ae6:	f241 0070 	movw	r0, #4208	; 0x1070
  400aea:	4b33      	ldr	r3, [pc, #204]	; (400bb8 <hif_handle_isr+0x2f4>)
  400aec:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  400aee:	4604      	mov	r4, r0
  400af0:	2800      	cmp	r0, #0
  400af2:	d1d3      	bne.n	400a9c <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  400af4:	9b03      	ldr	r3, [sp, #12]
  400af6:	f013 0f01 	tst.w	r3, #1
  400afa:	d0b4      	beq.n	400a66 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  400afc:	4b1d      	ldr	r3, [pc, #116]	; (400b74 <hif_handle_isr+0x2b0>)
  400afe:	4798      	blx	r3
				reg &= ~(1<<0);
  400b00:	9903      	ldr	r1, [sp, #12]
  400b02:	f021 0101 	bic.w	r1, r1, #1
  400b06:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400b08:	f241 0070 	movw	r0, #4208	; 0x1070
  400b0c:	4b2b      	ldr	r3, [pc, #172]	; (400bbc <hif_handle_isr+0x2f8>)
  400b0e:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  400b10:	4604      	mov	r4, r0
  400b12:	2800      	cmp	r0, #0
  400b14:	d1d7      	bne.n	400ac6 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  400b16:	2200      	movs	r2, #0
  400b18:	4b19      	ldr	r3, [pc, #100]	; (400b80 <hif_handle_isr+0x2bc>)
  400b1a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  400b1c:	9d03      	ldr	r5, [sp, #12]
  400b1e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400b22:	2d00      	cmp	r5, #0
  400b24:	d092      	beq.n	400a4c <hif_handle_isr+0x188>
					uint32 address = 0;
  400b26:	a906      	add	r1, sp, #24
  400b28:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  400b2c:	f241 0084 	movw	r0, #4228	; 0x1084
  400b30:	4b21      	ldr	r3, [pc, #132]	; (400bb8 <hif_handle_isr+0x2f4>)
  400b32:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400b34:	4604      	mov	r4, r0
  400b36:	2800      	cmp	r0, #0
  400b38:	f43f aece 	beq.w	4008d8 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  400b3c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  400b40:	4641      	mov	r1, r8
  400b42:	4630      	mov	r0, r6
  400b44:	4d07      	ldr	r5, [pc, #28]	; (400b64 <hif_handle_isr+0x2a0>)
  400b46:	47a8      	blx	r5
  400b48:	481d      	ldr	r0, [pc, #116]	; (400bc0 <hif_handle_isr+0x2fc>)
  400b4a:	47a8      	blx	r5
  400b4c:	4807      	ldr	r0, [pc, #28]	; (400b6c <hif_handle_isr+0x2a8>)
  400b4e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400b50:	2001      	movs	r0, #1
  400b52:	4b08      	ldr	r3, [pc, #32]	; (400b74 <hif_handle_isr+0x2b0>)
  400b54:	4798      	blx	r3
  400b56:	e794      	b.n	400a82 <hif_handle_isr+0x1be>
  400b58:	004005fd 	.word	0x004005fd
  400b5c:	00407008 	.word	0x00407008
  400b60:	004018c1 	.word	0x004018c1
  400b64:	004040b9 	.word	0x004040b9
  400b68:	004070f8 	.word	0x004070f8
  400b6c:	00407034 	.word	0x00407034
  400b70:	004070a0 	.word	0x004070a0
  400b74:	00400315 	.word	0x00400315
  400b78:	004070b8 	.word	0x004070b8
  400b7c:	20400a08 	.word	0x20400a08
  400b80:	204009f2 	.word	0x204009f2
  400b84:	00407110 	.word	0x00407110
  400b88:	004005bd 	.word	0x004005bd
  400b8c:	204009fc 	.word	0x204009fc
  400b90:	20400a00 	.word	0x20400a00
  400b94:	204009f4 	.word	0x204009f4
  400b98:	20400a04 	.word	0x20400a04
  400b9c:	00407134 	.word	0x00407134
  400ba0:	00407148 	.word	0x00407148
  400ba4:	00400659 	.word	0x00400659
  400ba8:	00407164 	.word	0x00407164
  400bac:	00407188 	.word	0x00407188
  400bb0:	0040704c 	.word	0x0040704c
  400bb4:	004071a8 	.word	0x004071a8
  400bb8:	004018a9 	.word	0x004018a9
  400bbc:	004018b5 	.word	0x004018b5
  400bc0:	00407078 	.word	0x00407078
  400bc4:	204009f3 	.word	0x204009f3
  400bc8:	00407044 	.word	0x00407044
			}
		}
	}

	return ret;
}
  400bcc:	2000      	movs	r0, #0
  400bce:	b007      	add	sp, #28
  400bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400bd4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bd8:	b083      	sub	sp, #12
  400bda:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400bdc:	2a00      	cmp	r2, #0
  400bde:	bf18      	it	ne
  400be0:	2900      	cmpne	r1, #0
  400be2:	d003      	beq.n	400bec <hif_receive+0x18>
  400be4:	4605      	mov	r5, r0
  400be6:	460f      	mov	r7, r1
  400be8:	4616      	mov	r6, r2
  400bea:	b9b8      	cbnz	r0, 400c1c <hif_receive+0x48>
	{
		if(isDone)
  400bec:	b14c      	cbz	r4, 400c02 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  400bee:	2201      	movs	r2, #1
  400bf0:	4b32      	ldr	r3, [pc, #200]	; (400cbc <hif_receive+0xe8>)
  400bf2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400bf4:	4b32      	ldr	r3, [pc, #200]	; (400cc0 <hif_receive+0xec>)
  400bf6:	4798      	blx	r3
  400bf8:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400bfa:	4618      	mov	r0, r3
  400bfc:	b003      	add	sp, #12
  400bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  400c02:	f240 2269 	movw	r2, #617	; 0x269
  400c06:	492f      	ldr	r1, [pc, #188]	; (400cc4 <hif_receive+0xf0>)
  400c08:	482f      	ldr	r0, [pc, #188]	; (400cc8 <hif_receive+0xf4>)
  400c0a:	4c30      	ldr	r4, [pc, #192]	; (400ccc <hif_receive+0xf8>)
  400c0c:	47a0      	blx	r4
  400c0e:	4830      	ldr	r0, [pc, #192]	; (400cd0 <hif_receive+0xfc>)
  400c10:	47a0      	blx	r4
  400c12:	4830      	ldr	r0, [pc, #192]	; (400cd4 <hif_receive+0x100>)
  400c14:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  400c16:	f06f 030b 	mvn.w	r3, #11
  400c1a:	e7ee      	b.n	400bfa <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c1c:	4669      	mov	r1, sp
  400c1e:	f241 0070 	movw	r0, #4208	; 0x1070
  400c22:	4b2d      	ldr	r3, [pc, #180]	; (400cd8 <hif_receive+0x104>)
  400c24:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c26:	4603      	mov	r3, r0
  400c28:	2800      	cmp	r0, #0
  400c2a:	d1e6      	bne.n	400bfa <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  400c2c:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400c30:	a901      	add	r1, sp, #4
  400c32:	f241 0084 	movw	r0, #4228	; 0x1084
  400c36:	4b28      	ldr	r3, [pc, #160]	; (400cd8 <hif_receive+0x104>)
  400c38:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c3a:	4603      	mov	r3, r0
  400c3c:	2800      	cmp	r0, #0
  400c3e:	d1dc      	bne.n	400bfa <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  400c40:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  400c44:	4546      	cmp	r6, r8
  400c46:	d81c      	bhi.n	400c82 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400c48:	9b01      	ldr	r3, [sp, #4]
  400c4a:	429d      	cmp	r5, r3
  400c4c:	d328      	bcc.n	400ca0 <hif_receive+0xcc>
  400c4e:	eb05 0906 	add.w	r9, r5, r6
  400c52:	4443      	add	r3, r8
  400c54:	4599      	cmp	r9, r3
  400c56:	d823      	bhi.n	400ca0 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400c58:	4632      	mov	r2, r6
  400c5a:	4639      	mov	r1, r7
  400c5c:	4628      	mov	r0, r5
  400c5e:	4b1f      	ldr	r3, [pc, #124]	; (400cdc <hif_receive+0x108>)
  400c60:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c62:	4603      	mov	r3, r0
  400c64:	2800      	cmp	r0, #0
  400c66:	d1c8      	bne.n	400bfa <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400c68:	9a01      	ldr	r2, [sp, #4]
  400c6a:	4490      	add	r8, r2
  400c6c:	45c8      	cmp	r8, r9
  400c6e:	d001      	beq.n	400c74 <hif_receive+0xa0>
  400c70:	2c00      	cmp	r4, #0
  400c72:	d0c2      	beq.n	400bfa <hif_receive+0x26>
		gu8HifSizeDone = 1;
  400c74:	2201      	movs	r2, #1
  400c76:	4b11      	ldr	r3, [pc, #68]	; (400cbc <hif_receive+0xe8>)
  400c78:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  400c7a:	4b11      	ldr	r3, [pc, #68]	; (400cc0 <hif_receive+0xec>)
  400c7c:	4798      	blx	r3
  400c7e:	4603      	mov	r3, r0
  400c80:	e7bb      	b.n	400bfa <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400c82:	f240 227a 	movw	r2, #634	; 0x27a
  400c86:	490f      	ldr	r1, [pc, #60]	; (400cc4 <hif_receive+0xf0>)
  400c88:	480f      	ldr	r0, [pc, #60]	; (400cc8 <hif_receive+0xf4>)
  400c8a:	4c10      	ldr	r4, [pc, #64]	; (400ccc <hif_receive+0xf8>)
  400c8c:	47a0      	blx	r4
  400c8e:	4642      	mov	r2, r8
  400c90:	4631      	mov	r1, r6
  400c92:	4813      	ldr	r0, [pc, #76]	; (400ce0 <hif_receive+0x10c>)
  400c94:	47a0      	blx	r4
  400c96:	480f      	ldr	r0, [pc, #60]	; (400cd4 <hif_receive+0x100>)
  400c98:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  400c9a:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  400c9e:	e7ac      	b.n	400bfa <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400ca0:	f44f 7220 	mov.w	r2, #640	; 0x280
  400ca4:	4907      	ldr	r1, [pc, #28]	; (400cc4 <hif_receive+0xf0>)
  400ca6:	4808      	ldr	r0, [pc, #32]	; (400cc8 <hif_receive+0xf4>)
  400ca8:	4c08      	ldr	r4, [pc, #32]	; (400ccc <hif_receive+0xf8>)
  400caa:	47a0      	blx	r4
  400cac:	480d      	ldr	r0, [pc, #52]	; (400ce4 <hif_receive+0x110>)
  400cae:	47a0      	blx	r4
  400cb0:	4808      	ldr	r0, [pc, #32]	; (400cd4 <hif_receive+0x100>)
  400cb2:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  400cb4:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  400cb8:	e79f      	b.n	400bfa <hif_receive+0x26>
  400cba:	bf00      	nop
  400cbc:	204009f2 	.word	0x204009f2
  400cc0:	004005bd 	.word	0x004005bd
  400cc4:	0040705c 	.word	0x0040705c
  400cc8:	00407008 	.word	0x00407008
  400ccc:	004040b9 	.word	0x004040b9
  400cd0:	004071d8 	.word	0x004071d8
  400cd4:	00407034 	.word	0x00407034
  400cd8:	004018a9 	.word	0x004018a9
  400cdc:	004018c1 	.word	0x004018c1
  400ce0:	004071f8 	.word	0x004071f8
  400ce4:	0040723c 	.word	0x0040723c

00400ce8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400ce8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400cea:	1e43      	subs	r3, r0, #1
  400cec:	2b06      	cmp	r3, #6
  400cee:	d81d      	bhi.n	400d2c <hif_register_cb+0x44>
  400cf0:	e8df f003 	tbb	[pc, r3]
  400cf4:	0c100408 	.word	0x0c100408
  400cf8:	141c      	.short	0x141c
  400cfa:	18          	.byte	0x18
  400cfb:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400cfc:	4b13      	ldr	r3, [pc, #76]	; (400d4c <hif_register_cb+0x64>)
  400cfe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  400d00:	2000      	movs	r0, #0
			break;
  400d02:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  400d04:	4b12      	ldr	r3, [pc, #72]	; (400d50 <hif_register_cb+0x68>)
  400d06:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  400d08:	2000      	movs	r0, #0
			break;
  400d0a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  400d0c:	4b11      	ldr	r3, [pc, #68]	; (400d54 <hif_register_cb+0x6c>)
  400d0e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  400d10:	2000      	movs	r0, #0
			break;
  400d12:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  400d14:	4b10      	ldr	r3, [pc, #64]	; (400d58 <hif_register_cb+0x70>)
  400d16:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  400d18:	2000      	movs	r0, #0
			break;
  400d1a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  400d1c:	4b0f      	ldr	r3, [pc, #60]	; (400d5c <hif_register_cb+0x74>)
  400d1e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  400d20:	2000      	movs	r0, #0
			break;
  400d22:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  400d24:	4b0e      	ldr	r3, [pc, #56]	; (400d60 <hif_register_cb+0x78>)
  400d26:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  400d28:	2000      	movs	r0, #0
			break;
  400d2a:	bd38      	pop	{r3, r4, r5, pc}
  400d2c:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400d2e:	f240 22b9 	movw	r2, #697	; 0x2b9
  400d32:	490c      	ldr	r1, [pc, #48]	; (400d64 <hif_register_cb+0x7c>)
  400d34:	480c      	ldr	r0, [pc, #48]	; (400d68 <hif_register_cb+0x80>)
  400d36:	4d0d      	ldr	r5, [pc, #52]	; (400d6c <hif_register_cb+0x84>)
  400d38:	47a8      	blx	r5
  400d3a:	4621      	mov	r1, r4
  400d3c:	480c      	ldr	r0, [pc, #48]	; (400d70 <hif_register_cb+0x88>)
  400d3e:	47a8      	blx	r5
  400d40:	480c      	ldr	r0, [pc, #48]	; (400d74 <hif_register_cb+0x8c>)
  400d42:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400d44:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400d48:	bd38      	pop	{r3, r4, r5, pc}
  400d4a:	bf00      	nop
  400d4c:	204009fc 	.word	0x204009fc
  400d50:	20400a08 	.word	0x20400a08
  400d54:	20400a00 	.word	0x20400a00
  400d58:	204009f8 	.word	0x204009f8
  400d5c:	204009f4 	.word	0x204009f4
  400d60:	20400a04 	.word	0x20400a04
  400d64:	00407068 	.word	0x00407068
  400d68:	00407008 	.word	0x00407008
  400d6c:	004040b9 	.word	0x004040b9
  400d70:	00407280 	.word	0x00407280
  400d74:	00407034 	.word	0x00407034

00400d78 <hif_init>:
{
  400d78:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  400d7a:	2400      	movs	r4, #0
  400d7c:	4b09      	ldr	r3, [pc, #36]	; (400da4 <hif_init+0x2c>)
  400d7e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  400d80:	4b09      	ldr	r3, [pc, #36]	; (400da8 <hif_init+0x30>)
  400d82:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  400d84:	4b09      	ldr	r3, [pc, #36]	; (400dac <hif_init+0x34>)
  400d86:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400d88:	4b09      	ldr	r3, [pc, #36]	; (400db0 <hif_init+0x38>)
  400d8a:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  400d8c:	4b09      	ldr	r3, [pc, #36]	; (400db4 <hif_init+0x3c>)
  400d8e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  400d90:	4809      	ldr	r0, [pc, #36]	; (400db8 <hif_init+0x40>)
  400d92:	4b0a      	ldr	r3, [pc, #40]	; (400dbc <hif_init+0x44>)
  400d94:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400d96:	490a      	ldr	r1, [pc, #40]	; (400dc0 <hif_init+0x48>)
  400d98:	2003      	movs	r0, #3
  400d9a:	4b0a      	ldr	r3, [pc, #40]	; (400dc4 <hif_init+0x4c>)
  400d9c:	4798      	blx	r3
}
  400d9e:	4620      	mov	r0, r4
  400da0:	bd10      	pop	{r4, pc}
  400da2:	bf00      	nop
  400da4:	20400a08 	.word	0x20400a08
  400da8:	204009fc 	.word	0x204009fc
  400dac:	204009f1 	.word	0x204009f1
  400db0:	204009f0 	.word	0x204009f0
  400db4:	204009f3 	.word	0x204009f3
  400db8:	004005a9 	.word	0x004005a9
  400dbc:	00400295 	.word	0x00400295
  400dc0:	004005b9 	.word	0x004005b9
  400dc4:	00400ce9 	.word	0x00400ce9

00400dc8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400dc8:	b530      	push	{r4, r5, lr}
  400dca:	b09f      	sub	sp, #124	; 0x7c
  400dcc:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400dce:	282c      	cmp	r0, #44	; 0x2c
  400dd0:	d02e      	beq.n	400e30 <m2m_wifi_cb+0x68>
  400dd2:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400dd4:	281b      	cmp	r0, #27
  400dd6:	d03b      	beq.n	400e50 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400dd8:	2806      	cmp	r0, #6
  400dda:	d049      	beq.n	400e70 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400ddc:	280e      	cmp	r0, #14
  400dde:	d025      	beq.n	400e2c <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400de0:	2832      	cmp	r0, #50	; 0x32
  400de2:	d055      	beq.n	400e90 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400de4:	282f      	cmp	r0, #47	; 0x2f
  400de6:	d063      	beq.n	400eb0 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400de8:	2834      	cmp	r0, #52	; 0x34
  400dea:	d076      	beq.n	400eda <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400dec:	2811      	cmp	r0, #17
  400dee:	f000 8093 	beq.w	400f18 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400df2:	2813      	cmp	r0, #19
  400df4:	f000 80a8 	beq.w	400f48 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400df8:	2804      	cmp	r0, #4
  400dfa:	f000 80b7 	beq.w	400f6c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400dfe:	2865      	cmp	r0, #101	; 0x65
  400e00:	f000 80c6 	beq.w	400f90 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400e04:	2809      	cmp	r0, #9
  400e06:	f000 80d5 	beq.w	400fb4 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400e0a:	282a      	cmp	r0, #42	; 0x2a
  400e0c:	f000 80e4 	beq.w	400fd8 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400e10:	2820      	cmp	r0, #32
  400e12:	f000 80f3 	beq.w	400ffc <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400e16:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400e1a:	4986      	ldr	r1, [pc, #536]	; (401034 <m2m_wifi_cb+0x26c>)
  400e1c:	4886      	ldr	r0, [pc, #536]	; (401038 <m2m_wifi_cb+0x270>)
  400e1e:	4d87      	ldr	r5, [pc, #540]	; (40103c <m2m_wifi_cb+0x274>)
  400e20:	47a8      	blx	r5
  400e22:	4621      	mov	r1, r4
  400e24:	4886      	ldr	r0, [pc, #536]	; (401040 <m2m_wifi_cb+0x278>)
  400e26:	47a8      	blx	r5
  400e28:	4886      	ldr	r0, [pc, #536]	; (401044 <m2m_wifi_cb+0x27c>)
  400e2a:	47a8      	blx	r5
	}
}
  400e2c:	b01f      	add	sp, #124	; 0x7c
  400e2e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400e30:	2300      	movs	r3, #0
  400e32:	2204      	movs	r2, #4
  400e34:	a903      	add	r1, sp, #12
  400e36:	4628      	mov	r0, r5
  400e38:	4c83      	ldr	r4, [pc, #524]	; (401048 <m2m_wifi_cb+0x280>)
  400e3a:	47a0      	blx	r4
  400e3c:	2800      	cmp	r0, #0
  400e3e:	d1f5      	bne.n	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400e40:	4b82      	ldr	r3, [pc, #520]	; (40104c <m2m_wifi_cb+0x284>)
  400e42:	681b      	ldr	r3, [r3, #0]
  400e44:	2b00      	cmp	r3, #0
  400e46:	d0f1      	beq.n	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400e48:	a903      	add	r1, sp, #12
  400e4a:	202c      	movs	r0, #44	; 0x2c
  400e4c:	4798      	blx	r3
  400e4e:	e7ed      	b.n	400e2c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  400e50:	2300      	movs	r3, #0
  400e52:	2208      	movs	r2, #8
  400e54:	a903      	add	r1, sp, #12
  400e56:	4628      	mov	r0, r5
  400e58:	4c7b      	ldr	r4, [pc, #492]	; (401048 <m2m_wifi_cb+0x280>)
  400e5a:	47a0      	blx	r4
  400e5c:	2800      	cmp	r0, #0
  400e5e:	d1e5      	bne.n	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400e60:	4b7a      	ldr	r3, [pc, #488]	; (40104c <m2m_wifi_cb+0x284>)
  400e62:	681b      	ldr	r3, [r3, #0]
  400e64:	2b00      	cmp	r3, #0
  400e66:	d0e1      	beq.n	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  400e68:	a903      	add	r1, sp, #12
  400e6a:	201b      	movs	r0, #27
  400e6c:	4798      	blx	r3
  400e6e:	e7dd      	b.n	400e2c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  400e70:	2301      	movs	r3, #1
  400e72:	2230      	movs	r2, #48	; 0x30
  400e74:	a903      	add	r1, sp, #12
  400e76:	4628      	mov	r0, r5
  400e78:	4c73      	ldr	r4, [pc, #460]	; (401048 <m2m_wifi_cb+0x280>)
  400e7a:	47a0      	blx	r4
  400e7c:	2800      	cmp	r0, #0
  400e7e:	d1d5      	bne.n	400e2c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  400e80:	4b72      	ldr	r3, [pc, #456]	; (40104c <m2m_wifi_cb+0x284>)
  400e82:	681b      	ldr	r3, [r3, #0]
  400e84:	2b00      	cmp	r3, #0
  400e86:	d0d1      	beq.n	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  400e88:	a903      	add	r1, sp, #12
  400e8a:	2006      	movs	r0, #6
  400e8c:	4798      	blx	r3
  400e8e:	e7cd      	b.n	400e2c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  400e90:	2300      	movs	r3, #0
  400e92:	2210      	movs	r2, #16
  400e94:	a903      	add	r1, sp, #12
  400e96:	4628      	mov	r0, r5
  400e98:	4c6b      	ldr	r4, [pc, #428]	; (401048 <m2m_wifi_cb+0x280>)
  400e9a:	47a0      	blx	r4
  400e9c:	2800      	cmp	r0, #0
  400e9e:	d1c5      	bne.n	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400ea0:	4b6a      	ldr	r3, [pc, #424]	; (40104c <m2m_wifi_cb+0x284>)
  400ea2:	681b      	ldr	r3, [r3, #0]
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	d0c1      	beq.n	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  400ea8:	a903      	add	r1, sp, #12
  400eaa:	2032      	movs	r0, #50	; 0x32
  400eac:	4798      	blx	r3
  400eae:	e7bd      	b.n	400e2c <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  400eb0:	2264      	movs	r2, #100	; 0x64
  400eb2:	2100      	movs	r1, #0
  400eb4:	a803      	add	r0, sp, #12
  400eb6:	4b66      	ldr	r3, [pc, #408]	; (401050 <m2m_wifi_cb+0x288>)
  400eb8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  400eba:	2300      	movs	r3, #0
  400ebc:	2264      	movs	r2, #100	; 0x64
  400ebe:	a903      	add	r1, sp, #12
  400ec0:	4628      	mov	r0, r5
  400ec2:	4c61      	ldr	r4, [pc, #388]	; (401048 <m2m_wifi_cb+0x280>)
  400ec4:	47a0      	blx	r4
  400ec6:	2800      	cmp	r0, #0
  400ec8:	d1b0      	bne.n	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400eca:	4b60      	ldr	r3, [pc, #384]	; (40104c <m2m_wifi_cb+0x284>)
  400ecc:	681b      	ldr	r3, [r3, #0]
  400ece:	2b00      	cmp	r3, #0
  400ed0:	d0ac      	beq.n	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  400ed2:	a903      	add	r1, sp, #12
  400ed4:	202f      	movs	r0, #47	; 0x2f
  400ed6:	4798      	blx	r3
  400ed8:	e7a8      	b.n	400e2c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  400eda:	2300      	movs	r3, #0
  400edc:	2204      	movs	r2, #4
  400ede:	a903      	add	r1, sp, #12
  400ee0:	4628      	mov	r0, r5
  400ee2:	4c59      	ldr	r4, [pc, #356]	; (401048 <m2m_wifi_cb+0x280>)
  400ee4:	47a0      	blx	r4
  400ee6:	2800      	cmp	r0, #0
  400ee8:	d1a0      	bne.n	400e2c <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  400eea:	485a      	ldr	r0, [pc, #360]	; (401054 <m2m_wifi_cb+0x28c>)
  400eec:	4c53      	ldr	r4, [pc, #332]	; (40103c <m2m_wifi_cb+0x274>)
  400eee:	47a0      	blx	r4
  400ef0:	9903      	ldr	r1, [sp, #12]
  400ef2:	b2cb      	uxtb	r3, r1
  400ef4:	9300      	str	r3, [sp, #0]
  400ef6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  400efa:	f3c1 4207 	ubfx	r2, r1, #16, #8
  400efe:	0e09      	lsrs	r1, r1, #24
  400f00:	4855      	ldr	r0, [pc, #340]	; (401058 <m2m_wifi_cb+0x290>)
  400f02:	47a0      	blx	r4
  400f04:	484f      	ldr	r0, [pc, #316]	; (401044 <m2m_wifi_cb+0x27c>)
  400f06:	47a0      	blx	r4
			if (gpfAppWifiCb)
  400f08:	4b50      	ldr	r3, [pc, #320]	; (40104c <m2m_wifi_cb+0x284>)
  400f0a:	681b      	ldr	r3, [r3, #0]
  400f0c:	2b00      	cmp	r3, #0
  400f0e:	d08d      	beq.n	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  400f10:	2100      	movs	r1, #0
  400f12:	2034      	movs	r0, #52	; 0x34
  400f14:	4798      	blx	r3
  400f16:	e789      	b.n	400e2c <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  400f18:	2300      	movs	r3, #0
  400f1a:	4a50      	ldr	r2, [pc, #320]	; (40105c <m2m_wifi_cb+0x294>)
  400f1c:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  400f1e:	2204      	movs	r2, #4
  400f20:	a903      	add	r1, sp, #12
  400f22:	4628      	mov	r0, r5
  400f24:	4c48      	ldr	r4, [pc, #288]	; (401048 <m2m_wifi_cb+0x280>)
  400f26:	47a0      	blx	r4
  400f28:	2800      	cmp	r0, #0
  400f2a:	f47f af7f 	bne.w	400e2c <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  400f2e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  400f32:	4b4b      	ldr	r3, [pc, #300]	; (401060 <m2m_wifi_cb+0x298>)
  400f34:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  400f36:	4b45      	ldr	r3, [pc, #276]	; (40104c <m2m_wifi_cb+0x284>)
  400f38:	681b      	ldr	r3, [r3, #0]
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	f43f af76 	beq.w	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  400f40:	a903      	add	r1, sp, #12
  400f42:	2011      	movs	r0, #17
  400f44:	4798      	blx	r3
  400f46:	e771      	b.n	400e2c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  400f48:	2300      	movs	r3, #0
  400f4a:	222c      	movs	r2, #44	; 0x2c
  400f4c:	a903      	add	r1, sp, #12
  400f4e:	4628      	mov	r0, r5
  400f50:	4c3d      	ldr	r4, [pc, #244]	; (401048 <m2m_wifi_cb+0x280>)
  400f52:	47a0      	blx	r4
  400f54:	2800      	cmp	r0, #0
  400f56:	f47f af69 	bne.w	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400f5a:	4b3c      	ldr	r3, [pc, #240]	; (40104c <m2m_wifi_cb+0x284>)
  400f5c:	681b      	ldr	r3, [r3, #0]
  400f5e:	2b00      	cmp	r3, #0
  400f60:	f43f af64 	beq.w	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  400f64:	a903      	add	r1, sp, #12
  400f66:	2013      	movs	r0, #19
  400f68:	4798      	blx	r3
  400f6a:	e75f      	b.n	400e2c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f6c:	2300      	movs	r3, #0
  400f6e:	2204      	movs	r2, #4
  400f70:	a91c      	add	r1, sp, #112	; 0x70
  400f72:	4628      	mov	r0, r5
  400f74:	4c34      	ldr	r4, [pc, #208]	; (401048 <m2m_wifi_cb+0x280>)
  400f76:	47a0      	blx	r4
  400f78:	2800      	cmp	r0, #0
  400f7a:	f47f af57 	bne.w	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400f7e:	4b33      	ldr	r3, [pc, #204]	; (40104c <m2m_wifi_cb+0x284>)
  400f80:	681b      	ldr	r3, [r3, #0]
  400f82:	2b00      	cmp	r3, #0
  400f84:	f43f af52 	beq.w	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  400f88:	a91c      	add	r1, sp, #112	; 0x70
  400f8a:	2004      	movs	r0, #4
  400f8c:	4798      	blx	r3
  400f8e:	e74d      	b.n	400e2c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f90:	2300      	movs	r3, #0
  400f92:	2204      	movs	r2, #4
  400f94:	a91c      	add	r1, sp, #112	; 0x70
  400f96:	4628      	mov	r0, r5
  400f98:	4c2b      	ldr	r4, [pc, #172]	; (401048 <m2m_wifi_cb+0x280>)
  400f9a:	47a0      	blx	r4
  400f9c:	2800      	cmp	r0, #0
  400f9e:	f47f af45 	bne.w	400e2c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400fa2:	4b2a      	ldr	r3, [pc, #168]	; (40104c <m2m_wifi_cb+0x284>)
  400fa4:	681b      	ldr	r3, [r3, #0]
  400fa6:	2b00      	cmp	r3, #0
  400fa8:	f43f af40 	beq.w	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  400fac:	a91c      	add	r1, sp, #112	; 0x70
  400fae:	2065      	movs	r0, #101	; 0x65
  400fb0:	4798      	blx	r3
  400fb2:	e73b      	b.n	400e2c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  400fb4:	2301      	movs	r3, #1
  400fb6:	2264      	movs	r2, #100	; 0x64
  400fb8:	a903      	add	r1, sp, #12
  400fba:	4628      	mov	r0, r5
  400fbc:	4c22      	ldr	r4, [pc, #136]	; (401048 <m2m_wifi_cb+0x280>)
  400fbe:	47a0      	blx	r4
  400fc0:	2800      	cmp	r0, #0
  400fc2:	f47f af33 	bne.w	400e2c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  400fc6:	4b21      	ldr	r3, [pc, #132]	; (40104c <m2m_wifi_cb+0x284>)
  400fc8:	681b      	ldr	r3, [r3, #0]
  400fca:	2b00      	cmp	r3, #0
  400fcc:	f43f af2e 	beq.w	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  400fd0:	a903      	add	r1, sp, #12
  400fd2:	2009      	movs	r0, #9
  400fd4:	4798      	blx	r3
  400fd6:	e729      	b.n	400e2c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  400fd8:	2301      	movs	r3, #1
  400fda:	2204      	movs	r2, #4
  400fdc:	a903      	add	r1, sp, #12
  400fde:	4628      	mov	r0, r5
  400fe0:	4c19      	ldr	r4, [pc, #100]	; (401048 <m2m_wifi_cb+0x280>)
  400fe2:	47a0      	blx	r4
  400fe4:	2800      	cmp	r0, #0
  400fe6:	f47f af21 	bne.w	400e2c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  400fea:	4b18      	ldr	r3, [pc, #96]	; (40104c <m2m_wifi_cb+0x284>)
  400fec:	681b      	ldr	r3, [r3, #0]
  400fee:	2b00      	cmp	r3, #0
  400ff0:	f43f af1c 	beq.w	400e2c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  400ff4:	a903      	add	r1, sp, #12
  400ff6:	202a      	movs	r0, #42	; 0x2a
  400ff8:	4798      	blx	r3
  400ffa:	e717      	b.n	400e2c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  400ffc:	2300      	movs	r3, #0
  400ffe:	2208      	movs	r2, #8
  401000:	a903      	add	r1, sp, #12
  401002:	4628      	mov	r0, r5
  401004:	4c10      	ldr	r4, [pc, #64]	; (401048 <m2m_wifi_cb+0x280>)
  401006:	47a0      	blx	r4
  401008:	2800      	cmp	r0, #0
  40100a:	f47f af0f 	bne.w	400e2c <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  40100e:	2301      	movs	r3, #1
  401010:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401014:	9903      	ldr	r1, [sp, #12]
  401016:	f105 0008 	add.w	r0, r5, #8
  40101a:	47a0      	blx	r4
  40101c:	2800      	cmp	r0, #0
  40101e:	f47f af05 	bne.w	400e2c <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  401022:	4b0a      	ldr	r3, [pc, #40]	; (40104c <m2m_wifi_cb+0x284>)
  401024:	681b      	ldr	r3, [r3, #0]
  401026:	2b00      	cmp	r3, #0
  401028:	f43f af00 	beq.w	400e2c <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  40102c:	a903      	add	r1, sp, #12
  40102e:	2020      	movs	r0, #32
  401030:	4798      	blx	r3
  401032:	e6fb      	b.n	400e2c <m2m_wifi_cb+0x64>
  401034:	004072ac 	.word	0x004072ac
  401038:	00407008 	.word	0x00407008
  40103c:	004040b9 	.word	0x004040b9
  401040:	00407308 	.word	0x00407308
  401044:	00407034 	.word	0x00407034
  401048:	00400bd5 	.word	0x00400bd5
  40104c:	20400a0c 	.word	0x20400a0c
  401050:	00400581 	.word	0x00400581
  401054:	004072dc 	.word	0x004072dc
  401058:	004072e8 	.word	0x004072e8
  40105c:	20400a11 	.word	0x20400a11
  401060:	20400a10 	.word	0x20400a10

00401064 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401064:	b5f0      	push	{r4, r5, r6, r7, lr}
  401066:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401068:	2301      	movs	r3, #1
  40106a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  40106e:	2800      	cmp	r0, #0
  401070:	d050      	beq.n	401114 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401072:	6802      	ldr	r2, [r0, #0]
  401074:	4b29      	ldr	r3, [pc, #164]	; (40111c <m2m_wifi_init+0xb8>)
  401076:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401078:	2200      	movs	r2, #0
  40107a:	4b29      	ldr	r3, [pc, #164]	; (401120 <m2m_wifi_init+0xbc>)
  40107c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40107e:	f10d 0007 	add.w	r0, sp, #7
  401082:	4b28      	ldr	r3, [pc, #160]	; (401124 <m2m_wifi_init+0xc0>)
  401084:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401086:	4604      	mov	r4, r0
  401088:	b110      	cbz	r0, 401090 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40108a:	4620      	mov	r0, r4
  40108c:	b00b      	add	sp, #44	; 0x2c
  40108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  401090:	4b25      	ldr	r3, [pc, #148]	; (401128 <m2m_wifi_init+0xc4>)
  401092:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401094:	4604      	mov	r4, r0
  401096:	2800      	cmp	r0, #0
  401098:	d138      	bne.n	40110c <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40109a:	4924      	ldr	r1, [pc, #144]	; (40112c <m2m_wifi_init+0xc8>)
  40109c:	2001      	movs	r0, #1
  40109e:	4b24      	ldr	r3, [pc, #144]	; (401130 <m2m_wifi_init+0xcc>)
  4010a0:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  4010a2:	a802      	add	r0, sp, #8
  4010a4:	4b23      	ldr	r3, [pc, #140]	; (401134 <m2m_wifi_init+0xd0>)
  4010a6:	4798      	blx	r3
  4010a8:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  4010aa:	4f23      	ldr	r7, [pc, #140]	; (401138 <m2m_wifi_init+0xd4>)
  4010ac:	4638      	mov	r0, r7
  4010ae:	4d23      	ldr	r5, [pc, #140]	; (40113c <m2m_wifi_init+0xd8>)
  4010b0:	47a8      	blx	r5
  4010b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4010b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
  4010ba:	f89d 100c 	ldrb.w	r1, [sp, #12]
  4010be:	4820      	ldr	r0, [pc, #128]	; (401140 <m2m_wifi_init+0xdc>)
  4010c0:	47a8      	blx	r5
  4010c2:	4e20      	ldr	r6, [pc, #128]	; (401144 <m2m_wifi_init+0xe0>)
  4010c4:	4630      	mov	r0, r6
  4010c6:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  4010c8:	4638      	mov	r0, r7
  4010ca:	47a8      	blx	r5
  4010cc:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4010d0:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4010d4:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4010d8:	481b      	ldr	r0, [pc, #108]	; (401148 <m2m_wifi_init+0xe4>)
  4010da:	47a8      	blx	r5
  4010dc:	4630      	mov	r0, r6
  4010de:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4010e0:	4638      	mov	r0, r7
  4010e2:	47a8      	blx	r5
  4010e4:	2300      	movs	r3, #0
  4010e6:	2203      	movs	r2, #3
  4010e8:	2113      	movs	r1, #19
  4010ea:	4818      	ldr	r0, [pc, #96]	; (40114c <m2m_wifi_init+0xe8>)
  4010ec:	47a8      	blx	r5
  4010ee:	4630      	mov	r0, r6
  4010f0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4010f2:	f114 0f0d 	cmn.w	r4, #13
  4010f6:	d1c8      	bne.n	40108a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4010f8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4010fc:	4914      	ldr	r1, [pc, #80]	; (401150 <m2m_wifi_init+0xec>)
  4010fe:	4815      	ldr	r0, [pc, #84]	; (401154 <m2m_wifi_init+0xf0>)
  401100:	47a8      	blx	r5
  401102:	4815      	ldr	r0, [pc, #84]	; (401158 <m2m_wifi_init+0xf4>)
  401104:	47a8      	blx	r5
  401106:	4630      	mov	r0, r6
  401108:	47a8      	blx	r5
  40110a:	e7be      	b.n	40108a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  40110c:	2000      	movs	r0, #0
  40110e:	4b13      	ldr	r3, [pc, #76]	; (40115c <m2m_wifi_init+0xf8>)
  401110:	4798      	blx	r3
  401112:	e7ba      	b.n	40108a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  401114:	f06f 040b 	mvn.w	r4, #11
  401118:	e7b7      	b.n	40108a <m2m_wifi_init+0x26>
  40111a:	bf00      	nop
  40111c:	20400a0c 	.word	0x20400a0c
  401120:	20400a11 	.word	0x20400a11
  401124:	00401a29 	.word	0x00401a29
  401128:	00400d79 	.word	0x00400d79
  40112c:	00400dc9 	.word	0x00400dc9
  401130:	00400ce9 	.word	0x00400ce9
  401134:	00401979 	.word	0x00401979
  401138:	004072dc 	.word	0x004072dc
  40113c:	004040b9 	.word	0x004040b9
  401140:	004073c8 	.word	0x004073c8
  401144:	00407034 	.word	0x00407034
  401148:	004073e4 	.word	0x004073e4
  40114c:	00407400 	.word	0x00407400
  401150:	004072b8 	.word	0x004072b8
  401154:	00407008 	.word	0x00407008
  401158:	0040741c 	.word	0x0040741c
  40115c:	00401af5 	.word	0x00401af5

00401160 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401160:	b508      	push	{r3, lr}
	return hif_handle_isr();
  401162:	4b01      	ldr	r3, [pc, #4]	; (401168 <m2m_wifi_handle_events+0x8>)
  401164:	4798      	blx	r3
}
  401166:	bd08      	pop	{r3, pc}
  401168:	004008c5 	.word	0x004008c5

0040116c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  40116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401170:	b0a0      	sub	sp, #128	; 0x80
  401172:	4680      	mov	r8, r0
  401174:	460d      	mov	r5, r1
  401176:	4614      	mov	r4, r2
  401178:	461e      	mov	r6, r3
  40117a:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40117e:	2a01      	cmp	r2, #1
  401180:	d003      	beq.n	40118a <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  401182:	2b00      	cmp	r3, #0
  401184:	d037      	beq.n	4011f6 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401186:	2a02      	cmp	r2, #2
  401188:	d042      	beq.n	401210 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40118a:	1e6b      	subs	r3, r5, #1
  40118c:	b2db      	uxtb	r3, r3
  40118e:	2b1f      	cmp	r3, #31
  401190:	d875      	bhi.n	40127e <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401192:	2fff      	cmp	r7, #255	; 0xff
  401194:	d001      	beq.n	40119a <m2m_wifi_connect_sc+0x2e>
  401196:	2f0d      	cmp	r7, #13
  401198:	d87e      	bhi.n	401298 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40119a:	462a      	mov	r2, r5
  40119c:	4641      	mov	r1, r8
  40119e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4011a2:	4b77      	ldr	r3, [pc, #476]	; (401380 <m2m_wifi_connect_sc+0x214>)
  4011a4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4011a6:	ab20      	add	r3, sp, #128	; 0x80
  4011a8:	441d      	add	r5, r3
  4011aa:	2300      	movs	r3, #0
  4011ac:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4011b0:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4011b4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4011b8:	3300      	adds	r3, #0
  4011ba:	bf18      	it	ne
  4011bc:	2301      	movne	r3, #1
  4011be:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4011c2:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4011c6:	2c03      	cmp	r4, #3
  4011c8:	d073      	beq.n	4012b2 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4011ca:	2c02      	cmp	r4, #2
  4011cc:	f000 80aa 	beq.w	401324 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4011d0:	2c04      	cmp	r4, #4
  4011d2:	f000 80c1 	beq.w	401358 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4011d6:	2c01      	cmp	r4, #1
  4011d8:	f040 80c4 	bne.w	401364 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4011dc:	2300      	movs	r3, #0
  4011de:	9302      	str	r3, [sp, #8]
  4011e0:	9301      	str	r3, [sp, #4]
  4011e2:	9300      	str	r3, [sp, #0]
  4011e4:	236c      	movs	r3, #108	; 0x6c
  4011e6:	aa05      	add	r2, sp, #20
  4011e8:	2128      	movs	r1, #40	; 0x28
  4011ea:	2001      	movs	r0, #1
  4011ec:	4c65      	ldr	r4, [pc, #404]	; (401384 <m2m_wifi_connect_sc+0x218>)
  4011ee:	47a0      	blx	r4

ERR1:
	return ret;
}
  4011f0:	b020      	add	sp, #128	; 0x80
  4011f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4011f6:	f240 2203 	movw	r2, #515	; 0x203
  4011fa:	4963      	ldr	r1, [pc, #396]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  4011fc:	4863      	ldr	r0, [pc, #396]	; (40138c <m2m_wifi_connect_sc+0x220>)
  4011fe:	4c64      	ldr	r4, [pc, #400]	; (401390 <m2m_wifi_connect_sc+0x224>)
  401200:	47a0      	blx	r4
  401202:	4864      	ldr	r0, [pc, #400]	; (401394 <m2m_wifi_connect_sc+0x228>)
  401204:	47a0      	blx	r4
  401206:	4864      	ldr	r0, [pc, #400]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  401208:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40120a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40120e:	e7ef      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401210:	4618      	mov	r0, r3
  401212:	4b62      	ldr	r3, [pc, #392]	; (40139c <m2m_wifi_connect_sc+0x230>)
  401214:	4798      	blx	r3
  401216:	2840      	cmp	r0, #64	; 0x40
  401218:	d1b7      	bne.n	40118a <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  40121a:	7833      	ldrb	r3, [r6, #0]
  40121c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401220:	b2d2      	uxtb	r2, r2
  401222:	2a06      	cmp	r2, #6
  401224:	d91e      	bls.n	401264 <m2m_wifi_connect_sc+0xf8>
  401226:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40122a:	b2d2      	uxtb	r2, r2
  40122c:	2a36      	cmp	r2, #54	; 0x36
  40122e:	d819      	bhi.n	401264 <m2m_wifi_connect_sc+0xf8>
  401230:	3b47      	subs	r3, #71	; 0x47
  401232:	b2db      	uxtb	r3, r3
  401234:	2b19      	cmp	r3, #25
  401236:	d915      	bls.n	401264 <m2m_wifi_connect_sc+0xf8>
  401238:	4631      	mov	r1, r6
  40123a:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  40123e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  401242:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401246:	b2d2      	uxtb	r2, r2
  401248:	2a06      	cmp	r2, #6
  40124a:	d90b      	bls.n	401264 <m2m_wifi_connect_sc+0xf8>
  40124c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401250:	b2d2      	uxtb	r2, r2
  401252:	2a36      	cmp	r2, #54	; 0x36
  401254:	d806      	bhi.n	401264 <m2m_wifi_connect_sc+0xf8>
  401256:	3b47      	subs	r3, #71	; 0x47
  401258:	b2db      	uxtb	r3, r3
  40125a:	2b19      	cmp	r3, #25
  40125c:	d902      	bls.n	401264 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  40125e:	4288      	cmp	r0, r1
  401260:	d1ed      	bne.n	40123e <m2m_wifi_connect_sc+0xd2>
  401262:	e792      	b.n	40118a <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  401264:	f240 220f 	movw	r2, #527	; 0x20f
  401268:	4947      	ldr	r1, [pc, #284]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  40126a:	4848      	ldr	r0, [pc, #288]	; (40138c <m2m_wifi_connect_sc+0x220>)
  40126c:	4c48      	ldr	r4, [pc, #288]	; (401390 <m2m_wifi_connect_sc+0x224>)
  40126e:	47a0      	blx	r4
  401270:	484b      	ldr	r0, [pc, #300]	; (4013a0 <m2m_wifi_connect_sc+0x234>)
  401272:	47a0      	blx	r4
  401274:	4848      	ldr	r0, [pc, #288]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  401276:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  401278:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40127c:	e7b8      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40127e:	f240 2219 	movw	r2, #537	; 0x219
  401282:	4941      	ldr	r1, [pc, #260]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  401284:	4841      	ldr	r0, [pc, #260]	; (40138c <m2m_wifi_connect_sc+0x220>)
  401286:	4c42      	ldr	r4, [pc, #264]	; (401390 <m2m_wifi_connect_sc+0x224>)
  401288:	47a0      	blx	r4
  40128a:	4846      	ldr	r0, [pc, #280]	; (4013a4 <m2m_wifi_connect_sc+0x238>)
  40128c:	47a0      	blx	r4
  40128e:	4842      	ldr	r0, [pc, #264]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  401290:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401292:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401296:	e7ab      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  401298:	f240 2222 	movw	r2, #546	; 0x222
  40129c:	493a      	ldr	r1, [pc, #232]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  40129e:	483b      	ldr	r0, [pc, #236]	; (40138c <m2m_wifi_connect_sc+0x220>)
  4012a0:	4c3b      	ldr	r4, [pc, #236]	; (401390 <m2m_wifi_connect_sc+0x224>)
  4012a2:	47a0      	blx	r4
  4012a4:	4840      	ldr	r0, [pc, #256]	; (4013a8 <m2m_wifi_connect_sc+0x23c>)
  4012a6:	47a0      	blx	r4
  4012a8:	483b      	ldr	r0, [pc, #236]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  4012aa:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012ac:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012b0:	e79e      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4012b2:	7833      	ldrb	r3, [r6, #0]
  4012b4:	3b01      	subs	r3, #1
  4012b6:	b2db      	uxtb	r3, r3
  4012b8:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4012bc:	2b03      	cmp	r3, #3
  4012be:	d813      	bhi.n	4012e8 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4012c0:	7872      	ldrb	r2, [r6, #1]
  4012c2:	1e53      	subs	r3, r2, #1
  4012c4:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  4012c8:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  4012cc:	2b0b      	cmp	r3, #11
  4012ce:	d11a      	bne.n	401306 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4012d0:	1cb1      	adds	r1, r6, #2
  4012d2:	f10d 0016 	add.w	r0, sp, #22
  4012d6:	4b2a      	ldr	r3, [pc, #168]	; (401380 <m2m_wifi_connect_sc+0x214>)
  4012d8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4012da:	7873      	ldrb	r3, [r6, #1]
  4012dc:	aa20      	add	r2, sp, #128	; 0x80
  4012de:	4413      	add	r3, r2
  4012e0:	2200      	movs	r2, #0
  4012e2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4012e6:	e779      	b.n	4011dc <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4012e8:	f240 2239 	movw	r2, #569	; 0x239
  4012ec:	4926      	ldr	r1, [pc, #152]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  4012ee:	4827      	ldr	r0, [pc, #156]	; (40138c <m2m_wifi_connect_sc+0x220>)
  4012f0:	4c27      	ldr	r4, [pc, #156]	; (401390 <m2m_wifi_connect_sc+0x224>)
  4012f2:	47a0      	blx	r4
  4012f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4012f8:	482c      	ldr	r0, [pc, #176]	; (4013ac <m2m_wifi_connect_sc+0x240>)
  4012fa:	47a0      	blx	r4
  4012fc:	4826      	ldr	r0, [pc, #152]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  4012fe:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401300:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401304:	e774      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401306:	f44f 7210 	mov.w	r2, #576	; 0x240
  40130a:	491f      	ldr	r1, [pc, #124]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  40130c:	481f      	ldr	r0, [pc, #124]	; (40138c <m2m_wifi_connect_sc+0x220>)
  40130e:	4c20      	ldr	r4, [pc, #128]	; (401390 <m2m_wifi_connect_sc+0x224>)
  401310:	47a0      	blx	r4
  401312:	f89d 1015 	ldrb.w	r1, [sp, #21]
  401316:	4826      	ldr	r0, [pc, #152]	; (4013b0 <m2m_wifi_connect_sc+0x244>)
  401318:	47a0      	blx	r4
  40131a:	481f      	ldr	r0, [pc, #124]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  40131c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40131e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401322:	e765      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401324:	4630      	mov	r0, r6
  401326:	4b1d      	ldr	r3, [pc, #116]	; (40139c <m2m_wifi_connect_sc+0x230>)
  401328:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40132a:	1e43      	subs	r3, r0, #1
  40132c:	b29b      	uxth	r3, r3
  40132e:	2b3f      	cmp	r3, #63	; 0x3f
  401330:	d805      	bhi.n	40133e <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  401332:	1c42      	adds	r2, r0, #1
  401334:	4631      	mov	r1, r6
  401336:	a805      	add	r0, sp, #20
  401338:	4b11      	ldr	r3, [pc, #68]	; (401380 <m2m_wifi_connect_sc+0x214>)
  40133a:	4798      	blx	r3
  40133c:	e74e      	b.n	4011dc <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  40133e:	f240 224f 	movw	r2, #591	; 0x24f
  401342:	4911      	ldr	r1, [pc, #68]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  401344:	4811      	ldr	r0, [pc, #68]	; (40138c <m2m_wifi_connect_sc+0x220>)
  401346:	4c12      	ldr	r4, [pc, #72]	; (401390 <m2m_wifi_connect_sc+0x224>)
  401348:	47a0      	blx	r4
  40134a:	481a      	ldr	r0, [pc, #104]	; (4013b4 <m2m_wifi_connect_sc+0x248>)
  40134c:	47a0      	blx	r4
  40134e:	4812      	ldr	r0, [pc, #72]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  401350:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401352:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401356:	e74b      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401358:	223e      	movs	r2, #62	; 0x3e
  40135a:	4631      	mov	r1, r6
  40135c:	a805      	add	r0, sp, #20
  40135e:	4b08      	ldr	r3, [pc, #32]	; (401380 <m2m_wifi_connect_sc+0x214>)
  401360:	4798      	blx	r3
  401362:	e73b      	b.n	4011dc <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  401364:	f240 225f 	movw	r2, #607	; 0x25f
  401368:	4907      	ldr	r1, [pc, #28]	; (401388 <m2m_wifi_connect_sc+0x21c>)
  40136a:	4808      	ldr	r0, [pc, #32]	; (40138c <m2m_wifi_connect_sc+0x220>)
  40136c:	4c08      	ldr	r4, [pc, #32]	; (401390 <m2m_wifi_connect_sc+0x224>)
  40136e:	47a0      	blx	r4
  401370:	4811      	ldr	r0, [pc, #68]	; (4013b8 <m2m_wifi_connect_sc+0x24c>)
  401372:	47a0      	blx	r4
  401374:	4808      	ldr	r0, [pc, #32]	; (401398 <m2m_wifi_connect_sc+0x22c>)
  401376:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401378:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40137c:	e738      	b.n	4011f0 <m2m_wifi_connect_sc+0x84>
  40137e:	bf00      	nop
  401380:	0040056d 	.word	0x0040056d
  401384:	004006e5 	.word	0x004006e5
  401388:	004072c8 	.word	0x004072c8
  40138c:	00407008 	.word	0x00407008
  401390:	004040b9 	.word	0x004040b9
  401394:	0040731c 	.word	0x0040731c
  401398:	00407034 	.word	0x00407034
  40139c:	0040058f 	.word	0x0040058f
  4013a0:	00407330 	.word	0x00407330
  4013a4:	00407340 	.word	0x00407340
  4013a8:	00407354 	.word	0x00407354
  4013ac:	00407360 	.word	0x00407360
  4013b0:	0040737c 	.word	0x0040737c
  4013b4:	00407398 	.word	0x00407398
  4013b8:	004073b4 	.word	0x004073b4

004013bc <m2m_wifi_connect>:
{
  4013bc:	b510      	push	{r4, lr}
  4013be:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4013c0:	2400      	movs	r4, #0
  4013c2:	9401      	str	r4, [sp, #4]
  4013c4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4013c8:	9400      	str	r4, [sp, #0]
  4013ca:	4c02      	ldr	r4, [pc, #8]	; (4013d4 <m2m_wifi_connect+0x18>)
  4013cc:	47a0      	blx	r4
}
  4013ce:	b002      	add	sp, #8
  4013d0:	bd10      	pop	{r4, pc}
  4013d2:	bf00      	nop
  4013d4:	0040116d 	.word	0x0040116d

004013d8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4013d8:	2000      	movs	r0, #0
  4013da:	4770      	bx	lr

004013dc <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013de:	b083      	sub	sp, #12
  4013e0:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013e2:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4013e6:	4e0a      	ldr	r6, [pc, #40]	; (401410 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013e8:	4f0a      	ldr	r7, [pc, #40]	; (401414 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013ea:	4621      	mov	r1, r4
  4013ec:	4628      	mov	r0, r5
  4013ee:	47b0      	blx	r6
		if(val32 != 0) {		
  4013f0:	b154      	cbz	r4, 401408 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4013f2:	a902      	add	r1, sp, #8
  4013f4:	2300      	movs	r3, #0
  4013f6:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013fa:	4628      	mov	r0, r5
  4013fc:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4013fe:	2800      	cmp	r0, #0
  401400:	d1f3      	bne.n	4013ea <chip_apply_conf+0xe>
				if(reg == val32)
  401402:	9b01      	ldr	r3, [sp, #4]
  401404:	429c      	cmp	r4, r3
  401406:	d1f0      	bne.n	4013ea <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  401408:	2000      	movs	r0, #0
  40140a:	b003      	add	sp, #12
  40140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40140e:	bf00      	nop
  401410:	004018b5 	.word	0x004018b5
  401414:	004018a9 	.word	0x004018a9

00401418 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  401418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40141c:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40141e:	2001      	movs	r0, #1
  401420:	4b3c      	ldr	r3, [pc, #240]	; (401514 <nm_clkless_wake+0xfc>)
  401422:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  401424:	a901      	add	r1, sp, #4
  401426:	2001      	movs	r0, #1
  401428:	4b3b      	ldr	r3, [pc, #236]	; (401518 <nm_clkless_wake+0x100>)
  40142a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  40142c:	4682      	mov	sl, r0
  40142e:	b938      	cbnz	r0, 401440 <nm_clkless_wake+0x28>
  401430:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  401432:	f04f 0801 	mov.w	r8, #1
  401436:	f8df 9108 	ldr.w	r9, [pc, #264]	; 401540 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  40143a:	4d36      	ldr	r5, [pc, #216]	; (401514 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40143c:	4f37      	ldr	r7, [pc, #220]	; (40151c <nm_clkless_wake+0x104>)
  40143e:	e020      	b.n	401482 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  401440:	2272      	movs	r2, #114	; 0x72
  401442:	4937      	ldr	r1, [pc, #220]	; (401520 <nm_clkless_wake+0x108>)
  401444:	4837      	ldr	r0, [pc, #220]	; (401524 <nm_clkless_wake+0x10c>)
  401446:	4c38      	ldr	r4, [pc, #224]	; (401528 <nm_clkless_wake+0x110>)
  401448:	47a0      	blx	r4
  40144a:	4838      	ldr	r0, [pc, #224]	; (40152c <nm_clkless_wake+0x114>)
  40144c:	47a0      	blx	r4
  40144e:	4838      	ldr	r0, [pc, #224]	; (401530 <nm_clkless_wake+0x118>)
  401450:	47a0      	blx	r4
		goto _WAKE_EXIT;
  401452:	e009      	b.n	401468 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  401454:	2296      	movs	r2, #150	; 0x96
  401456:	4932      	ldr	r1, [pc, #200]	; (401520 <nm_clkless_wake+0x108>)
  401458:	4832      	ldr	r0, [pc, #200]	; (401524 <nm_clkless_wake+0x10c>)
  40145a:	4c33      	ldr	r4, [pc, #204]	; (401528 <nm_clkless_wake+0x110>)
  40145c:	47a0      	blx	r4
  40145e:	4835      	ldr	r0, [pc, #212]	; (401534 <nm_clkless_wake+0x11c>)
  401460:	47a0      	blx	r4
  401462:	4833      	ldr	r0, [pc, #204]	; (401530 <nm_clkless_wake+0x118>)
  401464:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401466:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  401468:	4650      	mov	r0, sl
  40146a:	b003      	add	sp, #12
  40146c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  401470:	9901      	ldr	r1, [sp, #4]
  401472:	f041 0102 	orr.w	r1, r1, #2
  401476:	4640      	mov	r0, r8
  401478:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  40147a:	9b00      	ldr	r3, [sp, #0]
  40147c:	f013 0f04 	tst.w	r3, #4
  401480:	d1f2      	bne.n	401468 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  401482:	9901      	ldr	r1, [sp, #4]
  401484:	f041 0102 	orr.w	r1, r1, #2
  401488:	4640      	mov	r0, r8
  40148a:	47c8      	blx	r9
		nm_bsp_sleep(1);
  40148c:	4640      	mov	r0, r8
  40148e:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401490:	4669      	mov	r1, sp
  401492:	4b29      	ldr	r3, [pc, #164]	; (401538 <nm_clkless_wake+0x120>)
  401494:	6818      	ldr	r0, [r3, #0]
  401496:	4b20      	ldr	r3, [pc, #128]	; (401518 <nm_clkless_wake+0x100>)
  401498:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40149a:	b908      	cbnz	r0, 4014a0 <nm_clkless_wake+0x88>
  40149c:	9b00      	ldr	r3, [sp, #0]
  40149e:	b9bb      	cbnz	r3, 4014d0 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  4014a0:	4e25      	ldr	r6, [pc, #148]	; (401538 <nm_clkless_wake+0x120>)
  4014a2:	230e      	movs	r3, #14
  4014a4:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  4014a6:	4640      	mov	r0, r8
  4014a8:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014aa:	4669      	mov	r1, sp
  4014ac:	6830      	ldr	r0, [r6, #0]
  4014ae:	4b1a      	ldr	r3, [pc, #104]	; (401518 <nm_clkless_wake+0x100>)
  4014b0:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4014b2:	b908      	cbnz	r0, 4014b8 <nm_clkless_wake+0xa0>
  4014b4:	9b00      	ldr	r3, [sp, #0]
  4014b6:	b95b      	cbnz	r3, 4014d0 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  4014b8:	4e1f      	ldr	r6, [pc, #124]	; (401538 <nm_clkless_wake+0x120>)
  4014ba:	2313      	movs	r3, #19
  4014bc:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  4014be:	4640      	mov	r0, r8
  4014c0:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014c2:	4669      	mov	r1, sp
  4014c4:	6830      	ldr	r0, [r6, #0]
  4014c6:	4b14      	ldr	r3, [pc, #80]	; (401518 <nm_clkless_wake+0x100>)
  4014c8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4014ca:	4606      	mov	r6, r0
  4014cc:	2800      	cmp	r0, #0
  4014ce:	d1c1      	bne.n	401454 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014d0:	4e19      	ldr	r6, [pc, #100]	; (401538 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4014d2:	9b00      	ldr	r3, [sp, #0]
  4014d4:	f013 0f04 	tst.w	r3, #4
  4014d8:	d1c6      	bne.n	401468 <nm_clkless_wake+0x50>
  4014da:	3401      	adds	r4, #1
  4014dc:	fba7 2304 	umull	r2, r3, r7, r4
  4014e0:	085b      	lsrs	r3, r3, #1
  4014e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4014e6:	429c      	cmp	r4, r3
  4014e8:	d1c2      	bne.n	401470 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4014ea:	2002      	movs	r0, #2
  4014ec:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014ee:	4669      	mov	r1, sp
  4014f0:	6830      	ldr	r0, [r6, #0]
  4014f2:	4b09      	ldr	r3, [pc, #36]	; (401518 <nm_clkless_wake+0x100>)
  4014f4:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4014f6:	9b00      	ldr	r3, [sp, #0]
  4014f8:	f013 0f04 	tst.w	r3, #4
  4014fc:	d1e9      	bne.n	4014d2 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4014fe:	22aa      	movs	r2, #170	; 0xaa
  401500:	4907      	ldr	r1, [pc, #28]	; (401520 <nm_clkless_wake+0x108>)
  401502:	4808      	ldr	r0, [pc, #32]	; (401524 <nm_clkless_wake+0x10c>)
  401504:	f8df b020 	ldr.w	fp, [pc, #32]	; 401528 <nm_clkless_wake+0x110>
  401508:	47d8      	blx	fp
  40150a:	480c      	ldr	r0, [pc, #48]	; (40153c <nm_clkless_wake+0x124>)
  40150c:	47d8      	blx	fp
  40150e:	4808      	ldr	r0, [pc, #32]	; (401530 <nm_clkless_wake+0x118>)
  401510:	47d8      	blx	fp
  401512:	e7de      	b.n	4014d2 <nm_clkless_wake+0xba>
  401514:	004001c9 	.word	0x004001c9
  401518:	004018a9 	.word	0x004018a9
  40151c:	aaaaaaab 	.word	0xaaaaaaab
  401520:	00407438 	.word	0x00407438
  401524:	00407008 	.word	0x00407008
  401528:	004040b9 	.word	0x004040b9
  40152c:	004074a8 	.word	0x004074a8
  401530:	00407034 	.word	0x00407034
  401534:	004074c8 	.word	0x004074c8
  401538:	20400010 	.word	0x20400010
  40153c:	004074e8 	.word	0x004074e8
  401540:	004018b5 	.word	0x004018b5

00401544 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  401544:	b500      	push	{lr}
  401546:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  401548:	a901      	add	r1, sp, #4
  40154a:	f241 4008 	movw	r0, #5128	; 0x1408
  40154e:	4b15      	ldr	r3, [pc, #84]	; (4015a4 <enable_interrupts+0x60>)
  401550:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401552:	b9e8      	cbnz	r0, 401590 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  401554:	9901      	ldr	r1, [sp, #4]
  401556:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40155a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  40155c:	f241 4008 	movw	r0, #5128	; 0x1408
  401560:	4b11      	ldr	r3, [pc, #68]	; (4015a8 <enable_interrupts+0x64>)
  401562:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401564:	b9b8      	cbnz	r0, 401596 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  401566:	a901      	add	r1, sp, #4
  401568:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40156c:	4b0d      	ldr	r3, [pc, #52]	; (4015a4 <enable_interrupts+0x60>)
  40156e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401570:	b9a0      	cbnz	r0, 40159c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  401572:	9901      	ldr	r1, [sp, #4]
  401574:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401578:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40157a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40157e:	4b0a      	ldr	r3, [pc, #40]	; (4015a8 <enable_interrupts+0x64>)
  401580:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401582:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  401584:	bf18      	it	ne
  401586:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  40158a:	b003      	add	sp, #12
  40158c:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  401590:	f06f 0005 	mvn.w	r0, #5
  401594:	e7f9      	b.n	40158a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  401596:	f06f 0005 	mvn.w	r0, #5
  40159a:	e7f6      	b.n	40158a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40159c:	f06f 0005 	mvn.w	r0, #5
  4015a0:	e7f3      	b.n	40158a <enable_interrupts+0x46>
  4015a2:	bf00      	nop
  4015a4:	004018a9 	.word	0x004018a9
  4015a8:	004018b5 	.word	0x004018b5

004015ac <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4015ac:	b510      	push	{r4, lr}
  4015ae:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4015b0:	4b25      	ldr	r3, [pc, #148]	; (401648 <nmi_get_chipid+0x9c>)
  4015b2:	681c      	ldr	r4, [r3, #0]
  4015b4:	b124      	cbz	r4, 4015c0 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4015b6:	4b24      	ldr	r3, [pc, #144]	; (401648 <nmi_get_chipid+0x9c>)
  4015b8:	681c      	ldr	r4, [r3, #0]
}
  4015ba:	4620      	mov	r0, r4
  4015bc:	b002      	add	sp, #8
  4015be:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4015c0:	4619      	mov	r1, r3
  4015c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4015c6:	4b21      	ldr	r3, [pc, #132]	; (40164c <nmi_get_chipid+0xa0>)
  4015c8:	4798      	blx	r3
  4015ca:	b118      	cbz	r0, 4015d4 <nmi_get_chipid+0x28>
			chipid = 0;
  4015cc:	2200      	movs	r2, #0
  4015ce:	4b1e      	ldr	r3, [pc, #120]	; (401648 <nmi_get_chipid+0x9c>)
  4015d0:	601a      	str	r2, [r3, #0]
			return 0;
  4015d2:	e7f2      	b.n	4015ba <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4015d4:	a901      	add	r1, sp, #4
  4015d6:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4015da:	4b1c      	ldr	r3, [pc, #112]	; (40164c <nmi_get_chipid+0xa0>)
  4015dc:	4798      	blx	r3
  4015de:	b118      	cbz	r0, 4015e8 <nmi_get_chipid+0x3c>
			chipid = 0;
  4015e0:	2200      	movs	r2, #0
  4015e2:	4b19      	ldr	r3, [pc, #100]	; (401648 <nmi_get_chipid+0x9c>)
  4015e4:	601a      	str	r2, [r3, #0]
			return 0;
  4015e6:	e7e8      	b.n	4015ba <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4015e8:	4b17      	ldr	r3, [pc, #92]	; (401648 <nmi_get_chipid+0x9c>)
  4015ea:	681b      	ldr	r3, [r3, #0]
  4015ec:	4a18      	ldr	r2, [pc, #96]	; (401650 <nmi_get_chipid+0xa4>)
  4015ee:	4293      	cmp	r3, r2
  4015f0:	d00d      	beq.n	40160e <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4015f2:	4a18      	ldr	r2, [pc, #96]	; (401654 <nmi_get_chipid+0xa8>)
  4015f4:	4293      	cmp	r3, r2
  4015f6:	d011      	beq.n	40161c <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4015f8:	4a17      	ldr	r2, [pc, #92]	; (401658 <nmi_get_chipid+0xac>)
  4015fa:	4293      	cmp	r3, r2
  4015fc:	d018      	beq.n	401630 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4015fe:	4a12      	ldr	r2, [pc, #72]	; (401648 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  401600:	6813      	ldr	r3, [r2, #0]
  401602:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  401606:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  40160a:	6013      	str	r3, [r2, #0]
  40160c:	e7d3      	b.n	4015b6 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  40160e:	9b01      	ldr	r3, [sp, #4]
  401610:	2b01      	cmp	r3, #1
  401612:	d0f4      	beq.n	4015fe <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  401614:	3201      	adds	r2, #1
  401616:	4b0c      	ldr	r3, [pc, #48]	; (401648 <nmi_get_chipid+0x9c>)
  401618:	601a      	str	r2, [r3, #0]
  40161a:	e7f0      	b.n	4015fe <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  40161c:	9b01      	ldr	r3, [sp, #4]
  40161e:	2b03      	cmp	r3, #3
  401620:	d0ed      	beq.n	4015fe <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  401622:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  401624:	bf0c      	ite	eq
  401626:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  401628:	4a0c      	ldrne	r2, [pc, #48]	; (40165c <nmi_get_chipid+0xb0>)
  40162a:	4b07      	ldr	r3, [pc, #28]	; (401648 <nmi_get_chipid+0x9c>)
  40162c:	601a      	str	r2, [r3, #0]
  40162e:	e7e6      	b.n	4015fe <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  401630:	4905      	ldr	r1, [pc, #20]	; (401648 <nmi_get_chipid+0x9c>)
  401632:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  401636:	4b05      	ldr	r3, [pc, #20]	; (40164c <nmi_get_chipid+0xa0>)
  401638:	4798      	blx	r3
  40163a:	2800      	cmp	r0, #0
  40163c:	d0df      	beq.n	4015fe <nmi_get_chipid+0x52>
			chipid = 0;
  40163e:	2200      	movs	r2, #0
  401640:	4b01      	ldr	r3, [pc, #4]	; (401648 <nmi_get_chipid+0x9c>)
  401642:	601a      	str	r2, [r3, #0]
			return 0;
  401644:	e7b9      	b.n	4015ba <nmi_get_chipid+0xe>
  401646:	bf00      	nop
  401648:	20400a14 	.word	0x20400a14
  40164c:	004018a9 	.word	0x004018a9
  401650:	001002a0 	.word	0x001002a0
  401654:	001002b0 	.word	0x001002b0
  401658:	001000f0 	.word	0x001000f0
  40165c:	001002b2 	.word	0x001002b2

00401660 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401664:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401666:	f241 0514 	movw	r5, #4116	; 0x1014
  40166a:	4c28      	ldr	r4, [pc, #160]	; (40170c <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40166c:	4e28      	ldr	r6, [pc, #160]	; (401710 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40166e:	4628      	mov	r0, r5
  401670:	47a0      	blx	r4
		if (reg & 0x80000000) {
  401672:	2800      	cmp	r0, #0
  401674:	db02      	blt.n	40167c <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401676:	2001      	movs	r0, #1
  401678:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40167a:	e7f8      	b.n	40166e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40167c:	4825      	ldr	r0, [pc, #148]	; (401714 <wait_for_bootrom+0xb4>)
  40167e:	4b23      	ldr	r3, [pc, #140]	; (40170c <wait_for_bootrom+0xac>)
  401680:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  401682:	f010 0f01 	tst.w	r0, #1
  401686:	d110      	bne.n	4016aa <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401688:	f8df 8084 	ldr.w	r8, [pc, #132]	; 401710 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  40168c:	4e1f      	ldr	r6, [pc, #124]	; (40170c <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40168e:	4d22      	ldr	r5, [pc, #136]	; (401718 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  401690:	2001      	movs	r0, #1
  401692:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  401694:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401698:	47b0      	blx	r6
  40169a:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40169c:	462a      	mov	r2, r5
  40169e:	4601      	mov	r1, r0
  4016a0:	481e      	ldr	r0, [pc, #120]	; (40171c <wait_for_bootrom+0xbc>)
  4016a2:	4b1f      	ldr	r3, [pc, #124]	; (401720 <wait_for_bootrom+0xc0>)
  4016a4:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  4016a6:	42ac      	cmp	r4, r5
  4016a8:	d1f2      	bne.n	401690 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4016aa:	2f02      	cmp	r7, #2
  4016ac:	d019      	beq.n	4016e2 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4016ae:	2f03      	cmp	r7, #3
  4016b0:	d022      	beq.n	4016f8 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4016b2:	2f04      	cmp	r7, #4
  4016b4:	bf14      	ite	ne
  4016b6:	2400      	movne	r4, #0
  4016b8:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4016ba:	4b1a      	ldr	r3, [pc, #104]	; (401724 <wait_for_bootrom+0xc4>)
  4016bc:	4798      	blx	r3
  4016be:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4016c2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4016c6:	bf0c      	ite	eq
  4016c8:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4016cc:	4620      	movne	r0, r4
  4016ce:	4b16      	ldr	r3, [pc, #88]	; (401728 <wait_for_bootrom+0xc8>)
  4016d0:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4016d2:	4916      	ldr	r1, [pc, #88]	; (40172c <wait_for_bootrom+0xcc>)
  4016d4:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4016d8:	4b15      	ldr	r3, [pc, #84]	; (401730 <wait_for_bootrom+0xd0>)
  4016da:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4016dc:	2000      	movs	r0, #0
  4016de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4016e2:	4914      	ldr	r1, [pc, #80]	; (401734 <wait_for_bootrom+0xd4>)
  4016e4:	4814      	ldr	r0, [pc, #80]	; (401738 <wait_for_bootrom+0xd8>)
  4016e6:	4c12      	ldr	r4, [pc, #72]	; (401730 <wait_for_bootrom+0xd0>)
  4016e8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4016ea:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4016ee:	f241 008c 	movw	r0, #4236	; 0x108c
  4016f2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4016f4:	2400      	movs	r4, #0
  4016f6:	e7e0      	b.n	4016ba <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4016f8:	490e      	ldr	r1, [pc, #56]	; (401734 <wait_for_bootrom+0xd4>)
  4016fa:	480f      	ldr	r0, [pc, #60]	; (401738 <wait_for_bootrom+0xd8>)
  4016fc:	4c0c      	ldr	r4, [pc, #48]	; (401730 <wait_for_bootrom+0xd0>)
  4016fe:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401700:	2100      	movs	r1, #0
  401702:	f241 008c 	movw	r0, #4236	; 0x108c
  401706:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  401708:	2400      	movs	r4, #0
  40170a:	e7d6      	b.n	4016ba <wait_for_bootrom+0x5a>
  40170c:	0040189d 	.word	0x0040189d
  401710:	004001c9 	.word	0x004001c9
  401714:	000207bc 	.word	0x000207bc
  401718:	10add09e 	.word	0x10add09e
  40171c:	0040750c 	.word	0x0040750c
  401720:	004040b9 	.word	0x004040b9
  401724:	004015ad 	.word	0x004015ad
  401728:	004013dd 	.word	0x004013dd
  40172c:	ef522f61 	.word	0xef522f61
  401730:	004018b5 	.word	0x004018b5
  401734:	3c1cd57d 	.word	0x3c1cd57d
  401738:	000207ac 	.word	0x000207ac

0040173c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  40173c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40173e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401740:	f241 038c 	movw	r3, #4236	; 0x108c
  401744:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  401746:	4b18      	ldr	r3, [pc, #96]	; (4017a8 <wait_for_firmware_start+0x6c>)
  401748:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  40174a:	3802      	subs	r0, #2
  40174c:	b2c0      	uxtb	r0, r0
  40174e:	2801      	cmp	r0, #1
  401750:	d911      	bls.n	401776 <wait_for_firmware_start+0x3a>
{
  401752:	f04f 34ff 	mov.w	r4, #4294967295
  401756:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401758:	2702      	movs	r7, #2
  40175a:	4e14      	ldr	r6, [pc, #80]	; (4017ac <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  40175c:	4d14      	ldr	r5, [pc, #80]	; (4017b0 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40175e:	9b00      	ldr	r3, [sp, #0]
  401760:	4298      	cmp	r0, r3
  401762:	d012      	beq.n	40178a <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401764:	4638      	mov	r0, r7
  401766:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  401768:	9801      	ldr	r0, [sp, #4]
  40176a:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40176c:	3c01      	subs	r4, #1
  40176e:	d1f6      	bne.n	40175e <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401770:	f06f 0004 	mvn.w	r0, #4
  401774:	e00e      	b.n	401794 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  401776:	4b0f      	ldr	r3, [pc, #60]	; (4017b4 <wait_for_firmware_start+0x78>)
  401778:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40177a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40177e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401782:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401786:	9300      	str	r3, [sp, #0]
  401788:	e7e3      	b.n	401752 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40178a:	9a00      	ldr	r2, [sp, #0]
  40178c:	4b06      	ldr	r3, [pc, #24]	; (4017a8 <wait_for_firmware_start+0x6c>)
  40178e:	429a      	cmp	r2, r3
  401790:	d002      	beq.n	401798 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  401792:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  401794:	b003      	add	sp, #12
  401796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  401798:	2100      	movs	r1, #0
  40179a:	f241 008c 	movw	r0, #4236	; 0x108c
  40179e:	4b06      	ldr	r3, [pc, #24]	; (4017b8 <wait_for_firmware_start+0x7c>)
  4017a0:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  4017a2:	2000      	movs	r0, #0
  4017a4:	e7f6      	b.n	401794 <wait_for_firmware_start+0x58>
  4017a6:	bf00      	nop
  4017a8:	02532636 	.word	0x02532636
  4017ac:	004001c9 	.word	0x004001c9
  4017b0:	0040189d 	.word	0x0040189d
  4017b4:	000207ac 	.word	0x000207ac
  4017b8:	004018b5 	.word	0x004018b5

004017bc <chip_deinit>:

sint8 chip_deinit(void)
{
  4017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017be:	b083      	sub	sp, #12
	uint32 reg = 0;
  4017c0:	a902      	add	r1, sp, #8
  4017c2:	2300      	movs	r3, #0
  4017c4:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017c8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017cc:	4b24      	ldr	r3, [pc, #144]	; (401860 <chip_deinit+0xa4>)
  4017ce:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4017d0:	bb20      	cbnz	r0, 40181c <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4017d2:	9901      	ldr	r1, [sp, #4]
  4017d4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4017d8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017de:	4b21      	ldr	r3, [pc, #132]	; (401864 <chip_deinit+0xa8>)
  4017e0:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4017e2:	4605      	mov	r5, r0
  4017e4:	bb28      	cbnz	r0, 401832 <chip_deinit+0x76>
  4017e6:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017e8:	4e1d      	ldr	r6, [pc, #116]	; (401860 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017ea:	4f1e      	ldr	r7, [pc, #120]	; (401864 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017ec:	a901      	add	r1, sp, #4
  4017ee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017f2:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4017f4:	4605      	mov	r5, r0
  4017f6:	bb38      	cbnz	r0, 401848 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4017f8:	9901      	ldr	r1, [sp, #4]
  4017fa:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4017fe:	d00a      	beq.n	401816 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  401800:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401804:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401806:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40180a:	47b8      	blx	r7
  40180c:	4605      	mov	r5, r0
  40180e:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  401810:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401814:	d1ea      	bne.n	4017ec <chip_deinit+0x30>

	return ret;
}
  401816:	4628      	mov	r0, r5
  401818:	b003      	add	sp, #12
  40181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  40181c:	f240 2231 	movw	r2, #561	; 0x231
  401820:	4911      	ldr	r1, [pc, #68]	; (401868 <chip_deinit+0xac>)
  401822:	4812      	ldr	r0, [pc, #72]	; (40186c <chip_deinit+0xb0>)
  401824:	4c12      	ldr	r4, [pc, #72]	; (401870 <chip_deinit+0xb4>)
  401826:	47a0      	blx	r4
  401828:	4812      	ldr	r0, [pc, #72]	; (401874 <chip_deinit+0xb8>)
  40182a:	47a0      	blx	r4
  40182c:	4812      	ldr	r0, [pc, #72]	; (401878 <chip_deinit+0xbc>)
  40182e:	47a0      	blx	r4
  401830:	e7cf      	b.n	4017d2 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  401832:	f240 2237 	movw	r2, #567	; 0x237
  401836:	490c      	ldr	r1, [pc, #48]	; (401868 <chip_deinit+0xac>)
  401838:	480c      	ldr	r0, [pc, #48]	; (40186c <chip_deinit+0xb0>)
  40183a:	4c0d      	ldr	r4, [pc, #52]	; (401870 <chip_deinit+0xb4>)
  40183c:	47a0      	blx	r4
  40183e:	480f      	ldr	r0, [pc, #60]	; (40187c <chip_deinit+0xc0>)
  401840:	47a0      	blx	r4
  401842:	480d      	ldr	r0, [pc, #52]	; (401878 <chip_deinit+0xbc>)
  401844:	47a0      	blx	r4
		return ret;
  401846:	e7e6      	b.n	401816 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  401848:	f240 223e 	movw	r2, #574	; 0x23e
  40184c:	4906      	ldr	r1, [pc, #24]	; (401868 <chip_deinit+0xac>)
  40184e:	4807      	ldr	r0, [pc, #28]	; (40186c <chip_deinit+0xb0>)
  401850:	4c07      	ldr	r4, [pc, #28]	; (401870 <chip_deinit+0xb4>)
  401852:	47a0      	blx	r4
  401854:	480a      	ldr	r0, [pc, #40]	; (401880 <chip_deinit+0xc4>)
  401856:	47a0      	blx	r4
  401858:	4807      	ldr	r0, [pc, #28]	; (401878 <chip_deinit+0xbc>)
  40185a:	47a0      	blx	r4
			return ret;
  40185c:	e7db      	b.n	401816 <chip_deinit+0x5a>
  40185e:	bf00      	nop
  401860:	004018a9 	.word	0x004018a9
  401864:	004018b5 	.word	0x004018b5
  401868:	00407448 	.word	0x00407448
  40186c:	00407008 	.word	0x00407008
  401870:	004040b9 	.word	0x004040b9
  401874:	00407454 	.word	0x00407454
  401878:	00407034 	.word	0x00407034
  40187c:	00407470 	.word	0x00407470
  401880:	0040748c 	.word	0x0040748c

00401884 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  401884:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  401886:	4b01      	ldr	r3, [pc, #4]	; (40188c <nm_bus_iface_init+0x8>)
  401888:	4798      	blx	r3

	return ret;
}
  40188a:	bd08      	pop	{r3, pc}
  40188c:	0040033d 	.word	0x0040033d

00401890 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401890:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  401892:	4b01      	ldr	r3, [pc, #4]	; (401898 <nm_bus_iface_deinit+0x8>)
  401894:	4798      	blx	r3

	return ret;
}
  401896:	bd08      	pop	{r3, pc}
  401898:	0040052d 	.word	0x0040052d

0040189c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  40189c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40189e:	4b01      	ldr	r3, [pc, #4]	; (4018a4 <nm_read_reg+0x8>)
  4018a0:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4018a2:	bd08      	pop	{r3, pc}
  4018a4:	004020f1 	.word	0x004020f1

004018a8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4018a8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4018aa:	4b01      	ldr	r3, [pc, #4]	; (4018b0 <nm_read_reg_with_ret+0x8>)
  4018ac:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4018ae:	bd08      	pop	{r3, pc}
  4018b0:	00402109 	.word	0x00402109

004018b4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4018b4:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4018b6:	4b01      	ldr	r3, [pc, #4]	; (4018bc <nm_write_reg+0x8>)
  4018b8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4018ba:	bd08      	pop	{r3, pc}
  4018bc:	00402121 	.word	0x00402121

004018c0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4018c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018c4:	4607      	mov	r7, r0
  4018c6:	4689      	mov	r9, r1
  4018c8:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4018ca:	4b12      	ldr	r3, [pc, #72]	; (401914 <nm_read_block+0x54>)
  4018cc:	f8b3 8000 	ldrh.w	r8, [r3]
  4018d0:	f1a8 0808 	sub.w	r8, r8, #8
  4018d4:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018d8:	4542      	cmp	r2, r8
  4018da:	d919      	bls.n	401910 <nm_read_block+0x50>
  4018dc:	4644      	mov	r4, r8
  4018de:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018e0:	f8df a034 	ldr.w	sl, [pc, #52]	; 401918 <nm_read_block+0x58>
  4018e4:	4642      	mov	r2, r8
  4018e6:	eb09 0106 	add.w	r1, r9, r6
  4018ea:	4638      	mov	r0, r7
  4018ec:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4018ee:	4603      	mov	r3, r0
  4018f0:	b958      	cbnz	r0, 40190a <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4018f2:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4018f4:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4018f6:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4018f8:	42a5      	cmp	r5, r4
  4018fa:	d8f3      	bhi.n	4018e4 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018fc:	b2aa      	uxth	r2, r5
  4018fe:	eb09 0106 	add.w	r1, r9, r6
  401902:	4638      	mov	r0, r7
  401904:	4b04      	ldr	r3, [pc, #16]	; (401918 <nm_read_block+0x58>)
  401906:	4798      	blx	r3
  401908:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  40190a:	4618      	mov	r0, r3
  40190c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  401910:	2600      	movs	r6, #0
  401912:	e7f3      	b.n	4018fc <nm_read_block+0x3c>
  401914:	2040000c 	.word	0x2040000c
  401918:	0040224d 	.word	0x0040224d

0040191c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401920:	4607      	mov	r7, r0
  401922:	4689      	mov	r9, r1
  401924:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401926:	4b12      	ldr	r3, [pc, #72]	; (401970 <nm_write_block+0x54>)
  401928:	f8b3 8000 	ldrh.w	r8, [r3]
  40192c:	f1a8 0808 	sub.w	r8, r8, #8
  401930:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401934:	4542      	cmp	r2, r8
  401936:	d919      	bls.n	40196c <nm_write_block+0x50>
  401938:	4644      	mov	r4, r8
  40193a:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40193c:	f8df a034 	ldr.w	sl, [pc, #52]	; 401974 <nm_write_block+0x58>
  401940:	4642      	mov	r2, r8
  401942:	eb09 0106 	add.w	r1, r9, r6
  401946:	4638      	mov	r0, r7
  401948:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40194a:	4603      	mov	r3, r0
  40194c:	b958      	cbnz	r0, 401966 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40194e:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401950:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401952:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  401954:	42a5      	cmp	r5, r4
  401956:	d8f3      	bhi.n	401940 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401958:	b2aa      	uxth	r2, r5
  40195a:	eb09 0106 	add.w	r1, r9, r6
  40195e:	4638      	mov	r0, r7
  401960:	4b04      	ldr	r3, [pc, #16]	; (401974 <nm_write_block+0x58>)
  401962:	4798      	blx	r3
  401964:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  401966:	4618      	mov	r0, r3
  401968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  40196c:	2600      	movs	r6, #0
  40196e:	e7f3      	b.n	401958 <nm_write_block+0x3c>
  401970:	2040000c 	.word	0x2040000c
  401974:	00402315 	.word	0x00402315

00401978 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401978:	b530      	push	{r4, r5, lr}
  40197a:	b083      	sub	sp, #12
  40197c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40197e:	a902      	add	r1, sp, #8
  401980:	2300      	movs	r3, #0
  401982:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401986:	4824      	ldr	r0, [pc, #144]	; (401a18 <nm_get_firmware_info+0xa0>)
  401988:	4b24      	ldr	r3, [pc, #144]	; (401a1c <nm_get_firmware_info+0xa4>)
  40198a:	4798      	blx	r3
  40198c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40198e:	9a01      	ldr	r2, [sp, #4]
  401990:	4b23      	ldr	r3, [pc, #140]	; (401a20 <nm_get_firmware_info+0xa8>)
  401992:	429a      	cmp	r2, r3
  401994:	d039      	beq.n	401a0a <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  401996:	9b01      	ldr	r3, [sp, #4]
  401998:	0c1a      	lsrs	r2, r3, #16
  40199a:	b291      	uxth	r1, r2
  40199c:	0a08      	lsrs	r0, r1, #8
  40199e:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  4019a0:	f3c1 1103 	ubfx	r1, r1, #4, #4
  4019a4:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4019a6:	f002 020f 	and.w	r2, r2, #15
  4019aa:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4019ac:	b29a      	uxth	r2, r3
  4019ae:	0a11      	lsrs	r1, r2, #8
  4019b0:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4019b2:	f3c2 1203 	ubfx	r2, r2, #4, #4
  4019b6:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4019b8:	f003 030f 	and.w	r3, r3, #15
  4019bc:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4019be:	4b19      	ldr	r3, [pc, #100]	; (401a24 <nm_get_firmware_info+0xac>)
  4019c0:	4798      	blx	r3
  4019c2:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4019c4:	7922      	ldrb	r2, [r4, #4]
  4019c6:	79a3      	ldrb	r3, [r4, #6]
  4019c8:	f003 030f 	and.w	r3, r3, #15
  4019cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4019d0:	7962      	ldrb	r2, [r4, #5]
  4019d2:	0112      	lsls	r2, r2, #4
  4019d4:	b2d2      	uxtb	r2, r2
  4019d6:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  4019d8:	79e1      	ldrb	r1, [r4, #7]
  4019da:	7a62      	ldrb	r2, [r4, #9]
  4019dc:	f002 020f 	and.w	r2, r2, #15
  4019e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4019e4:	7a21      	ldrb	r1, [r4, #8]
  4019e6:	0109      	lsls	r1, r1, #4
  4019e8:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4019ea:	430a      	orrs	r2, r1
  4019ec:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4019f0:	428a      	cmp	r2, r1
  4019f2:	bf88      	it	hi
  4019f4:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4019f8:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4019fc:	4293      	cmp	r3, r2
	}
	return ret;
}
  4019fe:	bf8c      	ite	hi
  401a00:	4628      	movhi	r0, r5
  401a02:	f06f 000c 	mvnls.w	r0, #12
  401a06:	b003      	add	sp, #12
  401a08:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  401a0a:	a901      	add	r1, sp, #4
  401a0c:	f241 0048 	movw	r0, #4168	; 0x1048
  401a10:	4b02      	ldr	r3, [pc, #8]	; (401a1c <nm_get_firmware_info+0xa4>)
  401a12:	4798      	blx	r3
  401a14:	4605      	mov	r5, r0
  401a16:	e7be      	b.n	401996 <nm_get_firmware_info+0x1e>
  401a18:	000207ac 	.word	0x000207ac
  401a1c:	004018a9 	.word	0x004018a9
  401a20:	d75dc1c3 	.word	0xd75dc1c3
  401a24:	004015ad 	.word	0x004015ad

00401a28 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401a28:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401a2a:	2800      	cmp	r0, #0
  401a2c:	d037      	beq.n	401a9e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  401a2e:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401a30:	1e63      	subs	r3, r4, #1
  401a32:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401a34:	2b04      	cmp	r3, #4
  401a36:	bf28      	it	cs
  401a38:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  401a3a:	2000      	movs	r0, #0
  401a3c:	4b1e      	ldr	r3, [pc, #120]	; (401ab8 <nm_drv_init+0x90>)
  401a3e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a40:	4605      	mov	r5, r0
  401a42:	2800      	cmp	r0, #0
  401a44:	d12d      	bne.n	401aa2 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401a46:	481d      	ldr	r0, [pc, #116]	; (401abc <nm_drv_init+0x94>)
  401a48:	4d1d      	ldr	r5, [pc, #116]	; (401ac0 <nm_drv_init+0x98>)
  401a4a:	47a8      	blx	r5
  401a4c:	4b1d      	ldr	r3, [pc, #116]	; (401ac4 <nm_drv_init+0x9c>)
  401a4e:	4798      	blx	r3
  401a50:	4601      	mov	r1, r0
  401a52:	481d      	ldr	r0, [pc, #116]	; (401ac8 <nm_drv_init+0xa0>)
  401a54:	47a8      	blx	r5
  401a56:	481d      	ldr	r0, [pc, #116]	; (401acc <nm_drv_init+0xa4>)
  401a58:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401a5a:	4b1d      	ldr	r3, [pc, #116]	; (401ad0 <nm_drv_init+0xa8>)
  401a5c:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401a5e:	4620      	mov	r0, r4
  401a60:	4b1c      	ldr	r3, [pc, #112]	; (401ad4 <nm_drv_init+0xac>)
  401a62:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a64:	4605      	mov	r5, r0
  401a66:	b9b0      	cbnz	r0, 401a96 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401a68:	4620      	mov	r0, r4
  401a6a:	4b1b      	ldr	r3, [pc, #108]	; (401ad8 <nm_drv_init+0xb0>)
  401a6c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a6e:	4605      	mov	r5, r0
  401a70:	b988      	cbnz	r0, 401a96 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401a72:	3c02      	subs	r4, #2
  401a74:	b2e4      	uxtb	r4, r4
  401a76:	2c01      	cmp	r4, #1
  401a78:	d90f      	bls.n	401a9a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401a7a:	4b18      	ldr	r3, [pc, #96]	; (401adc <nm_drv_init+0xb4>)
  401a7c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a7e:	4605      	mov	r5, r0
  401a80:	b158      	cbz	r0, 401a9a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  401a82:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401a86:	4916      	ldr	r1, [pc, #88]	; (401ae0 <nm_drv_init+0xb8>)
  401a88:	4816      	ldr	r0, [pc, #88]	; (401ae4 <nm_drv_init+0xbc>)
  401a8a:	4c0d      	ldr	r4, [pc, #52]	; (401ac0 <nm_drv_init+0x98>)
  401a8c:	47a0      	blx	r4
  401a8e:	4816      	ldr	r0, [pc, #88]	; (401ae8 <nm_drv_init+0xc0>)
  401a90:	47a0      	blx	r4
  401a92:	480e      	ldr	r0, [pc, #56]	; (401acc <nm_drv_init+0xa4>)
  401a94:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401a96:	4b15      	ldr	r3, [pc, #84]	; (401aec <nm_drv_init+0xc4>)
  401a98:	4798      	blx	r3
ERR1:
	return ret;
}
  401a9a:	4628      	mov	r0, r5
  401a9c:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401a9e:	2401      	movs	r4, #1
  401aa0:	e7cb      	b.n	401a3a <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  401aa2:	f44f 7292 	mov.w	r2, #292	; 0x124
  401aa6:	490e      	ldr	r1, [pc, #56]	; (401ae0 <nm_drv_init+0xb8>)
  401aa8:	480e      	ldr	r0, [pc, #56]	; (401ae4 <nm_drv_init+0xbc>)
  401aaa:	4c05      	ldr	r4, [pc, #20]	; (401ac0 <nm_drv_init+0x98>)
  401aac:	47a0      	blx	r4
  401aae:	4810      	ldr	r0, [pc, #64]	; (401af0 <nm_drv_init+0xc8>)
  401ab0:	47a0      	blx	r4
  401ab2:	4806      	ldr	r0, [pc, #24]	; (401acc <nm_drv_init+0xa4>)
  401ab4:	47a0      	blx	r4
		goto ERR1;
  401ab6:	e7f0      	b.n	401a9a <nm_drv_init+0x72>
  401ab8:	00401885 	.word	0x00401885
  401abc:	004072dc 	.word	0x004072dc
  401ac0:	004040b9 	.word	0x004040b9
  401ac4:	004015ad 	.word	0x004015ad
  401ac8:	004075d4 	.word	0x004075d4
  401acc:	00407034 	.word	0x00407034
  401ad0:	00402139 	.word	0x00402139
  401ad4:	00401661 	.word	0x00401661
  401ad8:	0040173d 	.word	0x0040173d
  401adc:	00401545 	.word	0x00401545
  401ae0:	0040751c 	.word	0x0040751c
  401ae4:	00407008 	.word	0x00407008
  401ae8:	00407598 	.word	0x00407598
  401aec:	00401891 	.word	0x00401891
  401af0:	004075b8 	.word	0x004075b8

00401af4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401af4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401af6:	4b19      	ldr	r3, [pc, #100]	; (401b5c <nm_drv_deinit+0x68>)
  401af8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401afa:	b958      	cbnz	r0, 401b14 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401afc:	2000      	movs	r0, #0
  401afe:	4b18      	ldr	r3, [pc, #96]	; (401b60 <nm_drv_deinit+0x6c>)
  401b00:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b02:	4604      	mov	r4, r0
  401b04:	b998      	cbnz	r0, 401b2e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  401b06:	4b17      	ldr	r3, [pc, #92]	; (401b64 <nm_drv_deinit+0x70>)
  401b08:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b0a:	4604      	mov	r4, r0
  401b0c:	b9d0      	cbnz	r0, 401b44 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401b0e:	4b16      	ldr	r3, [pc, #88]	; (401b68 <nm_drv_deinit+0x74>)
  401b10:	4798      	blx	r3
  401b12:	e00a      	b.n	401b2a <nm_drv_deinit+0x36>
  401b14:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401b16:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401b1a:	4914      	ldr	r1, [pc, #80]	; (401b6c <nm_drv_deinit+0x78>)
  401b1c:	4814      	ldr	r0, [pc, #80]	; (401b70 <nm_drv_deinit+0x7c>)
  401b1e:	4d15      	ldr	r5, [pc, #84]	; (401b74 <nm_drv_deinit+0x80>)
  401b20:	47a8      	blx	r5
  401b22:	4815      	ldr	r0, [pc, #84]	; (401b78 <nm_drv_deinit+0x84>)
  401b24:	47a8      	blx	r5
  401b26:	4815      	ldr	r0, [pc, #84]	; (401b7c <nm_drv_deinit+0x88>)
  401b28:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  401b2a:	4620      	mov	r0, r4
  401b2c:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401b2e:	f240 127b 	movw	r2, #379	; 0x17b
  401b32:	490e      	ldr	r1, [pc, #56]	; (401b6c <nm_drv_deinit+0x78>)
  401b34:	480e      	ldr	r0, [pc, #56]	; (401b70 <nm_drv_deinit+0x7c>)
  401b36:	4d0f      	ldr	r5, [pc, #60]	; (401b74 <nm_drv_deinit+0x80>)
  401b38:	47a8      	blx	r5
  401b3a:	4811      	ldr	r0, [pc, #68]	; (401b80 <nm_drv_deinit+0x8c>)
  401b3c:	47a8      	blx	r5
  401b3e:	480f      	ldr	r0, [pc, #60]	; (401b7c <nm_drv_deinit+0x88>)
  401b40:	47a8      	blx	r5
		goto ERR1;
  401b42:	e7f2      	b.n	401b2a <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401b44:	f240 1281 	movw	r2, #385	; 0x181
  401b48:	4908      	ldr	r1, [pc, #32]	; (401b6c <nm_drv_deinit+0x78>)
  401b4a:	4809      	ldr	r0, [pc, #36]	; (401b70 <nm_drv_deinit+0x7c>)
  401b4c:	4d09      	ldr	r5, [pc, #36]	; (401b74 <nm_drv_deinit+0x80>)
  401b4e:	47a8      	blx	r5
  401b50:	480c      	ldr	r0, [pc, #48]	; (401b84 <nm_drv_deinit+0x90>)
  401b52:	47a8      	blx	r5
  401b54:	4809      	ldr	r0, [pc, #36]	; (401b7c <nm_drv_deinit+0x88>)
  401b56:	47a8      	blx	r5
		goto ERR1;
  401b58:	e7e7      	b.n	401b2a <nm_drv_deinit+0x36>
  401b5a:	bf00      	nop
  401b5c:	004017bd 	.word	0x004017bd
  401b60:	00402b99 	.word	0x00402b99
  401b64:	00401891 	.word	0x00401891
  401b68:	004020e5 	.word	0x004020e5
  401b6c:	00407528 	.word	0x00407528
  401b70:	00407008 	.word	0x00407008
  401b74:	004040b9 	.word	0x004040b9
  401b78:	00407538 	.word	0x00407538
  401b7c:	00407034 	.word	0x00407034
  401b80:	00407558 	.word	0x00407558
  401b84:	0040757c 	.word	0x0040757c

00401b88 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401b88:	b500      	push	{lr}
  401b8a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401b8c:	2300      	movs	r3, #0
  401b8e:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401b90:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401b92:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401b96:	a901      	add	r1, sp, #4
  401b98:	2003      	movs	r0, #3
  401b9a:	4b02      	ldr	r3, [pc, #8]	; (401ba4 <nmi_spi_read+0x1c>)
  401b9c:	4798      	blx	r3
}
  401b9e:	b005      	add	sp, #20
  401ba0:	f85d fb04 	ldr.w	pc, [sp], #4
  401ba4:	00400459 	.word	0x00400459

00401ba8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bac:	b082      	sub	sp, #8
  401bae:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401bb0:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401bb4:	b2db      	uxtb	r3, r3
  401bb6:	2b01      	cmp	r3, #1
  401bb8:	d927      	bls.n	401c0a <spi_cmd_rsp+0x62>
  401bba:	28cf      	cmp	r0, #207	; 0xcf
  401bbc:	d025      	beq.n	401c0a <spi_cmd_rsp+0x62>
{
  401bbe:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401bc0:	f04f 0801 	mov.w	r8, #1
  401bc4:	4f23      	ldr	r7, [pc, #140]	; (401c54 <spi_cmd_rsp+0xac>)
  401bc6:	4641      	mov	r1, r8
  401bc8:	f10d 0007 	add.w	r0, sp, #7
  401bcc:	47b8      	blx	r7
  401bce:	4606      	mov	r6, r0
  401bd0:	bb20      	cbnz	r0, 401c1c <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bd6:	42ab      	cmp	r3, r5
  401bd8:	d02c      	beq.n	401c34 <spi_cmd_rsp+0x8c>
  401bda:	1e63      	subs	r3, r4, #1
  401bdc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401be0:	d1f1      	bne.n	401bc6 <spi_cmd_rsp+0x1e>
  401be2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401be4:	2701      	movs	r7, #1
  401be6:	4d1b      	ldr	r5, [pc, #108]	; (401c54 <spi_cmd_rsp+0xac>)
  401be8:	4639      	mov	r1, r7
  401bea:	f10d 0007 	add.w	r0, sp, #7
  401bee:	47a8      	blx	r5
  401bf0:	bb10      	cbnz	r0, 401c38 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401bf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bf6:	b353      	cbz	r3, 401c4e <spi_cmd_rsp+0xa6>
  401bf8:	1e63      	subs	r3, r4, #1
  401bfa:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401bfe:	d1f3      	bne.n	401be8 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  401c00:	2601      	movs	r6, #1

_fail_:

	return result;
}
  401c02:	4630      	mov	r0, r6
  401c04:	b002      	add	sp, #8
  401c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c0a:	2101      	movs	r1, #1
  401c0c:	f10d 0007 	add.w	r0, sp, #7
  401c10:	4b10      	ldr	r3, [pc, #64]	; (401c54 <spi_cmd_rsp+0xac>)
  401c12:	4798      	blx	r3
  401c14:	2800      	cmp	r0, #0
  401c16:	d0d2      	beq.n	401bbe <spi_cmd_rsp+0x16>
			result = N_FAIL;
  401c18:	2600      	movs	r6, #0
  401c1a:	e7f2      	b.n	401c02 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401c1c:	f240 1227 	movw	r2, #295	; 0x127
  401c20:	490d      	ldr	r1, [pc, #52]	; (401c58 <spi_cmd_rsp+0xb0>)
  401c22:	480e      	ldr	r0, [pc, #56]	; (401c5c <spi_cmd_rsp+0xb4>)
  401c24:	4c0e      	ldr	r4, [pc, #56]	; (401c60 <spi_cmd_rsp+0xb8>)
  401c26:	47a0      	blx	r4
  401c28:	480e      	ldr	r0, [pc, #56]	; (401c64 <spi_cmd_rsp+0xbc>)
  401c2a:	47a0      	blx	r4
  401c2c:	480e      	ldr	r0, [pc, #56]	; (401c68 <spi_cmd_rsp+0xc0>)
  401c2e:	47a0      	blx	r4
			result = N_FAIL;
  401c30:	2600      	movs	r6, #0
			goto _fail_;
  401c32:	e7e6      	b.n	401c02 <spi_cmd_rsp+0x5a>
  401c34:	240b      	movs	r4, #11
  401c36:	e7d5      	b.n	401be4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401c38:	f240 1235 	movw	r2, #309	; 0x135
  401c3c:	4906      	ldr	r1, [pc, #24]	; (401c58 <spi_cmd_rsp+0xb0>)
  401c3e:	4807      	ldr	r0, [pc, #28]	; (401c5c <spi_cmd_rsp+0xb4>)
  401c40:	4c07      	ldr	r4, [pc, #28]	; (401c60 <spi_cmd_rsp+0xb8>)
  401c42:	47a0      	blx	r4
  401c44:	4807      	ldr	r0, [pc, #28]	; (401c64 <spi_cmd_rsp+0xbc>)
  401c46:	47a0      	blx	r4
  401c48:	4807      	ldr	r0, [pc, #28]	; (401c68 <spi_cmd_rsp+0xc0>)
  401c4a:	47a0      	blx	r4
			goto _fail_;
  401c4c:	e7d9      	b.n	401c02 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  401c4e:	2601      	movs	r6, #1
  401c50:	e7d7      	b.n	401c02 <spi_cmd_rsp+0x5a>
  401c52:	bf00      	nop
  401c54:	00401b89 	.word	0x00401b89
  401c58:	004075ec 	.word	0x004075ec
  401c5c:	00407008 	.word	0x00407008
  401c60:	004040b9 	.word	0x004040b9
  401c64:	00407a2c 	.word	0x00407a2c
  401c68:	00407034 	.word	0x00407034

00401c6c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  401c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c70:	b085      	sub	sp, #20
  401c72:	4683      	mov	fp, r0
  401c74:	468a      	mov	sl, r1
  401c76:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  401c78:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c7c:	4d37      	ldr	r5, [pc, #220]	; (401d5c <spi_data_read+0xf0>)
  401c7e:	e027      	b.n	401cd0 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  401c80:	f240 1257 	movw	r2, #343	; 0x157
  401c84:	4936      	ldr	r1, [pc, #216]	; (401d60 <spi_data_read+0xf4>)
  401c86:	4837      	ldr	r0, [pc, #220]	; (401d64 <spi_data_read+0xf8>)
  401c88:	4c37      	ldr	r4, [pc, #220]	; (401d68 <spi_data_read+0xfc>)
  401c8a:	47a0      	blx	r4
  401c8c:	4837      	ldr	r0, [pc, #220]	; (401d6c <spi_data_read+0x100>)
  401c8e:	47a0      	blx	r4
  401c90:	4837      	ldr	r0, [pc, #220]	; (401d70 <spi_data_read+0x104>)
  401c92:	47a0      	blx	r4
  401c94:	2300      	movs	r3, #0
  401c96:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  401c98:	9801      	ldr	r0, [sp, #4]
  401c9a:	b005      	add	sp, #20
  401c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  401ca0:	2c00      	cmp	r4, #0
  401ca2:	dd2e      	ble.n	401d02 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  401ca4:	4641      	mov	r1, r8
  401ca6:	eb0b 0009 	add.w	r0, fp, r9
  401caa:	47a8      	blx	r5
  401cac:	4604      	mov	r4, r0
  401cae:	2800      	cmp	r0, #0
  401cb0:	d134      	bne.n	401d1c <spi_data_read+0xb0>
		if(!clockless)
  401cb2:	b91f      	cbnz	r7, 401cbc <spi_data_read+0x50>
			if (!gu8Crc_off) {
  401cb4:	4b2f      	ldr	r3, [pc, #188]	; (401d74 <spi_data_read+0x108>)
  401cb6:	781b      	ldrb	r3, [r3, #0]
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d03a      	beq.n	401d32 <spi_data_read+0xc6>
		ix += nbytes;
  401cbc:	44c1      	add	r9, r8
  401cbe:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  401cc2:	ebaa 0a08 	sub.w	sl, sl, r8
  401cc6:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  401cca:	f1ba 0f00 	cmp.w	sl, #0
  401cce:	d041      	beq.n	401d54 <spi_data_read+0xe8>
  401cd0:	46d0      	mov	r8, sl
  401cd2:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  401cd6:	bf28      	it	cs
  401cd8:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  401cdc:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401cde:	2601      	movs	r6, #1
  401ce0:	4631      	mov	r1, r6
  401ce2:	f10d 000b 	add.w	r0, sp, #11
  401ce6:	47a8      	blx	r5
  401ce8:	9001      	str	r0, [sp, #4]
  401cea:	2800      	cmp	r0, #0
  401cec:	d1c8      	bne.n	401c80 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  401cee:	f89d 300b 	ldrb.w	r3, [sp, #11]
  401cf2:	091b      	lsrs	r3, r3, #4
  401cf4:	2b0f      	cmp	r3, #15
  401cf6:	d0d3      	beq.n	401ca0 <spi_data_read+0x34>
  401cf8:	3c01      	subs	r4, #1
  401cfa:	b224      	sxth	r4, r4
		} while (retry--);
  401cfc:	f1b4 3fff 	cmp.w	r4, #4294967295
  401d00:	d1ee      	bne.n	401ce0 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  401d02:	f240 1263 	movw	r2, #355	; 0x163
  401d06:	4916      	ldr	r1, [pc, #88]	; (401d60 <spi_data_read+0xf4>)
  401d08:	4816      	ldr	r0, [pc, #88]	; (401d64 <spi_data_read+0xf8>)
  401d0a:	4c17      	ldr	r4, [pc, #92]	; (401d68 <spi_data_read+0xfc>)
  401d0c:	47a0      	blx	r4
  401d0e:	f89d 100b 	ldrb.w	r1, [sp, #11]
  401d12:	4819      	ldr	r0, [pc, #100]	; (401d78 <spi_data_read+0x10c>)
  401d14:	47a0      	blx	r4
  401d16:	4816      	ldr	r0, [pc, #88]	; (401d70 <spi_data_read+0x104>)
  401d18:	47a0      	blx	r4
			break;
  401d1a:	e7bd      	b.n	401c98 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  401d1c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  401d20:	490f      	ldr	r1, [pc, #60]	; (401d60 <spi_data_read+0xf4>)
  401d22:	4810      	ldr	r0, [pc, #64]	; (401d64 <spi_data_read+0xf8>)
  401d24:	4c10      	ldr	r4, [pc, #64]	; (401d68 <spi_data_read+0xfc>)
  401d26:	47a0      	blx	r4
  401d28:	4814      	ldr	r0, [pc, #80]	; (401d7c <spi_data_read+0x110>)
  401d2a:	47a0      	blx	r4
  401d2c:	4810      	ldr	r0, [pc, #64]	; (401d70 <spi_data_read+0x104>)
  401d2e:	47a0      	blx	r4
			break;
  401d30:	e7b2      	b.n	401c98 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  401d32:	2102      	movs	r1, #2
  401d34:	a803      	add	r0, sp, #12
  401d36:	47a8      	blx	r5
  401d38:	2800      	cmp	r0, #0
  401d3a:	d0bf      	beq.n	401cbc <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  401d3c:	f240 1277 	movw	r2, #375	; 0x177
  401d40:	4907      	ldr	r1, [pc, #28]	; (401d60 <spi_data_read+0xf4>)
  401d42:	4808      	ldr	r0, [pc, #32]	; (401d64 <spi_data_read+0xf8>)
  401d44:	4d08      	ldr	r5, [pc, #32]	; (401d68 <spi_data_read+0xfc>)
  401d46:	47a8      	blx	r5
  401d48:	480d      	ldr	r0, [pc, #52]	; (401d80 <spi_data_read+0x114>)
  401d4a:	47a8      	blx	r5
  401d4c:	4808      	ldr	r0, [pc, #32]	; (401d70 <spi_data_read+0x104>)
  401d4e:	47a8      	blx	r5
					result = N_FAIL;
  401d50:	9401      	str	r4, [sp, #4]
					break;
  401d52:	e7a1      	b.n	401c98 <spi_data_read+0x2c>
  401d54:	2301      	movs	r3, #1
  401d56:	9301      	str	r3, [sp, #4]
  401d58:	e79e      	b.n	401c98 <spi_data_read+0x2c>
  401d5a:	bf00      	nop
  401d5c:	00401b89 	.word	0x00401b89
  401d60:	004075f8 	.word	0x004075f8
  401d64:	00407008 	.word	0x00407008
  401d68:	004040b9 	.word	0x004040b9
  401d6c:	00407a60 	.word	0x00407a60
  401d70:	00407034 	.word	0x00407034
  401d74:	20400a18 	.word	0x20400a18
  401d78:	00407a94 	.word	0x00407a94
  401d7c:	00407ac4 	.word	0x00407ac4
  401d80:	00407af8 	.word	0x00407af8

00401d84 <nmi_spi_write>:
{
  401d84:	b500      	push	{lr}
  401d86:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  401d88:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  401d8a:	2300      	movs	r3, #0
  401d8c:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  401d8e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401d92:	a901      	add	r1, sp, #4
  401d94:	2003      	movs	r0, #3
  401d96:	4b02      	ldr	r3, [pc, #8]	; (401da0 <nmi_spi_write+0x1c>)
  401d98:	4798      	blx	r3
}
  401d9a:	b005      	add	sp, #20
  401d9c:	f85d fb04 	ldr.w	pc, [sp], #4
  401da0:	00400459 	.word	0x00400459

00401da4 <spi_cmd>:
{
  401da4:	b570      	push	{r4, r5, r6, lr}
  401da6:	b084      	sub	sp, #16
  401da8:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  401dac:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  401db0:	38c1      	subs	r0, #193	; 0xc1
  401db2:	280e      	cmp	r0, #14
  401db4:	f200 80a2 	bhi.w	401efc <spi_cmd+0x158>
  401db8:	e8df f000 	tbb	[pc, r0]
  401dbc:	19664545 	.word	0x19664545
  401dc0:	5454332a 	.word	0x5454332a
  401dc4:	a0a0087f 	.word	0xa0a0087f
  401dc8:	a0a0      	.short	0xa0a0
  401dca:	3c          	.byte	0x3c
  401dcb:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  401dcc:	0c0b      	lsrs	r3, r1, #16
  401dce:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401dd2:	0a0b      	lsrs	r3, r1, #8
  401dd4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  401dd8:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  401ddc:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  401dde:	4b55      	ldr	r3, [pc, #340]	; (401f34 <spi_cmd+0x190>)
  401de0:	781b      	ldrb	r3, [r3, #0]
  401de2:	2b00      	cmp	r3, #0
  401de4:	f000 808c 	beq.w	401f00 <spi_cmd+0x15c>
			len-=1;
  401de8:	3901      	subs	r1, #1
  401dea:	b2c9      	uxtb	r1, r1
  401dec:	e09a      	b.n	401f24 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  401dee:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401df2:	b944      	cbnz	r4, 401e06 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  401df4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  401df8:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  401dfc:	2300      	movs	r3, #0
  401dfe:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e02:	2105      	movs	r1, #5
		break;
  401e04:	e7eb      	b.n	401dde <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  401e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401e0a:	f88d 3005 	strb.w	r3, [sp, #5]
  401e0e:	e7f3      	b.n	401df8 <spi_cmd+0x54>
		bc[1] = 0x00;
  401e10:	2300      	movs	r3, #0
  401e12:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401e16:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401e1a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e1e:	2105      	movs	r1, #5
		break;
  401e20:	e7dd      	b.n	401dde <spi_cmd+0x3a>
		bc[1] = 0x00;
  401e22:	2300      	movs	r3, #0
  401e24:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401e28:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401e2c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e30:	2105      	movs	r1, #5
		break;
  401e32:	e7d4      	b.n	401dde <spi_cmd+0x3a>
		bc[1] = 0xff;
  401e34:	23ff      	movs	r3, #255	; 0xff
  401e36:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  401e3a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  401e3e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e42:	2105      	movs	r1, #5
		break;
  401e44:	e7cb      	b.n	401dde <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  401e46:	0c0a      	lsrs	r2, r1, #16
  401e48:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e4c:	0a0a      	lsrs	r2, r1, #8
  401e4e:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e52:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  401e56:	0a1a      	lsrs	r2, r3, #8
  401e58:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  401e5c:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  401e60:	2107      	movs	r1, #7
		break;
  401e62:	e7bc      	b.n	401dde <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  401e64:	0c0a      	lsrs	r2, r1, #16
  401e66:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e6a:	0a0a      	lsrs	r2, r1, #8
  401e6c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e70:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  401e74:	0c1a      	lsrs	r2, r3, #16
  401e76:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  401e7a:	0a1a      	lsrs	r2, r3, #8
  401e7c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  401e80:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  401e84:	2108      	movs	r1, #8
		break;
  401e86:	e7aa      	b.n	401dde <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  401e88:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401e8c:	b984      	cbnz	r4, 401eb0 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  401e8e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  401e92:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  401e96:	0e13      	lsrs	r3, r2, #24
  401e98:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  401e9c:	0c13      	lsrs	r3, r2, #16
  401e9e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  401ea2:	0a13      	lsrs	r3, r2, #8
  401ea4:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  401ea8:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  401eac:	2108      	movs	r1, #8
		break;
  401eae:	e796      	b.n	401dde <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  401eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401eb4:	f88d 3005 	strb.w	r3, [sp, #5]
  401eb8:	e7eb      	b.n	401e92 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  401eba:	0c0b      	lsrs	r3, r1, #16
  401ebc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401ec0:	0a0b      	lsrs	r3, r1, #8
  401ec2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  401ec6:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  401eca:	0e13      	lsrs	r3, r2, #24
  401ecc:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  401ed0:	0c13      	lsrs	r3, r2, #16
  401ed2:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  401ed6:	0a13      	lsrs	r3, r2, #8
  401ed8:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  401edc:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  401ee0:	2109      	movs	r1, #9
		break;
  401ee2:	e77c      	b.n	401dde <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  401ee4:	f44f 7284 	mov.w	r2, #264	; 0x108
  401ee8:	4913      	ldr	r1, [pc, #76]	; (401f38 <spi_cmd+0x194>)
  401eea:	4814      	ldr	r0, [pc, #80]	; (401f3c <spi_cmd+0x198>)
  401eec:	4c14      	ldr	r4, [pc, #80]	; (401f40 <spi_cmd+0x19c>)
  401eee:	47a0      	blx	r4
  401ef0:	4814      	ldr	r0, [pc, #80]	; (401f44 <spi_cmd+0x1a0>)
  401ef2:	47a0      	blx	r4
  401ef4:	4814      	ldr	r0, [pc, #80]	; (401f48 <spi_cmd+0x1a4>)
  401ef6:	47a0      	blx	r4
			result = N_FAIL;
  401ef8:	2000      	movs	r0, #0
  401efa:	e019      	b.n	401f30 <spi_cmd+0x18c>
	switch (cmd) {
  401efc:	2000      	movs	r0, #0
  401efe:	e017      	b.n	401f30 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401f00:	1e4e      	subs	r6, r1, #1
  401f02:	ab01      	add	r3, sp, #4
  401f04:	199d      	adds	r5, r3, r6
  401f06:	207f      	movs	r0, #127	; 0x7f
  401f08:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  401f0a:	4c10      	ldr	r4, [pc, #64]	; (401f4c <spi_cmd+0x1a8>)
  401f0c:	f812 3b01 	ldrb.w	r3, [r2], #1
  401f10:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  401f14:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  401f16:	4295      	cmp	r5, r2
  401f18:	d1f8      	bne.n	401f0c <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401f1a:	ab04      	add	r3, sp, #16
  401f1c:	441e      	add	r6, r3
  401f1e:	0043      	lsls	r3, r0, #1
  401f20:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  401f24:	a801      	add	r0, sp, #4
  401f26:	4b0a      	ldr	r3, [pc, #40]	; (401f50 <spi_cmd+0x1ac>)
  401f28:	4798      	blx	r3
  401f2a:	2800      	cmp	r0, #0
  401f2c:	d1da      	bne.n	401ee4 <spi_cmd+0x140>
  401f2e:	2001      	movs	r0, #1
}
  401f30:	b004      	add	sp, #16
  401f32:	bd70      	pop	{r4, r5, r6, pc}
  401f34:	20400a18 	.word	0x20400a18
  401f38:	004075e4 	.word	0x004075e4
  401f3c:	00407008 	.word	0x00407008
  401f40:	004040b9 	.word	0x004040b9
  401f44:	00407a00 	.word	0x00407a00
  401f48:	00407034 	.word	0x00407034
  401f4c:	00407660 	.word	0x00407660
  401f50:	00401d85 	.word	0x00401d85

00401f54 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  401f54:	b570      	push	{r4, r5, r6, lr}
  401f56:	b082      	sub	sp, #8
  401f58:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  401f5a:	2831      	cmp	r0, #49	; 0x31
  401f5c:	bf35      	itete	cc
  401f5e:	2301      	movcc	r3, #1
  401f60:	2300      	movcs	r3, #0
  401f62:	25c3      	movcc	r5, #195	; 0xc3
  401f64:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  401f66:	9300      	str	r3, [sp, #0]
  401f68:	2304      	movs	r3, #4
  401f6a:	460a      	mov	r2, r1
  401f6c:	4601      	mov	r1, r0
  401f6e:	4628      	mov	r0, r5
  401f70:	4e15      	ldr	r6, [pc, #84]	; (401fc8 <spi_write_reg+0x74>)
  401f72:	47b0      	blx	r6
	if (result != N_OK) {
  401f74:	2801      	cmp	r0, #1
  401f76:	d00d      	beq.n	401f94 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  401f78:	f240 12eb 	movw	r2, #491	; 0x1eb
  401f7c:	4913      	ldr	r1, [pc, #76]	; (401fcc <spi_write_reg+0x78>)
  401f7e:	4814      	ldr	r0, [pc, #80]	; (401fd0 <spi_write_reg+0x7c>)
  401f80:	4d14      	ldr	r5, [pc, #80]	; (401fd4 <spi_write_reg+0x80>)
  401f82:	47a8      	blx	r5
  401f84:	4621      	mov	r1, r4
  401f86:	4814      	ldr	r0, [pc, #80]	; (401fd8 <spi_write_reg+0x84>)
  401f88:	47a8      	blx	r5
  401f8a:	4814      	ldr	r0, [pc, #80]	; (401fdc <spi_write_reg+0x88>)
  401f8c:	47a8      	blx	r5
		return N_FAIL;
  401f8e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  401f90:	b002      	add	sp, #8
  401f92:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  401f94:	4628      	mov	r0, r5
  401f96:	4b12      	ldr	r3, [pc, #72]	; (401fe0 <spi_write_reg+0x8c>)
  401f98:	4798      	blx	r3
	if (result != N_OK) {
  401f9a:	2801      	cmp	r0, #1
  401f9c:	d0f8      	beq.n	401f90 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  401f9e:	f240 12f1 	movw	r2, #497	; 0x1f1
  401fa2:	490a      	ldr	r1, [pc, #40]	; (401fcc <spi_write_reg+0x78>)
  401fa4:	480a      	ldr	r0, [pc, #40]	; (401fd0 <spi_write_reg+0x7c>)
  401fa6:	4d0b      	ldr	r5, [pc, #44]	; (401fd4 <spi_write_reg+0x80>)
  401fa8:	47a8      	blx	r5
  401faa:	4621      	mov	r1, r4
  401fac:	480d      	ldr	r0, [pc, #52]	; (401fe4 <spi_write_reg+0x90>)
  401fae:	47a8      	blx	r5
  401fb0:	480a      	ldr	r0, [pc, #40]	; (401fdc <spi_write_reg+0x88>)
  401fb2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  401fb4:	2400      	movs	r4, #0
  401fb6:	9400      	str	r4, [sp, #0]
  401fb8:	4623      	mov	r3, r4
  401fba:	4622      	mov	r2, r4
  401fbc:	4621      	mov	r1, r4
  401fbe:	20cf      	movs	r0, #207	; 0xcf
  401fc0:	4d01      	ldr	r5, [pc, #4]	; (401fc8 <spi_write_reg+0x74>)
  401fc2:	47a8      	blx	r5
		return N_FAIL;
  401fc4:	4620      	mov	r0, r4
  401fc6:	e7e3      	b.n	401f90 <spi_write_reg+0x3c>
  401fc8:	00401da5 	.word	0x00401da5
  401fcc:	00407618 	.word	0x00407618
  401fd0:	00407008 	.word	0x00407008
  401fd4:	004040b9 	.word	0x004040b9
  401fd8:	00407bb0 	.word	0x00407bb0
  401fdc:	00407034 	.word	0x00407034
  401fe0:	00401ba9 	.word	0x00401ba9
  401fe4:	00407bdc 	.word	0x00407bdc

00401fe8 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  401fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fec:	b084      	sub	sp, #16
  401fee:	4604      	mov	r4, r0
  401ff0:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  401ff2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  401ff6:	bf35      	itete	cc
  401ff8:	2601      	movcc	r6, #1
  401ffa:	2600      	movcs	r6, #0
  401ffc:	25c4      	movcc	r5, #196	; 0xc4
  401ffe:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402000:	9600      	str	r6, [sp, #0]
  402002:	2304      	movs	r3, #4
  402004:	2200      	movs	r2, #0
  402006:	4601      	mov	r1, r0
  402008:	4628      	mov	r0, r5
  40200a:	4f2c      	ldr	r7, [pc, #176]	; (4020bc <spi_read_reg+0xd4>)
  40200c:	47b8      	blx	r7
	if (result != N_OK) {
  40200e:	2801      	cmp	r0, #1
  402010:	d00e      	beq.n	402030 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  402012:	f240 2245 	movw	r2, #581	; 0x245
  402016:	492a      	ldr	r1, [pc, #168]	; (4020c0 <spi_read_reg+0xd8>)
  402018:	482a      	ldr	r0, [pc, #168]	; (4020c4 <spi_read_reg+0xdc>)
  40201a:	4d2b      	ldr	r5, [pc, #172]	; (4020c8 <spi_read_reg+0xe0>)
  40201c:	47a8      	blx	r5
  40201e:	4621      	mov	r1, r4
  402020:	482a      	ldr	r0, [pc, #168]	; (4020cc <spi_read_reg+0xe4>)
  402022:	47a8      	blx	r5
  402024:	482a      	ldr	r0, [pc, #168]	; (4020d0 <spi_read_reg+0xe8>)
  402026:	47a8      	blx	r5
		return N_FAIL;
  402028:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  40202a:	b004      	add	sp, #16
  40202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  402030:	4628      	mov	r0, r5
  402032:	4b28      	ldr	r3, [pc, #160]	; (4020d4 <spi_read_reg+0xec>)
  402034:	4798      	blx	r3
	if (result != N_OK) {
  402036:	2801      	cmp	r0, #1
  402038:	d014      	beq.n	402064 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40203a:	f240 224b 	movw	r2, #587	; 0x24b
  40203e:	4920      	ldr	r1, [pc, #128]	; (4020c0 <spi_read_reg+0xd8>)
  402040:	4820      	ldr	r0, [pc, #128]	; (4020c4 <spi_read_reg+0xdc>)
  402042:	4d21      	ldr	r5, [pc, #132]	; (4020c8 <spi_read_reg+0xe0>)
  402044:	47a8      	blx	r5
  402046:	4621      	mov	r1, r4
  402048:	4823      	ldr	r0, [pc, #140]	; (4020d8 <spi_read_reg+0xf0>)
  40204a:	47a8      	blx	r5
  40204c:	4820      	ldr	r0, [pc, #128]	; (4020d0 <spi_read_reg+0xe8>)
  40204e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402050:	2400      	movs	r4, #0
  402052:	9400      	str	r4, [sp, #0]
  402054:	4623      	mov	r3, r4
  402056:	4622      	mov	r2, r4
  402058:	4621      	mov	r1, r4
  40205a:	20cf      	movs	r0, #207	; 0xcf
  40205c:	4d17      	ldr	r5, [pc, #92]	; (4020bc <spi_read_reg+0xd4>)
  40205e:	47a8      	blx	r5
		return N_FAIL;
  402060:	4620      	mov	r0, r4
  402062:	e7e2      	b.n	40202a <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  402064:	4632      	mov	r2, r6
  402066:	2104      	movs	r1, #4
  402068:	a803      	add	r0, sp, #12
  40206a:	4b1c      	ldr	r3, [pc, #112]	; (4020dc <spi_read_reg+0xf4>)
  40206c:	4798      	blx	r3
	if (result != N_OK) {
  40206e:	2801      	cmp	r0, #1
  402070:	d110      	bne.n	402094 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  402072:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  402076:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40207a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  40207c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  402080:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  402084:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  402086:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  40208a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40208e:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  402092:	e7ca      	b.n	40202a <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  402094:	f240 2253 	movw	r2, #595	; 0x253
  402098:	4909      	ldr	r1, [pc, #36]	; (4020c0 <spi_read_reg+0xd8>)
  40209a:	480a      	ldr	r0, [pc, #40]	; (4020c4 <spi_read_reg+0xdc>)
  40209c:	4c0a      	ldr	r4, [pc, #40]	; (4020c8 <spi_read_reg+0xe0>)
  40209e:	47a0      	blx	r4
  4020a0:	480f      	ldr	r0, [pc, #60]	; (4020e0 <spi_read_reg+0xf8>)
  4020a2:	47a0      	blx	r4
  4020a4:	480a      	ldr	r0, [pc, #40]	; (4020d0 <spi_read_reg+0xe8>)
  4020a6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4020a8:	2400      	movs	r4, #0
  4020aa:	9400      	str	r4, [sp, #0]
  4020ac:	4623      	mov	r3, r4
  4020ae:	4622      	mov	r2, r4
  4020b0:	4621      	mov	r1, r4
  4020b2:	20cf      	movs	r0, #207	; 0xcf
  4020b4:	4d01      	ldr	r5, [pc, #4]	; (4020bc <spi_read_reg+0xd4>)
  4020b6:	47a8      	blx	r5
		return N_FAIL;
  4020b8:	4620      	mov	r0, r4
  4020ba:	e7b6      	b.n	40202a <spi_read_reg+0x42>
  4020bc:	00401da5 	.word	0x00401da5
  4020c0:	00407638 	.word	0x00407638
  4020c4:	00407008 	.word	0x00407008
  4020c8:	004040b9 	.word	0x004040b9
  4020cc:	00407b30 	.word	0x00407b30
  4020d0:	00407034 	.word	0x00407034
  4020d4:	00401ba9 	.word	0x00401ba9
  4020d8:	00407b5c 	.word	0x00407b5c
  4020dc:	00401c6d 	.word	0x00401c6d
  4020e0:	00407b90 	.word	0x00407b90

004020e4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4020e4:	2000      	movs	r0, #0
  4020e6:	4b01      	ldr	r3, [pc, #4]	; (4020ec <nm_spi_deinit+0x8>)
  4020e8:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4020ea:	4770      	bx	lr
  4020ec:	20400a18 	.word	0x20400a18

004020f0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4020f0:	b500      	push	{lr}
  4020f2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4020f4:	a901      	add	r1, sp, #4
  4020f6:	4b03      	ldr	r3, [pc, #12]	; (402104 <nm_spi_read_reg+0x14>)
  4020f8:	4798      	blx	r3

	return u32Val;
}
  4020fa:	9801      	ldr	r0, [sp, #4]
  4020fc:	b003      	add	sp, #12
  4020fe:	f85d fb04 	ldr.w	pc, [sp], #4
  402102:	bf00      	nop
  402104:	00401fe9 	.word	0x00401fe9

00402108 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402108:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40210a:	4b04      	ldr	r3, [pc, #16]	; (40211c <nm_spi_read_reg_with_ret+0x14>)
  40210c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40210e:	2801      	cmp	r0, #1

	return s8Ret;
}
  402110:	bf0c      	ite	eq
  402112:	2000      	moveq	r0, #0
  402114:	f06f 0005 	mvnne.w	r0, #5
  402118:	bd08      	pop	{r3, pc}
  40211a:	bf00      	nop
  40211c:	00401fe9 	.word	0x00401fe9

00402120 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402120:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  402122:	4b04      	ldr	r3, [pc, #16]	; (402134 <nm_spi_write_reg+0x14>)
  402124:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402126:	2801      	cmp	r0, #1

	return s8Ret;
}
  402128:	bf0c      	ite	eq
  40212a:	2000      	moveq	r0, #0
  40212c:	f06f 0005 	mvnne.w	r0, #5
  402130:	bd08      	pop	{r3, pc}
  402132:	bf00      	nop
  402134:	00401f55 	.word	0x00401f55

00402138 <nm_spi_init>:
{
  402138:	b530      	push	{r4, r5, lr}
  40213a:	b083      	sub	sp, #12
	uint32 reg =0;
  40213c:	2300      	movs	r3, #0
  40213e:	a902      	add	r1, sp, #8
  402140:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  402144:	4a34      	ldr	r2, [pc, #208]	; (402218 <nm_spi_init+0xe0>)
  402146:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  402148:	f64e 0024 	movw	r0, #59428	; 0xe824
  40214c:	4b33      	ldr	r3, [pc, #204]	; (40221c <nm_spi_init+0xe4>)
  40214e:	4798      	blx	r3
  402150:	b348      	cbz	r0, 4021a6 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  402152:	4b31      	ldr	r3, [pc, #196]	; (402218 <nm_spi_init+0xe0>)
  402154:	781b      	ldrb	r3, [r3, #0]
  402156:	b97b      	cbnz	r3, 402178 <nm_spi_init+0x40>
		reg &= ~0x70;
  402158:	9900      	ldr	r1, [sp, #0]
  40215a:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  40215e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402162:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  402164:	f64e 0024 	movw	r0, #59428	; 0xe824
  402168:	4b2d      	ldr	r3, [pc, #180]	; (402220 <nm_spi_init+0xe8>)
  40216a:	4798      	blx	r3
  40216c:	4604      	mov	r4, r0
  40216e:	2800      	cmp	r0, #0
  402170:	d039      	beq.n	4021e6 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  402172:	2201      	movs	r2, #1
  402174:	4b28      	ldr	r3, [pc, #160]	; (402218 <nm_spi_init+0xe0>)
  402176:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  402178:	a901      	add	r1, sp, #4
  40217a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40217e:	4b27      	ldr	r3, [pc, #156]	; (40221c <nm_spi_init+0xe4>)
  402180:	4798      	blx	r3
  402182:	2800      	cmp	r0, #0
  402184:	d03a      	beq.n	4021fc <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  402186:	f64e 0024 	movw	r0, #59428	; 0xe824
  40218a:	4b26      	ldr	r3, [pc, #152]	; (402224 <nm_spi_init+0xec>)
  40218c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40218e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  402192:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402196:	f64e 0024 	movw	r0, #59428	; 0xe824
  40219a:	4b23      	ldr	r3, [pc, #140]	; (402228 <nm_spi_init+0xf0>)
  40219c:	4798      	blx	r3
	return M2M_SUCCESS;
  40219e:	2400      	movs	r4, #0
}
  4021a0:	4620      	mov	r0, r4
  4021a2:	b003      	add	sp, #12
  4021a4:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  4021a6:	2201      	movs	r2, #1
  4021a8:	4b1b      	ldr	r3, [pc, #108]	; (402218 <nm_spi_init+0xe0>)
  4021aa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4021ac:	f240 22c5 	movw	r2, #709	; 0x2c5
  4021b0:	491e      	ldr	r1, [pc, #120]	; (40222c <nm_spi_init+0xf4>)
  4021b2:	481f      	ldr	r0, [pc, #124]	; (402230 <nm_spi_init+0xf8>)
  4021b4:	4c1f      	ldr	r4, [pc, #124]	; (402234 <nm_spi_init+0xfc>)
  4021b6:	47a0      	blx	r4
  4021b8:	481f      	ldr	r0, [pc, #124]	; (402238 <nm_spi_init+0x100>)
  4021ba:	47a0      	blx	r4
  4021bc:	481f      	ldr	r0, [pc, #124]	; (40223c <nm_spi_init+0x104>)
  4021be:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4021c0:	4669      	mov	r1, sp
  4021c2:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021c6:	4b15      	ldr	r3, [pc, #84]	; (40221c <nm_spi_init+0xe4>)
  4021c8:	4798      	blx	r3
  4021ca:	4604      	mov	r4, r0
  4021cc:	2800      	cmp	r0, #0
  4021ce:	d1c0      	bne.n	402152 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4021d0:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4021d4:	4915      	ldr	r1, [pc, #84]	; (40222c <nm_spi_init+0xf4>)
  4021d6:	4816      	ldr	r0, [pc, #88]	; (402230 <nm_spi_init+0xf8>)
  4021d8:	4d16      	ldr	r5, [pc, #88]	; (402234 <nm_spi_init+0xfc>)
  4021da:	47a8      	blx	r5
  4021dc:	4818      	ldr	r0, [pc, #96]	; (402240 <nm_spi_init+0x108>)
  4021de:	47a8      	blx	r5
  4021e0:	4816      	ldr	r0, [pc, #88]	; (40223c <nm_spi_init+0x104>)
  4021e2:	47a8      	blx	r5
			return 0;
  4021e4:	e7dc      	b.n	4021a0 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4021e6:	f240 22d2 	movw	r2, #722	; 0x2d2
  4021ea:	4910      	ldr	r1, [pc, #64]	; (40222c <nm_spi_init+0xf4>)
  4021ec:	4810      	ldr	r0, [pc, #64]	; (402230 <nm_spi_init+0xf8>)
  4021ee:	4d11      	ldr	r5, [pc, #68]	; (402234 <nm_spi_init+0xfc>)
  4021f0:	47a8      	blx	r5
  4021f2:	4814      	ldr	r0, [pc, #80]	; (402244 <nm_spi_init+0x10c>)
  4021f4:	47a8      	blx	r5
  4021f6:	4811      	ldr	r0, [pc, #68]	; (40223c <nm_spi_init+0x104>)
  4021f8:	47a8      	blx	r5
			return 0;
  4021fa:	e7d1      	b.n	4021a0 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4021fc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  402200:	490a      	ldr	r1, [pc, #40]	; (40222c <nm_spi_init+0xf4>)
  402202:	480b      	ldr	r0, [pc, #44]	; (402230 <nm_spi_init+0xf8>)
  402204:	4c0b      	ldr	r4, [pc, #44]	; (402234 <nm_spi_init+0xfc>)
  402206:	47a0      	blx	r4
  402208:	480f      	ldr	r0, [pc, #60]	; (402248 <nm_spi_init+0x110>)
  40220a:	47a0      	blx	r4
  40220c:	480b      	ldr	r0, [pc, #44]	; (40223c <nm_spi_init+0x104>)
  40220e:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  402210:	f06f 0405 	mvn.w	r4, #5
  402214:	e7c4      	b.n	4021a0 <nm_spi_init+0x68>
  402216:	bf00      	nop
  402218:	20400a18 	.word	0x20400a18
  40221c:	00401fe9 	.word	0x00401fe9
  402220:	00401f55 	.word	0x00401f55
  402224:	004020f1 	.word	0x004020f1
  402228:	00402121 	.word	0x00402121
  40222c:	00407654 	.word	0x00407654
  402230:	00407008 	.word	0x00407008
  402234:	004040b9 	.word	0x004040b9
  402238:	00407760 	.word	0x00407760
  40223c:	00407034 	.word	0x00407034
  402240:	004077b0 	.word	0x004077b0
  402244:	004077e0 	.word	0x004077e0
  402248:	00407814 	.word	0x00407814

0040224c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40224c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40224e:	b083      	sub	sp, #12
  402250:	4604      	mov	r4, r0
  402252:	460f      	mov	r7, r1
  402254:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  402256:	2200      	movs	r2, #0
  402258:	9200      	str	r2, [sp, #0]
  40225a:	462b      	mov	r3, r5
  40225c:	4601      	mov	r1, r0
  40225e:	20c8      	movs	r0, #200	; 0xc8
  402260:	4e22      	ldr	r6, [pc, #136]	; (4022ec <nm_spi_read_block+0xa0>)
  402262:	47b0      	blx	r6
	if (result != N_OK) {
  402264:	2801      	cmp	r0, #1
  402266:	d00e      	beq.n	402286 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402268:	f44f 721d 	mov.w	r2, #628	; 0x274
  40226c:	4920      	ldr	r1, [pc, #128]	; (4022f0 <nm_spi_read_block+0xa4>)
  40226e:	4821      	ldr	r0, [pc, #132]	; (4022f4 <nm_spi_read_block+0xa8>)
  402270:	4d21      	ldr	r5, [pc, #132]	; (4022f8 <nm_spi_read_block+0xac>)
  402272:	47a8      	blx	r5
  402274:	4621      	mov	r1, r4
  402276:	4821      	ldr	r0, [pc, #132]	; (4022fc <nm_spi_read_block+0xb0>)
  402278:	47a8      	blx	r5
  40227a:	4821      	ldr	r0, [pc, #132]	; (402300 <nm_spi_read_block+0xb4>)
  40227c:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40227e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402282:	b003      	add	sp, #12
  402284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  402286:	20c8      	movs	r0, #200	; 0xc8
  402288:	4b1e      	ldr	r3, [pc, #120]	; (402304 <nm_spi_read_block+0xb8>)
  40228a:	4798      	blx	r3
	if (result != N_OK) {
  40228c:	2801      	cmp	r0, #1
  40228e:	d012      	beq.n	4022b6 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  402290:	f240 227a 	movw	r2, #634	; 0x27a
  402294:	4916      	ldr	r1, [pc, #88]	; (4022f0 <nm_spi_read_block+0xa4>)
  402296:	4817      	ldr	r0, [pc, #92]	; (4022f4 <nm_spi_read_block+0xa8>)
  402298:	4d17      	ldr	r5, [pc, #92]	; (4022f8 <nm_spi_read_block+0xac>)
  40229a:	47a8      	blx	r5
  40229c:	4621      	mov	r1, r4
  40229e:	481a      	ldr	r0, [pc, #104]	; (402308 <nm_spi_read_block+0xbc>)
  4022a0:	47a8      	blx	r5
  4022a2:	4817      	ldr	r0, [pc, #92]	; (402300 <nm_spi_read_block+0xb4>)
  4022a4:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4022a6:	2100      	movs	r1, #0
  4022a8:	9100      	str	r1, [sp, #0]
  4022aa:	460b      	mov	r3, r1
  4022ac:	460a      	mov	r2, r1
  4022ae:	20cf      	movs	r0, #207	; 0xcf
  4022b0:	4c0e      	ldr	r4, [pc, #56]	; (4022ec <nm_spi_read_block+0xa0>)
  4022b2:	47a0      	blx	r4
  4022b4:	e7e3      	b.n	40227e <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  4022b6:	2200      	movs	r2, #0
  4022b8:	4629      	mov	r1, r5
  4022ba:	4638      	mov	r0, r7
  4022bc:	4b13      	ldr	r3, [pc, #76]	; (40230c <nm_spi_read_block+0xc0>)
  4022be:	4798      	blx	r3
	if (result != N_OK) {
  4022c0:	2801      	cmp	r0, #1
  4022c2:	d011      	beq.n	4022e8 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  4022c4:	f44f 7221 	mov.w	r2, #644	; 0x284
  4022c8:	4909      	ldr	r1, [pc, #36]	; (4022f0 <nm_spi_read_block+0xa4>)
  4022ca:	480a      	ldr	r0, [pc, #40]	; (4022f4 <nm_spi_read_block+0xa8>)
  4022cc:	4c0a      	ldr	r4, [pc, #40]	; (4022f8 <nm_spi_read_block+0xac>)
  4022ce:	47a0      	blx	r4
  4022d0:	480f      	ldr	r0, [pc, #60]	; (402310 <nm_spi_read_block+0xc4>)
  4022d2:	47a0      	blx	r4
  4022d4:	480a      	ldr	r0, [pc, #40]	; (402300 <nm_spi_read_block+0xb4>)
  4022d6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4022d8:	2100      	movs	r1, #0
  4022da:	9100      	str	r1, [sp, #0]
  4022dc:	460b      	mov	r3, r1
  4022de:	460a      	mov	r2, r1
  4022e0:	20cf      	movs	r0, #207	; 0xcf
  4022e2:	4c02      	ldr	r4, [pc, #8]	; (4022ec <nm_spi_read_block+0xa0>)
  4022e4:	47a0      	blx	r4
  4022e6:	e7ca      	b.n	40227e <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4022e8:	2000      	movs	r0, #0
  4022ea:	e7ca      	b.n	402282 <nm_spi_read_block+0x36>
  4022ec:	00401da5 	.word	0x00401da5
  4022f0:	00407648 	.word	0x00407648
  4022f4:	00407008 	.word	0x00407008
  4022f8:	004040b9 	.word	0x004040b9
  4022fc:	0040783c 	.word	0x0040783c
  402300:	00407034 	.word	0x00407034
  402304:	00401ba9 	.word	0x00401ba9
  402308:	0040786c 	.word	0x0040786c
  40230c:	00401c6d 	.word	0x00401c6d
  402310:	004078a4 	.word	0x004078a4

00402314 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402318:	b085      	sub	sp, #20
  40231a:	4604      	mov	r4, r0
  40231c:	4688      	mov	r8, r1
  40231e:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  402320:	2200      	movs	r2, #0
  402322:	9200      	str	r2, [sp, #0]
  402324:	462b      	mov	r3, r5
  402326:	4601      	mov	r1, r0
  402328:	20c7      	movs	r0, #199	; 0xc7
  40232a:	4e4d      	ldr	r6, [pc, #308]	; (402460 <nm_spi_write_block+0x14c>)
  40232c:	47b0      	blx	r6
	if (result != N_OK) {
  40232e:	2801      	cmp	r0, #1
  402330:	d00f      	beq.n	402352 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  402332:	f240 220f 	movw	r2, #527	; 0x20f
  402336:	494b      	ldr	r1, [pc, #300]	; (402464 <nm_spi_write_block+0x150>)
  402338:	484b      	ldr	r0, [pc, #300]	; (402468 <nm_spi_write_block+0x154>)
  40233a:	4d4c      	ldr	r5, [pc, #304]	; (40246c <nm_spi_write_block+0x158>)
  40233c:	47a8      	blx	r5
  40233e:	4621      	mov	r1, r4
  402340:	484b      	ldr	r0, [pc, #300]	; (402470 <nm_spi_write_block+0x15c>)
  402342:	47a8      	blx	r5
  402344:	484b      	ldr	r0, [pc, #300]	; (402474 <nm_spi_write_block+0x160>)
  402346:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402348:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40234c:	b005      	add	sp, #20
  40234e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  402352:	20c7      	movs	r0, #199	; 0xc7
  402354:	4b48      	ldr	r3, [pc, #288]	; (402478 <nm_spi_write_block+0x164>)
  402356:	4798      	blx	r3
	if (result != N_OK) {
  402358:	2801      	cmp	r0, #1
  40235a:	d012      	beq.n	402382 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40235c:	f240 2215 	movw	r2, #533	; 0x215
  402360:	4940      	ldr	r1, [pc, #256]	; (402464 <nm_spi_write_block+0x150>)
  402362:	4841      	ldr	r0, [pc, #260]	; (402468 <nm_spi_write_block+0x154>)
  402364:	4d41      	ldr	r5, [pc, #260]	; (40246c <nm_spi_write_block+0x158>)
  402366:	47a8      	blx	r5
  402368:	4621      	mov	r1, r4
  40236a:	4844      	ldr	r0, [pc, #272]	; (40247c <nm_spi_write_block+0x168>)
  40236c:	47a8      	blx	r5
  40236e:	4841      	ldr	r0, [pc, #260]	; (402474 <nm_spi_write_block+0x160>)
  402370:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402372:	2100      	movs	r1, #0
  402374:	9100      	str	r1, [sp, #0]
  402376:	460b      	mov	r3, r1
  402378:	460a      	mov	r2, r1
  40237a:	20cf      	movs	r0, #207	; 0xcf
  40237c:	4c38      	ldr	r4, [pc, #224]	; (402460 <nm_spi_write_block+0x14c>)
  40237e:	47a0      	blx	r4
  402380:	e7e2      	b.n	402348 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  402382:	2400      	movs	r4, #0
  402384:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402388:	4f3d      	ldr	r7, [pc, #244]	; (402480 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  40238a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 402498 <nm_spi_write_block+0x184>
  40238e:	e01d      	b.n	4023cc <nm_spi_write_block+0xb8>
				order = 0x2;
  402390:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402394:	bf94      	ite	ls
  402396:	2303      	movls	r3, #3
  402398:	2302      	movhi	r3, #2
		cmd |= order;
  40239a:	f063 030f 	orn	r3, r3, #15
  40239e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4023a2:	2101      	movs	r1, #1
  4023a4:	f10d 000b 	add.w	r0, sp, #11
  4023a8:	47b8      	blx	r7
  4023aa:	b9e8      	cbnz	r0, 4023e8 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4023ac:	4631      	mov	r1, r6
  4023ae:	eb08 0004 	add.w	r0, r8, r4
  4023b2:	47b8      	blx	r7
  4023b4:	2800      	cmp	r0, #0
  4023b6:	d135      	bne.n	402424 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  4023b8:	f899 3000 	ldrb.w	r3, [r9]
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d03c      	beq.n	40243a <nm_spi_write_block+0x126>
		ix += nbytes;
  4023c0:	4434      	add	r4, r6
  4023c2:	b224      	sxth	r4, r4
		sz -= nbytes;
  4023c4:	1bad      	subs	r5, r5, r6
  4023c6:	b2ad      	uxth	r5, r5
	} while (sz);
  4023c8:	2d00      	cmp	r5, #0
  4023ca:	d046      	beq.n	40245a <nm_spi_write_block+0x146>
  4023cc:	462e      	mov	r6, r5
  4023ce:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4023d2:	bf28      	it	cs
  4023d4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  4023d8:	2c00      	cmp	r4, #0
  4023da:	d1d9      	bne.n	402390 <nm_spi_write_block+0x7c>
				order = 0x1;
  4023dc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4023e0:	bf94      	ite	ls
  4023e2:	2303      	movls	r3, #3
  4023e4:	2301      	movhi	r3, #1
  4023e6:	e7d8      	b.n	40239a <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4023e8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4023ec:	4925      	ldr	r1, [pc, #148]	; (402484 <nm_spi_write_block+0x170>)
  4023ee:	481e      	ldr	r0, [pc, #120]	; (402468 <nm_spi_write_block+0x154>)
  4023f0:	4c1e      	ldr	r4, [pc, #120]	; (40246c <nm_spi_write_block+0x158>)
  4023f2:	47a0      	blx	r4
  4023f4:	4824      	ldr	r0, [pc, #144]	; (402488 <nm_spi_write_block+0x174>)
  4023f6:	47a0      	blx	r4
  4023f8:	481e      	ldr	r0, [pc, #120]	; (402474 <nm_spi_write_block+0x160>)
  4023fa:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4023fc:	f240 2226 	movw	r2, #550	; 0x226
  402400:	4918      	ldr	r1, [pc, #96]	; (402464 <nm_spi_write_block+0x150>)
  402402:	4819      	ldr	r0, [pc, #100]	; (402468 <nm_spi_write_block+0x154>)
  402404:	4c19      	ldr	r4, [pc, #100]	; (40246c <nm_spi_write_block+0x158>)
  402406:	47a0      	blx	r4
  402408:	4820      	ldr	r0, [pc, #128]	; (40248c <nm_spi_write_block+0x178>)
  40240a:	47a0      	blx	r4
  40240c:	4819      	ldr	r0, [pc, #100]	; (402474 <nm_spi_write_block+0x160>)
  40240e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402410:	2400      	movs	r4, #0
  402412:	9400      	str	r4, [sp, #0]
  402414:	4623      	mov	r3, r4
  402416:	4622      	mov	r2, r4
  402418:	4621      	mov	r1, r4
  40241a:	20cf      	movs	r0, #207	; 0xcf
  40241c:	4d10      	ldr	r5, [pc, #64]	; (402460 <nm_spi_write_block+0x14c>)
  40241e:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402420:	4620      	mov	r0, r4
  402422:	e793      	b.n	40234c <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402424:	f240 12b1 	movw	r2, #433	; 0x1b1
  402428:	4916      	ldr	r1, [pc, #88]	; (402484 <nm_spi_write_block+0x170>)
  40242a:	480f      	ldr	r0, [pc, #60]	; (402468 <nm_spi_write_block+0x154>)
  40242c:	4c0f      	ldr	r4, [pc, #60]	; (40246c <nm_spi_write_block+0x158>)
  40242e:	47a0      	blx	r4
  402430:	4817      	ldr	r0, [pc, #92]	; (402490 <nm_spi_write_block+0x17c>)
  402432:	47a0      	blx	r4
  402434:	480f      	ldr	r0, [pc, #60]	; (402474 <nm_spi_write_block+0x160>)
  402436:	47a0      	blx	r4
  402438:	e7e0      	b.n	4023fc <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40243a:	2102      	movs	r1, #2
  40243c:	a803      	add	r0, sp, #12
  40243e:	47b8      	blx	r7
  402440:	2800      	cmp	r0, #0
  402442:	d0bd      	beq.n	4023c0 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402444:	f240 12bb 	movw	r2, #443	; 0x1bb
  402448:	490e      	ldr	r1, [pc, #56]	; (402484 <nm_spi_write_block+0x170>)
  40244a:	4807      	ldr	r0, [pc, #28]	; (402468 <nm_spi_write_block+0x154>)
  40244c:	4c07      	ldr	r4, [pc, #28]	; (40246c <nm_spi_write_block+0x158>)
  40244e:	47a0      	blx	r4
  402450:	4810      	ldr	r0, [pc, #64]	; (402494 <nm_spi_write_block+0x180>)
  402452:	47a0      	blx	r4
  402454:	4807      	ldr	r0, [pc, #28]	; (402474 <nm_spi_write_block+0x160>)
  402456:	47a0      	blx	r4
  402458:	e7d0      	b.n	4023fc <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40245a:	2000      	movs	r0, #0
  40245c:	e776      	b.n	40234c <nm_spi_write_block+0x38>
  40245e:	bf00      	nop
  402460:	00401da5 	.word	0x00401da5
  402464:	00407628 	.word	0x00407628
  402468:	00407008 	.word	0x00407008
  40246c:	004040b9 	.word	0x004040b9
  402470:	004078cc 	.word	0x004078cc
  402474:	00407034 	.word	0x00407034
  402478:	00401ba9 	.word	0x00401ba9
  40247c:	004078fc 	.word	0x004078fc
  402480:	00401d85 	.word	0x00401d85
  402484:	00407608 	.word	0x00407608
  402488:	00407934 	.word	0x00407934
  40248c:	004079d8 	.word	0x004079d8
  402490:	0040796c 	.word	0x0040796c
  402494:	004079a0 	.word	0x004079a0
  402498:	20400a18 	.word	0x20400a18

0040249c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40249c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024a0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4024a4:	b194      	cbz	r4, 4024cc <Socket_ReadSocketData+0x30>
  4024a6:	4681      	mov	r9, r0
  4024a8:	460e      	mov	r6, r1
  4024aa:	4692      	mov	sl, r2
  4024ac:	4698      	mov	r8, r3
  4024ae:	0103      	lsls	r3, r0, #4
  4024b0:	4922      	ldr	r1, [pc, #136]	; (40253c <Socket_ReadSocketData+0xa0>)
  4024b2:	58cb      	ldr	r3, [r1, r3]
  4024b4:	b153      	cbz	r3, 4024cc <Socket_ReadSocketData+0x30>
  4024b6:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4024ba:	889b      	ldrh	r3, [r3, #4]
  4024bc:	b29b      	uxth	r3, r3
  4024be:	b12b      	cbz	r3, 4024cc <Socket_ReadSocketData+0x30>
  4024c0:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4024c4:	7a9b      	ldrb	r3, [r3, #10]
  4024c6:	b2db      	uxtb	r3, r3
  4024c8:	2b01      	cmp	r3, #1
  4024ca:	d001      	beq.n	4024d0 <Socket_ReadSocketData+0x34>
  4024cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4024d0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4024d2:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4024d6:	f8df b07c 	ldr.w	fp, [pc, #124]	; 402554 <Socket_ReadSocketData+0xb8>
  4024da:	e006      	b.n	4024ea <Socket_ReadSocketData+0x4e>
  4024dc:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4024de:	2301      	movs	r3, #1
  4024e0:	e00b      	b.n	4024fa <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4024e2:	1b64      	subs	r4, r4, r5
  4024e4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4024e6:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4024e8:	b1ec      	cbz	r4, 402526 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4024ea:	88bb      	ldrh	r3, [r7, #4]
  4024ec:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4024ee:	b21b      	sxth	r3, r3
  4024f0:	2b00      	cmp	r3, #0
  4024f2:	ddf3      	ble.n	4024dc <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4024f4:	88bd      	ldrh	r5, [r7, #4]
  4024f6:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4024f8:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4024fa:	6839      	ldr	r1, [r7, #0]
  4024fc:	462a      	mov	r2, r5
  4024fe:	4640      	mov	r0, r8
  402500:	47d8      	blx	fp
  402502:	b990      	cbnz	r0, 40252a <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  402504:	683b      	ldr	r3, [r7, #0]
  402506:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  402508:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  40250a:	88f3      	ldrh	r3, [r6, #6]
  40250c:	1b5b      	subs	r3, r3, r5
  40250e:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  402510:	4b0b      	ldr	r3, [pc, #44]	; (402540 <Socket_ReadSocketData+0xa4>)
  402512:	681b      	ldr	r3, [r3, #0]
  402514:	2b00      	cmp	r3, #0
  402516:	d0e4      	beq.n	4024e2 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  402518:	4b09      	ldr	r3, [pc, #36]	; (402540 <Socket_ReadSocketData+0xa4>)
  40251a:	681b      	ldr	r3, [r3, #0]
  40251c:	4632      	mov	r2, r6
  40251e:	4651      	mov	r1, sl
  402520:	4648      	mov	r0, r9
  402522:	4798      	blx	r3
  402524:	e7dd      	b.n	4024e2 <Socket_ReadSocketData+0x46>
  402526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  40252a:	4806      	ldr	r0, [pc, #24]	; (402544 <Socket_ReadSocketData+0xa8>)
  40252c:	4d06      	ldr	r5, [pc, #24]	; (402548 <Socket_ReadSocketData+0xac>)
  40252e:	47a8      	blx	r5
  402530:	4621      	mov	r1, r4
  402532:	4806      	ldr	r0, [pc, #24]	; (40254c <Socket_ReadSocketData+0xb0>)
  402534:	47a8      	blx	r5
  402536:	4806      	ldr	r0, [pc, #24]	; (402550 <Socket_ReadSocketData+0xb4>)
  402538:	47a8      	blx	r5
	}
}
  40253a:	e7c7      	b.n	4024cc <Socket_ReadSocketData+0x30>
  40253c:	20401054 	.word	0x20401054
  402540:	20401104 	.word	0x20401104
  402544:	004072dc 	.word	0x004072dc
  402548:	004040b9 	.word	0x004040b9
  40254c:	00407c14 	.word	0x00407c14
  402550:	00407034 	.word	0x00407034
  402554:	00400bd5 	.word	0x00400bd5

00402558 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  402558:	b5f0      	push	{r4, r5, r6, r7, lr}
  40255a:	b099      	sub	sp, #100	; 0x64
  40255c:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40255e:	2841      	cmp	r0, #65	; 0x41
  402560:	d049      	beq.n	4025f6 <m2m_ip_cb+0x9e>
  402562:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402564:	2842      	cmp	r0, #66	; 0x42
  402566:	d05f      	beq.n	402628 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  402568:	2843      	cmp	r0, #67	; 0x43
  40256a:	d075      	beq.n	402658 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40256c:	2844      	cmp	r0, #68	; 0x44
  40256e:	f000 80b0 	beq.w	4026d2 <m2m_ip_cb+0x17a>
  402572:	284b      	cmp	r0, #75	; 0x4b
  402574:	f000 80ad 	beq.w	4026d2 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402578:	284a      	cmp	r0, #74	; 0x4a
  40257a:	f000 80cc 	beq.w	402716 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40257e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  402582:	b2db      	uxtb	r3, r3
  402584:	2b07      	cmp	r3, #7
  402586:	f200 80f4 	bhi.w	402772 <m2m_ip_cb+0x21a>
  40258a:	2285      	movs	r2, #133	; 0x85
  40258c:	fa22 f303 	lsr.w	r3, r2, r3
  402590:	f013 0f01 	tst.w	r3, #1
  402594:	f000 80ed 	beq.w	402772 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  402598:	2848      	cmp	r0, #72	; 0x48
  40259a:	bf14      	ite	ne
  40259c:	2706      	movne	r7, #6
  40259e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4025a0:	2300      	movs	r3, #0
  4025a2:	2210      	movs	r2, #16
  4025a4:	a903      	add	r1, sp, #12
  4025a6:	4620      	mov	r0, r4
  4025a8:	4e93      	ldr	r6, [pc, #588]	; (4027f8 <m2m_ip_cb+0x2a0>)
  4025aa:	47b0      	blx	r6
  4025ac:	2800      	cmp	r0, #0
  4025ae:	f040 80b0 	bne.w	402712 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4025b2:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4025b6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4025ba:	4a90      	ldr	r2, [pc, #576]	; (4027fc <m2m_ip_cb+0x2a4>)
  4025bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4025c0:	2300      	movs	r3, #0
  4025c2:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4025c4:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4025c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4025cc:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4025d0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4025d4:	9e04      	ldr	r6, [sp, #16]
  4025d6:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4025d8:	88d2      	ldrh	r2, [r2, #6]
  4025da:	b292      	uxth	r2, r2
  4025dc:	4291      	cmp	r1, r2
  4025de:	f000 80ac 	beq.w	40273a <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4025e2:	2d10      	cmp	r5, #16
  4025e4:	f240 8095 	bls.w	402712 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4025e8:	2301      	movs	r3, #1
  4025ea:	2200      	movs	r2, #0
  4025ec:	4611      	mov	r1, r2
  4025ee:	4610      	mov	r0, r2
  4025f0:	4c81      	ldr	r4, [pc, #516]	; (4027f8 <m2m_ip_cb+0x2a0>)
  4025f2:	47a0      	blx	r4
	{
  4025f4:	e08d      	b.n	402712 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4025f6:	2300      	movs	r3, #0
  4025f8:	2204      	movs	r2, #4
  4025fa:	a907      	add	r1, sp, #28
  4025fc:	4620      	mov	r0, r4
  4025fe:	4c7e      	ldr	r4, [pc, #504]	; (4027f8 <m2m_ip_cb+0x2a0>)
  402600:	47a0      	blx	r4
  402602:	2800      	cmp	r0, #0
  402604:	f040 8085 	bne.w	402712 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  402608:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40260c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402610:	4b7b      	ldr	r3, [pc, #492]	; (402800 <m2m_ip_cb+0x2a8>)
  402612:	681b      	ldr	r3, [r3, #0]
  402614:	2b00      	cmp	r3, #0
  402616:	d07c      	beq.n	402712 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402618:	4b79      	ldr	r3, [pc, #484]	; (402800 <m2m_ip_cb+0x2a8>)
  40261a:	681b      	ldr	r3, [r3, #0]
  40261c:	aa03      	add	r2, sp, #12
  40261e:	2101      	movs	r1, #1
  402620:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402624:	4798      	blx	r3
  402626:	e074      	b.n	402712 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  402628:	2300      	movs	r3, #0
  40262a:	2204      	movs	r2, #4
  40262c:	a907      	add	r1, sp, #28
  40262e:	4620      	mov	r0, r4
  402630:	4c71      	ldr	r4, [pc, #452]	; (4027f8 <m2m_ip_cb+0x2a0>)
  402632:	47a0      	blx	r4
  402634:	2800      	cmp	r0, #0
  402636:	d16c      	bne.n	402712 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  402638:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40263c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402640:	4b6f      	ldr	r3, [pc, #444]	; (402800 <m2m_ip_cb+0x2a8>)
  402642:	681b      	ldr	r3, [r3, #0]
  402644:	2b00      	cmp	r3, #0
  402646:	d064      	beq.n	402712 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  402648:	4b6d      	ldr	r3, [pc, #436]	; (402800 <m2m_ip_cb+0x2a8>)
  40264a:	681b      	ldr	r3, [r3, #0]
  40264c:	aa03      	add	r2, sp, #12
  40264e:	2102      	movs	r1, #2
  402650:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402654:	4798      	blx	r3
  402656:	e05c      	b.n	402712 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402658:	2300      	movs	r3, #0
  40265a:	220c      	movs	r2, #12
  40265c:	eb0d 0102 	add.w	r1, sp, r2
  402660:	4620      	mov	r0, r4
  402662:	4c65      	ldr	r4, [pc, #404]	; (4027f8 <m2m_ip_cb+0x2a0>)
  402664:	47a0      	blx	r4
  402666:	2800      	cmp	r0, #0
  402668:	d153      	bne.n	402712 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  40266a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40266e:	2b00      	cmp	r3, #0
  402670:	db19      	blt.n	4026a6 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  402672:	4a62      	ldr	r2, [pc, #392]	; (4027fc <m2m_ip_cb+0x2a4>)
  402674:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402678:	2100      	movs	r1, #0
  40267a:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40267c:	2101      	movs	r1, #1
  40267e:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  402680:	4960      	ldr	r1, [pc, #384]	; (402804 <m2m_ip_cb+0x2ac>)
  402682:	880a      	ldrh	r2, [r1, #0]
  402684:	3201      	adds	r2, #1
  402686:	b292      	uxth	r2, r2
  402688:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40268a:	880a      	ldrh	r2, [r1, #0]
  40268c:	b292      	uxth	r2, r2
  40268e:	b91a      	cbnz	r2, 402698 <m2m_ip_cb+0x140>
					++gu16SessionID;
  402690:	880a      	ldrh	r2, [r1, #0]
  402692:	3201      	adds	r2, #1
  402694:	b292      	uxth	r2, r2
  402696:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  402698:	4a5a      	ldr	r2, [pc, #360]	; (402804 <m2m_ip_cb+0x2ac>)
  40269a:	8811      	ldrh	r1, [r2, #0]
  40269c:	b289      	uxth	r1, r1
  40269e:	4a57      	ldr	r2, [pc, #348]	; (4027fc <m2m_ip_cb+0x2a4>)
  4026a0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4026a4:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  4026a6:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4026aa:	2302      	movs	r3, #2
  4026ac:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4026b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4026b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4026b8:	9b04      	ldr	r3, [sp, #16]
  4026ba:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4026bc:	4b50      	ldr	r3, [pc, #320]	; (402800 <m2m_ip_cb+0x2a8>)
  4026be:	681b      	ldr	r3, [r3, #0]
  4026c0:	b33b      	cbz	r3, 402712 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4026c2:	4b4f      	ldr	r3, [pc, #316]	; (402800 <m2m_ip_cb+0x2a8>)
  4026c4:	681b      	ldr	r3, [r3, #0]
  4026c6:	aa07      	add	r2, sp, #28
  4026c8:	2104      	movs	r1, #4
  4026ca:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4026ce:	4798      	blx	r3
  4026d0:	e01f      	b.n	402712 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4026d2:	2300      	movs	r3, #0
  4026d4:	2204      	movs	r2, #4
  4026d6:	a907      	add	r1, sp, #28
  4026d8:	4620      	mov	r0, r4
  4026da:	4c47      	ldr	r4, [pc, #284]	; (4027f8 <m2m_ip_cb+0x2a0>)
  4026dc:	47a0      	blx	r4
  4026de:	b9c0      	cbnz	r0, 402712 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4026e0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4026e4:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4026e8:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4026ec:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4026f0:	b93b      	cbnz	r3, 402702 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4026f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4026f6:	3b08      	subs	r3, #8
  4026f8:	b29b      	uxth	r3, r3
  4026fa:	4a40      	ldr	r2, [pc, #256]	; (4027fc <m2m_ip_cb+0x2a4>)
  4026fc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402700:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  402702:	4b3f      	ldr	r3, [pc, #252]	; (402800 <m2m_ip_cb+0x2a8>)
  402704:	681b      	ldr	r3, [r3, #0]
  402706:	b123      	cbz	r3, 402712 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402708:	4b3d      	ldr	r3, [pc, #244]	; (402800 <m2m_ip_cb+0x2a8>)
  40270a:	681b      	ldr	r3, [r3, #0]
  40270c:	aa03      	add	r2, sp, #12
  40270e:	2105      	movs	r1, #5
  402710:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  402712:	b019      	add	sp, #100	; 0x64
  402714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402716:	2300      	movs	r3, #0
  402718:	2244      	movs	r2, #68	; 0x44
  40271a:	a907      	add	r1, sp, #28
  40271c:	4620      	mov	r0, r4
  40271e:	4c36      	ldr	r4, [pc, #216]	; (4027f8 <m2m_ip_cb+0x2a0>)
  402720:	47a0      	blx	r4
  402722:	2800      	cmp	r0, #0
  402724:	d1f5      	bne.n	402712 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  402726:	4b38      	ldr	r3, [pc, #224]	; (402808 <m2m_ip_cb+0x2b0>)
  402728:	681b      	ldr	r3, [r3, #0]
  40272a:	2b00      	cmp	r3, #0
  40272c:	d0f1      	beq.n	402712 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40272e:	4b36      	ldr	r3, [pc, #216]	; (402808 <m2m_ip_cb+0x2b0>)
  402730:	681b      	ldr	r3, [r3, #0]
  402732:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402734:	a807      	add	r0, sp, #28
  402736:	4798      	blx	r3
  402738:	e7eb      	b.n	402712 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  40273a:	f1be 0f00 	cmp.w	lr, #0
  40273e:	dd01      	ble.n	402744 <m2m_ip_cb+0x1ec>
  402740:	45ae      	cmp	lr, r5
  402742:	db0d      	blt.n	402760 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402744:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  402748:	2300      	movs	r3, #0
  40274a:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40274c:	4b2c      	ldr	r3, [pc, #176]	; (402800 <m2m_ip_cb+0x2a8>)
  40274e:	681b      	ldr	r3, [r3, #0]
  402750:	2b00      	cmp	r3, #0
  402752:	d0de      	beq.n	402712 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402754:	4b2a      	ldr	r3, [pc, #168]	; (402800 <m2m_ip_cb+0x2a8>)
  402756:	681b      	ldr	r3, [r3, #0]
  402758:	aa07      	add	r2, sp, #28
  40275a:	4639      	mov	r1, r7
  40275c:	4798      	blx	r3
  40275e:	e7d8      	b.n	402712 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  402760:	fa1f f28e 	uxth.w	r2, lr
  402764:	9200      	str	r2, [sp, #0]
  402766:	4423      	add	r3, r4
  402768:	463a      	mov	r2, r7
  40276a:	a907      	add	r1, sp, #28
  40276c:	4c27      	ldr	r4, [pc, #156]	; (40280c <m2m_ip_cb+0x2b4>)
  40276e:	47a0      	blx	r4
  402770:	e7cf      	b.n	402712 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402772:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  402776:	2b45      	cmp	r3, #69	; 0x45
  402778:	d019      	beq.n	4027ae <m2m_ip_cb+0x256>
  40277a:	284c      	cmp	r0, #76	; 0x4c
  40277c:	d017      	beq.n	4027ae <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40277e:	2852      	cmp	r0, #82	; 0x52
  402780:	d1c7      	bne.n	402712 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  402782:	2301      	movs	r3, #1
  402784:	2214      	movs	r2, #20
  402786:	a907      	add	r1, sp, #28
  402788:	4620      	mov	r0, r4
  40278a:	4c1b      	ldr	r4, [pc, #108]	; (4027f8 <m2m_ip_cb+0x2a0>)
  40278c:	47a0      	blx	r4
  40278e:	2800      	cmp	r0, #0
  402790:	d1bf      	bne.n	402712 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  402792:	4b1f      	ldr	r3, [pc, #124]	; (402810 <m2m_ip_cb+0x2b8>)
  402794:	9a08      	ldr	r2, [sp, #32]
  402796:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  402798:	681b      	ldr	r3, [r3, #0]
  40279a:	2b00      	cmp	r3, #0
  40279c:	d0b9      	beq.n	402712 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40279e:	4b1c      	ldr	r3, [pc, #112]	; (402810 <m2m_ip_cb+0x2b8>)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4027a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4027a8:	9807      	ldr	r0, [sp, #28]
  4027aa:	4798      	blx	r3
}
  4027ac:	e7b1      	b.n	402712 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  4027ae:	2847      	cmp	r0, #71	; 0x47
  4027b0:	bf14      	ite	ne
  4027b2:	2507      	movne	r5, #7
  4027b4:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4027b6:	2300      	movs	r3, #0
  4027b8:	2208      	movs	r2, #8
  4027ba:	a907      	add	r1, sp, #28
  4027bc:	4620      	mov	r0, r4
  4027be:	4c0e      	ldr	r4, [pc, #56]	; (4027f8 <m2m_ip_cb+0x2a0>)
  4027c0:	47a0      	blx	r4
  4027c2:	2800      	cmp	r0, #0
  4027c4:	d1a5      	bne.n	402712 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  4027c6:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4027ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4027ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4027d2:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4027d6:	4b09      	ldr	r3, [pc, #36]	; (4027fc <m2m_ip_cb+0x2a4>)
  4027d8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4027dc:	88db      	ldrh	r3, [r3, #6]
  4027de:	b29b      	uxth	r3, r3
  4027e0:	429a      	cmp	r2, r3
  4027e2:	d196      	bne.n	402712 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4027e4:	4b06      	ldr	r3, [pc, #24]	; (402800 <m2m_ip_cb+0x2a8>)
  4027e6:	681b      	ldr	r3, [r3, #0]
  4027e8:	2b00      	cmp	r3, #0
  4027ea:	d092      	beq.n	402712 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4027ec:	4b04      	ldr	r3, [pc, #16]	; (402800 <m2m_ip_cb+0x2a8>)
  4027ee:	681b      	ldr	r3, [r3, #0]
  4027f0:	aa03      	add	r2, sp, #12
  4027f2:	4629      	mov	r1, r5
  4027f4:	4798      	blx	r3
	{
  4027f6:	e78c      	b.n	402712 <m2m_ip_cb+0x1ba>
  4027f8:	00400bd5 	.word	0x00400bd5
  4027fc:	20401054 	.word	0x20401054
  402800:	20401104 	.word	0x20401104
  402804:	20400a1a 	.word	0x20400a1a
  402808:	2040110c 	.word	0x2040110c
  40280c:	0040249d 	.word	0x0040249d
  402810:	20401108 	.word	0x20401108

00402814 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  402814:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  402816:	4b0a      	ldr	r3, [pc, #40]	; (402840 <socketInit+0x2c>)
  402818:	781b      	ldrb	r3, [r3, #0]
  40281a:	b103      	cbz	r3, 40281e <socketInit+0xa>
  40281c:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  40281e:	22b0      	movs	r2, #176	; 0xb0
  402820:	2100      	movs	r1, #0
  402822:	4808      	ldr	r0, [pc, #32]	; (402844 <socketInit+0x30>)
  402824:	4b08      	ldr	r3, [pc, #32]	; (402848 <socketInit+0x34>)
  402826:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  402828:	4908      	ldr	r1, [pc, #32]	; (40284c <socketInit+0x38>)
  40282a:	2002      	movs	r0, #2
  40282c:	4b08      	ldr	r3, [pc, #32]	; (402850 <socketInit+0x3c>)
  40282e:	4798      	blx	r3
		gbSocketInit=1;
  402830:	2201      	movs	r2, #1
  402832:	4b03      	ldr	r3, [pc, #12]	; (402840 <socketInit+0x2c>)
  402834:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  402836:	2200      	movs	r2, #0
  402838:	4b06      	ldr	r3, [pc, #24]	; (402854 <socketInit+0x40>)
  40283a:	801a      	strh	r2, [r3, #0]
	}
}
  40283c:	e7ee      	b.n	40281c <socketInit+0x8>
  40283e:	bf00      	nop
  402840:	20400a19 	.word	0x20400a19
  402844:	20401054 	.word	0x20401054
  402848:	00400581 	.word	0x00400581
  40284c:	00402559 	.word	0x00402559
  402850:	00400ce9 	.word	0x00400ce9
  402854:	20400a1a 	.word	0x20400a1a

00402858 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402858:	4b02      	ldr	r3, [pc, #8]	; (402864 <registerSocketCallback+0xc>)
  40285a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  40285c:	4b02      	ldr	r3, [pc, #8]	; (402868 <registerSocketCallback+0x10>)
  40285e:	6019      	str	r1, [r3, #0]
  402860:	4770      	bx	lr
  402862:	bf00      	nop
  402864:	20401104 	.word	0x20401104
  402868:	2040110c 	.word	0x2040110c

0040286c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40286c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40286e:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402870:	2802      	cmp	r0, #2
  402872:	d158      	bne.n	402926 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  402874:	2901      	cmp	r1, #1
  402876:	d059      	beq.n	40292c <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  402878:	2902      	cmp	r1, #2
  40287a:	d116      	bne.n	4028aa <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  40287c:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40287e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402880:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402882:	4b2e      	ldr	r3, [pc, #184]	; (40293c <socket+0xd0>)
  402884:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402888:	7a9b      	ldrb	r3, [r3, #10]
  40288a:	2b00      	cmp	r3, #0
  40288c:	d051      	beq.n	402932 <socket+0xc6>
  40288e:	1c63      	adds	r3, r4, #1
  402890:	b2db      	uxtb	r3, r3
  402892:	4f2a      	ldr	r7, [pc, #168]	; (40293c <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  402894:	b2dc      	uxtb	r4, r3
  402896:	42b4      	cmp	r4, r6
  402898:	d240      	bcs.n	40291c <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  40289a:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  40289c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  4028a0:	7a89      	ldrb	r1, [r1, #10]
  4028a2:	1c58      	adds	r0, r3, #1
  4028a4:	b121      	cbz	r1, 4028b0 <socket+0x44>
  4028a6:	4603      	mov	r3, r0
  4028a8:	e7f4      	b.n	402894 <socket+0x28>
			return sock;
  4028aa:	f04f 34ff 	mov.w	r4, #4294967295
  4028ae:	e037      	b.n	402920 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  4028b0:	4822      	ldr	r0, [pc, #136]	; (40293c <socket+0xd0>)
  4028b2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4028b6:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4028b8:	2210      	movs	r2, #16
  4028ba:	2100      	movs	r1, #0
  4028bc:	4b20      	ldr	r3, [pc, #128]	; (402940 <socket+0xd4>)
  4028be:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4028c0:	4b1e      	ldr	r3, [pc, #120]	; (40293c <socket+0xd0>)
  4028c2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4028c6:	2201      	movs	r2, #1
  4028c8:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4028ca:	4a1e      	ldr	r2, [pc, #120]	; (402944 <socket+0xd8>)
  4028cc:	8813      	ldrh	r3, [r2, #0]
  4028ce:	3301      	adds	r3, #1
  4028d0:	b29b      	uxth	r3, r3
  4028d2:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  4028d4:	8813      	ldrh	r3, [r2, #0]
  4028d6:	b29b      	uxth	r3, r3
  4028d8:	b91b      	cbnz	r3, 4028e2 <socket+0x76>
					++gu16SessionID;
  4028da:	8813      	ldrh	r3, [r2, #0]
  4028dc:	3301      	adds	r3, #1
  4028de:	b29b      	uxth	r3, r3
  4028e0:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4028e2:	4b18      	ldr	r3, [pc, #96]	; (402944 <socket+0xd8>)
  4028e4:	881a      	ldrh	r2, [r3, #0]
  4028e6:	b292      	uxth	r2, r2
  4028e8:	4b14      	ldr	r3, [pc, #80]	; (40293c <socket+0xd0>)
  4028ea:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4028ee:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4028f0:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4028f2:	f016 0f01 	tst.w	r6, #1
  4028f6:	d013      	beq.n	402920 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4028f8:	aa06      	add	r2, sp, #24
  4028fa:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4028fe:	4b0f      	ldr	r3, [pc, #60]	; (40293c <socket+0xd0>)
  402900:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  402904:	2321      	movs	r3, #33	; 0x21
  402906:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  402908:	2300      	movs	r3, #0
  40290a:	9302      	str	r3, [sp, #8]
  40290c:	9301      	str	r3, [sp, #4]
  40290e:	9300      	str	r3, [sp, #0]
  402910:	2304      	movs	r3, #4
  402912:	2150      	movs	r1, #80	; 0x50
  402914:	2002      	movs	r0, #2
  402916:	4d0c      	ldr	r5, [pc, #48]	; (402948 <socket+0xdc>)
  402918:	47a8      	blx	r5
  40291a:	e001      	b.n	402920 <socket+0xb4>
	SOCKET		sock = -1;
  40291c:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  402920:	4620      	mov	r0, r4
  402922:	b007      	add	sp, #28
  402924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  402926:	f04f 34ff 	mov.w	r4, #4294967295
  40292a:	e7f9      	b.n	402920 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  40292c:	2607      	movs	r6, #7
			u8Count = 0;
  40292e:	2400      	movs	r4, #0
  402930:	e7a6      	b.n	402880 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  402932:	4802      	ldr	r0, [pc, #8]	; (40293c <socket+0xd0>)
  402934:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402938:	e7bd      	b.n	4028b6 <socket+0x4a>
  40293a:	bf00      	nop
  40293c:	20401054 	.word	0x20401054
  402940:	00400581 	.word	0x00400581
  402944:	20400a1a 	.word	0x20400a1a
  402948:	004006e5 	.word	0x004006e5

0040294c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  40294c:	b530      	push	{r4, r5, lr}
  40294e:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  402950:	1e04      	subs	r4, r0, #0
  402952:	db36      	blt.n	4029c2 <connect+0x76>
  402954:	2900      	cmp	r1, #0
  402956:	d034      	beq.n	4029c2 <connect+0x76>
  402958:	4b1d      	ldr	r3, [pc, #116]	; (4029d0 <connect+0x84>)
  40295a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40295e:	7a9b      	ldrb	r3, [r3, #10]
  402960:	b2db      	uxtb	r3, r3
  402962:	2a00      	cmp	r2, #0
  402964:	d030      	beq.n	4029c8 <connect+0x7c>
  402966:	2b01      	cmp	r3, #1
  402968:	d12e      	bne.n	4029c8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  40296a:	4b19      	ldr	r3, [pc, #100]	; (4029d0 <connect+0x84>)
  40296c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402970:	7adb      	ldrb	r3, [r3, #11]
  402972:	f013 0f01 	tst.w	r3, #1
  402976:	d022      	beq.n	4029be <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  402978:	4b15      	ldr	r3, [pc, #84]	; (4029d0 <connect+0x84>)
  40297a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40297e:	7adb      	ldrb	r3, [r3, #11]
  402980:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  402984:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  402986:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  40298a:	2208      	movs	r2, #8
  40298c:	a805      	add	r0, sp, #20
  40298e:	4b11      	ldr	r3, [pc, #68]	; (4029d4 <connect+0x88>)
  402990:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  402992:	480f      	ldr	r0, [pc, #60]	; (4029d0 <connect+0x84>)
  402994:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402998:	88c3      	ldrh	r3, [r0, #6]
  40299a:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40299e:	2300      	movs	r3, #0
  4029a0:	9302      	str	r3, [sp, #8]
  4029a2:	9301      	str	r3, [sp, #4]
  4029a4:	9300      	str	r3, [sp, #0]
  4029a6:	230c      	movs	r3, #12
  4029a8:	aa05      	add	r2, sp, #20
  4029aa:	4629      	mov	r1, r5
  4029ac:	2002      	movs	r0, #2
  4029ae:	4c0a      	ldr	r4, [pc, #40]	; (4029d8 <connect+0x8c>)
  4029b0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4029b2:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4029b4:	bf18      	it	ne
  4029b6:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  4029ba:	b009      	add	sp, #36	; 0x24
  4029bc:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4029be:	2544      	movs	r5, #68	; 0x44
  4029c0:	e7e1      	b.n	402986 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4029c2:	f06f 0005 	mvn.w	r0, #5
  4029c6:	e7f8      	b.n	4029ba <connect+0x6e>
  4029c8:	f06f 0005 	mvn.w	r0, #5
  4029cc:	e7f5      	b.n	4029ba <connect+0x6e>
  4029ce:	bf00      	nop
  4029d0:	20401054 	.word	0x20401054
  4029d4:	0040056d 	.word	0x0040056d
  4029d8:	004006e5 	.word	0x004006e5

004029dc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4029dc:	b530      	push	{r4, r5, lr}
  4029de:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4029e0:	460c      	mov	r4, r1
  4029e2:	3100      	adds	r1, #0
  4029e4:	bf18      	it	ne
  4029e6:	2101      	movne	r1, #1
  4029e8:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4029ec:	bf88      	it	hi
  4029ee:	2100      	movhi	r1, #0
  4029f0:	2900      	cmp	r1, #0
  4029f2:	d037      	beq.n	402a64 <send+0x88>
  4029f4:	2800      	cmp	r0, #0
  4029f6:	db35      	blt.n	402a64 <send+0x88>
  4029f8:	4b1d      	ldr	r3, [pc, #116]	; (402a70 <send+0x94>)
  4029fa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029fe:	7a9b      	ldrb	r3, [r3, #10]
  402a00:	b2db      	uxtb	r3, r3
  402a02:	2b01      	cmp	r3, #1
  402a04:	d131      	bne.n	402a6a <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  402a06:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  402a0a:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  402a0e:	4b18      	ldr	r3, [pc, #96]	; (402a70 <send+0x94>)
  402a10:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402a14:	88db      	ldrh	r3, [r3, #6]
  402a16:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  402a1a:	2807      	cmp	r0, #7
  402a1c:	bfb4      	ite	lt
  402a1e:	2550      	movlt	r5, #80	; 0x50
  402a20:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402a22:	4b13      	ldr	r3, [pc, #76]	; (402a70 <send+0x94>)
  402a24:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402a28:	7adb      	ldrb	r3, [r3, #11]
  402a2a:	f013 0f01 	tst.w	r3, #1
  402a2e:	d017      	beq.n	402a60 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  402a30:	4b0f      	ldr	r3, [pc, #60]	; (402a70 <send+0x94>)
  402a32:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402a36:	8905      	ldrh	r5, [r0, #8]
  402a38:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  402a3a:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  402a3c:	9502      	str	r5, [sp, #8]
  402a3e:	9201      	str	r2, [sp, #4]
  402a40:	9400      	str	r4, [sp, #0]
  402a42:	2310      	movs	r3, #16
  402a44:	eb0d 0203 	add.w	r2, sp, r3
  402a48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402a4c:	2002      	movs	r0, #2
  402a4e:	4c09      	ldr	r4, [pc, #36]	; (402a74 <send+0x98>)
  402a50:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  402a52:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  402a54:	bf0c      	ite	eq
  402a56:	2000      	moveq	r0, #0
  402a58:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  402a5c:	b009      	add	sp, #36	; 0x24
  402a5e:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  402a60:	2145      	movs	r1, #69	; 0x45
  402a62:	e7eb      	b.n	402a3c <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402a64:	f06f 0005 	mvn.w	r0, #5
  402a68:	e7f8      	b.n	402a5c <send+0x80>
  402a6a:	f06f 0005 	mvn.w	r0, #5
  402a6e:	e7f5      	b.n	402a5c <send+0x80>
  402a70:	20401054 	.word	0x20401054
  402a74:	004006e5 	.word	0x004006e5

00402a78 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402a78:	2900      	cmp	r1, #0
  402a7a:	bf18      	it	ne
  402a7c:	2a00      	cmpne	r2, #0
  402a7e:	d044      	beq.n	402b0a <recv+0x92>
{
  402a80:	b570      	push	{r4, r5, r6, lr}
  402a82:	b086      	sub	sp, #24
  402a84:	460e      	mov	r6, r1
  402a86:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402a88:	2800      	cmp	r0, #0
  402a8a:	db36      	blt.n	402afa <recv+0x82>
  402a8c:	4a20      	ldr	r2, [pc, #128]	; (402b10 <recv+0x98>)
  402a8e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402a92:	7a92      	ldrb	r2, [r2, #10]
  402a94:	b2d2      	uxtb	r2, r2
  402a96:	2a01      	cmp	r2, #1
  402a98:	d132      	bne.n	402b00 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  402a9a:	4c1d      	ldr	r4, [pc, #116]	; (402b10 <recv+0x98>)
  402a9c:	0101      	lsls	r1, r0, #4
  402a9e:	1862      	adds	r2, r4, r1
  402aa0:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  402aa2:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  402aa4:	7b12      	ldrb	r2, [r2, #12]
  402aa6:	2a00      	cmp	r2, #0
  402aa8:	d12d      	bne.n	402b06 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  402aaa:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  402aae:	2101      	movs	r1, #1
  402ab0:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402ab2:	7ad2      	ldrb	r2, [r2, #11]
  402ab4:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  402ab6:	2a00      	cmp	r2, #0
  402ab8:	bf0c      	ite	eq
  402aba:	2146      	moveq	r1, #70	; 0x46
  402abc:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  402abe:	b9d3      	cbnz	r3, 402af6 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  402ac0:	f04f 33ff 	mov.w	r3, #4294967295
  402ac4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  402ac6:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  402aca:	4b11      	ldr	r3, [pc, #68]	; (402b10 <recv+0x98>)
  402acc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402ad0:	88c3      	ldrh	r3, [r0, #6]
  402ad2:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  402ad6:	2300      	movs	r3, #0
  402ad8:	9302      	str	r3, [sp, #8]
  402ada:	9301      	str	r3, [sp, #4]
  402adc:	9300      	str	r3, [sp, #0]
  402ade:	2308      	movs	r3, #8
  402ae0:	aa04      	add	r2, sp, #16
  402ae2:	2002      	movs	r0, #2
  402ae4:	4c0b      	ldr	r4, [pc, #44]	; (402b14 <recv+0x9c>)
  402ae6:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  402ae8:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  402aea:	bf0c      	ite	eq
  402aec:	2000      	moveq	r0, #0
  402aee:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  402af2:	b006      	add	sp, #24
  402af4:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  402af6:	9304      	str	r3, [sp, #16]
  402af8:	e7e5      	b.n	402ac6 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402afa:	f06f 0005 	mvn.w	r0, #5
  402afe:	e7f8      	b.n	402af2 <recv+0x7a>
  402b00:	f06f 0005 	mvn.w	r0, #5
  402b04:	e7f5      	b.n	402af2 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  402b06:	2000      	movs	r0, #0
  402b08:	e7f3      	b.n	402af2 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402b0a:	f06f 0005 	mvn.w	r0, #5
}
  402b0e:	4770      	bx	lr
  402b10:	20401054 	.word	0x20401054
  402b14:	004006e5 	.word	0x004006e5

00402b18 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  402b18:	b530      	push	{r4, r5, lr}
  402b1a:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402b1c:	1e04      	subs	r4, r0, #0
  402b1e:	db2f      	blt.n	402b80 <close+0x68>
  402b20:	4b1a      	ldr	r3, [pc, #104]	; (402b8c <close+0x74>)
  402b22:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402b26:	7a9b      	ldrb	r3, [r3, #10]
  402b28:	b2db      	uxtb	r3, r3
  402b2a:	2b01      	cmp	r3, #1
  402b2c:	d12b      	bne.n	402b86 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  402b2e:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  402b32:	4b16      	ldr	r3, [pc, #88]	; (402b8c <close+0x74>)
  402b34:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402b38:	88da      	ldrh	r2, [r3, #6]
  402b3a:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  402b3e:	2200      	movs	r2, #0
  402b40:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  402b42:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402b44:	7adb      	ldrb	r3, [r3, #11]
  402b46:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  402b4a:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  402b4c:	9202      	str	r2, [sp, #8]
  402b4e:	9201      	str	r2, [sp, #4]
  402b50:	9200      	str	r2, [sp, #0]
  402b52:	f04f 0304 	mov.w	r3, #4
  402b56:	aa05      	add	r2, sp, #20
  402b58:	bf0c      	ite	eq
  402b5a:	2149      	moveq	r1, #73	; 0x49
  402b5c:	214e      	movne	r1, #78	; 0x4e
  402b5e:	2002      	movs	r0, #2
  402b60:	4d0b      	ldr	r5, [pc, #44]	; (402b90 <close+0x78>)
  402b62:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402b64:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402b66:	bf18      	it	ne
  402b68:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  402b6c:	2210      	movs	r2, #16
  402b6e:	2100      	movs	r1, #0
  402b70:	4806      	ldr	r0, [pc, #24]	; (402b8c <close+0x74>)
  402b72:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402b76:	4b07      	ldr	r3, [pc, #28]	; (402b94 <close+0x7c>)
  402b78:	4798      	blx	r3
	}
	return s8Ret;
}
  402b7a:	4628      	mov	r0, r5
  402b7c:	b007      	add	sp, #28
  402b7e:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402b80:	f06f 0505 	mvn.w	r5, #5
  402b84:	e7f9      	b.n	402b7a <close+0x62>
  402b86:	f06f 0505 	mvn.w	r5, #5
  402b8a:	e7f6      	b.n	402b7a <close+0x62>
  402b8c:	20401054 	.word	0x20401054
  402b90:	004006e5 	.word	0x004006e5
  402b94:	00400581 	.word	0x00400581

00402b98 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  402b98:	b570      	push	{r4, r5, r6, lr}
  402b9a:	b082      	sub	sp, #8
  402b9c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  402b9e:	4b2b      	ldr	r3, [pc, #172]	; (402c4c <spi_flash_enable+0xb4>)
  402ba0:	4798      	blx	r3
  402ba2:	f3c0 000b 	ubfx	r0, r0, #0, #12
  402ba6:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  402baa:	d203      	bcs.n	402bb4 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  402bac:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  402bae:	4620      	mov	r0, r4
  402bb0:	b002      	add	sp, #8
  402bb2:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  402bb4:	a901      	add	r1, sp, #4
  402bb6:	f241 4010 	movw	r0, #5136	; 0x1410
  402bba:	4b25      	ldr	r3, [pc, #148]	; (402c50 <spi_flash_enable+0xb8>)
  402bbc:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  402bbe:	4604      	mov	r4, r0
  402bc0:	2800      	cmp	r0, #0
  402bc2:	d1f4      	bne.n	402bae <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  402bc4:	4b23      	ldr	r3, [pc, #140]	; (402c54 <spi_flash_enable+0xbc>)
  402bc6:	9a01      	ldr	r2, [sp, #4]
  402bc8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  402bca:	4923      	ldr	r1, [pc, #140]	; (402c58 <spi_flash_enable+0xc0>)
  402bcc:	4319      	orrs	r1, r3
  402bce:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402bd0:	f241 4010 	movw	r0, #5136	; 0x1410
  402bd4:	4b21      	ldr	r3, [pc, #132]	; (402c5c <spi_flash_enable+0xc4>)
  402bd6:	4798      	blx	r3
		if(enable) {
  402bd8:	b305      	cbz	r5, 402c1c <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402bda:	2100      	movs	r1, #0
  402bdc:	4820      	ldr	r0, [pc, #128]	; (402c60 <spi_flash_enable+0xc8>)
  402bde:	4d1f      	ldr	r5, [pc, #124]	; (402c5c <spi_flash_enable+0xc4>)
  402be0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402be2:	21ab      	movs	r1, #171	; 0xab
  402be4:	481f      	ldr	r0, [pc, #124]	; (402c64 <spi_flash_enable+0xcc>)
  402be6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402be8:	2101      	movs	r1, #1
  402bea:	481f      	ldr	r0, [pc, #124]	; (402c68 <spi_flash_enable+0xd0>)
  402bec:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402bee:	2100      	movs	r1, #0
  402bf0:	481e      	ldr	r0, [pc, #120]	; (402c6c <spi_flash_enable+0xd4>)
  402bf2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  402bf4:	2181      	movs	r1, #129	; 0x81
  402bf6:	481e      	ldr	r0, [pc, #120]	; (402c70 <spi_flash_enable+0xd8>)
  402bf8:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402bfa:	4e1e      	ldr	r6, [pc, #120]	; (402c74 <spi_flash_enable+0xdc>)
  402bfc:	4d1e      	ldr	r5, [pc, #120]	; (402c78 <spi_flash_enable+0xe0>)
  402bfe:	4630      	mov	r0, r6
  402c00:	47a8      	blx	r5
  402c02:	2801      	cmp	r0, #1
  402c04:	d1fb      	bne.n	402bfe <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  402c06:	4913      	ldr	r1, [pc, #76]	; (402c54 <spi_flash_enable+0xbc>)
  402c08:	9b01      	ldr	r3, [sp, #4]
  402c0a:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  402c0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402c10:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402c12:	f241 4010 	movw	r0, #5136	; 0x1410
  402c16:	4b11      	ldr	r3, [pc, #68]	; (402c5c <spi_flash_enable+0xc4>)
  402c18:	4798      	blx	r3
  402c1a:	e7c8      	b.n	402bae <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402c1c:	2100      	movs	r1, #0
  402c1e:	4810      	ldr	r0, [pc, #64]	; (402c60 <spi_flash_enable+0xc8>)
  402c20:	4d0e      	ldr	r5, [pc, #56]	; (402c5c <spi_flash_enable+0xc4>)
  402c22:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402c24:	21b9      	movs	r1, #185	; 0xb9
  402c26:	480f      	ldr	r0, [pc, #60]	; (402c64 <spi_flash_enable+0xcc>)
  402c28:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402c2a:	2101      	movs	r1, #1
  402c2c:	480e      	ldr	r0, [pc, #56]	; (402c68 <spi_flash_enable+0xd0>)
  402c2e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402c30:	2100      	movs	r1, #0
  402c32:	480e      	ldr	r0, [pc, #56]	; (402c6c <spi_flash_enable+0xd4>)
  402c34:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402c36:	2181      	movs	r1, #129	; 0x81
  402c38:	480d      	ldr	r0, [pc, #52]	; (402c70 <spi_flash_enable+0xd8>)
  402c3a:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402c3c:	4e0d      	ldr	r6, [pc, #52]	; (402c74 <spi_flash_enable+0xdc>)
  402c3e:	4d0e      	ldr	r5, [pc, #56]	; (402c78 <spi_flash_enable+0xe0>)
  402c40:	4630      	mov	r0, r6
  402c42:	47a8      	blx	r5
  402c44:	2801      	cmp	r0, #1
  402c46:	d1fb      	bne.n	402c40 <spi_flash_enable+0xa8>
  402c48:	e7dd      	b.n	402c06 <spi_flash_enable+0x6e>
  402c4a:	bf00      	nop
  402c4c:	004015ad 	.word	0x004015ad
  402c50:	004018a9 	.word	0x004018a9
  402c54:	f8888fff 	.word	0xf8888fff
  402c58:	01111000 	.word	0x01111000
  402c5c:	004018b5 	.word	0x004018b5
  402c60:	00010208 	.word	0x00010208
  402c64:	0001020c 	.word	0x0001020c
  402c68:	00010214 	.word	0x00010214
  402c6c:	0001021c 	.word	0x0001021c
  402c70:	00010204 	.word	0x00010204
  402c74:	00010218 	.word	0x00010218
  402c78:	0040189d 	.word	0x0040189d

00402c7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402c7c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402c7e:	4810      	ldr	r0, [pc, #64]	; (402cc0 <sysclk_init+0x44>)
  402c80:	4b10      	ldr	r3, [pc, #64]	; (402cc4 <sysclk_init+0x48>)
  402c82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402c84:	213e      	movs	r1, #62	; 0x3e
  402c86:	2000      	movs	r0, #0
  402c88:	4b0f      	ldr	r3, [pc, #60]	; (402cc8 <sysclk_init+0x4c>)
  402c8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402c8c:	4c0f      	ldr	r4, [pc, #60]	; (402ccc <sysclk_init+0x50>)
  402c8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402c90:	2800      	cmp	r0, #0
  402c92:	d0fc      	beq.n	402c8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402c94:	4b0e      	ldr	r3, [pc, #56]	; (402cd0 <sysclk_init+0x54>)
  402c96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402c98:	4a0e      	ldr	r2, [pc, #56]	; (402cd4 <sysclk_init+0x58>)
  402c9a:	4b0f      	ldr	r3, [pc, #60]	; (402cd8 <sysclk_init+0x5c>)
  402c9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402c9e:	4c0f      	ldr	r4, [pc, #60]	; (402cdc <sysclk_init+0x60>)
  402ca0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402ca2:	2800      	cmp	r0, #0
  402ca4:	d0fc      	beq.n	402ca0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402ca6:	2002      	movs	r0, #2
  402ca8:	4b0d      	ldr	r3, [pc, #52]	; (402ce0 <sysclk_init+0x64>)
  402caa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402cac:	2000      	movs	r0, #0
  402cae:	4b0d      	ldr	r3, [pc, #52]	; (402ce4 <sysclk_init+0x68>)
  402cb0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402cb2:	4b0d      	ldr	r3, [pc, #52]	; (402ce8 <sysclk_init+0x6c>)
  402cb4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402cb6:	4802      	ldr	r0, [pc, #8]	; (402cc0 <sysclk_init+0x44>)
  402cb8:	4b02      	ldr	r3, [pc, #8]	; (402cc4 <sysclk_init+0x48>)
  402cba:	4798      	blx	r3
  402cbc:	bd10      	pop	{r4, pc}
  402cbe:	bf00      	nop
  402cc0:	11e1a300 	.word	0x11e1a300
  402cc4:	00403991 	.word	0x00403991
  402cc8:	00403459 	.word	0x00403459
  402ccc:	004034ad 	.word	0x004034ad
  402cd0:	004034bd 	.word	0x004034bd
  402cd4:	20183f01 	.word	0x20183f01
  402cd8:	400e0600 	.word	0x400e0600
  402cdc:	004034cd 	.word	0x004034cd
  402ce0:	004033bd 	.word	0x004033bd
  402ce4:	004033f5 	.word	0x004033f5
  402ce8:	00403885 	.word	0x00403885

00402cec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  402cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  402cf0:	b980      	cbnz	r0, 402d14 <_read+0x28>
  402cf2:	460c      	mov	r4, r1
  402cf4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  402cf6:	2a00      	cmp	r2, #0
  402cf8:	dd0f      	ble.n	402d1a <_read+0x2e>
  402cfa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  402cfc:	4e08      	ldr	r6, [pc, #32]	; (402d20 <_read+0x34>)
  402cfe:	4d09      	ldr	r5, [pc, #36]	; (402d24 <_read+0x38>)
  402d00:	6830      	ldr	r0, [r6, #0]
  402d02:	4621      	mov	r1, r4
  402d04:	682b      	ldr	r3, [r5, #0]
  402d06:	4798      	blx	r3
		ptr++;
  402d08:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  402d0a:	42bc      	cmp	r4, r7
  402d0c:	d1f8      	bne.n	402d00 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  402d0e:	4640      	mov	r0, r8
  402d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  402d14:	f04f 38ff 	mov.w	r8, #4294967295
  402d18:	e7f9      	b.n	402d0e <_read+0x22>
	for (; len > 0; --len) {
  402d1a:	4680      	mov	r8, r0
  402d1c:	e7f7      	b.n	402d0e <_read+0x22>
  402d1e:	bf00      	nop
  402d20:	20401118 	.word	0x20401118
  402d24:	20401110 	.word	0x20401110

00402d28 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402d28:	3801      	subs	r0, #1
  402d2a:	2802      	cmp	r0, #2
  402d2c:	d815      	bhi.n	402d5a <_write+0x32>
{
  402d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d32:	460e      	mov	r6, r1
  402d34:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  402d36:	b19a      	cbz	r2, 402d60 <_write+0x38>
  402d38:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402d3a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 402d74 <_write+0x4c>
  402d3e:	4f0c      	ldr	r7, [pc, #48]	; (402d70 <_write+0x48>)
  402d40:	f8d8 0000 	ldr.w	r0, [r8]
  402d44:	f815 1b01 	ldrb.w	r1, [r5], #1
  402d48:	683b      	ldr	r3, [r7, #0]
  402d4a:	4798      	blx	r3
  402d4c:	2800      	cmp	r0, #0
  402d4e:	db0a      	blt.n	402d66 <_write+0x3e>
  402d50:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  402d52:	3c01      	subs	r4, #1
  402d54:	d1f4      	bne.n	402d40 <_write+0x18>
  402d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  402d5a:	f04f 30ff 	mov.w	r0, #4294967295
  402d5e:	4770      	bx	lr
	for (; len != 0; --len) {
  402d60:	4610      	mov	r0, r2
  402d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  402d66:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  402d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d6e:	bf00      	nop
  402d70:	20401114 	.word	0x20401114
  402d74:	20401118 	.word	0x20401118

00402d78 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402d7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d7e:	4b5c      	ldr	r3, [pc, #368]	; (402ef0 <board_init+0x178>)
  402d80:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402d86:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402d8a:	4b5a      	ldr	r3, [pc, #360]	; (402ef4 <board_init+0x17c>)
  402d8c:	2200      	movs	r2, #0
  402d8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402d92:	695a      	ldr	r2, [r3, #20]
  402d94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402d98:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  402d9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402d9e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  402da2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  402da6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402daa:	f007 0007 	and.w	r0, r7, #7
  402dae:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  402db0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  402db4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  402db8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  402dbc:	f3bf 8f4f 	dsb	sy
  402dc0:	f04f 34ff 	mov.w	r4, #4294967295
  402dc4:	fa04 fc00 	lsl.w	ip, r4, r0
  402dc8:	fa06 f000 	lsl.w	r0, r6, r0
  402dcc:	fa04 f40e 	lsl.w	r4, r4, lr
  402dd0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  402dd4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  402dd6:	463a      	mov	r2, r7
  402dd8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  402dda:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  402dde:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  402de2:	3a01      	subs	r2, #1
  402de4:	4423      	add	r3, r4
  402de6:	f1b2 3fff 	cmp.w	r2, #4294967295
  402dea:	d1f6      	bne.n	402dda <board_init+0x62>
        } while(sets--);
  402dec:	3e01      	subs	r6, #1
  402dee:	4460      	add	r0, ip
  402df0:	f1b6 3fff 	cmp.w	r6, #4294967295
  402df4:	d1ef      	bne.n	402dd6 <board_init+0x5e>
  402df6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  402dfa:	4b3e      	ldr	r3, [pc, #248]	; (402ef4 <board_init+0x17c>)
  402dfc:	695a      	ldr	r2, [r3, #20]
  402dfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  402e02:	615a      	str	r2, [r3, #20]
  402e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402e08:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402e0c:	4a3a      	ldr	r2, [pc, #232]	; (402ef8 <board_init+0x180>)
  402e0e:	493b      	ldr	r1, [pc, #236]	; (402efc <board_init+0x184>)
  402e10:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402e12:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  402e16:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  402e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402e1c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402e20:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  402e24:	f022 0201 	bic.w	r2, r2, #1
  402e28:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402e2c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  402e30:	f022 0201 	bic.w	r2, r2, #1
  402e34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  402e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402e3c:	f3bf 8f6f 	isb	sy
  402e40:	200a      	movs	r0, #10
  402e42:	4c2f      	ldr	r4, [pc, #188]	; (402f00 <board_init+0x188>)
  402e44:	47a0      	blx	r4
  402e46:	200b      	movs	r0, #11
  402e48:	47a0      	blx	r4
  402e4a:	200c      	movs	r0, #12
  402e4c:	47a0      	blx	r4
  402e4e:	2010      	movs	r0, #16
  402e50:	47a0      	blx	r4
  402e52:	2011      	movs	r0, #17
  402e54:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402e56:	4b2b      	ldr	r3, [pc, #172]	; (402f04 <board_init+0x18c>)
  402e58:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e5c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402e62:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402e64:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  402e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402e6c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402e72:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402e74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402e78:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402e7a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402e80:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e82:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402e86:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402e88:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402e8a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402e8e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402e90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402e94:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402e98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  402e9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402ea0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402ea6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402ea8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402eae:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402eb0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402eb4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402eb6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402eb8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402ebc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402ebe:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402ec0:	4a11      	ldr	r2, [pc, #68]	; (402f08 <board_init+0x190>)
  402ec2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  402ec6:	f043 0310 	orr.w	r3, r3, #16
  402eca:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  402ece:	4b0f      	ldr	r3, [pc, #60]	; (402f0c <board_init+0x194>)
  402ed0:	2210      	movs	r2, #16
  402ed2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402ed8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402eda:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402ee0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402ee2:	4311      	orrs	r1, r2
  402ee4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402ee6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402ee8:	4311      	orrs	r1, r2
  402eea:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402eec:	605a      	str	r2, [r3, #4]
  402eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ef0:	400e1850 	.word	0x400e1850
  402ef4:	e000ed00 	.word	0xe000ed00
  402ef8:	400e0c00 	.word	0x400e0c00
  402efc:	5a00080c 	.word	0x5a00080c
  402f00:	004034dd 	.word	0x004034dd
  402f04:	400e1200 	.word	0x400e1200
  402f08:	40088000 	.word	0x40088000
  402f0c:	400e1000 	.word	0x400e1000

00402f10 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402f10:	b90a      	cbnz	r2, 402f16 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402f12:	6601      	str	r1, [r0, #96]	; 0x60
  402f14:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402f16:	6641      	str	r1, [r0, #100]	; 0x64
  402f18:	4770      	bx	lr

00402f1a <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402f1a:	6301      	str	r1, [r0, #48]	; 0x30
  402f1c:	4770      	bx	lr

00402f1e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402f1e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402f20:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402f24:	d03a      	beq.n	402f9c <pio_set_peripheral+0x7e>
  402f26:	d813      	bhi.n	402f50 <pio_set_peripheral+0x32>
  402f28:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402f2c:	d025      	beq.n	402f7a <pio_set_peripheral+0x5c>
  402f2e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402f32:	d10a      	bne.n	402f4a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f34:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402f36:	4313      	orrs	r3, r2
  402f38:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f3a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402f3c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402f3e:	400b      	ands	r3, r1
  402f40:	ea23 0302 	bic.w	r3, r3, r2
  402f44:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402f46:	6042      	str	r2, [r0, #4]
  402f48:	4770      	bx	lr
	switch (ul_type) {
  402f4a:	2900      	cmp	r1, #0
  402f4c:	d1fb      	bne.n	402f46 <pio_set_peripheral+0x28>
  402f4e:	4770      	bx	lr
  402f50:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402f54:	d021      	beq.n	402f9a <pio_set_peripheral+0x7c>
  402f56:	d809      	bhi.n	402f6c <pio_set_peripheral+0x4e>
  402f58:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402f5c:	d1f3      	bne.n	402f46 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402f60:	4313      	orrs	r3, r2
  402f62:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402f64:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402f66:	4313      	orrs	r3, r2
  402f68:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f6a:	e7ec      	b.n	402f46 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402f6c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402f70:	d013      	beq.n	402f9a <pio_set_peripheral+0x7c>
  402f72:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402f76:	d010      	beq.n	402f9a <pio_set_peripheral+0x7c>
  402f78:	e7e5      	b.n	402f46 <pio_set_peripheral+0x28>
{
  402f7a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f7c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f7e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402f80:	43d3      	mvns	r3, r2
  402f82:	4021      	ands	r1, r4
  402f84:	461c      	mov	r4, r3
  402f86:	4019      	ands	r1, r3
  402f88:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402f8a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402f8c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402f8e:	400b      	ands	r3, r1
  402f90:	4023      	ands	r3, r4
  402f92:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402f94:	6042      	str	r2, [r0, #4]
}
  402f96:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f9a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f9e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402fa0:	400b      	ands	r3, r1
  402fa2:	ea23 0302 	bic.w	r3, r3, r2
  402fa6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402fa8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402faa:	4313      	orrs	r3, r2
  402fac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402fae:	e7ca      	b.n	402f46 <pio_set_peripheral+0x28>

00402fb0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402fb0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402fb2:	f012 0f01 	tst.w	r2, #1
  402fb6:	d10d      	bne.n	402fd4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  402fb8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402fba:	f012 0f0a 	tst.w	r2, #10
  402fbe:	d00b      	beq.n	402fd8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  402fc0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  402fc2:	f012 0f02 	tst.w	r2, #2
  402fc6:	d109      	bne.n	402fdc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402fc8:	f012 0f08 	tst.w	r2, #8
  402fcc:	d008      	beq.n	402fe0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402fce:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  402fd2:	e005      	b.n	402fe0 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  402fd4:	6641      	str	r1, [r0, #100]	; 0x64
  402fd6:	e7f0      	b.n	402fba <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  402fd8:	6241      	str	r1, [r0, #36]	; 0x24
  402fda:	e7f2      	b.n	402fc2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  402fdc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  402fe0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402fe2:	6001      	str	r1, [r0, #0]
  402fe4:	4770      	bx	lr

00402fe6 <pio_set_output>:
{
  402fe6:	b410      	push	{r4}
  402fe8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402fea:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402fec:	b94c      	cbnz	r4, 403002 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  402fee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402ff0:	b14b      	cbz	r3, 403006 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  402ff2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402ff4:	b94a      	cbnz	r2, 40300a <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  402ff6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402ff8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402ffa:	6001      	str	r1, [r0, #0]
}
  402ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
  403000:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403002:	6641      	str	r1, [r0, #100]	; 0x64
  403004:	e7f4      	b.n	402ff0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403006:	6541      	str	r1, [r0, #84]	; 0x54
  403008:	e7f4      	b.n	402ff4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40300a:	6301      	str	r1, [r0, #48]	; 0x30
  40300c:	e7f4      	b.n	402ff8 <pio_set_output+0x12>
	...

00403010 <pio_configure>:
{
  403010:	b570      	push	{r4, r5, r6, lr}
  403012:	b082      	sub	sp, #8
  403014:	4605      	mov	r5, r0
  403016:	4616      	mov	r6, r2
  403018:	461c      	mov	r4, r3
	switch (ul_type) {
  40301a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40301e:	d014      	beq.n	40304a <pio_configure+0x3a>
  403020:	d90a      	bls.n	403038 <pio_configure+0x28>
  403022:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403026:	d024      	beq.n	403072 <pio_configure+0x62>
  403028:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40302c:	d021      	beq.n	403072 <pio_configure+0x62>
  40302e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403032:	d017      	beq.n	403064 <pio_configure+0x54>
		return 0;
  403034:	2000      	movs	r0, #0
  403036:	e01a      	b.n	40306e <pio_configure+0x5e>
	switch (ul_type) {
  403038:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40303c:	d005      	beq.n	40304a <pio_configure+0x3a>
  40303e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403042:	d002      	beq.n	40304a <pio_configure+0x3a>
  403044:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403048:	d1f4      	bne.n	403034 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40304a:	4632      	mov	r2, r6
  40304c:	4628      	mov	r0, r5
  40304e:	4b11      	ldr	r3, [pc, #68]	; (403094 <pio_configure+0x84>)
  403050:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403052:	f014 0f01 	tst.w	r4, #1
  403056:	d102      	bne.n	40305e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  403058:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40305a:	2001      	movs	r0, #1
  40305c:	e007      	b.n	40306e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40305e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  403060:	2001      	movs	r0, #1
  403062:	e004      	b.n	40306e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  403064:	461a      	mov	r2, r3
  403066:	4631      	mov	r1, r6
  403068:	4b0b      	ldr	r3, [pc, #44]	; (403098 <pio_configure+0x88>)
  40306a:	4798      	blx	r3
	return 1;
  40306c:	2001      	movs	r0, #1
}
  40306e:	b002      	add	sp, #8
  403070:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  403072:	f004 0301 	and.w	r3, r4, #1
  403076:	9300      	str	r3, [sp, #0]
  403078:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40307c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403080:	bf14      	ite	ne
  403082:	2200      	movne	r2, #0
  403084:	2201      	moveq	r2, #1
  403086:	4631      	mov	r1, r6
  403088:	4628      	mov	r0, r5
  40308a:	4c04      	ldr	r4, [pc, #16]	; (40309c <pio_configure+0x8c>)
  40308c:	47a0      	blx	r4
	return 1;
  40308e:	2001      	movs	r0, #1
		break;
  403090:	e7ed      	b.n	40306e <pio_configure+0x5e>
  403092:	bf00      	nop
  403094:	00402f1f 	.word	0x00402f1f
  403098:	00402fb1 	.word	0x00402fb1
  40309c:	00402fe7 	.word	0x00402fe7

004030a0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4030a0:	f012 0f10 	tst.w	r2, #16
  4030a4:	d012      	beq.n	4030cc <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4030a6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4030aa:	f012 0f20 	tst.w	r2, #32
  4030ae:	d007      	beq.n	4030c0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4030b0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4030b4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4030b8:	d005      	beq.n	4030c6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4030ba:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4030be:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4030c0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4030c4:	e7f6      	b.n	4030b4 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4030c6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4030ca:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4030cc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4030d0:	4770      	bx	lr

004030d2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4030d2:	6401      	str	r1, [r0, #64]	; 0x40
  4030d4:	4770      	bx	lr

004030d6 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  4030d6:	6441      	str	r1, [r0, #68]	; 0x44
  4030d8:	4770      	bx	lr

004030da <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4030da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4030dc:	4770      	bx	lr

004030de <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4030de:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4030e0:	4770      	bx	lr
	...

004030e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4030e4:	b570      	push	{r4, r5, r6, lr}
  4030e6:	b082      	sub	sp, #8
  4030e8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4030ea:	4c46      	ldr	r4, [pc, #280]	; (403204 <pio_configure_pin+0x120>)
  4030ec:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4030f0:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4030f2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4030f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4030fa:	d059      	beq.n	4031b0 <pio_configure_pin+0xcc>
  4030fc:	d80a      	bhi.n	403114 <pio_configure_pin+0x30>
  4030fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403102:	d02f      	beq.n	403164 <pio_configure_pin+0x80>
  403104:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403108:	d03f      	beq.n	40318a <pio_configure_pin+0xa6>
  40310a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40310e:	d016      	beq.n	40313e <pio_configure_pin+0x5a>
		return 0;
  403110:	2000      	movs	r0, #0
  403112:	e012      	b.n	40313a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  403114:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403118:	d05d      	beq.n	4031d6 <pio_configure_pin+0xf2>
  40311a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40311e:	d05a      	beq.n	4031d6 <pio_configure_pin+0xf2>
  403120:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403124:	d1f4      	bne.n	403110 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  403126:	f000 011f 	and.w	r1, r0, #31
  40312a:	2601      	movs	r6, #1
  40312c:	462a      	mov	r2, r5
  40312e:	fa06 f101 	lsl.w	r1, r6, r1
  403132:	4620      	mov	r0, r4
  403134:	4b34      	ldr	r3, [pc, #208]	; (403208 <pio_configure_pin+0x124>)
  403136:	4798      	blx	r3
	return 1;
  403138:	4630      	mov	r0, r6
}
  40313a:	b002      	add	sp, #8
  40313c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40313e:	f000 001f 	and.w	r0, r0, #31
  403142:	2601      	movs	r6, #1
  403144:	4086      	lsls	r6, r0
  403146:	4632      	mov	r2, r6
  403148:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40314c:	4620      	mov	r0, r4
  40314e:	4b2f      	ldr	r3, [pc, #188]	; (40320c <pio_configure_pin+0x128>)
  403150:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403152:	f015 0f01 	tst.w	r5, #1
  403156:	d102      	bne.n	40315e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  403158:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40315a:	2001      	movs	r0, #1
  40315c:	e7ed      	b.n	40313a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40315e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403160:	2001      	movs	r0, #1
  403162:	e7ea      	b.n	40313a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  403164:	f000 001f 	and.w	r0, r0, #31
  403168:	2601      	movs	r6, #1
  40316a:	4086      	lsls	r6, r0
  40316c:	4632      	mov	r2, r6
  40316e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403172:	4620      	mov	r0, r4
  403174:	4b25      	ldr	r3, [pc, #148]	; (40320c <pio_configure_pin+0x128>)
  403176:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403178:	f015 0f01 	tst.w	r5, #1
  40317c:	d102      	bne.n	403184 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40317e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403180:	2001      	movs	r0, #1
  403182:	e7da      	b.n	40313a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403184:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403186:	2001      	movs	r0, #1
  403188:	e7d7      	b.n	40313a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40318a:	f000 001f 	and.w	r0, r0, #31
  40318e:	2601      	movs	r6, #1
  403190:	4086      	lsls	r6, r0
  403192:	4632      	mov	r2, r6
  403194:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403198:	4620      	mov	r0, r4
  40319a:	4b1c      	ldr	r3, [pc, #112]	; (40320c <pio_configure_pin+0x128>)
  40319c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40319e:	f015 0f01 	tst.w	r5, #1
  4031a2:	d102      	bne.n	4031aa <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4031a4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4031a6:	2001      	movs	r0, #1
  4031a8:	e7c7      	b.n	40313a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4031aa:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4031ac:	2001      	movs	r0, #1
  4031ae:	e7c4      	b.n	40313a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4031b0:	f000 001f 	and.w	r0, r0, #31
  4031b4:	2601      	movs	r6, #1
  4031b6:	4086      	lsls	r6, r0
  4031b8:	4632      	mov	r2, r6
  4031ba:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4031be:	4620      	mov	r0, r4
  4031c0:	4b12      	ldr	r3, [pc, #72]	; (40320c <pio_configure_pin+0x128>)
  4031c2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4031c4:	f015 0f01 	tst.w	r5, #1
  4031c8:	d102      	bne.n	4031d0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4031ca:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4031cc:	2001      	movs	r0, #1
  4031ce:	e7b4      	b.n	40313a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4031d0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4031d2:	2001      	movs	r0, #1
  4031d4:	e7b1      	b.n	40313a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4031d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4031da:	f000 011f 	and.w	r1, r0, #31
  4031de:	2601      	movs	r6, #1
  4031e0:	ea05 0306 	and.w	r3, r5, r6
  4031e4:	9300      	str	r3, [sp, #0]
  4031e6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4031ea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4031ee:	bf14      	ite	ne
  4031f0:	2200      	movne	r2, #0
  4031f2:	2201      	moveq	r2, #1
  4031f4:	fa06 f101 	lsl.w	r1, r6, r1
  4031f8:	4620      	mov	r0, r4
  4031fa:	4c05      	ldr	r4, [pc, #20]	; (403210 <pio_configure_pin+0x12c>)
  4031fc:	47a0      	blx	r4
	return 1;
  4031fe:	4630      	mov	r0, r6
		break;
  403200:	e79b      	b.n	40313a <pio_configure_pin+0x56>
  403202:	bf00      	nop
  403204:	00200707 	.word	0x00200707
  403208:	00402fb1 	.word	0x00402fb1
  40320c:	00402f1f 	.word	0x00402f1f
  403210:	00402fe7 	.word	0x00402fe7

00403214 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403218:	4604      	mov	r4, r0
  40321a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40321c:	4b0e      	ldr	r3, [pc, #56]	; (403258 <pio_handler_process+0x44>)
  40321e:	4798      	blx	r3
  403220:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403222:	4620      	mov	r0, r4
  403224:	4b0d      	ldr	r3, [pc, #52]	; (40325c <pio_handler_process+0x48>)
  403226:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403228:	4005      	ands	r5, r0
  40322a:	d013      	beq.n	403254 <pio_handler_process+0x40>
  40322c:	4c0c      	ldr	r4, [pc, #48]	; (403260 <pio_handler_process+0x4c>)
  40322e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  403232:	e003      	b.n	40323c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403234:	42b4      	cmp	r4, r6
  403236:	d00d      	beq.n	403254 <pio_handler_process+0x40>
  403238:	3410      	adds	r4, #16
		while (status != 0) {
  40323a:	b15d      	cbz	r5, 403254 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40323c:	6820      	ldr	r0, [r4, #0]
  40323e:	4540      	cmp	r0, r8
  403240:	d1f8      	bne.n	403234 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403242:	6861      	ldr	r1, [r4, #4]
  403244:	4229      	tst	r1, r5
  403246:	d0f5      	beq.n	403234 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403248:	68e3      	ldr	r3, [r4, #12]
  40324a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40324c:	6863      	ldr	r3, [r4, #4]
  40324e:	ea25 0503 	bic.w	r5, r5, r3
  403252:	e7ef      	b.n	403234 <pio_handler_process+0x20>
  403254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403258:	004030db 	.word	0x004030db
  40325c:	004030df 	.word	0x004030df
  403260:	20400a1c 	.word	0x20400a1c

00403264 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  403264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  403266:	4c18      	ldr	r4, [pc, #96]	; (4032c8 <pio_handler_set+0x64>)
  403268:	6826      	ldr	r6, [r4, #0]
  40326a:	2e06      	cmp	r6, #6
  40326c:	d82a      	bhi.n	4032c4 <pio_handler_set+0x60>
  40326e:	f04f 0c00 	mov.w	ip, #0
  403272:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  403274:	4f15      	ldr	r7, [pc, #84]	; (4032cc <pio_handler_set+0x68>)
  403276:	e004      	b.n	403282 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  403278:	3401      	adds	r4, #1
  40327a:	b2e4      	uxtb	r4, r4
  40327c:	46a4      	mov	ip, r4
  40327e:	42a6      	cmp	r6, r4
  403280:	d309      	bcc.n	403296 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  403282:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  403284:	0125      	lsls	r5, r4, #4
  403286:	597d      	ldr	r5, [r7, r5]
  403288:	428d      	cmp	r5, r1
  40328a:	d1f5      	bne.n	403278 <pio_handler_set+0x14>
  40328c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  403290:	686d      	ldr	r5, [r5, #4]
  403292:	4295      	cmp	r5, r2
  403294:	d1f0      	bne.n	403278 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  403296:	4d0d      	ldr	r5, [pc, #52]	; (4032cc <pio_handler_set+0x68>)
  403298:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40329c:	eb05 040e 	add.w	r4, r5, lr
  4032a0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4032a4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4032a6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4032a8:	9906      	ldr	r1, [sp, #24]
  4032aa:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4032ac:	3601      	adds	r6, #1
  4032ae:	4566      	cmp	r6, ip
  4032b0:	d005      	beq.n	4032be <pio_handler_set+0x5a>
  4032b2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4032b4:	461a      	mov	r2, r3
  4032b6:	4b06      	ldr	r3, [pc, #24]	; (4032d0 <pio_handler_set+0x6c>)
  4032b8:	4798      	blx	r3

	return 0;
  4032ba:	2000      	movs	r0, #0
  4032bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4032be:	4902      	ldr	r1, [pc, #8]	; (4032c8 <pio_handler_set+0x64>)
  4032c0:	600e      	str	r6, [r1, #0]
  4032c2:	e7f6      	b.n	4032b2 <pio_handler_set+0x4e>
		return 1;
  4032c4:	2001      	movs	r0, #1
}
  4032c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032c8:	20400a8c 	.word	0x20400a8c
  4032cc:	20400a1c 	.word	0x20400a1c
  4032d0:	004030a1 	.word	0x004030a1

004032d4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4032d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4032d6:	210a      	movs	r1, #10
  4032d8:	4801      	ldr	r0, [pc, #4]	; (4032e0 <PIOA_Handler+0xc>)
  4032da:	4b02      	ldr	r3, [pc, #8]	; (4032e4 <PIOA_Handler+0x10>)
  4032dc:	4798      	blx	r3
  4032de:	bd08      	pop	{r3, pc}
  4032e0:	400e0e00 	.word	0x400e0e00
  4032e4:	00403215 	.word	0x00403215

004032e8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4032e8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4032ea:	210b      	movs	r1, #11
  4032ec:	4801      	ldr	r0, [pc, #4]	; (4032f4 <PIOB_Handler+0xc>)
  4032ee:	4b02      	ldr	r3, [pc, #8]	; (4032f8 <PIOB_Handler+0x10>)
  4032f0:	4798      	blx	r3
  4032f2:	bd08      	pop	{r3, pc}
  4032f4:	400e1000 	.word	0x400e1000
  4032f8:	00403215 	.word	0x00403215

004032fc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4032fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4032fe:	210c      	movs	r1, #12
  403300:	4801      	ldr	r0, [pc, #4]	; (403308 <PIOC_Handler+0xc>)
  403302:	4b02      	ldr	r3, [pc, #8]	; (40330c <PIOC_Handler+0x10>)
  403304:	4798      	blx	r3
  403306:	bd08      	pop	{r3, pc}
  403308:	400e1200 	.word	0x400e1200
  40330c:	00403215 	.word	0x00403215

00403310 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403310:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  403312:	2110      	movs	r1, #16
  403314:	4801      	ldr	r0, [pc, #4]	; (40331c <PIOD_Handler+0xc>)
  403316:	4b02      	ldr	r3, [pc, #8]	; (403320 <PIOD_Handler+0x10>)
  403318:	4798      	blx	r3
  40331a:	bd08      	pop	{r3, pc}
  40331c:	400e1400 	.word	0x400e1400
  403320:	00403215 	.word	0x00403215

00403324 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403324:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403326:	2111      	movs	r1, #17
  403328:	4801      	ldr	r0, [pc, #4]	; (403330 <PIOE_Handler+0xc>)
  40332a:	4b02      	ldr	r3, [pc, #8]	; (403334 <PIOE_Handler+0x10>)
  40332c:	4798      	blx	r3
  40332e:	bd08      	pop	{r3, pc}
  403330:	400e1600 	.word	0x400e1600
  403334:	00403215 	.word	0x00403215

00403338 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  403338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40333a:	4606      	mov	r6, r0
  40333c:	460d      	mov	r5, r1
  40333e:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  403340:	4b17      	ldr	r3, [pc, #92]	; (4033a0 <pio_handler_set_priority+0x68>)
  403342:	4798      	blx	r3
  403344:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  403346:	f04f 31ff 	mov.w	r1, #4294967295
  40334a:	4630      	mov	r0, r6
  40334c:	4b15      	ldr	r3, [pc, #84]	; (4033a4 <pio_handler_set_priority+0x6c>)
  40334e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  403350:	4630      	mov	r0, r6
  403352:	4b15      	ldr	r3, [pc, #84]	; (4033a8 <pio_handler_set_priority+0x70>)
  403354:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403356:	fa5f fe85 	uxtb.w	lr, r5
  40335a:	f00e 031f 	and.w	r3, lr, #31
  40335e:	2201      	movs	r2, #1
  403360:	fa02 f303 	lsl.w	r3, r2, r3
  403364:	0968      	lsrs	r0, r5, #5
  403366:	4911      	ldr	r1, [pc, #68]	; (4033ac <pio_handler_set_priority+0x74>)
  403368:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  40336c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403370:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  403374:	2d00      	cmp	r5, #0
  403376:	db0a      	blt.n	40338e <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403378:	0164      	lsls	r4, r4, #5
  40337a:	b2e4      	uxtb	r4, r4
  40337c:	4a0c      	ldr	r2, [pc, #48]	; (4033b0 <pio_handler_set_priority+0x78>)
  40337e:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403380:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  403384:	4639      	mov	r1, r7
  403386:	4630      	mov	r0, r6
  403388:	4b0a      	ldr	r3, [pc, #40]	; (4033b4 <pio_handler_set_priority+0x7c>)
  40338a:	4798      	blx	r3
  40338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40338e:	f00e 0e0f 	and.w	lr, lr, #15
  403392:	0164      	lsls	r4, r4, #5
  403394:	b2e4      	uxtb	r4, r4
  403396:	4a08      	ldr	r2, [pc, #32]	; (4033b8 <pio_handler_set_priority+0x80>)
  403398:	f802 400e 	strb.w	r4, [r2, lr]
  40339c:	e7f0      	b.n	403380 <pio_handler_set_priority+0x48>
  40339e:	bf00      	nop
  4033a0:	004030df 	.word	0x004030df
  4033a4:	004030d7 	.word	0x004030d7
  4033a8:	004030db 	.word	0x004030db
  4033ac:	e000e100 	.word	0xe000e100
  4033b0:	e000e400 	.word	0xe000e400
  4033b4:	004030d3 	.word	0x004030d3
  4033b8:	e000ed14 	.word	0xe000ed14

004033bc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4033bc:	2803      	cmp	r0, #3
  4033be:	d011      	beq.n	4033e4 <pmc_mck_set_division+0x28>
  4033c0:	2804      	cmp	r0, #4
  4033c2:	d012      	beq.n	4033ea <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4033c4:	2802      	cmp	r0, #2
  4033c6:	bf0c      	ite	eq
  4033c8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4033cc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4033ce:	4a08      	ldr	r2, [pc, #32]	; (4033f0 <pmc_mck_set_division+0x34>)
  4033d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4033d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4033d6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4033d8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4033da:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4033dc:	f013 0f08 	tst.w	r3, #8
  4033e0:	d0fb      	beq.n	4033da <pmc_mck_set_division+0x1e>
}
  4033e2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4033e4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4033e8:	e7f1      	b.n	4033ce <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4033ea:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4033ee:	e7ee      	b.n	4033ce <pmc_mck_set_division+0x12>
  4033f0:	400e0600 	.word	0x400e0600

004033f4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4033f4:	4a17      	ldr	r2, [pc, #92]	; (403454 <pmc_switch_mck_to_pllack+0x60>)
  4033f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4033fc:	4318      	orrs	r0, r3
  4033fe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403400:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403402:	f013 0f08 	tst.w	r3, #8
  403406:	d10a      	bne.n	40341e <pmc_switch_mck_to_pllack+0x2a>
  403408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40340c:	4911      	ldr	r1, [pc, #68]	; (403454 <pmc_switch_mck_to_pllack+0x60>)
  40340e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403410:	f012 0f08 	tst.w	r2, #8
  403414:	d103      	bne.n	40341e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403416:	3b01      	subs	r3, #1
  403418:	d1f9      	bne.n	40340e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40341a:	2001      	movs	r0, #1
  40341c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40341e:	4a0d      	ldr	r2, [pc, #52]	; (403454 <pmc_switch_mck_to_pllack+0x60>)
  403420:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403422:	f023 0303 	bic.w	r3, r3, #3
  403426:	f043 0302 	orr.w	r3, r3, #2
  40342a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40342c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40342e:	f013 0f08 	tst.w	r3, #8
  403432:	d10a      	bne.n	40344a <pmc_switch_mck_to_pllack+0x56>
  403434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403438:	4906      	ldr	r1, [pc, #24]	; (403454 <pmc_switch_mck_to_pllack+0x60>)
  40343a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40343c:	f012 0f08 	tst.w	r2, #8
  403440:	d105      	bne.n	40344e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403442:	3b01      	subs	r3, #1
  403444:	d1f9      	bne.n	40343a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  403446:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403448:	4770      	bx	lr
	return 0;
  40344a:	2000      	movs	r0, #0
  40344c:	4770      	bx	lr
  40344e:	2000      	movs	r0, #0
  403450:	4770      	bx	lr
  403452:	bf00      	nop
  403454:	400e0600 	.word	0x400e0600

00403458 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403458:	b9a0      	cbnz	r0, 403484 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40345a:	480e      	ldr	r0, [pc, #56]	; (403494 <pmc_switch_mainck_to_xtal+0x3c>)
  40345c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40345e:	0209      	lsls	r1, r1, #8
  403460:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403462:	4a0d      	ldr	r2, [pc, #52]	; (403498 <pmc_switch_mainck_to_xtal+0x40>)
  403464:	401a      	ands	r2, r3
  403466:	4b0d      	ldr	r3, [pc, #52]	; (40349c <pmc_switch_mainck_to_xtal+0x44>)
  403468:	4313      	orrs	r3, r2
  40346a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40346c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40346e:	4602      	mov	r2, r0
  403470:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403472:	f013 0f01 	tst.w	r3, #1
  403476:	d0fb      	beq.n	403470 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403478:	4a06      	ldr	r2, [pc, #24]	; (403494 <pmc_switch_mainck_to_xtal+0x3c>)
  40347a:	6a11      	ldr	r1, [r2, #32]
  40347c:	4b08      	ldr	r3, [pc, #32]	; (4034a0 <pmc_switch_mainck_to_xtal+0x48>)
  40347e:	430b      	orrs	r3, r1
  403480:	6213      	str	r3, [r2, #32]
  403482:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403484:	4903      	ldr	r1, [pc, #12]	; (403494 <pmc_switch_mainck_to_xtal+0x3c>)
  403486:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403488:	4a06      	ldr	r2, [pc, #24]	; (4034a4 <pmc_switch_mainck_to_xtal+0x4c>)
  40348a:	401a      	ands	r2, r3
  40348c:	4b06      	ldr	r3, [pc, #24]	; (4034a8 <pmc_switch_mainck_to_xtal+0x50>)
  40348e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403490:	620b      	str	r3, [r1, #32]
  403492:	4770      	bx	lr
  403494:	400e0600 	.word	0x400e0600
  403498:	ffc8fffc 	.word	0xffc8fffc
  40349c:	00370001 	.word	0x00370001
  4034a0:	01370000 	.word	0x01370000
  4034a4:	fec8fffc 	.word	0xfec8fffc
  4034a8:	01370002 	.word	0x01370002

004034ac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4034ac:	4b02      	ldr	r3, [pc, #8]	; (4034b8 <pmc_osc_is_ready_mainck+0xc>)
  4034ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4034b0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4034b4:	4770      	bx	lr
  4034b6:	bf00      	nop
  4034b8:	400e0600 	.word	0x400e0600

004034bc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4034bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4034c0:	4b01      	ldr	r3, [pc, #4]	; (4034c8 <pmc_disable_pllack+0xc>)
  4034c2:	629a      	str	r2, [r3, #40]	; 0x28
  4034c4:	4770      	bx	lr
  4034c6:	bf00      	nop
  4034c8:	400e0600 	.word	0x400e0600

004034cc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4034cc:	4b02      	ldr	r3, [pc, #8]	; (4034d8 <pmc_is_locked_pllack+0xc>)
  4034ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4034d0:	f000 0002 	and.w	r0, r0, #2
  4034d4:	4770      	bx	lr
  4034d6:	bf00      	nop
  4034d8:	400e0600 	.word	0x400e0600

004034dc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4034dc:	283f      	cmp	r0, #63	; 0x3f
  4034de:	d81e      	bhi.n	40351e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4034e0:	281f      	cmp	r0, #31
  4034e2:	d80c      	bhi.n	4034fe <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4034e4:	4b11      	ldr	r3, [pc, #68]	; (40352c <pmc_enable_periph_clk+0x50>)
  4034e6:	699a      	ldr	r2, [r3, #24]
  4034e8:	2301      	movs	r3, #1
  4034ea:	4083      	lsls	r3, r0
  4034ec:	4393      	bics	r3, r2
  4034ee:	d018      	beq.n	403522 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4034f0:	2301      	movs	r3, #1
  4034f2:	fa03 f000 	lsl.w	r0, r3, r0
  4034f6:	4b0d      	ldr	r3, [pc, #52]	; (40352c <pmc_enable_periph_clk+0x50>)
  4034f8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4034fa:	2000      	movs	r0, #0
  4034fc:	4770      	bx	lr
		ul_id -= 32;
  4034fe:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403500:	4b0a      	ldr	r3, [pc, #40]	; (40352c <pmc_enable_periph_clk+0x50>)
  403502:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403506:	2301      	movs	r3, #1
  403508:	4083      	lsls	r3, r0
  40350a:	4393      	bics	r3, r2
  40350c:	d00b      	beq.n	403526 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40350e:	2301      	movs	r3, #1
  403510:	fa03 f000 	lsl.w	r0, r3, r0
  403514:	4b05      	ldr	r3, [pc, #20]	; (40352c <pmc_enable_periph_clk+0x50>)
  403516:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40351a:	2000      	movs	r0, #0
  40351c:	4770      	bx	lr
		return 1;
  40351e:	2001      	movs	r0, #1
  403520:	4770      	bx	lr
	return 0;
  403522:	2000      	movs	r0, #0
  403524:	4770      	bx	lr
  403526:	2000      	movs	r0, #0
}
  403528:	4770      	bx	lr
  40352a:	bf00      	nop
  40352c:	400e0600 	.word	0x400e0600

00403530 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403530:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  403532:	4b07      	ldr	r3, [pc, #28]	; (403550 <spi_enable_clock+0x20>)
  403534:	4298      	cmp	r0, r3
  403536:	d003      	beq.n	403540 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  403538:	4b06      	ldr	r3, [pc, #24]	; (403554 <spi_enable_clock+0x24>)
  40353a:	4298      	cmp	r0, r3
  40353c:	d004      	beq.n	403548 <spi_enable_clock+0x18>
  40353e:	bd08      	pop	{r3, pc}
  403540:	2015      	movs	r0, #21
  403542:	4b05      	ldr	r3, [pc, #20]	; (403558 <spi_enable_clock+0x28>)
  403544:	4798      	blx	r3
  403546:	bd08      	pop	{r3, pc}
  403548:	202a      	movs	r0, #42	; 0x2a
  40354a:	4b03      	ldr	r3, [pc, #12]	; (403558 <spi_enable_clock+0x28>)
  40354c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40354e:	e7f6      	b.n	40353e <spi_enable_clock+0xe>
  403550:	40008000 	.word	0x40008000
  403554:	40058000 	.word	0x40058000
  403558:	004034dd 	.word	0x004034dd

0040355c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40355c:	6843      	ldr	r3, [r0, #4]
  40355e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  403562:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  403564:	6843      	ldr	r3, [r0, #4]
  403566:	0409      	lsls	r1, r1, #16
  403568:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40356c:	4319      	orrs	r1, r3
  40356e:	6041      	str	r1, [r0, #4]
  403570:	4770      	bx	lr

00403572 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  403572:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  403574:	f643 2399 	movw	r3, #15001	; 0x3a99
  403578:	6904      	ldr	r4, [r0, #16]
  40357a:	f014 0f01 	tst.w	r4, #1
  40357e:	d103      	bne.n	403588 <spi_read+0x16>
		if (!timeout--) {
  403580:	3b01      	subs	r3, #1
  403582:	d1f9      	bne.n	403578 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  403584:	2001      	movs	r0, #1
  403586:	e009      	b.n	40359c <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  403588:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40358a:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  40358c:	f010 0f02 	tst.w	r0, #2
  403590:	d002      	beq.n	403598 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  403592:	f3c3 4003 	ubfx	r0, r3, #16, #4
  403596:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  403598:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40359a:	2000      	movs	r0, #0
}
  40359c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4035a0:	4770      	bx	lr

004035a2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4035a2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4035a4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4035a8:	6905      	ldr	r5, [r0, #16]
  4035aa:	f015 0f02 	tst.w	r5, #2
  4035ae:	d103      	bne.n	4035b8 <spi_write+0x16>
		if (!timeout--) {
  4035b0:	3c01      	subs	r4, #1
  4035b2:	d1f9      	bne.n	4035a8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4035b4:	2001      	movs	r0, #1
  4035b6:	e00c      	b.n	4035d2 <spi_write+0x30>
  4035b8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4035ba:	f014 0f02 	tst.w	r4, #2
  4035be:	d006      	beq.n	4035ce <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4035c0:	0412      	lsls	r2, r2, #16
  4035c2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4035c6:	4311      	orrs	r1, r2
		if (uc_last) {
  4035c8:	b10b      	cbz	r3, 4035ce <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4035ca:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4035ce:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4035d0:	2000      	movs	r0, #0
}
  4035d2:	bc30      	pop	{r4, r5}
  4035d4:	4770      	bx	lr

004035d6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4035d6:	b932      	cbnz	r2, 4035e6 <spi_set_clock_polarity+0x10>
  4035d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4035dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035de:	f023 0301 	bic.w	r3, r3, #1
  4035e2:	6303      	str	r3, [r0, #48]	; 0x30
  4035e4:	4770      	bx	lr
  4035e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4035ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035ec:	f043 0301 	orr.w	r3, r3, #1
  4035f0:	6303      	str	r3, [r0, #48]	; 0x30
  4035f2:	4770      	bx	lr

004035f4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4035f4:	b932      	cbnz	r2, 403604 <spi_set_clock_phase+0x10>
  4035f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4035fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4035fc:	f023 0302 	bic.w	r3, r3, #2
  403600:	6303      	str	r3, [r0, #48]	; 0x30
  403602:	4770      	bx	lr
  403604:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  403608:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40360a:	f043 0302 	orr.w	r3, r3, #2
  40360e:	6303      	str	r3, [r0, #48]	; 0x30
  403610:	4770      	bx	lr

00403612 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403612:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403616:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40361c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40361e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403620:	431a      	orrs	r2, r3
  403622:	630a      	str	r2, [r1, #48]	; 0x30
  403624:	4770      	bx	lr

00403626 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403626:	1e43      	subs	r3, r0, #1
  403628:	4419      	add	r1, r3
  40362a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40362e:	1e43      	subs	r3, r0, #1
  403630:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  403632:	bf94      	ite	ls
  403634:	b200      	sxthls	r0, r0
		return -1;
  403636:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40363a:	4770      	bx	lr

0040363c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40363c:	b17a      	cbz	r2, 40365e <spi_set_baudrate_div+0x22>
{
  40363e:	b410      	push	{r4}
  403640:	4614      	mov	r4, r2
  403642:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  403646:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403648:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40364c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40364e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  403650:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403654:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  403656:	2000      	movs	r0, #0
}
  403658:	f85d 4b04 	ldr.w	r4, [sp], #4
  40365c:	4770      	bx	lr
        return -1;
  40365e:	f04f 30ff 	mov.w	r0, #4294967295
  403662:	4770      	bx	lr

00403664 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  403664:	b410      	push	{r4}
  403666:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40366a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40366c:	b280      	uxth	r0, r0
  40366e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  403670:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  403672:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  403676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40367a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  40367c:	f85d 4b04 	ldr.w	r4, [sp], #4
  403680:	4770      	bx	lr

00403682 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  403682:	6943      	ldr	r3, [r0, #20]
  403684:	f013 0f02 	tst.w	r3, #2
  403688:	d002      	beq.n	403690 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40368a:	61c1      	str	r1, [r0, #28]
	return 0;
  40368c:	2000      	movs	r0, #0
  40368e:	4770      	bx	lr
		return 1;
  403690:	2001      	movs	r0, #1
}
  403692:	4770      	bx	lr

00403694 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  403694:	6943      	ldr	r3, [r0, #20]
  403696:	f013 0f01 	tst.w	r3, #1
  40369a:	d003      	beq.n	4036a4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40369c:	6983      	ldr	r3, [r0, #24]
  40369e:	700b      	strb	r3, [r1, #0]
	return 0;
  4036a0:	2000      	movs	r0, #0
  4036a2:	4770      	bx	lr
		return 1;
  4036a4:	2001      	movs	r0, #1
}
  4036a6:	4770      	bx	lr

004036a8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4036a8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4036aa:	010b      	lsls	r3, r1, #4
  4036ac:	4293      	cmp	r3, r2
  4036ae:	d914      	bls.n	4036da <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4036b0:	00c9      	lsls	r1, r1, #3
  4036b2:	084b      	lsrs	r3, r1, #1
  4036b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4036b8:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4036bc:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4036be:	1e5c      	subs	r4, r3, #1
  4036c0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4036c4:	428c      	cmp	r4, r1
  4036c6:	d901      	bls.n	4036cc <usart_set_async_baudrate+0x24>
		return 1;
  4036c8:	2001      	movs	r0, #1
  4036ca:	e017      	b.n	4036fc <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4036cc:	6841      	ldr	r1, [r0, #4]
  4036ce:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4036d2:	6041      	str	r1, [r0, #4]
  4036d4:	e00c      	b.n	4036f0 <usart_set_async_baudrate+0x48>
		return 1;
  4036d6:	2001      	movs	r0, #1
  4036d8:	e010      	b.n	4036fc <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4036da:	0859      	lsrs	r1, r3, #1
  4036dc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4036e0:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4036e4:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4036e6:	1e5c      	subs	r4, r3, #1
  4036e8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4036ec:	428c      	cmp	r4, r1
  4036ee:	d8f2      	bhi.n	4036d6 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4036f0:	0412      	lsls	r2, r2, #16
  4036f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4036f6:	431a      	orrs	r2, r3
  4036f8:	6202      	str	r2, [r0, #32]

	return 0;
  4036fa:	2000      	movs	r0, #0
}
  4036fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  403700:	4770      	bx	lr
	...

00403704 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403704:	4b08      	ldr	r3, [pc, #32]	; (403728 <usart_reset+0x24>)
  403706:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40370a:	2300      	movs	r3, #0
  40370c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40370e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403710:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403712:	2388      	movs	r3, #136	; 0x88
  403714:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403716:	2324      	movs	r3, #36	; 0x24
  403718:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40371a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40371e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  403720:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403724:	6003      	str	r3, [r0, #0]
  403726:	4770      	bx	lr
  403728:	55534100 	.word	0x55534100

0040372c <usart_init_rs232>:
{
  40372c:	b570      	push	{r4, r5, r6, lr}
  40372e:	4605      	mov	r5, r0
  403730:	460c      	mov	r4, r1
  403732:	4616      	mov	r6, r2
	usart_reset(p_usart);
  403734:	4b0f      	ldr	r3, [pc, #60]	; (403774 <usart_init_rs232+0x48>)
  403736:	4798      	blx	r3
	ul_reg_val = 0;
  403738:	2200      	movs	r2, #0
  40373a:	4b0f      	ldr	r3, [pc, #60]	; (403778 <usart_init_rs232+0x4c>)
  40373c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40373e:	b1a4      	cbz	r4, 40376a <usart_init_rs232+0x3e>
  403740:	4632      	mov	r2, r6
  403742:	6821      	ldr	r1, [r4, #0]
  403744:	4628      	mov	r0, r5
  403746:	4b0d      	ldr	r3, [pc, #52]	; (40377c <usart_init_rs232+0x50>)
  403748:	4798      	blx	r3
  40374a:	4602      	mov	r2, r0
  40374c:	b978      	cbnz	r0, 40376e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40374e:	6863      	ldr	r3, [r4, #4]
  403750:	68a1      	ldr	r1, [r4, #8]
  403752:	430b      	orrs	r3, r1
  403754:	6921      	ldr	r1, [r4, #16]
  403756:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403758:	68e1      	ldr	r1, [r4, #12]
  40375a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40375c:	4906      	ldr	r1, [pc, #24]	; (403778 <usart_init_rs232+0x4c>)
  40375e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  403760:	6869      	ldr	r1, [r5, #4]
  403762:	430b      	orrs	r3, r1
  403764:	606b      	str	r3, [r5, #4]
}
  403766:	4610      	mov	r0, r2
  403768:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40376a:	2201      	movs	r2, #1
  40376c:	e7fb      	b.n	403766 <usart_init_rs232+0x3a>
  40376e:	2201      	movs	r2, #1
  403770:	e7f9      	b.n	403766 <usart_init_rs232+0x3a>
  403772:	bf00      	nop
  403774:	00403705 	.word	0x00403705
  403778:	20400a90 	.word	0x20400a90
  40377c:	004036a9 	.word	0x004036a9

00403780 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  403780:	2340      	movs	r3, #64	; 0x40
  403782:	6003      	str	r3, [r0, #0]
  403784:	4770      	bx	lr

00403786 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  403786:	2310      	movs	r3, #16
  403788:	6003      	str	r3, [r0, #0]
  40378a:	4770      	bx	lr

0040378c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40378c:	6943      	ldr	r3, [r0, #20]
  40378e:	f013 0f02 	tst.w	r3, #2
  403792:	d004      	beq.n	40379e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  403794:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403798:	61c1      	str	r1, [r0, #28]
	return 0;
  40379a:	2000      	movs	r0, #0
  40379c:	4770      	bx	lr
		return 1;
  40379e:	2001      	movs	r0, #1
}
  4037a0:	4770      	bx	lr

004037a2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4037a2:	6943      	ldr	r3, [r0, #20]
  4037a4:	f013 0f01 	tst.w	r3, #1
  4037a8:	d005      	beq.n	4037b6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4037aa:	6983      	ldr	r3, [r0, #24]
  4037ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4037b0:	600b      	str	r3, [r1, #0]
	return 0;
  4037b2:	2000      	movs	r0, #0
  4037b4:	4770      	bx	lr
		return 1;
  4037b6:	2001      	movs	r0, #1
}
  4037b8:	4770      	bx	lr

004037ba <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4037ba:	e7fe      	b.n	4037ba <Dummy_Handler>

004037bc <Reset_Handler>:
{
  4037bc:	b500      	push	{lr}
  4037be:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4037c0:	4b25      	ldr	r3, [pc, #148]	; (403858 <Reset_Handler+0x9c>)
  4037c2:	4a26      	ldr	r2, [pc, #152]	; (40385c <Reset_Handler+0xa0>)
  4037c4:	429a      	cmp	r2, r3
  4037c6:	d010      	beq.n	4037ea <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4037c8:	4b25      	ldr	r3, [pc, #148]	; (403860 <Reset_Handler+0xa4>)
  4037ca:	4a23      	ldr	r2, [pc, #140]	; (403858 <Reset_Handler+0x9c>)
  4037cc:	429a      	cmp	r2, r3
  4037ce:	d20c      	bcs.n	4037ea <Reset_Handler+0x2e>
  4037d0:	3b01      	subs	r3, #1
  4037d2:	1a9b      	subs	r3, r3, r2
  4037d4:	f023 0303 	bic.w	r3, r3, #3
  4037d8:	3304      	adds	r3, #4
  4037da:	4413      	add	r3, r2
  4037dc:	491f      	ldr	r1, [pc, #124]	; (40385c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4037de:	f851 0b04 	ldr.w	r0, [r1], #4
  4037e2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4037e6:	429a      	cmp	r2, r3
  4037e8:	d1f9      	bne.n	4037de <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4037ea:	4b1e      	ldr	r3, [pc, #120]	; (403864 <Reset_Handler+0xa8>)
  4037ec:	4a1e      	ldr	r2, [pc, #120]	; (403868 <Reset_Handler+0xac>)
  4037ee:	429a      	cmp	r2, r3
  4037f0:	d20a      	bcs.n	403808 <Reset_Handler+0x4c>
  4037f2:	3b01      	subs	r3, #1
  4037f4:	1a9b      	subs	r3, r3, r2
  4037f6:	f023 0303 	bic.w	r3, r3, #3
  4037fa:	3304      	adds	r3, #4
  4037fc:	4413      	add	r3, r2
                *pDest++ = 0;
  4037fe:	2100      	movs	r1, #0
  403800:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  403804:	4293      	cmp	r3, r2
  403806:	d1fb      	bne.n	403800 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403808:	4a18      	ldr	r2, [pc, #96]	; (40386c <Reset_Handler+0xb0>)
  40380a:	4b19      	ldr	r3, [pc, #100]	; (403870 <Reset_Handler+0xb4>)
  40380c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403810:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403812:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403816:	fab3 f383 	clz	r3, r3
  40381a:	095b      	lsrs	r3, r3, #5
  40381c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40381e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403820:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403824:	2200      	movs	r2, #0
  403826:	4b13      	ldr	r3, [pc, #76]	; (403874 <Reset_Handler+0xb8>)
  403828:	701a      	strb	r2, [r3, #0]
	return flags;
  40382a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40382c:	4a12      	ldr	r2, [pc, #72]	; (403878 <Reset_Handler+0xbc>)
  40382e:	6813      	ldr	r3, [r2, #0]
  403830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403834:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  403836:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40383a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40383e:	b129      	cbz	r1, 40384c <Reset_Handler+0x90>
		cpu_irq_enable();
  403840:	2201      	movs	r2, #1
  403842:	4b0c      	ldr	r3, [pc, #48]	; (403874 <Reset_Handler+0xb8>)
  403844:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403846:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40384a:	b662      	cpsie	i
        __libc_init_array();
  40384c:	4b0b      	ldr	r3, [pc, #44]	; (40387c <Reset_Handler+0xc0>)
  40384e:	4798      	blx	r3
        main();
  403850:	4b0b      	ldr	r3, [pc, #44]	; (403880 <Reset_Handler+0xc4>)
  403852:	4798      	blx	r3
  403854:	e7fe      	b.n	403854 <Reset_Handler+0x98>
  403856:	bf00      	nop
  403858:	20400000 	.word	0x20400000
  40385c:	00408018 	.word	0x00408018
  403860:	204009d0 	.word	0x204009d0
  403864:	20401144 	.word	0x20401144
  403868:	204009d0 	.word	0x204009d0
  40386c:	e000ed00 	.word	0xe000ed00
  403870:	00400000 	.word	0x00400000
  403874:	20400014 	.word	0x20400014
  403878:	e000ed88 	.word	0xe000ed88
  40387c:	00404069 	.word	0x00404069
  403880:	00403e79 	.word	0x00403e79

00403884 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403884:	4b3b      	ldr	r3, [pc, #236]	; (403974 <SystemCoreClockUpdate+0xf0>)
  403886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403888:	f003 0303 	and.w	r3, r3, #3
  40388c:	2b01      	cmp	r3, #1
  40388e:	d01d      	beq.n	4038cc <SystemCoreClockUpdate+0x48>
  403890:	b183      	cbz	r3, 4038b4 <SystemCoreClockUpdate+0x30>
  403892:	2b02      	cmp	r3, #2
  403894:	d036      	beq.n	403904 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403896:	4b37      	ldr	r3, [pc, #220]	; (403974 <SystemCoreClockUpdate+0xf0>)
  403898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40389a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40389e:	2b70      	cmp	r3, #112	; 0x70
  4038a0:	d05f      	beq.n	403962 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4038a2:	4b34      	ldr	r3, [pc, #208]	; (403974 <SystemCoreClockUpdate+0xf0>)
  4038a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4038a6:	4934      	ldr	r1, [pc, #208]	; (403978 <SystemCoreClockUpdate+0xf4>)
  4038a8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4038ac:	680b      	ldr	r3, [r1, #0]
  4038ae:	40d3      	lsrs	r3, r2
  4038b0:	600b      	str	r3, [r1, #0]
  4038b2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4038b4:	4b31      	ldr	r3, [pc, #196]	; (40397c <SystemCoreClockUpdate+0xf8>)
  4038b6:	695b      	ldr	r3, [r3, #20]
  4038b8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4038bc:	bf14      	ite	ne
  4038be:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4038c2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4038c6:	4b2c      	ldr	r3, [pc, #176]	; (403978 <SystemCoreClockUpdate+0xf4>)
  4038c8:	601a      	str	r2, [r3, #0]
  4038ca:	e7e4      	b.n	403896 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4038cc:	4b29      	ldr	r3, [pc, #164]	; (403974 <SystemCoreClockUpdate+0xf0>)
  4038ce:	6a1b      	ldr	r3, [r3, #32]
  4038d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4038d4:	d003      	beq.n	4038de <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4038d6:	4a2a      	ldr	r2, [pc, #168]	; (403980 <SystemCoreClockUpdate+0xfc>)
  4038d8:	4b27      	ldr	r3, [pc, #156]	; (403978 <SystemCoreClockUpdate+0xf4>)
  4038da:	601a      	str	r2, [r3, #0]
  4038dc:	e7db      	b.n	403896 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4038de:	4a29      	ldr	r2, [pc, #164]	; (403984 <SystemCoreClockUpdate+0x100>)
  4038e0:	4b25      	ldr	r3, [pc, #148]	; (403978 <SystemCoreClockUpdate+0xf4>)
  4038e2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4038e4:	4b23      	ldr	r3, [pc, #140]	; (403974 <SystemCoreClockUpdate+0xf0>)
  4038e6:	6a1b      	ldr	r3, [r3, #32]
  4038e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4038ec:	2b10      	cmp	r3, #16
  4038ee:	d005      	beq.n	4038fc <SystemCoreClockUpdate+0x78>
  4038f0:	2b20      	cmp	r3, #32
  4038f2:	d1d0      	bne.n	403896 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4038f4:	4a22      	ldr	r2, [pc, #136]	; (403980 <SystemCoreClockUpdate+0xfc>)
  4038f6:	4b20      	ldr	r3, [pc, #128]	; (403978 <SystemCoreClockUpdate+0xf4>)
  4038f8:	601a      	str	r2, [r3, #0]
          break;
  4038fa:	e7cc      	b.n	403896 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4038fc:	4a22      	ldr	r2, [pc, #136]	; (403988 <SystemCoreClockUpdate+0x104>)
  4038fe:	4b1e      	ldr	r3, [pc, #120]	; (403978 <SystemCoreClockUpdate+0xf4>)
  403900:	601a      	str	r2, [r3, #0]
          break;
  403902:	e7c8      	b.n	403896 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403904:	4b1b      	ldr	r3, [pc, #108]	; (403974 <SystemCoreClockUpdate+0xf0>)
  403906:	6a1b      	ldr	r3, [r3, #32]
  403908:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40390c:	d016      	beq.n	40393c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40390e:	4a1c      	ldr	r2, [pc, #112]	; (403980 <SystemCoreClockUpdate+0xfc>)
  403910:	4b19      	ldr	r3, [pc, #100]	; (403978 <SystemCoreClockUpdate+0xf4>)
  403912:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403914:	4b17      	ldr	r3, [pc, #92]	; (403974 <SystemCoreClockUpdate+0xf0>)
  403916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403918:	f003 0303 	and.w	r3, r3, #3
  40391c:	2b02      	cmp	r3, #2
  40391e:	d1ba      	bne.n	403896 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403920:	4a14      	ldr	r2, [pc, #80]	; (403974 <SystemCoreClockUpdate+0xf0>)
  403922:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403924:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403926:	4814      	ldr	r0, [pc, #80]	; (403978 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403928:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40392c:	6803      	ldr	r3, [r0, #0]
  40392e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403932:	b2d2      	uxtb	r2, r2
  403934:	fbb3 f3f2 	udiv	r3, r3, r2
  403938:	6003      	str	r3, [r0, #0]
  40393a:	e7ac      	b.n	403896 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40393c:	4a11      	ldr	r2, [pc, #68]	; (403984 <SystemCoreClockUpdate+0x100>)
  40393e:	4b0e      	ldr	r3, [pc, #56]	; (403978 <SystemCoreClockUpdate+0xf4>)
  403940:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403942:	4b0c      	ldr	r3, [pc, #48]	; (403974 <SystemCoreClockUpdate+0xf0>)
  403944:	6a1b      	ldr	r3, [r3, #32]
  403946:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40394a:	2b10      	cmp	r3, #16
  40394c:	d005      	beq.n	40395a <SystemCoreClockUpdate+0xd6>
  40394e:	2b20      	cmp	r3, #32
  403950:	d1e0      	bne.n	403914 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  403952:	4a0b      	ldr	r2, [pc, #44]	; (403980 <SystemCoreClockUpdate+0xfc>)
  403954:	4b08      	ldr	r3, [pc, #32]	; (403978 <SystemCoreClockUpdate+0xf4>)
  403956:	601a      	str	r2, [r3, #0]
          break;
  403958:	e7dc      	b.n	403914 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40395a:	4a0b      	ldr	r2, [pc, #44]	; (403988 <SystemCoreClockUpdate+0x104>)
  40395c:	4b06      	ldr	r3, [pc, #24]	; (403978 <SystemCoreClockUpdate+0xf4>)
  40395e:	601a      	str	r2, [r3, #0]
          break;
  403960:	e7d8      	b.n	403914 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  403962:	4a05      	ldr	r2, [pc, #20]	; (403978 <SystemCoreClockUpdate+0xf4>)
  403964:	6813      	ldr	r3, [r2, #0]
  403966:	4909      	ldr	r1, [pc, #36]	; (40398c <SystemCoreClockUpdate+0x108>)
  403968:	fba1 1303 	umull	r1, r3, r1, r3
  40396c:	085b      	lsrs	r3, r3, #1
  40396e:	6013      	str	r3, [r2, #0]
  403970:	4770      	bx	lr
  403972:	bf00      	nop
  403974:	400e0600 	.word	0x400e0600
  403978:	20400018 	.word	0x20400018
  40397c:	400e1810 	.word	0x400e1810
  403980:	00b71b00 	.word	0x00b71b00
  403984:	003d0900 	.word	0x003d0900
  403988:	007a1200 	.word	0x007a1200
  40398c:	aaaaaaab 	.word	0xaaaaaaab

00403990 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403990:	4b12      	ldr	r3, [pc, #72]	; (4039dc <system_init_flash+0x4c>)
  403992:	4298      	cmp	r0, r3
  403994:	d911      	bls.n	4039ba <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403996:	4b12      	ldr	r3, [pc, #72]	; (4039e0 <system_init_flash+0x50>)
  403998:	4298      	cmp	r0, r3
  40399a:	d913      	bls.n	4039c4 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40399c:	4b11      	ldr	r3, [pc, #68]	; (4039e4 <system_init_flash+0x54>)
  40399e:	4298      	cmp	r0, r3
  4039a0:	d914      	bls.n	4039cc <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4039a2:	4b11      	ldr	r3, [pc, #68]	; (4039e8 <system_init_flash+0x58>)
  4039a4:	4298      	cmp	r0, r3
  4039a6:	d915      	bls.n	4039d4 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4039a8:	4b10      	ldr	r3, [pc, #64]	; (4039ec <system_init_flash+0x5c>)
  4039aa:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4039ac:	bf94      	ite	ls
  4039ae:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4039b2:	4a0f      	ldrhi	r2, [pc, #60]	; (4039f0 <system_init_flash+0x60>)
  4039b4:	4b0f      	ldr	r3, [pc, #60]	; (4039f4 <system_init_flash+0x64>)
  4039b6:	601a      	str	r2, [r3, #0]
  4039b8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4039ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4039be:	4b0d      	ldr	r3, [pc, #52]	; (4039f4 <system_init_flash+0x64>)
  4039c0:	601a      	str	r2, [r3, #0]
  4039c2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4039c4:	4a0c      	ldr	r2, [pc, #48]	; (4039f8 <system_init_flash+0x68>)
  4039c6:	4b0b      	ldr	r3, [pc, #44]	; (4039f4 <system_init_flash+0x64>)
  4039c8:	601a      	str	r2, [r3, #0]
  4039ca:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4039cc:	4a0b      	ldr	r2, [pc, #44]	; (4039fc <system_init_flash+0x6c>)
  4039ce:	4b09      	ldr	r3, [pc, #36]	; (4039f4 <system_init_flash+0x64>)
  4039d0:	601a      	str	r2, [r3, #0]
  4039d2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4039d4:	4a0a      	ldr	r2, [pc, #40]	; (403a00 <system_init_flash+0x70>)
  4039d6:	4b07      	ldr	r3, [pc, #28]	; (4039f4 <system_init_flash+0x64>)
  4039d8:	601a      	str	r2, [r3, #0]
  4039da:	4770      	bx	lr
  4039dc:	01312cff 	.word	0x01312cff
  4039e0:	026259ff 	.word	0x026259ff
  4039e4:	039386ff 	.word	0x039386ff
  4039e8:	04c4b3ff 	.word	0x04c4b3ff
  4039ec:	05f5e0ff 	.word	0x05f5e0ff
  4039f0:	04000500 	.word	0x04000500
  4039f4:	400e0c00 	.word	0x400e0c00
  4039f8:	04000100 	.word	0x04000100
  4039fc:	04000200 	.word	0x04000200
  403a00:	04000300 	.word	0x04000300

00403a04 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403a04:	4b0a      	ldr	r3, [pc, #40]	; (403a30 <_sbrk+0x2c>)
  403a06:	681b      	ldr	r3, [r3, #0]
  403a08:	b153      	cbz	r3, 403a20 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403a0a:	4b09      	ldr	r3, [pc, #36]	; (403a30 <_sbrk+0x2c>)
  403a0c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403a0e:	181a      	adds	r2, r3, r0
  403a10:	4908      	ldr	r1, [pc, #32]	; (403a34 <_sbrk+0x30>)
  403a12:	4291      	cmp	r1, r2
  403a14:	db08      	blt.n	403a28 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403a16:	4610      	mov	r0, r2
  403a18:	4a05      	ldr	r2, [pc, #20]	; (403a30 <_sbrk+0x2c>)
  403a1a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403a1c:	4618      	mov	r0, r3
  403a1e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403a20:	4a05      	ldr	r2, [pc, #20]	; (403a38 <_sbrk+0x34>)
  403a22:	4b03      	ldr	r3, [pc, #12]	; (403a30 <_sbrk+0x2c>)
  403a24:	601a      	str	r2, [r3, #0]
  403a26:	e7f0      	b.n	403a0a <_sbrk+0x6>
		return (caddr_t) -1;	
  403a28:	f04f 30ff 	mov.w	r0, #4294967295
}
  403a2c:	4770      	bx	lr
  403a2e:	bf00      	nop
  403a30:	20400a94 	.word	0x20400a94
  403a34:	2045fffc 	.word	0x2045fffc
  403a38:	20403348 	.word	0x20403348

00403a3c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403a3c:	f04f 30ff 	mov.w	r0, #4294967295
  403a40:	4770      	bx	lr

00403a42 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403a46:	604b      	str	r3, [r1, #4]

	return 0;
}
  403a48:	2000      	movs	r0, #0
  403a4a:	4770      	bx	lr

00403a4c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403a4c:	2001      	movs	r0, #1
  403a4e:	4770      	bx	lr

00403a50 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403a50:	2000      	movs	r0, #0
  403a52:	4770      	bx	lr

00403a54 <resolve_cb>:
	return 1;
}


static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  403a54:	b510      	push	{r4, lr}
  403a56:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  403a58:	4b07      	ldr	r3, [pc, #28]	; (403a78 <resolve_cb+0x24>)
  403a5a:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
	(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
	(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  403a5c:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  403a5e:	9301      	str	r3, [sp, #4]
  403a60:	f3c1 4307 	ubfx	r3, r1, #16, #8
  403a64:	9300      	str	r3, [sp, #0]
  403a66:	f3c1 2307 	ubfx	r3, r1, #8, #8
  403a6a:	b2ca      	uxtb	r2, r1
  403a6c:	4601      	mov	r1, r0
  403a6e:	4803      	ldr	r0, [pc, #12]	; (403a7c <resolve_cb+0x28>)
  403a70:	4c03      	ldr	r4, [pc, #12]	; (403a80 <resolve_cb+0x2c>)
  403a72:	47a0      	blx	r4
}
  403a74:	b002      	add	sp, #8
  403a76:	bd10      	pop	{r4, pc}
  403a78:	20401014 	.word	0x20401014
  403a7c:	00407d70 	.word	0x00407d70
  403a80:	004040b9 	.word	0x004040b9

00403a84 <socket_cb>:


static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	
	if (sock == tcp_client_socket) {
  403a84:	4b3b      	ldr	r3, [pc, #236]	; (403b74 <socket_cb+0xf0>)
  403a86:	f993 3000 	ldrsb.w	r3, [r3]
  403a8a:	4283      	cmp	r3, r0
  403a8c:	d000      	beq.n	403a90 <socket_cb+0xc>
  403a8e:	4770      	bx	lr
{
  403a90:	b570      	push	{r4, r5, r6, lr}
  403a92:	4614      	mov	r4, r2

		switch (u8Msg) {
  403a94:	2905      	cmp	r1, #5
  403a96:	d002      	beq.n	403a9e <socket_cb+0x1a>
  403a98:	2906      	cmp	r1, #6
  403a9a:	d047      	beq.n	403b2c <socket_cb+0xa8>
  403a9c:	bd70      	pop	{r4, r5, r6, pc}
			case SOCKET_MSG_CONNECT:
			{
				printf("socket_msg_connect\n");
  403a9e:	4836      	ldr	r0, [pc, #216]	; (403b78 <socket_cb+0xf4>)
  403aa0:	4b36      	ldr	r3, [pc, #216]	; (403b7c <socket_cb+0xf8>)
  403aa2:	4798      	blx	r3
				if (gbTcpConnection) {
  403aa4:	4b36      	ldr	r3, [pc, #216]	; (403b80 <socket_cb+0xfc>)
  403aa6:	781b      	ldrb	r3, [r3, #0]
  403aa8:	2b00      	cmp	r3, #0
  403aaa:	d04e      	beq.n	403b4a <socket_cb+0xc6>
					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  403aac:	4d35      	ldr	r5, [pc, #212]	; (403b84 <socket_cb+0x100>)
  403aae:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403ab2:	2100      	movs	r1, #0
  403ab4:	4628      	mov	r0, r5
  403ab6:	4b34      	ldr	r3, [pc, #208]	; (403b88 <socket_cb+0x104>)
  403ab8:	4798      	blx	r3
					sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  403aba:	4e34      	ldr	r6, [pc, #208]	; (403b8c <socket_cb+0x108>)
  403abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ac0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ac4:	6833      	ldr	r3, [r6, #0]
  403ac6:	702b      	strb	r3, [r5, #0]

					tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
					if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  403ac8:	b314      	cbz	r4, 403b10 <socket_cb+0x8c>
  403aca:	f994 3001 	ldrsb.w	r3, [r4, #1]
  403ace:	2b00      	cmp	r3, #0
  403ad0:	db1e      	blt.n	403b10 <socket_cb+0x8c>
						printf("send \n");
  403ad2:	482f      	ldr	r0, [pc, #188]	; (403b90 <socket_cb+0x10c>)
  403ad4:	4b29      	ldr	r3, [pc, #164]	; (403b7c <socket_cb+0xf8>)
  403ad6:	4798      	blx	r3
						send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  403ad8:	f1a5 0420 	sub.w	r4, r5, #32
  403adc:	4620      	mov	r0, r4
  403ade:	4b2d      	ldr	r3, [pc, #180]	; (403b94 <socket_cb+0x110>)
  403ae0:	4798      	blx	r3
  403ae2:	4d24      	ldr	r5, [pc, #144]	; (403b74 <socket_cb+0xf0>)
  403ae4:	2300      	movs	r3, #0
  403ae6:	b282      	uxth	r2, r0
  403ae8:	4621      	mov	r1, r4
  403aea:	f995 0000 	ldrsb.w	r0, [r5]
  403aee:	4e2a      	ldr	r6, [pc, #168]	; (403b98 <socket_cb+0x114>)
  403af0:	47b0      	blx	r6

						memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  403af2:	f44f 66af 	mov.w	r6, #1400	; 0x578
  403af6:	4632      	mov	r2, r6
  403af8:	2100      	movs	r1, #0
  403afa:	4620      	mov	r0, r4
  403afc:	4b22      	ldr	r3, [pc, #136]	; (403b88 <socket_cb+0x104>)
  403afe:	4798      	blx	r3
						recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403b00:	2300      	movs	r3, #0
  403b02:	4632      	mov	r2, r6
  403b04:	4621      	mov	r1, r4
  403b06:	f995 0000 	ldrsb.w	r0, [r5]
  403b0a:	4c24      	ldr	r4, [pc, #144]	; (403b9c <socket_cb+0x118>)
  403b0c:	47a0      	blx	r4
  403b0e:	bd70      	pop	{r4, r5, r6, pc}
						} else {
						printf("socket_cb: connect error!\r\n");
  403b10:	4823      	ldr	r0, [pc, #140]	; (403ba0 <socket_cb+0x11c>)
  403b12:	4b1a      	ldr	r3, [pc, #104]	; (403b7c <socket_cb+0xf8>)
  403b14:	4798      	blx	r3
						gbTcpConnection = false;
  403b16:	2200      	movs	r2, #0
  403b18:	4b19      	ldr	r3, [pc, #100]	; (403b80 <socket_cb+0xfc>)
  403b1a:	701a      	strb	r2, [r3, #0]
						close(tcp_client_socket);
  403b1c:	4c15      	ldr	r4, [pc, #84]	; (403b74 <socket_cb+0xf0>)
  403b1e:	f994 0000 	ldrsb.w	r0, [r4]
  403b22:	4b20      	ldr	r3, [pc, #128]	; (403ba4 <socket_cb+0x120>)
  403b24:	4798      	blx	r3
						tcp_client_socket = -1;
  403b26:	23ff      	movs	r3, #255	; 0xff
  403b28:	7023      	strb	r3, [r4, #0]
  403b2a:	bd70      	pop	{r4, r5, r6, pc}
			{
				char *pcIndxPtr;
				char *pcEndPtr;

				tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
				if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  403b2c:	b11a      	cbz	r2, 403b36 <socket_cb+0xb2>
  403b2e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  403b32:	2b00      	cmp	r3, #0
  403b34:	dc0a      	bgt.n	403b4c <socket_cb+0xc8>
					printf(pstrRecv->pu8Buffer);

					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
					} else {
					printf("socket_cb: recv error!\r\n");
  403b36:	481c      	ldr	r0, [pc, #112]	; (403ba8 <socket_cb+0x124>)
  403b38:	4b10      	ldr	r3, [pc, #64]	; (403b7c <socket_cb+0xf8>)
  403b3a:	4798      	blx	r3
					close(tcp_client_socket);
  403b3c:	4c0d      	ldr	r4, [pc, #52]	; (403b74 <socket_cb+0xf0>)
  403b3e:	f994 0000 	ldrsb.w	r0, [r4]
  403b42:	4b18      	ldr	r3, [pc, #96]	; (403ba4 <socket_cb+0x120>)
  403b44:	4798      	blx	r3
					tcp_client_socket = -1;
  403b46:	23ff      	movs	r3, #255	; 0xff
  403b48:	7023      	strb	r3, [r4, #0]
  403b4a:	bd70      	pop	{r4, r5, r6, pc}
					printf(pstrRecv->pu8Buffer);
  403b4c:	6810      	ldr	r0, [r2, #0]
  403b4e:	4b0b      	ldr	r3, [pc, #44]	; (403b7c <socket_cb+0xf8>)
  403b50:	4798      	blx	r3
					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  403b52:	4c0c      	ldr	r4, [pc, #48]	; (403b84 <socket_cb+0x100>)
  403b54:	f44f 65af 	mov.w	r5, #1400	; 0x578
  403b58:	462a      	mov	r2, r5
  403b5a:	2100      	movs	r1, #0
  403b5c:	4620      	mov	r0, r4
  403b5e:	4b0a      	ldr	r3, [pc, #40]	; (403b88 <socket_cb+0x104>)
  403b60:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403b62:	2300      	movs	r3, #0
  403b64:	462a      	mov	r2, r5
  403b66:	4621      	mov	r1, r4
  403b68:	4802      	ldr	r0, [pc, #8]	; (403b74 <socket_cb+0xf0>)
  403b6a:	f990 0000 	ldrsb.w	r0, [r0]
  403b6e:	4c0b      	ldr	r4, [pc, #44]	; (403b9c <socket_cb+0x118>)
  403b70:	47a0      	blx	r4
  403b72:	bd70      	pop	{r4, r5, r6, pc}
  403b74:	2040001c 	.word	0x2040001c
  403b78:	00407da0 	.word	0x00407da0
  403b7c:	004040b9 	.word	0x004040b9
  403b80:	20401010 	.word	0x20401010
  403b84:	20400a98 	.word	0x20400a98
  403b88:	004040e1 	.word	0x004040e1
  403b8c:	00407db4 	.word	0x00407db4
  403b90:	00407dd8 	.word	0x00407dd8
  403b94:	00404341 	.word	0x00404341
  403b98:	004029dd 	.word	0x004029dd
  403b9c:	00402a79 	.word	0x00402a79
  403ba0:	00407de0 	.word	0x00407de0
  403ba4:	00402b19 	.word	0x00402b19
  403ba8:	00407dfc 	.word	0x00407dfc

00403bac <wifi_cb>:
* \param[in] pvMsg A pointer to a buffer containing the notification parameters.
*
* \return None.
*/
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  403bac:	b510      	push	{r4, lr}
  403bae:	b082      	sub	sp, #8
	switch (u8MsgType) {
  403bb0:	282c      	cmp	r0, #44	; 0x2c
  403bb2:	d003      	beq.n	403bbc <wifi_cb+0x10>
  403bb4:	2832      	cmp	r0, #50	; 0x32
  403bb6:	d013      	beq.n	403be0 <wifi_cb+0x34>
		default:
		{
			break;
		}
	}
}
  403bb8:	b002      	add	sp, #8
  403bba:	bd10      	pop	{r4, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  403bbc:	780b      	ldrb	r3, [r1, #0]
  403bbe:	2b01      	cmp	r3, #1
  403bc0:	d008      	beq.n	403bd4 <wifi_cb+0x28>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  403bc2:	2b00      	cmp	r3, #0
  403bc4:	d1f8      	bne.n	403bb8 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  403bc6:	480d      	ldr	r0, [pc, #52]	; (403bfc <wifi_cb+0x50>)
  403bc8:	4b0d      	ldr	r3, [pc, #52]	; (403c00 <wifi_cb+0x54>)
  403bca:	4798      	blx	r3
				wifi_connected = 0;
  403bcc:	2200      	movs	r2, #0
  403bce:	4b0d      	ldr	r3, [pc, #52]	; (403c04 <wifi_cb+0x58>)
  403bd0:	701a      	strb	r2, [r3, #0]
  403bd2:	e7f1      	b.n	403bb8 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  403bd4:	480c      	ldr	r0, [pc, #48]	; (403c08 <wifi_cb+0x5c>)
  403bd6:	4b0a      	ldr	r3, [pc, #40]	; (403c00 <wifi_cb+0x54>)
  403bd8:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
  403bda:	4b0c      	ldr	r3, [pc, #48]	; (403c0c <wifi_cb+0x60>)
  403bdc:	4798      	blx	r3
  403bde:	e7eb      	b.n	403bb8 <wifi_cb+0xc>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  403be0:	788b      	ldrb	r3, [r1, #2]
  403be2:	784a      	ldrb	r2, [r1, #1]
  403be4:	7808      	ldrb	r0, [r1, #0]
  403be6:	78c9      	ldrb	r1, [r1, #3]
  403be8:	9100      	str	r1, [sp, #0]
  403bea:	4601      	mov	r1, r0
  403bec:	4808      	ldr	r0, [pc, #32]	; (403c10 <wifi_cb+0x64>)
  403bee:	4c04      	ldr	r4, [pc, #16]	; (403c00 <wifi_cb+0x54>)
  403bf0:	47a0      	blx	r4
			wifi_connected = M2M_WIFI_CONNECTED;
  403bf2:	2201      	movs	r2, #1
  403bf4:	4b03      	ldr	r3, [pc, #12]	; (403c04 <wifi_cb+0x58>)
  403bf6:	701a      	strb	r2, [r3, #0]
}
  403bf8:	e7de      	b.n	403bb8 <wifi_cb+0xc>
  403bfa:	bf00      	nop
  403bfc:	00407e38 	.word	0x00407e38
  403c00:	004040b9 	.word	0x004040b9
  403c04:	20401018 	.word	0x20401018
  403c08:	00407e18 	.word	0x00407e18
  403c0c:	004013d9 	.word	0x004013d9
  403c10:	00407e5c 	.word	0x00407e5c

00403c14 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  403c16:	b083      	sub	sp, #12
  403c18:	4605      	mov	r5, r0
  403c1a:	460c      	mov	r4, r1
	uint32_t val = 0;
  403c1c:	2300      	movs	r3, #0
  403c1e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403c20:	4b2a      	ldr	r3, [pc, #168]	; (403ccc <usart_serial_getchar+0xb8>)
  403c22:	4298      	cmp	r0, r3
  403c24:	d013      	beq.n	403c4e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403c26:	4b2a      	ldr	r3, [pc, #168]	; (403cd0 <usart_serial_getchar+0xbc>)
  403c28:	4298      	cmp	r0, r3
  403c2a:	d018      	beq.n	403c5e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403c2c:	4b29      	ldr	r3, [pc, #164]	; (403cd4 <usart_serial_getchar+0xc0>)
  403c2e:	4298      	cmp	r0, r3
  403c30:	d01d      	beq.n	403c6e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403c32:	4b29      	ldr	r3, [pc, #164]	; (403cd8 <usart_serial_getchar+0xc4>)
  403c34:	429d      	cmp	r5, r3
  403c36:	d022      	beq.n	403c7e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403c38:	4b28      	ldr	r3, [pc, #160]	; (403cdc <usart_serial_getchar+0xc8>)
  403c3a:	429d      	cmp	r5, r3
  403c3c:	d027      	beq.n	403c8e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403c3e:	4b28      	ldr	r3, [pc, #160]	; (403ce0 <usart_serial_getchar+0xcc>)
  403c40:	429d      	cmp	r5, r3
  403c42:	d02e      	beq.n	403ca2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c44:	4b27      	ldr	r3, [pc, #156]	; (403ce4 <usart_serial_getchar+0xd0>)
  403c46:	429d      	cmp	r5, r3
  403c48:	d035      	beq.n	403cb6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c4a:	b003      	add	sp, #12
  403c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403c4e:	461f      	mov	r7, r3
  403c50:	4e25      	ldr	r6, [pc, #148]	; (403ce8 <usart_serial_getchar+0xd4>)
  403c52:	4621      	mov	r1, r4
  403c54:	4638      	mov	r0, r7
  403c56:	47b0      	blx	r6
  403c58:	2800      	cmp	r0, #0
  403c5a:	d1fa      	bne.n	403c52 <usart_serial_getchar+0x3e>
  403c5c:	e7e9      	b.n	403c32 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403c5e:	461f      	mov	r7, r3
  403c60:	4e21      	ldr	r6, [pc, #132]	; (403ce8 <usart_serial_getchar+0xd4>)
  403c62:	4621      	mov	r1, r4
  403c64:	4638      	mov	r0, r7
  403c66:	47b0      	blx	r6
  403c68:	2800      	cmp	r0, #0
  403c6a:	d1fa      	bne.n	403c62 <usart_serial_getchar+0x4e>
  403c6c:	e7e4      	b.n	403c38 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403c6e:	461f      	mov	r7, r3
  403c70:	4e1d      	ldr	r6, [pc, #116]	; (403ce8 <usart_serial_getchar+0xd4>)
  403c72:	4621      	mov	r1, r4
  403c74:	4638      	mov	r0, r7
  403c76:	47b0      	blx	r6
  403c78:	2800      	cmp	r0, #0
  403c7a:	d1fa      	bne.n	403c72 <usart_serial_getchar+0x5e>
  403c7c:	e7df      	b.n	403c3e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403c7e:	461f      	mov	r7, r3
  403c80:	4e19      	ldr	r6, [pc, #100]	; (403ce8 <usart_serial_getchar+0xd4>)
  403c82:	4621      	mov	r1, r4
  403c84:	4638      	mov	r0, r7
  403c86:	47b0      	blx	r6
  403c88:	2800      	cmp	r0, #0
  403c8a:	d1fa      	bne.n	403c82 <usart_serial_getchar+0x6e>
  403c8c:	e7da      	b.n	403c44 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403c8e:	461e      	mov	r6, r3
  403c90:	4d16      	ldr	r5, [pc, #88]	; (403cec <usart_serial_getchar+0xd8>)
  403c92:	a901      	add	r1, sp, #4
  403c94:	4630      	mov	r0, r6
  403c96:	47a8      	blx	r5
  403c98:	2800      	cmp	r0, #0
  403c9a:	d1fa      	bne.n	403c92 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403c9c:	9b01      	ldr	r3, [sp, #4]
  403c9e:	7023      	strb	r3, [r4, #0]
  403ca0:	e7d3      	b.n	403c4a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403ca2:	461e      	mov	r6, r3
  403ca4:	4d11      	ldr	r5, [pc, #68]	; (403cec <usart_serial_getchar+0xd8>)
  403ca6:	a901      	add	r1, sp, #4
  403ca8:	4630      	mov	r0, r6
  403caa:	47a8      	blx	r5
  403cac:	2800      	cmp	r0, #0
  403cae:	d1fa      	bne.n	403ca6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403cb0:	9b01      	ldr	r3, [sp, #4]
  403cb2:	7023      	strb	r3, [r4, #0]
  403cb4:	e7c9      	b.n	403c4a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403cb6:	461e      	mov	r6, r3
  403cb8:	4d0c      	ldr	r5, [pc, #48]	; (403cec <usart_serial_getchar+0xd8>)
  403cba:	a901      	add	r1, sp, #4
  403cbc:	4630      	mov	r0, r6
  403cbe:	47a8      	blx	r5
  403cc0:	2800      	cmp	r0, #0
  403cc2:	d1fa      	bne.n	403cba <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403cc4:	9b01      	ldr	r3, [sp, #4]
  403cc6:	7023      	strb	r3, [r4, #0]
}
  403cc8:	e7bf      	b.n	403c4a <usart_serial_getchar+0x36>
  403cca:	bf00      	nop
  403ccc:	400e0800 	.word	0x400e0800
  403cd0:	400e0a00 	.word	0x400e0a00
  403cd4:	400e1a00 	.word	0x400e1a00
  403cd8:	400e1c00 	.word	0x400e1c00
  403cdc:	40024000 	.word	0x40024000
  403ce0:	40028000 	.word	0x40028000
  403ce4:	4002c000 	.word	0x4002c000
  403ce8:	00403695 	.word	0x00403695
  403cec:	004037a3 	.word	0x004037a3

00403cf0 <usart_serial_putchar>:
{
  403cf0:	b570      	push	{r4, r5, r6, lr}
  403cf2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403cf4:	4b2a      	ldr	r3, [pc, #168]	; (403da0 <usart_serial_putchar+0xb0>)
  403cf6:	4298      	cmp	r0, r3
  403cf8:	d013      	beq.n	403d22 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403cfa:	4b2a      	ldr	r3, [pc, #168]	; (403da4 <usart_serial_putchar+0xb4>)
  403cfc:	4298      	cmp	r0, r3
  403cfe:	d019      	beq.n	403d34 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403d00:	4b29      	ldr	r3, [pc, #164]	; (403da8 <usart_serial_putchar+0xb8>)
  403d02:	4298      	cmp	r0, r3
  403d04:	d01f      	beq.n	403d46 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403d06:	4b29      	ldr	r3, [pc, #164]	; (403dac <usart_serial_putchar+0xbc>)
  403d08:	4298      	cmp	r0, r3
  403d0a:	d025      	beq.n	403d58 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403d0c:	4b28      	ldr	r3, [pc, #160]	; (403db0 <usart_serial_putchar+0xc0>)
  403d0e:	4298      	cmp	r0, r3
  403d10:	d02b      	beq.n	403d6a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403d12:	4b28      	ldr	r3, [pc, #160]	; (403db4 <usart_serial_putchar+0xc4>)
  403d14:	4298      	cmp	r0, r3
  403d16:	d031      	beq.n	403d7c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403d18:	4b27      	ldr	r3, [pc, #156]	; (403db8 <usart_serial_putchar+0xc8>)
  403d1a:	4298      	cmp	r0, r3
  403d1c:	d037      	beq.n	403d8e <usart_serial_putchar+0x9e>
	return 0;
  403d1e:	2000      	movs	r0, #0
}
  403d20:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d22:	461e      	mov	r6, r3
  403d24:	4d25      	ldr	r5, [pc, #148]	; (403dbc <usart_serial_putchar+0xcc>)
  403d26:	4621      	mov	r1, r4
  403d28:	4630      	mov	r0, r6
  403d2a:	47a8      	blx	r5
  403d2c:	2800      	cmp	r0, #0
  403d2e:	d1fa      	bne.n	403d26 <usart_serial_putchar+0x36>
		return 1;
  403d30:	2001      	movs	r0, #1
  403d32:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d34:	461e      	mov	r6, r3
  403d36:	4d21      	ldr	r5, [pc, #132]	; (403dbc <usart_serial_putchar+0xcc>)
  403d38:	4621      	mov	r1, r4
  403d3a:	4630      	mov	r0, r6
  403d3c:	47a8      	blx	r5
  403d3e:	2800      	cmp	r0, #0
  403d40:	d1fa      	bne.n	403d38 <usart_serial_putchar+0x48>
		return 1;
  403d42:	2001      	movs	r0, #1
  403d44:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d46:	461e      	mov	r6, r3
  403d48:	4d1c      	ldr	r5, [pc, #112]	; (403dbc <usart_serial_putchar+0xcc>)
  403d4a:	4621      	mov	r1, r4
  403d4c:	4630      	mov	r0, r6
  403d4e:	47a8      	blx	r5
  403d50:	2800      	cmp	r0, #0
  403d52:	d1fa      	bne.n	403d4a <usart_serial_putchar+0x5a>
		return 1;
  403d54:	2001      	movs	r0, #1
  403d56:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d58:	461e      	mov	r6, r3
  403d5a:	4d18      	ldr	r5, [pc, #96]	; (403dbc <usart_serial_putchar+0xcc>)
  403d5c:	4621      	mov	r1, r4
  403d5e:	4630      	mov	r0, r6
  403d60:	47a8      	blx	r5
  403d62:	2800      	cmp	r0, #0
  403d64:	d1fa      	bne.n	403d5c <usart_serial_putchar+0x6c>
		return 1;
  403d66:	2001      	movs	r0, #1
  403d68:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d6a:	461e      	mov	r6, r3
  403d6c:	4d14      	ldr	r5, [pc, #80]	; (403dc0 <usart_serial_putchar+0xd0>)
  403d6e:	4621      	mov	r1, r4
  403d70:	4630      	mov	r0, r6
  403d72:	47a8      	blx	r5
  403d74:	2800      	cmp	r0, #0
  403d76:	d1fa      	bne.n	403d6e <usart_serial_putchar+0x7e>
		return 1;
  403d78:	2001      	movs	r0, #1
  403d7a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d7c:	461e      	mov	r6, r3
  403d7e:	4d10      	ldr	r5, [pc, #64]	; (403dc0 <usart_serial_putchar+0xd0>)
  403d80:	4621      	mov	r1, r4
  403d82:	4630      	mov	r0, r6
  403d84:	47a8      	blx	r5
  403d86:	2800      	cmp	r0, #0
  403d88:	d1fa      	bne.n	403d80 <usart_serial_putchar+0x90>
		return 1;
  403d8a:	2001      	movs	r0, #1
  403d8c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d8e:	461e      	mov	r6, r3
  403d90:	4d0b      	ldr	r5, [pc, #44]	; (403dc0 <usart_serial_putchar+0xd0>)
  403d92:	4621      	mov	r1, r4
  403d94:	4630      	mov	r0, r6
  403d96:	47a8      	blx	r5
  403d98:	2800      	cmp	r0, #0
  403d9a:	d1fa      	bne.n	403d92 <usart_serial_putchar+0xa2>
		return 1;
  403d9c:	2001      	movs	r0, #1
  403d9e:	bd70      	pop	{r4, r5, r6, pc}
  403da0:	400e0800 	.word	0x400e0800
  403da4:	400e0a00 	.word	0x400e0a00
  403da8:	400e1a00 	.word	0x400e1a00
  403dac:	400e1c00 	.word	0x400e1c00
  403db0:	40024000 	.word	0x40024000
  403db4:	40028000 	.word	0x40028000
  403db8:	4002c000 	.word	0x4002c000
  403dbc:	00403683 	.word	0x00403683
  403dc0:	0040378d 	.word	0x0040378d

00403dc4 <inet_aton>:
{
  403dc4:	b4f0      	push	{r4, r5, r6, r7}
  403dc6:	3801      	subs	r0, #1
	register u_long acc = 0, addr = 0;
  403dc8:	2400      	movs	r4, #0
  403dca:	4622      	mov	r2, r4
	int dots = 0;
  403dcc:	4625      	mov	r5, r4
			acc = 0;
  403dce:	4626      	mov	r6, r4
  403dd0:	e011      	b.n	403df6 <inet_aton+0x32>
		switch (cc) {
  403dd2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403dd6:	2f09      	cmp	r7, #9
  403dd8:	d814      	bhi.n	403e04 <inet_aton+0x40>
			acc = acc * 10 + (cc - '0');
  403dda:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403dde:	eb07 0242 	add.w	r2, r7, r2, lsl #1
			break;
  403de2:	e007      	b.n	403df4 <inet_aton+0x30>
			if (++dots > 3) {
  403de4:	3501      	adds	r5, #1
  403de6:	2d03      	cmp	r5, #3
  403de8:	dc24      	bgt.n	403e34 <inet_aton+0x70>
			if (acc > 255) {
  403dea:	2aff      	cmp	r2, #255	; 0xff
  403dec:	d824      	bhi.n	403e38 <inet_aton+0x74>
			addr = addr << 8 | acc;
  403dee:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
			acc = 0;
  403df2:	4632      	mov	r2, r6
	} while (*cp++) ;
  403df4:	b14b      	cbz	r3, 403e0a <inet_aton+0x46>
		register char cc = *cp;
  403df6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		switch (cc) {
  403dfa:	2b2e      	cmp	r3, #46	; 0x2e
  403dfc:	d0f2      	beq.n	403de4 <inet_aton+0x20>
  403dfe:	d8e8      	bhi.n	403dd2 <inet_aton+0xe>
  403e00:	2b00      	cmp	r3, #0
  403e02:	d0f2      	beq.n	403dea <inet_aton+0x26>
			return 0;
  403e04:	2000      	movs	r0, #0
}
  403e06:	bcf0      	pop	{r4, r5, r6, r7}
  403e08:	4770      	bx	lr
	if (dots < 3) {
  403e0a:	2d02      	cmp	r5, #2
  403e0c:	dc03      	bgt.n	403e16 <inet_aton+0x52>
		addr <<= 8 * (3 - dots) ;
  403e0e:	f1c5 0303 	rsb	r3, r5, #3
  403e12:	00db      	lsls	r3, r3, #3
  403e14:	409c      	lsls	r4, r3
	if (ap) {
  403e16:	b189      	cbz	r1, 403e3c <inet_aton+0x78>
		ap->s_addr = _htonl(addr);
  403e18:	0e23      	lsrs	r3, r4, #24
  403e1a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  403e1e:	0222      	lsls	r2, r4, #8
  403e20:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  403e24:	431a      	orrs	r2, r3
  403e26:	0a23      	lsrs	r3, r4, #8
  403e28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  403e2c:	4313      	orrs	r3, r2
  403e2e:	600b      	str	r3, [r1, #0]
	return 1;
  403e30:	2001      	movs	r0, #1
  403e32:	e7e8      	b.n	403e06 <inet_aton+0x42>
				return 0;
  403e34:	2000      	movs	r0, #0
  403e36:	e7e6      	b.n	403e06 <inet_aton+0x42>
				return 0;
  403e38:	2000      	movs	r0, #0
  403e3a:	e7e4      	b.n	403e06 <inet_aton+0x42>
	return 1;
  403e3c:	2001      	movs	r0, #1
  403e3e:	e7e2      	b.n	403e06 <inet_aton+0x42>

00403e40 <led_init>:

void led_init(void){
  403e40:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(LED_ID);
  403e42:	200c      	movs	r0, #12
  403e44:	4b08      	ldr	r3, [pc, #32]	; (403e68 <led_init+0x28>)
  403e46:	4798      	blx	r3
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_MASK, PIO_DEFAULT);
  403e48:	4c08      	ldr	r4, [pc, #32]	; (403e6c <led_init+0x2c>)
  403e4a:	2300      	movs	r3, #0
  403e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403e50:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403e54:	4620      	mov	r0, r4
  403e56:	4d06      	ldr	r5, [pc, #24]	; (403e70 <led_init+0x30>)
  403e58:	47a8      	blx	r5
	pio_set(LED_PIO, LED_MASK);
  403e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
  403e5e:	4620      	mov	r0, r4
  403e60:	4b04      	ldr	r3, [pc, #16]	; (403e74 <led_init+0x34>)
  403e62:	4798      	blx	r3
  403e64:	bd38      	pop	{r3, r4, r5, pc}
  403e66:	bf00      	nop
  403e68:	004034dd 	.word	0x004034dd
  403e6c:	400e1200 	.word	0x400e1200
  403e70:	00403011 	.word	0x00403011
  403e74:	00402f1b 	.word	0x00402f1b

00403e78 <main>:
}

int main(void)
{
  403e78:	b570      	push	{r4, r5, r6, lr}
  403e7a:	b092      	sub	sp, #72	; 0x48
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;

	/* Initialize the board. */
	sysclk_init();
  403e7c:	4b4e      	ldr	r3, [pc, #312]	; (403fb8 <main+0x140>)
  403e7e:	4798      	blx	r3
	board_init();
  403e80:	4b4e      	ldr	r3, [pc, #312]	; (403fbc <main+0x144>)
  403e82:	4798      	blx	r3
	led_init();
  403e84:	4b4e      	ldr	r3, [pc, #312]	; (403fc0 <main+0x148>)
  403e86:	4798      	blx	r3
  403e88:	200e      	movs	r0, #14
  403e8a:	4e4e      	ldr	r6, [pc, #312]	; (403fc4 <main+0x14c>)
  403e8c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403e8e:	4d4e      	ldr	r5, [pc, #312]	; (403fc8 <main+0x150>)
  403e90:	4b4e      	ldr	r3, [pc, #312]	; (403fcc <main+0x154>)
  403e92:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403e94:	4a4e      	ldr	r2, [pc, #312]	; (403fd0 <main+0x158>)
  403e96:	4b4f      	ldr	r3, [pc, #316]	; (403fd4 <main+0x15c>)
  403e98:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403e9a:	4a4f      	ldr	r2, [pc, #316]	; (403fd8 <main+0x160>)
  403e9c:	4b4f      	ldr	r3, [pc, #316]	; (403fdc <main+0x164>)
  403e9e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403ea0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403ea4:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403ea6:	23c0      	movs	r3, #192	; 0xc0
  403ea8:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403eae:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403eb0:	2400      	movs	r4, #0
  403eb2:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403eb4:	9406      	str	r4, [sp, #24]
  403eb6:	200e      	movs	r0, #14
  403eb8:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  403eba:	4a49      	ldr	r2, [pc, #292]	; (403fe0 <main+0x168>)
  403ebc:	a902      	add	r1, sp, #8
  403ebe:	4628      	mov	r0, r5
  403ec0:	4b48      	ldr	r3, [pc, #288]	; (403fe4 <main+0x16c>)
  403ec2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403ec4:	4628      	mov	r0, r5
  403ec6:	4b48      	ldr	r3, [pc, #288]	; (403fe8 <main+0x170>)
  403ec8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403eca:	4628      	mov	r0, r5
  403ecc:	4b47      	ldr	r3, [pc, #284]	; (403fec <main+0x174>)
  403ece:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403ed0:	4e47      	ldr	r6, [pc, #284]	; (403ff0 <main+0x178>)
  403ed2:	6833      	ldr	r3, [r6, #0]
  403ed4:	4621      	mov	r1, r4
  403ed6:	6898      	ldr	r0, [r3, #8]
  403ed8:	4d46      	ldr	r5, [pc, #280]	; (403ff4 <main+0x17c>)
  403eda:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403edc:	6833      	ldr	r3, [r6, #0]
  403ede:	4621      	mov	r1, r4
  403ee0:	6858      	ldr	r0, [r3, #4]
  403ee2:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  403ee4:	4844      	ldr	r0, [pc, #272]	; (403ff8 <main+0x180>)
  403ee6:	4b45      	ldr	r3, [pc, #276]	; (403ffc <main+0x184>)
  403ee8:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  403eea:	4b45      	ldr	r3, [pc, #276]	; (404000 <main+0x188>)
  403eec:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  403eee:	940d      	str	r4, [sp, #52]	; 0x34
  403ef0:	940e      	str	r4, [sp, #56]	; 0x38
  403ef2:	940f      	str	r4, [sp, #60]	; 0x3c
  403ef4:	9410      	str	r4, [sp, #64]	; 0x40
  403ef6:	9411      	str	r4, [sp, #68]	; 0x44

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  403ef8:	4b42      	ldr	r3, [pc, #264]	; (404004 <main+0x18c>)
  403efa:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
  403efc:	a80c      	add	r0, sp, #48	; 0x30
  403efe:	4b42      	ldr	r3, [pc, #264]	; (404008 <main+0x190>)
  403f00:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403f02:	b120      	cbz	r0, 403f0e <main+0x96>
  403f04:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  403f06:	4841      	ldr	r0, [pc, #260]	; (40400c <main+0x194>)
  403f08:	4b3c      	ldr	r3, [pc, #240]	; (403ffc <main+0x184>)
  403f0a:	4798      	blx	r3
  403f0c:	e7fe      	b.n	403f0c <main+0x94>
		while (1) {
		}
	}

	/* Initialize socket module. */
	socketInit();
  403f0e:	4b40      	ldr	r3, [pc, #256]	; (404010 <main+0x198>)
  403f10:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  403f12:	4940      	ldr	r1, [pc, #256]	; (404014 <main+0x19c>)
  403f14:	4840      	ldr	r0, [pc, #256]	; (404018 <main+0x1a0>)
  403f16:	4b41      	ldr	r3, [pc, #260]	; (40401c <main+0x1a4>)
  403f18:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  403f1a:	4d41      	ldr	r5, [pc, #260]	; (404020 <main+0x1a8>)
  403f1c:	4629      	mov	r1, r5
  403f1e:	4841      	ldr	r0, [pc, #260]	; (404024 <main+0x1ac>)
  403f20:	4c36      	ldr	r4, [pc, #216]	; (403ffc <main+0x184>)
  403f22:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  403f24:	23ff      	movs	r3, #255	; 0xff
  403f26:	9300      	str	r3, [sp, #0]
  403f28:	4b3f      	ldr	r3, [pc, #252]	; (404028 <main+0x1b0>)
  403f2a:	2202      	movs	r2, #2
  403f2c:	2108      	movs	r1, #8
  403f2e:	4628      	mov	r0, r5
  403f30:	4d3e      	ldr	r5, [pc, #248]	; (40402c <main+0x1b4>)
  403f32:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  403f34:	2302      	movs	r3, #2
  403f36:	f8ad 3020 	strh.w	r3, [sp, #32]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  403f3a:	f648 0313 	movw	r3, #34835	; 0x8813
  403f3e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  403f42:	a909      	add	r1, sp, #36	; 0x24
  403f44:	483a      	ldr	r0, [pc, #232]	; (404030 <main+0x1b8>)
  403f46:	4b3b      	ldr	r3, [pc, #236]	; (404034 <main+0x1bc>)
  403f48:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  403f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
  403f4c:	483a      	ldr	r0, [pc, #232]	; (404038 <main+0x1c0>)
  403f4e:	47a0      	blx	r4

	while(1){
		m2m_wifi_handle_events(NULL);
  403f50:	4d3a      	ldr	r5, [pc, #232]	; (40403c <main+0x1c4>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  403f52:	4c3b      	ldr	r4, [pc, #236]	; (404040 <main+0x1c8>)
			/* Open client socket. */
			if (tcp_client_socket < 0) {
  403f54:	4e3b      	ldr	r6, [pc, #236]	; (404044 <main+0x1cc>)
  403f56:	e002      	b.n	403f5e <main+0xe6>
				printf("socket init \n");
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
					printf("main: failed to create TCP client socket error!\r\n");
  403f58:	483b      	ldr	r0, [pc, #236]	; (404048 <main+0x1d0>)
  403f5a:	4b28      	ldr	r3, [pc, #160]	; (403ffc <main+0x184>)
  403f5c:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
  403f5e:	2000      	movs	r0, #0
  403f60:	47a8      	blx	r5
		if (wifi_connected == M2M_WIFI_CONNECTED) {
  403f62:	7823      	ldrb	r3, [r4, #0]
  403f64:	2b01      	cmp	r3, #1
  403f66:	d1fa      	bne.n	403f5e <main+0xe6>
			if (tcp_client_socket < 0) {
  403f68:	f996 3000 	ldrsb.w	r3, [r6]
  403f6c:	2b00      	cmp	r3, #0
  403f6e:	daf6      	bge.n	403f5e <main+0xe6>
				printf("socket init \n");
  403f70:	4836      	ldr	r0, [pc, #216]	; (40404c <main+0x1d4>)
  403f72:	4b22      	ldr	r3, [pc, #136]	; (403ffc <main+0x184>)
  403f74:	4798      	blx	r3
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  403f76:	2200      	movs	r2, #0
  403f78:	2101      	movs	r1, #1
  403f7a:	2002      	movs	r0, #2
  403f7c:	4b34      	ldr	r3, [pc, #208]	; (404050 <main+0x1d8>)
  403f7e:	4798      	blx	r3
  403f80:	7030      	strb	r0, [r6, #0]
  403f82:	2800      	cmp	r0, #0
  403f84:	dbe8      	blt.n	403f58 <main+0xe0>
					continue;
				}

				/* Connect server */
				printf("socket connecting\n");
  403f86:	4833      	ldr	r0, [pc, #204]	; (404054 <main+0x1dc>)
  403f88:	4b1c      	ldr	r3, [pc, #112]	; (403ffc <main+0x184>)
  403f8a:	4798      	blx	r3

				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  403f8c:	2210      	movs	r2, #16
  403f8e:	a908      	add	r1, sp, #32
  403f90:	f996 0000 	ldrsb.w	r0, [r6]
  403f94:	4b30      	ldr	r3, [pc, #192]	; (404058 <main+0x1e0>)
  403f96:	4798      	blx	r3
  403f98:	b918      	cbnz	r0, 403fa2 <main+0x12a>
					close(tcp_client_socket);
					tcp_client_socket = -1;
					printf("error\n");
					}else{
					gbTcpConnection = true;
  403f9a:	2201      	movs	r2, #1
  403f9c:	4b2f      	ldr	r3, [pc, #188]	; (40405c <main+0x1e4>)
  403f9e:	701a      	strb	r2, [r3, #0]
  403fa0:	e7dd      	b.n	403f5e <main+0xe6>
					close(tcp_client_socket);
  403fa2:	f996 0000 	ldrsb.w	r0, [r6]
  403fa6:	4b2e      	ldr	r3, [pc, #184]	; (404060 <main+0x1e8>)
  403fa8:	4798      	blx	r3
					tcp_client_socket = -1;
  403faa:	23ff      	movs	r3, #255	; 0xff
  403fac:	7033      	strb	r3, [r6, #0]
					printf("error\n");
  403fae:	482d      	ldr	r0, [pc, #180]	; (404064 <main+0x1ec>)
  403fb0:	4b12      	ldr	r3, [pc, #72]	; (403ffc <main+0x184>)
  403fb2:	4798      	blx	r3
  403fb4:	e7d3      	b.n	403f5e <main+0xe6>
  403fb6:	bf00      	nop
  403fb8:	00402c7d 	.word	0x00402c7d
  403fbc:	00402d79 	.word	0x00402d79
  403fc0:	00403e41 	.word	0x00403e41
  403fc4:	004034dd 	.word	0x004034dd
  403fc8:	40028000 	.word	0x40028000
  403fcc:	20401118 	.word	0x20401118
  403fd0:	00403cf1 	.word	0x00403cf1
  403fd4:	20401114 	.word	0x20401114
  403fd8:	00403c15 	.word	0x00403c15
  403fdc:	20401110 	.word	0x20401110
  403fe0:	08f0d180 	.word	0x08f0d180
  403fe4:	0040372d 	.word	0x0040372d
  403fe8:	00403781 	.word	0x00403781
  403fec:	00403787 	.word	0x00403787
  403ff0:	20400020 	.word	0x20400020
  403ff4:	0040417d 	.word	0x0040417d
  403ff8:	00407c28 	.word	0x00407c28
  403ffc:	004040b9 	.word	0x004040b9
  404000:	00400225 	.word	0x00400225
  404004:	00403bad 	.word	0x00403bad
  404008:	00401065 	.word	0x00401065
  40400c:	00407c8c 	.word	0x00407c8c
  404010:	00402815 	.word	0x00402815
  404014:	00403a55 	.word	0x00403a55
  404018:	00403a85 	.word	0x00403a85
  40401c:	00402859 	.word	0x00402859
  404020:	00407cb4 	.word	0x00407cb4
  404024:	00407cbc 	.word	0x00407cbc
  404028:	00407ce0 	.word	0x00407ce0
  40402c:	004013bd 	.word	0x004013bd
  404030:	00407cf0 	.word	0x00407cf0
  404034:	00403dc5 	.word	0x00403dc5
  404038:	00407d00 	.word	0x00407d00
  40403c:	00401161 	.word	0x00401161
  404040:	20401018 	.word	0x20401018
  404044:	2040001c 	.word	0x2040001c
  404048:	00407d20 	.word	0x00407d20
  40404c:	00407d10 	.word	0x00407d10
  404050:	0040286d 	.word	0x0040286d
  404054:	00407d54 	.word	0x00407d54
  404058:	0040294d 	.word	0x0040294d
  40405c:	20401010 	.word	0x20401010
  404060:	00402b19 	.word	0x00402b19
  404064:	00407d68 	.word	0x00407d68

00404068 <__libc_init_array>:
  404068:	b570      	push	{r4, r5, r6, lr}
  40406a:	4e0f      	ldr	r6, [pc, #60]	; (4040a8 <__libc_init_array+0x40>)
  40406c:	4d0f      	ldr	r5, [pc, #60]	; (4040ac <__libc_init_array+0x44>)
  40406e:	1b76      	subs	r6, r6, r5
  404070:	10b6      	asrs	r6, r6, #2
  404072:	bf18      	it	ne
  404074:	2400      	movne	r4, #0
  404076:	d005      	beq.n	404084 <__libc_init_array+0x1c>
  404078:	3401      	adds	r4, #1
  40407a:	f855 3b04 	ldr.w	r3, [r5], #4
  40407e:	4798      	blx	r3
  404080:	42a6      	cmp	r6, r4
  404082:	d1f9      	bne.n	404078 <__libc_init_array+0x10>
  404084:	4e0a      	ldr	r6, [pc, #40]	; (4040b0 <__libc_init_array+0x48>)
  404086:	4d0b      	ldr	r5, [pc, #44]	; (4040b4 <__libc_init_array+0x4c>)
  404088:	1b76      	subs	r6, r6, r5
  40408a:	f003 ffaf 	bl	407fec <_init>
  40408e:	10b6      	asrs	r6, r6, #2
  404090:	bf18      	it	ne
  404092:	2400      	movne	r4, #0
  404094:	d006      	beq.n	4040a4 <__libc_init_array+0x3c>
  404096:	3401      	adds	r4, #1
  404098:	f855 3b04 	ldr.w	r3, [r5], #4
  40409c:	4798      	blx	r3
  40409e:	42a6      	cmp	r6, r4
  4040a0:	d1f9      	bne.n	404096 <__libc_init_array+0x2e>
  4040a2:	bd70      	pop	{r4, r5, r6, pc}
  4040a4:	bd70      	pop	{r4, r5, r6, pc}
  4040a6:	bf00      	nop
  4040a8:	00407ff8 	.word	0x00407ff8
  4040ac:	00407ff8 	.word	0x00407ff8
  4040b0:	00408000 	.word	0x00408000
  4040b4:	00407ff8 	.word	0x00407ff8

004040b8 <iprintf>:
  4040b8:	b40f      	push	{r0, r1, r2, r3}
  4040ba:	b500      	push	{lr}
  4040bc:	4907      	ldr	r1, [pc, #28]	; (4040dc <iprintf+0x24>)
  4040be:	b083      	sub	sp, #12
  4040c0:	ab04      	add	r3, sp, #16
  4040c2:	6808      	ldr	r0, [r1, #0]
  4040c4:	f853 2b04 	ldr.w	r2, [r3], #4
  4040c8:	6881      	ldr	r1, [r0, #8]
  4040ca:	9301      	str	r3, [sp, #4]
  4040cc:	f000 f9e6 	bl	40449c <_vfiprintf_r>
  4040d0:	b003      	add	sp, #12
  4040d2:	f85d eb04 	ldr.w	lr, [sp], #4
  4040d6:	b004      	add	sp, #16
  4040d8:	4770      	bx	lr
  4040da:	bf00      	nop
  4040dc:	20400020 	.word	0x20400020

004040e0 <memset>:
  4040e0:	b470      	push	{r4, r5, r6}
  4040e2:	0786      	lsls	r6, r0, #30
  4040e4:	d046      	beq.n	404174 <memset+0x94>
  4040e6:	1e54      	subs	r4, r2, #1
  4040e8:	2a00      	cmp	r2, #0
  4040ea:	d041      	beq.n	404170 <memset+0x90>
  4040ec:	b2ca      	uxtb	r2, r1
  4040ee:	4603      	mov	r3, r0
  4040f0:	e002      	b.n	4040f8 <memset+0x18>
  4040f2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4040f6:	d33b      	bcc.n	404170 <memset+0x90>
  4040f8:	f803 2b01 	strb.w	r2, [r3], #1
  4040fc:	079d      	lsls	r5, r3, #30
  4040fe:	d1f8      	bne.n	4040f2 <memset+0x12>
  404100:	2c03      	cmp	r4, #3
  404102:	d92e      	bls.n	404162 <memset+0x82>
  404104:	b2cd      	uxtb	r5, r1
  404106:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40410a:	2c0f      	cmp	r4, #15
  40410c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404110:	d919      	bls.n	404146 <memset+0x66>
  404112:	f103 0210 	add.w	r2, r3, #16
  404116:	4626      	mov	r6, r4
  404118:	3e10      	subs	r6, #16
  40411a:	2e0f      	cmp	r6, #15
  40411c:	f842 5c10 	str.w	r5, [r2, #-16]
  404120:	f842 5c0c 	str.w	r5, [r2, #-12]
  404124:	f842 5c08 	str.w	r5, [r2, #-8]
  404128:	f842 5c04 	str.w	r5, [r2, #-4]
  40412c:	f102 0210 	add.w	r2, r2, #16
  404130:	d8f2      	bhi.n	404118 <memset+0x38>
  404132:	f1a4 0210 	sub.w	r2, r4, #16
  404136:	f022 020f 	bic.w	r2, r2, #15
  40413a:	f004 040f 	and.w	r4, r4, #15
  40413e:	3210      	adds	r2, #16
  404140:	2c03      	cmp	r4, #3
  404142:	4413      	add	r3, r2
  404144:	d90d      	bls.n	404162 <memset+0x82>
  404146:	461e      	mov	r6, r3
  404148:	4622      	mov	r2, r4
  40414a:	3a04      	subs	r2, #4
  40414c:	2a03      	cmp	r2, #3
  40414e:	f846 5b04 	str.w	r5, [r6], #4
  404152:	d8fa      	bhi.n	40414a <memset+0x6a>
  404154:	1f22      	subs	r2, r4, #4
  404156:	f022 0203 	bic.w	r2, r2, #3
  40415a:	3204      	adds	r2, #4
  40415c:	4413      	add	r3, r2
  40415e:	f004 0403 	and.w	r4, r4, #3
  404162:	b12c      	cbz	r4, 404170 <memset+0x90>
  404164:	b2c9      	uxtb	r1, r1
  404166:	441c      	add	r4, r3
  404168:	f803 1b01 	strb.w	r1, [r3], #1
  40416c:	429c      	cmp	r4, r3
  40416e:	d1fb      	bne.n	404168 <memset+0x88>
  404170:	bc70      	pop	{r4, r5, r6}
  404172:	4770      	bx	lr
  404174:	4614      	mov	r4, r2
  404176:	4603      	mov	r3, r0
  404178:	e7c2      	b.n	404100 <memset+0x20>
  40417a:	bf00      	nop

0040417c <setbuf>:
  40417c:	2900      	cmp	r1, #0
  40417e:	bf0c      	ite	eq
  404180:	2202      	moveq	r2, #2
  404182:	2200      	movne	r2, #0
  404184:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404188:	f000 b800 	b.w	40418c <setvbuf>

0040418c <setvbuf>:
  40418c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404190:	4c61      	ldr	r4, [pc, #388]	; (404318 <setvbuf+0x18c>)
  404192:	6825      	ldr	r5, [r4, #0]
  404194:	b083      	sub	sp, #12
  404196:	4604      	mov	r4, r0
  404198:	460f      	mov	r7, r1
  40419a:	4690      	mov	r8, r2
  40419c:	461e      	mov	r6, r3
  40419e:	b115      	cbz	r5, 4041a6 <setvbuf+0x1a>
  4041a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041a2:	2b00      	cmp	r3, #0
  4041a4:	d064      	beq.n	404270 <setvbuf+0xe4>
  4041a6:	f1b8 0f02 	cmp.w	r8, #2
  4041aa:	d006      	beq.n	4041ba <setvbuf+0x2e>
  4041ac:	f1b8 0f01 	cmp.w	r8, #1
  4041b0:	f200 809f 	bhi.w	4042f2 <setvbuf+0x166>
  4041b4:	2e00      	cmp	r6, #0
  4041b6:	f2c0 809c 	blt.w	4042f2 <setvbuf+0x166>
  4041ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4041bc:	07d8      	lsls	r0, r3, #31
  4041be:	d534      	bpl.n	40422a <setvbuf+0x9e>
  4041c0:	4621      	mov	r1, r4
  4041c2:	4628      	mov	r0, r5
  4041c4:	f001 f908 	bl	4053d8 <_fflush_r>
  4041c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041ca:	b141      	cbz	r1, 4041de <setvbuf+0x52>
  4041cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4041d0:	4299      	cmp	r1, r3
  4041d2:	d002      	beq.n	4041da <setvbuf+0x4e>
  4041d4:	4628      	mov	r0, r5
  4041d6:	f001 fa7d 	bl	4056d4 <_free_r>
  4041da:	2300      	movs	r3, #0
  4041dc:	6323      	str	r3, [r4, #48]	; 0x30
  4041de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041e2:	2200      	movs	r2, #0
  4041e4:	61a2      	str	r2, [r4, #24]
  4041e6:	6062      	str	r2, [r4, #4]
  4041e8:	061a      	lsls	r2, r3, #24
  4041ea:	d43a      	bmi.n	404262 <setvbuf+0xd6>
  4041ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4041f0:	f023 0303 	bic.w	r3, r3, #3
  4041f4:	f1b8 0f02 	cmp.w	r8, #2
  4041f8:	81a3      	strh	r3, [r4, #12]
  4041fa:	d01d      	beq.n	404238 <setvbuf+0xac>
  4041fc:	ab01      	add	r3, sp, #4
  4041fe:	466a      	mov	r2, sp
  404200:	4621      	mov	r1, r4
  404202:	4628      	mov	r0, r5
  404204:	f001 fd04 	bl	405c10 <__swhatbuf_r>
  404208:	89a3      	ldrh	r3, [r4, #12]
  40420a:	4318      	orrs	r0, r3
  40420c:	81a0      	strh	r0, [r4, #12]
  40420e:	2e00      	cmp	r6, #0
  404210:	d132      	bne.n	404278 <setvbuf+0xec>
  404212:	9e00      	ldr	r6, [sp, #0]
  404214:	4630      	mov	r0, r6
  404216:	f001 fd73 	bl	405d00 <malloc>
  40421a:	4607      	mov	r7, r0
  40421c:	2800      	cmp	r0, #0
  40421e:	d06b      	beq.n	4042f8 <setvbuf+0x16c>
  404220:	89a3      	ldrh	r3, [r4, #12]
  404222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404226:	81a3      	strh	r3, [r4, #12]
  404228:	e028      	b.n	40427c <setvbuf+0xf0>
  40422a:	89a3      	ldrh	r3, [r4, #12]
  40422c:	0599      	lsls	r1, r3, #22
  40422e:	d4c7      	bmi.n	4041c0 <setvbuf+0x34>
  404230:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404232:	f001 fce9 	bl	405c08 <__retarget_lock_acquire_recursive>
  404236:	e7c3      	b.n	4041c0 <setvbuf+0x34>
  404238:	2500      	movs	r5, #0
  40423a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40423c:	2600      	movs	r6, #0
  40423e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404242:	f043 0302 	orr.w	r3, r3, #2
  404246:	2001      	movs	r0, #1
  404248:	60a6      	str	r6, [r4, #8]
  40424a:	07ce      	lsls	r6, r1, #31
  40424c:	81a3      	strh	r3, [r4, #12]
  40424e:	6022      	str	r2, [r4, #0]
  404250:	6122      	str	r2, [r4, #16]
  404252:	6160      	str	r0, [r4, #20]
  404254:	d401      	bmi.n	40425a <setvbuf+0xce>
  404256:	0598      	lsls	r0, r3, #22
  404258:	d53e      	bpl.n	4042d8 <setvbuf+0x14c>
  40425a:	4628      	mov	r0, r5
  40425c:	b003      	add	sp, #12
  40425e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404262:	6921      	ldr	r1, [r4, #16]
  404264:	4628      	mov	r0, r5
  404266:	f001 fa35 	bl	4056d4 <_free_r>
  40426a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40426e:	e7bd      	b.n	4041ec <setvbuf+0x60>
  404270:	4628      	mov	r0, r5
  404272:	f001 f909 	bl	405488 <__sinit>
  404276:	e796      	b.n	4041a6 <setvbuf+0x1a>
  404278:	2f00      	cmp	r7, #0
  40427a:	d0cb      	beq.n	404214 <setvbuf+0x88>
  40427c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40427e:	2b00      	cmp	r3, #0
  404280:	d033      	beq.n	4042ea <setvbuf+0x15e>
  404282:	9b00      	ldr	r3, [sp, #0]
  404284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404288:	6027      	str	r7, [r4, #0]
  40428a:	429e      	cmp	r6, r3
  40428c:	bf1c      	itt	ne
  40428e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404292:	81a2      	strhne	r2, [r4, #12]
  404294:	f1b8 0f01 	cmp.w	r8, #1
  404298:	bf04      	itt	eq
  40429a:	f042 0201 	orreq.w	r2, r2, #1
  40429e:	81a2      	strheq	r2, [r4, #12]
  4042a0:	b292      	uxth	r2, r2
  4042a2:	f012 0308 	ands.w	r3, r2, #8
  4042a6:	6127      	str	r7, [r4, #16]
  4042a8:	6166      	str	r6, [r4, #20]
  4042aa:	d00e      	beq.n	4042ca <setvbuf+0x13e>
  4042ac:	07d1      	lsls	r1, r2, #31
  4042ae:	d51a      	bpl.n	4042e6 <setvbuf+0x15a>
  4042b0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042b2:	4276      	negs	r6, r6
  4042b4:	2300      	movs	r3, #0
  4042b6:	f015 0501 	ands.w	r5, r5, #1
  4042ba:	61a6      	str	r6, [r4, #24]
  4042bc:	60a3      	str	r3, [r4, #8]
  4042be:	d009      	beq.n	4042d4 <setvbuf+0x148>
  4042c0:	2500      	movs	r5, #0
  4042c2:	4628      	mov	r0, r5
  4042c4:	b003      	add	sp, #12
  4042c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042ca:	60a3      	str	r3, [r4, #8]
  4042cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042ce:	f015 0501 	ands.w	r5, r5, #1
  4042d2:	d1f5      	bne.n	4042c0 <setvbuf+0x134>
  4042d4:	0593      	lsls	r3, r2, #22
  4042d6:	d4c0      	bmi.n	40425a <setvbuf+0xce>
  4042d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4042da:	f001 fc97 	bl	405c0c <__retarget_lock_release_recursive>
  4042de:	4628      	mov	r0, r5
  4042e0:	b003      	add	sp, #12
  4042e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042e6:	60a6      	str	r6, [r4, #8]
  4042e8:	e7f0      	b.n	4042cc <setvbuf+0x140>
  4042ea:	4628      	mov	r0, r5
  4042ec:	f001 f8cc 	bl	405488 <__sinit>
  4042f0:	e7c7      	b.n	404282 <setvbuf+0xf6>
  4042f2:	f04f 35ff 	mov.w	r5, #4294967295
  4042f6:	e7b0      	b.n	40425a <setvbuf+0xce>
  4042f8:	f8dd 9000 	ldr.w	r9, [sp]
  4042fc:	45b1      	cmp	r9, r6
  4042fe:	d004      	beq.n	40430a <setvbuf+0x17e>
  404300:	4648      	mov	r0, r9
  404302:	f001 fcfd 	bl	405d00 <malloc>
  404306:	4607      	mov	r7, r0
  404308:	b920      	cbnz	r0, 404314 <setvbuf+0x188>
  40430a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40430e:	f04f 35ff 	mov.w	r5, #4294967295
  404312:	e792      	b.n	40423a <setvbuf+0xae>
  404314:	464e      	mov	r6, r9
  404316:	e783      	b.n	404220 <setvbuf+0x94>
  404318:	20400020 	.word	0x20400020
	...

00404340 <strlen>:
  404340:	f890 f000 	pld	[r0]
  404344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404348:	f020 0107 	bic.w	r1, r0, #7
  40434c:	f06f 0c00 	mvn.w	ip, #0
  404350:	f010 0407 	ands.w	r4, r0, #7
  404354:	f891 f020 	pld	[r1, #32]
  404358:	f040 8049 	bne.w	4043ee <strlen+0xae>
  40435c:	f04f 0400 	mov.w	r4, #0
  404360:	f06f 0007 	mvn.w	r0, #7
  404364:	e9d1 2300 	ldrd	r2, r3, [r1]
  404368:	f891 f040 	pld	[r1, #64]	; 0x40
  40436c:	f100 0008 	add.w	r0, r0, #8
  404370:	fa82 f24c 	uadd8	r2, r2, ip
  404374:	faa4 f28c 	sel	r2, r4, ip
  404378:	fa83 f34c 	uadd8	r3, r3, ip
  40437c:	faa2 f38c 	sel	r3, r2, ip
  404380:	bb4b      	cbnz	r3, 4043d6 <strlen+0x96>
  404382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404386:	fa82 f24c 	uadd8	r2, r2, ip
  40438a:	f100 0008 	add.w	r0, r0, #8
  40438e:	faa4 f28c 	sel	r2, r4, ip
  404392:	fa83 f34c 	uadd8	r3, r3, ip
  404396:	faa2 f38c 	sel	r3, r2, ip
  40439a:	b9e3      	cbnz	r3, 4043d6 <strlen+0x96>
  40439c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043a0:	fa82 f24c 	uadd8	r2, r2, ip
  4043a4:	f100 0008 	add.w	r0, r0, #8
  4043a8:	faa4 f28c 	sel	r2, r4, ip
  4043ac:	fa83 f34c 	uadd8	r3, r3, ip
  4043b0:	faa2 f38c 	sel	r3, r2, ip
  4043b4:	b97b      	cbnz	r3, 4043d6 <strlen+0x96>
  4043b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043ba:	f101 0120 	add.w	r1, r1, #32
  4043be:	fa82 f24c 	uadd8	r2, r2, ip
  4043c2:	f100 0008 	add.w	r0, r0, #8
  4043c6:	faa4 f28c 	sel	r2, r4, ip
  4043ca:	fa83 f34c 	uadd8	r3, r3, ip
  4043ce:	faa2 f38c 	sel	r3, r2, ip
  4043d2:	2b00      	cmp	r3, #0
  4043d4:	d0c6      	beq.n	404364 <strlen+0x24>
  4043d6:	2a00      	cmp	r2, #0
  4043d8:	bf04      	itt	eq
  4043da:	3004      	addeq	r0, #4
  4043dc:	461a      	moveq	r2, r3
  4043de:	ba12      	rev	r2, r2
  4043e0:	fab2 f282 	clz	r2, r2
  4043e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4043e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4043ec:	4770      	bx	lr
  4043ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043f2:	f004 0503 	and.w	r5, r4, #3
  4043f6:	f1c4 0000 	rsb	r0, r4, #0
  4043fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4043fe:	f014 0f04 	tst.w	r4, #4
  404402:	f891 f040 	pld	[r1, #64]	; 0x40
  404406:	fa0c f505 	lsl.w	r5, ip, r5
  40440a:	ea62 0205 	orn	r2, r2, r5
  40440e:	bf1c      	itt	ne
  404410:	ea63 0305 	ornne	r3, r3, r5
  404414:	4662      	movne	r2, ip
  404416:	f04f 0400 	mov.w	r4, #0
  40441a:	e7a9      	b.n	404370 <strlen+0x30>

0040441c <__sprint_r.part.0>:
  40441c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404420:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404422:	049c      	lsls	r4, r3, #18
  404424:	4693      	mov	fp, r2
  404426:	d52f      	bpl.n	404488 <__sprint_r.part.0+0x6c>
  404428:	6893      	ldr	r3, [r2, #8]
  40442a:	6812      	ldr	r2, [r2, #0]
  40442c:	b353      	cbz	r3, 404484 <__sprint_r.part.0+0x68>
  40442e:	460e      	mov	r6, r1
  404430:	4607      	mov	r7, r0
  404432:	f102 0908 	add.w	r9, r2, #8
  404436:	e919 0420 	ldmdb	r9, {r5, sl}
  40443a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40443e:	d017      	beq.n	404470 <__sprint_r.part.0+0x54>
  404440:	3d04      	subs	r5, #4
  404442:	2400      	movs	r4, #0
  404444:	e001      	b.n	40444a <__sprint_r.part.0+0x2e>
  404446:	45a0      	cmp	r8, r4
  404448:	d010      	beq.n	40446c <__sprint_r.part.0+0x50>
  40444a:	4632      	mov	r2, r6
  40444c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404450:	4638      	mov	r0, r7
  404452:	f001 f8bb 	bl	4055cc <_fputwc_r>
  404456:	1c43      	adds	r3, r0, #1
  404458:	f104 0401 	add.w	r4, r4, #1
  40445c:	d1f3      	bne.n	404446 <__sprint_r.part.0+0x2a>
  40445e:	2300      	movs	r3, #0
  404460:	f8cb 3008 	str.w	r3, [fp, #8]
  404464:	f8cb 3004 	str.w	r3, [fp, #4]
  404468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40446c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404470:	f02a 0a03 	bic.w	sl, sl, #3
  404474:	eba3 030a 	sub.w	r3, r3, sl
  404478:	f8cb 3008 	str.w	r3, [fp, #8]
  40447c:	f109 0908 	add.w	r9, r9, #8
  404480:	2b00      	cmp	r3, #0
  404482:	d1d8      	bne.n	404436 <__sprint_r.part.0+0x1a>
  404484:	2000      	movs	r0, #0
  404486:	e7ea      	b.n	40445e <__sprint_r.part.0+0x42>
  404488:	f001 fa0a 	bl	4058a0 <__sfvwrite_r>
  40448c:	2300      	movs	r3, #0
  40448e:	f8cb 3008 	str.w	r3, [fp, #8]
  404492:	f8cb 3004 	str.w	r3, [fp, #4]
  404496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40449a:	bf00      	nop

0040449c <_vfiprintf_r>:
  40449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044a0:	b0ad      	sub	sp, #180	; 0xb4
  4044a2:	461d      	mov	r5, r3
  4044a4:	468b      	mov	fp, r1
  4044a6:	4690      	mov	r8, r2
  4044a8:	9307      	str	r3, [sp, #28]
  4044aa:	9006      	str	r0, [sp, #24]
  4044ac:	b118      	cbz	r0, 4044b6 <_vfiprintf_r+0x1a>
  4044ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4044b0:	2b00      	cmp	r3, #0
  4044b2:	f000 80f3 	beq.w	40469c <_vfiprintf_r+0x200>
  4044b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4044be:	07df      	lsls	r7, r3, #31
  4044c0:	b281      	uxth	r1, r0
  4044c2:	d402      	bmi.n	4044ca <_vfiprintf_r+0x2e>
  4044c4:	058e      	lsls	r6, r1, #22
  4044c6:	f140 80fc 	bpl.w	4046c2 <_vfiprintf_r+0x226>
  4044ca:	048c      	lsls	r4, r1, #18
  4044cc:	d40a      	bmi.n	4044e4 <_vfiprintf_r+0x48>
  4044ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4044d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4044da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4044de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4044e2:	b289      	uxth	r1, r1
  4044e4:	0708      	lsls	r0, r1, #28
  4044e6:	f140 80b3 	bpl.w	404650 <_vfiprintf_r+0x1b4>
  4044ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4044ee:	2b00      	cmp	r3, #0
  4044f0:	f000 80ae 	beq.w	404650 <_vfiprintf_r+0x1b4>
  4044f4:	f001 031a 	and.w	r3, r1, #26
  4044f8:	2b0a      	cmp	r3, #10
  4044fa:	f000 80b5 	beq.w	404668 <_vfiprintf_r+0x1cc>
  4044fe:	2300      	movs	r3, #0
  404500:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404504:	930b      	str	r3, [sp, #44]	; 0x2c
  404506:	9311      	str	r3, [sp, #68]	; 0x44
  404508:	9310      	str	r3, [sp, #64]	; 0x40
  40450a:	9303      	str	r3, [sp, #12]
  40450c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404510:	46ca      	mov	sl, r9
  404512:	f8cd b010 	str.w	fp, [sp, #16]
  404516:	f898 3000 	ldrb.w	r3, [r8]
  40451a:	4644      	mov	r4, r8
  40451c:	b1fb      	cbz	r3, 40455e <_vfiprintf_r+0xc2>
  40451e:	2b25      	cmp	r3, #37	; 0x25
  404520:	d102      	bne.n	404528 <_vfiprintf_r+0x8c>
  404522:	e01c      	b.n	40455e <_vfiprintf_r+0xc2>
  404524:	2b25      	cmp	r3, #37	; 0x25
  404526:	d003      	beq.n	404530 <_vfiprintf_r+0x94>
  404528:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40452c:	2b00      	cmp	r3, #0
  40452e:	d1f9      	bne.n	404524 <_vfiprintf_r+0x88>
  404530:	eba4 0508 	sub.w	r5, r4, r8
  404534:	b19d      	cbz	r5, 40455e <_vfiprintf_r+0xc2>
  404536:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404538:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40453a:	f8ca 8000 	str.w	r8, [sl]
  40453e:	3301      	adds	r3, #1
  404540:	442a      	add	r2, r5
  404542:	2b07      	cmp	r3, #7
  404544:	f8ca 5004 	str.w	r5, [sl, #4]
  404548:	9211      	str	r2, [sp, #68]	; 0x44
  40454a:	9310      	str	r3, [sp, #64]	; 0x40
  40454c:	dd7a      	ble.n	404644 <_vfiprintf_r+0x1a8>
  40454e:	2a00      	cmp	r2, #0
  404550:	f040 84b0 	bne.w	404eb4 <_vfiprintf_r+0xa18>
  404554:	9b03      	ldr	r3, [sp, #12]
  404556:	9210      	str	r2, [sp, #64]	; 0x40
  404558:	442b      	add	r3, r5
  40455a:	46ca      	mov	sl, r9
  40455c:	9303      	str	r3, [sp, #12]
  40455e:	7823      	ldrb	r3, [r4, #0]
  404560:	2b00      	cmp	r3, #0
  404562:	f000 83e0 	beq.w	404d26 <_vfiprintf_r+0x88a>
  404566:	2000      	movs	r0, #0
  404568:	f04f 0300 	mov.w	r3, #0
  40456c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404570:	f104 0801 	add.w	r8, r4, #1
  404574:	7862      	ldrb	r2, [r4, #1]
  404576:	4605      	mov	r5, r0
  404578:	4606      	mov	r6, r0
  40457a:	4603      	mov	r3, r0
  40457c:	f04f 34ff 	mov.w	r4, #4294967295
  404580:	f108 0801 	add.w	r8, r8, #1
  404584:	f1a2 0120 	sub.w	r1, r2, #32
  404588:	2958      	cmp	r1, #88	; 0x58
  40458a:	f200 82de 	bhi.w	404b4a <_vfiprintf_r+0x6ae>
  40458e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404592:	0221      	.short	0x0221
  404594:	02dc02dc 	.word	0x02dc02dc
  404598:	02dc0229 	.word	0x02dc0229
  40459c:	02dc02dc 	.word	0x02dc02dc
  4045a0:	02dc02dc 	.word	0x02dc02dc
  4045a4:	028902dc 	.word	0x028902dc
  4045a8:	02dc0295 	.word	0x02dc0295
  4045ac:	02bd00a2 	.word	0x02bd00a2
  4045b0:	019f02dc 	.word	0x019f02dc
  4045b4:	01a401a4 	.word	0x01a401a4
  4045b8:	01a401a4 	.word	0x01a401a4
  4045bc:	01a401a4 	.word	0x01a401a4
  4045c0:	01a401a4 	.word	0x01a401a4
  4045c4:	02dc01a4 	.word	0x02dc01a4
  4045c8:	02dc02dc 	.word	0x02dc02dc
  4045cc:	02dc02dc 	.word	0x02dc02dc
  4045d0:	02dc02dc 	.word	0x02dc02dc
  4045d4:	02dc02dc 	.word	0x02dc02dc
  4045d8:	01b202dc 	.word	0x01b202dc
  4045dc:	02dc02dc 	.word	0x02dc02dc
  4045e0:	02dc02dc 	.word	0x02dc02dc
  4045e4:	02dc02dc 	.word	0x02dc02dc
  4045e8:	02dc02dc 	.word	0x02dc02dc
  4045ec:	02dc02dc 	.word	0x02dc02dc
  4045f0:	02dc0197 	.word	0x02dc0197
  4045f4:	02dc02dc 	.word	0x02dc02dc
  4045f8:	02dc02dc 	.word	0x02dc02dc
  4045fc:	02dc019b 	.word	0x02dc019b
  404600:	025302dc 	.word	0x025302dc
  404604:	02dc02dc 	.word	0x02dc02dc
  404608:	02dc02dc 	.word	0x02dc02dc
  40460c:	02dc02dc 	.word	0x02dc02dc
  404610:	02dc02dc 	.word	0x02dc02dc
  404614:	02dc02dc 	.word	0x02dc02dc
  404618:	021b025a 	.word	0x021b025a
  40461c:	02dc02dc 	.word	0x02dc02dc
  404620:	026e02dc 	.word	0x026e02dc
  404624:	02dc021b 	.word	0x02dc021b
  404628:	027302dc 	.word	0x027302dc
  40462c:	01f502dc 	.word	0x01f502dc
  404630:	02090182 	.word	0x02090182
  404634:	02dc02d7 	.word	0x02dc02d7
  404638:	02dc029a 	.word	0x02dc029a
  40463c:	02dc00a7 	.word	0x02dc00a7
  404640:	022e02dc 	.word	0x022e02dc
  404644:	f10a 0a08 	add.w	sl, sl, #8
  404648:	9b03      	ldr	r3, [sp, #12]
  40464a:	442b      	add	r3, r5
  40464c:	9303      	str	r3, [sp, #12]
  40464e:	e786      	b.n	40455e <_vfiprintf_r+0xc2>
  404650:	4659      	mov	r1, fp
  404652:	9806      	ldr	r0, [sp, #24]
  404654:	f000 fdac 	bl	4051b0 <__swsetup_r>
  404658:	bb18      	cbnz	r0, 4046a2 <_vfiprintf_r+0x206>
  40465a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40465e:	f001 031a 	and.w	r3, r1, #26
  404662:	2b0a      	cmp	r3, #10
  404664:	f47f af4b 	bne.w	4044fe <_vfiprintf_r+0x62>
  404668:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40466c:	2b00      	cmp	r3, #0
  40466e:	f6ff af46 	blt.w	4044fe <_vfiprintf_r+0x62>
  404672:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404676:	07db      	lsls	r3, r3, #31
  404678:	d405      	bmi.n	404686 <_vfiprintf_r+0x1ea>
  40467a:	058f      	lsls	r7, r1, #22
  40467c:	d403      	bmi.n	404686 <_vfiprintf_r+0x1ea>
  40467e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404682:	f001 fac3 	bl	405c0c <__retarget_lock_release_recursive>
  404686:	462b      	mov	r3, r5
  404688:	4642      	mov	r2, r8
  40468a:	4659      	mov	r1, fp
  40468c:	9806      	ldr	r0, [sp, #24]
  40468e:	f000 fd4d 	bl	40512c <__sbprintf>
  404692:	9003      	str	r0, [sp, #12]
  404694:	9803      	ldr	r0, [sp, #12]
  404696:	b02d      	add	sp, #180	; 0xb4
  404698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40469c:	f000 fef4 	bl	405488 <__sinit>
  4046a0:	e709      	b.n	4044b6 <_vfiprintf_r+0x1a>
  4046a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046a6:	07d9      	lsls	r1, r3, #31
  4046a8:	d404      	bmi.n	4046b4 <_vfiprintf_r+0x218>
  4046aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4046ae:	059a      	lsls	r2, r3, #22
  4046b0:	f140 84aa 	bpl.w	405008 <_vfiprintf_r+0xb6c>
  4046b4:	f04f 33ff 	mov.w	r3, #4294967295
  4046b8:	9303      	str	r3, [sp, #12]
  4046ba:	9803      	ldr	r0, [sp, #12]
  4046bc:	b02d      	add	sp, #180	; 0xb4
  4046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4046c6:	f001 fa9f 	bl	405c08 <__retarget_lock_acquire_recursive>
  4046ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4046ce:	b281      	uxth	r1, r0
  4046d0:	e6fb      	b.n	4044ca <_vfiprintf_r+0x2e>
  4046d2:	4276      	negs	r6, r6
  4046d4:	9207      	str	r2, [sp, #28]
  4046d6:	f043 0304 	orr.w	r3, r3, #4
  4046da:	f898 2000 	ldrb.w	r2, [r8]
  4046de:	e74f      	b.n	404580 <_vfiprintf_r+0xe4>
  4046e0:	9608      	str	r6, [sp, #32]
  4046e2:	069e      	lsls	r6, r3, #26
  4046e4:	f100 8450 	bmi.w	404f88 <_vfiprintf_r+0xaec>
  4046e8:	9907      	ldr	r1, [sp, #28]
  4046ea:	06dd      	lsls	r5, r3, #27
  4046ec:	460a      	mov	r2, r1
  4046ee:	f100 83ef 	bmi.w	404ed0 <_vfiprintf_r+0xa34>
  4046f2:	0658      	lsls	r0, r3, #25
  4046f4:	f140 83ec 	bpl.w	404ed0 <_vfiprintf_r+0xa34>
  4046f8:	880e      	ldrh	r6, [r1, #0]
  4046fa:	3104      	adds	r1, #4
  4046fc:	2700      	movs	r7, #0
  4046fe:	2201      	movs	r2, #1
  404700:	9107      	str	r1, [sp, #28]
  404702:	f04f 0100 	mov.w	r1, #0
  404706:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40470a:	2500      	movs	r5, #0
  40470c:	1c61      	adds	r1, r4, #1
  40470e:	f000 8116 	beq.w	40493e <_vfiprintf_r+0x4a2>
  404712:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404716:	9102      	str	r1, [sp, #8]
  404718:	ea56 0107 	orrs.w	r1, r6, r7
  40471c:	f040 8114 	bne.w	404948 <_vfiprintf_r+0x4ac>
  404720:	2c00      	cmp	r4, #0
  404722:	f040 835c 	bne.w	404dde <_vfiprintf_r+0x942>
  404726:	2a00      	cmp	r2, #0
  404728:	f040 83b7 	bne.w	404e9a <_vfiprintf_r+0x9fe>
  40472c:	f013 0301 	ands.w	r3, r3, #1
  404730:	9305      	str	r3, [sp, #20]
  404732:	f000 8457 	beq.w	404fe4 <_vfiprintf_r+0xb48>
  404736:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40473a:	2330      	movs	r3, #48	; 0x30
  40473c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404740:	9b05      	ldr	r3, [sp, #20]
  404742:	42a3      	cmp	r3, r4
  404744:	bfb8      	it	lt
  404746:	4623      	movlt	r3, r4
  404748:	9301      	str	r3, [sp, #4]
  40474a:	b10d      	cbz	r5, 404750 <_vfiprintf_r+0x2b4>
  40474c:	3301      	adds	r3, #1
  40474e:	9301      	str	r3, [sp, #4]
  404750:	9b02      	ldr	r3, [sp, #8]
  404752:	f013 0302 	ands.w	r3, r3, #2
  404756:	9309      	str	r3, [sp, #36]	; 0x24
  404758:	d002      	beq.n	404760 <_vfiprintf_r+0x2c4>
  40475a:	9b01      	ldr	r3, [sp, #4]
  40475c:	3302      	adds	r3, #2
  40475e:	9301      	str	r3, [sp, #4]
  404760:	9b02      	ldr	r3, [sp, #8]
  404762:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404766:	930a      	str	r3, [sp, #40]	; 0x28
  404768:	f040 8217 	bne.w	404b9a <_vfiprintf_r+0x6fe>
  40476c:	9b08      	ldr	r3, [sp, #32]
  40476e:	9a01      	ldr	r2, [sp, #4]
  404770:	1a9d      	subs	r5, r3, r2
  404772:	2d00      	cmp	r5, #0
  404774:	f340 8211 	ble.w	404b9a <_vfiprintf_r+0x6fe>
  404778:	2d10      	cmp	r5, #16
  40477a:	f340 8490 	ble.w	40509e <_vfiprintf_r+0xc02>
  40477e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404780:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404782:	4ec4      	ldr	r6, [pc, #784]	; (404a94 <_vfiprintf_r+0x5f8>)
  404784:	46d6      	mov	lr, sl
  404786:	2710      	movs	r7, #16
  404788:	46a2      	mov	sl, r4
  40478a:	4619      	mov	r1, r3
  40478c:	9c06      	ldr	r4, [sp, #24]
  40478e:	e007      	b.n	4047a0 <_vfiprintf_r+0x304>
  404790:	f101 0c02 	add.w	ip, r1, #2
  404794:	f10e 0e08 	add.w	lr, lr, #8
  404798:	4601      	mov	r1, r0
  40479a:	3d10      	subs	r5, #16
  40479c:	2d10      	cmp	r5, #16
  40479e:	dd11      	ble.n	4047c4 <_vfiprintf_r+0x328>
  4047a0:	1c48      	adds	r0, r1, #1
  4047a2:	3210      	adds	r2, #16
  4047a4:	2807      	cmp	r0, #7
  4047a6:	9211      	str	r2, [sp, #68]	; 0x44
  4047a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4047ac:	9010      	str	r0, [sp, #64]	; 0x40
  4047ae:	ddef      	ble.n	404790 <_vfiprintf_r+0x2f4>
  4047b0:	2a00      	cmp	r2, #0
  4047b2:	f040 81e4 	bne.w	404b7e <_vfiprintf_r+0x6e2>
  4047b6:	3d10      	subs	r5, #16
  4047b8:	2d10      	cmp	r5, #16
  4047ba:	4611      	mov	r1, r2
  4047bc:	f04f 0c01 	mov.w	ip, #1
  4047c0:	46ce      	mov	lr, r9
  4047c2:	dced      	bgt.n	4047a0 <_vfiprintf_r+0x304>
  4047c4:	4654      	mov	r4, sl
  4047c6:	4661      	mov	r1, ip
  4047c8:	46f2      	mov	sl, lr
  4047ca:	442a      	add	r2, r5
  4047cc:	2907      	cmp	r1, #7
  4047ce:	9211      	str	r2, [sp, #68]	; 0x44
  4047d0:	f8ca 6000 	str.w	r6, [sl]
  4047d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4047d8:	9110      	str	r1, [sp, #64]	; 0x40
  4047da:	f300 82ec 	bgt.w	404db6 <_vfiprintf_r+0x91a>
  4047de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4047e2:	f10a 0a08 	add.w	sl, sl, #8
  4047e6:	1c48      	adds	r0, r1, #1
  4047e8:	2d00      	cmp	r5, #0
  4047ea:	f040 81de 	bne.w	404baa <_vfiprintf_r+0x70e>
  4047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	f000 81f8 	beq.w	404be6 <_vfiprintf_r+0x74a>
  4047f6:	3202      	adds	r2, #2
  4047f8:	a90e      	add	r1, sp, #56	; 0x38
  4047fa:	2302      	movs	r3, #2
  4047fc:	2807      	cmp	r0, #7
  4047fe:	9211      	str	r2, [sp, #68]	; 0x44
  404800:	9010      	str	r0, [sp, #64]	; 0x40
  404802:	e88a 000a 	stmia.w	sl, {r1, r3}
  404806:	f340 81ea 	ble.w	404bde <_vfiprintf_r+0x742>
  40480a:	2a00      	cmp	r2, #0
  40480c:	f040 838c 	bne.w	404f28 <_vfiprintf_r+0xa8c>
  404810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404812:	2b80      	cmp	r3, #128	; 0x80
  404814:	f04f 0001 	mov.w	r0, #1
  404818:	4611      	mov	r1, r2
  40481a:	46ca      	mov	sl, r9
  40481c:	f040 81e7 	bne.w	404bee <_vfiprintf_r+0x752>
  404820:	9b08      	ldr	r3, [sp, #32]
  404822:	9d01      	ldr	r5, [sp, #4]
  404824:	1b5e      	subs	r6, r3, r5
  404826:	2e00      	cmp	r6, #0
  404828:	f340 81e1 	ble.w	404bee <_vfiprintf_r+0x752>
  40482c:	2e10      	cmp	r6, #16
  40482e:	4d9a      	ldr	r5, [pc, #616]	; (404a98 <_vfiprintf_r+0x5fc>)
  404830:	f340 8450 	ble.w	4050d4 <_vfiprintf_r+0xc38>
  404834:	46d4      	mov	ip, sl
  404836:	2710      	movs	r7, #16
  404838:	46a2      	mov	sl, r4
  40483a:	9c06      	ldr	r4, [sp, #24]
  40483c:	e007      	b.n	40484e <_vfiprintf_r+0x3b2>
  40483e:	f101 0e02 	add.w	lr, r1, #2
  404842:	f10c 0c08 	add.w	ip, ip, #8
  404846:	4601      	mov	r1, r0
  404848:	3e10      	subs	r6, #16
  40484a:	2e10      	cmp	r6, #16
  40484c:	dd11      	ble.n	404872 <_vfiprintf_r+0x3d6>
  40484e:	1c48      	adds	r0, r1, #1
  404850:	3210      	adds	r2, #16
  404852:	2807      	cmp	r0, #7
  404854:	9211      	str	r2, [sp, #68]	; 0x44
  404856:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40485a:	9010      	str	r0, [sp, #64]	; 0x40
  40485c:	ddef      	ble.n	40483e <_vfiprintf_r+0x3a2>
  40485e:	2a00      	cmp	r2, #0
  404860:	f040 829d 	bne.w	404d9e <_vfiprintf_r+0x902>
  404864:	3e10      	subs	r6, #16
  404866:	2e10      	cmp	r6, #16
  404868:	f04f 0e01 	mov.w	lr, #1
  40486c:	4611      	mov	r1, r2
  40486e:	46cc      	mov	ip, r9
  404870:	dced      	bgt.n	40484e <_vfiprintf_r+0x3b2>
  404872:	4654      	mov	r4, sl
  404874:	46e2      	mov	sl, ip
  404876:	4432      	add	r2, r6
  404878:	f1be 0f07 	cmp.w	lr, #7
  40487c:	9211      	str	r2, [sp, #68]	; 0x44
  40487e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404882:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404886:	f300 8369 	bgt.w	404f5c <_vfiprintf_r+0xac0>
  40488a:	f10a 0a08 	add.w	sl, sl, #8
  40488e:	f10e 0001 	add.w	r0, lr, #1
  404892:	4671      	mov	r1, lr
  404894:	e1ab      	b.n	404bee <_vfiprintf_r+0x752>
  404896:	9608      	str	r6, [sp, #32]
  404898:	f013 0220 	ands.w	r2, r3, #32
  40489c:	f040 838c 	bne.w	404fb8 <_vfiprintf_r+0xb1c>
  4048a0:	f013 0110 	ands.w	r1, r3, #16
  4048a4:	f040 831a 	bne.w	404edc <_vfiprintf_r+0xa40>
  4048a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4048ac:	f000 8316 	beq.w	404edc <_vfiprintf_r+0xa40>
  4048b0:	9807      	ldr	r0, [sp, #28]
  4048b2:	460a      	mov	r2, r1
  4048b4:	4601      	mov	r1, r0
  4048b6:	3104      	adds	r1, #4
  4048b8:	8806      	ldrh	r6, [r0, #0]
  4048ba:	9107      	str	r1, [sp, #28]
  4048bc:	2700      	movs	r7, #0
  4048be:	e720      	b.n	404702 <_vfiprintf_r+0x266>
  4048c0:	9608      	str	r6, [sp, #32]
  4048c2:	f043 0310 	orr.w	r3, r3, #16
  4048c6:	e7e7      	b.n	404898 <_vfiprintf_r+0x3fc>
  4048c8:	9608      	str	r6, [sp, #32]
  4048ca:	f043 0310 	orr.w	r3, r3, #16
  4048ce:	e708      	b.n	4046e2 <_vfiprintf_r+0x246>
  4048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4048d4:	f898 2000 	ldrb.w	r2, [r8]
  4048d8:	e652      	b.n	404580 <_vfiprintf_r+0xe4>
  4048da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4048de:	2600      	movs	r6, #0
  4048e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4048e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4048e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4048ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4048f0:	2909      	cmp	r1, #9
  4048f2:	d9f5      	bls.n	4048e0 <_vfiprintf_r+0x444>
  4048f4:	e646      	b.n	404584 <_vfiprintf_r+0xe8>
  4048f6:	9608      	str	r6, [sp, #32]
  4048f8:	2800      	cmp	r0, #0
  4048fa:	f040 8408 	bne.w	40510e <_vfiprintf_r+0xc72>
  4048fe:	f043 0310 	orr.w	r3, r3, #16
  404902:	069e      	lsls	r6, r3, #26
  404904:	f100 834c 	bmi.w	404fa0 <_vfiprintf_r+0xb04>
  404908:	06dd      	lsls	r5, r3, #27
  40490a:	f100 82f3 	bmi.w	404ef4 <_vfiprintf_r+0xa58>
  40490e:	0658      	lsls	r0, r3, #25
  404910:	f140 82f0 	bpl.w	404ef4 <_vfiprintf_r+0xa58>
  404914:	9d07      	ldr	r5, [sp, #28]
  404916:	f9b5 6000 	ldrsh.w	r6, [r5]
  40491a:	462a      	mov	r2, r5
  40491c:	17f7      	asrs	r7, r6, #31
  40491e:	3204      	adds	r2, #4
  404920:	4630      	mov	r0, r6
  404922:	4639      	mov	r1, r7
  404924:	9207      	str	r2, [sp, #28]
  404926:	2800      	cmp	r0, #0
  404928:	f171 0200 	sbcs.w	r2, r1, #0
  40492c:	f2c0 835d 	blt.w	404fea <_vfiprintf_r+0xb4e>
  404930:	1c61      	adds	r1, r4, #1
  404932:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404936:	f04f 0201 	mov.w	r2, #1
  40493a:	f47f aeea 	bne.w	404712 <_vfiprintf_r+0x276>
  40493e:	ea56 0107 	orrs.w	r1, r6, r7
  404942:	f000 824d 	beq.w	404de0 <_vfiprintf_r+0x944>
  404946:	9302      	str	r3, [sp, #8]
  404948:	2a01      	cmp	r2, #1
  40494a:	f000 828c 	beq.w	404e66 <_vfiprintf_r+0x9ca>
  40494e:	2a02      	cmp	r2, #2
  404950:	f040 825c 	bne.w	404e0c <_vfiprintf_r+0x970>
  404954:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404956:	46cb      	mov	fp, r9
  404958:	0933      	lsrs	r3, r6, #4
  40495a:	f006 010f 	and.w	r1, r6, #15
  40495e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404962:	093a      	lsrs	r2, r7, #4
  404964:	461e      	mov	r6, r3
  404966:	4617      	mov	r7, r2
  404968:	5c43      	ldrb	r3, [r0, r1]
  40496a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40496e:	ea56 0307 	orrs.w	r3, r6, r7
  404972:	d1f1      	bne.n	404958 <_vfiprintf_r+0x4bc>
  404974:	eba9 030b 	sub.w	r3, r9, fp
  404978:	9305      	str	r3, [sp, #20]
  40497a:	e6e1      	b.n	404740 <_vfiprintf_r+0x2a4>
  40497c:	2800      	cmp	r0, #0
  40497e:	f040 83c0 	bne.w	405102 <_vfiprintf_r+0xc66>
  404982:	0699      	lsls	r1, r3, #26
  404984:	f100 8367 	bmi.w	405056 <_vfiprintf_r+0xbba>
  404988:	06da      	lsls	r2, r3, #27
  40498a:	f100 80f1 	bmi.w	404b70 <_vfiprintf_r+0x6d4>
  40498e:	065b      	lsls	r3, r3, #25
  404990:	f140 80ee 	bpl.w	404b70 <_vfiprintf_r+0x6d4>
  404994:	9a07      	ldr	r2, [sp, #28]
  404996:	6813      	ldr	r3, [r2, #0]
  404998:	3204      	adds	r2, #4
  40499a:	9207      	str	r2, [sp, #28]
  40499c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4049a0:	801a      	strh	r2, [r3, #0]
  4049a2:	e5b8      	b.n	404516 <_vfiprintf_r+0x7a>
  4049a4:	9807      	ldr	r0, [sp, #28]
  4049a6:	4a3d      	ldr	r2, [pc, #244]	; (404a9c <_vfiprintf_r+0x600>)
  4049a8:	9608      	str	r6, [sp, #32]
  4049aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4049ac:	6806      	ldr	r6, [r0, #0]
  4049ae:	2278      	movs	r2, #120	; 0x78
  4049b0:	2130      	movs	r1, #48	; 0x30
  4049b2:	3004      	adds	r0, #4
  4049b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4049b8:	f043 0302 	orr.w	r3, r3, #2
  4049bc:	9007      	str	r0, [sp, #28]
  4049be:	2700      	movs	r7, #0
  4049c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4049c4:	2202      	movs	r2, #2
  4049c6:	e69c      	b.n	404702 <_vfiprintf_r+0x266>
  4049c8:	9608      	str	r6, [sp, #32]
  4049ca:	2800      	cmp	r0, #0
  4049cc:	d099      	beq.n	404902 <_vfiprintf_r+0x466>
  4049ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4049d2:	e796      	b.n	404902 <_vfiprintf_r+0x466>
  4049d4:	f898 2000 	ldrb.w	r2, [r8]
  4049d8:	2d00      	cmp	r5, #0
  4049da:	f47f add1 	bne.w	404580 <_vfiprintf_r+0xe4>
  4049de:	2001      	movs	r0, #1
  4049e0:	2520      	movs	r5, #32
  4049e2:	e5cd      	b.n	404580 <_vfiprintf_r+0xe4>
  4049e4:	f043 0301 	orr.w	r3, r3, #1
  4049e8:	f898 2000 	ldrb.w	r2, [r8]
  4049ec:	e5c8      	b.n	404580 <_vfiprintf_r+0xe4>
  4049ee:	9608      	str	r6, [sp, #32]
  4049f0:	2800      	cmp	r0, #0
  4049f2:	f040 8393 	bne.w	40511c <_vfiprintf_r+0xc80>
  4049f6:	4929      	ldr	r1, [pc, #164]	; (404a9c <_vfiprintf_r+0x600>)
  4049f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4049fa:	069f      	lsls	r7, r3, #26
  4049fc:	f100 82e8 	bmi.w	404fd0 <_vfiprintf_r+0xb34>
  404a00:	9807      	ldr	r0, [sp, #28]
  404a02:	06de      	lsls	r6, r3, #27
  404a04:	4601      	mov	r1, r0
  404a06:	f100 8270 	bmi.w	404eea <_vfiprintf_r+0xa4e>
  404a0a:	065d      	lsls	r5, r3, #25
  404a0c:	f140 826d 	bpl.w	404eea <_vfiprintf_r+0xa4e>
  404a10:	3104      	adds	r1, #4
  404a12:	8806      	ldrh	r6, [r0, #0]
  404a14:	9107      	str	r1, [sp, #28]
  404a16:	2700      	movs	r7, #0
  404a18:	07d8      	lsls	r0, r3, #31
  404a1a:	f140 8222 	bpl.w	404e62 <_vfiprintf_r+0x9c6>
  404a1e:	ea56 0107 	orrs.w	r1, r6, r7
  404a22:	f000 821e 	beq.w	404e62 <_vfiprintf_r+0x9c6>
  404a26:	2130      	movs	r1, #48	; 0x30
  404a28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404a2c:	f043 0302 	orr.w	r3, r3, #2
  404a30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404a34:	2202      	movs	r2, #2
  404a36:	e664      	b.n	404702 <_vfiprintf_r+0x266>
  404a38:	9608      	str	r6, [sp, #32]
  404a3a:	2800      	cmp	r0, #0
  404a3c:	f040 836b 	bne.w	405116 <_vfiprintf_r+0xc7a>
  404a40:	4917      	ldr	r1, [pc, #92]	; (404aa0 <_vfiprintf_r+0x604>)
  404a42:	910b      	str	r1, [sp, #44]	; 0x2c
  404a44:	e7d9      	b.n	4049fa <_vfiprintf_r+0x55e>
  404a46:	9907      	ldr	r1, [sp, #28]
  404a48:	9608      	str	r6, [sp, #32]
  404a4a:	680a      	ldr	r2, [r1, #0]
  404a4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404a50:	f04f 0000 	mov.w	r0, #0
  404a54:	460a      	mov	r2, r1
  404a56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404a5a:	3204      	adds	r2, #4
  404a5c:	2001      	movs	r0, #1
  404a5e:	9001      	str	r0, [sp, #4]
  404a60:	9207      	str	r2, [sp, #28]
  404a62:	9005      	str	r0, [sp, #20]
  404a64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404a68:	9302      	str	r3, [sp, #8]
  404a6a:	2400      	movs	r4, #0
  404a6c:	e670      	b.n	404750 <_vfiprintf_r+0x2b4>
  404a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a72:	f898 2000 	ldrb.w	r2, [r8]
  404a76:	e583      	b.n	404580 <_vfiprintf_r+0xe4>
  404a78:	f898 2000 	ldrb.w	r2, [r8]
  404a7c:	2a6c      	cmp	r2, #108	; 0x6c
  404a7e:	bf03      	ittte	eq
  404a80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404a84:	f043 0320 	orreq.w	r3, r3, #32
  404a88:	f108 0801 	addeq.w	r8, r8, #1
  404a8c:	f043 0310 	orrne.w	r3, r3, #16
  404a90:	e576      	b.n	404580 <_vfiprintf_r+0xe4>
  404a92:	bf00      	nop
  404a94:	00407eb8 	.word	0x00407eb8
  404a98:	00407ec8 	.word	0x00407ec8
  404a9c:	00407e9c 	.word	0x00407e9c
  404aa0:	00407e88 	.word	0x00407e88
  404aa4:	9907      	ldr	r1, [sp, #28]
  404aa6:	680e      	ldr	r6, [r1, #0]
  404aa8:	460a      	mov	r2, r1
  404aaa:	2e00      	cmp	r6, #0
  404aac:	f102 0204 	add.w	r2, r2, #4
  404ab0:	f6ff ae0f 	blt.w	4046d2 <_vfiprintf_r+0x236>
  404ab4:	9207      	str	r2, [sp, #28]
  404ab6:	f898 2000 	ldrb.w	r2, [r8]
  404aba:	e561      	b.n	404580 <_vfiprintf_r+0xe4>
  404abc:	f898 2000 	ldrb.w	r2, [r8]
  404ac0:	2001      	movs	r0, #1
  404ac2:	252b      	movs	r5, #43	; 0x2b
  404ac4:	e55c      	b.n	404580 <_vfiprintf_r+0xe4>
  404ac6:	9907      	ldr	r1, [sp, #28]
  404ac8:	9608      	str	r6, [sp, #32]
  404aca:	f8d1 b000 	ldr.w	fp, [r1]
  404ace:	f04f 0200 	mov.w	r2, #0
  404ad2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404ad6:	1d0e      	adds	r6, r1, #4
  404ad8:	f1bb 0f00 	cmp.w	fp, #0
  404adc:	f000 82e5 	beq.w	4050aa <_vfiprintf_r+0xc0e>
  404ae0:	1c67      	adds	r7, r4, #1
  404ae2:	f000 82c4 	beq.w	40506e <_vfiprintf_r+0xbd2>
  404ae6:	4622      	mov	r2, r4
  404ae8:	2100      	movs	r1, #0
  404aea:	4658      	mov	r0, fp
  404aec:	9301      	str	r3, [sp, #4]
  404aee:	f001 fbd7 	bl	4062a0 <memchr>
  404af2:	9b01      	ldr	r3, [sp, #4]
  404af4:	2800      	cmp	r0, #0
  404af6:	f000 82e5 	beq.w	4050c4 <_vfiprintf_r+0xc28>
  404afa:	eba0 020b 	sub.w	r2, r0, fp
  404afe:	9205      	str	r2, [sp, #20]
  404b00:	9607      	str	r6, [sp, #28]
  404b02:	9302      	str	r3, [sp, #8]
  404b04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b08:	2400      	movs	r4, #0
  404b0a:	e619      	b.n	404740 <_vfiprintf_r+0x2a4>
  404b0c:	f898 2000 	ldrb.w	r2, [r8]
  404b10:	2a2a      	cmp	r2, #42	; 0x2a
  404b12:	f108 0701 	add.w	r7, r8, #1
  404b16:	f000 82e9 	beq.w	4050ec <_vfiprintf_r+0xc50>
  404b1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b1e:	2909      	cmp	r1, #9
  404b20:	46b8      	mov	r8, r7
  404b22:	f04f 0400 	mov.w	r4, #0
  404b26:	f63f ad2d 	bhi.w	404584 <_vfiprintf_r+0xe8>
  404b2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404b2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404b36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b3a:	2909      	cmp	r1, #9
  404b3c:	d9f5      	bls.n	404b2a <_vfiprintf_r+0x68e>
  404b3e:	e521      	b.n	404584 <_vfiprintf_r+0xe8>
  404b40:	f043 0320 	orr.w	r3, r3, #32
  404b44:	f898 2000 	ldrb.w	r2, [r8]
  404b48:	e51a      	b.n	404580 <_vfiprintf_r+0xe4>
  404b4a:	9608      	str	r6, [sp, #32]
  404b4c:	2800      	cmp	r0, #0
  404b4e:	f040 82db 	bne.w	405108 <_vfiprintf_r+0xc6c>
  404b52:	2a00      	cmp	r2, #0
  404b54:	f000 80e7 	beq.w	404d26 <_vfiprintf_r+0x88a>
  404b58:	2101      	movs	r1, #1
  404b5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404b5e:	f04f 0200 	mov.w	r2, #0
  404b62:	9101      	str	r1, [sp, #4]
  404b64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404b68:	9105      	str	r1, [sp, #20]
  404b6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404b6e:	e77b      	b.n	404a68 <_vfiprintf_r+0x5cc>
  404b70:	9a07      	ldr	r2, [sp, #28]
  404b72:	6813      	ldr	r3, [r2, #0]
  404b74:	3204      	adds	r2, #4
  404b76:	9207      	str	r2, [sp, #28]
  404b78:	9a03      	ldr	r2, [sp, #12]
  404b7a:	601a      	str	r2, [r3, #0]
  404b7c:	e4cb      	b.n	404516 <_vfiprintf_r+0x7a>
  404b7e:	aa0f      	add	r2, sp, #60	; 0x3c
  404b80:	9904      	ldr	r1, [sp, #16]
  404b82:	4620      	mov	r0, r4
  404b84:	f7ff fc4a 	bl	40441c <__sprint_r.part.0>
  404b88:	2800      	cmp	r0, #0
  404b8a:	f040 8139 	bne.w	404e00 <_vfiprintf_r+0x964>
  404b8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b92:	f101 0c01 	add.w	ip, r1, #1
  404b96:	46ce      	mov	lr, r9
  404b98:	e5ff      	b.n	40479a <_vfiprintf_r+0x2fe>
  404b9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b9e:	1c48      	adds	r0, r1, #1
  404ba0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ba4:	2d00      	cmp	r5, #0
  404ba6:	f43f ae22 	beq.w	4047ee <_vfiprintf_r+0x352>
  404baa:	3201      	adds	r2, #1
  404bac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404bb0:	2101      	movs	r1, #1
  404bb2:	2807      	cmp	r0, #7
  404bb4:	9211      	str	r2, [sp, #68]	; 0x44
  404bb6:	9010      	str	r0, [sp, #64]	; 0x40
  404bb8:	f8ca 5000 	str.w	r5, [sl]
  404bbc:	f8ca 1004 	str.w	r1, [sl, #4]
  404bc0:	f340 8108 	ble.w	404dd4 <_vfiprintf_r+0x938>
  404bc4:	2a00      	cmp	r2, #0
  404bc6:	f040 81bc 	bne.w	404f42 <_vfiprintf_r+0xaa6>
  404bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404bcc:	2b00      	cmp	r3, #0
  404bce:	f43f ae1f 	beq.w	404810 <_vfiprintf_r+0x374>
  404bd2:	ab0e      	add	r3, sp, #56	; 0x38
  404bd4:	2202      	movs	r2, #2
  404bd6:	4608      	mov	r0, r1
  404bd8:	931c      	str	r3, [sp, #112]	; 0x70
  404bda:	921d      	str	r2, [sp, #116]	; 0x74
  404bdc:	46ca      	mov	sl, r9
  404bde:	4601      	mov	r1, r0
  404be0:	f10a 0a08 	add.w	sl, sl, #8
  404be4:	3001      	adds	r0, #1
  404be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404be8:	2b80      	cmp	r3, #128	; 0x80
  404bea:	f43f ae19 	beq.w	404820 <_vfiprintf_r+0x384>
  404bee:	9b05      	ldr	r3, [sp, #20]
  404bf0:	1ae4      	subs	r4, r4, r3
  404bf2:	2c00      	cmp	r4, #0
  404bf4:	dd2e      	ble.n	404c54 <_vfiprintf_r+0x7b8>
  404bf6:	2c10      	cmp	r4, #16
  404bf8:	4db3      	ldr	r5, [pc, #716]	; (404ec8 <_vfiprintf_r+0xa2c>)
  404bfa:	dd1e      	ble.n	404c3a <_vfiprintf_r+0x79e>
  404bfc:	46d6      	mov	lr, sl
  404bfe:	2610      	movs	r6, #16
  404c00:	9f06      	ldr	r7, [sp, #24]
  404c02:	f8dd a010 	ldr.w	sl, [sp, #16]
  404c06:	e006      	b.n	404c16 <_vfiprintf_r+0x77a>
  404c08:	1c88      	adds	r0, r1, #2
  404c0a:	f10e 0e08 	add.w	lr, lr, #8
  404c0e:	4619      	mov	r1, r3
  404c10:	3c10      	subs	r4, #16
  404c12:	2c10      	cmp	r4, #16
  404c14:	dd10      	ble.n	404c38 <_vfiprintf_r+0x79c>
  404c16:	1c4b      	adds	r3, r1, #1
  404c18:	3210      	adds	r2, #16
  404c1a:	2b07      	cmp	r3, #7
  404c1c:	9211      	str	r2, [sp, #68]	; 0x44
  404c1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404c22:	9310      	str	r3, [sp, #64]	; 0x40
  404c24:	ddf0      	ble.n	404c08 <_vfiprintf_r+0x76c>
  404c26:	2a00      	cmp	r2, #0
  404c28:	d165      	bne.n	404cf6 <_vfiprintf_r+0x85a>
  404c2a:	3c10      	subs	r4, #16
  404c2c:	2c10      	cmp	r4, #16
  404c2e:	f04f 0001 	mov.w	r0, #1
  404c32:	4611      	mov	r1, r2
  404c34:	46ce      	mov	lr, r9
  404c36:	dcee      	bgt.n	404c16 <_vfiprintf_r+0x77a>
  404c38:	46f2      	mov	sl, lr
  404c3a:	4422      	add	r2, r4
  404c3c:	2807      	cmp	r0, #7
  404c3e:	9211      	str	r2, [sp, #68]	; 0x44
  404c40:	f8ca 5000 	str.w	r5, [sl]
  404c44:	f8ca 4004 	str.w	r4, [sl, #4]
  404c48:	9010      	str	r0, [sp, #64]	; 0x40
  404c4a:	f300 8085 	bgt.w	404d58 <_vfiprintf_r+0x8bc>
  404c4e:	f10a 0a08 	add.w	sl, sl, #8
  404c52:	3001      	adds	r0, #1
  404c54:	9905      	ldr	r1, [sp, #20]
  404c56:	f8ca b000 	str.w	fp, [sl]
  404c5a:	440a      	add	r2, r1
  404c5c:	2807      	cmp	r0, #7
  404c5e:	9211      	str	r2, [sp, #68]	; 0x44
  404c60:	f8ca 1004 	str.w	r1, [sl, #4]
  404c64:	9010      	str	r0, [sp, #64]	; 0x40
  404c66:	f340 8082 	ble.w	404d6e <_vfiprintf_r+0x8d2>
  404c6a:	2a00      	cmp	r2, #0
  404c6c:	f040 8118 	bne.w	404ea0 <_vfiprintf_r+0xa04>
  404c70:	9b02      	ldr	r3, [sp, #8]
  404c72:	9210      	str	r2, [sp, #64]	; 0x40
  404c74:	0758      	lsls	r0, r3, #29
  404c76:	d535      	bpl.n	404ce4 <_vfiprintf_r+0x848>
  404c78:	9b08      	ldr	r3, [sp, #32]
  404c7a:	9901      	ldr	r1, [sp, #4]
  404c7c:	1a5c      	subs	r4, r3, r1
  404c7e:	2c00      	cmp	r4, #0
  404c80:	f340 80e7 	ble.w	404e52 <_vfiprintf_r+0x9b6>
  404c84:	46ca      	mov	sl, r9
  404c86:	2c10      	cmp	r4, #16
  404c88:	f340 8218 	ble.w	4050bc <_vfiprintf_r+0xc20>
  404c8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c8e:	4e8f      	ldr	r6, [pc, #572]	; (404ecc <_vfiprintf_r+0xa30>)
  404c90:	9f06      	ldr	r7, [sp, #24]
  404c92:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c96:	2510      	movs	r5, #16
  404c98:	e006      	b.n	404ca8 <_vfiprintf_r+0x80c>
  404c9a:	1c88      	adds	r0, r1, #2
  404c9c:	f10a 0a08 	add.w	sl, sl, #8
  404ca0:	4619      	mov	r1, r3
  404ca2:	3c10      	subs	r4, #16
  404ca4:	2c10      	cmp	r4, #16
  404ca6:	dd11      	ble.n	404ccc <_vfiprintf_r+0x830>
  404ca8:	1c4b      	adds	r3, r1, #1
  404caa:	3210      	adds	r2, #16
  404cac:	2b07      	cmp	r3, #7
  404cae:	9211      	str	r2, [sp, #68]	; 0x44
  404cb0:	f8ca 6000 	str.w	r6, [sl]
  404cb4:	f8ca 5004 	str.w	r5, [sl, #4]
  404cb8:	9310      	str	r3, [sp, #64]	; 0x40
  404cba:	ddee      	ble.n	404c9a <_vfiprintf_r+0x7fe>
  404cbc:	bb42      	cbnz	r2, 404d10 <_vfiprintf_r+0x874>
  404cbe:	3c10      	subs	r4, #16
  404cc0:	2c10      	cmp	r4, #16
  404cc2:	f04f 0001 	mov.w	r0, #1
  404cc6:	4611      	mov	r1, r2
  404cc8:	46ca      	mov	sl, r9
  404cca:	dced      	bgt.n	404ca8 <_vfiprintf_r+0x80c>
  404ccc:	4422      	add	r2, r4
  404cce:	2807      	cmp	r0, #7
  404cd0:	9211      	str	r2, [sp, #68]	; 0x44
  404cd2:	f8ca 6000 	str.w	r6, [sl]
  404cd6:	f8ca 4004 	str.w	r4, [sl, #4]
  404cda:	9010      	str	r0, [sp, #64]	; 0x40
  404cdc:	dd51      	ble.n	404d82 <_vfiprintf_r+0x8e6>
  404cde:	2a00      	cmp	r2, #0
  404ce0:	f040 819b 	bne.w	40501a <_vfiprintf_r+0xb7e>
  404ce4:	9b03      	ldr	r3, [sp, #12]
  404ce6:	9a08      	ldr	r2, [sp, #32]
  404ce8:	9901      	ldr	r1, [sp, #4]
  404cea:	428a      	cmp	r2, r1
  404cec:	bfac      	ite	ge
  404cee:	189b      	addge	r3, r3, r2
  404cf0:	185b      	addlt	r3, r3, r1
  404cf2:	9303      	str	r3, [sp, #12]
  404cf4:	e04e      	b.n	404d94 <_vfiprintf_r+0x8f8>
  404cf6:	aa0f      	add	r2, sp, #60	; 0x3c
  404cf8:	4651      	mov	r1, sl
  404cfa:	4638      	mov	r0, r7
  404cfc:	f7ff fb8e 	bl	40441c <__sprint_r.part.0>
  404d00:	2800      	cmp	r0, #0
  404d02:	f040 813f 	bne.w	404f84 <_vfiprintf_r+0xae8>
  404d06:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d0a:	1c48      	adds	r0, r1, #1
  404d0c:	46ce      	mov	lr, r9
  404d0e:	e77f      	b.n	404c10 <_vfiprintf_r+0x774>
  404d10:	aa0f      	add	r2, sp, #60	; 0x3c
  404d12:	4659      	mov	r1, fp
  404d14:	4638      	mov	r0, r7
  404d16:	f7ff fb81 	bl	40441c <__sprint_r.part.0>
  404d1a:	b960      	cbnz	r0, 404d36 <_vfiprintf_r+0x89a>
  404d1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d20:	1c48      	adds	r0, r1, #1
  404d22:	46ca      	mov	sl, r9
  404d24:	e7bd      	b.n	404ca2 <_vfiprintf_r+0x806>
  404d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d28:	f8dd b010 	ldr.w	fp, [sp, #16]
  404d2c:	2b00      	cmp	r3, #0
  404d2e:	f040 81d4 	bne.w	4050da <_vfiprintf_r+0xc3e>
  404d32:	2300      	movs	r3, #0
  404d34:	9310      	str	r3, [sp, #64]	; 0x40
  404d36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d3a:	f013 0f01 	tst.w	r3, #1
  404d3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d42:	d102      	bne.n	404d4a <_vfiprintf_r+0x8ae>
  404d44:	059a      	lsls	r2, r3, #22
  404d46:	f140 80de 	bpl.w	404f06 <_vfiprintf_r+0xa6a>
  404d4a:	065b      	lsls	r3, r3, #25
  404d4c:	f53f acb2 	bmi.w	4046b4 <_vfiprintf_r+0x218>
  404d50:	9803      	ldr	r0, [sp, #12]
  404d52:	b02d      	add	sp, #180	; 0xb4
  404d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d58:	2a00      	cmp	r2, #0
  404d5a:	f040 8106 	bne.w	404f6a <_vfiprintf_r+0xace>
  404d5e:	9a05      	ldr	r2, [sp, #20]
  404d60:	921d      	str	r2, [sp, #116]	; 0x74
  404d62:	2301      	movs	r3, #1
  404d64:	9211      	str	r2, [sp, #68]	; 0x44
  404d66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404d6a:	9310      	str	r3, [sp, #64]	; 0x40
  404d6c:	46ca      	mov	sl, r9
  404d6e:	f10a 0a08 	add.w	sl, sl, #8
  404d72:	9b02      	ldr	r3, [sp, #8]
  404d74:	0759      	lsls	r1, r3, #29
  404d76:	d504      	bpl.n	404d82 <_vfiprintf_r+0x8e6>
  404d78:	9b08      	ldr	r3, [sp, #32]
  404d7a:	9901      	ldr	r1, [sp, #4]
  404d7c:	1a5c      	subs	r4, r3, r1
  404d7e:	2c00      	cmp	r4, #0
  404d80:	dc81      	bgt.n	404c86 <_vfiprintf_r+0x7ea>
  404d82:	9b03      	ldr	r3, [sp, #12]
  404d84:	9908      	ldr	r1, [sp, #32]
  404d86:	9801      	ldr	r0, [sp, #4]
  404d88:	4281      	cmp	r1, r0
  404d8a:	bfac      	ite	ge
  404d8c:	185b      	addge	r3, r3, r1
  404d8e:	181b      	addlt	r3, r3, r0
  404d90:	9303      	str	r3, [sp, #12]
  404d92:	bb72      	cbnz	r2, 404df2 <_vfiprintf_r+0x956>
  404d94:	2300      	movs	r3, #0
  404d96:	9310      	str	r3, [sp, #64]	; 0x40
  404d98:	46ca      	mov	sl, r9
  404d9a:	f7ff bbbc 	b.w	404516 <_vfiprintf_r+0x7a>
  404d9e:	aa0f      	add	r2, sp, #60	; 0x3c
  404da0:	9904      	ldr	r1, [sp, #16]
  404da2:	4620      	mov	r0, r4
  404da4:	f7ff fb3a 	bl	40441c <__sprint_r.part.0>
  404da8:	bb50      	cbnz	r0, 404e00 <_vfiprintf_r+0x964>
  404daa:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dae:	f101 0e01 	add.w	lr, r1, #1
  404db2:	46cc      	mov	ip, r9
  404db4:	e548      	b.n	404848 <_vfiprintf_r+0x3ac>
  404db6:	2a00      	cmp	r2, #0
  404db8:	f040 8140 	bne.w	40503c <_vfiprintf_r+0xba0>
  404dbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404dc0:	2900      	cmp	r1, #0
  404dc2:	f000 811b 	beq.w	404ffc <_vfiprintf_r+0xb60>
  404dc6:	2201      	movs	r2, #1
  404dc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404dcc:	4610      	mov	r0, r2
  404dce:	921d      	str	r2, [sp, #116]	; 0x74
  404dd0:	911c      	str	r1, [sp, #112]	; 0x70
  404dd2:	46ca      	mov	sl, r9
  404dd4:	4601      	mov	r1, r0
  404dd6:	f10a 0a08 	add.w	sl, sl, #8
  404dda:	3001      	adds	r0, #1
  404ddc:	e507      	b.n	4047ee <_vfiprintf_r+0x352>
  404dde:	9b02      	ldr	r3, [sp, #8]
  404de0:	2a01      	cmp	r2, #1
  404de2:	f000 8098 	beq.w	404f16 <_vfiprintf_r+0xa7a>
  404de6:	2a02      	cmp	r2, #2
  404de8:	d10d      	bne.n	404e06 <_vfiprintf_r+0x96a>
  404dea:	9302      	str	r3, [sp, #8]
  404dec:	2600      	movs	r6, #0
  404dee:	2700      	movs	r7, #0
  404df0:	e5b0      	b.n	404954 <_vfiprintf_r+0x4b8>
  404df2:	aa0f      	add	r2, sp, #60	; 0x3c
  404df4:	9904      	ldr	r1, [sp, #16]
  404df6:	9806      	ldr	r0, [sp, #24]
  404df8:	f7ff fb10 	bl	40441c <__sprint_r.part.0>
  404dfc:	2800      	cmp	r0, #0
  404dfe:	d0c9      	beq.n	404d94 <_vfiprintf_r+0x8f8>
  404e00:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e04:	e797      	b.n	404d36 <_vfiprintf_r+0x89a>
  404e06:	9302      	str	r3, [sp, #8]
  404e08:	2600      	movs	r6, #0
  404e0a:	2700      	movs	r7, #0
  404e0c:	4649      	mov	r1, r9
  404e0e:	e000      	b.n	404e12 <_vfiprintf_r+0x976>
  404e10:	4659      	mov	r1, fp
  404e12:	08f2      	lsrs	r2, r6, #3
  404e14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404e18:	08f8      	lsrs	r0, r7, #3
  404e1a:	f006 0307 	and.w	r3, r6, #7
  404e1e:	4607      	mov	r7, r0
  404e20:	4616      	mov	r6, r2
  404e22:	3330      	adds	r3, #48	; 0x30
  404e24:	ea56 0207 	orrs.w	r2, r6, r7
  404e28:	f801 3c01 	strb.w	r3, [r1, #-1]
  404e2c:	f101 3bff 	add.w	fp, r1, #4294967295
  404e30:	d1ee      	bne.n	404e10 <_vfiprintf_r+0x974>
  404e32:	9a02      	ldr	r2, [sp, #8]
  404e34:	07d6      	lsls	r6, r2, #31
  404e36:	f57f ad9d 	bpl.w	404974 <_vfiprintf_r+0x4d8>
  404e3a:	2b30      	cmp	r3, #48	; 0x30
  404e3c:	f43f ad9a 	beq.w	404974 <_vfiprintf_r+0x4d8>
  404e40:	3902      	subs	r1, #2
  404e42:	2330      	movs	r3, #48	; 0x30
  404e44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404e48:	eba9 0301 	sub.w	r3, r9, r1
  404e4c:	9305      	str	r3, [sp, #20]
  404e4e:	468b      	mov	fp, r1
  404e50:	e476      	b.n	404740 <_vfiprintf_r+0x2a4>
  404e52:	9b03      	ldr	r3, [sp, #12]
  404e54:	9a08      	ldr	r2, [sp, #32]
  404e56:	428a      	cmp	r2, r1
  404e58:	bfac      	ite	ge
  404e5a:	189b      	addge	r3, r3, r2
  404e5c:	185b      	addlt	r3, r3, r1
  404e5e:	9303      	str	r3, [sp, #12]
  404e60:	e798      	b.n	404d94 <_vfiprintf_r+0x8f8>
  404e62:	2202      	movs	r2, #2
  404e64:	e44d      	b.n	404702 <_vfiprintf_r+0x266>
  404e66:	2f00      	cmp	r7, #0
  404e68:	bf08      	it	eq
  404e6a:	2e0a      	cmpeq	r6, #10
  404e6c:	d352      	bcc.n	404f14 <_vfiprintf_r+0xa78>
  404e6e:	46cb      	mov	fp, r9
  404e70:	4630      	mov	r0, r6
  404e72:	4639      	mov	r1, r7
  404e74:	220a      	movs	r2, #10
  404e76:	2300      	movs	r3, #0
  404e78:	f001 ff36 	bl	406ce8 <__aeabi_uldivmod>
  404e7c:	3230      	adds	r2, #48	; 0x30
  404e7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404e82:	4630      	mov	r0, r6
  404e84:	4639      	mov	r1, r7
  404e86:	2300      	movs	r3, #0
  404e88:	220a      	movs	r2, #10
  404e8a:	f001 ff2d 	bl	406ce8 <__aeabi_uldivmod>
  404e8e:	4606      	mov	r6, r0
  404e90:	460f      	mov	r7, r1
  404e92:	ea56 0307 	orrs.w	r3, r6, r7
  404e96:	d1eb      	bne.n	404e70 <_vfiprintf_r+0x9d4>
  404e98:	e56c      	b.n	404974 <_vfiprintf_r+0x4d8>
  404e9a:	9405      	str	r4, [sp, #20]
  404e9c:	46cb      	mov	fp, r9
  404e9e:	e44f      	b.n	404740 <_vfiprintf_r+0x2a4>
  404ea0:	aa0f      	add	r2, sp, #60	; 0x3c
  404ea2:	9904      	ldr	r1, [sp, #16]
  404ea4:	9806      	ldr	r0, [sp, #24]
  404ea6:	f7ff fab9 	bl	40441c <__sprint_r.part.0>
  404eaa:	2800      	cmp	r0, #0
  404eac:	d1a8      	bne.n	404e00 <_vfiprintf_r+0x964>
  404eae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404eb0:	46ca      	mov	sl, r9
  404eb2:	e75e      	b.n	404d72 <_vfiprintf_r+0x8d6>
  404eb4:	aa0f      	add	r2, sp, #60	; 0x3c
  404eb6:	9904      	ldr	r1, [sp, #16]
  404eb8:	9806      	ldr	r0, [sp, #24]
  404eba:	f7ff faaf 	bl	40441c <__sprint_r.part.0>
  404ebe:	2800      	cmp	r0, #0
  404ec0:	d19e      	bne.n	404e00 <_vfiprintf_r+0x964>
  404ec2:	46ca      	mov	sl, r9
  404ec4:	f7ff bbc0 	b.w	404648 <_vfiprintf_r+0x1ac>
  404ec8:	00407ec8 	.word	0x00407ec8
  404ecc:	00407eb8 	.word	0x00407eb8
  404ed0:	3104      	adds	r1, #4
  404ed2:	6816      	ldr	r6, [r2, #0]
  404ed4:	9107      	str	r1, [sp, #28]
  404ed6:	2201      	movs	r2, #1
  404ed8:	2700      	movs	r7, #0
  404eda:	e412      	b.n	404702 <_vfiprintf_r+0x266>
  404edc:	9807      	ldr	r0, [sp, #28]
  404ede:	4601      	mov	r1, r0
  404ee0:	3104      	adds	r1, #4
  404ee2:	6806      	ldr	r6, [r0, #0]
  404ee4:	9107      	str	r1, [sp, #28]
  404ee6:	2700      	movs	r7, #0
  404ee8:	e40b      	b.n	404702 <_vfiprintf_r+0x266>
  404eea:	680e      	ldr	r6, [r1, #0]
  404eec:	3104      	adds	r1, #4
  404eee:	9107      	str	r1, [sp, #28]
  404ef0:	2700      	movs	r7, #0
  404ef2:	e591      	b.n	404a18 <_vfiprintf_r+0x57c>
  404ef4:	9907      	ldr	r1, [sp, #28]
  404ef6:	680e      	ldr	r6, [r1, #0]
  404ef8:	460a      	mov	r2, r1
  404efa:	17f7      	asrs	r7, r6, #31
  404efc:	3204      	adds	r2, #4
  404efe:	9207      	str	r2, [sp, #28]
  404f00:	4630      	mov	r0, r6
  404f02:	4639      	mov	r1, r7
  404f04:	e50f      	b.n	404926 <_vfiprintf_r+0x48a>
  404f06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f0a:	f000 fe7f 	bl	405c0c <__retarget_lock_release_recursive>
  404f0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f12:	e71a      	b.n	404d4a <_vfiprintf_r+0x8ae>
  404f14:	9b02      	ldr	r3, [sp, #8]
  404f16:	9302      	str	r3, [sp, #8]
  404f18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404f1c:	3630      	adds	r6, #48	; 0x30
  404f1e:	2301      	movs	r3, #1
  404f20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404f24:	9305      	str	r3, [sp, #20]
  404f26:	e40b      	b.n	404740 <_vfiprintf_r+0x2a4>
  404f28:	aa0f      	add	r2, sp, #60	; 0x3c
  404f2a:	9904      	ldr	r1, [sp, #16]
  404f2c:	9806      	ldr	r0, [sp, #24]
  404f2e:	f7ff fa75 	bl	40441c <__sprint_r.part.0>
  404f32:	2800      	cmp	r0, #0
  404f34:	f47f af64 	bne.w	404e00 <_vfiprintf_r+0x964>
  404f38:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f3c:	1c48      	adds	r0, r1, #1
  404f3e:	46ca      	mov	sl, r9
  404f40:	e651      	b.n	404be6 <_vfiprintf_r+0x74a>
  404f42:	aa0f      	add	r2, sp, #60	; 0x3c
  404f44:	9904      	ldr	r1, [sp, #16]
  404f46:	9806      	ldr	r0, [sp, #24]
  404f48:	f7ff fa68 	bl	40441c <__sprint_r.part.0>
  404f4c:	2800      	cmp	r0, #0
  404f4e:	f47f af57 	bne.w	404e00 <_vfiprintf_r+0x964>
  404f52:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f56:	1c48      	adds	r0, r1, #1
  404f58:	46ca      	mov	sl, r9
  404f5a:	e448      	b.n	4047ee <_vfiprintf_r+0x352>
  404f5c:	2a00      	cmp	r2, #0
  404f5e:	f040 8091 	bne.w	405084 <_vfiprintf_r+0xbe8>
  404f62:	2001      	movs	r0, #1
  404f64:	4611      	mov	r1, r2
  404f66:	46ca      	mov	sl, r9
  404f68:	e641      	b.n	404bee <_vfiprintf_r+0x752>
  404f6a:	aa0f      	add	r2, sp, #60	; 0x3c
  404f6c:	9904      	ldr	r1, [sp, #16]
  404f6e:	9806      	ldr	r0, [sp, #24]
  404f70:	f7ff fa54 	bl	40441c <__sprint_r.part.0>
  404f74:	2800      	cmp	r0, #0
  404f76:	f47f af43 	bne.w	404e00 <_vfiprintf_r+0x964>
  404f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  404f7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f7e:	3001      	adds	r0, #1
  404f80:	46ca      	mov	sl, r9
  404f82:	e667      	b.n	404c54 <_vfiprintf_r+0x7b8>
  404f84:	46d3      	mov	fp, sl
  404f86:	e6d6      	b.n	404d36 <_vfiprintf_r+0x89a>
  404f88:	9e07      	ldr	r6, [sp, #28]
  404f8a:	3607      	adds	r6, #7
  404f8c:	f026 0207 	bic.w	r2, r6, #7
  404f90:	f102 0108 	add.w	r1, r2, #8
  404f94:	e9d2 6700 	ldrd	r6, r7, [r2]
  404f98:	9107      	str	r1, [sp, #28]
  404f9a:	2201      	movs	r2, #1
  404f9c:	f7ff bbb1 	b.w	404702 <_vfiprintf_r+0x266>
  404fa0:	9e07      	ldr	r6, [sp, #28]
  404fa2:	3607      	adds	r6, #7
  404fa4:	f026 0607 	bic.w	r6, r6, #7
  404fa8:	e9d6 0100 	ldrd	r0, r1, [r6]
  404fac:	f106 0208 	add.w	r2, r6, #8
  404fb0:	9207      	str	r2, [sp, #28]
  404fb2:	4606      	mov	r6, r0
  404fb4:	460f      	mov	r7, r1
  404fb6:	e4b6      	b.n	404926 <_vfiprintf_r+0x48a>
  404fb8:	9e07      	ldr	r6, [sp, #28]
  404fba:	3607      	adds	r6, #7
  404fbc:	f026 0207 	bic.w	r2, r6, #7
  404fc0:	f102 0108 	add.w	r1, r2, #8
  404fc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  404fc8:	9107      	str	r1, [sp, #28]
  404fca:	2200      	movs	r2, #0
  404fcc:	f7ff bb99 	b.w	404702 <_vfiprintf_r+0x266>
  404fd0:	9e07      	ldr	r6, [sp, #28]
  404fd2:	3607      	adds	r6, #7
  404fd4:	f026 0107 	bic.w	r1, r6, #7
  404fd8:	f101 0008 	add.w	r0, r1, #8
  404fdc:	9007      	str	r0, [sp, #28]
  404fde:	e9d1 6700 	ldrd	r6, r7, [r1]
  404fe2:	e519      	b.n	404a18 <_vfiprintf_r+0x57c>
  404fe4:	46cb      	mov	fp, r9
  404fe6:	f7ff bbab 	b.w	404740 <_vfiprintf_r+0x2a4>
  404fea:	252d      	movs	r5, #45	; 0x2d
  404fec:	4276      	negs	r6, r6
  404fee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404ff2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404ff6:	2201      	movs	r2, #1
  404ff8:	f7ff bb88 	b.w	40470c <_vfiprintf_r+0x270>
  404ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ffe:	b9b3      	cbnz	r3, 40502e <_vfiprintf_r+0xb92>
  405000:	4611      	mov	r1, r2
  405002:	2001      	movs	r0, #1
  405004:	46ca      	mov	sl, r9
  405006:	e5f2      	b.n	404bee <_vfiprintf_r+0x752>
  405008:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40500c:	f000 fdfe 	bl	405c0c <__retarget_lock_release_recursive>
  405010:	f04f 33ff 	mov.w	r3, #4294967295
  405014:	9303      	str	r3, [sp, #12]
  405016:	f7ff bb50 	b.w	4046ba <_vfiprintf_r+0x21e>
  40501a:	aa0f      	add	r2, sp, #60	; 0x3c
  40501c:	9904      	ldr	r1, [sp, #16]
  40501e:	9806      	ldr	r0, [sp, #24]
  405020:	f7ff f9fc 	bl	40441c <__sprint_r.part.0>
  405024:	2800      	cmp	r0, #0
  405026:	f47f aeeb 	bne.w	404e00 <_vfiprintf_r+0x964>
  40502a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40502c:	e6a9      	b.n	404d82 <_vfiprintf_r+0x8e6>
  40502e:	ab0e      	add	r3, sp, #56	; 0x38
  405030:	2202      	movs	r2, #2
  405032:	931c      	str	r3, [sp, #112]	; 0x70
  405034:	921d      	str	r2, [sp, #116]	; 0x74
  405036:	2001      	movs	r0, #1
  405038:	46ca      	mov	sl, r9
  40503a:	e5d0      	b.n	404bde <_vfiprintf_r+0x742>
  40503c:	aa0f      	add	r2, sp, #60	; 0x3c
  40503e:	9904      	ldr	r1, [sp, #16]
  405040:	9806      	ldr	r0, [sp, #24]
  405042:	f7ff f9eb 	bl	40441c <__sprint_r.part.0>
  405046:	2800      	cmp	r0, #0
  405048:	f47f aeda 	bne.w	404e00 <_vfiprintf_r+0x964>
  40504c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40504e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405050:	1c48      	adds	r0, r1, #1
  405052:	46ca      	mov	sl, r9
  405054:	e5a4      	b.n	404ba0 <_vfiprintf_r+0x704>
  405056:	9a07      	ldr	r2, [sp, #28]
  405058:	9903      	ldr	r1, [sp, #12]
  40505a:	6813      	ldr	r3, [r2, #0]
  40505c:	17cd      	asrs	r5, r1, #31
  40505e:	4608      	mov	r0, r1
  405060:	3204      	adds	r2, #4
  405062:	4629      	mov	r1, r5
  405064:	9207      	str	r2, [sp, #28]
  405066:	e9c3 0100 	strd	r0, r1, [r3]
  40506a:	f7ff ba54 	b.w	404516 <_vfiprintf_r+0x7a>
  40506e:	4658      	mov	r0, fp
  405070:	9607      	str	r6, [sp, #28]
  405072:	9302      	str	r3, [sp, #8]
  405074:	f7ff f964 	bl	404340 <strlen>
  405078:	2400      	movs	r4, #0
  40507a:	9005      	str	r0, [sp, #20]
  40507c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405080:	f7ff bb5e 	b.w	404740 <_vfiprintf_r+0x2a4>
  405084:	aa0f      	add	r2, sp, #60	; 0x3c
  405086:	9904      	ldr	r1, [sp, #16]
  405088:	9806      	ldr	r0, [sp, #24]
  40508a:	f7ff f9c7 	bl	40441c <__sprint_r.part.0>
  40508e:	2800      	cmp	r0, #0
  405090:	f47f aeb6 	bne.w	404e00 <_vfiprintf_r+0x964>
  405094:	9910      	ldr	r1, [sp, #64]	; 0x40
  405096:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405098:	1c48      	adds	r0, r1, #1
  40509a:	46ca      	mov	sl, r9
  40509c:	e5a7      	b.n	404bee <_vfiprintf_r+0x752>
  40509e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050a2:	4e20      	ldr	r6, [pc, #128]	; (405124 <_vfiprintf_r+0xc88>)
  4050a4:	3101      	adds	r1, #1
  4050a6:	f7ff bb90 	b.w	4047ca <_vfiprintf_r+0x32e>
  4050aa:	2c06      	cmp	r4, #6
  4050ac:	bf28      	it	cs
  4050ae:	2406      	movcs	r4, #6
  4050b0:	9405      	str	r4, [sp, #20]
  4050b2:	9607      	str	r6, [sp, #28]
  4050b4:	9401      	str	r4, [sp, #4]
  4050b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405128 <_vfiprintf_r+0xc8c>
  4050ba:	e4d5      	b.n	404a68 <_vfiprintf_r+0x5cc>
  4050bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4050be:	4e19      	ldr	r6, [pc, #100]	; (405124 <_vfiprintf_r+0xc88>)
  4050c0:	3001      	adds	r0, #1
  4050c2:	e603      	b.n	404ccc <_vfiprintf_r+0x830>
  4050c4:	9405      	str	r4, [sp, #20]
  4050c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050ca:	9607      	str	r6, [sp, #28]
  4050cc:	9302      	str	r3, [sp, #8]
  4050ce:	4604      	mov	r4, r0
  4050d0:	f7ff bb36 	b.w	404740 <_vfiprintf_r+0x2a4>
  4050d4:	4686      	mov	lr, r0
  4050d6:	f7ff bbce 	b.w	404876 <_vfiprintf_r+0x3da>
  4050da:	9806      	ldr	r0, [sp, #24]
  4050dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4050de:	4659      	mov	r1, fp
  4050e0:	f7ff f99c 	bl	40441c <__sprint_r.part.0>
  4050e4:	2800      	cmp	r0, #0
  4050e6:	f43f ae24 	beq.w	404d32 <_vfiprintf_r+0x896>
  4050ea:	e624      	b.n	404d36 <_vfiprintf_r+0x89a>
  4050ec:	9907      	ldr	r1, [sp, #28]
  4050ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4050f2:	680c      	ldr	r4, [r1, #0]
  4050f4:	3104      	adds	r1, #4
  4050f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4050fa:	46b8      	mov	r8, r7
  4050fc:	9107      	str	r1, [sp, #28]
  4050fe:	f7ff ba3f 	b.w	404580 <_vfiprintf_r+0xe4>
  405102:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405106:	e43c      	b.n	404982 <_vfiprintf_r+0x4e6>
  405108:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40510c:	e521      	b.n	404b52 <_vfiprintf_r+0x6b6>
  40510e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405112:	f7ff bbf4 	b.w	4048fe <_vfiprintf_r+0x462>
  405116:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40511a:	e491      	b.n	404a40 <_vfiprintf_r+0x5a4>
  40511c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405120:	e469      	b.n	4049f6 <_vfiprintf_r+0x55a>
  405122:	bf00      	nop
  405124:	00407eb8 	.word	0x00407eb8
  405128:	00407eb0 	.word	0x00407eb0

0040512c <__sbprintf>:
  40512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405130:	460c      	mov	r4, r1
  405132:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405136:	8989      	ldrh	r1, [r1, #12]
  405138:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40513a:	89e5      	ldrh	r5, [r4, #14]
  40513c:	9619      	str	r6, [sp, #100]	; 0x64
  40513e:	f021 0102 	bic.w	r1, r1, #2
  405142:	4606      	mov	r6, r0
  405144:	69e0      	ldr	r0, [r4, #28]
  405146:	f8ad 100c 	strh.w	r1, [sp, #12]
  40514a:	4617      	mov	r7, r2
  40514c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405150:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405152:	f8ad 500e 	strh.w	r5, [sp, #14]
  405156:	4698      	mov	r8, r3
  405158:	ad1a      	add	r5, sp, #104	; 0x68
  40515a:	2300      	movs	r3, #0
  40515c:	9007      	str	r0, [sp, #28]
  40515e:	a816      	add	r0, sp, #88	; 0x58
  405160:	9209      	str	r2, [sp, #36]	; 0x24
  405162:	9306      	str	r3, [sp, #24]
  405164:	9500      	str	r5, [sp, #0]
  405166:	9504      	str	r5, [sp, #16]
  405168:	9102      	str	r1, [sp, #8]
  40516a:	9105      	str	r1, [sp, #20]
  40516c:	f000 fd48 	bl	405c00 <__retarget_lock_init_recursive>
  405170:	4643      	mov	r3, r8
  405172:	463a      	mov	r2, r7
  405174:	4669      	mov	r1, sp
  405176:	4630      	mov	r0, r6
  405178:	f7ff f990 	bl	40449c <_vfiprintf_r>
  40517c:	1e05      	subs	r5, r0, #0
  40517e:	db07      	blt.n	405190 <__sbprintf+0x64>
  405180:	4630      	mov	r0, r6
  405182:	4669      	mov	r1, sp
  405184:	f000 f928 	bl	4053d8 <_fflush_r>
  405188:	2800      	cmp	r0, #0
  40518a:	bf18      	it	ne
  40518c:	f04f 35ff 	movne.w	r5, #4294967295
  405190:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405194:	065b      	lsls	r3, r3, #25
  405196:	d503      	bpl.n	4051a0 <__sbprintf+0x74>
  405198:	89a3      	ldrh	r3, [r4, #12]
  40519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40519e:	81a3      	strh	r3, [r4, #12]
  4051a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4051a2:	f000 fd2f 	bl	405c04 <__retarget_lock_close_recursive>
  4051a6:	4628      	mov	r0, r5
  4051a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004051b0 <__swsetup_r>:
  4051b0:	b538      	push	{r3, r4, r5, lr}
  4051b2:	4b30      	ldr	r3, [pc, #192]	; (405274 <__swsetup_r+0xc4>)
  4051b4:	681b      	ldr	r3, [r3, #0]
  4051b6:	4605      	mov	r5, r0
  4051b8:	460c      	mov	r4, r1
  4051ba:	b113      	cbz	r3, 4051c2 <__swsetup_r+0x12>
  4051bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4051be:	2a00      	cmp	r2, #0
  4051c0:	d038      	beq.n	405234 <__swsetup_r+0x84>
  4051c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4051c6:	b293      	uxth	r3, r2
  4051c8:	0718      	lsls	r0, r3, #28
  4051ca:	d50c      	bpl.n	4051e6 <__swsetup_r+0x36>
  4051cc:	6920      	ldr	r0, [r4, #16]
  4051ce:	b1a8      	cbz	r0, 4051fc <__swsetup_r+0x4c>
  4051d0:	f013 0201 	ands.w	r2, r3, #1
  4051d4:	d01e      	beq.n	405214 <__swsetup_r+0x64>
  4051d6:	6963      	ldr	r3, [r4, #20]
  4051d8:	2200      	movs	r2, #0
  4051da:	425b      	negs	r3, r3
  4051dc:	61a3      	str	r3, [r4, #24]
  4051de:	60a2      	str	r2, [r4, #8]
  4051e0:	b1f0      	cbz	r0, 405220 <__swsetup_r+0x70>
  4051e2:	2000      	movs	r0, #0
  4051e4:	bd38      	pop	{r3, r4, r5, pc}
  4051e6:	06d9      	lsls	r1, r3, #27
  4051e8:	d53c      	bpl.n	405264 <__swsetup_r+0xb4>
  4051ea:	0758      	lsls	r0, r3, #29
  4051ec:	d426      	bmi.n	40523c <__swsetup_r+0x8c>
  4051ee:	6920      	ldr	r0, [r4, #16]
  4051f0:	f042 0308 	orr.w	r3, r2, #8
  4051f4:	81a3      	strh	r3, [r4, #12]
  4051f6:	b29b      	uxth	r3, r3
  4051f8:	2800      	cmp	r0, #0
  4051fa:	d1e9      	bne.n	4051d0 <__swsetup_r+0x20>
  4051fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405200:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405204:	d0e4      	beq.n	4051d0 <__swsetup_r+0x20>
  405206:	4628      	mov	r0, r5
  405208:	4621      	mov	r1, r4
  40520a:	f000 fd2f 	bl	405c6c <__smakebuf_r>
  40520e:	89a3      	ldrh	r3, [r4, #12]
  405210:	6920      	ldr	r0, [r4, #16]
  405212:	e7dd      	b.n	4051d0 <__swsetup_r+0x20>
  405214:	0799      	lsls	r1, r3, #30
  405216:	bf58      	it	pl
  405218:	6962      	ldrpl	r2, [r4, #20]
  40521a:	60a2      	str	r2, [r4, #8]
  40521c:	2800      	cmp	r0, #0
  40521e:	d1e0      	bne.n	4051e2 <__swsetup_r+0x32>
  405220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405224:	061a      	lsls	r2, r3, #24
  405226:	d5dd      	bpl.n	4051e4 <__swsetup_r+0x34>
  405228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40522c:	81a3      	strh	r3, [r4, #12]
  40522e:	f04f 30ff 	mov.w	r0, #4294967295
  405232:	bd38      	pop	{r3, r4, r5, pc}
  405234:	4618      	mov	r0, r3
  405236:	f000 f927 	bl	405488 <__sinit>
  40523a:	e7c2      	b.n	4051c2 <__swsetup_r+0x12>
  40523c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40523e:	b151      	cbz	r1, 405256 <__swsetup_r+0xa6>
  405240:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405244:	4299      	cmp	r1, r3
  405246:	d004      	beq.n	405252 <__swsetup_r+0xa2>
  405248:	4628      	mov	r0, r5
  40524a:	f000 fa43 	bl	4056d4 <_free_r>
  40524e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405252:	2300      	movs	r3, #0
  405254:	6323      	str	r3, [r4, #48]	; 0x30
  405256:	2300      	movs	r3, #0
  405258:	6920      	ldr	r0, [r4, #16]
  40525a:	6063      	str	r3, [r4, #4]
  40525c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405260:	6020      	str	r0, [r4, #0]
  405262:	e7c5      	b.n	4051f0 <__swsetup_r+0x40>
  405264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405268:	2309      	movs	r3, #9
  40526a:	602b      	str	r3, [r5, #0]
  40526c:	f04f 30ff 	mov.w	r0, #4294967295
  405270:	81a2      	strh	r2, [r4, #12]
  405272:	bd38      	pop	{r3, r4, r5, pc}
  405274:	20400020 	.word	0x20400020

00405278 <register_fini>:
  405278:	4b02      	ldr	r3, [pc, #8]	; (405284 <register_fini+0xc>)
  40527a:	b113      	cbz	r3, 405282 <register_fini+0xa>
  40527c:	4802      	ldr	r0, [pc, #8]	; (405288 <register_fini+0x10>)
  40527e:	f000 b805 	b.w	40528c <atexit>
  405282:	4770      	bx	lr
  405284:	00000000 	.word	0x00000000
  405288:	004054f9 	.word	0x004054f9

0040528c <atexit>:
  40528c:	2300      	movs	r3, #0
  40528e:	4601      	mov	r1, r0
  405290:	461a      	mov	r2, r3
  405292:	4618      	mov	r0, r3
  405294:	f001 bc00 	b.w	406a98 <__register_exitproc>

00405298 <__sflush_r>:
  405298:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40529c:	b29a      	uxth	r2, r3
  40529e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052a2:	460d      	mov	r5, r1
  4052a4:	0711      	lsls	r1, r2, #28
  4052a6:	4680      	mov	r8, r0
  4052a8:	d43a      	bmi.n	405320 <__sflush_r+0x88>
  4052aa:	686a      	ldr	r2, [r5, #4]
  4052ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4052b0:	2a00      	cmp	r2, #0
  4052b2:	81ab      	strh	r3, [r5, #12]
  4052b4:	dd6f      	ble.n	405396 <__sflush_r+0xfe>
  4052b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4052b8:	2c00      	cmp	r4, #0
  4052ba:	d049      	beq.n	405350 <__sflush_r+0xb8>
  4052bc:	2200      	movs	r2, #0
  4052be:	b29b      	uxth	r3, r3
  4052c0:	f8d8 6000 	ldr.w	r6, [r8]
  4052c4:	f8c8 2000 	str.w	r2, [r8]
  4052c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4052cc:	d067      	beq.n	40539e <__sflush_r+0x106>
  4052ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4052d0:	075f      	lsls	r7, r3, #29
  4052d2:	d505      	bpl.n	4052e0 <__sflush_r+0x48>
  4052d4:	6869      	ldr	r1, [r5, #4]
  4052d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4052d8:	1a52      	subs	r2, r2, r1
  4052da:	b10b      	cbz	r3, 4052e0 <__sflush_r+0x48>
  4052dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4052de:	1ad2      	subs	r2, r2, r3
  4052e0:	2300      	movs	r3, #0
  4052e2:	69e9      	ldr	r1, [r5, #28]
  4052e4:	4640      	mov	r0, r8
  4052e6:	47a0      	blx	r4
  4052e8:	1c44      	adds	r4, r0, #1
  4052ea:	d03c      	beq.n	405366 <__sflush_r+0xce>
  4052ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4052f0:	692a      	ldr	r2, [r5, #16]
  4052f2:	602a      	str	r2, [r5, #0]
  4052f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4052f8:	2200      	movs	r2, #0
  4052fa:	81ab      	strh	r3, [r5, #12]
  4052fc:	04db      	lsls	r3, r3, #19
  4052fe:	606a      	str	r2, [r5, #4]
  405300:	d447      	bmi.n	405392 <__sflush_r+0xfa>
  405302:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405304:	f8c8 6000 	str.w	r6, [r8]
  405308:	b311      	cbz	r1, 405350 <__sflush_r+0xb8>
  40530a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40530e:	4299      	cmp	r1, r3
  405310:	d002      	beq.n	405318 <__sflush_r+0x80>
  405312:	4640      	mov	r0, r8
  405314:	f000 f9de 	bl	4056d4 <_free_r>
  405318:	2000      	movs	r0, #0
  40531a:	6328      	str	r0, [r5, #48]	; 0x30
  40531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405320:	692e      	ldr	r6, [r5, #16]
  405322:	b1ae      	cbz	r6, 405350 <__sflush_r+0xb8>
  405324:	682c      	ldr	r4, [r5, #0]
  405326:	602e      	str	r6, [r5, #0]
  405328:	0791      	lsls	r1, r2, #30
  40532a:	bf0c      	ite	eq
  40532c:	696b      	ldreq	r3, [r5, #20]
  40532e:	2300      	movne	r3, #0
  405330:	1ba4      	subs	r4, r4, r6
  405332:	60ab      	str	r3, [r5, #8]
  405334:	e00a      	b.n	40534c <__sflush_r+0xb4>
  405336:	4623      	mov	r3, r4
  405338:	4632      	mov	r2, r6
  40533a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40533c:	69e9      	ldr	r1, [r5, #28]
  40533e:	4640      	mov	r0, r8
  405340:	47b8      	blx	r7
  405342:	2800      	cmp	r0, #0
  405344:	eba4 0400 	sub.w	r4, r4, r0
  405348:	4406      	add	r6, r0
  40534a:	dd04      	ble.n	405356 <__sflush_r+0xbe>
  40534c:	2c00      	cmp	r4, #0
  40534e:	dcf2      	bgt.n	405336 <__sflush_r+0x9e>
  405350:	2000      	movs	r0, #0
  405352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405356:	89ab      	ldrh	r3, [r5, #12]
  405358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40535c:	81ab      	strh	r3, [r5, #12]
  40535e:	f04f 30ff 	mov.w	r0, #4294967295
  405362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405366:	f8d8 4000 	ldr.w	r4, [r8]
  40536a:	2c1d      	cmp	r4, #29
  40536c:	d8f3      	bhi.n	405356 <__sflush_r+0xbe>
  40536e:	4b19      	ldr	r3, [pc, #100]	; (4053d4 <__sflush_r+0x13c>)
  405370:	40e3      	lsrs	r3, r4
  405372:	43db      	mvns	r3, r3
  405374:	f013 0301 	ands.w	r3, r3, #1
  405378:	d1ed      	bne.n	405356 <__sflush_r+0xbe>
  40537a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40537e:	606b      	str	r3, [r5, #4]
  405380:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405384:	6929      	ldr	r1, [r5, #16]
  405386:	81ab      	strh	r3, [r5, #12]
  405388:	04da      	lsls	r2, r3, #19
  40538a:	6029      	str	r1, [r5, #0]
  40538c:	d5b9      	bpl.n	405302 <__sflush_r+0x6a>
  40538e:	2c00      	cmp	r4, #0
  405390:	d1b7      	bne.n	405302 <__sflush_r+0x6a>
  405392:	6528      	str	r0, [r5, #80]	; 0x50
  405394:	e7b5      	b.n	405302 <__sflush_r+0x6a>
  405396:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405398:	2a00      	cmp	r2, #0
  40539a:	dc8c      	bgt.n	4052b6 <__sflush_r+0x1e>
  40539c:	e7d8      	b.n	405350 <__sflush_r+0xb8>
  40539e:	2301      	movs	r3, #1
  4053a0:	69e9      	ldr	r1, [r5, #28]
  4053a2:	4640      	mov	r0, r8
  4053a4:	47a0      	blx	r4
  4053a6:	1c43      	adds	r3, r0, #1
  4053a8:	4602      	mov	r2, r0
  4053aa:	d002      	beq.n	4053b2 <__sflush_r+0x11a>
  4053ac:	89ab      	ldrh	r3, [r5, #12]
  4053ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4053b0:	e78e      	b.n	4052d0 <__sflush_r+0x38>
  4053b2:	f8d8 3000 	ldr.w	r3, [r8]
  4053b6:	2b00      	cmp	r3, #0
  4053b8:	d0f8      	beq.n	4053ac <__sflush_r+0x114>
  4053ba:	2b1d      	cmp	r3, #29
  4053bc:	d001      	beq.n	4053c2 <__sflush_r+0x12a>
  4053be:	2b16      	cmp	r3, #22
  4053c0:	d102      	bne.n	4053c8 <__sflush_r+0x130>
  4053c2:	f8c8 6000 	str.w	r6, [r8]
  4053c6:	e7c3      	b.n	405350 <__sflush_r+0xb8>
  4053c8:	89ab      	ldrh	r3, [r5, #12]
  4053ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053ce:	81ab      	strh	r3, [r5, #12]
  4053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053d4:	20400001 	.word	0x20400001

004053d8 <_fflush_r>:
  4053d8:	b538      	push	{r3, r4, r5, lr}
  4053da:	460d      	mov	r5, r1
  4053dc:	4604      	mov	r4, r0
  4053de:	b108      	cbz	r0, 4053e4 <_fflush_r+0xc>
  4053e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4053e2:	b1bb      	cbz	r3, 405414 <_fflush_r+0x3c>
  4053e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4053e8:	b188      	cbz	r0, 40540e <_fflush_r+0x36>
  4053ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4053ec:	07db      	lsls	r3, r3, #31
  4053ee:	d401      	bmi.n	4053f4 <_fflush_r+0x1c>
  4053f0:	0581      	lsls	r1, r0, #22
  4053f2:	d517      	bpl.n	405424 <_fflush_r+0x4c>
  4053f4:	4620      	mov	r0, r4
  4053f6:	4629      	mov	r1, r5
  4053f8:	f7ff ff4e 	bl	405298 <__sflush_r>
  4053fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4053fe:	07da      	lsls	r2, r3, #31
  405400:	4604      	mov	r4, r0
  405402:	d402      	bmi.n	40540a <_fflush_r+0x32>
  405404:	89ab      	ldrh	r3, [r5, #12]
  405406:	059b      	lsls	r3, r3, #22
  405408:	d507      	bpl.n	40541a <_fflush_r+0x42>
  40540a:	4620      	mov	r0, r4
  40540c:	bd38      	pop	{r3, r4, r5, pc}
  40540e:	4604      	mov	r4, r0
  405410:	4620      	mov	r0, r4
  405412:	bd38      	pop	{r3, r4, r5, pc}
  405414:	f000 f838 	bl	405488 <__sinit>
  405418:	e7e4      	b.n	4053e4 <_fflush_r+0xc>
  40541a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40541c:	f000 fbf6 	bl	405c0c <__retarget_lock_release_recursive>
  405420:	4620      	mov	r0, r4
  405422:	bd38      	pop	{r3, r4, r5, pc}
  405424:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405426:	f000 fbef 	bl	405c08 <__retarget_lock_acquire_recursive>
  40542a:	e7e3      	b.n	4053f4 <_fflush_r+0x1c>

0040542c <_cleanup_r>:
  40542c:	4901      	ldr	r1, [pc, #4]	; (405434 <_cleanup_r+0x8>)
  40542e:	f000 bbaf 	b.w	405b90 <_fwalk_reent>
  405432:	bf00      	nop
  405434:	00406b81 	.word	0x00406b81

00405438 <std.isra.0>:
  405438:	b510      	push	{r4, lr}
  40543a:	2300      	movs	r3, #0
  40543c:	4604      	mov	r4, r0
  40543e:	8181      	strh	r1, [r0, #12]
  405440:	81c2      	strh	r2, [r0, #14]
  405442:	6003      	str	r3, [r0, #0]
  405444:	6043      	str	r3, [r0, #4]
  405446:	6083      	str	r3, [r0, #8]
  405448:	6643      	str	r3, [r0, #100]	; 0x64
  40544a:	6103      	str	r3, [r0, #16]
  40544c:	6143      	str	r3, [r0, #20]
  40544e:	6183      	str	r3, [r0, #24]
  405450:	4619      	mov	r1, r3
  405452:	2208      	movs	r2, #8
  405454:	305c      	adds	r0, #92	; 0x5c
  405456:	f7fe fe43 	bl	4040e0 <memset>
  40545a:	4807      	ldr	r0, [pc, #28]	; (405478 <std.isra.0+0x40>)
  40545c:	4907      	ldr	r1, [pc, #28]	; (40547c <std.isra.0+0x44>)
  40545e:	4a08      	ldr	r2, [pc, #32]	; (405480 <std.isra.0+0x48>)
  405460:	4b08      	ldr	r3, [pc, #32]	; (405484 <std.isra.0+0x4c>)
  405462:	6220      	str	r0, [r4, #32]
  405464:	61e4      	str	r4, [r4, #28]
  405466:	6261      	str	r1, [r4, #36]	; 0x24
  405468:	62a2      	str	r2, [r4, #40]	; 0x28
  40546a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40546c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405474:	f000 bbc4 	b.w	405c00 <__retarget_lock_init_recursive>
  405478:	004068c5 	.word	0x004068c5
  40547c:	004068e9 	.word	0x004068e9
  405480:	00406925 	.word	0x00406925
  405484:	00406945 	.word	0x00406945

00405488 <__sinit>:
  405488:	b510      	push	{r4, lr}
  40548a:	4604      	mov	r4, r0
  40548c:	4812      	ldr	r0, [pc, #72]	; (4054d8 <__sinit+0x50>)
  40548e:	f000 fbbb 	bl	405c08 <__retarget_lock_acquire_recursive>
  405492:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405494:	b9d2      	cbnz	r2, 4054cc <__sinit+0x44>
  405496:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40549a:	4810      	ldr	r0, [pc, #64]	; (4054dc <__sinit+0x54>)
  40549c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4054a0:	2103      	movs	r1, #3
  4054a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4054a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4054a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4054ac:	6860      	ldr	r0, [r4, #4]
  4054ae:	2104      	movs	r1, #4
  4054b0:	f7ff ffc2 	bl	405438 <std.isra.0>
  4054b4:	2201      	movs	r2, #1
  4054b6:	2109      	movs	r1, #9
  4054b8:	68a0      	ldr	r0, [r4, #8]
  4054ba:	f7ff ffbd 	bl	405438 <std.isra.0>
  4054be:	2202      	movs	r2, #2
  4054c0:	2112      	movs	r1, #18
  4054c2:	68e0      	ldr	r0, [r4, #12]
  4054c4:	f7ff ffb8 	bl	405438 <std.isra.0>
  4054c8:	2301      	movs	r3, #1
  4054ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4054cc:	4802      	ldr	r0, [pc, #8]	; (4054d8 <__sinit+0x50>)
  4054ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4054d2:	f000 bb9b 	b.w	405c0c <__retarget_lock_release_recursive>
  4054d6:	bf00      	nop
  4054d8:	20401128 	.word	0x20401128
  4054dc:	0040542d 	.word	0x0040542d

004054e0 <__sfp_lock_acquire>:
  4054e0:	4801      	ldr	r0, [pc, #4]	; (4054e8 <__sfp_lock_acquire+0x8>)
  4054e2:	f000 bb91 	b.w	405c08 <__retarget_lock_acquire_recursive>
  4054e6:	bf00      	nop
  4054e8:	2040113c 	.word	0x2040113c

004054ec <__sfp_lock_release>:
  4054ec:	4801      	ldr	r0, [pc, #4]	; (4054f4 <__sfp_lock_release+0x8>)
  4054ee:	f000 bb8d 	b.w	405c0c <__retarget_lock_release_recursive>
  4054f2:	bf00      	nop
  4054f4:	2040113c 	.word	0x2040113c

004054f8 <__libc_fini_array>:
  4054f8:	b538      	push	{r3, r4, r5, lr}
  4054fa:	4c0a      	ldr	r4, [pc, #40]	; (405524 <__libc_fini_array+0x2c>)
  4054fc:	4d0a      	ldr	r5, [pc, #40]	; (405528 <__libc_fini_array+0x30>)
  4054fe:	1b64      	subs	r4, r4, r5
  405500:	10a4      	asrs	r4, r4, #2
  405502:	d00a      	beq.n	40551a <__libc_fini_array+0x22>
  405504:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405508:	3b01      	subs	r3, #1
  40550a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40550e:	3c01      	subs	r4, #1
  405510:	f855 3904 	ldr.w	r3, [r5], #-4
  405514:	4798      	blx	r3
  405516:	2c00      	cmp	r4, #0
  405518:	d1f9      	bne.n	40550e <__libc_fini_array+0x16>
  40551a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40551e:	f002 bd6f 	b.w	408000 <_fini>
  405522:	bf00      	nop
  405524:	00408010 	.word	0x00408010
  405528:	0040800c 	.word	0x0040800c

0040552c <__fputwc>:
  40552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405530:	b082      	sub	sp, #8
  405532:	4680      	mov	r8, r0
  405534:	4689      	mov	r9, r1
  405536:	4614      	mov	r4, r2
  405538:	f000 fb54 	bl	405be4 <__locale_mb_cur_max>
  40553c:	2801      	cmp	r0, #1
  40553e:	d036      	beq.n	4055ae <__fputwc+0x82>
  405540:	464a      	mov	r2, r9
  405542:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405546:	a901      	add	r1, sp, #4
  405548:	4640      	mov	r0, r8
  40554a:	f001 fa57 	bl	4069fc <_wcrtomb_r>
  40554e:	1c42      	adds	r2, r0, #1
  405550:	4606      	mov	r6, r0
  405552:	d025      	beq.n	4055a0 <__fputwc+0x74>
  405554:	b3a8      	cbz	r0, 4055c2 <__fputwc+0x96>
  405556:	f89d e004 	ldrb.w	lr, [sp, #4]
  40555a:	2500      	movs	r5, #0
  40555c:	f10d 0a04 	add.w	sl, sp, #4
  405560:	e009      	b.n	405576 <__fputwc+0x4a>
  405562:	6823      	ldr	r3, [r4, #0]
  405564:	1c5a      	adds	r2, r3, #1
  405566:	6022      	str	r2, [r4, #0]
  405568:	f883 e000 	strb.w	lr, [r3]
  40556c:	3501      	adds	r5, #1
  40556e:	42b5      	cmp	r5, r6
  405570:	d227      	bcs.n	4055c2 <__fputwc+0x96>
  405572:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405576:	68a3      	ldr	r3, [r4, #8]
  405578:	3b01      	subs	r3, #1
  40557a:	2b00      	cmp	r3, #0
  40557c:	60a3      	str	r3, [r4, #8]
  40557e:	daf0      	bge.n	405562 <__fputwc+0x36>
  405580:	69a7      	ldr	r7, [r4, #24]
  405582:	42bb      	cmp	r3, r7
  405584:	4671      	mov	r1, lr
  405586:	4622      	mov	r2, r4
  405588:	4640      	mov	r0, r8
  40558a:	db02      	blt.n	405592 <__fputwc+0x66>
  40558c:	f1be 0f0a 	cmp.w	lr, #10
  405590:	d1e7      	bne.n	405562 <__fputwc+0x36>
  405592:	f001 f9db 	bl	40694c <__swbuf_r>
  405596:	1c43      	adds	r3, r0, #1
  405598:	d1e8      	bne.n	40556c <__fputwc+0x40>
  40559a:	b002      	add	sp, #8
  40559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055a0:	89a3      	ldrh	r3, [r4, #12]
  4055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055a6:	81a3      	strh	r3, [r4, #12]
  4055a8:	b002      	add	sp, #8
  4055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4055b2:	2bfe      	cmp	r3, #254	; 0xfe
  4055b4:	d8c4      	bhi.n	405540 <__fputwc+0x14>
  4055b6:	fa5f fe89 	uxtb.w	lr, r9
  4055ba:	4606      	mov	r6, r0
  4055bc:	f88d e004 	strb.w	lr, [sp, #4]
  4055c0:	e7cb      	b.n	40555a <__fputwc+0x2e>
  4055c2:	4648      	mov	r0, r9
  4055c4:	b002      	add	sp, #8
  4055c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055ca:	bf00      	nop

004055cc <_fputwc_r>:
  4055cc:	b530      	push	{r4, r5, lr}
  4055ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4055d0:	f013 0f01 	tst.w	r3, #1
  4055d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4055d8:	4614      	mov	r4, r2
  4055da:	b083      	sub	sp, #12
  4055dc:	4605      	mov	r5, r0
  4055de:	b29a      	uxth	r2, r3
  4055e0:	d101      	bne.n	4055e6 <_fputwc_r+0x1a>
  4055e2:	0590      	lsls	r0, r2, #22
  4055e4:	d51c      	bpl.n	405620 <_fputwc_r+0x54>
  4055e6:	0490      	lsls	r0, r2, #18
  4055e8:	d406      	bmi.n	4055f8 <_fputwc_r+0x2c>
  4055ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4055ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4055f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4055f4:	81a3      	strh	r3, [r4, #12]
  4055f6:	6662      	str	r2, [r4, #100]	; 0x64
  4055f8:	4628      	mov	r0, r5
  4055fa:	4622      	mov	r2, r4
  4055fc:	f7ff ff96 	bl	40552c <__fputwc>
  405600:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405602:	07da      	lsls	r2, r3, #31
  405604:	4605      	mov	r5, r0
  405606:	d402      	bmi.n	40560e <_fputwc_r+0x42>
  405608:	89a3      	ldrh	r3, [r4, #12]
  40560a:	059b      	lsls	r3, r3, #22
  40560c:	d502      	bpl.n	405614 <_fputwc_r+0x48>
  40560e:	4628      	mov	r0, r5
  405610:	b003      	add	sp, #12
  405612:	bd30      	pop	{r4, r5, pc}
  405614:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405616:	f000 faf9 	bl	405c0c <__retarget_lock_release_recursive>
  40561a:	4628      	mov	r0, r5
  40561c:	b003      	add	sp, #12
  40561e:	bd30      	pop	{r4, r5, pc}
  405620:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405622:	9101      	str	r1, [sp, #4]
  405624:	f000 faf0 	bl	405c08 <__retarget_lock_acquire_recursive>
  405628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40562c:	9901      	ldr	r1, [sp, #4]
  40562e:	b29a      	uxth	r2, r3
  405630:	e7d9      	b.n	4055e6 <_fputwc_r+0x1a>
  405632:	bf00      	nop

00405634 <_malloc_trim_r>:
  405634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405636:	4f24      	ldr	r7, [pc, #144]	; (4056c8 <_malloc_trim_r+0x94>)
  405638:	460c      	mov	r4, r1
  40563a:	4606      	mov	r6, r0
  40563c:	f000 ff7e 	bl	40653c <__malloc_lock>
  405640:	68bb      	ldr	r3, [r7, #8]
  405642:	685d      	ldr	r5, [r3, #4]
  405644:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405648:	310f      	adds	r1, #15
  40564a:	f025 0503 	bic.w	r5, r5, #3
  40564e:	4429      	add	r1, r5
  405650:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405654:	f021 010f 	bic.w	r1, r1, #15
  405658:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40565c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405660:	db07      	blt.n	405672 <_malloc_trim_r+0x3e>
  405662:	2100      	movs	r1, #0
  405664:	4630      	mov	r0, r6
  405666:	f001 f91b 	bl	4068a0 <_sbrk_r>
  40566a:	68bb      	ldr	r3, [r7, #8]
  40566c:	442b      	add	r3, r5
  40566e:	4298      	cmp	r0, r3
  405670:	d004      	beq.n	40567c <_malloc_trim_r+0x48>
  405672:	4630      	mov	r0, r6
  405674:	f000 ff68 	bl	406548 <__malloc_unlock>
  405678:	2000      	movs	r0, #0
  40567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40567c:	4261      	negs	r1, r4
  40567e:	4630      	mov	r0, r6
  405680:	f001 f90e 	bl	4068a0 <_sbrk_r>
  405684:	3001      	adds	r0, #1
  405686:	d00d      	beq.n	4056a4 <_malloc_trim_r+0x70>
  405688:	4b10      	ldr	r3, [pc, #64]	; (4056cc <_malloc_trim_r+0x98>)
  40568a:	68ba      	ldr	r2, [r7, #8]
  40568c:	6819      	ldr	r1, [r3, #0]
  40568e:	1b2d      	subs	r5, r5, r4
  405690:	f045 0501 	orr.w	r5, r5, #1
  405694:	4630      	mov	r0, r6
  405696:	1b09      	subs	r1, r1, r4
  405698:	6055      	str	r5, [r2, #4]
  40569a:	6019      	str	r1, [r3, #0]
  40569c:	f000 ff54 	bl	406548 <__malloc_unlock>
  4056a0:	2001      	movs	r0, #1
  4056a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056a4:	2100      	movs	r1, #0
  4056a6:	4630      	mov	r0, r6
  4056a8:	f001 f8fa 	bl	4068a0 <_sbrk_r>
  4056ac:	68ba      	ldr	r2, [r7, #8]
  4056ae:	1a83      	subs	r3, r0, r2
  4056b0:	2b0f      	cmp	r3, #15
  4056b2:	ddde      	ble.n	405672 <_malloc_trim_r+0x3e>
  4056b4:	4c06      	ldr	r4, [pc, #24]	; (4056d0 <_malloc_trim_r+0x9c>)
  4056b6:	4905      	ldr	r1, [pc, #20]	; (4056cc <_malloc_trim_r+0x98>)
  4056b8:	6824      	ldr	r4, [r4, #0]
  4056ba:	f043 0301 	orr.w	r3, r3, #1
  4056be:	1b00      	subs	r0, r0, r4
  4056c0:	6053      	str	r3, [r2, #4]
  4056c2:	6008      	str	r0, [r1, #0]
  4056c4:	e7d5      	b.n	405672 <_malloc_trim_r+0x3e>
  4056c6:	bf00      	nop
  4056c8:	204005c0 	.word	0x204005c0
  4056cc:	2040101c 	.word	0x2040101c
  4056d0:	204009c8 	.word	0x204009c8

004056d4 <_free_r>:
  4056d4:	2900      	cmp	r1, #0
  4056d6:	d044      	beq.n	405762 <_free_r+0x8e>
  4056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056dc:	460d      	mov	r5, r1
  4056de:	4680      	mov	r8, r0
  4056e0:	f000 ff2c 	bl	40653c <__malloc_lock>
  4056e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4056e8:	4969      	ldr	r1, [pc, #420]	; (405890 <_free_r+0x1bc>)
  4056ea:	f027 0301 	bic.w	r3, r7, #1
  4056ee:	f1a5 0408 	sub.w	r4, r5, #8
  4056f2:	18e2      	adds	r2, r4, r3
  4056f4:	688e      	ldr	r6, [r1, #8]
  4056f6:	6850      	ldr	r0, [r2, #4]
  4056f8:	42b2      	cmp	r2, r6
  4056fa:	f020 0003 	bic.w	r0, r0, #3
  4056fe:	d05e      	beq.n	4057be <_free_r+0xea>
  405700:	07fe      	lsls	r6, r7, #31
  405702:	6050      	str	r0, [r2, #4]
  405704:	d40b      	bmi.n	40571e <_free_r+0x4a>
  405706:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40570a:	1be4      	subs	r4, r4, r7
  40570c:	f101 0e08 	add.w	lr, r1, #8
  405710:	68a5      	ldr	r5, [r4, #8]
  405712:	4575      	cmp	r5, lr
  405714:	443b      	add	r3, r7
  405716:	d06d      	beq.n	4057f4 <_free_r+0x120>
  405718:	68e7      	ldr	r7, [r4, #12]
  40571a:	60ef      	str	r7, [r5, #12]
  40571c:	60bd      	str	r5, [r7, #8]
  40571e:	1815      	adds	r5, r2, r0
  405720:	686d      	ldr	r5, [r5, #4]
  405722:	07ed      	lsls	r5, r5, #31
  405724:	d53e      	bpl.n	4057a4 <_free_r+0xd0>
  405726:	f043 0201 	orr.w	r2, r3, #1
  40572a:	6062      	str	r2, [r4, #4]
  40572c:	50e3      	str	r3, [r4, r3]
  40572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405732:	d217      	bcs.n	405764 <_free_r+0x90>
  405734:	08db      	lsrs	r3, r3, #3
  405736:	1c58      	adds	r0, r3, #1
  405738:	109a      	asrs	r2, r3, #2
  40573a:	684d      	ldr	r5, [r1, #4]
  40573c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405740:	60a7      	str	r7, [r4, #8]
  405742:	2301      	movs	r3, #1
  405744:	4093      	lsls	r3, r2
  405746:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40574a:	432b      	orrs	r3, r5
  40574c:	3a08      	subs	r2, #8
  40574e:	60e2      	str	r2, [r4, #12]
  405750:	604b      	str	r3, [r1, #4]
  405752:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405756:	60fc      	str	r4, [r7, #12]
  405758:	4640      	mov	r0, r8
  40575a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40575e:	f000 bef3 	b.w	406548 <__malloc_unlock>
  405762:	4770      	bx	lr
  405764:	0a5a      	lsrs	r2, r3, #9
  405766:	2a04      	cmp	r2, #4
  405768:	d852      	bhi.n	405810 <_free_r+0x13c>
  40576a:	099a      	lsrs	r2, r3, #6
  40576c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405770:	00ff      	lsls	r7, r7, #3
  405772:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405776:	19c8      	adds	r0, r1, r7
  405778:	59ca      	ldr	r2, [r1, r7]
  40577a:	3808      	subs	r0, #8
  40577c:	4290      	cmp	r0, r2
  40577e:	d04f      	beq.n	405820 <_free_r+0x14c>
  405780:	6851      	ldr	r1, [r2, #4]
  405782:	f021 0103 	bic.w	r1, r1, #3
  405786:	428b      	cmp	r3, r1
  405788:	d232      	bcs.n	4057f0 <_free_r+0x11c>
  40578a:	6892      	ldr	r2, [r2, #8]
  40578c:	4290      	cmp	r0, r2
  40578e:	d1f7      	bne.n	405780 <_free_r+0xac>
  405790:	68c3      	ldr	r3, [r0, #12]
  405792:	60a0      	str	r0, [r4, #8]
  405794:	60e3      	str	r3, [r4, #12]
  405796:	609c      	str	r4, [r3, #8]
  405798:	60c4      	str	r4, [r0, #12]
  40579a:	4640      	mov	r0, r8
  40579c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057a0:	f000 bed2 	b.w	406548 <__malloc_unlock>
  4057a4:	6895      	ldr	r5, [r2, #8]
  4057a6:	4f3b      	ldr	r7, [pc, #236]	; (405894 <_free_r+0x1c0>)
  4057a8:	42bd      	cmp	r5, r7
  4057aa:	4403      	add	r3, r0
  4057ac:	d040      	beq.n	405830 <_free_r+0x15c>
  4057ae:	68d0      	ldr	r0, [r2, #12]
  4057b0:	60e8      	str	r0, [r5, #12]
  4057b2:	f043 0201 	orr.w	r2, r3, #1
  4057b6:	6085      	str	r5, [r0, #8]
  4057b8:	6062      	str	r2, [r4, #4]
  4057ba:	50e3      	str	r3, [r4, r3]
  4057bc:	e7b7      	b.n	40572e <_free_r+0x5a>
  4057be:	07ff      	lsls	r7, r7, #31
  4057c0:	4403      	add	r3, r0
  4057c2:	d407      	bmi.n	4057d4 <_free_r+0x100>
  4057c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4057c8:	1aa4      	subs	r4, r4, r2
  4057ca:	4413      	add	r3, r2
  4057cc:	68a0      	ldr	r0, [r4, #8]
  4057ce:	68e2      	ldr	r2, [r4, #12]
  4057d0:	60c2      	str	r2, [r0, #12]
  4057d2:	6090      	str	r0, [r2, #8]
  4057d4:	4a30      	ldr	r2, [pc, #192]	; (405898 <_free_r+0x1c4>)
  4057d6:	6812      	ldr	r2, [r2, #0]
  4057d8:	f043 0001 	orr.w	r0, r3, #1
  4057dc:	4293      	cmp	r3, r2
  4057de:	6060      	str	r0, [r4, #4]
  4057e0:	608c      	str	r4, [r1, #8]
  4057e2:	d3b9      	bcc.n	405758 <_free_r+0x84>
  4057e4:	4b2d      	ldr	r3, [pc, #180]	; (40589c <_free_r+0x1c8>)
  4057e6:	4640      	mov	r0, r8
  4057e8:	6819      	ldr	r1, [r3, #0]
  4057ea:	f7ff ff23 	bl	405634 <_malloc_trim_r>
  4057ee:	e7b3      	b.n	405758 <_free_r+0x84>
  4057f0:	4610      	mov	r0, r2
  4057f2:	e7cd      	b.n	405790 <_free_r+0xbc>
  4057f4:	1811      	adds	r1, r2, r0
  4057f6:	6849      	ldr	r1, [r1, #4]
  4057f8:	07c9      	lsls	r1, r1, #31
  4057fa:	d444      	bmi.n	405886 <_free_r+0x1b2>
  4057fc:	6891      	ldr	r1, [r2, #8]
  4057fe:	68d2      	ldr	r2, [r2, #12]
  405800:	60ca      	str	r2, [r1, #12]
  405802:	4403      	add	r3, r0
  405804:	f043 0001 	orr.w	r0, r3, #1
  405808:	6091      	str	r1, [r2, #8]
  40580a:	6060      	str	r0, [r4, #4]
  40580c:	50e3      	str	r3, [r4, r3]
  40580e:	e7a3      	b.n	405758 <_free_r+0x84>
  405810:	2a14      	cmp	r2, #20
  405812:	d816      	bhi.n	405842 <_free_r+0x16e>
  405814:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405818:	00ff      	lsls	r7, r7, #3
  40581a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40581e:	e7aa      	b.n	405776 <_free_r+0xa2>
  405820:	10aa      	asrs	r2, r5, #2
  405822:	2301      	movs	r3, #1
  405824:	684d      	ldr	r5, [r1, #4]
  405826:	4093      	lsls	r3, r2
  405828:	432b      	orrs	r3, r5
  40582a:	604b      	str	r3, [r1, #4]
  40582c:	4603      	mov	r3, r0
  40582e:	e7b0      	b.n	405792 <_free_r+0xbe>
  405830:	f043 0201 	orr.w	r2, r3, #1
  405834:	614c      	str	r4, [r1, #20]
  405836:	610c      	str	r4, [r1, #16]
  405838:	60e5      	str	r5, [r4, #12]
  40583a:	60a5      	str	r5, [r4, #8]
  40583c:	6062      	str	r2, [r4, #4]
  40583e:	50e3      	str	r3, [r4, r3]
  405840:	e78a      	b.n	405758 <_free_r+0x84>
  405842:	2a54      	cmp	r2, #84	; 0x54
  405844:	d806      	bhi.n	405854 <_free_r+0x180>
  405846:	0b1a      	lsrs	r2, r3, #12
  405848:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40584c:	00ff      	lsls	r7, r7, #3
  40584e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405852:	e790      	b.n	405776 <_free_r+0xa2>
  405854:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405858:	d806      	bhi.n	405868 <_free_r+0x194>
  40585a:	0bda      	lsrs	r2, r3, #15
  40585c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405860:	00ff      	lsls	r7, r7, #3
  405862:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405866:	e786      	b.n	405776 <_free_r+0xa2>
  405868:	f240 5054 	movw	r0, #1364	; 0x554
  40586c:	4282      	cmp	r2, r0
  40586e:	d806      	bhi.n	40587e <_free_r+0x1aa>
  405870:	0c9a      	lsrs	r2, r3, #18
  405872:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405876:	00ff      	lsls	r7, r7, #3
  405878:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40587c:	e77b      	b.n	405776 <_free_r+0xa2>
  40587e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405882:	257e      	movs	r5, #126	; 0x7e
  405884:	e777      	b.n	405776 <_free_r+0xa2>
  405886:	f043 0101 	orr.w	r1, r3, #1
  40588a:	6061      	str	r1, [r4, #4]
  40588c:	6013      	str	r3, [r2, #0]
  40588e:	e763      	b.n	405758 <_free_r+0x84>
  405890:	204005c0 	.word	0x204005c0
  405894:	204005c8 	.word	0x204005c8
  405898:	204009cc 	.word	0x204009cc
  40589c:	2040104c 	.word	0x2040104c

004058a0 <__sfvwrite_r>:
  4058a0:	6893      	ldr	r3, [r2, #8]
  4058a2:	2b00      	cmp	r3, #0
  4058a4:	d073      	beq.n	40598e <__sfvwrite_r+0xee>
  4058a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058aa:	898b      	ldrh	r3, [r1, #12]
  4058ac:	b083      	sub	sp, #12
  4058ae:	460c      	mov	r4, r1
  4058b0:	0719      	lsls	r1, r3, #28
  4058b2:	9000      	str	r0, [sp, #0]
  4058b4:	4616      	mov	r6, r2
  4058b6:	d526      	bpl.n	405906 <__sfvwrite_r+0x66>
  4058b8:	6922      	ldr	r2, [r4, #16]
  4058ba:	b322      	cbz	r2, 405906 <__sfvwrite_r+0x66>
  4058bc:	f013 0002 	ands.w	r0, r3, #2
  4058c0:	6835      	ldr	r5, [r6, #0]
  4058c2:	d02c      	beq.n	40591e <__sfvwrite_r+0x7e>
  4058c4:	f04f 0900 	mov.w	r9, #0
  4058c8:	4fb0      	ldr	r7, [pc, #704]	; (405b8c <__sfvwrite_r+0x2ec>)
  4058ca:	46c8      	mov	r8, r9
  4058cc:	46b2      	mov	sl, r6
  4058ce:	45b8      	cmp	r8, r7
  4058d0:	4643      	mov	r3, r8
  4058d2:	464a      	mov	r2, r9
  4058d4:	bf28      	it	cs
  4058d6:	463b      	movcs	r3, r7
  4058d8:	9800      	ldr	r0, [sp, #0]
  4058da:	f1b8 0f00 	cmp.w	r8, #0
  4058de:	d050      	beq.n	405982 <__sfvwrite_r+0xe2>
  4058e0:	69e1      	ldr	r1, [r4, #28]
  4058e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4058e4:	47b0      	blx	r6
  4058e6:	2800      	cmp	r0, #0
  4058e8:	dd58      	ble.n	40599c <__sfvwrite_r+0xfc>
  4058ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4058ee:	1a1b      	subs	r3, r3, r0
  4058f0:	4481      	add	r9, r0
  4058f2:	eba8 0800 	sub.w	r8, r8, r0
  4058f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4058fa:	2b00      	cmp	r3, #0
  4058fc:	d1e7      	bne.n	4058ce <__sfvwrite_r+0x2e>
  4058fe:	2000      	movs	r0, #0
  405900:	b003      	add	sp, #12
  405902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405906:	4621      	mov	r1, r4
  405908:	9800      	ldr	r0, [sp, #0]
  40590a:	f7ff fc51 	bl	4051b0 <__swsetup_r>
  40590e:	2800      	cmp	r0, #0
  405910:	f040 8133 	bne.w	405b7a <__sfvwrite_r+0x2da>
  405914:	89a3      	ldrh	r3, [r4, #12]
  405916:	6835      	ldr	r5, [r6, #0]
  405918:	f013 0002 	ands.w	r0, r3, #2
  40591c:	d1d2      	bne.n	4058c4 <__sfvwrite_r+0x24>
  40591e:	f013 0901 	ands.w	r9, r3, #1
  405922:	d145      	bne.n	4059b0 <__sfvwrite_r+0x110>
  405924:	464f      	mov	r7, r9
  405926:	9601      	str	r6, [sp, #4]
  405928:	b337      	cbz	r7, 405978 <__sfvwrite_r+0xd8>
  40592a:	059a      	lsls	r2, r3, #22
  40592c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405930:	f140 8083 	bpl.w	405a3a <__sfvwrite_r+0x19a>
  405934:	4547      	cmp	r7, r8
  405936:	46c3      	mov	fp, r8
  405938:	f0c0 80ab 	bcc.w	405a92 <__sfvwrite_r+0x1f2>
  40593c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405940:	f040 80ac 	bne.w	405a9c <__sfvwrite_r+0x1fc>
  405944:	6820      	ldr	r0, [r4, #0]
  405946:	46ba      	mov	sl, r7
  405948:	465a      	mov	r2, fp
  40594a:	4649      	mov	r1, r9
  40594c:	f000 fd92 	bl	406474 <memmove>
  405950:	68a2      	ldr	r2, [r4, #8]
  405952:	6823      	ldr	r3, [r4, #0]
  405954:	eba2 0208 	sub.w	r2, r2, r8
  405958:	445b      	add	r3, fp
  40595a:	60a2      	str	r2, [r4, #8]
  40595c:	6023      	str	r3, [r4, #0]
  40595e:	9a01      	ldr	r2, [sp, #4]
  405960:	6893      	ldr	r3, [r2, #8]
  405962:	eba3 030a 	sub.w	r3, r3, sl
  405966:	44d1      	add	r9, sl
  405968:	eba7 070a 	sub.w	r7, r7, sl
  40596c:	6093      	str	r3, [r2, #8]
  40596e:	2b00      	cmp	r3, #0
  405970:	d0c5      	beq.n	4058fe <__sfvwrite_r+0x5e>
  405972:	89a3      	ldrh	r3, [r4, #12]
  405974:	2f00      	cmp	r7, #0
  405976:	d1d8      	bne.n	40592a <__sfvwrite_r+0x8a>
  405978:	f8d5 9000 	ldr.w	r9, [r5]
  40597c:	686f      	ldr	r7, [r5, #4]
  40597e:	3508      	adds	r5, #8
  405980:	e7d2      	b.n	405928 <__sfvwrite_r+0x88>
  405982:	f8d5 9000 	ldr.w	r9, [r5]
  405986:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40598a:	3508      	adds	r5, #8
  40598c:	e79f      	b.n	4058ce <__sfvwrite_r+0x2e>
  40598e:	2000      	movs	r0, #0
  405990:	4770      	bx	lr
  405992:	4621      	mov	r1, r4
  405994:	9800      	ldr	r0, [sp, #0]
  405996:	f7ff fd1f 	bl	4053d8 <_fflush_r>
  40599a:	b370      	cbz	r0, 4059fa <__sfvwrite_r+0x15a>
  40599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059a4:	f04f 30ff 	mov.w	r0, #4294967295
  4059a8:	81a3      	strh	r3, [r4, #12]
  4059aa:	b003      	add	sp, #12
  4059ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059b0:	4681      	mov	r9, r0
  4059b2:	4633      	mov	r3, r6
  4059b4:	464e      	mov	r6, r9
  4059b6:	46a8      	mov	r8, r5
  4059b8:	469a      	mov	sl, r3
  4059ba:	464d      	mov	r5, r9
  4059bc:	b34e      	cbz	r6, 405a12 <__sfvwrite_r+0x172>
  4059be:	b380      	cbz	r0, 405a22 <__sfvwrite_r+0x182>
  4059c0:	6820      	ldr	r0, [r4, #0]
  4059c2:	6923      	ldr	r3, [r4, #16]
  4059c4:	6962      	ldr	r2, [r4, #20]
  4059c6:	45b1      	cmp	r9, r6
  4059c8:	46cb      	mov	fp, r9
  4059ca:	bf28      	it	cs
  4059cc:	46b3      	movcs	fp, r6
  4059ce:	4298      	cmp	r0, r3
  4059d0:	465f      	mov	r7, fp
  4059d2:	d904      	bls.n	4059de <__sfvwrite_r+0x13e>
  4059d4:	68a3      	ldr	r3, [r4, #8]
  4059d6:	4413      	add	r3, r2
  4059d8:	459b      	cmp	fp, r3
  4059da:	f300 80a6 	bgt.w	405b2a <__sfvwrite_r+0x28a>
  4059de:	4593      	cmp	fp, r2
  4059e0:	db4b      	blt.n	405a7a <__sfvwrite_r+0x1da>
  4059e2:	4613      	mov	r3, r2
  4059e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4059e6:	69e1      	ldr	r1, [r4, #28]
  4059e8:	9800      	ldr	r0, [sp, #0]
  4059ea:	462a      	mov	r2, r5
  4059ec:	47b8      	blx	r7
  4059ee:	1e07      	subs	r7, r0, #0
  4059f0:	ddd4      	ble.n	40599c <__sfvwrite_r+0xfc>
  4059f2:	ebb9 0907 	subs.w	r9, r9, r7
  4059f6:	d0cc      	beq.n	405992 <__sfvwrite_r+0xf2>
  4059f8:	2001      	movs	r0, #1
  4059fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4059fe:	1bdb      	subs	r3, r3, r7
  405a00:	443d      	add	r5, r7
  405a02:	1bf6      	subs	r6, r6, r7
  405a04:	f8ca 3008 	str.w	r3, [sl, #8]
  405a08:	2b00      	cmp	r3, #0
  405a0a:	f43f af78 	beq.w	4058fe <__sfvwrite_r+0x5e>
  405a0e:	2e00      	cmp	r6, #0
  405a10:	d1d5      	bne.n	4059be <__sfvwrite_r+0x11e>
  405a12:	f108 0308 	add.w	r3, r8, #8
  405a16:	e913 0060 	ldmdb	r3, {r5, r6}
  405a1a:	4698      	mov	r8, r3
  405a1c:	3308      	adds	r3, #8
  405a1e:	2e00      	cmp	r6, #0
  405a20:	d0f9      	beq.n	405a16 <__sfvwrite_r+0x176>
  405a22:	4632      	mov	r2, r6
  405a24:	210a      	movs	r1, #10
  405a26:	4628      	mov	r0, r5
  405a28:	f000 fc3a 	bl	4062a0 <memchr>
  405a2c:	2800      	cmp	r0, #0
  405a2e:	f000 80a1 	beq.w	405b74 <__sfvwrite_r+0x2d4>
  405a32:	3001      	adds	r0, #1
  405a34:	eba0 0905 	sub.w	r9, r0, r5
  405a38:	e7c2      	b.n	4059c0 <__sfvwrite_r+0x120>
  405a3a:	6820      	ldr	r0, [r4, #0]
  405a3c:	6923      	ldr	r3, [r4, #16]
  405a3e:	4298      	cmp	r0, r3
  405a40:	d802      	bhi.n	405a48 <__sfvwrite_r+0x1a8>
  405a42:	6963      	ldr	r3, [r4, #20]
  405a44:	429f      	cmp	r7, r3
  405a46:	d25d      	bcs.n	405b04 <__sfvwrite_r+0x264>
  405a48:	45b8      	cmp	r8, r7
  405a4a:	bf28      	it	cs
  405a4c:	46b8      	movcs	r8, r7
  405a4e:	4642      	mov	r2, r8
  405a50:	4649      	mov	r1, r9
  405a52:	f000 fd0f 	bl	406474 <memmove>
  405a56:	68a3      	ldr	r3, [r4, #8]
  405a58:	6822      	ldr	r2, [r4, #0]
  405a5a:	eba3 0308 	sub.w	r3, r3, r8
  405a5e:	4442      	add	r2, r8
  405a60:	60a3      	str	r3, [r4, #8]
  405a62:	6022      	str	r2, [r4, #0]
  405a64:	b10b      	cbz	r3, 405a6a <__sfvwrite_r+0x1ca>
  405a66:	46c2      	mov	sl, r8
  405a68:	e779      	b.n	40595e <__sfvwrite_r+0xbe>
  405a6a:	4621      	mov	r1, r4
  405a6c:	9800      	ldr	r0, [sp, #0]
  405a6e:	f7ff fcb3 	bl	4053d8 <_fflush_r>
  405a72:	2800      	cmp	r0, #0
  405a74:	d192      	bne.n	40599c <__sfvwrite_r+0xfc>
  405a76:	46c2      	mov	sl, r8
  405a78:	e771      	b.n	40595e <__sfvwrite_r+0xbe>
  405a7a:	465a      	mov	r2, fp
  405a7c:	4629      	mov	r1, r5
  405a7e:	f000 fcf9 	bl	406474 <memmove>
  405a82:	68a2      	ldr	r2, [r4, #8]
  405a84:	6823      	ldr	r3, [r4, #0]
  405a86:	eba2 020b 	sub.w	r2, r2, fp
  405a8a:	445b      	add	r3, fp
  405a8c:	60a2      	str	r2, [r4, #8]
  405a8e:	6023      	str	r3, [r4, #0]
  405a90:	e7af      	b.n	4059f2 <__sfvwrite_r+0x152>
  405a92:	6820      	ldr	r0, [r4, #0]
  405a94:	46b8      	mov	r8, r7
  405a96:	46ba      	mov	sl, r7
  405a98:	46bb      	mov	fp, r7
  405a9a:	e755      	b.n	405948 <__sfvwrite_r+0xa8>
  405a9c:	6962      	ldr	r2, [r4, #20]
  405a9e:	6820      	ldr	r0, [r4, #0]
  405aa0:	6921      	ldr	r1, [r4, #16]
  405aa2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405aa6:	eba0 0a01 	sub.w	sl, r0, r1
  405aaa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405aae:	f10a 0001 	add.w	r0, sl, #1
  405ab2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405ab6:	4438      	add	r0, r7
  405ab8:	4540      	cmp	r0, r8
  405aba:	4642      	mov	r2, r8
  405abc:	bf84      	itt	hi
  405abe:	4680      	movhi	r8, r0
  405ac0:	4642      	movhi	r2, r8
  405ac2:	055b      	lsls	r3, r3, #21
  405ac4:	d544      	bpl.n	405b50 <__sfvwrite_r+0x2b0>
  405ac6:	4611      	mov	r1, r2
  405ac8:	9800      	ldr	r0, [sp, #0]
  405aca:	f000 f921 	bl	405d10 <_malloc_r>
  405ace:	4683      	mov	fp, r0
  405ad0:	2800      	cmp	r0, #0
  405ad2:	d055      	beq.n	405b80 <__sfvwrite_r+0x2e0>
  405ad4:	4652      	mov	r2, sl
  405ad6:	6921      	ldr	r1, [r4, #16]
  405ad8:	f000 fc32 	bl	406340 <memcpy>
  405adc:	89a3      	ldrh	r3, [r4, #12]
  405ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ae6:	81a3      	strh	r3, [r4, #12]
  405ae8:	eb0b 000a 	add.w	r0, fp, sl
  405aec:	eba8 030a 	sub.w	r3, r8, sl
  405af0:	f8c4 b010 	str.w	fp, [r4, #16]
  405af4:	f8c4 8014 	str.w	r8, [r4, #20]
  405af8:	6020      	str	r0, [r4, #0]
  405afa:	60a3      	str	r3, [r4, #8]
  405afc:	46b8      	mov	r8, r7
  405afe:	46ba      	mov	sl, r7
  405b00:	46bb      	mov	fp, r7
  405b02:	e721      	b.n	405948 <__sfvwrite_r+0xa8>
  405b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405b08:	42b9      	cmp	r1, r7
  405b0a:	bf28      	it	cs
  405b0c:	4639      	movcs	r1, r7
  405b0e:	464a      	mov	r2, r9
  405b10:	fb91 f1f3 	sdiv	r1, r1, r3
  405b14:	9800      	ldr	r0, [sp, #0]
  405b16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405b18:	fb03 f301 	mul.w	r3, r3, r1
  405b1c:	69e1      	ldr	r1, [r4, #28]
  405b1e:	47b0      	blx	r6
  405b20:	f1b0 0a00 	subs.w	sl, r0, #0
  405b24:	f73f af1b 	bgt.w	40595e <__sfvwrite_r+0xbe>
  405b28:	e738      	b.n	40599c <__sfvwrite_r+0xfc>
  405b2a:	461a      	mov	r2, r3
  405b2c:	4629      	mov	r1, r5
  405b2e:	9301      	str	r3, [sp, #4]
  405b30:	f000 fca0 	bl	406474 <memmove>
  405b34:	6822      	ldr	r2, [r4, #0]
  405b36:	9b01      	ldr	r3, [sp, #4]
  405b38:	9800      	ldr	r0, [sp, #0]
  405b3a:	441a      	add	r2, r3
  405b3c:	6022      	str	r2, [r4, #0]
  405b3e:	4621      	mov	r1, r4
  405b40:	f7ff fc4a 	bl	4053d8 <_fflush_r>
  405b44:	9b01      	ldr	r3, [sp, #4]
  405b46:	2800      	cmp	r0, #0
  405b48:	f47f af28 	bne.w	40599c <__sfvwrite_r+0xfc>
  405b4c:	461f      	mov	r7, r3
  405b4e:	e750      	b.n	4059f2 <__sfvwrite_r+0x152>
  405b50:	9800      	ldr	r0, [sp, #0]
  405b52:	f000 fcff 	bl	406554 <_realloc_r>
  405b56:	4683      	mov	fp, r0
  405b58:	2800      	cmp	r0, #0
  405b5a:	d1c5      	bne.n	405ae8 <__sfvwrite_r+0x248>
  405b5c:	9d00      	ldr	r5, [sp, #0]
  405b5e:	6921      	ldr	r1, [r4, #16]
  405b60:	4628      	mov	r0, r5
  405b62:	f7ff fdb7 	bl	4056d4 <_free_r>
  405b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b6a:	220c      	movs	r2, #12
  405b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405b70:	602a      	str	r2, [r5, #0]
  405b72:	e715      	b.n	4059a0 <__sfvwrite_r+0x100>
  405b74:	f106 0901 	add.w	r9, r6, #1
  405b78:	e722      	b.n	4059c0 <__sfvwrite_r+0x120>
  405b7a:	f04f 30ff 	mov.w	r0, #4294967295
  405b7e:	e6bf      	b.n	405900 <__sfvwrite_r+0x60>
  405b80:	9a00      	ldr	r2, [sp, #0]
  405b82:	230c      	movs	r3, #12
  405b84:	6013      	str	r3, [r2, #0]
  405b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b8a:	e709      	b.n	4059a0 <__sfvwrite_r+0x100>
  405b8c:	7ffffc00 	.word	0x7ffffc00

00405b90 <_fwalk_reent>:
  405b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405b94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405b98:	d01f      	beq.n	405bda <_fwalk_reent+0x4a>
  405b9a:	4688      	mov	r8, r1
  405b9c:	4606      	mov	r6, r0
  405b9e:	f04f 0900 	mov.w	r9, #0
  405ba2:	687d      	ldr	r5, [r7, #4]
  405ba4:	68bc      	ldr	r4, [r7, #8]
  405ba6:	3d01      	subs	r5, #1
  405ba8:	d411      	bmi.n	405bce <_fwalk_reent+0x3e>
  405baa:	89a3      	ldrh	r3, [r4, #12]
  405bac:	2b01      	cmp	r3, #1
  405bae:	f105 35ff 	add.w	r5, r5, #4294967295
  405bb2:	d908      	bls.n	405bc6 <_fwalk_reent+0x36>
  405bb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405bb8:	3301      	adds	r3, #1
  405bba:	4621      	mov	r1, r4
  405bbc:	4630      	mov	r0, r6
  405bbe:	d002      	beq.n	405bc6 <_fwalk_reent+0x36>
  405bc0:	47c0      	blx	r8
  405bc2:	ea49 0900 	orr.w	r9, r9, r0
  405bc6:	1c6b      	adds	r3, r5, #1
  405bc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405bcc:	d1ed      	bne.n	405baa <_fwalk_reent+0x1a>
  405bce:	683f      	ldr	r7, [r7, #0]
  405bd0:	2f00      	cmp	r7, #0
  405bd2:	d1e6      	bne.n	405ba2 <_fwalk_reent+0x12>
  405bd4:	4648      	mov	r0, r9
  405bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405bda:	46b9      	mov	r9, r7
  405bdc:	4648      	mov	r0, r9
  405bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405be2:	bf00      	nop

00405be4 <__locale_mb_cur_max>:
  405be4:	4b04      	ldr	r3, [pc, #16]	; (405bf8 <__locale_mb_cur_max+0x14>)
  405be6:	4a05      	ldr	r2, [pc, #20]	; (405bfc <__locale_mb_cur_max+0x18>)
  405be8:	681b      	ldr	r3, [r3, #0]
  405bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405bec:	2b00      	cmp	r3, #0
  405bee:	bf08      	it	eq
  405bf0:	4613      	moveq	r3, r2
  405bf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405bf6:	4770      	bx	lr
  405bf8:	20400020 	.word	0x20400020
  405bfc:	20400454 	.word	0x20400454

00405c00 <__retarget_lock_init_recursive>:
  405c00:	4770      	bx	lr
  405c02:	bf00      	nop

00405c04 <__retarget_lock_close_recursive>:
  405c04:	4770      	bx	lr
  405c06:	bf00      	nop

00405c08 <__retarget_lock_acquire_recursive>:
  405c08:	4770      	bx	lr
  405c0a:	bf00      	nop

00405c0c <__retarget_lock_release_recursive>:
  405c0c:	4770      	bx	lr
  405c0e:	bf00      	nop

00405c10 <__swhatbuf_r>:
  405c10:	b570      	push	{r4, r5, r6, lr}
  405c12:	460c      	mov	r4, r1
  405c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c18:	2900      	cmp	r1, #0
  405c1a:	b090      	sub	sp, #64	; 0x40
  405c1c:	4615      	mov	r5, r2
  405c1e:	461e      	mov	r6, r3
  405c20:	db14      	blt.n	405c4c <__swhatbuf_r+0x3c>
  405c22:	aa01      	add	r2, sp, #4
  405c24:	f001 f80e 	bl	406c44 <_fstat_r>
  405c28:	2800      	cmp	r0, #0
  405c2a:	db0f      	blt.n	405c4c <__swhatbuf_r+0x3c>
  405c2c:	9a02      	ldr	r2, [sp, #8]
  405c2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405c32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405c36:	fab2 f282 	clz	r2, r2
  405c3a:	0952      	lsrs	r2, r2, #5
  405c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405c44:	6032      	str	r2, [r6, #0]
  405c46:	602b      	str	r3, [r5, #0]
  405c48:	b010      	add	sp, #64	; 0x40
  405c4a:	bd70      	pop	{r4, r5, r6, pc}
  405c4c:	89a2      	ldrh	r2, [r4, #12]
  405c4e:	2300      	movs	r3, #0
  405c50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405c54:	6033      	str	r3, [r6, #0]
  405c56:	d004      	beq.n	405c62 <__swhatbuf_r+0x52>
  405c58:	2240      	movs	r2, #64	; 0x40
  405c5a:	4618      	mov	r0, r3
  405c5c:	602a      	str	r2, [r5, #0]
  405c5e:	b010      	add	sp, #64	; 0x40
  405c60:	bd70      	pop	{r4, r5, r6, pc}
  405c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c66:	602b      	str	r3, [r5, #0]
  405c68:	b010      	add	sp, #64	; 0x40
  405c6a:	bd70      	pop	{r4, r5, r6, pc}

00405c6c <__smakebuf_r>:
  405c6c:	898a      	ldrh	r2, [r1, #12]
  405c6e:	0792      	lsls	r2, r2, #30
  405c70:	460b      	mov	r3, r1
  405c72:	d506      	bpl.n	405c82 <__smakebuf_r+0x16>
  405c74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405c78:	2101      	movs	r1, #1
  405c7a:	601a      	str	r2, [r3, #0]
  405c7c:	611a      	str	r2, [r3, #16]
  405c7e:	6159      	str	r1, [r3, #20]
  405c80:	4770      	bx	lr
  405c82:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c84:	b083      	sub	sp, #12
  405c86:	ab01      	add	r3, sp, #4
  405c88:	466a      	mov	r2, sp
  405c8a:	460c      	mov	r4, r1
  405c8c:	4606      	mov	r6, r0
  405c8e:	f7ff ffbf 	bl	405c10 <__swhatbuf_r>
  405c92:	9900      	ldr	r1, [sp, #0]
  405c94:	4605      	mov	r5, r0
  405c96:	4630      	mov	r0, r6
  405c98:	f000 f83a 	bl	405d10 <_malloc_r>
  405c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ca0:	b1d8      	cbz	r0, 405cda <__smakebuf_r+0x6e>
  405ca2:	9a01      	ldr	r2, [sp, #4]
  405ca4:	4f15      	ldr	r7, [pc, #84]	; (405cfc <__smakebuf_r+0x90>)
  405ca6:	9900      	ldr	r1, [sp, #0]
  405ca8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405cae:	81a3      	strh	r3, [r4, #12]
  405cb0:	6020      	str	r0, [r4, #0]
  405cb2:	6120      	str	r0, [r4, #16]
  405cb4:	6161      	str	r1, [r4, #20]
  405cb6:	b91a      	cbnz	r2, 405cc0 <__smakebuf_r+0x54>
  405cb8:	432b      	orrs	r3, r5
  405cba:	81a3      	strh	r3, [r4, #12]
  405cbc:	b003      	add	sp, #12
  405cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cc0:	4630      	mov	r0, r6
  405cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405cc6:	f000 ffd1 	bl	406c6c <_isatty_r>
  405cca:	b1a0      	cbz	r0, 405cf6 <__smakebuf_r+0x8a>
  405ccc:	89a3      	ldrh	r3, [r4, #12]
  405cce:	f023 0303 	bic.w	r3, r3, #3
  405cd2:	f043 0301 	orr.w	r3, r3, #1
  405cd6:	b21b      	sxth	r3, r3
  405cd8:	e7ee      	b.n	405cb8 <__smakebuf_r+0x4c>
  405cda:	059a      	lsls	r2, r3, #22
  405cdc:	d4ee      	bmi.n	405cbc <__smakebuf_r+0x50>
  405cde:	f023 0303 	bic.w	r3, r3, #3
  405ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405ce6:	f043 0302 	orr.w	r3, r3, #2
  405cea:	2101      	movs	r1, #1
  405cec:	81a3      	strh	r3, [r4, #12]
  405cee:	6022      	str	r2, [r4, #0]
  405cf0:	6122      	str	r2, [r4, #16]
  405cf2:	6161      	str	r1, [r4, #20]
  405cf4:	e7e2      	b.n	405cbc <__smakebuf_r+0x50>
  405cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405cfa:	e7dd      	b.n	405cb8 <__smakebuf_r+0x4c>
  405cfc:	0040542d 	.word	0x0040542d

00405d00 <malloc>:
  405d00:	4b02      	ldr	r3, [pc, #8]	; (405d0c <malloc+0xc>)
  405d02:	4601      	mov	r1, r0
  405d04:	6818      	ldr	r0, [r3, #0]
  405d06:	f000 b803 	b.w	405d10 <_malloc_r>
  405d0a:	bf00      	nop
  405d0c:	20400020 	.word	0x20400020

00405d10 <_malloc_r>:
  405d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d14:	f101 060b 	add.w	r6, r1, #11
  405d18:	2e16      	cmp	r6, #22
  405d1a:	b083      	sub	sp, #12
  405d1c:	4605      	mov	r5, r0
  405d1e:	f240 809e 	bls.w	405e5e <_malloc_r+0x14e>
  405d22:	f036 0607 	bics.w	r6, r6, #7
  405d26:	f100 80bd 	bmi.w	405ea4 <_malloc_r+0x194>
  405d2a:	42b1      	cmp	r1, r6
  405d2c:	f200 80ba 	bhi.w	405ea4 <_malloc_r+0x194>
  405d30:	f000 fc04 	bl	40653c <__malloc_lock>
  405d34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405d38:	f0c0 8293 	bcc.w	406262 <_malloc_r+0x552>
  405d3c:	0a73      	lsrs	r3, r6, #9
  405d3e:	f000 80b8 	beq.w	405eb2 <_malloc_r+0x1a2>
  405d42:	2b04      	cmp	r3, #4
  405d44:	f200 8179 	bhi.w	40603a <_malloc_r+0x32a>
  405d48:	09b3      	lsrs	r3, r6, #6
  405d4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405d4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405d52:	00c3      	lsls	r3, r0, #3
  405d54:	4fbf      	ldr	r7, [pc, #764]	; (406054 <_malloc_r+0x344>)
  405d56:	443b      	add	r3, r7
  405d58:	f1a3 0108 	sub.w	r1, r3, #8
  405d5c:	685c      	ldr	r4, [r3, #4]
  405d5e:	42a1      	cmp	r1, r4
  405d60:	d106      	bne.n	405d70 <_malloc_r+0x60>
  405d62:	e00c      	b.n	405d7e <_malloc_r+0x6e>
  405d64:	2a00      	cmp	r2, #0
  405d66:	f280 80aa 	bge.w	405ebe <_malloc_r+0x1ae>
  405d6a:	68e4      	ldr	r4, [r4, #12]
  405d6c:	42a1      	cmp	r1, r4
  405d6e:	d006      	beq.n	405d7e <_malloc_r+0x6e>
  405d70:	6863      	ldr	r3, [r4, #4]
  405d72:	f023 0303 	bic.w	r3, r3, #3
  405d76:	1b9a      	subs	r2, r3, r6
  405d78:	2a0f      	cmp	r2, #15
  405d7a:	ddf3      	ble.n	405d64 <_malloc_r+0x54>
  405d7c:	4670      	mov	r0, lr
  405d7e:	693c      	ldr	r4, [r7, #16]
  405d80:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406068 <_malloc_r+0x358>
  405d84:	4574      	cmp	r4, lr
  405d86:	f000 81ab 	beq.w	4060e0 <_malloc_r+0x3d0>
  405d8a:	6863      	ldr	r3, [r4, #4]
  405d8c:	f023 0303 	bic.w	r3, r3, #3
  405d90:	1b9a      	subs	r2, r3, r6
  405d92:	2a0f      	cmp	r2, #15
  405d94:	f300 8190 	bgt.w	4060b8 <_malloc_r+0x3a8>
  405d98:	2a00      	cmp	r2, #0
  405d9a:	f8c7 e014 	str.w	lr, [r7, #20]
  405d9e:	f8c7 e010 	str.w	lr, [r7, #16]
  405da2:	f280 809d 	bge.w	405ee0 <_malloc_r+0x1d0>
  405da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405daa:	f080 8161 	bcs.w	406070 <_malloc_r+0x360>
  405dae:	08db      	lsrs	r3, r3, #3
  405db0:	f103 0c01 	add.w	ip, r3, #1
  405db4:	1099      	asrs	r1, r3, #2
  405db6:	687a      	ldr	r2, [r7, #4]
  405db8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405dbc:	f8c4 8008 	str.w	r8, [r4, #8]
  405dc0:	2301      	movs	r3, #1
  405dc2:	408b      	lsls	r3, r1
  405dc4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405dc8:	4313      	orrs	r3, r2
  405dca:	3908      	subs	r1, #8
  405dcc:	60e1      	str	r1, [r4, #12]
  405dce:	607b      	str	r3, [r7, #4]
  405dd0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405dd4:	f8c8 400c 	str.w	r4, [r8, #12]
  405dd8:	1082      	asrs	r2, r0, #2
  405dda:	2401      	movs	r4, #1
  405ddc:	4094      	lsls	r4, r2
  405dde:	429c      	cmp	r4, r3
  405de0:	f200 808b 	bhi.w	405efa <_malloc_r+0x1ea>
  405de4:	421c      	tst	r4, r3
  405de6:	d106      	bne.n	405df6 <_malloc_r+0xe6>
  405de8:	f020 0003 	bic.w	r0, r0, #3
  405dec:	0064      	lsls	r4, r4, #1
  405dee:	421c      	tst	r4, r3
  405df0:	f100 0004 	add.w	r0, r0, #4
  405df4:	d0fa      	beq.n	405dec <_malloc_r+0xdc>
  405df6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405dfa:	46cc      	mov	ip, r9
  405dfc:	4680      	mov	r8, r0
  405dfe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405e02:	459c      	cmp	ip, r3
  405e04:	d107      	bne.n	405e16 <_malloc_r+0x106>
  405e06:	e16d      	b.n	4060e4 <_malloc_r+0x3d4>
  405e08:	2a00      	cmp	r2, #0
  405e0a:	f280 817b 	bge.w	406104 <_malloc_r+0x3f4>
  405e0e:	68db      	ldr	r3, [r3, #12]
  405e10:	459c      	cmp	ip, r3
  405e12:	f000 8167 	beq.w	4060e4 <_malloc_r+0x3d4>
  405e16:	6859      	ldr	r1, [r3, #4]
  405e18:	f021 0103 	bic.w	r1, r1, #3
  405e1c:	1b8a      	subs	r2, r1, r6
  405e1e:	2a0f      	cmp	r2, #15
  405e20:	ddf2      	ble.n	405e08 <_malloc_r+0xf8>
  405e22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405e26:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405e2a:	9300      	str	r3, [sp, #0]
  405e2c:	199c      	adds	r4, r3, r6
  405e2e:	4628      	mov	r0, r5
  405e30:	f046 0601 	orr.w	r6, r6, #1
  405e34:	f042 0501 	orr.w	r5, r2, #1
  405e38:	605e      	str	r6, [r3, #4]
  405e3a:	f8c8 c00c 	str.w	ip, [r8, #12]
  405e3e:	f8cc 8008 	str.w	r8, [ip, #8]
  405e42:	617c      	str	r4, [r7, #20]
  405e44:	613c      	str	r4, [r7, #16]
  405e46:	f8c4 e00c 	str.w	lr, [r4, #12]
  405e4a:	f8c4 e008 	str.w	lr, [r4, #8]
  405e4e:	6065      	str	r5, [r4, #4]
  405e50:	505a      	str	r2, [r3, r1]
  405e52:	f000 fb79 	bl	406548 <__malloc_unlock>
  405e56:	9b00      	ldr	r3, [sp, #0]
  405e58:	f103 0408 	add.w	r4, r3, #8
  405e5c:	e01e      	b.n	405e9c <_malloc_r+0x18c>
  405e5e:	2910      	cmp	r1, #16
  405e60:	d820      	bhi.n	405ea4 <_malloc_r+0x194>
  405e62:	f000 fb6b 	bl	40653c <__malloc_lock>
  405e66:	2610      	movs	r6, #16
  405e68:	2318      	movs	r3, #24
  405e6a:	2002      	movs	r0, #2
  405e6c:	4f79      	ldr	r7, [pc, #484]	; (406054 <_malloc_r+0x344>)
  405e6e:	443b      	add	r3, r7
  405e70:	f1a3 0208 	sub.w	r2, r3, #8
  405e74:	685c      	ldr	r4, [r3, #4]
  405e76:	4294      	cmp	r4, r2
  405e78:	f000 813d 	beq.w	4060f6 <_malloc_r+0x3e6>
  405e7c:	6863      	ldr	r3, [r4, #4]
  405e7e:	68e1      	ldr	r1, [r4, #12]
  405e80:	68a6      	ldr	r6, [r4, #8]
  405e82:	f023 0303 	bic.w	r3, r3, #3
  405e86:	4423      	add	r3, r4
  405e88:	4628      	mov	r0, r5
  405e8a:	685a      	ldr	r2, [r3, #4]
  405e8c:	60f1      	str	r1, [r6, #12]
  405e8e:	f042 0201 	orr.w	r2, r2, #1
  405e92:	608e      	str	r6, [r1, #8]
  405e94:	605a      	str	r2, [r3, #4]
  405e96:	f000 fb57 	bl	406548 <__malloc_unlock>
  405e9a:	3408      	adds	r4, #8
  405e9c:	4620      	mov	r0, r4
  405e9e:	b003      	add	sp, #12
  405ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ea4:	2400      	movs	r4, #0
  405ea6:	230c      	movs	r3, #12
  405ea8:	4620      	mov	r0, r4
  405eaa:	602b      	str	r3, [r5, #0]
  405eac:	b003      	add	sp, #12
  405eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405eb2:	2040      	movs	r0, #64	; 0x40
  405eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
  405eb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405ebc:	e74a      	b.n	405d54 <_malloc_r+0x44>
  405ebe:	4423      	add	r3, r4
  405ec0:	68e1      	ldr	r1, [r4, #12]
  405ec2:	685a      	ldr	r2, [r3, #4]
  405ec4:	68a6      	ldr	r6, [r4, #8]
  405ec6:	f042 0201 	orr.w	r2, r2, #1
  405eca:	60f1      	str	r1, [r6, #12]
  405ecc:	4628      	mov	r0, r5
  405ece:	608e      	str	r6, [r1, #8]
  405ed0:	605a      	str	r2, [r3, #4]
  405ed2:	f000 fb39 	bl	406548 <__malloc_unlock>
  405ed6:	3408      	adds	r4, #8
  405ed8:	4620      	mov	r0, r4
  405eda:	b003      	add	sp, #12
  405edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ee0:	4423      	add	r3, r4
  405ee2:	4628      	mov	r0, r5
  405ee4:	685a      	ldr	r2, [r3, #4]
  405ee6:	f042 0201 	orr.w	r2, r2, #1
  405eea:	605a      	str	r2, [r3, #4]
  405eec:	f000 fb2c 	bl	406548 <__malloc_unlock>
  405ef0:	3408      	adds	r4, #8
  405ef2:	4620      	mov	r0, r4
  405ef4:	b003      	add	sp, #12
  405ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405efa:	68bc      	ldr	r4, [r7, #8]
  405efc:	6863      	ldr	r3, [r4, #4]
  405efe:	f023 0803 	bic.w	r8, r3, #3
  405f02:	45b0      	cmp	r8, r6
  405f04:	d304      	bcc.n	405f10 <_malloc_r+0x200>
  405f06:	eba8 0306 	sub.w	r3, r8, r6
  405f0a:	2b0f      	cmp	r3, #15
  405f0c:	f300 8085 	bgt.w	40601a <_malloc_r+0x30a>
  405f10:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40606c <_malloc_r+0x35c>
  405f14:	4b50      	ldr	r3, [pc, #320]	; (406058 <_malloc_r+0x348>)
  405f16:	f8d9 2000 	ldr.w	r2, [r9]
  405f1a:	681b      	ldr	r3, [r3, #0]
  405f1c:	3201      	adds	r2, #1
  405f1e:	4433      	add	r3, r6
  405f20:	eb04 0a08 	add.w	sl, r4, r8
  405f24:	f000 8155 	beq.w	4061d2 <_malloc_r+0x4c2>
  405f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405f2c:	330f      	adds	r3, #15
  405f2e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405f32:	f02b 0b0f 	bic.w	fp, fp, #15
  405f36:	4659      	mov	r1, fp
  405f38:	4628      	mov	r0, r5
  405f3a:	f000 fcb1 	bl	4068a0 <_sbrk_r>
  405f3e:	1c41      	adds	r1, r0, #1
  405f40:	4602      	mov	r2, r0
  405f42:	f000 80fc 	beq.w	40613e <_malloc_r+0x42e>
  405f46:	4582      	cmp	sl, r0
  405f48:	f200 80f7 	bhi.w	40613a <_malloc_r+0x42a>
  405f4c:	4b43      	ldr	r3, [pc, #268]	; (40605c <_malloc_r+0x34c>)
  405f4e:	6819      	ldr	r1, [r3, #0]
  405f50:	4459      	add	r1, fp
  405f52:	6019      	str	r1, [r3, #0]
  405f54:	f000 814d 	beq.w	4061f2 <_malloc_r+0x4e2>
  405f58:	f8d9 0000 	ldr.w	r0, [r9]
  405f5c:	3001      	adds	r0, #1
  405f5e:	bf1b      	ittet	ne
  405f60:	eba2 0a0a 	subne.w	sl, r2, sl
  405f64:	4451      	addne	r1, sl
  405f66:	f8c9 2000 	streq.w	r2, [r9]
  405f6a:	6019      	strne	r1, [r3, #0]
  405f6c:	f012 0107 	ands.w	r1, r2, #7
  405f70:	f000 8115 	beq.w	40619e <_malloc_r+0x48e>
  405f74:	f1c1 0008 	rsb	r0, r1, #8
  405f78:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405f7c:	4402      	add	r2, r0
  405f7e:	3108      	adds	r1, #8
  405f80:	eb02 090b 	add.w	r9, r2, fp
  405f84:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405f88:	eba1 0909 	sub.w	r9, r1, r9
  405f8c:	4649      	mov	r1, r9
  405f8e:	4628      	mov	r0, r5
  405f90:	9301      	str	r3, [sp, #4]
  405f92:	9200      	str	r2, [sp, #0]
  405f94:	f000 fc84 	bl	4068a0 <_sbrk_r>
  405f98:	1c43      	adds	r3, r0, #1
  405f9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405f9e:	f000 8143 	beq.w	406228 <_malloc_r+0x518>
  405fa2:	1a80      	subs	r0, r0, r2
  405fa4:	4448      	add	r0, r9
  405fa6:	f040 0001 	orr.w	r0, r0, #1
  405faa:	6819      	ldr	r1, [r3, #0]
  405fac:	60ba      	str	r2, [r7, #8]
  405fae:	4449      	add	r1, r9
  405fb0:	42bc      	cmp	r4, r7
  405fb2:	6050      	str	r0, [r2, #4]
  405fb4:	6019      	str	r1, [r3, #0]
  405fb6:	d017      	beq.n	405fe8 <_malloc_r+0x2d8>
  405fb8:	f1b8 0f0f 	cmp.w	r8, #15
  405fbc:	f240 80fb 	bls.w	4061b6 <_malloc_r+0x4a6>
  405fc0:	6860      	ldr	r0, [r4, #4]
  405fc2:	f1a8 020c 	sub.w	r2, r8, #12
  405fc6:	f022 0207 	bic.w	r2, r2, #7
  405fca:	eb04 0e02 	add.w	lr, r4, r2
  405fce:	f000 0001 	and.w	r0, r0, #1
  405fd2:	f04f 0c05 	mov.w	ip, #5
  405fd6:	4310      	orrs	r0, r2
  405fd8:	2a0f      	cmp	r2, #15
  405fda:	6060      	str	r0, [r4, #4]
  405fdc:	f8ce c004 	str.w	ip, [lr, #4]
  405fe0:	f8ce c008 	str.w	ip, [lr, #8]
  405fe4:	f200 8117 	bhi.w	406216 <_malloc_r+0x506>
  405fe8:	4b1d      	ldr	r3, [pc, #116]	; (406060 <_malloc_r+0x350>)
  405fea:	68bc      	ldr	r4, [r7, #8]
  405fec:	681a      	ldr	r2, [r3, #0]
  405fee:	4291      	cmp	r1, r2
  405ff0:	bf88      	it	hi
  405ff2:	6019      	strhi	r1, [r3, #0]
  405ff4:	4b1b      	ldr	r3, [pc, #108]	; (406064 <_malloc_r+0x354>)
  405ff6:	681a      	ldr	r2, [r3, #0]
  405ff8:	4291      	cmp	r1, r2
  405ffa:	6862      	ldr	r2, [r4, #4]
  405ffc:	bf88      	it	hi
  405ffe:	6019      	strhi	r1, [r3, #0]
  406000:	f022 0203 	bic.w	r2, r2, #3
  406004:	4296      	cmp	r6, r2
  406006:	eba2 0306 	sub.w	r3, r2, r6
  40600a:	d801      	bhi.n	406010 <_malloc_r+0x300>
  40600c:	2b0f      	cmp	r3, #15
  40600e:	dc04      	bgt.n	40601a <_malloc_r+0x30a>
  406010:	4628      	mov	r0, r5
  406012:	f000 fa99 	bl	406548 <__malloc_unlock>
  406016:	2400      	movs	r4, #0
  406018:	e740      	b.n	405e9c <_malloc_r+0x18c>
  40601a:	19a2      	adds	r2, r4, r6
  40601c:	f043 0301 	orr.w	r3, r3, #1
  406020:	f046 0601 	orr.w	r6, r6, #1
  406024:	6066      	str	r6, [r4, #4]
  406026:	4628      	mov	r0, r5
  406028:	60ba      	str	r2, [r7, #8]
  40602a:	6053      	str	r3, [r2, #4]
  40602c:	f000 fa8c 	bl	406548 <__malloc_unlock>
  406030:	3408      	adds	r4, #8
  406032:	4620      	mov	r0, r4
  406034:	b003      	add	sp, #12
  406036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40603a:	2b14      	cmp	r3, #20
  40603c:	d971      	bls.n	406122 <_malloc_r+0x412>
  40603e:	2b54      	cmp	r3, #84	; 0x54
  406040:	f200 80a3 	bhi.w	40618a <_malloc_r+0x47a>
  406044:	0b33      	lsrs	r3, r6, #12
  406046:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40604a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40604e:	00c3      	lsls	r3, r0, #3
  406050:	e680      	b.n	405d54 <_malloc_r+0x44>
  406052:	bf00      	nop
  406054:	204005c0 	.word	0x204005c0
  406058:	2040104c 	.word	0x2040104c
  40605c:	2040101c 	.word	0x2040101c
  406060:	20401044 	.word	0x20401044
  406064:	20401048 	.word	0x20401048
  406068:	204005c8 	.word	0x204005c8
  40606c:	204009c8 	.word	0x204009c8
  406070:	0a5a      	lsrs	r2, r3, #9
  406072:	2a04      	cmp	r2, #4
  406074:	d95b      	bls.n	40612e <_malloc_r+0x41e>
  406076:	2a14      	cmp	r2, #20
  406078:	f200 80ae 	bhi.w	4061d8 <_malloc_r+0x4c8>
  40607c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406080:	00c9      	lsls	r1, r1, #3
  406082:	325b      	adds	r2, #91	; 0x5b
  406084:	eb07 0c01 	add.w	ip, r7, r1
  406088:	5879      	ldr	r1, [r7, r1]
  40608a:	f1ac 0c08 	sub.w	ip, ip, #8
  40608e:	458c      	cmp	ip, r1
  406090:	f000 8088 	beq.w	4061a4 <_malloc_r+0x494>
  406094:	684a      	ldr	r2, [r1, #4]
  406096:	f022 0203 	bic.w	r2, r2, #3
  40609a:	4293      	cmp	r3, r2
  40609c:	d273      	bcs.n	406186 <_malloc_r+0x476>
  40609e:	6889      	ldr	r1, [r1, #8]
  4060a0:	458c      	cmp	ip, r1
  4060a2:	d1f7      	bne.n	406094 <_malloc_r+0x384>
  4060a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4060a8:	687b      	ldr	r3, [r7, #4]
  4060aa:	60e2      	str	r2, [r4, #12]
  4060ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4060b0:	6094      	str	r4, [r2, #8]
  4060b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4060b6:	e68f      	b.n	405dd8 <_malloc_r+0xc8>
  4060b8:	19a1      	adds	r1, r4, r6
  4060ba:	f046 0c01 	orr.w	ip, r6, #1
  4060be:	f042 0601 	orr.w	r6, r2, #1
  4060c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4060c6:	4628      	mov	r0, r5
  4060c8:	6179      	str	r1, [r7, #20]
  4060ca:	6139      	str	r1, [r7, #16]
  4060cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4060d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4060d4:	604e      	str	r6, [r1, #4]
  4060d6:	50e2      	str	r2, [r4, r3]
  4060d8:	f000 fa36 	bl	406548 <__malloc_unlock>
  4060dc:	3408      	adds	r4, #8
  4060de:	e6dd      	b.n	405e9c <_malloc_r+0x18c>
  4060e0:	687b      	ldr	r3, [r7, #4]
  4060e2:	e679      	b.n	405dd8 <_malloc_r+0xc8>
  4060e4:	f108 0801 	add.w	r8, r8, #1
  4060e8:	f018 0f03 	tst.w	r8, #3
  4060ec:	f10c 0c08 	add.w	ip, ip, #8
  4060f0:	f47f ae85 	bne.w	405dfe <_malloc_r+0xee>
  4060f4:	e02d      	b.n	406152 <_malloc_r+0x442>
  4060f6:	68dc      	ldr	r4, [r3, #12]
  4060f8:	42a3      	cmp	r3, r4
  4060fa:	bf08      	it	eq
  4060fc:	3002      	addeq	r0, #2
  4060fe:	f43f ae3e 	beq.w	405d7e <_malloc_r+0x6e>
  406102:	e6bb      	b.n	405e7c <_malloc_r+0x16c>
  406104:	4419      	add	r1, r3
  406106:	461c      	mov	r4, r3
  406108:	684a      	ldr	r2, [r1, #4]
  40610a:	68db      	ldr	r3, [r3, #12]
  40610c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406110:	f042 0201 	orr.w	r2, r2, #1
  406114:	604a      	str	r2, [r1, #4]
  406116:	4628      	mov	r0, r5
  406118:	60f3      	str	r3, [r6, #12]
  40611a:	609e      	str	r6, [r3, #8]
  40611c:	f000 fa14 	bl	406548 <__malloc_unlock>
  406120:	e6bc      	b.n	405e9c <_malloc_r+0x18c>
  406122:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406126:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40612a:	00c3      	lsls	r3, r0, #3
  40612c:	e612      	b.n	405d54 <_malloc_r+0x44>
  40612e:	099a      	lsrs	r2, r3, #6
  406130:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406134:	00c9      	lsls	r1, r1, #3
  406136:	3238      	adds	r2, #56	; 0x38
  406138:	e7a4      	b.n	406084 <_malloc_r+0x374>
  40613a:	42bc      	cmp	r4, r7
  40613c:	d054      	beq.n	4061e8 <_malloc_r+0x4d8>
  40613e:	68bc      	ldr	r4, [r7, #8]
  406140:	6862      	ldr	r2, [r4, #4]
  406142:	f022 0203 	bic.w	r2, r2, #3
  406146:	e75d      	b.n	406004 <_malloc_r+0x2f4>
  406148:	f859 3908 	ldr.w	r3, [r9], #-8
  40614c:	4599      	cmp	r9, r3
  40614e:	f040 8086 	bne.w	40625e <_malloc_r+0x54e>
  406152:	f010 0f03 	tst.w	r0, #3
  406156:	f100 30ff 	add.w	r0, r0, #4294967295
  40615a:	d1f5      	bne.n	406148 <_malloc_r+0x438>
  40615c:	687b      	ldr	r3, [r7, #4]
  40615e:	ea23 0304 	bic.w	r3, r3, r4
  406162:	607b      	str	r3, [r7, #4]
  406164:	0064      	lsls	r4, r4, #1
  406166:	429c      	cmp	r4, r3
  406168:	f63f aec7 	bhi.w	405efa <_malloc_r+0x1ea>
  40616c:	2c00      	cmp	r4, #0
  40616e:	f43f aec4 	beq.w	405efa <_malloc_r+0x1ea>
  406172:	421c      	tst	r4, r3
  406174:	4640      	mov	r0, r8
  406176:	f47f ae3e 	bne.w	405df6 <_malloc_r+0xe6>
  40617a:	0064      	lsls	r4, r4, #1
  40617c:	421c      	tst	r4, r3
  40617e:	f100 0004 	add.w	r0, r0, #4
  406182:	d0fa      	beq.n	40617a <_malloc_r+0x46a>
  406184:	e637      	b.n	405df6 <_malloc_r+0xe6>
  406186:	468c      	mov	ip, r1
  406188:	e78c      	b.n	4060a4 <_malloc_r+0x394>
  40618a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40618e:	d815      	bhi.n	4061bc <_malloc_r+0x4ac>
  406190:	0bf3      	lsrs	r3, r6, #15
  406192:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406196:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40619a:	00c3      	lsls	r3, r0, #3
  40619c:	e5da      	b.n	405d54 <_malloc_r+0x44>
  40619e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4061a2:	e6ed      	b.n	405f80 <_malloc_r+0x270>
  4061a4:	687b      	ldr	r3, [r7, #4]
  4061a6:	1092      	asrs	r2, r2, #2
  4061a8:	2101      	movs	r1, #1
  4061aa:	fa01 f202 	lsl.w	r2, r1, r2
  4061ae:	4313      	orrs	r3, r2
  4061b0:	607b      	str	r3, [r7, #4]
  4061b2:	4662      	mov	r2, ip
  4061b4:	e779      	b.n	4060aa <_malloc_r+0x39a>
  4061b6:	2301      	movs	r3, #1
  4061b8:	6053      	str	r3, [r2, #4]
  4061ba:	e729      	b.n	406010 <_malloc_r+0x300>
  4061bc:	f240 5254 	movw	r2, #1364	; 0x554
  4061c0:	4293      	cmp	r3, r2
  4061c2:	d822      	bhi.n	40620a <_malloc_r+0x4fa>
  4061c4:	0cb3      	lsrs	r3, r6, #18
  4061c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4061ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4061ce:	00c3      	lsls	r3, r0, #3
  4061d0:	e5c0      	b.n	405d54 <_malloc_r+0x44>
  4061d2:	f103 0b10 	add.w	fp, r3, #16
  4061d6:	e6ae      	b.n	405f36 <_malloc_r+0x226>
  4061d8:	2a54      	cmp	r2, #84	; 0x54
  4061da:	d829      	bhi.n	406230 <_malloc_r+0x520>
  4061dc:	0b1a      	lsrs	r2, r3, #12
  4061de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4061e2:	00c9      	lsls	r1, r1, #3
  4061e4:	326e      	adds	r2, #110	; 0x6e
  4061e6:	e74d      	b.n	406084 <_malloc_r+0x374>
  4061e8:	4b20      	ldr	r3, [pc, #128]	; (40626c <_malloc_r+0x55c>)
  4061ea:	6819      	ldr	r1, [r3, #0]
  4061ec:	4459      	add	r1, fp
  4061ee:	6019      	str	r1, [r3, #0]
  4061f0:	e6b2      	b.n	405f58 <_malloc_r+0x248>
  4061f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4061f6:	2800      	cmp	r0, #0
  4061f8:	f47f aeae 	bne.w	405f58 <_malloc_r+0x248>
  4061fc:	eb08 030b 	add.w	r3, r8, fp
  406200:	68ba      	ldr	r2, [r7, #8]
  406202:	f043 0301 	orr.w	r3, r3, #1
  406206:	6053      	str	r3, [r2, #4]
  406208:	e6ee      	b.n	405fe8 <_malloc_r+0x2d8>
  40620a:	207f      	movs	r0, #127	; 0x7f
  40620c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406210:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406214:	e59e      	b.n	405d54 <_malloc_r+0x44>
  406216:	f104 0108 	add.w	r1, r4, #8
  40621a:	4628      	mov	r0, r5
  40621c:	9300      	str	r3, [sp, #0]
  40621e:	f7ff fa59 	bl	4056d4 <_free_r>
  406222:	9b00      	ldr	r3, [sp, #0]
  406224:	6819      	ldr	r1, [r3, #0]
  406226:	e6df      	b.n	405fe8 <_malloc_r+0x2d8>
  406228:	2001      	movs	r0, #1
  40622a:	f04f 0900 	mov.w	r9, #0
  40622e:	e6bc      	b.n	405faa <_malloc_r+0x29a>
  406230:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406234:	d805      	bhi.n	406242 <_malloc_r+0x532>
  406236:	0bda      	lsrs	r2, r3, #15
  406238:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40623c:	00c9      	lsls	r1, r1, #3
  40623e:	3277      	adds	r2, #119	; 0x77
  406240:	e720      	b.n	406084 <_malloc_r+0x374>
  406242:	f240 5154 	movw	r1, #1364	; 0x554
  406246:	428a      	cmp	r2, r1
  406248:	d805      	bhi.n	406256 <_malloc_r+0x546>
  40624a:	0c9a      	lsrs	r2, r3, #18
  40624c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406250:	00c9      	lsls	r1, r1, #3
  406252:	327c      	adds	r2, #124	; 0x7c
  406254:	e716      	b.n	406084 <_malloc_r+0x374>
  406256:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40625a:	227e      	movs	r2, #126	; 0x7e
  40625c:	e712      	b.n	406084 <_malloc_r+0x374>
  40625e:	687b      	ldr	r3, [r7, #4]
  406260:	e780      	b.n	406164 <_malloc_r+0x454>
  406262:	08f0      	lsrs	r0, r6, #3
  406264:	f106 0308 	add.w	r3, r6, #8
  406268:	e600      	b.n	405e6c <_malloc_r+0x15c>
  40626a:	bf00      	nop
  40626c:	2040101c 	.word	0x2040101c

00406270 <__ascii_mbtowc>:
  406270:	b082      	sub	sp, #8
  406272:	b149      	cbz	r1, 406288 <__ascii_mbtowc+0x18>
  406274:	b15a      	cbz	r2, 40628e <__ascii_mbtowc+0x1e>
  406276:	b16b      	cbz	r3, 406294 <__ascii_mbtowc+0x24>
  406278:	7813      	ldrb	r3, [r2, #0]
  40627a:	600b      	str	r3, [r1, #0]
  40627c:	7812      	ldrb	r2, [r2, #0]
  40627e:	1c10      	adds	r0, r2, #0
  406280:	bf18      	it	ne
  406282:	2001      	movne	r0, #1
  406284:	b002      	add	sp, #8
  406286:	4770      	bx	lr
  406288:	a901      	add	r1, sp, #4
  40628a:	2a00      	cmp	r2, #0
  40628c:	d1f3      	bne.n	406276 <__ascii_mbtowc+0x6>
  40628e:	4610      	mov	r0, r2
  406290:	b002      	add	sp, #8
  406292:	4770      	bx	lr
  406294:	f06f 0001 	mvn.w	r0, #1
  406298:	e7f4      	b.n	406284 <__ascii_mbtowc+0x14>
  40629a:	bf00      	nop
  40629c:	0000      	movs	r0, r0
	...

004062a0 <memchr>:
  4062a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4062a4:	2a10      	cmp	r2, #16
  4062a6:	db2b      	blt.n	406300 <memchr+0x60>
  4062a8:	f010 0f07 	tst.w	r0, #7
  4062ac:	d008      	beq.n	4062c0 <memchr+0x20>
  4062ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4062b2:	3a01      	subs	r2, #1
  4062b4:	428b      	cmp	r3, r1
  4062b6:	d02d      	beq.n	406314 <memchr+0x74>
  4062b8:	f010 0f07 	tst.w	r0, #7
  4062bc:	b342      	cbz	r2, 406310 <memchr+0x70>
  4062be:	d1f6      	bne.n	4062ae <memchr+0xe>
  4062c0:	b4f0      	push	{r4, r5, r6, r7}
  4062c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4062c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4062ca:	f022 0407 	bic.w	r4, r2, #7
  4062ce:	f07f 0700 	mvns.w	r7, #0
  4062d2:	2300      	movs	r3, #0
  4062d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4062d8:	3c08      	subs	r4, #8
  4062da:	ea85 0501 	eor.w	r5, r5, r1
  4062de:	ea86 0601 	eor.w	r6, r6, r1
  4062e2:	fa85 f547 	uadd8	r5, r5, r7
  4062e6:	faa3 f587 	sel	r5, r3, r7
  4062ea:	fa86 f647 	uadd8	r6, r6, r7
  4062ee:	faa5 f687 	sel	r6, r5, r7
  4062f2:	b98e      	cbnz	r6, 406318 <memchr+0x78>
  4062f4:	d1ee      	bne.n	4062d4 <memchr+0x34>
  4062f6:	bcf0      	pop	{r4, r5, r6, r7}
  4062f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4062fc:	f002 0207 	and.w	r2, r2, #7
  406300:	b132      	cbz	r2, 406310 <memchr+0x70>
  406302:	f810 3b01 	ldrb.w	r3, [r0], #1
  406306:	3a01      	subs	r2, #1
  406308:	ea83 0301 	eor.w	r3, r3, r1
  40630c:	b113      	cbz	r3, 406314 <memchr+0x74>
  40630e:	d1f8      	bne.n	406302 <memchr+0x62>
  406310:	2000      	movs	r0, #0
  406312:	4770      	bx	lr
  406314:	3801      	subs	r0, #1
  406316:	4770      	bx	lr
  406318:	2d00      	cmp	r5, #0
  40631a:	bf06      	itte	eq
  40631c:	4635      	moveq	r5, r6
  40631e:	3803      	subeq	r0, #3
  406320:	3807      	subne	r0, #7
  406322:	f015 0f01 	tst.w	r5, #1
  406326:	d107      	bne.n	406338 <memchr+0x98>
  406328:	3001      	adds	r0, #1
  40632a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40632e:	bf02      	ittt	eq
  406330:	3001      	addeq	r0, #1
  406332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406336:	3001      	addeq	r0, #1
  406338:	bcf0      	pop	{r4, r5, r6, r7}
  40633a:	3801      	subs	r0, #1
  40633c:	4770      	bx	lr
  40633e:	bf00      	nop

00406340 <memcpy>:
  406340:	4684      	mov	ip, r0
  406342:	ea41 0300 	orr.w	r3, r1, r0
  406346:	f013 0303 	ands.w	r3, r3, #3
  40634a:	d16d      	bne.n	406428 <memcpy+0xe8>
  40634c:	3a40      	subs	r2, #64	; 0x40
  40634e:	d341      	bcc.n	4063d4 <memcpy+0x94>
  406350:	f851 3b04 	ldr.w	r3, [r1], #4
  406354:	f840 3b04 	str.w	r3, [r0], #4
  406358:	f851 3b04 	ldr.w	r3, [r1], #4
  40635c:	f840 3b04 	str.w	r3, [r0], #4
  406360:	f851 3b04 	ldr.w	r3, [r1], #4
  406364:	f840 3b04 	str.w	r3, [r0], #4
  406368:	f851 3b04 	ldr.w	r3, [r1], #4
  40636c:	f840 3b04 	str.w	r3, [r0], #4
  406370:	f851 3b04 	ldr.w	r3, [r1], #4
  406374:	f840 3b04 	str.w	r3, [r0], #4
  406378:	f851 3b04 	ldr.w	r3, [r1], #4
  40637c:	f840 3b04 	str.w	r3, [r0], #4
  406380:	f851 3b04 	ldr.w	r3, [r1], #4
  406384:	f840 3b04 	str.w	r3, [r0], #4
  406388:	f851 3b04 	ldr.w	r3, [r1], #4
  40638c:	f840 3b04 	str.w	r3, [r0], #4
  406390:	f851 3b04 	ldr.w	r3, [r1], #4
  406394:	f840 3b04 	str.w	r3, [r0], #4
  406398:	f851 3b04 	ldr.w	r3, [r1], #4
  40639c:	f840 3b04 	str.w	r3, [r0], #4
  4063a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063a4:	f840 3b04 	str.w	r3, [r0], #4
  4063a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063ac:	f840 3b04 	str.w	r3, [r0], #4
  4063b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063b4:	f840 3b04 	str.w	r3, [r0], #4
  4063b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063bc:	f840 3b04 	str.w	r3, [r0], #4
  4063c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063c4:	f840 3b04 	str.w	r3, [r0], #4
  4063c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063cc:	f840 3b04 	str.w	r3, [r0], #4
  4063d0:	3a40      	subs	r2, #64	; 0x40
  4063d2:	d2bd      	bcs.n	406350 <memcpy+0x10>
  4063d4:	3230      	adds	r2, #48	; 0x30
  4063d6:	d311      	bcc.n	4063fc <memcpy+0xbc>
  4063d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063dc:	f840 3b04 	str.w	r3, [r0], #4
  4063e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063e4:	f840 3b04 	str.w	r3, [r0], #4
  4063e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063ec:	f840 3b04 	str.w	r3, [r0], #4
  4063f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f4:	f840 3b04 	str.w	r3, [r0], #4
  4063f8:	3a10      	subs	r2, #16
  4063fa:	d2ed      	bcs.n	4063d8 <memcpy+0x98>
  4063fc:	320c      	adds	r2, #12
  4063fe:	d305      	bcc.n	40640c <memcpy+0xcc>
  406400:	f851 3b04 	ldr.w	r3, [r1], #4
  406404:	f840 3b04 	str.w	r3, [r0], #4
  406408:	3a04      	subs	r2, #4
  40640a:	d2f9      	bcs.n	406400 <memcpy+0xc0>
  40640c:	3204      	adds	r2, #4
  40640e:	d008      	beq.n	406422 <memcpy+0xe2>
  406410:	07d2      	lsls	r2, r2, #31
  406412:	bf1c      	itt	ne
  406414:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406418:	f800 3b01 	strbne.w	r3, [r0], #1
  40641c:	d301      	bcc.n	406422 <memcpy+0xe2>
  40641e:	880b      	ldrh	r3, [r1, #0]
  406420:	8003      	strh	r3, [r0, #0]
  406422:	4660      	mov	r0, ip
  406424:	4770      	bx	lr
  406426:	bf00      	nop
  406428:	2a08      	cmp	r2, #8
  40642a:	d313      	bcc.n	406454 <memcpy+0x114>
  40642c:	078b      	lsls	r3, r1, #30
  40642e:	d08d      	beq.n	40634c <memcpy+0xc>
  406430:	f010 0303 	ands.w	r3, r0, #3
  406434:	d08a      	beq.n	40634c <memcpy+0xc>
  406436:	f1c3 0304 	rsb	r3, r3, #4
  40643a:	1ad2      	subs	r2, r2, r3
  40643c:	07db      	lsls	r3, r3, #31
  40643e:	bf1c      	itt	ne
  406440:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406444:	f800 3b01 	strbne.w	r3, [r0], #1
  406448:	d380      	bcc.n	40634c <memcpy+0xc>
  40644a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40644e:	f820 3b02 	strh.w	r3, [r0], #2
  406452:	e77b      	b.n	40634c <memcpy+0xc>
  406454:	3a04      	subs	r2, #4
  406456:	d3d9      	bcc.n	40640c <memcpy+0xcc>
  406458:	3a01      	subs	r2, #1
  40645a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40645e:	f800 3b01 	strb.w	r3, [r0], #1
  406462:	d2f9      	bcs.n	406458 <memcpy+0x118>
  406464:	780b      	ldrb	r3, [r1, #0]
  406466:	7003      	strb	r3, [r0, #0]
  406468:	784b      	ldrb	r3, [r1, #1]
  40646a:	7043      	strb	r3, [r0, #1]
  40646c:	788b      	ldrb	r3, [r1, #2]
  40646e:	7083      	strb	r3, [r0, #2]
  406470:	4660      	mov	r0, ip
  406472:	4770      	bx	lr

00406474 <memmove>:
  406474:	4288      	cmp	r0, r1
  406476:	b5f0      	push	{r4, r5, r6, r7, lr}
  406478:	d90d      	bls.n	406496 <memmove+0x22>
  40647a:	188b      	adds	r3, r1, r2
  40647c:	4298      	cmp	r0, r3
  40647e:	d20a      	bcs.n	406496 <memmove+0x22>
  406480:	1884      	adds	r4, r0, r2
  406482:	2a00      	cmp	r2, #0
  406484:	d051      	beq.n	40652a <memmove+0xb6>
  406486:	4622      	mov	r2, r4
  406488:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40648c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406490:	4299      	cmp	r1, r3
  406492:	d1f9      	bne.n	406488 <memmove+0x14>
  406494:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406496:	2a0f      	cmp	r2, #15
  406498:	d948      	bls.n	40652c <memmove+0xb8>
  40649a:	ea41 0300 	orr.w	r3, r1, r0
  40649e:	079b      	lsls	r3, r3, #30
  4064a0:	d146      	bne.n	406530 <memmove+0xbc>
  4064a2:	f100 0410 	add.w	r4, r0, #16
  4064a6:	f101 0310 	add.w	r3, r1, #16
  4064aa:	4615      	mov	r5, r2
  4064ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4064b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4064b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4064b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4064bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4064c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4064c4:	3d10      	subs	r5, #16
  4064c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4064ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4064ce:	2d0f      	cmp	r5, #15
  4064d0:	f103 0310 	add.w	r3, r3, #16
  4064d4:	f104 0410 	add.w	r4, r4, #16
  4064d8:	d8e8      	bhi.n	4064ac <memmove+0x38>
  4064da:	f1a2 0310 	sub.w	r3, r2, #16
  4064de:	f023 030f 	bic.w	r3, r3, #15
  4064e2:	f002 0e0f 	and.w	lr, r2, #15
  4064e6:	3310      	adds	r3, #16
  4064e8:	f1be 0f03 	cmp.w	lr, #3
  4064ec:	4419      	add	r1, r3
  4064ee:	4403      	add	r3, r0
  4064f0:	d921      	bls.n	406536 <memmove+0xc2>
  4064f2:	1f1e      	subs	r6, r3, #4
  4064f4:	460d      	mov	r5, r1
  4064f6:	4674      	mov	r4, lr
  4064f8:	3c04      	subs	r4, #4
  4064fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4064fe:	f846 7f04 	str.w	r7, [r6, #4]!
  406502:	2c03      	cmp	r4, #3
  406504:	d8f8      	bhi.n	4064f8 <memmove+0x84>
  406506:	f1ae 0404 	sub.w	r4, lr, #4
  40650a:	f024 0403 	bic.w	r4, r4, #3
  40650e:	3404      	adds	r4, #4
  406510:	4421      	add	r1, r4
  406512:	4423      	add	r3, r4
  406514:	f002 0203 	and.w	r2, r2, #3
  406518:	b162      	cbz	r2, 406534 <memmove+0xc0>
  40651a:	3b01      	subs	r3, #1
  40651c:	440a      	add	r2, r1
  40651e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406522:	f803 4f01 	strb.w	r4, [r3, #1]!
  406526:	428a      	cmp	r2, r1
  406528:	d1f9      	bne.n	40651e <memmove+0xaa>
  40652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40652c:	4603      	mov	r3, r0
  40652e:	e7f3      	b.n	406518 <memmove+0xa4>
  406530:	4603      	mov	r3, r0
  406532:	e7f2      	b.n	40651a <memmove+0xa6>
  406534:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406536:	4672      	mov	r2, lr
  406538:	e7ee      	b.n	406518 <memmove+0xa4>
  40653a:	bf00      	nop

0040653c <__malloc_lock>:
  40653c:	4801      	ldr	r0, [pc, #4]	; (406544 <__malloc_lock+0x8>)
  40653e:	f7ff bb63 	b.w	405c08 <__retarget_lock_acquire_recursive>
  406542:	bf00      	nop
  406544:	2040112c 	.word	0x2040112c

00406548 <__malloc_unlock>:
  406548:	4801      	ldr	r0, [pc, #4]	; (406550 <__malloc_unlock+0x8>)
  40654a:	f7ff bb5f 	b.w	405c0c <__retarget_lock_release_recursive>
  40654e:	bf00      	nop
  406550:	2040112c 	.word	0x2040112c

00406554 <_realloc_r>:
  406554:	2900      	cmp	r1, #0
  406556:	f000 8095 	beq.w	406684 <_realloc_r+0x130>
  40655a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40655e:	460d      	mov	r5, r1
  406560:	4616      	mov	r6, r2
  406562:	b083      	sub	sp, #12
  406564:	4680      	mov	r8, r0
  406566:	f106 070b 	add.w	r7, r6, #11
  40656a:	f7ff ffe7 	bl	40653c <__malloc_lock>
  40656e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406572:	2f16      	cmp	r7, #22
  406574:	f02e 0403 	bic.w	r4, lr, #3
  406578:	f1a5 0908 	sub.w	r9, r5, #8
  40657c:	d83c      	bhi.n	4065f8 <_realloc_r+0xa4>
  40657e:	2210      	movs	r2, #16
  406580:	4617      	mov	r7, r2
  406582:	42be      	cmp	r6, r7
  406584:	d83d      	bhi.n	406602 <_realloc_r+0xae>
  406586:	4294      	cmp	r4, r2
  406588:	da43      	bge.n	406612 <_realloc_r+0xbe>
  40658a:	4bc4      	ldr	r3, [pc, #784]	; (40689c <_realloc_r+0x348>)
  40658c:	6899      	ldr	r1, [r3, #8]
  40658e:	eb09 0004 	add.w	r0, r9, r4
  406592:	4288      	cmp	r0, r1
  406594:	f000 80b4 	beq.w	406700 <_realloc_r+0x1ac>
  406598:	6843      	ldr	r3, [r0, #4]
  40659a:	f023 0101 	bic.w	r1, r3, #1
  40659e:	4401      	add	r1, r0
  4065a0:	6849      	ldr	r1, [r1, #4]
  4065a2:	07c9      	lsls	r1, r1, #31
  4065a4:	d54c      	bpl.n	406640 <_realloc_r+0xec>
  4065a6:	f01e 0f01 	tst.w	lr, #1
  4065aa:	f000 809b 	beq.w	4066e4 <_realloc_r+0x190>
  4065ae:	4631      	mov	r1, r6
  4065b0:	4640      	mov	r0, r8
  4065b2:	f7ff fbad 	bl	405d10 <_malloc_r>
  4065b6:	4606      	mov	r6, r0
  4065b8:	2800      	cmp	r0, #0
  4065ba:	d03a      	beq.n	406632 <_realloc_r+0xde>
  4065bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4065c0:	f023 0301 	bic.w	r3, r3, #1
  4065c4:	444b      	add	r3, r9
  4065c6:	f1a0 0208 	sub.w	r2, r0, #8
  4065ca:	429a      	cmp	r2, r3
  4065cc:	f000 8121 	beq.w	406812 <_realloc_r+0x2be>
  4065d0:	1f22      	subs	r2, r4, #4
  4065d2:	2a24      	cmp	r2, #36	; 0x24
  4065d4:	f200 8107 	bhi.w	4067e6 <_realloc_r+0x292>
  4065d8:	2a13      	cmp	r2, #19
  4065da:	f200 80db 	bhi.w	406794 <_realloc_r+0x240>
  4065de:	4603      	mov	r3, r0
  4065e0:	462a      	mov	r2, r5
  4065e2:	6811      	ldr	r1, [r2, #0]
  4065e4:	6019      	str	r1, [r3, #0]
  4065e6:	6851      	ldr	r1, [r2, #4]
  4065e8:	6059      	str	r1, [r3, #4]
  4065ea:	6892      	ldr	r2, [r2, #8]
  4065ec:	609a      	str	r2, [r3, #8]
  4065ee:	4629      	mov	r1, r5
  4065f0:	4640      	mov	r0, r8
  4065f2:	f7ff f86f 	bl	4056d4 <_free_r>
  4065f6:	e01c      	b.n	406632 <_realloc_r+0xde>
  4065f8:	f027 0707 	bic.w	r7, r7, #7
  4065fc:	2f00      	cmp	r7, #0
  4065fe:	463a      	mov	r2, r7
  406600:	dabf      	bge.n	406582 <_realloc_r+0x2e>
  406602:	2600      	movs	r6, #0
  406604:	230c      	movs	r3, #12
  406606:	4630      	mov	r0, r6
  406608:	f8c8 3000 	str.w	r3, [r8]
  40660c:	b003      	add	sp, #12
  40660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406612:	462e      	mov	r6, r5
  406614:	1be3      	subs	r3, r4, r7
  406616:	2b0f      	cmp	r3, #15
  406618:	d81e      	bhi.n	406658 <_realloc_r+0x104>
  40661a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40661e:	f003 0301 	and.w	r3, r3, #1
  406622:	4323      	orrs	r3, r4
  406624:	444c      	add	r4, r9
  406626:	f8c9 3004 	str.w	r3, [r9, #4]
  40662a:	6863      	ldr	r3, [r4, #4]
  40662c:	f043 0301 	orr.w	r3, r3, #1
  406630:	6063      	str	r3, [r4, #4]
  406632:	4640      	mov	r0, r8
  406634:	f7ff ff88 	bl	406548 <__malloc_unlock>
  406638:	4630      	mov	r0, r6
  40663a:	b003      	add	sp, #12
  40663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406640:	f023 0303 	bic.w	r3, r3, #3
  406644:	18e1      	adds	r1, r4, r3
  406646:	4291      	cmp	r1, r2
  406648:	db1f      	blt.n	40668a <_realloc_r+0x136>
  40664a:	68c3      	ldr	r3, [r0, #12]
  40664c:	6882      	ldr	r2, [r0, #8]
  40664e:	462e      	mov	r6, r5
  406650:	60d3      	str	r3, [r2, #12]
  406652:	460c      	mov	r4, r1
  406654:	609a      	str	r2, [r3, #8]
  406656:	e7dd      	b.n	406614 <_realloc_r+0xc0>
  406658:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40665c:	eb09 0107 	add.w	r1, r9, r7
  406660:	f002 0201 	and.w	r2, r2, #1
  406664:	444c      	add	r4, r9
  406666:	f043 0301 	orr.w	r3, r3, #1
  40666a:	4317      	orrs	r7, r2
  40666c:	f8c9 7004 	str.w	r7, [r9, #4]
  406670:	604b      	str	r3, [r1, #4]
  406672:	6863      	ldr	r3, [r4, #4]
  406674:	f043 0301 	orr.w	r3, r3, #1
  406678:	3108      	adds	r1, #8
  40667a:	6063      	str	r3, [r4, #4]
  40667c:	4640      	mov	r0, r8
  40667e:	f7ff f829 	bl	4056d4 <_free_r>
  406682:	e7d6      	b.n	406632 <_realloc_r+0xde>
  406684:	4611      	mov	r1, r2
  406686:	f7ff bb43 	b.w	405d10 <_malloc_r>
  40668a:	f01e 0f01 	tst.w	lr, #1
  40668e:	d18e      	bne.n	4065ae <_realloc_r+0x5a>
  406690:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406694:	eba9 0a01 	sub.w	sl, r9, r1
  406698:	f8da 1004 	ldr.w	r1, [sl, #4]
  40669c:	f021 0103 	bic.w	r1, r1, #3
  4066a0:	440b      	add	r3, r1
  4066a2:	4423      	add	r3, r4
  4066a4:	4293      	cmp	r3, r2
  4066a6:	db25      	blt.n	4066f4 <_realloc_r+0x1a0>
  4066a8:	68c2      	ldr	r2, [r0, #12]
  4066aa:	6881      	ldr	r1, [r0, #8]
  4066ac:	4656      	mov	r6, sl
  4066ae:	60ca      	str	r2, [r1, #12]
  4066b0:	6091      	str	r1, [r2, #8]
  4066b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4066b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4066ba:	1f22      	subs	r2, r4, #4
  4066bc:	2a24      	cmp	r2, #36	; 0x24
  4066be:	60c1      	str	r1, [r0, #12]
  4066c0:	6088      	str	r0, [r1, #8]
  4066c2:	f200 8094 	bhi.w	4067ee <_realloc_r+0x29a>
  4066c6:	2a13      	cmp	r2, #19
  4066c8:	d96f      	bls.n	4067aa <_realloc_r+0x256>
  4066ca:	6829      	ldr	r1, [r5, #0]
  4066cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4066d0:	6869      	ldr	r1, [r5, #4]
  4066d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4066d6:	2a1b      	cmp	r2, #27
  4066d8:	f200 80a2 	bhi.w	406820 <_realloc_r+0x2cc>
  4066dc:	3508      	adds	r5, #8
  4066de:	f10a 0210 	add.w	r2, sl, #16
  4066e2:	e063      	b.n	4067ac <_realloc_r+0x258>
  4066e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4066e8:	eba9 0a03 	sub.w	sl, r9, r3
  4066ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4066f0:	f021 0103 	bic.w	r1, r1, #3
  4066f4:	1863      	adds	r3, r4, r1
  4066f6:	4293      	cmp	r3, r2
  4066f8:	f6ff af59 	blt.w	4065ae <_realloc_r+0x5a>
  4066fc:	4656      	mov	r6, sl
  4066fe:	e7d8      	b.n	4066b2 <_realloc_r+0x15e>
  406700:	6841      	ldr	r1, [r0, #4]
  406702:	f021 0b03 	bic.w	fp, r1, #3
  406706:	44a3      	add	fp, r4
  406708:	f107 0010 	add.w	r0, r7, #16
  40670c:	4583      	cmp	fp, r0
  40670e:	da56      	bge.n	4067be <_realloc_r+0x26a>
  406710:	f01e 0f01 	tst.w	lr, #1
  406714:	f47f af4b 	bne.w	4065ae <_realloc_r+0x5a>
  406718:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40671c:	eba9 0a01 	sub.w	sl, r9, r1
  406720:	f8da 1004 	ldr.w	r1, [sl, #4]
  406724:	f021 0103 	bic.w	r1, r1, #3
  406728:	448b      	add	fp, r1
  40672a:	4558      	cmp	r0, fp
  40672c:	dce2      	bgt.n	4066f4 <_realloc_r+0x1a0>
  40672e:	4656      	mov	r6, sl
  406730:	f8da 100c 	ldr.w	r1, [sl, #12]
  406734:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406738:	1f22      	subs	r2, r4, #4
  40673a:	2a24      	cmp	r2, #36	; 0x24
  40673c:	60c1      	str	r1, [r0, #12]
  40673e:	6088      	str	r0, [r1, #8]
  406740:	f200 808f 	bhi.w	406862 <_realloc_r+0x30e>
  406744:	2a13      	cmp	r2, #19
  406746:	f240 808a 	bls.w	40685e <_realloc_r+0x30a>
  40674a:	6829      	ldr	r1, [r5, #0]
  40674c:	f8ca 1008 	str.w	r1, [sl, #8]
  406750:	6869      	ldr	r1, [r5, #4]
  406752:	f8ca 100c 	str.w	r1, [sl, #12]
  406756:	2a1b      	cmp	r2, #27
  406758:	f200 808a 	bhi.w	406870 <_realloc_r+0x31c>
  40675c:	3508      	adds	r5, #8
  40675e:	f10a 0210 	add.w	r2, sl, #16
  406762:	6829      	ldr	r1, [r5, #0]
  406764:	6011      	str	r1, [r2, #0]
  406766:	6869      	ldr	r1, [r5, #4]
  406768:	6051      	str	r1, [r2, #4]
  40676a:	68a9      	ldr	r1, [r5, #8]
  40676c:	6091      	str	r1, [r2, #8]
  40676e:	eb0a 0107 	add.w	r1, sl, r7
  406772:	ebab 0207 	sub.w	r2, fp, r7
  406776:	f042 0201 	orr.w	r2, r2, #1
  40677a:	6099      	str	r1, [r3, #8]
  40677c:	604a      	str	r2, [r1, #4]
  40677e:	f8da 3004 	ldr.w	r3, [sl, #4]
  406782:	f003 0301 	and.w	r3, r3, #1
  406786:	431f      	orrs	r7, r3
  406788:	4640      	mov	r0, r8
  40678a:	f8ca 7004 	str.w	r7, [sl, #4]
  40678e:	f7ff fedb 	bl	406548 <__malloc_unlock>
  406792:	e751      	b.n	406638 <_realloc_r+0xe4>
  406794:	682b      	ldr	r3, [r5, #0]
  406796:	6003      	str	r3, [r0, #0]
  406798:	686b      	ldr	r3, [r5, #4]
  40679a:	6043      	str	r3, [r0, #4]
  40679c:	2a1b      	cmp	r2, #27
  40679e:	d82d      	bhi.n	4067fc <_realloc_r+0x2a8>
  4067a0:	f100 0308 	add.w	r3, r0, #8
  4067a4:	f105 0208 	add.w	r2, r5, #8
  4067a8:	e71b      	b.n	4065e2 <_realloc_r+0x8e>
  4067aa:	4632      	mov	r2, r6
  4067ac:	6829      	ldr	r1, [r5, #0]
  4067ae:	6011      	str	r1, [r2, #0]
  4067b0:	6869      	ldr	r1, [r5, #4]
  4067b2:	6051      	str	r1, [r2, #4]
  4067b4:	68a9      	ldr	r1, [r5, #8]
  4067b6:	6091      	str	r1, [r2, #8]
  4067b8:	461c      	mov	r4, r3
  4067ba:	46d1      	mov	r9, sl
  4067bc:	e72a      	b.n	406614 <_realloc_r+0xc0>
  4067be:	eb09 0107 	add.w	r1, r9, r7
  4067c2:	ebab 0b07 	sub.w	fp, fp, r7
  4067c6:	f04b 0201 	orr.w	r2, fp, #1
  4067ca:	6099      	str	r1, [r3, #8]
  4067cc:	604a      	str	r2, [r1, #4]
  4067ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4067d2:	f003 0301 	and.w	r3, r3, #1
  4067d6:	431f      	orrs	r7, r3
  4067d8:	4640      	mov	r0, r8
  4067da:	f845 7c04 	str.w	r7, [r5, #-4]
  4067de:	f7ff feb3 	bl	406548 <__malloc_unlock>
  4067e2:	462e      	mov	r6, r5
  4067e4:	e728      	b.n	406638 <_realloc_r+0xe4>
  4067e6:	4629      	mov	r1, r5
  4067e8:	f7ff fe44 	bl	406474 <memmove>
  4067ec:	e6ff      	b.n	4065ee <_realloc_r+0x9a>
  4067ee:	4629      	mov	r1, r5
  4067f0:	4630      	mov	r0, r6
  4067f2:	461c      	mov	r4, r3
  4067f4:	46d1      	mov	r9, sl
  4067f6:	f7ff fe3d 	bl	406474 <memmove>
  4067fa:	e70b      	b.n	406614 <_realloc_r+0xc0>
  4067fc:	68ab      	ldr	r3, [r5, #8]
  4067fe:	6083      	str	r3, [r0, #8]
  406800:	68eb      	ldr	r3, [r5, #12]
  406802:	60c3      	str	r3, [r0, #12]
  406804:	2a24      	cmp	r2, #36	; 0x24
  406806:	d017      	beq.n	406838 <_realloc_r+0x2e4>
  406808:	f100 0310 	add.w	r3, r0, #16
  40680c:	f105 0210 	add.w	r2, r5, #16
  406810:	e6e7      	b.n	4065e2 <_realloc_r+0x8e>
  406812:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406816:	f023 0303 	bic.w	r3, r3, #3
  40681a:	441c      	add	r4, r3
  40681c:	462e      	mov	r6, r5
  40681e:	e6f9      	b.n	406614 <_realloc_r+0xc0>
  406820:	68a9      	ldr	r1, [r5, #8]
  406822:	f8ca 1010 	str.w	r1, [sl, #16]
  406826:	68e9      	ldr	r1, [r5, #12]
  406828:	f8ca 1014 	str.w	r1, [sl, #20]
  40682c:	2a24      	cmp	r2, #36	; 0x24
  40682e:	d00c      	beq.n	40684a <_realloc_r+0x2f6>
  406830:	3510      	adds	r5, #16
  406832:	f10a 0218 	add.w	r2, sl, #24
  406836:	e7b9      	b.n	4067ac <_realloc_r+0x258>
  406838:	692b      	ldr	r3, [r5, #16]
  40683a:	6103      	str	r3, [r0, #16]
  40683c:	696b      	ldr	r3, [r5, #20]
  40683e:	6143      	str	r3, [r0, #20]
  406840:	f105 0218 	add.w	r2, r5, #24
  406844:	f100 0318 	add.w	r3, r0, #24
  406848:	e6cb      	b.n	4065e2 <_realloc_r+0x8e>
  40684a:	692a      	ldr	r2, [r5, #16]
  40684c:	f8ca 2018 	str.w	r2, [sl, #24]
  406850:	696a      	ldr	r2, [r5, #20]
  406852:	f8ca 201c 	str.w	r2, [sl, #28]
  406856:	3518      	adds	r5, #24
  406858:	f10a 0220 	add.w	r2, sl, #32
  40685c:	e7a6      	b.n	4067ac <_realloc_r+0x258>
  40685e:	4632      	mov	r2, r6
  406860:	e77f      	b.n	406762 <_realloc_r+0x20e>
  406862:	4629      	mov	r1, r5
  406864:	4630      	mov	r0, r6
  406866:	9301      	str	r3, [sp, #4]
  406868:	f7ff fe04 	bl	406474 <memmove>
  40686c:	9b01      	ldr	r3, [sp, #4]
  40686e:	e77e      	b.n	40676e <_realloc_r+0x21a>
  406870:	68a9      	ldr	r1, [r5, #8]
  406872:	f8ca 1010 	str.w	r1, [sl, #16]
  406876:	68e9      	ldr	r1, [r5, #12]
  406878:	f8ca 1014 	str.w	r1, [sl, #20]
  40687c:	2a24      	cmp	r2, #36	; 0x24
  40687e:	d003      	beq.n	406888 <_realloc_r+0x334>
  406880:	3510      	adds	r5, #16
  406882:	f10a 0218 	add.w	r2, sl, #24
  406886:	e76c      	b.n	406762 <_realloc_r+0x20e>
  406888:	692a      	ldr	r2, [r5, #16]
  40688a:	f8ca 2018 	str.w	r2, [sl, #24]
  40688e:	696a      	ldr	r2, [r5, #20]
  406890:	f8ca 201c 	str.w	r2, [sl, #28]
  406894:	3518      	adds	r5, #24
  406896:	f10a 0220 	add.w	r2, sl, #32
  40689a:	e762      	b.n	406762 <_realloc_r+0x20e>
  40689c:	204005c0 	.word	0x204005c0

004068a0 <_sbrk_r>:
  4068a0:	b538      	push	{r3, r4, r5, lr}
  4068a2:	4c07      	ldr	r4, [pc, #28]	; (4068c0 <_sbrk_r+0x20>)
  4068a4:	2300      	movs	r3, #0
  4068a6:	4605      	mov	r5, r0
  4068a8:	4608      	mov	r0, r1
  4068aa:	6023      	str	r3, [r4, #0]
  4068ac:	f7fd f8aa 	bl	403a04 <_sbrk>
  4068b0:	1c43      	adds	r3, r0, #1
  4068b2:	d000      	beq.n	4068b6 <_sbrk_r+0x16>
  4068b4:	bd38      	pop	{r3, r4, r5, pc}
  4068b6:	6823      	ldr	r3, [r4, #0]
  4068b8:	2b00      	cmp	r3, #0
  4068ba:	d0fb      	beq.n	4068b4 <_sbrk_r+0x14>
  4068bc:	602b      	str	r3, [r5, #0]
  4068be:	bd38      	pop	{r3, r4, r5, pc}
  4068c0:	20401140 	.word	0x20401140

004068c4 <__sread>:
  4068c4:	b510      	push	{r4, lr}
  4068c6:	460c      	mov	r4, r1
  4068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4068cc:	f000 f9f6 	bl	406cbc <_read_r>
  4068d0:	2800      	cmp	r0, #0
  4068d2:	db03      	blt.n	4068dc <__sread+0x18>
  4068d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4068d6:	4403      	add	r3, r0
  4068d8:	6523      	str	r3, [r4, #80]	; 0x50
  4068da:	bd10      	pop	{r4, pc}
  4068dc:	89a3      	ldrh	r3, [r4, #12]
  4068de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4068e2:	81a3      	strh	r3, [r4, #12]
  4068e4:	bd10      	pop	{r4, pc}
  4068e6:	bf00      	nop

004068e8 <__swrite>:
  4068e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4068ec:	4616      	mov	r6, r2
  4068ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4068f2:	461f      	mov	r7, r3
  4068f4:	05d3      	lsls	r3, r2, #23
  4068f6:	460c      	mov	r4, r1
  4068f8:	4605      	mov	r5, r0
  4068fa:	d507      	bpl.n	40690c <__swrite+0x24>
  4068fc:	2200      	movs	r2, #0
  4068fe:	2302      	movs	r3, #2
  406900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406904:	f000 f9c4 	bl	406c90 <_lseek_r>
  406908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40690c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406914:	81a2      	strh	r2, [r4, #12]
  406916:	463b      	mov	r3, r7
  406918:	4632      	mov	r2, r6
  40691a:	4628      	mov	r0, r5
  40691c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406920:	f000 b8a4 	b.w	406a6c <_write_r>

00406924 <__sseek>:
  406924:	b510      	push	{r4, lr}
  406926:	460c      	mov	r4, r1
  406928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40692c:	f000 f9b0 	bl	406c90 <_lseek_r>
  406930:	89a3      	ldrh	r3, [r4, #12]
  406932:	1c42      	adds	r2, r0, #1
  406934:	bf0e      	itee	eq
  406936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40693a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40693e:	6520      	strne	r0, [r4, #80]	; 0x50
  406940:	81a3      	strh	r3, [r4, #12]
  406942:	bd10      	pop	{r4, pc}

00406944 <__sclose>:
  406944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406948:	f000 b908 	b.w	406b5c <_close_r>

0040694c <__swbuf_r>:
  40694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40694e:	460d      	mov	r5, r1
  406950:	4614      	mov	r4, r2
  406952:	4606      	mov	r6, r0
  406954:	b110      	cbz	r0, 40695c <__swbuf_r+0x10>
  406956:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406958:	2b00      	cmp	r3, #0
  40695a:	d04b      	beq.n	4069f4 <__swbuf_r+0xa8>
  40695c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406960:	69a3      	ldr	r3, [r4, #24]
  406962:	60a3      	str	r3, [r4, #8]
  406964:	b291      	uxth	r1, r2
  406966:	0708      	lsls	r0, r1, #28
  406968:	d539      	bpl.n	4069de <__swbuf_r+0x92>
  40696a:	6923      	ldr	r3, [r4, #16]
  40696c:	2b00      	cmp	r3, #0
  40696e:	d036      	beq.n	4069de <__swbuf_r+0x92>
  406970:	b2ed      	uxtb	r5, r5
  406972:	0489      	lsls	r1, r1, #18
  406974:	462f      	mov	r7, r5
  406976:	d515      	bpl.n	4069a4 <__swbuf_r+0x58>
  406978:	6822      	ldr	r2, [r4, #0]
  40697a:	6961      	ldr	r1, [r4, #20]
  40697c:	1ad3      	subs	r3, r2, r3
  40697e:	428b      	cmp	r3, r1
  406980:	da1c      	bge.n	4069bc <__swbuf_r+0x70>
  406982:	3301      	adds	r3, #1
  406984:	68a1      	ldr	r1, [r4, #8]
  406986:	1c50      	adds	r0, r2, #1
  406988:	3901      	subs	r1, #1
  40698a:	60a1      	str	r1, [r4, #8]
  40698c:	6020      	str	r0, [r4, #0]
  40698e:	7015      	strb	r5, [r2, #0]
  406990:	6962      	ldr	r2, [r4, #20]
  406992:	429a      	cmp	r2, r3
  406994:	d01a      	beq.n	4069cc <__swbuf_r+0x80>
  406996:	89a3      	ldrh	r3, [r4, #12]
  406998:	07db      	lsls	r3, r3, #31
  40699a:	d501      	bpl.n	4069a0 <__swbuf_r+0x54>
  40699c:	2d0a      	cmp	r5, #10
  40699e:	d015      	beq.n	4069cc <__swbuf_r+0x80>
  4069a0:	4638      	mov	r0, r7
  4069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4069a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4069aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4069ae:	81a2      	strh	r2, [r4, #12]
  4069b0:	6822      	ldr	r2, [r4, #0]
  4069b2:	6661      	str	r1, [r4, #100]	; 0x64
  4069b4:	6961      	ldr	r1, [r4, #20]
  4069b6:	1ad3      	subs	r3, r2, r3
  4069b8:	428b      	cmp	r3, r1
  4069ba:	dbe2      	blt.n	406982 <__swbuf_r+0x36>
  4069bc:	4621      	mov	r1, r4
  4069be:	4630      	mov	r0, r6
  4069c0:	f7fe fd0a 	bl	4053d8 <_fflush_r>
  4069c4:	b940      	cbnz	r0, 4069d8 <__swbuf_r+0x8c>
  4069c6:	6822      	ldr	r2, [r4, #0]
  4069c8:	2301      	movs	r3, #1
  4069ca:	e7db      	b.n	406984 <__swbuf_r+0x38>
  4069cc:	4621      	mov	r1, r4
  4069ce:	4630      	mov	r0, r6
  4069d0:	f7fe fd02 	bl	4053d8 <_fflush_r>
  4069d4:	2800      	cmp	r0, #0
  4069d6:	d0e3      	beq.n	4069a0 <__swbuf_r+0x54>
  4069d8:	f04f 37ff 	mov.w	r7, #4294967295
  4069dc:	e7e0      	b.n	4069a0 <__swbuf_r+0x54>
  4069de:	4621      	mov	r1, r4
  4069e0:	4630      	mov	r0, r6
  4069e2:	f7fe fbe5 	bl	4051b0 <__swsetup_r>
  4069e6:	2800      	cmp	r0, #0
  4069e8:	d1f6      	bne.n	4069d8 <__swbuf_r+0x8c>
  4069ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4069ee:	6923      	ldr	r3, [r4, #16]
  4069f0:	b291      	uxth	r1, r2
  4069f2:	e7bd      	b.n	406970 <__swbuf_r+0x24>
  4069f4:	f7fe fd48 	bl	405488 <__sinit>
  4069f8:	e7b0      	b.n	40695c <__swbuf_r+0x10>
  4069fa:	bf00      	nop

004069fc <_wcrtomb_r>:
  4069fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4069fe:	4606      	mov	r6, r0
  406a00:	b085      	sub	sp, #20
  406a02:	461f      	mov	r7, r3
  406a04:	b189      	cbz	r1, 406a2a <_wcrtomb_r+0x2e>
  406a06:	4c10      	ldr	r4, [pc, #64]	; (406a48 <_wcrtomb_r+0x4c>)
  406a08:	4d10      	ldr	r5, [pc, #64]	; (406a4c <_wcrtomb_r+0x50>)
  406a0a:	6824      	ldr	r4, [r4, #0]
  406a0c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406a0e:	2c00      	cmp	r4, #0
  406a10:	bf08      	it	eq
  406a12:	462c      	moveq	r4, r5
  406a14:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406a18:	47a0      	blx	r4
  406a1a:	1c43      	adds	r3, r0, #1
  406a1c:	d103      	bne.n	406a26 <_wcrtomb_r+0x2a>
  406a1e:	2200      	movs	r2, #0
  406a20:	238a      	movs	r3, #138	; 0x8a
  406a22:	603a      	str	r2, [r7, #0]
  406a24:	6033      	str	r3, [r6, #0]
  406a26:	b005      	add	sp, #20
  406a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a2a:	460c      	mov	r4, r1
  406a2c:	4906      	ldr	r1, [pc, #24]	; (406a48 <_wcrtomb_r+0x4c>)
  406a2e:	4a07      	ldr	r2, [pc, #28]	; (406a4c <_wcrtomb_r+0x50>)
  406a30:	6809      	ldr	r1, [r1, #0]
  406a32:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406a34:	2900      	cmp	r1, #0
  406a36:	bf08      	it	eq
  406a38:	4611      	moveq	r1, r2
  406a3a:	4622      	mov	r2, r4
  406a3c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406a40:	a901      	add	r1, sp, #4
  406a42:	47a0      	blx	r4
  406a44:	e7e9      	b.n	406a1a <_wcrtomb_r+0x1e>
  406a46:	bf00      	nop
  406a48:	20400020 	.word	0x20400020
  406a4c:	20400454 	.word	0x20400454

00406a50 <__ascii_wctomb>:
  406a50:	b121      	cbz	r1, 406a5c <__ascii_wctomb+0xc>
  406a52:	2aff      	cmp	r2, #255	; 0xff
  406a54:	d804      	bhi.n	406a60 <__ascii_wctomb+0x10>
  406a56:	700a      	strb	r2, [r1, #0]
  406a58:	2001      	movs	r0, #1
  406a5a:	4770      	bx	lr
  406a5c:	4608      	mov	r0, r1
  406a5e:	4770      	bx	lr
  406a60:	238a      	movs	r3, #138	; 0x8a
  406a62:	6003      	str	r3, [r0, #0]
  406a64:	f04f 30ff 	mov.w	r0, #4294967295
  406a68:	4770      	bx	lr
  406a6a:	bf00      	nop

00406a6c <_write_r>:
  406a6c:	b570      	push	{r4, r5, r6, lr}
  406a6e:	460d      	mov	r5, r1
  406a70:	4c08      	ldr	r4, [pc, #32]	; (406a94 <_write_r+0x28>)
  406a72:	4611      	mov	r1, r2
  406a74:	4606      	mov	r6, r0
  406a76:	461a      	mov	r2, r3
  406a78:	4628      	mov	r0, r5
  406a7a:	2300      	movs	r3, #0
  406a7c:	6023      	str	r3, [r4, #0]
  406a7e:	f7fc f953 	bl	402d28 <_write>
  406a82:	1c43      	adds	r3, r0, #1
  406a84:	d000      	beq.n	406a88 <_write_r+0x1c>
  406a86:	bd70      	pop	{r4, r5, r6, pc}
  406a88:	6823      	ldr	r3, [r4, #0]
  406a8a:	2b00      	cmp	r3, #0
  406a8c:	d0fb      	beq.n	406a86 <_write_r+0x1a>
  406a8e:	6033      	str	r3, [r6, #0]
  406a90:	bd70      	pop	{r4, r5, r6, pc}
  406a92:	bf00      	nop
  406a94:	20401140 	.word	0x20401140

00406a98 <__register_exitproc>:
  406a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406a9c:	4d2c      	ldr	r5, [pc, #176]	; (406b50 <__register_exitproc+0xb8>)
  406a9e:	4606      	mov	r6, r0
  406aa0:	6828      	ldr	r0, [r5, #0]
  406aa2:	4698      	mov	r8, r3
  406aa4:	460f      	mov	r7, r1
  406aa6:	4691      	mov	r9, r2
  406aa8:	f7ff f8ae 	bl	405c08 <__retarget_lock_acquire_recursive>
  406aac:	4b29      	ldr	r3, [pc, #164]	; (406b54 <__register_exitproc+0xbc>)
  406aae:	681c      	ldr	r4, [r3, #0]
  406ab0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406ab4:	2b00      	cmp	r3, #0
  406ab6:	d03e      	beq.n	406b36 <__register_exitproc+0x9e>
  406ab8:	685a      	ldr	r2, [r3, #4]
  406aba:	2a1f      	cmp	r2, #31
  406abc:	dc1c      	bgt.n	406af8 <__register_exitproc+0x60>
  406abe:	f102 0e01 	add.w	lr, r2, #1
  406ac2:	b176      	cbz	r6, 406ae2 <__register_exitproc+0x4a>
  406ac4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406ac8:	2401      	movs	r4, #1
  406aca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406ace:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406ad2:	4094      	lsls	r4, r2
  406ad4:	4320      	orrs	r0, r4
  406ad6:	2e02      	cmp	r6, #2
  406ad8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406adc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406ae0:	d023      	beq.n	406b2a <__register_exitproc+0x92>
  406ae2:	3202      	adds	r2, #2
  406ae4:	f8c3 e004 	str.w	lr, [r3, #4]
  406ae8:	6828      	ldr	r0, [r5, #0]
  406aea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406aee:	f7ff f88d 	bl	405c0c <__retarget_lock_release_recursive>
  406af2:	2000      	movs	r0, #0
  406af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406af8:	4b17      	ldr	r3, [pc, #92]	; (406b58 <__register_exitproc+0xc0>)
  406afa:	b30b      	cbz	r3, 406b40 <__register_exitproc+0xa8>
  406afc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406b00:	f7ff f8fe 	bl	405d00 <malloc>
  406b04:	4603      	mov	r3, r0
  406b06:	b1d8      	cbz	r0, 406b40 <__register_exitproc+0xa8>
  406b08:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406b0c:	6002      	str	r2, [r0, #0]
  406b0e:	2100      	movs	r1, #0
  406b10:	6041      	str	r1, [r0, #4]
  406b12:	460a      	mov	r2, r1
  406b14:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406b18:	f04f 0e01 	mov.w	lr, #1
  406b1c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406b20:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406b24:	2e00      	cmp	r6, #0
  406b26:	d0dc      	beq.n	406ae2 <__register_exitproc+0x4a>
  406b28:	e7cc      	b.n	406ac4 <__register_exitproc+0x2c>
  406b2a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406b2e:	430c      	orrs	r4, r1
  406b30:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406b34:	e7d5      	b.n	406ae2 <__register_exitproc+0x4a>
  406b36:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406b3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406b3e:	e7bb      	b.n	406ab8 <__register_exitproc+0x20>
  406b40:	6828      	ldr	r0, [r5, #0]
  406b42:	f7ff f863 	bl	405c0c <__retarget_lock_release_recursive>
  406b46:	f04f 30ff 	mov.w	r0, #4294967295
  406b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b4e:	bf00      	nop
  406b50:	20400450 	.word	0x20400450
  406b54:	00407e84 	.word	0x00407e84
  406b58:	00405d01 	.word	0x00405d01

00406b5c <_close_r>:
  406b5c:	b538      	push	{r3, r4, r5, lr}
  406b5e:	4c07      	ldr	r4, [pc, #28]	; (406b7c <_close_r+0x20>)
  406b60:	2300      	movs	r3, #0
  406b62:	4605      	mov	r5, r0
  406b64:	4608      	mov	r0, r1
  406b66:	6023      	str	r3, [r4, #0]
  406b68:	f7fc ff68 	bl	403a3c <_close>
  406b6c:	1c43      	adds	r3, r0, #1
  406b6e:	d000      	beq.n	406b72 <_close_r+0x16>
  406b70:	bd38      	pop	{r3, r4, r5, pc}
  406b72:	6823      	ldr	r3, [r4, #0]
  406b74:	2b00      	cmp	r3, #0
  406b76:	d0fb      	beq.n	406b70 <_close_r+0x14>
  406b78:	602b      	str	r3, [r5, #0]
  406b7a:	bd38      	pop	{r3, r4, r5, pc}
  406b7c:	20401140 	.word	0x20401140

00406b80 <_fclose_r>:
  406b80:	b570      	push	{r4, r5, r6, lr}
  406b82:	b159      	cbz	r1, 406b9c <_fclose_r+0x1c>
  406b84:	4605      	mov	r5, r0
  406b86:	460c      	mov	r4, r1
  406b88:	b110      	cbz	r0, 406b90 <_fclose_r+0x10>
  406b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406b8c:	2b00      	cmp	r3, #0
  406b8e:	d03c      	beq.n	406c0a <_fclose_r+0x8a>
  406b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406b92:	07d8      	lsls	r0, r3, #31
  406b94:	d505      	bpl.n	406ba2 <_fclose_r+0x22>
  406b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b9a:	b92b      	cbnz	r3, 406ba8 <_fclose_r+0x28>
  406b9c:	2600      	movs	r6, #0
  406b9e:	4630      	mov	r0, r6
  406ba0:	bd70      	pop	{r4, r5, r6, pc}
  406ba2:	89a3      	ldrh	r3, [r4, #12]
  406ba4:	0599      	lsls	r1, r3, #22
  406ba6:	d53c      	bpl.n	406c22 <_fclose_r+0xa2>
  406ba8:	4621      	mov	r1, r4
  406baa:	4628      	mov	r0, r5
  406bac:	f7fe fb74 	bl	405298 <__sflush_r>
  406bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406bb2:	4606      	mov	r6, r0
  406bb4:	b133      	cbz	r3, 406bc4 <_fclose_r+0x44>
  406bb6:	69e1      	ldr	r1, [r4, #28]
  406bb8:	4628      	mov	r0, r5
  406bba:	4798      	blx	r3
  406bbc:	2800      	cmp	r0, #0
  406bbe:	bfb8      	it	lt
  406bc0:	f04f 36ff 	movlt.w	r6, #4294967295
  406bc4:	89a3      	ldrh	r3, [r4, #12]
  406bc6:	061a      	lsls	r2, r3, #24
  406bc8:	d422      	bmi.n	406c10 <_fclose_r+0x90>
  406bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406bcc:	b141      	cbz	r1, 406be0 <_fclose_r+0x60>
  406bce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406bd2:	4299      	cmp	r1, r3
  406bd4:	d002      	beq.n	406bdc <_fclose_r+0x5c>
  406bd6:	4628      	mov	r0, r5
  406bd8:	f7fe fd7c 	bl	4056d4 <_free_r>
  406bdc:	2300      	movs	r3, #0
  406bde:	6323      	str	r3, [r4, #48]	; 0x30
  406be0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406be2:	b121      	cbz	r1, 406bee <_fclose_r+0x6e>
  406be4:	4628      	mov	r0, r5
  406be6:	f7fe fd75 	bl	4056d4 <_free_r>
  406bea:	2300      	movs	r3, #0
  406bec:	6463      	str	r3, [r4, #68]	; 0x44
  406bee:	f7fe fc77 	bl	4054e0 <__sfp_lock_acquire>
  406bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406bf4:	2200      	movs	r2, #0
  406bf6:	07db      	lsls	r3, r3, #31
  406bf8:	81a2      	strh	r2, [r4, #12]
  406bfa:	d50e      	bpl.n	406c1a <_fclose_r+0x9a>
  406bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406bfe:	f7ff f801 	bl	405c04 <__retarget_lock_close_recursive>
  406c02:	f7fe fc73 	bl	4054ec <__sfp_lock_release>
  406c06:	4630      	mov	r0, r6
  406c08:	bd70      	pop	{r4, r5, r6, pc}
  406c0a:	f7fe fc3d 	bl	405488 <__sinit>
  406c0e:	e7bf      	b.n	406b90 <_fclose_r+0x10>
  406c10:	6921      	ldr	r1, [r4, #16]
  406c12:	4628      	mov	r0, r5
  406c14:	f7fe fd5e 	bl	4056d4 <_free_r>
  406c18:	e7d7      	b.n	406bca <_fclose_r+0x4a>
  406c1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c1c:	f7fe fff6 	bl	405c0c <__retarget_lock_release_recursive>
  406c20:	e7ec      	b.n	406bfc <_fclose_r+0x7c>
  406c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c24:	f7fe fff0 	bl	405c08 <__retarget_lock_acquire_recursive>
  406c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c2c:	2b00      	cmp	r3, #0
  406c2e:	d1bb      	bne.n	406ba8 <_fclose_r+0x28>
  406c30:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406c32:	f016 0601 	ands.w	r6, r6, #1
  406c36:	d1b1      	bne.n	406b9c <_fclose_r+0x1c>
  406c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c3a:	f7fe ffe7 	bl	405c0c <__retarget_lock_release_recursive>
  406c3e:	4630      	mov	r0, r6
  406c40:	bd70      	pop	{r4, r5, r6, pc}
  406c42:	bf00      	nop

00406c44 <_fstat_r>:
  406c44:	b538      	push	{r3, r4, r5, lr}
  406c46:	460b      	mov	r3, r1
  406c48:	4c07      	ldr	r4, [pc, #28]	; (406c68 <_fstat_r+0x24>)
  406c4a:	4605      	mov	r5, r0
  406c4c:	4611      	mov	r1, r2
  406c4e:	4618      	mov	r0, r3
  406c50:	2300      	movs	r3, #0
  406c52:	6023      	str	r3, [r4, #0]
  406c54:	f7fc fef5 	bl	403a42 <_fstat>
  406c58:	1c43      	adds	r3, r0, #1
  406c5a:	d000      	beq.n	406c5e <_fstat_r+0x1a>
  406c5c:	bd38      	pop	{r3, r4, r5, pc}
  406c5e:	6823      	ldr	r3, [r4, #0]
  406c60:	2b00      	cmp	r3, #0
  406c62:	d0fb      	beq.n	406c5c <_fstat_r+0x18>
  406c64:	602b      	str	r3, [r5, #0]
  406c66:	bd38      	pop	{r3, r4, r5, pc}
  406c68:	20401140 	.word	0x20401140

00406c6c <_isatty_r>:
  406c6c:	b538      	push	{r3, r4, r5, lr}
  406c6e:	4c07      	ldr	r4, [pc, #28]	; (406c8c <_isatty_r+0x20>)
  406c70:	2300      	movs	r3, #0
  406c72:	4605      	mov	r5, r0
  406c74:	4608      	mov	r0, r1
  406c76:	6023      	str	r3, [r4, #0]
  406c78:	f7fc fee8 	bl	403a4c <_isatty>
  406c7c:	1c43      	adds	r3, r0, #1
  406c7e:	d000      	beq.n	406c82 <_isatty_r+0x16>
  406c80:	bd38      	pop	{r3, r4, r5, pc}
  406c82:	6823      	ldr	r3, [r4, #0]
  406c84:	2b00      	cmp	r3, #0
  406c86:	d0fb      	beq.n	406c80 <_isatty_r+0x14>
  406c88:	602b      	str	r3, [r5, #0]
  406c8a:	bd38      	pop	{r3, r4, r5, pc}
  406c8c:	20401140 	.word	0x20401140

00406c90 <_lseek_r>:
  406c90:	b570      	push	{r4, r5, r6, lr}
  406c92:	460d      	mov	r5, r1
  406c94:	4c08      	ldr	r4, [pc, #32]	; (406cb8 <_lseek_r+0x28>)
  406c96:	4611      	mov	r1, r2
  406c98:	4606      	mov	r6, r0
  406c9a:	461a      	mov	r2, r3
  406c9c:	4628      	mov	r0, r5
  406c9e:	2300      	movs	r3, #0
  406ca0:	6023      	str	r3, [r4, #0]
  406ca2:	f7fc fed5 	bl	403a50 <_lseek>
  406ca6:	1c43      	adds	r3, r0, #1
  406ca8:	d000      	beq.n	406cac <_lseek_r+0x1c>
  406caa:	bd70      	pop	{r4, r5, r6, pc}
  406cac:	6823      	ldr	r3, [r4, #0]
  406cae:	2b00      	cmp	r3, #0
  406cb0:	d0fb      	beq.n	406caa <_lseek_r+0x1a>
  406cb2:	6033      	str	r3, [r6, #0]
  406cb4:	bd70      	pop	{r4, r5, r6, pc}
  406cb6:	bf00      	nop
  406cb8:	20401140 	.word	0x20401140

00406cbc <_read_r>:
  406cbc:	b570      	push	{r4, r5, r6, lr}
  406cbe:	460d      	mov	r5, r1
  406cc0:	4c08      	ldr	r4, [pc, #32]	; (406ce4 <_read_r+0x28>)
  406cc2:	4611      	mov	r1, r2
  406cc4:	4606      	mov	r6, r0
  406cc6:	461a      	mov	r2, r3
  406cc8:	4628      	mov	r0, r5
  406cca:	2300      	movs	r3, #0
  406ccc:	6023      	str	r3, [r4, #0]
  406cce:	f7fc f80d 	bl	402cec <_read>
  406cd2:	1c43      	adds	r3, r0, #1
  406cd4:	d000      	beq.n	406cd8 <_read_r+0x1c>
  406cd6:	bd70      	pop	{r4, r5, r6, pc}
  406cd8:	6823      	ldr	r3, [r4, #0]
  406cda:	2b00      	cmp	r3, #0
  406cdc:	d0fb      	beq.n	406cd6 <_read_r+0x1a>
  406cde:	6033      	str	r3, [r6, #0]
  406ce0:	bd70      	pop	{r4, r5, r6, pc}
  406ce2:	bf00      	nop
  406ce4:	20401140 	.word	0x20401140

00406ce8 <__aeabi_uldivmod>:
  406ce8:	b953      	cbnz	r3, 406d00 <__aeabi_uldivmod+0x18>
  406cea:	b94a      	cbnz	r2, 406d00 <__aeabi_uldivmod+0x18>
  406cec:	2900      	cmp	r1, #0
  406cee:	bf08      	it	eq
  406cf0:	2800      	cmpeq	r0, #0
  406cf2:	bf1c      	itt	ne
  406cf4:	f04f 31ff 	movne.w	r1, #4294967295
  406cf8:	f04f 30ff 	movne.w	r0, #4294967295
  406cfc:	f000 b97a 	b.w	406ff4 <__aeabi_idiv0>
  406d00:	f1ad 0c08 	sub.w	ip, sp, #8
  406d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406d08:	f000 f806 	bl	406d18 <__udivmoddi4>
  406d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406d14:	b004      	add	sp, #16
  406d16:	4770      	bx	lr

00406d18 <__udivmoddi4>:
  406d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406d1c:	468c      	mov	ip, r1
  406d1e:	460d      	mov	r5, r1
  406d20:	4604      	mov	r4, r0
  406d22:	9e08      	ldr	r6, [sp, #32]
  406d24:	2b00      	cmp	r3, #0
  406d26:	d151      	bne.n	406dcc <__udivmoddi4+0xb4>
  406d28:	428a      	cmp	r2, r1
  406d2a:	4617      	mov	r7, r2
  406d2c:	d96d      	bls.n	406e0a <__udivmoddi4+0xf2>
  406d2e:	fab2 fe82 	clz	lr, r2
  406d32:	f1be 0f00 	cmp.w	lr, #0
  406d36:	d00b      	beq.n	406d50 <__udivmoddi4+0x38>
  406d38:	f1ce 0c20 	rsb	ip, lr, #32
  406d3c:	fa01 f50e 	lsl.w	r5, r1, lr
  406d40:	fa20 fc0c 	lsr.w	ip, r0, ip
  406d44:	fa02 f70e 	lsl.w	r7, r2, lr
  406d48:	ea4c 0c05 	orr.w	ip, ip, r5
  406d4c:	fa00 f40e 	lsl.w	r4, r0, lr
  406d50:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406d54:	0c25      	lsrs	r5, r4, #16
  406d56:	fbbc f8fa 	udiv	r8, ip, sl
  406d5a:	fa1f f987 	uxth.w	r9, r7
  406d5e:	fb0a cc18 	mls	ip, sl, r8, ip
  406d62:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406d66:	fb08 f309 	mul.w	r3, r8, r9
  406d6a:	42ab      	cmp	r3, r5
  406d6c:	d90a      	bls.n	406d84 <__udivmoddi4+0x6c>
  406d6e:	19ed      	adds	r5, r5, r7
  406d70:	f108 32ff 	add.w	r2, r8, #4294967295
  406d74:	f080 8123 	bcs.w	406fbe <__udivmoddi4+0x2a6>
  406d78:	42ab      	cmp	r3, r5
  406d7a:	f240 8120 	bls.w	406fbe <__udivmoddi4+0x2a6>
  406d7e:	f1a8 0802 	sub.w	r8, r8, #2
  406d82:	443d      	add	r5, r7
  406d84:	1aed      	subs	r5, r5, r3
  406d86:	b2a4      	uxth	r4, r4
  406d88:	fbb5 f0fa 	udiv	r0, r5, sl
  406d8c:	fb0a 5510 	mls	r5, sl, r0, r5
  406d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406d94:	fb00 f909 	mul.w	r9, r0, r9
  406d98:	45a1      	cmp	r9, r4
  406d9a:	d909      	bls.n	406db0 <__udivmoddi4+0x98>
  406d9c:	19e4      	adds	r4, r4, r7
  406d9e:	f100 33ff 	add.w	r3, r0, #4294967295
  406da2:	f080 810a 	bcs.w	406fba <__udivmoddi4+0x2a2>
  406da6:	45a1      	cmp	r9, r4
  406da8:	f240 8107 	bls.w	406fba <__udivmoddi4+0x2a2>
  406dac:	3802      	subs	r0, #2
  406dae:	443c      	add	r4, r7
  406db0:	eba4 0409 	sub.w	r4, r4, r9
  406db4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406db8:	2100      	movs	r1, #0
  406dba:	2e00      	cmp	r6, #0
  406dbc:	d061      	beq.n	406e82 <__udivmoddi4+0x16a>
  406dbe:	fa24 f40e 	lsr.w	r4, r4, lr
  406dc2:	2300      	movs	r3, #0
  406dc4:	6034      	str	r4, [r6, #0]
  406dc6:	6073      	str	r3, [r6, #4]
  406dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406dcc:	428b      	cmp	r3, r1
  406dce:	d907      	bls.n	406de0 <__udivmoddi4+0xc8>
  406dd0:	2e00      	cmp	r6, #0
  406dd2:	d054      	beq.n	406e7e <__udivmoddi4+0x166>
  406dd4:	2100      	movs	r1, #0
  406dd6:	e886 0021 	stmia.w	r6, {r0, r5}
  406dda:	4608      	mov	r0, r1
  406ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406de0:	fab3 f183 	clz	r1, r3
  406de4:	2900      	cmp	r1, #0
  406de6:	f040 808e 	bne.w	406f06 <__udivmoddi4+0x1ee>
  406dea:	42ab      	cmp	r3, r5
  406dec:	d302      	bcc.n	406df4 <__udivmoddi4+0xdc>
  406dee:	4282      	cmp	r2, r0
  406df0:	f200 80fa 	bhi.w	406fe8 <__udivmoddi4+0x2d0>
  406df4:	1a84      	subs	r4, r0, r2
  406df6:	eb65 0503 	sbc.w	r5, r5, r3
  406dfa:	2001      	movs	r0, #1
  406dfc:	46ac      	mov	ip, r5
  406dfe:	2e00      	cmp	r6, #0
  406e00:	d03f      	beq.n	406e82 <__udivmoddi4+0x16a>
  406e02:	e886 1010 	stmia.w	r6, {r4, ip}
  406e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e0a:	b912      	cbnz	r2, 406e12 <__udivmoddi4+0xfa>
  406e0c:	2701      	movs	r7, #1
  406e0e:	fbb7 f7f2 	udiv	r7, r7, r2
  406e12:	fab7 fe87 	clz	lr, r7
  406e16:	f1be 0f00 	cmp.w	lr, #0
  406e1a:	d134      	bne.n	406e86 <__udivmoddi4+0x16e>
  406e1c:	1beb      	subs	r3, r5, r7
  406e1e:	0c3a      	lsrs	r2, r7, #16
  406e20:	fa1f fc87 	uxth.w	ip, r7
  406e24:	2101      	movs	r1, #1
  406e26:	fbb3 f8f2 	udiv	r8, r3, r2
  406e2a:	0c25      	lsrs	r5, r4, #16
  406e2c:	fb02 3318 	mls	r3, r2, r8, r3
  406e30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406e34:	fb0c f308 	mul.w	r3, ip, r8
  406e38:	42ab      	cmp	r3, r5
  406e3a:	d907      	bls.n	406e4c <__udivmoddi4+0x134>
  406e3c:	19ed      	adds	r5, r5, r7
  406e3e:	f108 30ff 	add.w	r0, r8, #4294967295
  406e42:	d202      	bcs.n	406e4a <__udivmoddi4+0x132>
  406e44:	42ab      	cmp	r3, r5
  406e46:	f200 80d1 	bhi.w	406fec <__udivmoddi4+0x2d4>
  406e4a:	4680      	mov	r8, r0
  406e4c:	1aed      	subs	r5, r5, r3
  406e4e:	b2a3      	uxth	r3, r4
  406e50:	fbb5 f0f2 	udiv	r0, r5, r2
  406e54:	fb02 5510 	mls	r5, r2, r0, r5
  406e58:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406e5c:	fb0c fc00 	mul.w	ip, ip, r0
  406e60:	45a4      	cmp	ip, r4
  406e62:	d907      	bls.n	406e74 <__udivmoddi4+0x15c>
  406e64:	19e4      	adds	r4, r4, r7
  406e66:	f100 33ff 	add.w	r3, r0, #4294967295
  406e6a:	d202      	bcs.n	406e72 <__udivmoddi4+0x15a>
  406e6c:	45a4      	cmp	ip, r4
  406e6e:	f200 80b8 	bhi.w	406fe2 <__udivmoddi4+0x2ca>
  406e72:	4618      	mov	r0, r3
  406e74:	eba4 040c 	sub.w	r4, r4, ip
  406e78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406e7c:	e79d      	b.n	406dba <__udivmoddi4+0xa2>
  406e7e:	4631      	mov	r1, r6
  406e80:	4630      	mov	r0, r6
  406e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e86:	f1ce 0420 	rsb	r4, lr, #32
  406e8a:	fa05 f30e 	lsl.w	r3, r5, lr
  406e8e:	fa07 f70e 	lsl.w	r7, r7, lr
  406e92:	fa20 f804 	lsr.w	r8, r0, r4
  406e96:	0c3a      	lsrs	r2, r7, #16
  406e98:	fa25 f404 	lsr.w	r4, r5, r4
  406e9c:	ea48 0803 	orr.w	r8, r8, r3
  406ea0:	fbb4 f1f2 	udiv	r1, r4, r2
  406ea4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406ea8:	fb02 4411 	mls	r4, r2, r1, r4
  406eac:	fa1f fc87 	uxth.w	ip, r7
  406eb0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406eb4:	fb01 f30c 	mul.w	r3, r1, ip
  406eb8:	42ab      	cmp	r3, r5
  406eba:	fa00 f40e 	lsl.w	r4, r0, lr
  406ebe:	d909      	bls.n	406ed4 <__udivmoddi4+0x1bc>
  406ec0:	19ed      	adds	r5, r5, r7
  406ec2:	f101 30ff 	add.w	r0, r1, #4294967295
  406ec6:	f080 808a 	bcs.w	406fde <__udivmoddi4+0x2c6>
  406eca:	42ab      	cmp	r3, r5
  406ecc:	f240 8087 	bls.w	406fde <__udivmoddi4+0x2c6>
  406ed0:	3902      	subs	r1, #2
  406ed2:	443d      	add	r5, r7
  406ed4:	1aeb      	subs	r3, r5, r3
  406ed6:	fa1f f588 	uxth.w	r5, r8
  406eda:	fbb3 f0f2 	udiv	r0, r3, r2
  406ede:	fb02 3310 	mls	r3, r2, r0, r3
  406ee2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406ee6:	fb00 f30c 	mul.w	r3, r0, ip
  406eea:	42ab      	cmp	r3, r5
  406eec:	d907      	bls.n	406efe <__udivmoddi4+0x1e6>
  406eee:	19ed      	adds	r5, r5, r7
  406ef0:	f100 38ff 	add.w	r8, r0, #4294967295
  406ef4:	d26f      	bcs.n	406fd6 <__udivmoddi4+0x2be>
  406ef6:	42ab      	cmp	r3, r5
  406ef8:	d96d      	bls.n	406fd6 <__udivmoddi4+0x2be>
  406efa:	3802      	subs	r0, #2
  406efc:	443d      	add	r5, r7
  406efe:	1aeb      	subs	r3, r5, r3
  406f00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406f04:	e78f      	b.n	406e26 <__udivmoddi4+0x10e>
  406f06:	f1c1 0720 	rsb	r7, r1, #32
  406f0a:	fa22 f807 	lsr.w	r8, r2, r7
  406f0e:	408b      	lsls	r3, r1
  406f10:	fa05 f401 	lsl.w	r4, r5, r1
  406f14:	ea48 0303 	orr.w	r3, r8, r3
  406f18:	fa20 fe07 	lsr.w	lr, r0, r7
  406f1c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406f20:	40fd      	lsrs	r5, r7
  406f22:	ea4e 0e04 	orr.w	lr, lr, r4
  406f26:	fbb5 f9fc 	udiv	r9, r5, ip
  406f2a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406f2e:	fb0c 5519 	mls	r5, ip, r9, r5
  406f32:	fa1f f883 	uxth.w	r8, r3
  406f36:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406f3a:	fb09 f408 	mul.w	r4, r9, r8
  406f3e:	42ac      	cmp	r4, r5
  406f40:	fa02 f201 	lsl.w	r2, r2, r1
  406f44:	fa00 fa01 	lsl.w	sl, r0, r1
  406f48:	d908      	bls.n	406f5c <__udivmoddi4+0x244>
  406f4a:	18ed      	adds	r5, r5, r3
  406f4c:	f109 30ff 	add.w	r0, r9, #4294967295
  406f50:	d243      	bcs.n	406fda <__udivmoddi4+0x2c2>
  406f52:	42ac      	cmp	r4, r5
  406f54:	d941      	bls.n	406fda <__udivmoddi4+0x2c2>
  406f56:	f1a9 0902 	sub.w	r9, r9, #2
  406f5a:	441d      	add	r5, r3
  406f5c:	1b2d      	subs	r5, r5, r4
  406f5e:	fa1f fe8e 	uxth.w	lr, lr
  406f62:	fbb5 f0fc 	udiv	r0, r5, ip
  406f66:	fb0c 5510 	mls	r5, ip, r0, r5
  406f6a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406f6e:	fb00 f808 	mul.w	r8, r0, r8
  406f72:	45a0      	cmp	r8, r4
  406f74:	d907      	bls.n	406f86 <__udivmoddi4+0x26e>
  406f76:	18e4      	adds	r4, r4, r3
  406f78:	f100 35ff 	add.w	r5, r0, #4294967295
  406f7c:	d229      	bcs.n	406fd2 <__udivmoddi4+0x2ba>
  406f7e:	45a0      	cmp	r8, r4
  406f80:	d927      	bls.n	406fd2 <__udivmoddi4+0x2ba>
  406f82:	3802      	subs	r0, #2
  406f84:	441c      	add	r4, r3
  406f86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406f8a:	eba4 0408 	sub.w	r4, r4, r8
  406f8e:	fba0 8902 	umull	r8, r9, r0, r2
  406f92:	454c      	cmp	r4, r9
  406f94:	46c6      	mov	lr, r8
  406f96:	464d      	mov	r5, r9
  406f98:	d315      	bcc.n	406fc6 <__udivmoddi4+0x2ae>
  406f9a:	d012      	beq.n	406fc2 <__udivmoddi4+0x2aa>
  406f9c:	b156      	cbz	r6, 406fb4 <__udivmoddi4+0x29c>
  406f9e:	ebba 030e 	subs.w	r3, sl, lr
  406fa2:	eb64 0405 	sbc.w	r4, r4, r5
  406fa6:	fa04 f707 	lsl.w	r7, r4, r7
  406faa:	40cb      	lsrs	r3, r1
  406fac:	431f      	orrs	r7, r3
  406fae:	40cc      	lsrs	r4, r1
  406fb0:	6037      	str	r7, [r6, #0]
  406fb2:	6074      	str	r4, [r6, #4]
  406fb4:	2100      	movs	r1, #0
  406fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fba:	4618      	mov	r0, r3
  406fbc:	e6f8      	b.n	406db0 <__udivmoddi4+0x98>
  406fbe:	4690      	mov	r8, r2
  406fc0:	e6e0      	b.n	406d84 <__udivmoddi4+0x6c>
  406fc2:	45c2      	cmp	sl, r8
  406fc4:	d2ea      	bcs.n	406f9c <__udivmoddi4+0x284>
  406fc6:	ebb8 0e02 	subs.w	lr, r8, r2
  406fca:	eb69 0503 	sbc.w	r5, r9, r3
  406fce:	3801      	subs	r0, #1
  406fd0:	e7e4      	b.n	406f9c <__udivmoddi4+0x284>
  406fd2:	4628      	mov	r0, r5
  406fd4:	e7d7      	b.n	406f86 <__udivmoddi4+0x26e>
  406fd6:	4640      	mov	r0, r8
  406fd8:	e791      	b.n	406efe <__udivmoddi4+0x1e6>
  406fda:	4681      	mov	r9, r0
  406fdc:	e7be      	b.n	406f5c <__udivmoddi4+0x244>
  406fde:	4601      	mov	r1, r0
  406fe0:	e778      	b.n	406ed4 <__udivmoddi4+0x1bc>
  406fe2:	3802      	subs	r0, #2
  406fe4:	443c      	add	r4, r7
  406fe6:	e745      	b.n	406e74 <__udivmoddi4+0x15c>
  406fe8:	4608      	mov	r0, r1
  406fea:	e708      	b.n	406dfe <__udivmoddi4+0xe6>
  406fec:	f1a8 0802 	sub.w	r8, r8, #2
  406ff0:	443d      	add	r5, r7
  406ff2:	e72b      	b.n	406e4c <__udivmoddi4+0x134>

00406ff4 <__aeabi_idiv0>:
  406ff4:	4770      	bx	lr
  406ff6:	bf00      	nop

00406ff8 <__FUNCTION__.10799>:
  406ff8:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  407008:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  407018:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  407028:	204c 6f63 6d6d 6e61 2164 000a 000d 0000     L command!......

00407038 <__FUNCTION__.9901>:
  407038:	6968 5f66 6573 646e 0000 0000               hif_send....

00407044 <__FUNCTION__.9911>:
  407044:	6968 5f66 7369 0072                         hif_isr.

0040704c <__FUNCTION__.9917>:
  40704c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040705c <__FUNCTION__.9932>:
  40705c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00407068 <__FUNCTION__.9947>:
  407068:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  407078:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  407088:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  407098:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  4070a8:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  4070b8:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  4070c8:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  4070d8:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  4070e8:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  4070f8:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  407108:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  407118:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  407128:	2074 5852 4420 6e6f 0a65 0000 6828 6669     t RX Done...(hif
  407138:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
  407148:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
  407158:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
  407168:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
  407178:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
  407188:	6828 6669 2029 4146 4c49 7420 206f 6177     (hif) FAIL to wa
  407198:	656b 7075 7420 6568 6320 6968 0a70 0000     keup the chip...
  4071a8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
  4071b8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
  4071c8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
  4071d8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
  4071e8:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
  4071f8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
  407208:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
  407218:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
  407228:	6666 7265 7320 7a69 2065 253c 3e64 253c     ffer size <%d><%
  407238:	3e64 000a 5041 2050 6552 7571 7365 6574     d>..APP Requeste
  407248:	2064 6441 7264 7365 2073 6562 6f79 646e     d Address beyond
  407258:	7420 6568 7220 6365 7669 6465 6220 6675      the recived buf
  407268:	6566 2072 6461 7264 7365 2073 6e61 2064     fer address and 
  407278:	656c 676e 6874 000a 5247 2070 203f 6425     length..GRp ? %d
  407288:	000a 0000 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
  407298:	7720 6b61 7075 7420 6568 6320 6968 0a70      wakup the chip.
  4072a8:	0000 0000                                   ....

004072ac <__FUNCTION__.9874>:
  4072ac:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

004072b8 <__FUNCTION__.9898>:
  4072b8:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

004072c8 <__FUNCTION__.9926>:
  4072c8:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  4072d8:	735f 0063 4128 5050 2829 4e49 4f46 0029     _sc.(APP)(INFO).
  4072e8:	6f43 666e 696c 7463 6465 4920 2050 2022     Conflicted IP " 
  4072f8:	7525 252e 2e75 7525 252e 2075 2022 000a     %u.%u.%u.%u " ..
  407308:	4552 2051 6f4e 2074 6564 6966 656e 2064     REQ Not defined 
  407318:	6425 000a 654b 2079 7369 6e20 746f 7620     %d..Key is not v
  407328:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  407338:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  407348:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  407358:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  407368:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  407378:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  407388:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  407398:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  4073a8:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  4073b8:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  4073c8:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  4073d8:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  4073e8:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  4073f8:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  407408:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  407418:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  407428:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

00407438 <__FUNCTION__.9711>:
  407438:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.

00407448 <__FUNCTION__.9805>:
  407448:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
  407458:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  407468:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  407478:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  407488:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  407498:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  4074a8:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  4074b8:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  4074c8:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  4074d8:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  4074e8:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  4074f8:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  407508:	000a 0000 6572 3a67 7825 2f20 2520 2078     ....reg:%x / %x 
  407518:	000a 0000                                   ....

0040751c <__FUNCTION__.9792>:
  40751c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00407528 <__FUNCTION__.9799>:
  407528:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  407538:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  407548:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  407558:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  407568:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  407578:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  407588:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  407598:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  4075a8:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  4075b8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  4075c8:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  4075d8:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

004075e4 <__FUNCTION__.9176>:
  4075e4:	7073 5f69 6d63 0064                         spi_cmd.

004075ec <__FUNCTION__.9184>:
  4075ec:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

004075f8 <__FUNCTION__.9200>:
  4075f8:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00407608 <__FUNCTION__.9215>:
  407608:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00407618 <__FUNCTION__.9225>:
  407618:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00407628 <__FUNCTION__.9233>:
  407628:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00407638 <__FUNCTION__.9242>:
  407638:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00407648 <__FUNCTION__.9250>:
  407648:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00407654 <__FUNCTION__.9267>:
  407654:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00407660 <crc7_syndrome_table>:
  407660:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  407670:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  407680:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  407690:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  4076a0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  4076b0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  4076c0:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  4076d0:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  4076e0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  4076f0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  407700:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  407710:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  407720:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  407730:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  407740:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  407750:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  407760:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  407770:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  407780:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  407790:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  4077a0:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  4077b0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4077c0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  4077d0:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  4077e0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4077f0:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  407800:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  407810:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  407820:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  407830:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  407840:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  407850:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  407860:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  407870:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  407880:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  407890:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  4078a0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  4078b0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  4078c0:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  4078d0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4078e0:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  4078f0:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  407900:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  407910:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  407920:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  407930:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  407940:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  407950:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  407960:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  407970:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  407980:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  407990:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  4079a0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4079b0:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  4079c0:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  4079d0:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  4079e0:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  4079f0:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......
  407a00:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  407a10:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  407a20:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  407a30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  407a40:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  407a50:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  407a60:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  407a70:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  407a80:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  407a90:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  407aa0:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  407ab0:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  407ac0:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  407ad0:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  407ae0:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  407af0:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  407b00:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  407b10:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  407b20:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  407b30:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  407b40:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  407b50:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  407b60:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  407b70:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  407b80:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  407b90:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  407ba0:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  407bb0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  407bc0:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  407bd0:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  407be0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  407bf0:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  407c00:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  407c10:	0000 0000 4528 5252 2952 7543 7272 6e65     ....(ERRR)Curren
  407c20:	2074 253c 3e64 000a 2d2d 5720 4e49 3143     t <%d>..-- WINC1
  407c30:	3035 2030 6577 7461 6568 2072 6c63 6569     500 weather clie
  407c40:	746e 6520 6178 706d 656c 2d20 0d2d 2d0a     nt example --..-
  407c50:	202d 4153 454d 3037 582d 4c50 2044 2d2d     - SAME70-XPLD --
  407c60:	0a0d 2d2d 4320 6d6f 6970 656c 3a64 4d20     ..-- Compiled: M
  407c70:	7961 3120 2030 3032 3332 3120 3a36 3733     ay 10 2023 16:37
  407c80:	323a 2033 2d2d 0a0d 0000 0000 616d 6e69     :23 --......main
  407c90:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
  407ca0:	6163 6c6c 6520 7272 726f 2821 6425 0d29     call error!(%d).
  407cb0:	000a 0000 7241 6371 6d6f 0070 616d 6e69     ....Arqcomp.main
  407cc0:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
  407cd0:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
  407ce0:	6f53 696e 4163 7172 6f63 706d 0000 0000     SonicArqcomp....
  407cf0:	3931 2e32 3631 2e38 3035 322e 0032 0000     192.168.50.22...
  407d00:	6e49 7465 6120 6f74 206e 203a 6425 0000     Inet aton : %d..
  407d10:	6f73 6b63 7465 6920 696e 2074 000a 0000     socket init ....
  407d20:	616d 6e69 203a 6166 6c69 6465 7420 206f     main: failed to 
  407d30:	7263 6165 6574 5420 5043 6320 696c 6e65     create TCP clien
  407d40:	2074 6f73 6b63 7465 6520 7272 726f 0d21     t socket error!.
  407d50:	000a 0000 6f73 6b63 7465 6320 6e6f 656e     ....socket conne
  407d60:	7463 6e69 0a67 0000 7265 6f72 0a72 0000     cting...error...
  407d70:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
  407d80:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
  407d90:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
  407da0:	6f73 6b63 7465 6d5f 6773 635f 6e6f 656e     socket_msg_conne
  407db0:	7463 000a 4547 2054 202f 5448 5054 312f     ct..GET / HTTP/1
  407dc0:	312e 0a0d 4120 6363 7065 3a74 2a20 2a2f     .1.. Accept: */*
  407dd0:	0a0d 0a0d 0000 0000 6573 646e 0a20 0000     ........send ...
  407de0:	6f73 6b63 7465 635f 3a62 6320 6e6f 656e     socket_cb: conne
  407df0:	7463 6520 7272 726f 0d21 000a 6f73 6b63     ct error!...sock
  407e00:	7465 635f 3a62 7220 6365 2076 7265 6f72     et_cb: recv erro
  407e10:	2172 0a0d 0000 0000 6977 6966 635f 3a62     r!......wifi_cb:
  407e20:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
  407e30:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
  407e40:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
  407e50:	454e 5443 4445 0a0d 0000 0000 6977 6966     NECTED......wifi
  407e60:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
  407e70:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
  407e80:	0000 0000                                   ....

00407e84 <_global_impure_ptr>:
  407e84:	0028 2040 3130 3332 3534 3736 3938 4241     (.@ 0123456789AB
  407e94:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407ea4:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407eb4:	296c 0000                                   l)..

00407eb8 <blanks.7217>:
  407eb8:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407ec8 <zeroes.7218>:
  407ec8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407ed8:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00407ee8 <_ctype_>:
  407ee8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  407ef8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  407f08:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  407f18:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407f28:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407f38:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  407f48:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  407f58:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  407f68:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00407fec <_init>:
  407fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407fee:	bf00      	nop
  407ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407ff2:	bc08      	pop	{r3}
  407ff4:	469e      	mov	lr, r3
  407ff6:	4770      	bx	lr

00407ff8 <__init_array_start>:
  407ff8:	00405279 	.word	0x00405279

00407ffc <__frame_dummy_init_array_entry>:
  407ffc:	00400165                                e.@.

00408000 <_fini>:
  408000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408002:	bf00      	nop
  408004:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408006:	bc08      	pop	{r3}
  408008:	469e      	mov	lr, r3
  40800a:	4770      	bx	lr

0040800c <__fini_array_start>:
  40800c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	00ff 0000                                   ....

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	111c 2040                                   ..@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	6a51 0040 6271 0040 0000 0000 7ee8 0040     Qj@.qb@......~@.
20400544:	7ee4 0040 7dd4 0040 7dd4 0040 7dd4 0040     .~@..}@..}@..}@.
20400554:	7dd4 0040 7dd4 0040 7dd4 0040 7dd4 0040     .}@..}@..}@..}@.
20400564:	7dd4 0040 7dd4 0040 ffff ffff ffff ffff     .}@..}@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
