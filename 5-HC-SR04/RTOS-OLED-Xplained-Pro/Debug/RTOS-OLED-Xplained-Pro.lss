
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000afc4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040afc4  0040afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a28  20400000  0040afcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004bc  20400a28  0040b9f4  00020a28  2**2
                  ALLOC
  4 .stack        00002004  20400ee4  0040beb0  00020a28  2**0
                  ALLOC
  5 .heap         00000200  20402ee8  0040deb4  00020a28  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a28  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a56  2**0
                  CONTENTS, READONLY
  8 .debug_info   00026e65  00000000  00000000  00020aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000054d4  00000000  00000000  00047914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b554  00000000  00000000  0004cde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010d0  00000000  00000000  0005833c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001208  00000000  00000000  0005940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026973  00000000  00000000  0005a614  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017cdc  00000000  00000000  00080f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000965cc  00000000  00000000  00098c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ce8  00000000  00000000  0012f230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 2e 40 20 91 12 40 00 8f 12 40 00 8f 12 40 00     ..@ ..@...@...@.
  400010:	8f 12 40 00 8f 12 40 00 8f 12 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	69 16 40 00 8f 12 40 00 00 00 00 00 09 17 40 00     i.@...@.......@.
  40003c:	71 17 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     q.@...@...@...@.
  40004c:	4d 34 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     M4@...@...@...@.
  40005c:	8f 12 40 00 8f 12 40 00 00 00 00 00 81 0f 40 00     ..@...@.......@.
  40006c:	95 0f 40 00 a9 0f 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  40007c:	8f 12 40 00 bd 0f 40 00 d1 0f 40 00 8f 12 40 00     ..@...@...@...@.
  40008c:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  40009c:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  4000ac:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  4000bc:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  4000cc:	8f 12 40 00 00 00 00 00 8f 12 40 00 00 00 00 00     ..@.......@.....
  4000dc:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  4000ec:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  4000fc:	8f 12 40 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ..@...@...@...@.
  40010c:	8f 12 40 00 8f 12 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 8f 12 40 00 8f 12 40 00 8f 12 40 00     ......@...@...@.
  40012c:	8f 12 40 00 8f 12 40 00 00 00 00 00 8f 12 40 00     ..@...@.......@.
  40013c:	8f 12 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400a28 	.word	0x20400a28
  40015c:	00000000 	.word	0x00000000
  400160:	0040afcc 	.word	0x0040afcc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040afcc 	.word	0x0040afcc
  4001a0:	20400a2c 	.word	0x20400a2c
  4001a4:	0040afcc 	.word	0x0040afcc
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	20400a44 	.word	0x20400a44

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	20400a44 	.word	0x20400a44

004001ec <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4001ec:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4001ee:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001f2:	4b02      	ldr	r3, [pc, #8]	; (4001fc <rtt_disable_interrupt+0x10>)
  4001f4:	681b      	ldr	r3, [r3, #0]
  4001f6:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4001f8:	6001      	str	r1, [r0, #0]
  4001fa:	4770      	bx	lr
  4001fc:	20400a44 	.word	0x20400a44

00400200 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400200:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400202:	6883      	ldr	r3, [r0, #8]
  400204:	429a      	cmp	r2, r3
  400206:	d003      	beq.n	400210 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400208:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40020a:	6883      	ldr	r3, [r0, #8]
  40020c:	4293      	cmp	r3, r2
  40020e:	d1fb      	bne.n	400208 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400210:	4618      	mov	r0, r3
  400212:	4770      	bx	lr

00400214 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400214:	68c0      	ldr	r0, [r0, #12]
}
  400216:	4770      	bx	lr

00400218 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400218:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40021a:	4b07      	ldr	r3, [pc, #28]	; (400238 <spi_enable_clock+0x20>)
  40021c:	4298      	cmp	r0, r3
  40021e:	d003      	beq.n	400228 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400220:	4b06      	ldr	r3, [pc, #24]	; (40023c <spi_enable_clock+0x24>)
  400222:	4298      	cmp	r0, r3
  400224:	d004      	beq.n	400230 <spi_enable_clock+0x18>
  400226:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400228:	2015      	movs	r0, #21
  40022a:	4b05      	ldr	r3, [pc, #20]	; (400240 <spi_enable_clock+0x28>)
  40022c:	4798      	blx	r3
  40022e:	bd08      	pop	{r3, pc}
  400230:	202a      	movs	r0, #42	; 0x2a
  400232:	4b03      	ldr	r3, [pc, #12]	; (400240 <spi_enable_clock+0x28>)
  400234:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400236:	e7f6      	b.n	400226 <spi_enable_clock+0xe>
  400238:	40008000 	.word	0x40008000
  40023c:	40058000 	.word	0x40058000
  400240:	00401105 	.word	0x00401105

00400244 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400244:	6843      	ldr	r3, [r0, #4]
  400246:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40024a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40024c:	6843      	ldr	r3, [r0, #4]
  40024e:	0409      	lsls	r1, r1, #16
  400250:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400254:	4319      	orrs	r1, r3
  400256:	6041      	str	r1, [r0, #4]
  400258:	4770      	bx	lr

0040025a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40025a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40025c:	f643 2499 	movw	r4, #15001	; 0x3a99
  400260:	6905      	ldr	r5, [r0, #16]
  400262:	f015 0f02 	tst.w	r5, #2
  400266:	d103      	bne.n	400270 <spi_write+0x16>
		if (!timeout--) {
  400268:	3c01      	subs	r4, #1
  40026a:	d1f9      	bne.n	400260 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40026c:	2001      	movs	r0, #1
  40026e:	e00c      	b.n	40028a <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400270:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400272:	f014 0f02 	tst.w	r4, #2
  400276:	d006      	beq.n	400286 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400278:	0412      	lsls	r2, r2, #16
  40027a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40027e:	4311      	orrs	r1, r2
		if (uc_last) {
  400280:	b10b      	cbz	r3, 400286 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400282:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400286:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400288:	2000      	movs	r0, #0
}
  40028a:	bc30      	pop	{r4, r5}
  40028c:	4770      	bx	lr

0040028e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40028e:	b932      	cbnz	r2, 40029e <spi_set_clock_polarity+0x10>
  400290:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400294:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400296:	f023 0301 	bic.w	r3, r3, #1
  40029a:	6303      	str	r3, [r0, #48]	; 0x30
  40029c:	4770      	bx	lr
  40029e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002a4:	f043 0301 	orr.w	r3, r3, #1
  4002a8:	6303      	str	r3, [r0, #48]	; 0x30
  4002aa:	4770      	bx	lr

004002ac <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4002ac:	b932      	cbnz	r2, 4002bc <spi_set_clock_phase+0x10>
  4002ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4002b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002b4:	f023 0302 	bic.w	r3, r3, #2
  4002b8:	6303      	str	r3, [r0, #48]	; 0x30
  4002ba:	4770      	bx	lr
  4002bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4002c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002c2:	f043 0302 	orr.w	r3, r3, #2
  4002c6:	6303      	str	r3, [r0, #48]	; 0x30
  4002c8:	4770      	bx	lr

004002ca <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4002ca:	2a04      	cmp	r2, #4
  4002cc:	d003      	beq.n	4002d6 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4002ce:	b16a      	cbz	r2, 4002ec <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4002d0:	2a08      	cmp	r2, #8
  4002d2:	d016      	beq.n	400302 <spi_configure_cs_behavior+0x38>
  4002d4:	4770      	bx	lr
  4002d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4002da:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002dc:	f023 0308 	bic.w	r3, r3, #8
  4002e0:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4002e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002e4:	f043 0304 	orr.w	r3, r3, #4
  4002e8:	6303      	str	r3, [r0, #48]	; 0x30
  4002ea:	4770      	bx	lr
  4002ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4002f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002f2:	f023 0308 	bic.w	r3, r3, #8
  4002f6:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4002f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fa:	f023 0304 	bic.w	r3, r3, #4
  4002fe:	6303      	str	r3, [r0, #48]	; 0x30
  400300:	4770      	bx	lr
  400302:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400306:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400308:	f043 0308 	orr.w	r3, r3, #8
  40030c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40030e:	e7e1      	b.n	4002d4 <spi_configure_cs_behavior+0xa>

00400310 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400310:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400314:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40031a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40031c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40031e:	431a      	orrs	r2, r3
  400320:	630a      	str	r2, [r1, #48]	; 0x30
  400322:	4770      	bx	lr

00400324 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400324:	1e43      	subs	r3, r0, #1
  400326:	4419      	add	r1, r3
  400328:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40032c:	1e43      	subs	r3, r0, #1
  40032e:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400330:	bf94      	ite	ls
  400332:	b200      	sxthls	r0, r0
		return -1;
  400334:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400338:	4770      	bx	lr

0040033a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  40033a:	b17a      	cbz	r2, 40035c <spi_set_baudrate_div+0x22>
{
  40033c:	b410      	push	{r4}
  40033e:	4614      	mov	r4, r2
  400340:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400344:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40034a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40034c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40034e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400352:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400354:	2000      	movs	r0, #0
}
  400356:	f85d 4b04 	ldr.w	r4, [sp], #4
  40035a:	4770      	bx	lr
        return -1;
  40035c:	f04f 30ff 	mov.w	r0, #4294967295
  400360:	4770      	bx	lr
	...

00400364 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400364:	4b01      	ldr	r3, [pc, #4]	; (40036c <gfx_mono_set_framebuffer+0x8>)
  400366:	6018      	str	r0, [r3, #0]
  400368:	4770      	bx	lr
  40036a:	bf00      	nop
  40036c:	20400a48 	.word	0x20400a48

00400370 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400370:	4b02      	ldr	r3, [pc, #8]	; (40037c <gfx_mono_framebuffer_put_byte+0xc>)
  400372:	681b      	ldr	r3, [r3, #0]
  400374:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400378:	5442      	strb	r2, [r0, r1]
  40037a:	4770      	bx	lr
  40037c:	20400a48 	.word	0x20400a48

00400380 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400380:	4b02      	ldr	r3, [pc, #8]	; (40038c <gfx_mono_framebuffer_get_byte+0xc>)
  400382:	681b      	ldr	r3, [r3, #0]
  400384:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400388:	5c40      	ldrb	r0, [r0, r1]
  40038a:	4770      	bx	lr
  40038c:	20400a48 	.word	0x20400a48

00400390 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400394:	1884      	adds	r4, r0, r2
  400396:	2c80      	cmp	r4, #128	; 0x80
  400398:	dd02      	ble.n	4003a0 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40039a:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40039e:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4003a0:	b322      	cbz	r2, 4003ec <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4003a2:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4003a4:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4003a8:	2601      	movs	r6, #1
  4003aa:	fa06 f101 	lsl.w	r1, r6, r1
  4003ae:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4003b0:	2b01      	cmp	r3, #1
  4003b2:	d01d      	beq.n	4003f0 <gfx_mono_generic_draw_horizontal_line+0x60>
  4003b4:	2b00      	cmp	r3, #0
  4003b6:	d035      	beq.n	400424 <gfx_mono_generic_draw_horizontal_line+0x94>
  4003b8:	2b02      	cmp	r3, #2
  4003ba:	d117      	bne.n	4003ec <gfx_mono_generic_draw_horizontal_line+0x5c>
  4003bc:	3801      	subs	r0, #1
  4003be:	b2c7      	uxtb	r7, r0
  4003c0:	19d4      	adds	r4, r2, r7
  4003c2:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4003c4:	f8df a090 	ldr.w	sl, [pc, #144]	; 400458 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4003c8:	f04f 0900 	mov.w	r9, #0
  4003cc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 40045c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4003d0:	4621      	mov	r1, r4
  4003d2:	4628      	mov	r0, r5
  4003d4:	47d0      	blx	sl
			temp ^= pixelmask;
  4003d6:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003da:	464b      	mov	r3, r9
  4003dc:	b2d2      	uxtb	r2, r2
  4003de:	4621      	mov	r1, r4
  4003e0:	4628      	mov	r0, r5
  4003e2:	47c0      	blx	r8
  4003e4:	3c01      	subs	r4, #1
  4003e6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003e8:	42bc      	cmp	r4, r7
  4003ea:	d1f1      	bne.n	4003d0 <gfx_mono_generic_draw_horizontal_line+0x40>
  4003ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003f0:	3801      	subs	r0, #1
  4003f2:	b2c7      	uxtb	r7, r0
  4003f4:	19d4      	adds	r4, r2, r7
  4003f6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4003f8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400458 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4003fc:	f04f 0900 	mov.w	r9, #0
  400400:	f8df 8058 	ldr.w	r8, [pc, #88]	; 40045c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400404:	4621      	mov	r1, r4
  400406:	4628      	mov	r0, r5
  400408:	47d0      	blx	sl
			temp |= pixelmask;
  40040a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40040e:	464b      	mov	r3, r9
  400410:	b2d2      	uxtb	r2, r2
  400412:	4621      	mov	r1, r4
  400414:	4628      	mov	r0, r5
  400416:	47c0      	blx	r8
  400418:	3c01      	subs	r4, #1
  40041a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40041c:	42bc      	cmp	r4, r7
  40041e:	d1f1      	bne.n	400404 <gfx_mono_generic_draw_horizontal_line+0x74>
  400420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400424:	3801      	subs	r0, #1
  400426:	b2c7      	uxtb	r7, r0
  400428:	19d4      	adds	r4, r2, r7
  40042a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40042c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400458 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400430:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400432:	f8df 9028 	ldr.w	r9, [pc, #40]	; 40045c <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400436:	4621      	mov	r1, r4
  400438:	4628      	mov	r0, r5
  40043a:	47c0      	blx	r8
			temp &= ~pixelmask;
  40043c:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400440:	2300      	movs	r3, #0
  400442:	b2d2      	uxtb	r2, r2
  400444:	4621      	mov	r1, r4
  400446:	4628      	mov	r0, r5
  400448:	47c8      	blx	r9
  40044a:	3c01      	subs	r4, #1
  40044c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40044e:	42bc      	cmp	r4, r7
  400450:	d1f1      	bne.n	400436 <gfx_mono_generic_draw_horizontal_line+0xa6>
  400452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400456:	bf00      	nop
  400458:	00400781 	.word	0x00400781
  40045c:	0040067d 	.word	0x0040067d

00400460 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  400460:	2a00      	cmp	r2, #0
  400462:	d048      	beq.n	4004f6 <gfx_mono_generic_draw_vertical_line+0x96>
{
  400464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400468:	4614      	mov	r4, r2
  40046a:	461f      	mov	r7, r3
  40046c:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  40046e:	1e4a      	subs	r2, r1, #1
  400470:	4422      	add	r2, r4
  400472:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  400474:	4291      	cmp	r1, r2
  400476:	d031      	beq.n	4004dc <gfx_mono_generic_draw_vertical_line+0x7c>
  400478:	2a1f      	cmp	r2, #31
  40047a:	bf28      	it	cs
  40047c:	221f      	movcs	r2, #31
  40047e:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400480:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  400482:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  400486:	f001 0207 	and.w	r2, r1, #7
  40048a:	23ff      	movs	r3, #255	; 0xff
  40048c:	fa03 f202 	lsl.w	r2, r3, r2
  400490:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  400492:	f005 0507 	and.w	r5, r5, #7
  400496:	f1c5 0507 	rsb	r5, r5, #7
  40049a:	fa43 f505 	asr.w	r5, r3, r5
  40049e:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  4004a0:	4544      	cmp	r4, r8
  4004a2:	d020      	beq.n	4004e6 <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  4004a4:	463b      	mov	r3, r7
  4004a6:	4601      	mov	r1, r0
  4004a8:	4620      	mov	r0, r4
  4004aa:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4004f8 <gfx_mono_generic_draw_vertical_line+0x98>
  4004ae:	47c8      	blx	r9

		while (++y1page < y2page) {
  4004b0:	3401      	adds	r4, #1
  4004b2:	45a0      	cmp	r8, r4
  4004b4:	d90a      	bls.n	4004cc <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  4004b6:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4004ba:	463b      	mov	r3, r7
  4004bc:	4652      	mov	r2, sl
  4004be:	4631      	mov	r1, r6
  4004c0:	4620      	mov	r0, r4
  4004c2:	47c8      	blx	r9
		while (++y1page < y2page) {
  4004c4:	3401      	adds	r4, #1
  4004c6:	b2e4      	uxtb	r4, r4
  4004c8:	45a0      	cmp	r8, r4
  4004ca:	d8f6      	bhi.n	4004ba <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  4004cc:	463b      	mov	r3, r7
  4004ce:	462a      	mov	r2, r5
  4004d0:	4631      	mov	r1, r6
  4004d2:	4640      	mov	r0, r8
  4004d4:	4c08      	ldr	r4, [pc, #32]	; (4004f8 <gfx_mono_generic_draw_vertical_line+0x98>)
  4004d6:	47a0      	blx	r4
  4004d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  4004dc:	461a      	mov	r2, r3
  4004de:	4b07      	ldr	r3, [pc, #28]	; (4004fc <gfx_mono_generic_draw_vertical_line+0x9c>)
  4004e0:	4798      	blx	r3
		return;
  4004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  4004e6:	463b      	mov	r3, r7
  4004e8:	402a      	ands	r2, r5
  4004ea:	4601      	mov	r1, r0
  4004ec:	4620      	mov	r0, r4
  4004ee:	4c02      	ldr	r4, [pc, #8]	; (4004f8 <gfx_mono_generic_draw_vertical_line+0x98>)
  4004f0:	47a0      	blx	r4
  4004f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4004f6:	4770      	bx	lr
  4004f8:	0040078d 	.word	0x0040078d
  4004fc:	0040071d 	.word	0x0040071d

00400500 <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400504:	4604      	mov	r4, r0
  400506:	460f      	mov	r7, r1
  400508:	4616      	mov	r6, r2
  40050a:	4698      	mov	r8, r3
  40050c:	f89d 5020 	ldrb.w	r5, [sp, #32]
	gfx_mono_draw_horizontal_line(x, y, width, color);
  400510:	462b      	mov	r3, r5
  400512:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400548 <gfx_mono_generic_draw_rect+0x48>
  400516:	47c8      	blx	r9
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
  400518:	f108 31ff 	add.w	r1, r8, #4294967295
  40051c:	4439      	add	r1, r7
  40051e:	462b      	mov	r3, r5
  400520:	4632      	mov	r2, r6
  400522:	b2c9      	uxtb	r1, r1
  400524:	4620      	mov	r0, r4
  400526:	47c8      	blx	r9

	gfx_mono_draw_vertical_line(x, y, height, color);
  400528:	462b      	mov	r3, r5
  40052a:	4642      	mov	r2, r8
  40052c:	4639      	mov	r1, r7
  40052e:	4620      	mov	r0, r4
  400530:	f8df 9018 	ldr.w	r9, [pc, #24]	; 40054c <gfx_mono_generic_draw_rect+0x4c>
  400534:	47c8      	blx	r9
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
  400536:	1e70      	subs	r0, r6, #1
  400538:	4420      	add	r0, r4
  40053a:	462b      	mov	r3, r5
  40053c:	4642      	mov	r2, r8
  40053e:	4639      	mov	r1, r7
  400540:	b2c0      	uxtb	r0, r0
  400542:	47c8      	blx	r9
  400544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400548:	00400391 	.word	0x00400391
  40054c:	00400461 	.word	0x00400461

00400550 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400554:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400558:	b18b      	cbz	r3, 40057e <gfx_mono_generic_draw_filled_rect+0x2e>
  40055a:	461c      	mov	r4, r3
  40055c:	4690      	mov	r8, r2
  40055e:	4606      	mov	r6, r0
  400560:	1e4d      	subs	r5, r1, #1
  400562:	b2ed      	uxtb	r5, r5
  400564:	442c      	add	r4, r5
  400566:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400568:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400584 <gfx_mono_generic_draw_filled_rect+0x34>
  40056c:	463b      	mov	r3, r7
  40056e:	4642      	mov	r2, r8
  400570:	4621      	mov	r1, r4
  400572:	4630      	mov	r0, r6
  400574:	47c8      	blx	r9
  400576:	3c01      	subs	r4, #1
  400578:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40057a:	42ac      	cmp	r4, r5
  40057c:	d1f6      	bne.n	40056c <gfx_mono_generic_draw_filled_rect+0x1c>
  40057e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400582:	bf00      	nop
  400584:	00400391 	.word	0x00400391

00400588 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40058c:	b083      	sub	sp, #12
  40058e:	4604      	mov	r4, r0
  400590:	4688      	mov	r8, r1
  400592:	4691      	mov	r9, r2
  400594:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400596:	7a5b      	ldrb	r3, [r3, #9]
  400598:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40059c:	2100      	movs	r1, #0
  40059e:	9100      	str	r1, [sp, #0]
  4005a0:	4649      	mov	r1, r9
  4005a2:	4640      	mov	r0, r8
  4005a4:	4d21      	ldr	r5, [pc, #132]	; (40062c <gfx_mono_draw_char+0xa4>)
  4005a6:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4005a8:	f89b 3000 	ldrb.w	r3, [fp]
  4005ac:	b113      	cbz	r3, 4005b4 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4005ae:	b003      	add	sp, #12
  4005b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4005b4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4005b8:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4005ba:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4005be:	bf18      	it	ne
  4005c0:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4005c2:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4005c6:	f89b 700a 	ldrb.w	r7, [fp, #10]
  4005ca:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4005cc:	fb17 f70a 	smulbb	r7, r7, sl
  4005d0:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4005d4:	f8db 3004 	ldr.w	r3, [fp, #4]
  4005d8:	fa13 f787 	uxtah	r7, r3, r7
  4005dc:	e01f      	b.n	40061e <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4005de:	0064      	lsls	r4, r4, #1
  4005e0:	b2e4      	uxtb	r4, r4
  4005e2:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4005e4:	b2eb      	uxtb	r3, r5
  4005e6:	429e      	cmp	r6, r3
  4005e8:	d910      	bls.n	40060c <gfx_mono_draw_char+0x84>
  4005ea:	b2eb      	uxtb	r3, r5
  4005ec:	eb08 0003 	add.w	r0, r8, r3
  4005f0:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4005f2:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4005f6:	bf08      	it	eq
  4005f8:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4005fc:	f014 0f80 	tst.w	r4, #128	; 0x80
  400600:	d0ed      	beq.n	4005de <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400602:	2201      	movs	r2, #1
  400604:	4649      	mov	r1, r9
  400606:	4b0a      	ldr	r3, [pc, #40]	; (400630 <gfx_mono_draw_char+0xa8>)
  400608:	4798      	blx	r3
  40060a:	e7e8      	b.n	4005de <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40060c:	f109 0901 	add.w	r9, r9, #1
  400610:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400614:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400618:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  40061c:	d0c7      	beq.n	4005ae <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40061e:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400622:	2e00      	cmp	r6, #0
  400624:	d0f2      	beq.n	40060c <gfx_mono_draw_char+0x84>
  400626:	2500      	movs	r5, #0
  400628:	462c      	mov	r4, r5
  40062a:	e7de      	b.n	4005ea <gfx_mono_draw_char+0x62>
  40062c:	00400551 	.word	0x00400551
  400630:	0040071d 	.word	0x0040071d

00400634 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400638:	4604      	mov	r4, r0
  40063a:	4690      	mov	r8, r2
  40063c:	461d      	mov	r5, r3
  40063e:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400640:	4f0d      	ldr	r7, [pc, #52]	; (400678 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400642:	460e      	mov	r6, r1
  400644:	e008      	b.n	400658 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400646:	7a6a      	ldrb	r2, [r5, #9]
  400648:	3201      	adds	r2, #1
  40064a:	4442      	add	r2, r8
  40064c:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400650:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400652:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400656:	b16b      	cbz	r3, 400674 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400658:	7820      	ldrb	r0, [r4, #0]
  40065a:	280a      	cmp	r0, #10
  40065c:	d0f3      	beq.n	400646 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40065e:	280d      	cmp	r0, #13
  400660:	d0f7      	beq.n	400652 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400662:	462b      	mov	r3, r5
  400664:	4642      	mov	r2, r8
  400666:	4649      	mov	r1, r9
  400668:	47b8      	blx	r7
			x += font->width;
  40066a:	7a2b      	ldrb	r3, [r5, #8]
  40066c:	4499      	add	r9, r3
  40066e:	fa5f f989 	uxtb.w	r9, r9
  400672:	e7ee      	b.n	400652 <gfx_mono_draw_string+0x1e>
}
  400674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400678:	00400589 	.word	0x00400589

0040067c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  40067c:	b570      	push	{r4, r5, r6, lr}
  40067e:	4604      	mov	r4, r0
  400680:	460d      	mov	r5, r1
  400682:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400684:	b91b      	cbnz	r3, 40068e <gfx_mono_ssd1306_put_byte+0x12>
  400686:	4b0d      	ldr	r3, [pc, #52]	; (4006bc <gfx_mono_ssd1306_put_byte+0x40>)
  400688:	4798      	blx	r3
  40068a:	42b0      	cmp	r0, r6
  40068c:	d015      	beq.n	4006ba <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40068e:	4632      	mov	r2, r6
  400690:	4629      	mov	r1, r5
  400692:	4620      	mov	r0, r4
  400694:	4b0a      	ldr	r3, [pc, #40]	; (4006c0 <gfx_mono_ssd1306_put_byte+0x44>)
  400696:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400698:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40069c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4006a0:	4c08      	ldr	r4, [pc, #32]	; (4006c4 <gfx_mono_ssd1306_put_byte+0x48>)
  4006a2:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4006a4:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4006a8:	f040 0010 	orr.w	r0, r0, #16
  4006ac:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4006ae:	f005 000f 	and.w	r0, r5, #15
  4006b2:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4006b4:	4630      	mov	r0, r6
  4006b6:	4b04      	ldr	r3, [pc, #16]	; (4006c8 <gfx_mono_ssd1306_put_byte+0x4c>)
  4006b8:	4798      	blx	r3
  4006ba:	bd70      	pop	{r4, r5, r6, pc}
  4006bc:	00400381 	.word	0x00400381
  4006c0:	00400371 	.word	0x00400371
  4006c4:	004007d1 	.word	0x004007d1
  4006c8:	004009f1 	.word	0x004009f1

004006cc <gfx_mono_ssd1306_init>:
{
  4006cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4006d0:	480d      	ldr	r0, [pc, #52]	; (400708 <gfx_mono_ssd1306_init+0x3c>)
  4006d2:	4b0e      	ldr	r3, [pc, #56]	; (40070c <gfx_mono_ssd1306_init+0x40>)
  4006d4:	4798      	blx	r3
	ssd1306_init();
  4006d6:	4b0e      	ldr	r3, [pc, #56]	; (400710 <gfx_mono_ssd1306_init+0x44>)
  4006d8:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4006da:	2040      	movs	r0, #64	; 0x40
  4006dc:	4b0d      	ldr	r3, [pc, #52]	; (400714 <gfx_mono_ssd1306_init+0x48>)
  4006de:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4006e0:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4006e2:	f04f 0801 	mov.w	r8, #1
  4006e6:	462f      	mov	r7, r5
  4006e8:	4e0b      	ldr	r6, [pc, #44]	; (400718 <gfx_mono_ssd1306_init+0x4c>)
{
  4006ea:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4006ec:	4643      	mov	r3, r8
  4006ee:	463a      	mov	r2, r7
  4006f0:	b2e1      	uxtb	r1, r4
  4006f2:	4628      	mov	r0, r5
  4006f4:	47b0      	blx	r6
  4006f6:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4006f8:	2c80      	cmp	r4, #128	; 0x80
  4006fa:	d1f7      	bne.n	4006ec <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4006fc:	3501      	adds	r5, #1
  4006fe:	b2ed      	uxtb	r5, r5
  400700:	2d04      	cmp	r5, #4
  400702:	d1f2      	bne.n	4006ea <gfx_mono_ssd1306_init+0x1e>
  400704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400708:	20400a4c 	.word	0x20400a4c
  40070c:	00400365 	.word	0x00400365
  400710:	00400811 	.word	0x00400811
  400714:	004007d1 	.word	0x004007d1
  400718:	0040067d 	.word	0x0040067d

0040071c <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  40071c:	09c3      	lsrs	r3, r0, #7
  40071e:	d12a      	bne.n	400776 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400720:	291f      	cmp	r1, #31
  400722:	d828      	bhi.n	400776 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400728:	4614      	mov	r4, r2
  40072a:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  40072c:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40072e:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400732:	2201      	movs	r2, #1
  400734:	fa02 f701 	lsl.w	r7, r2, r1
  400738:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  40073c:	4601      	mov	r1, r0
  40073e:	4630      	mov	r0, r6
  400740:	4b0d      	ldr	r3, [pc, #52]	; (400778 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400742:	4798      	blx	r3
  400744:	4602      	mov	r2, r0
	switch (color) {
  400746:	2c01      	cmp	r4, #1
  400748:	d009      	beq.n	40075e <gfx_mono_ssd1306_draw_pixel+0x42>
  40074a:	b164      	cbz	r4, 400766 <gfx_mono_ssd1306_draw_pixel+0x4a>
  40074c:	2c02      	cmp	r4, #2
  40074e:	d00e      	beq.n	40076e <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400750:	2300      	movs	r3, #0
  400752:	4629      	mov	r1, r5
  400754:	4630      	mov	r0, r6
  400756:	4c09      	ldr	r4, [pc, #36]	; (40077c <gfx_mono_ssd1306_draw_pixel+0x60>)
  400758:	47a0      	blx	r4
  40075a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  40075e:	ea48 0200 	orr.w	r2, r8, r0
  400762:	b2d2      	uxtb	r2, r2
		break;
  400764:	e7f4      	b.n	400750 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400766:	ea20 0207 	bic.w	r2, r0, r7
  40076a:	b2d2      	uxtb	r2, r2
		break;
  40076c:	e7f0      	b.n	400750 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  40076e:	ea88 0200 	eor.w	r2, r8, r0
  400772:	b2d2      	uxtb	r2, r2
		break;
  400774:	e7ec      	b.n	400750 <gfx_mono_ssd1306_draw_pixel+0x34>
  400776:	4770      	bx	lr
  400778:	00400381 	.word	0x00400381
  40077c:	0040067d 	.word	0x0040067d

00400780 <gfx_mono_ssd1306_get_byte>:
{
  400780:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400782:	4b01      	ldr	r3, [pc, #4]	; (400788 <gfx_mono_ssd1306_get_byte+0x8>)
  400784:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400786:	bd08      	pop	{r3, pc}
  400788:	00400381 	.word	0x00400381

0040078c <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  40078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40078e:	4605      	mov	r5, r0
  400790:	460e      	mov	r6, r1
  400792:	4617      	mov	r7, r2
  400794:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400796:	4b0c      	ldr	r3, [pc, #48]	; (4007c8 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400798:	4798      	blx	r3
  40079a:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  40079c:	2c01      	cmp	r4, #1
  40079e:	d008      	beq.n	4007b2 <gfx_mono_ssd1306_mask_byte+0x26>
  4007a0:	b154      	cbz	r4, 4007b8 <gfx_mono_ssd1306_mask_byte+0x2c>
  4007a2:	2c02      	cmp	r4, #2
  4007a4:	d00c      	beq.n	4007c0 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  4007a6:	2300      	movs	r3, #0
  4007a8:	4631      	mov	r1, r6
  4007aa:	4628      	mov	r0, r5
  4007ac:	4c07      	ldr	r4, [pc, #28]	; (4007cc <gfx_mono_ssd1306_mask_byte+0x40>)
  4007ae:	47a0      	blx	r4
  4007b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  4007b2:	433a      	orrs	r2, r7
  4007b4:	b2d2      	uxtb	r2, r2
		break;
  4007b6:	e7f6      	b.n	4007a6 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  4007b8:	ea20 0207 	bic.w	r2, r0, r7
  4007bc:	b2d2      	uxtb	r2, r2
		break;
  4007be:	e7f2      	b.n	4007a6 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  4007c0:	407a      	eors	r2, r7
  4007c2:	b2d2      	uxtb	r2, r2
		break;
  4007c4:	e7ef      	b.n	4007a6 <gfx_mono_ssd1306_mask_byte+0x1a>
  4007c6:	bf00      	nop
  4007c8:	00400381 	.word	0x00400381
  4007cc:	0040067d 	.word	0x0040067d

004007d0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4007d0:	b538      	push	{r3, r4, r5, lr}
  4007d2:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007d4:	2208      	movs	r2, #8
  4007d6:	4b09      	ldr	r3, [pc, #36]	; (4007fc <ssd1306_write_command+0x2c>)
  4007d8:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4007da:	4c09      	ldr	r4, [pc, #36]	; (400800 <ssd1306_write_command+0x30>)
  4007dc:	2101      	movs	r1, #1
  4007de:	4620      	mov	r0, r4
  4007e0:	4b08      	ldr	r3, [pc, #32]	; (400804 <ssd1306_write_command+0x34>)
  4007e2:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4007e4:	2301      	movs	r3, #1
  4007e6:	461a      	mov	r2, r3
  4007e8:	4629      	mov	r1, r5
  4007ea:	4620      	mov	r0, r4
  4007ec:	4c06      	ldr	r4, [pc, #24]	; (400808 <ssd1306_write_command+0x38>)
  4007ee:	47a0      	blx	r4
	delay_us(10);
  4007f0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4007f4:	4b05      	ldr	r3, [pc, #20]	; (40080c <ssd1306_write_command+0x3c>)
  4007f6:	4798      	blx	r3
  4007f8:	bd38      	pop	{r3, r4, r5, pc}
  4007fa:	bf00      	nop
  4007fc:	400e1000 	.word	0x400e1000
  400800:	40008000 	.word	0x40008000
  400804:	00400245 	.word	0x00400245
  400808:	0040025b 	.word	0x0040025b
  40080c:	20400001 	.word	0x20400001

00400810 <ssd1306_init>:
{
  400810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400814:	4d66      	ldr	r5, [pc, #408]	; (4009b0 <ssd1306_init+0x1a0>)
  400816:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40081a:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40081c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400820:	4b64      	ldr	r3, [pc, #400]	; (4009b4 <ssd1306_init+0x1a4>)
  400822:	2708      	movs	r7, #8
  400824:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400826:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40082a:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40082c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400830:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400832:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400834:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400838:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40083a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40083e:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400840:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400842:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400846:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400848:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40084a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40084e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400850:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400852:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400858:	f022 0208 	bic.w	r2, r2, #8
  40085c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40085e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400860:	f022 0208 	bic.w	r2, r2, #8
  400864:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400866:	601f      	str	r7, [r3, #0]
  400868:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40086a:	631f      	str	r7, [r3, #48]	; 0x30
  40086c:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40086e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4009ec <ssd1306_init+0x1dc>
  400872:	2300      	movs	r3, #0
  400874:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400878:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40087c:	4640      	mov	r0, r8
  40087e:	4c4e      	ldr	r4, [pc, #312]	; (4009b8 <ssd1306_init+0x1a8>)
  400880:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400882:	2300      	movs	r3, #0
  400884:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400888:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40088c:	4640      	mov	r0, r8
  40088e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400890:	2300      	movs	r3, #0
  400892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400896:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40089a:	4640      	mov	r0, r8
  40089c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40089e:	2300      	movs	r3, #0
  4008a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4008a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008a8:	4640      	mov	r0, r8
  4008aa:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4008ac:	2300      	movs	r3, #0
  4008ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4008b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008b6:	4640      	mov	r0, r8
  4008b8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4008ba:	2300      	movs	r3, #0
  4008bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4008c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008c4:	4640      	mov	r0, r8
  4008c6:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4008c8:	4c3c      	ldr	r4, [pc, #240]	; (4009bc <ssd1306_init+0x1ac>)
  4008ca:	f04f 0902 	mov.w	r9, #2
  4008ce:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4008d2:	f04f 0880 	mov.w	r8, #128	; 0x80
  4008d6:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008da:	6863      	ldr	r3, [r4, #4]
  4008dc:	f043 0301 	orr.w	r3, r3, #1
  4008e0:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4008e2:	463a      	mov	r2, r7
  4008e4:	2101      	movs	r1, #1
  4008e6:	4620      	mov	r0, r4
  4008e8:	4b35      	ldr	r3, [pc, #212]	; (4009c0 <ssd1306_init+0x1b0>)
  4008ea:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4008ec:	2200      	movs	r2, #0
  4008ee:	2101      	movs	r1, #1
  4008f0:	4620      	mov	r0, r4
  4008f2:	4b34      	ldr	r3, [pc, #208]	; (4009c4 <ssd1306_init+0x1b4>)
  4008f4:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4008f6:	2200      	movs	r2, #0
  4008f8:	2101      	movs	r1, #1
  4008fa:	4620      	mov	r0, r4
  4008fc:	4b32      	ldr	r3, [pc, #200]	; (4009c8 <ssd1306_init+0x1b8>)
  4008fe:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400900:	6863      	ldr	r3, [r4, #4]
  400902:	f023 0302 	bic.w	r3, r3, #2
  400906:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400908:	2200      	movs	r2, #0
  40090a:	2101      	movs	r1, #1
  40090c:	4620      	mov	r0, r4
  40090e:	4b2f      	ldr	r3, [pc, #188]	; (4009cc <ssd1306_init+0x1bc>)
  400910:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400912:	6863      	ldr	r3, [r4, #4]
  400914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400918:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40091a:	6863      	ldr	r3, [r4, #4]
  40091c:	f043 0310 	orr.w	r3, r3, #16
  400920:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400922:	492b      	ldr	r1, [pc, #172]	; (4009d0 <ssd1306_init+0x1c0>)
  400924:	482b      	ldr	r0, [pc, #172]	; (4009d4 <ssd1306_init+0x1c4>)
  400926:	4b2c      	ldr	r3, [pc, #176]	; (4009d8 <ssd1306_init+0x1c8>)
  400928:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40092a:	b2c2      	uxtb	r2, r0
  40092c:	2101      	movs	r1, #1
  40092e:	4620      	mov	r0, r4
  400930:	4b2a      	ldr	r3, [pc, #168]	; (4009dc <ssd1306_init+0x1cc>)
  400932:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400934:	4620      	mov	r0, r4
  400936:	4b2a      	ldr	r3, [pc, #168]	; (4009e0 <ssd1306_init+0x1d0>)
  400938:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40093a:	2301      	movs	r3, #1
  40093c:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40093e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400940:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400944:	4c27      	ldr	r4, [pc, #156]	; (4009e4 <ssd1306_init+0x1d4>)
  400946:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400948:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40094a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40094e:	47a0      	blx	r4
  400950:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400952:	20a8      	movs	r0, #168	; 0xa8
  400954:	4c24      	ldr	r4, [pc, #144]	; (4009e8 <ssd1306_init+0x1d8>)
  400956:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400958:	201f      	movs	r0, #31
  40095a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40095c:	20d3      	movs	r0, #211	; 0xd3
  40095e:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400960:	2000      	movs	r0, #0
  400962:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400964:	2040      	movs	r0, #64	; 0x40
  400966:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400968:	20a1      	movs	r0, #161	; 0xa1
  40096a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40096c:	20c8      	movs	r0, #200	; 0xc8
  40096e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400970:	20da      	movs	r0, #218	; 0xda
  400972:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400974:	4648      	mov	r0, r9
  400976:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400978:	2081      	movs	r0, #129	; 0x81
  40097a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40097c:	208f      	movs	r0, #143	; 0x8f
  40097e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400980:	20a4      	movs	r0, #164	; 0xa4
  400982:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400984:	20a6      	movs	r0, #166	; 0xa6
  400986:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400988:	20d5      	movs	r0, #213	; 0xd5
  40098a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40098c:	4640      	mov	r0, r8
  40098e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400990:	208d      	movs	r0, #141	; 0x8d
  400992:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400994:	2014      	movs	r0, #20
  400996:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400998:	20db      	movs	r0, #219	; 0xdb
  40099a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40099c:	2040      	movs	r0, #64	; 0x40
  40099e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4009a0:	20d9      	movs	r0, #217	; 0xd9
  4009a2:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4009a4:	20f1      	movs	r0, #241	; 0xf1
  4009a6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4009a8:	20af      	movs	r0, #175	; 0xaf
  4009aa:	47a0      	blx	r4
  4009ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009b0:	400e1200 	.word	0x400e1200
  4009b4:	400e1000 	.word	0x400e1000
  4009b8:	00400df1 	.word	0x00400df1
  4009bc:	40008000 	.word	0x40008000
  4009c0:	004002cb 	.word	0x004002cb
  4009c4:	0040028f 	.word	0x0040028f
  4009c8:	004002ad 	.word	0x004002ad
  4009cc:	00400311 	.word	0x00400311
  4009d0:	08f0d180 	.word	0x08f0d180
  4009d4:	001e8480 	.word	0x001e8480
  4009d8:	00400325 	.word	0x00400325
  4009dc:	0040033b 	.word	0x0040033b
  4009e0:	00400219 	.word	0x00400219
  4009e4:	20400001 	.word	0x20400001
  4009e8:	004007d1 	.word	0x004007d1
  4009ec:	400e1400 	.word	0x400e1400

004009f0 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4009f0:	b538      	push	{r3, r4, r5, lr}
  4009f2:	4605      	mov	r5, r0
  4009f4:	2208      	movs	r2, #8
  4009f6:	4b09      	ldr	r3, [pc, #36]	; (400a1c <ssd1306_write_data+0x2c>)
  4009f8:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4009fa:	4c09      	ldr	r4, [pc, #36]	; (400a20 <ssd1306_write_data+0x30>)
  4009fc:	2101      	movs	r1, #1
  4009fe:	4620      	mov	r0, r4
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <ssd1306_write_data+0x34>)
  400a02:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400a04:	2301      	movs	r3, #1
  400a06:	461a      	mov	r2, r3
  400a08:	4629      	mov	r1, r5
  400a0a:	4620      	mov	r0, r4
  400a0c:	4c06      	ldr	r4, [pc, #24]	; (400a28 <ssd1306_write_data+0x38>)
  400a0e:	47a0      	blx	r4
	delay_us(10);
  400a10:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a14:	4b05      	ldr	r3, [pc, #20]	; (400a2c <ssd1306_write_data+0x3c>)
  400a16:	4798      	blx	r3
  400a18:	bd38      	pop	{r3, r4, r5, pc}
  400a1a:	bf00      	nop
  400a1c:	400e1000 	.word	0x400e1000
  400a20:	40008000 	.word	0x40008000
  400a24:	00400245 	.word	0x00400245
  400a28:	0040025b 	.word	0x0040025b
  400a2c:	20400001 	.word	0x20400001

00400a30 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a30:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400a32:	4810      	ldr	r0, [pc, #64]	; (400a74 <sysclk_init+0x44>)
  400a34:	4b10      	ldr	r3, [pc, #64]	; (400a78 <sysclk_init+0x48>)
  400a36:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a38:	213e      	movs	r1, #62	; 0x3e
  400a3a:	2000      	movs	r0, #0
  400a3c:	4b0f      	ldr	r3, [pc, #60]	; (400a7c <sysclk_init+0x4c>)
  400a3e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a40:	4c0f      	ldr	r4, [pc, #60]	; (400a80 <sysclk_init+0x50>)
  400a42:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a44:	2800      	cmp	r0, #0
  400a46:	d0fc      	beq.n	400a42 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a48:	4b0e      	ldr	r3, [pc, #56]	; (400a84 <sysclk_init+0x54>)
  400a4a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a4c:	4a0e      	ldr	r2, [pc, #56]	; (400a88 <sysclk_init+0x58>)
  400a4e:	4b0f      	ldr	r3, [pc, #60]	; (400a8c <sysclk_init+0x5c>)
  400a50:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a52:	4c0f      	ldr	r4, [pc, #60]	; (400a90 <sysclk_init+0x60>)
  400a54:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a56:	2800      	cmp	r0, #0
  400a58:	d0fc      	beq.n	400a54 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400a5a:	2002      	movs	r0, #2
  400a5c:	4b0d      	ldr	r3, [pc, #52]	; (400a94 <sysclk_init+0x64>)
  400a5e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a60:	2000      	movs	r0, #0
  400a62:	4b0d      	ldr	r3, [pc, #52]	; (400a98 <sysclk_init+0x68>)
  400a64:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a66:	4b0d      	ldr	r3, [pc, #52]	; (400a9c <sysclk_init+0x6c>)
  400a68:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400a6a:	4802      	ldr	r0, [pc, #8]	; (400a74 <sysclk_init+0x44>)
  400a6c:	4b02      	ldr	r3, [pc, #8]	; (400a78 <sysclk_init+0x48>)
  400a6e:	4798      	blx	r3
  400a70:	bd10      	pop	{r4, pc}
  400a72:	bf00      	nop
  400a74:	11e1a300 	.word	0x11e1a300
  400a78:	00401465 	.word	0x00401465
  400a7c:	00401081 	.word	0x00401081
  400a80:	004010d5 	.word	0x004010d5
  400a84:	004010e5 	.word	0x004010e5
  400a88:	20183f01 	.word	0x20183f01
  400a8c:	400e0600 	.word	0x400e0600
  400a90:	004010f5 	.word	0x004010f5
  400a94:	00400fe5 	.word	0x00400fe5
  400a98:	0040101d 	.word	0x0040101d
  400a9c:	00401359 	.word	0x00401359

00400aa0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400aa4:	b980      	cbnz	r0, 400ac8 <_read+0x28>
  400aa6:	460c      	mov	r4, r1
  400aa8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400aaa:	2a00      	cmp	r2, #0
  400aac:	dd0f      	ble.n	400ace <_read+0x2e>
  400aae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400ab0:	4e08      	ldr	r6, [pc, #32]	; (400ad4 <_read+0x34>)
  400ab2:	4d09      	ldr	r5, [pc, #36]	; (400ad8 <_read+0x38>)
  400ab4:	6830      	ldr	r0, [r6, #0]
  400ab6:	4621      	mov	r1, r4
  400ab8:	682b      	ldr	r3, [r5, #0]
  400aba:	4798      	blx	r3
		ptr++;
  400abc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400abe:	42bc      	cmp	r4, r7
  400ac0:	d1f8      	bne.n	400ab4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400ac2:	4640      	mov	r0, r8
  400ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400ac8:	f04f 38ff 	mov.w	r8, #4294967295
  400acc:	e7f9      	b.n	400ac2 <_read+0x22>
	for (; len > 0; --len) {
  400ace:	4680      	mov	r8, r0
  400ad0:	e7f7      	b.n	400ac2 <_read+0x22>
  400ad2:	bf00      	nop
  400ad4:	20400e6c 	.word	0x20400e6c
  400ad8:	20400e64 	.word	0x20400e64

00400adc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400adc:	3801      	subs	r0, #1
  400ade:	2802      	cmp	r0, #2
  400ae0:	d815      	bhi.n	400b0e <_write+0x32>
{
  400ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ae6:	460e      	mov	r6, r1
  400ae8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400aea:	b19a      	cbz	r2, 400b14 <_write+0x38>
  400aec:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400aee:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400b28 <_write+0x4c>
  400af2:	4f0c      	ldr	r7, [pc, #48]	; (400b24 <_write+0x48>)
  400af4:	f8d8 0000 	ldr.w	r0, [r8]
  400af8:	f815 1b01 	ldrb.w	r1, [r5], #1
  400afc:	683b      	ldr	r3, [r7, #0]
  400afe:	4798      	blx	r3
  400b00:	2800      	cmp	r0, #0
  400b02:	db0a      	blt.n	400b1a <_write+0x3e>
  400b04:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400b06:	3c01      	subs	r4, #1
  400b08:	d1f4      	bne.n	400af4 <_write+0x18>
  400b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b0e:	f04f 30ff 	mov.w	r0, #4294967295
  400b12:	4770      	bx	lr
	for (; len != 0; --len) {
  400b14:	4610      	mov	r0, r2
  400b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400b1a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b22:	bf00      	nop
  400b24:	20400e68 	.word	0x20400e68
  400b28:	20400e6c 	.word	0x20400e6c

00400b2c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b32:	4b5c      	ldr	r3, [pc, #368]	; (400ca4 <board_init+0x178>)
  400b34:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b3a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400b3e:	4b5a      	ldr	r3, [pc, #360]	; (400ca8 <board_init+0x17c>)
  400b40:	2200      	movs	r2, #0
  400b42:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400b46:	695a      	ldr	r2, [r3, #20]
  400b48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400b4c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b52:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400b56:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400b5a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400b5e:	f007 0007 	and.w	r0, r7, #7
  400b62:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400b64:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400b68:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400b6c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b70:	f3bf 8f4f 	dsb	sy
  400b74:	f04f 34ff 	mov.w	r4, #4294967295
  400b78:	fa04 fc00 	lsl.w	ip, r4, r0
  400b7c:	fa06 f000 	lsl.w	r0, r6, r0
  400b80:	fa04 f40e 	lsl.w	r4, r4, lr
  400b84:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b88:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b8a:	463a      	mov	r2, r7
  400b8c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b8e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b92:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b96:	3a01      	subs	r2, #1
  400b98:	4423      	add	r3, r4
  400b9a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b9e:	d1f6      	bne.n	400b8e <board_init+0x62>
        } while(sets--);
  400ba0:	3e01      	subs	r6, #1
  400ba2:	4460      	add	r0, ip
  400ba4:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ba8:	d1ef      	bne.n	400b8a <board_init+0x5e>
  400baa:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400bae:	4b3e      	ldr	r3, [pc, #248]	; (400ca8 <board_init+0x17c>)
  400bb0:	695a      	ldr	r2, [r3, #20]
  400bb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400bb6:	615a      	str	r2, [r3, #20]
  400bb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bbc:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400bc0:	4a3a      	ldr	r2, [pc, #232]	; (400cac <board_init+0x180>)
  400bc2:	493b      	ldr	r1, [pc, #236]	; (400cb0 <board_init+0x184>)
  400bc4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400bc6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400bca:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400bcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bd0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400bd4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400bd8:	f022 0201 	bic.w	r2, r2, #1
  400bdc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400be0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400be4:	f022 0201 	bic.w	r2, r2, #1
  400be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400bec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bf0:	f3bf 8f6f 	isb	sy
  400bf4:	200a      	movs	r0, #10
  400bf6:	4c2f      	ldr	r4, [pc, #188]	; (400cb4 <board_init+0x188>)
  400bf8:	47a0      	blx	r4
  400bfa:	200b      	movs	r0, #11
  400bfc:	47a0      	blx	r4
  400bfe:	200c      	movs	r0, #12
  400c00:	47a0      	blx	r4
  400c02:	2010      	movs	r0, #16
  400c04:	47a0      	blx	r4
  400c06:	2011      	movs	r0, #17
  400c08:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c0a:	4b2b      	ldr	r3, [pc, #172]	; (400cb8 <board_init+0x18c>)
  400c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c10:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c16:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400c18:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400c20:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400c26:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c2c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400c2e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400c34:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400c36:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400c3a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c3c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400c3e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400c42:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c48:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400c50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400c54:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c5a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c5c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c62:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400c64:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400c68:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c6a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400c6c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400c70:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c72:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c74:	4a11      	ldr	r2, [pc, #68]	; (400cbc <board_init+0x190>)
  400c76:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400c7a:	f043 0310 	orr.w	r3, r3, #16
  400c7e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400c82:	4b0f      	ldr	r3, [pc, #60]	; (400cc0 <board_init+0x194>)
  400c84:	2210      	movs	r2, #16
  400c86:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c8c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c8e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400c94:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400c96:	4311      	orrs	r1, r2
  400c98:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c9a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400c9c:	4311      	orrs	r1, r2
  400c9e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ca0:	605a      	str	r2, [r3, #4]
  400ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ca4:	400e1850 	.word	0x400e1850
  400ca8:	e000ed00 	.word	0xe000ed00
  400cac:	400e0c00 	.word	0x400e0c00
  400cb0:	5a00080c 	.word	0x5a00080c
  400cb4:	00401105 	.word	0x00401105
  400cb8:	400e1200 	.word	0x400e1200
  400cbc:	40088000 	.word	0x40088000
  400cc0:	400e1000 	.word	0x400e1000

00400cc4 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400cc4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400cc8:	0053      	lsls	r3, r2, #1
  400cca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cce:	fbb2 f2f3 	udiv	r2, r2, r3
  400cd2:	3a01      	subs	r2, #1
  400cd4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400cd8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400cdc:	4770      	bx	lr

00400cde <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400cde:	6301      	str	r1, [r0, #48]	; 0x30
  400ce0:	4770      	bx	lr

00400ce2 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400ce2:	6341      	str	r1, [r0, #52]	; 0x34
  400ce4:	4770      	bx	lr

00400ce6 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400ce6:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400cea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400cee:	d105      	bne.n	400cfc <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400cf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400cf2:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400cf4:	bf14      	ite	ne
  400cf6:	2001      	movne	r0, #1
  400cf8:	2000      	moveq	r0, #0
  400cfa:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400cfc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400cfe:	e7f8      	b.n	400cf2 <pio_get+0xc>

00400d00 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d00:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d02:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d06:	d03a      	beq.n	400d7e <pio_set_peripheral+0x7e>
  400d08:	d813      	bhi.n	400d32 <pio_set_peripheral+0x32>
  400d0a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d0e:	d025      	beq.n	400d5c <pio_set_peripheral+0x5c>
  400d10:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d14:	d10a      	bne.n	400d2c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d16:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d18:	4313      	orrs	r3, r2
  400d1a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d1c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d1e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d20:	400b      	ands	r3, r1
  400d22:	ea23 0302 	bic.w	r3, r3, r2
  400d26:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d28:	6042      	str	r2, [r0, #4]
  400d2a:	4770      	bx	lr
	switch (ul_type) {
  400d2c:	2900      	cmp	r1, #0
  400d2e:	d1fb      	bne.n	400d28 <pio_set_peripheral+0x28>
  400d30:	4770      	bx	lr
  400d32:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d36:	d021      	beq.n	400d7c <pio_set_peripheral+0x7c>
  400d38:	d809      	bhi.n	400d4e <pio_set_peripheral+0x4e>
  400d3a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d3e:	d1f3      	bne.n	400d28 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d40:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d42:	4313      	orrs	r3, r2
  400d44:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d46:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d48:	4313      	orrs	r3, r2
  400d4a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d4c:	e7ec      	b.n	400d28 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400d4e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d52:	d013      	beq.n	400d7c <pio_set_peripheral+0x7c>
  400d54:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d58:	d010      	beq.n	400d7c <pio_set_peripheral+0x7c>
  400d5a:	e7e5      	b.n	400d28 <pio_set_peripheral+0x28>
{
  400d5c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d5e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d60:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400d62:	43d3      	mvns	r3, r2
  400d64:	4021      	ands	r1, r4
  400d66:	461c      	mov	r4, r3
  400d68:	4019      	ands	r1, r3
  400d6a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d6e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d70:	400b      	ands	r3, r1
  400d72:	4023      	ands	r3, r4
  400d74:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400d76:	6042      	str	r2, [r0, #4]
}
  400d78:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d7c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d7e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d80:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400d82:	400b      	ands	r3, r1
  400d84:	ea23 0302 	bic.w	r3, r3, r2
  400d88:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d8a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d8c:	4313      	orrs	r3, r2
  400d8e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d90:	e7ca      	b.n	400d28 <pio_set_peripheral+0x28>

00400d92 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d92:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d94:	f012 0f01 	tst.w	r2, #1
  400d98:	d10d      	bne.n	400db6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400d9a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d9c:	f012 0f0a 	tst.w	r2, #10
  400da0:	d00b      	beq.n	400dba <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400da2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400da4:	f012 0f02 	tst.w	r2, #2
  400da8:	d109      	bne.n	400dbe <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400daa:	f012 0f08 	tst.w	r2, #8
  400dae:	d008      	beq.n	400dc2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400db0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400db4:	e005      	b.n	400dc2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400db6:	6641      	str	r1, [r0, #100]	; 0x64
  400db8:	e7f0      	b.n	400d9c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400dba:	6241      	str	r1, [r0, #36]	; 0x24
  400dbc:	e7f2      	b.n	400da4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400dbe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400dc2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400dc4:	6001      	str	r1, [r0, #0]
  400dc6:	4770      	bx	lr

00400dc8 <pio_set_output>:
{
  400dc8:	b410      	push	{r4}
  400dca:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400dcc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400dce:	b94c      	cbnz	r4, 400de4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400dd0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400dd2:	b14b      	cbz	r3, 400de8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400dd4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400dd6:	b94a      	cbnz	r2, 400dec <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400dd8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400dda:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ddc:	6001      	str	r1, [r0, #0]
}
  400dde:	f85d 4b04 	ldr.w	r4, [sp], #4
  400de2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400de4:	6641      	str	r1, [r0, #100]	; 0x64
  400de6:	e7f4      	b.n	400dd2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400de8:	6541      	str	r1, [r0, #84]	; 0x54
  400dea:	e7f4      	b.n	400dd6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400dec:	6301      	str	r1, [r0, #48]	; 0x30
  400dee:	e7f4      	b.n	400dda <pio_set_output+0x12>

00400df0 <pio_configure>:
{
  400df0:	b570      	push	{r4, r5, r6, lr}
  400df2:	b082      	sub	sp, #8
  400df4:	4605      	mov	r5, r0
  400df6:	4616      	mov	r6, r2
  400df8:	461c      	mov	r4, r3
	switch (ul_type) {
  400dfa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400dfe:	d014      	beq.n	400e2a <pio_configure+0x3a>
  400e00:	d90a      	bls.n	400e18 <pio_configure+0x28>
  400e02:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e06:	d024      	beq.n	400e52 <pio_configure+0x62>
  400e08:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e0c:	d021      	beq.n	400e52 <pio_configure+0x62>
  400e0e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e12:	d017      	beq.n	400e44 <pio_configure+0x54>
		return 0;
  400e14:	2000      	movs	r0, #0
  400e16:	e01a      	b.n	400e4e <pio_configure+0x5e>
	switch (ul_type) {
  400e18:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e1c:	d005      	beq.n	400e2a <pio_configure+0x3a>
  400e1e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e22:	d002      	beq.n	400e2a <pio_configure+0x3a>
  400e24:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e28:	d1f4      	bne.n	400e14 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400e2a:	4632      	mov	r2, r6
  400e2c:	4628      	mov	r0, r5
  400e2e:	4b11      	ldr	r3, [pc, #68]	; (400e74 <pio_configure+0x84>)
  400e30:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400e32:	f014 0f01 	tst.w	r4, #1
  400e36:	d102      	bne.n	400e3e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400e38:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400e3a:	2001      	movs	r0, #1
  400e3c:	e007      	b.n	400e4e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400e3e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400e40:	2001      	movs	r0, #1
  400e42:	e004      	b.n	400e4e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400e44:	461a      	mov	r2, r3
  400e46:	4631      	mov	r1, r6
  400e48:	4b0b      	ldr	r3, [pc, #44]	; (400e78 <pio_configure+0x88>)
  400e4a:	4798      	blx	r3
	return 1;
  400e4c:	2001      	movs	r0, #1
}
  400e4e:	b002      	add	sp, #8
  400e50:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400e52:	f004 0301 	and.w	r3, r4, #1
  400e56:	9300      	str	r3, [sp, #0]
  400e58:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400e5c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e60:	bf14      	ite	ne
  400e62:	2200      	movne	r2, #0
  400e64:	2201      	moveq	r2, #1
  400e66:	4631      	mov	r1, r6
  400e68:	4628      	mov	r0, r5
  400e6a:	4c04      	ldr	r4, [pc, #16]	; (400e7c <pio_configure+0x8c>)
  400e6c:	47a0      	blx	r4
	return 1;
  400e6e:	2001      	movs	r0, #1
		break;
  400e70:	e7ed      	b.n	400e4e <pio_configure+0x5e>
  400e72:	bf00      	nop
  400e74:	00400d01 	.word	0x00400d01
  400e78:	00400d93 	.word	0x00400d93
  400e7c:	00400dc9 	.word	0x00400dc9

00400e80 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400e80:	f012 0f10 	tst.w	r2, #16
  400e84:	d012      	beq.n	400eac <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400e86:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400e8a:	f012 0f20 	tst.w	r2, #32
  400e8e:	d007      	beq.n	400ea0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400e90:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400e94:	f012 0f40 	tst.w	r2, #64	; 0x40
  400e98:	d005      	beq.n	400ea6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400e9a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400e9e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400ea0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400ea4:	e7f6      	b.n	400e94 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400ea6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400eaa:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400eac:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400eb0:	4770      	bx	lr

00400eb2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400eb2:	6401      	str	r1, [r0, #64]	; 0x40
  400eb4:	4770      	bx	lr

00400eb6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400eb6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400eb8:	4770      	bx	lr

00400eba <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400eba:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400ebc:	4770      	bx	lr
	...

00400ec0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ec4:	4604      	mov	r4, r0
  400ec6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ec8:	4b0e      	ldr	r3, [pc, #56]	; (400f04 <pio_handler_process+0x44>)
  400eca:	4798      	blx	r3
  400ecc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ece:	4620      	mov	r0, r4
  400ed0:	4b0d      	ldr	r3, [pc, #52]	; (400f08 <pio_handler_process+0x48>)
  400ed2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ed4:	4005      	ands	r5, r0
  400ed6:	d013      	beq.n	400f00 <pio_handler_process+0x40>
  400ed8:	4c0c      	ldr	r4, [pc, #48]	; (400f0c <pio_handler_process+0x4c>)
  400eda:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400ede:	e003      	b.n	400ee8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ee0:	42b4      	cmp	r4, r6
  400ee2:	d00d      	beq.n	400f00 <pio_handler_process+0x40>
  400ee4:	3410      	adds	r4, #16
		while (status != 0) {
  400ee6:	b15d      	cbz	r5, 400f00 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400ee8:	6820      	ldr	r0, [r4, #0]
  400eea:	4540      	cmp	r0, r8
  400eec:	d1f8      	bne.n	400ee0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400eee:	6861      	ldr	r1, [r4, #4]
  400ef0:	4229      	tst	r1, r5
  400ef2:	d0f5      	beq.n	400ee0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ef4:	68e3      	ldr	r3, [r4, #12]
  400ef6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400ef8:	6863      	ldr	r3, [r4, #4]
  400efa:	ea25 0503 	bic.w	r5, r5, r3
  400efe:	e7ef      	b.n	400ee0 <pio_handler_process+0x20>
  400f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f04:	00400eb7 	.word	0x00400eb7
  400f08:	00400ebb 	.word	0x00400ebb
  400f0c:	20400c4c 	.word	0x20400c4c

00400f10 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400f12:	4c18      	ldr	r4, [pc, #96]	; (400f74 <pio_handler_set+0x64>)
  400f14:	6826      	ldr	r6, [r4, #0]
  400f16:	2e06      	cmp	r6, #6
  400f18:	d82a      	bhi.n	400f70 <pio_handler_set+0x60>
  400f1a:	f04f 0c00 	mov.w	ip, #0
  400f1e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400f20:	4f15      	ldr	r7, [pc, #84]	; (400f78 <pio_handler_set+0x68>)
  400f22:	e004      	b.n	400f2e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400f24:	3401      	adds	r4, #1
  400f26:	b2e4      	uxtb	r4, r4
  400f28:	46a4      	mov	ip, r4
  400f2a:	42a6      	cmp	r6, r4
  400f2c:	d309      	bcc.n	400f42 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400f2e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400f30:	0125      	lsls	r5, r4, #4
  400f32:	597d      	ldr	r5, [r7, r5]
  400f34:	428d      	cmp	r5, r1
  400f36:	d1f5      	bne.n	400f24 <pio_handler_set+0x14>
  400f38:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400f3c:	686d      	ldr	r5, [r5, #4]
  400f3e:	4295      	cmp	r5, r2
  400f40:	d1f0      	bne.n	400f24 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400f42:	4d0d      	ldr	r5, [pc, #52]	; (400f78 <pio_handler_set+0x68>)
  400f44:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400f48:	eb05 040e 	add.w	r4, r5, lr
  400f4c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400f50:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400f52:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400f54:	9906      	ldr	r1, [sp, #24]
  400f56:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400f58:	3601      	adds	r6, #1
  400f5a:	4566      	cmp	r6, ip
  400f5c:	d005      	beq.n	400f6a <pio_handler_set+0x5a>
  400f5e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400f60:	461a      	mov	r2, r3
  400f62:	4b06      	ldr	r3, [pc, #24]	; (400f7c <pio_handler_set+0x6c>)
  400f64:	4798      	blx	r3

	return 0;
  400f66:	2000      	movs	r0, #0
  400f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400f6a:	4902      	ldr	r1, [pc, #8]	; (400f74 <pio_handler_set+0x64>)
  400f6c:	600e      	str	r6, [r1, #0]
  400f6e:	e7f6      	b.n	400f5e <pio_handler_set+0x4e>
		return 1;
  400f70:	2001      	movs	r0, #1
}
  400f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f74:	20400cbc 	.word	0x20400cbc
  400f78:	20400c4c 	.word	0x20400c4c
  400f7c:	00400e81 	.word	0x00400e81

00400f80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f80:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f82:	210a      	movs	r1, #10
  400f84:	4801      	ldr	r0, [pc, #4]	; (400f8c <PIOA_Handler+0xc>)
  400f86:	4b02      	ldr	r3, [pc, #8]	; (400f90 <PIOA_Handler+0x10>)
  400f88:	4798      	blx	r3
  400f8a:	bd08      	pop	{r3, pc}
  400f8c:	400e0e00 	.word	0x400e0e00
  400f90:	00400ec1 	.word	0x00400ec1

00400f94 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400f94:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400f96:	210b      	movs	r1, #11
  400f98:	4801      	ldr	r0, [pc, #4]	; (400fa0 <PIOB_Handler+0xc>)
  400f9a:	4b02      	ldr	r3, [pc, #8]	; (400fa4 <PIOB_Handler+0x10>)
  400f9c:	4798      	blx	r3
  400f9e:	bd08      	pop	{r3, pc}
  400fa0:	400e1000 	.word	0x400e1000
  400fa4:	00400ec1 	.word	0x00400ec1

00400fa8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400fa8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400faa:	210c      	movs	r1, #12
  400fac:	4801      	ldr	r0, [pc, #4]	; (400fb4 <PIOC_Handler+0xc>)
  400fae:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <PIOC_Handler+0x10>)
  400fb0:	4798      	blx	r3
  400fb2:	bd08      	pop	{r3, pc}
  400fb4:	400e1200 	.word	0x400e1200
  400fb8:	00400ec1 	.word	0x00400ec1

00400fbc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400fbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400fbe:	2110      	movs	r1, #16
  400fc0:	4801      	ldr	r0, [pc, #4]	; (400fc8 <PIOD_Handler+0xc>)
  400fc2:	4b02      	ldr	r3, [pc, #8]	; (400fcc <PIOD_Handler+0x10>)
  400fc4:	4798      	blx	r3
  400fc6:	bd08      	pop	{r3, pc}
  400fc8:	400e1400 	.word	0x400e1400
  400fcc:	00400ec1 	.word	0x00400ec1

00400fd0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400fd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400fd2:	2111      	movs	r1, #17
  400fd4:	4801      	ldr	r0, [pc, #4]	; (400fdc <PIOE_Handler+0xc>)
  400fd6:	4b02      	ldr	r3, [pc, #8]	; (400fe0 <PIOE_Handler+0x10>)
  400fd8:	4798      	blx	r3
  400fda:	bd08      	pop	{r3, pc}
  400fdc:	400e1600 	.word	0x400e1600
  400fe0:	00400ec1 	.word	0x00400ec1

00400fe4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400fe4:	2803      	cmp	r0, #3
  400fe6:	d011      	beq.n	40100c <pmc_mck_set_division+0x28>
  400fe8:	2804      	cmp	r0, #4
  400fea:	d012      	beq.n	401012 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400fec:	2802      	cmp	r0, #2
  400fee:	bf0c      	ite	eq
  400ff0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ff4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ff6:	4a08      	ldr	r2, [pc, #32]	; (401018 <pmc_mck_set_division+0x34>)
  400ff8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400ffe:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401000:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401002:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401004:	f013 0f08 	tst.w	r3, #8
  401008:	d0fb      	beq.n	401002 <pmc_mck_set_division+0x1e>
}
  40100a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40100c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401010:	e7f1      	b.n	400ff6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401012:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401016:	e7ee      	b.n	400ff6 <pmc_mck_set_division+0x12>
  401018:	400e0600 	.word	0x400e0600

0040101c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40101c:	4a17      	ldr	r2, [pc, #92]	; (40107c <pmc_switch_mck_to_pllack+0x60>)
  40101e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401024:	4318      	orrs	r0, r3
  401026:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401028:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40102a:	f013 0f08 	tst.w	r3, #8
  40102e:	d10a      	bne.n	401046 <pmc_switch_mck_to_pllack+0x2a>
  401030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401034:	4911      	ldr	r1, [pc, #68]	; (40107c <pmc_switch_mck_to_pllack+0x60>)
  401036:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401038:	f012 0f08 	tst.w	r2, #8
  40103c:	d103      	bne.n	401046 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40103e:	3b01      	subs	r3, #1
  401040:	d1f9      	bne.n	401036 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401042:	2001      	movs	r0, #1
  401044:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401046:	4a0d      	ldr	r2, [pc, #52]	; (40107c <pmc_switch_mck_to_pllack+0x60>)
  401048:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40104a:	f023 0303 	bic.w	r3, r3, #3
  40104e:	f043 0302 	orr.w	r3, r3, #2
  401052:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401054:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401056:	f013 0f08 	tst.w	r3, #8
  40105a:	d10a      	bne.n	401072 <pmc_switch_mck_to_pllack+0x56>
  40105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401060:	4906      	ldr	r1, [pc, #24]	; (40107c <pmc_switch_mck_to_pllack+0x60>)
  401062:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401064:	f012 0f08 	tst.w	r2, #8
  401068:	d105      	bne.n	401076 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40106a:	3b01      	subs	r3, #1
  40106c:	d1f9      	bne.n	401062 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40106e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401070:	4770      	bx	lr
	return 0;
  401072:	2000      	movs	r0, #0
  401074:	4770      	bx	lr
  401076:	2000      	movs	r0, #0
  401078:	4770      	bx	lr
  40107a:	bf00      	nop
  40107c:	400e0600 	.word	0x400e0600

00401080 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401080:	b9a0      	cbnz	r0, 4010ac <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401082:	480e      	ldr	r0, [pc, #56]	; (4010bc <pmc_switch_mainck_to_xtal+0x3c>)
  401084:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401086:	0209      	lsls	r1, r1, #8
  401088:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40108a:	4a0d      	ldr	r2, [pc, #52]	; (4010c0 <pmc_switch_mainck_to_xtal+0x40>)
  40108c:	401a      	ands	r2, r3
  40108e:	4b0d      	ldr	r3, [pc, #52]	; (4010c4 <pmc_switch_mainck_to_xtal+0x44>)
  401090:	4313      	orrs	r3, r2
  401092:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401094:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401096:	4602      	mov	r2, r0
  401098:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40109a:	f013 0f01 	tst.w	r3, #1
  40109e:	d0fb      	beq.n	401098 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4010a0:	4a06      	ldr	r2, [pc, #24]	; (4010bc <pmc_switch_mainck_to_xtal+0x3c>)
  4010a2:	6a11      	ldr	r1, [r2, #32]
  4010a4:	4b08      	ldr	r3, [pc, #32]	; (4010c8 <pmc_switch_mainck_to_xtal+0x48>)
  4010a6:	430b      	orrs	r3, r1
  4010a8:	6213      	str	r3, [r2, #32]
  4010aa:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010ac:	4903      	ldr	r1, [pc, #12]	; (4010bc <pmc_switch_mainck_to_xtal+0x3c>)
  4010ae:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4010b0:	4a06      	ldr	r2, [pc, #24]	; (4010cc <pmc_switch_mainck_to_xtal+0x4c>)
  4010b2:	401a      	ands	r2, r3
  4010b4:	4b06      	ldr	r3, [pc, #24]	; (4010d0 <pmc_switch_mainck_to_xtal+0x50>)
  4010b6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010b8:	620b      	str	r3, [r1, #32]
  4010ba:	4770      	bx	lr
  4010bc:	400e0600 	.word	0x400e0600
  4010c0:	ffc8fffc 	.word	0xffc8fffc
  4010c4:	00370001 	.word	0x00370001
  4010c8:	01370000 	.word	0x01370000
  4010cc:	fec8fffc 	.word	0xfec8fffc
  4010d0:	01370002 	.word	0x01370002

004010d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4010d4:	4b02      	ldr	r3, [pc, #8]	; (4010e0 <pmc_osc_is_ready_mainck+0xc>)
  4010d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4010d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4010dc:	4770      	bx	lr
  4010de:	bf00      	nop
  4010e0:	400e0600 	.word	0x400e0600

004010e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4010e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4010e8:	4b01      	ldr	r3, [pc, #4]	; (4010f0 <pmc_disable_pllack+0xc>)
  4010ea:	629a      	str	r2, [r3, #40]	; 0x28
  4010ec:	4770      	bx	lr
  4010ee:	bf00      	nop
  4010f0:	400e0600 	.word	0x400e0600

004010f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4010f4:	4b02      	ldr	r3, [pc, #8]	; (401100 <pmc_is_locked_pllack+0xc>)
  4010f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4010f8:	f000 0002 	and.w	r0, r0, #2
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop
  401100:	400e0600 	.word	0x400e0600

00401104 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401104:	283f      	cmp	r0, #63	; 0x3f
  401106:	d81e      	bhi.n	401146 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401108:	281f      	cmp	r0, #31
  40110a:	d80c      	bhi.n	401126 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40110c:	4b11      	ldr	r3, [pc, #68]	; (401154 <pmc_enable_periph_clk+0x50>)
  40110e:	699a      	ldr	r2, [r3, #24]
  401110:	2301      	movs	r3, #1
  401112:	4083      	lsls	r3, r0
  401114:	4393      	bics	r3, r2
  401116:	d018      	beq.n	40114a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401118:	2301      	movs	r3, #1
  40111a:	fa03 f000 	lsl.w	r0, r3, r0
  40111e:	4b0d      	ldr	r3, [pc, #52]	; (401154 <pmc_enable_periph_clk+0x50>)
  401120:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401122:	2000      	movs	r0, #0
  401124:	4770      	bx	lr
		ul_id -= 32;
  401126:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401128:	4b0a      	ldr	r3, [pc, #40]	; (401154 <pmc_enable_periph_clk+0x50>)
  40112a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40112e:	2301      	movs	r3, #1
  401130:	4083      	lsls	r3, r0
  401132:	4393      	bics	r3, r2
  401134:	d00b      	beq.n	40114e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401136:	2301      	movs	r3, #1
  401138:	fa03 f000 	lsl.w	r0, r3, r0
  40113c:	4b05      	ldr	r3, [pc, #20]	; (401154 <pmc_enable_periph_clk+0x50>)
  40113e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401142:	2000      	movs	r0, #0
  401144:	4770      	bx	lr
		return 1;
  401146:	2001      	movs	r0, #1
  401148:	4770      	bx	lr
	return 0;
  40114a:	2000      	movs	r0, #0
  40114c:	4770      	bx	lr
  40114e:	2000      	movs	r0, #0
}
  401150:	4770      	bx	lr
  401152:	bf00      	nop
  401154:	400e0600 	.word	0x400e0600

00401158 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401158:	6943      	ldr	r3, [r0, #20]
  40115a:	f013 0f02 	tst.w	r3, #2
  40115e:	d002      	beq.n	401166 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401160:	61c1      	str	r1, [r0, #28]
	return 0;
  401162:	2000      	movs	r0, #0
  401164:	4770      	bx	lr
		return 1;
  401166:	2001      	movs	r0, #1
}
  401168:	4770      	bx	lr

0040116a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40116a:	6943      	ldr	r3, [r0, #20]
  40116c:	f013 0f01 	tst.w	r3, #1
  401170:	d003      	beq.n	40117a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401172:	6983      	ldr	r3, [r0, #24]
  401174:	700b      	strb	r3, [r1, #0]
	return 0;
  401176:	2000      	movs	r0, #0
  401178:	4770      	bx	lr
		return 1;
  40117a:	2001      	movs	r0, #1
}
  40117c:	4770      	bx	lr

0040117e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40117e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401180:	010b      	lsls	r3, r1, #4
  401182:	4293      	cmp	r3, r2
  401184:	d914      	bls.n	4011b0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401186:	00c9      	lsls	r1, r1, #3
  401188:	084b      	lsrs	r3, r1, #1
  40118a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40118e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401192:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401194:	1e5c      	subs	r4, r3, #1
  401196:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40119a:	428c      	cmp	r4, r1
  40119c:	d901      	bls.n	4011a2 <usart_set_async_baudrate+0x24>
		return 1;
  40119e:	2001      	movs	r0, #1
  4011a0:	e017      	b.n	4011d2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4011a2:	6841      	ldr	r1, [r0, #4]
  4011a4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4011a8:	6041      	str	r1, [r0, #4]
  4011aa:	e00c      	b.n	4011c6 <usart_set_async_baudrate+0x48>
		return 1;
  4011ac:	2001      	movs	r0, #1
  4011ae:	e010      	b.n	4011d2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4011b0:	0859      	lsrs	r1, r3, #1
  4011b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4011b6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4011ba:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4011bc:	1e5c      	subs	r4, r3, #1
  4011be:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4011c2:	428c      	cmp	r4, r1
  4011c4:	d8f2      	bhi.n	4011ac <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4011c6:	0412      	lsls	r2, r2, #16
  4011c8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4011cc:	431a      	orrs	r2, r3
  4011ce:	6202      	str	r2, [r0, #32]

	return 0;
  4011d0:	2000      	movs	r0, #0
}
  4011d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011d6:	4770      	bx	lr

004011d8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4011d8:	4b08      	ldr	r3, [pc, #32]	; (4011fc <usart_reset+0x24>)
  4011da:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4011de:	2300      	movs	r3, #0
  4011e0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4011e2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4011e4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4011e6:	2388      	movs	r3, #136	; 0x88
  4011e8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4011ea:	2324      	movs	r3, #36	; 0x24
  4011ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  4011f2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4011f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4011f8:	6003      	str	r3, [r0, #0]
  4011fa:	4770      	bx	lr
  4011fc:	55534100 	.word	0x55534100

00401200 <usart_init_rs232>:
{
  401200:	b570      	push	{r4, r5, r6, lr}
  401202:	4605      	mov	r5, r0
  401204:	460c      	mov	r4, r1
  401206:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401208:	4b0f      	ldr	r3, [pc, #60]	; (401248 <usart_init_rs232+0x48>)
  40120a:	4798      	blx	r3
	ul_reg_val = 0;
  40120c:	2200      	movs	r2, #0
  40120e:	4b0f      	ldr	r3, [pc, #60]	; (40124c <usart_init_rs232+0x4c>)
  401210:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401212:	b1a4      	cbz	r4, 40123e <usart_init_rs232+0x3e>
  401214:	4632      	mov	r2, r6
  401216:	6821      	ldr	r1, [r4, #0]
  401218:	4628      	mov	r0, r5
  40121a:	4b0d      	ldr	r3, [pc, #52]	; (401250 <usart_init_rs232+0x50>)
  40121c:	4798      	blx	r3
  40121e:	4602      	mov	r2, r0
  401220:	b978      	cbnz	r0, 401242 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401222:	6863      	ldr	r3, [r4, #4]
  401224:	68a1      	ldr	r1, [r4, #8]
  401226:	430b      	orrs	r3, r1
  401228:	6921      	ldr	r1, [r4, #16]
  40122a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40122c:	68e1      	ldr	r1, [r4, #12]
  40122e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401230:	4906      	ldr	r1, [pc, #24]	; (40124c <usart_init_rs232+0x4c>)
  401232:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401234:	6869      	ldr	r1, [r5, #4]
  401236:	430b      	orrs	r3, r1
  401238:	606b      	str	r3, [r5, #4]
}
  40123a:	4610      	mov	r0, r2
  40123c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40123e:	2201      	movs	r2, #1
  401240:	e7fb      	b.n	40123a <usart_init_rs232+0x3a>
  401242:	2201      	movs	r2, #1
  401244:	e7f9      	b.n	40123a <usart_init_rs232+0x3a>
  401246:	bf00      	nop
  401248:	004011d9 	.word	0x004011d9
  40124c:	20400cc0 	.word	0x20400cc0
  401250:	0040117f 	.word	0x0040117f

00401254 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401254:	2340      	movs	r3, #64	; 0x40
  401256:	6003      	str	r3, [r0, #0]
  401258:	4770      	bx	lr

0040125a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40125a:	2310      	movs	r3, #16
  40125c:	6003      	str	r3, [r0, #0]
  40125e:	4770      	bx	lr

00401260 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401260:	6943      	ldr	r3, [r0, #20]
  401262:	f013 0f02 	tst.w	r3, #2
  401266:	d004      	beq.n	401272 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401268:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40126c:	61c1      	str	r1, [r0, #28]
	return 0;
  40126e:	2000      	movs	r0, #0
  401270:	4770      	bx	lr
		return 1;
  401272:	2001      	movs	r0, #1
}
  401274:	4770      	bx	lr

00401276 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401276:	6943      	ldr	r3, [r0, #20]
  401278:	f013 0f01 	tst.w	r3, #1
  40127c:	d005      	beq.n	40128a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40127e:	6983      	ldr	r3, [r0, #24]
  401280:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401284:	600b      	str	r3, [r1, #0]
	return 0;
  401286:	2000      	movs	r0, #0
  401288:	4770      	bx	lr
		return 1;
  40128a:	2001      	movs	r0, #1
}
  40128c:	4770      	bx	lr

0040128e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40128e:	e7fe      	b.n	40128e <Dummy_Handler>

00401290 <Reset_Handler>:
{
  401290:	b500      	push	{lr}
  401292:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401294:	4b25      	ldr	r3, [pc, #148]	; (40132c <Reset_Handler+0x9c>)
  401296:	4a26      	ldr	r2, [pc, #152]	; (401330 <Reset_Handler+0xa0>)
  401298:	429a      	cmp	r2, r3
  40129a:	d010      	beq.n	4012be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40129c:	4b25      	ldr	r3, [pc, #148]	; (401334 <Reset_Handler+0xa4>)
  40129e:	4a23      	ldr	r2, [pc, #140]	; (40132c <Reset_Handler+0x9c>)
  4012a0:	429a      	cmp	r2, r3
  4012a2:	d20c      	bcs.n	4012be <Reset_Handler+0x2e>
  4012a4:	3b01      	subs	r3, #1
  4012a6:	1a9b      	subs	r3, r3, r2
  4012a8:	f023 0303 	bic.w	r3, r3, #3
  4012ac:	3304      	adds	r3, #4
  4012ae:	4413      	add	r3, r2
  4012b0:	491f      	ldr	r1, [pc, #124]	; (401330 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4012b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4012b6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4012ba:	429a      	cmp	r2, r3
  4012bc:	d1f9      	bne.n	4012b2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4012be:	4b1e      	ldr	r3, [pc, #120]	; (401338 <Reset_Handler+0xa8>)
  4012c0:	4a1e      	ldr	r2, [pc, #120]	; (40133c <Reset_Handler+0xac>)
  4012c2:	429a      	cmp	r2, r3
  4012c4:	d20a      	bcs.n	4012dc <Reset_Handler+0x4c>
  4012c6:	3b01      	subs	r3, #1
  4012c8:	1a9b      	subs	r3, r3, r2
  4012ca:	f023 0303 	bic.w	r3, r3, #3
  4012ce:	3304      	adds	r3, #4
  4012d0:	4413      	add	r3, r2
                *pDest++ = 0;
  4012d2:	2100      	movs	r1, #0
  4012d4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4012d8:	4293      	cmp	r3, r2
  4012da:	d1fb      	bne.n	4012d4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4012dc:	4a18      	ldr	r2, [pc, #96]	; (401340 <Reset_Handler+0xb0>)
  4012de:	4b19      	ldr	r3, [pc, #100]	; (401344 <Reset_Handler+0xb4>)
  4012e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4012e4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4012e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012ea:	fab3 f383 	clz	r3, r3
  4012ee:	095b      	lsrs	r3, r3, #5
  4012f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4012f2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4012f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4012f8:	2200      	movs	r2, #0
  4012fa:	4b13      	ldr	r3, [pc, #76]	; (401348 <Reset_Handler+0xb8>)
  4012fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4012fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401300:	4a12      	ldr	r2, [pc, #72]	; (40134c <Reset_Handler+0xbc>)
  401302:	6813      	ldr	r3, [r2, #0]
  401304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401308:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40130a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40130e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401312:	b129      	cbz	r1, 401320 <Reset_Handler+0x90>
		cpu_irq_enable();
  401314:	2201      	movs	r2, #1
  401316:	4b0c      	ldr	r3, [pc, #48]	; (401348 <Reset_Handler+0xb8>)
  401318:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40131a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40131e:	b662      	cpsie	i
        __libc_init_array();
  401320:	4b0b      	ldr	r3, [pc, #44]	; (401350 <Reset_Handler+0xc0>)
  401322:	4798      	blx	r3
        main();
  401324:	4b0b      	ldr	r3, [pc, #44]	; (401354 <Reset_Handler+0xc4>)
  401326:	4798      	blx	r3
  401328:	e7fe      	b.n	401328 <Reset_Handler+0x98>
  40132a:	bf00      	nop
  40132c:	20400000 	.word	0x20400000
  401330:	0040afcc 	.word	0x0040afcc
  401334:	20400a28 	.word	0x20400a28
  401338:	20400ee4 	.word	0x20400ee4
  40133c:	20400a28 	.word	0x20400a28
  401340:	e000ed00 	.word	0xe000ed00
  401344:	00400000 	.word	0x00400000
  401348:	20400018 	.word	0x20400018
  40134c:	e000ed88 	.word	0xe000ed88
  401350:	0040442d 	.word	0x0040442d
  401354:	004038a1 	.word	0x004038a1

00401358 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401358:	4b3b      	ldr	r3, [pc, #236]	; (401448 <SystemCoreClockUpdate+0xf0>)
  40135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40135c:	f003 0303 	and.w	r3, r3, #3
  401360:	2b01      	cmp	r3, #1
  401362:	d01d      	beq.n	4013a0 <SystemCoreClockUpdate+0x48>
  401364:	b183      	cbz	r3, 401388 <SystemCoreClockUpdate+0x30>
  401366:	2b02      	cmp	r3, #2
  401368:	d036      	beq.n	4013d8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40136a:	4b37      	ldr	r3, [pc, #220]	; (401448 <SystemCoreClockUpdate+0xf0>)
  40136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40136e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401372:	2b70      	cmp	r3, #112	; 0x70
  401374:	d05f      	beq.n	401436 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401376:	4b34      	ldr	r3, [pc, #208]	; (401448 <SystemCoreClockUpdate+0xf0>)
  401378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40137a:	4934      	ldr	r1, [pc, #208]	; (40144c <SystemCoreClockUpdate+0xf4>)
  40137c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401380:	680b      	ldr	r3, [r1, #0]
  401382:	40d3      	lsrs	r3, r2
  401384:	600b      	str	r3, [r1, #0]
  401386:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401388:	4b31      	ldr	r3, [pc, #196]	; (401450 <SystemCoreClockUpdate+0xf8>)
  40138a:	695b      	ldr	r3, [r3, #20]
  40138c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401390:	bf14      	ite	ne
  401392:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401396:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40139a:	4b2c      	ldr	r3, [pc, #176]	; (40144c <SystemCoreClockUpdate+0xf4>)
  40139c:	601a      	str	r2, [r3, #0]
  40139e:	e7e4      	b.n	40136a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013a0:	4b29      	ldr	r3, [pc, #164]	; (401448 <SystemCoreClockUpdate+0xf0>)
  4013a2:	6a1b      	ldr	r3, [r3, #32]
  4013a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013a8:	d003      	beq.n	4013b2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4013aa:	4a2a      	ldr	r2, [pc, #168]	; (401454 <SystemCoreClockUpdate+0xfc>)
  4013ac:	4b27      	ldr	r3, [pc, #156]	; (40144c <SystemCoreClockUpdate+0xf4>)
  4013ae:	601a      	str	r2, [r3, #0]
  4013b0:	e7db      	b.n	40136a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013b2:	4a29      	ldr	r2, [pc, #164]	; (401458 <SystemCoreClockUpdate+0x100>)
  4013b4:	4b25      	ldr	r3, [pc, #148]	; (40144c <SystemCoreClockUpdate+0xf4>)
  4013b6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4013b8:	4b23      	ldr	r3, [pc, #140]	; (401448 <SystemCoreClockUpdate+0xf0>)
  4013ba:	6a1b      	ldr	r3, [r3, #32]
  4013bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013c0:	2b10      	cmp	r3, #16
  4013c2:	d005      	beq.n	4013d0 <SystemCoreClockUpdate+0x78>
  4013c4:	2b20      	cmp	r3, #32
  4013c6:	d1d0      	bne.n	40136a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4013c8:	4a22      	ldr	r2, [pc, #136]	; (401454 <SystemCoreClockUpdate+0xfc>)
  4013ca:	4b20      	ldr	r3, [pc, #128]	; (40144c <SystemCoreClockUpdate+0xf4>)
  4013cc:	601a      	str	r2, [r3, #0]
          break;
  4013ce:	e7cc      	b.n	40136a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4013d0:	4a22      	ldr	r2, [pc, #136]	; (40145c <SystemCoreClockUpdate+0x104>)
  4013d2:	4b1e      	ldr	r3, [pc, #120]	; (40144c <SystemCoreClockUpdate+0xf4>)
  4013d4:	601a      	str	r2, [r3, #0]
          break;
  4013d6:	e7c8      	b.n	40136a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013d8:	4b1b      	ldr	r3, [pc, #108]	; (401448 <SystemCoreClockUpdate+0xf0>)
  4013da:	6a1b      	ldr	r3, [r3, #32]
  4013dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013e0:	d016      	beq.n	401410 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4013e2:	4a1c      	ldr	r2, [pc, #112]	; (401454 <SystemCoreClockUpdate+0xfc>)
  4013e4:	4b19      	ldr	r3, [pc, #100]	; (40144c <SystemCoreClockUpdate+0xf4>)
  4013e6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4013e8:	4b17      	ldr	r3, [pc, #92]	; (401448 <SystemCoreClockUpdate+0xf0>)
  4013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013ec:	f003 0303 	and.w	r3, r3, #3
  4013f0:	2b02      	cmp	r3, #2
  4013f2:	d1ba      	bne.n	40136a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4013f4:	4a14      	ldr	r2, [pc, #80]	; (401448 <SystemCoreClockUpdate+0xf0>)
  4013f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4013f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4013fa:	4814      	ldr	r0, [pc, #80]	; (40144c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4013fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401400:	6803      	ldr	r3, [r0, #0]
  401402:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401406:	b2d2      	uxtb	r2, r2
  401408:	fbb3 f3f2 	udiv	r3, r3, r2
  40140c:	6003      	str	r3, [r0, #0]
  40140e:	e7ac      	b.n	40136a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401410:	4a11      	ldr	r2, [pc, #68]	; (401458 <SystemCoreClockUpdate+0x100>)
  401412:	4b0e      	ldr	r3, [pc, #56]	; (40144c <SystemCoreClockUpdate+0xf4>)
  401414:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401416:	4b0c      	ldr	r3, [pc, #48]	; (401448 <SystemCoreClockUpdate+0xf0>)
  401418:	6a1b      	ldr	r3, [r3, #32]
  40141a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40141e:	2b10      	cmp	r3, #16
  401420:	d005      	beq.n	40142e <SystemCoreClockUpdate+0xd6>
  401422:	2b20      	cmp	r3, #32
  401424:	d1e0      	bne.n	4013e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401426:	4a0b      	ldr	r2, [pc, #44]	; (401454 <SystemCoreClockUpdate+0xfc>)
  401428:	4b08      	ldr	r3, [pc, #32]	; (40144c <SystemCoreClockUpdate+0xf4>)
  40142a:	601a      	str	r2, [r3, #0]
          break;
  40142c:	e7dc      	b.n	4013e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40142e:	4a0b      	ldr	r2, [pc, #44]	; (40145c <SystemCoreClockUpdate+0x104>)
  401430:	4b06      	ldr	r3, [pc, #24]	; (40144c <SystemCoreClockUpdate+0xf4>)
  401432:	601a      	str	r2, [r3, #0]
          break;
  401434:	e7d8      	b.n	4013e8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401436:	4a05      	ldr	r2, [pc, #20]	; (40144c <SystemCoreClockUpdate+0xf4>)
  401438:	6813      	ldr	r3, [r2, #0]
  40143a:	4909      	ldr	r1, [pc, #36]	; (401460 <SystemCoreClockUpdate+0x108>)
  40143c:	fba1 1303 	umull	r1, r3, r1, r3
  401440:	085b      	lsrs	r3, r3, #1
  401442:	6013      	str	r3, [r2, #0]
  401444:	4770      	bx	lr
  401446:	bf00      	nop
  401448:	400e0600 	.word	0x400e0600
  40144c:	2040001c 	.word	0x2040001c
  401450:	400e1810 	.word	0x400e1810
  401454:	00b71b00 	.word	0x00b71b00
  401458:	003d0900 	.word	0x003d0900
  40145c:	007a1200 	.word	0x007a1200
  401460:	aaaaaaab 	.word	0xaaaaaaab

00401464 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401464:	4b16      	ldr	r3, [pc, #88]	; (4014c0 <system_init_flash+0x5c>)
  401466:	4298      	cmp	r0, r3
  401468:	d913      	bls.n	401492 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40146a:	4b16      	ldr	r3, [pc, #88]	; (4014c4 <system_init_flash+0x60>)
  40146c:	4298      	cmp	r0, r3
  40146e:	d915      	bls.n	40149c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401470:	4b15      	ldr	r3, [pc, #84]	; (4014c8 <system_init_flash+0x64>)
  401472:	4298      	cmp	r0, r3
  401474:	d916      	bls.n	4014a4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401476:	4b15      	ldr	r3, [pc, #84]	; (4014cc <system_init_flash+0x68>)
  401478:	4298      	cmp	r0, r3
  40147a:	d917      	bls.n	4014ac <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40147c:	4b14      	ldr	r3, [pc, #80]	; (4014d0 <system_init_flash+0x6c>)
  40147e:	4298      	cmp	r0, r3
  401480:	d918      	bls.n	4014b4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401482:	4b14      	ldr	r3, [pc, #80]	; (4014d4 <system_init_flash+0x70>)
  401484:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401486:	bf94      	ite	ls
  401488:	4a13      	ldrls	r2, [pc, #76]	; (4014d8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40148a:	4a14      	ldrhi	r2, [pc, #80]	; (4014dc <system_init_flash+0x78>)
  40148c:	4b14      	ldr	r3, [pc, #80]	; (4014e0 <system_init_flash+0x7c>)
  40148e:	601a      	str	r2, [r3, #0]
  401490:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401492:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401496:	4b12      	ldr	r3, [pc, #72]	; (4014e0 <system_init_flash+0x7c>)
  401498:	601a      	str	r2, [r3, #0]
  40149a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40149c:	4a11      	ldr	r2, [pc, #68]	; (4014e4 <system_init_flash+0x80>)
  40149e:	4b10      	ldr	r3, [pc, #64]	; (4014e0 <system_init_flash+0x7c>)
  4014a0:	601a      	str	r2, [r3, #0]
  4014a2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4014a4:	4a10      	ldr	r2, [pc, #64]	; (4014e8 <system_init_flash+0x84>)
  4014a6:	4b0e      	ldr	r3, [pc, #56]	; (4014e0 <system_init_flash+0x7c>)
  4014a8:	601a      	str	r2, [r3, #0]
  4014aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4014ac:	4a0f      	ldr	r2, [pc, #60]	; (4014ec <system_init_flash+0x88>)
  4014ae:	4b0c      	ldr	r3, [pc, #48]	; (4014e0 <system_init_flash+0x7c>)
  4014b0:	601a      	str	r2, [r3, #0]
  4014b2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4014b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4014b8:	4b09      	ldr	r3, [pc, #36]	; (4014e0 <system_init_flash+0x7c>)
  4014ba:	601a      	str	r2, [r3, #0]
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	015ef3bf 	.word	0x015ef3bf
  4014c4:	02bde77f 	.word	0x02bde77f
  4014c8:	041cdb3f 	.word	0x041cdb3f
  4014cc:	057bceff 	.word	0x057bceff
  4014d0:	06dac2bf 	.word	0x06dac2bf
  4014d4:	0839b67f 	.word	0x0839b67f
  4014d8:	04000500 	.word	0x04000500
  4014dc:	04000600 	.word	0x04000600
  4014e0:	400e0c00 	.word	0x400e0c00
  4014e4:	04000100 	.word	0x04000100
  4014e8:	04000200 	.word	0x04000200
  4014ec:	04000300 	.word	0x04000300

004014f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4014f0:	4b0a      	ldr	r3, [pc, #40]	; (40151c <_sbrk+0x2c>)
  4014f2:	681b      	ldr	r3, [r3, #0]
  4014f4:	b153      	cbz	r3, 40150c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4014f6:	4b09      	ldr	r3, [pc, #36]	; (40151c <_sbrk+0x2c>)
  4014f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4014fa:	181a      	adds	r2, r3, r0
  4014fc:	4908      	ldr	r1, [pc, #32]	; (401520 <_sbrk+0x30>)
  4014fe:	4291      	cmp	r1, r2
  401500:	db08      	blt.n	401514 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401502:	4610      	mov	r0, r2
  401504:	4a05      	ldr	r2, [pc, #20]	; (40151c <_sbrk+0x2c>)
  401506:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401508:	4618      	mov	r0, r3
  40150a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40150c:	4a05      	ldr	r2, [pc, #20]	; (401524 <_sbrk+0x34>)
  40150e:	4b03      	ldr	r3, [pc, #12]	; (40151c <_sbrk+0x2c>)
  401510:	601a      	str	r2, [r3, #0]
  401512:	e7f0      	b.n	4014f6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401514:	f04f 30ff 	mov.w	r0, #4294967295
}
  401518:	4770      	bx	lr
  40151a:	bf00      	nop
  40151c:	20400cc4 	.word	0x20400cc4
  401520:	2045fffc 	.word	0x2045fffc
  401524:	204030e8 	.word	0x204030e8

00401528 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401528:	f04f 30ff 	mov.w	r0, #4294967295
  40152c:	4770      	bx	lr

0040152e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401532:	604b      	str	r3, [r1, #4]

	return 0;
}
  401534:	2000      	movs	r0, #0
  401536:	4770      	bx	lr

00401538 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401538:	2001      	movs	r0, #1
  40153a:	4770      	bx	lr

0040153c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40153c:	2000      	movs	r0, #0
  40153e:	4770      	bx	lr

00401540 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401540:	f100 0308 	add.w	r3, r0, #8
  401544:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401546:	f04f 32ff 	mov.w	r2, #4294967295
  40154a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40154c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40154e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401550:	2300      	movs	r3, #0
  401552:	6003      	str	r3, [r0, #0]
  401554:	4770      	bx	lr

00401556 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401556:	2300      	movs	r3, #0
  401558:	6103      	str	r3, [r0, #16]
  40155a:	4770      	bx	lr

0040155c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40155c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40155e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401560:	689a      	ldr	r2, [r3, #8]
  401562:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401564:	689a      	ldr	r2, [r3, #8]
  401566:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401568:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40156a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40156c:	6803      	ldr	r3, [r0, #0]
  40156e:	3301      	adds	r3, #1
  401570:	6003      	str	r3, [r0, #0]
  401572:	4770      	bx	lr

00401574 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401574:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401576:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401578:	f1b5 3fff 	cmp.w	r5, #4294967295
  40157c:	d002      	beq.n	401584 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40157e:	f100 0208 	add.w	r2, r0, #8
  401582:	e002      	b.n	40158a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401584:	6902      	ldr	r2, [r0, #16]
  401586:	e004      	b.n	401592 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401588:	461a      	mov	r2, r3
  40158a:	6853      	ldr	r3, [r2, #4]
  40158c:	681c      	ldr	r4, [r3, #0]
  40158e:	42a5      	cmp	r5, r4
  401590:	d2fa      	bcs.n	401588 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401592:	6853      	ldr	r3, [r2, #4]
  401594:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401596:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401598:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40159a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40159c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40159e:	6803      	ldr	r3, [r0, #0]
  4015a0:	3301      	adds	r3, #1
  4015a2:	6003      	str	r3, [r0, #0]
}
  4015a4:	bc30      	pop	{r4, r5}
  4015a6:	4770      	bx	lr

004015a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4015a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4015aa:	6842      	ldr	r2, [r0, #4]
  4015ac:	6881      	ldr	r1, [r0, #8]
  4015ae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4015b0:	6882      	ldr	r2, [r0, #8]
  4015b2:	6841      	ldr	r1, [r0, #4]
  4015b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4015b6:	685a      	ldr	r2, [r3, #4]
  4015b8:	4290      	cmp	r0, r2
  4015ba:	d005      	beq.n	4015c8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4015bc:	2200      	movs	r2, #0
  4015be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4015c0:	6818      	ldr	r0, [r3, #0]
  4015c2:	3801      	subs	r0, #1
  4015c4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4015c6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4015c8:	6882      	ldr	r2, [r0, #8]
  4015ca:	605a      	str	r2, [r3, #4]
  4015cc:	e7f6      	b.n	4015bc <uxListRemove+0x14>
	...

004015d0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4015d0:	4b0d      	ldr	r3, [pc, #52]	; (401608 <prvTaskExitError+0x38>)
  4015d2:	681b      	ldr	r3, [r3, #0]
  4015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015d8:	d00a      	beq.n	4015f0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4015da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015de:	b672      	cpsid	i
  4015e0:	f383 8811 	msr	BASEPRI, r3
  4015e4:	f3bf 8f6f 	isb	sy
  4015e8:	f3bf 8f4f 	dsb	sy
  4015ec:	b662      	cpsie	i
  4015ee:	e7fe      	b.n	4015ee <prvTaskExitError+0x1e>
  4015f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015f4:	b672      	cpsid	i
  4015f6:	f383 8811 	msr	BASEPRI, r3
  4015fa:	f3bf 8f6f 	isb	sy
  4015fe:	f3bf 8f4f 	dsb	sy
  401602:	b662      	cpsie	i
  401604:	e7fe      	b.n	401604 <prvTaskExitError+0x34>
  401606:	bf00      	nop
  401608:	20400020 	.word	0x20400020

0040160c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40160c:	4806      	ldr	r0, [pc, #24]	; (401628 <prvPortStartFirstTask+0x1c>)
  40160e:	6800      	ldr	r0, [r0, #0]
  401610:	6800      	ldr	r0, [r0, #0]
  401612:	f380 8808 	msr	MSP, r0
  401616:	b662      	cpsie	i
  401618:	b661      	cpsie	f
  40161a:	f3bf 8f4f 	dsb	sy
  40161e:	f3bf 8f6f 	isb	sy
  401622:	df00      	svc	0
  401624:	bf00      	nop
  401626:	0000      	.short	0x0000
  401628:	e000ed08 	.word	0xe000ed08

0040162c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40162c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40163c <vPortEnableVFP+0x10>
  401630:	6801      	ldr	r1, [r0, #0]
  401632:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401636:	6001      	str	r1, [r0, #0]
  401638:	4770      	bx	lr
  40163a:	0000      	.short	0x0000
  40163c:	e000ed88 	.word	0xe000ed88

00401640 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401644:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401648:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40164c:	4b05      	ldr	r3, [pc, #20]	; (401664 <pxPortInitialiseStack+0x24>)
  40164e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401652:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401656:	f06f 0302 	mvn.w	r3, #2
  40165a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40165e:	3844      	subs	r0, #68	; 0x44
  401660:	4770      	bx	lr
  401662:	bf00      	nop
  401664:	004015d1 	.word	0x004015d1

00401668 <SVC_Handler>:
	__asm volatile (
  401668:	4b06      	ldr	r3, [pc, #24]	; (401684 <pxCurrentTCBConst2>)
  40166a:	6819      	ldr	r1, [r3, #0]
  40166c:	6808      	ldr	r0, [r1, #0]
  40166e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401672:	f380 8809 	msr	PSP, r0
  401676:	f3bf 8f6f 	isb	sy
  40167a:	f04f 0000 	mov.w	r0, #0
  40167e:	f380 8811 	msr	BASEPRI, r0
  401682:	4770      	bx	lr

00401684 <pxCurrentTCBConst2>:
  401684:	20400cd0 	.word	0x20400cd0
  401688:	4770      	bx	lr
  40168a:	bf00      	nop

0040168c <vPortEnterCritical>:
  40168c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401690:	b672      	cpsid	i
  401692:	f383 8811 	msr	BASEPRI, r3
  401696:	f3bf 8f6f 	isb	sy
  40169a:	f3bf 8f4f 	dsb	sy
  40169e:	b662      	cpsie	i
	uxCriticalNesting++;
  4016a0:	4a0b      	ldr	r2, [pc, #44]	; (4016d0 <vPortEnterCritical+0x44>)
  4016a2:	6813      	ldr	r3, [r2, #0]
  4016a4:	3301      	adds	r3, #1
  4016a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4016a8:	2b01      	cmp	r3, #1
  4016aa:	d10f      	bne.n	4016cc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4016ac:	4b09      	ldr	r3, [pc, #36]	; (4016d4 <vPortEnterCritical+0x48>)
  4016ae:	681b      	ldr	r3, [r3, #0]
  4016b0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4016b4:	d00a      	beq.n	4016cc <vPortEnterCritical+0x40>
  4016b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ba:	b672      	cpsid	i
  4016bc:	f383 8811 	msr	BASEPRI, r3
  4016c0:	f3bf 8f6f 	isb	sy
  4016c4:	f3bf 8f4f 	dsb	sy
  4016c8:	b662      	cpsie	i
  4016ca:	e7fe      	b.n	4016ca <vPortEnterCritical+0x3e>
  4016cc:	4770      	bx	lr
  4016ce:	bf00      	nop
  4016d0:	20400020 	.word	0x20400020
  4016d4:	e000ed04 	.word	0xe000ed04

004016d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4016d8:	4b0a      	ldr	r3, [pc, #40]	; (401704 <vPortExitCritical+0x2c>)
  4016da:	681b      	ldr	r3, [r3, #0]
  4016dc:	b953      	cbnz	r3, 4016f4 <vPortExitCritical+0x1c>
  4016de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016e2:	b672      	cpsid	i
  4016e4:	f383 8811 	msr	BASEPRI, r3
  4016e8:	f3bf 8f6f 	isb	sy
  4016ec:	f3bf 8f4f 	dsb	sy
  4016f0:	b662      	cpsie	i
  4016f2:	e7fe      	b.n	4016f2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4016f4:	3b01      	subs	r3, #1
  4016f6:	4a03      	ldr	r2, [pc, #12]	; (401704 <vPortExitCritical+0x2c>)
  4016f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4016fa:	b90b      	cbnz	r3, 401700 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4016fc:	f383 8811 	msr	BASEPRI, r3
  401700:	4770      	bx	lr
  401702:	bf00      	nop
  401704:	20400020 	.word	0x20400020

00401708 <PendSV_Handler>:
	__asm volatile
  401708:	f3ef 8009 	mrs	r0, PSP
  40170c:	f3bf 8f6f 	isb	sy
  401710:	4b15      	ldr	r3, [pc, #84]	; (401768 <pxCurrentTCBConst>)
  401712:	681a      	ldr	r2, [r3, #0]
  401714:	f01e 0f10 	tst.w	lr, #16
  401718:	bf08      	it	eq
  40171a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40171e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401722:	6010      	str	r0, [r2, #0]
  401724:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401728:	f04f 0080 	mov.w	r0, #128	; 0x80
  40172c:	b672      	cpsid	i
  40172e:	f380 8811 	msr	BASEPRI, r0
  401732:	f3bf 8f4f 	dsb	sy
  401736:	f3bf 8f6f 	isb	sy
  40173a:	b662      	cpsie	i
  40173c:	f001 f890 	bl	402860 <vTaskSwitchContext>
  401740:	f04f 0000 	mov.w	r0, #0
  401744:	f380 8811 	msr	BASEPRI, r0
  401748:	bc08      	pop	{r3}
  40174a:	6819      	ldr	r1, [r3, #0]
  40174c:	6808      	ldr	r0, [r1, #0]
  40174e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401752:	f01e 0f10 	tst.w	lr, #16
  401756:	bf08      	it	eq
  401758:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40175c:	f380 8809 	msr	PSP, r0
  401760:	f3bf 8f6f 	isb	sy
  401764:	4770      	bx	lr
  401766:	bf00      	nop

00401768 <pxCurrentTCBConst>:
  401768:	20400cd0 	.word	0x20400cd0
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop

00401770 <SysTick_Handler>:
{
  401770:	b508      	push	{r3, lr}
	__asm volatile
  401772:	f3ef 8311 	mrs	r3, BASEPRI
  401776:	f04f 0280 	mov.w	r2, #128	; 0x80
  40177a:	b672      	cpsid	i
  40177c:	f382 8811 	msr	BASEPRI, r2
  401780:	f3bf 8f6f 	isb	sy
  401784:	f3bf 8f4f 	dsb	sy
  401788:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40178a:	4b05      	ldr	r3, [pc, #20]	; (4017a0 <SysTick_Handler+0x30>)
  40178c:	4798      	blx	r3
  40178e:	b118      	cbz	r0, 401798 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401794:	4b03      	ldr	r3, [pc, #12]	; (4017a4 <SysTick_Handler+0x34>)
  401796:	601a      	str	r2, [r3, #0]
	__asm volatile
  401798:	2300      	movs	r3, #0
  40179a:	f383 8811 	msr	BASEPRI, r3
  40179e:	bd08      	pop	{r3, pc}
  4017a0:	004024cd 	.word	0x004024cd
  4017a4:	e000ed04 	.word	0xe000ed04

004017a8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4017a8:	4a03      	ldr	r2, [pc, #12]	; (4017b8 <vPortSetupTimerInterrupt+0x10>)
  4017aa:	4b04      	ldr	r3, [pc, #16]	; (4017bc <vPortSetupTimerInterrupt+0x14>)
  4017ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4017ae:	2207      	movs	r2, #7
  4017b0:	3b04      	subs	r3, #4
  4017b2:	601a      	str	r2, [r3, #0]
  4017b4:	4770      	bx	lr
  4017b6:	bf00      	nop
  4017b8:	000927bf 	.word	0x000927bf
  4017bc:	e000e014 	.word	0xe000e014

004017c0 <xPortStartScheduler>:
{
  4017c0:	b500      	push	{lr}
  4017c2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4017c4:	4b25      	ldr	r3, [pc, #148]	; (40185c <xPortStartScheduler+0x9c>)
  4017c6:	781a      	ldrb	r2, [r3, #0]
  4017c8:	b2d2      	uxtb	r2, r2
  4017ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4017cc:	22ff      	movs	r2, #255	; 0xff
  4017ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4017d0:	781b      	ldrb	r3, [r3, #0]
  4017d2:	b2db      	uxtb	r3, r3
  4017d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4017d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4017dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4017e0:	4a1f      	ldr	r2, [pc, #124]	; (401860 <xPortStartScheduler+0xa0>)
  4017e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4017e4:	2207      	movs	r2, #7
  4017e6:	4b1f      	ldr	r3, [pc, #124]	; (401864 <xPortStartScheduler+0xa4>)
  4017e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4017ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4017ee:	f013 0f80 	tst.w	r3, #128	; 0x80
  4017f2:	d010      	beq.n	401816 <xPortStartScheduler+0x56>
  4017f4:	2206      	movs	r2, #6
  4017f6:	e000      	b.n	4017fa <xPortStartScheduler+0x3a>
  4017f8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4017fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4017fe:	005b      	lsls	r3, r3, #1
  401800:	b2db      	uxtb	r3, r3
  401802:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401806:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40180a:	1e51      	subs	r1, r2, #1
  40180c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401810:	d1f2      	bne.n	4017f8 <xPortStartScheduler+0x38>
  401812:	4b14      	ldr	r3, [pc, #80]	; (401864 <xPortStartScheduler+0xa4>)
  401814:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401816:	4a13      	ldr	r2, [pc, #76]	; (401864 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401818:	6813      	ldr	r3, [r2, #0]
  40181a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40181c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401820:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401822:	9b01      	ldr	r3, [sp, #4]
  401824:	b2db      	uxtb	r3, r3
  401826:	4a0d      	ldr	r2, [pc, #52]	; (40185c <xPortStartScheduler+0x9c>)
  401828:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40182a:	4b0f      	ldr	r3, [pc, #60]	; (401868 <xPortStartScheduler+0xa8>)
  40182c:	681a      	ldr	r2, [r3, #0]
  40182e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401832:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401834:	681a      	ldr	r2, [r3, #0]
  401836:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40183a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40183c:	4b0b      	ldr	r3, [pc, #44]	; (40186c <xPortStartScheduler+0xac>)
  40183e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401840:	2200      	movs	r2, #0
  401842:	4b0b      	ldr	r3, [pc, #44]	; (401870 <xPortStartScheduler+0xb0>)
  401844:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401846:	4b0b      	ldr	r3, [pc, #44]	; (401874 <xPortStartScheduler+0xb4>)
  401848:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40184a:	4a0b      	ldr	r2, [pc, #44]	; (401878 <xPortStartScheduler+0xb8>)
  40184c:	6813      	ldr	r3, [r2, #0]
  40184e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401852:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401854:	4b09      	ldr	r3, [pc, #36]	; (40187c <xPortStartScheduler+0xbc>)
  401856:	4798      	blx	r3
	prvTaskExitError();
  401858:	4b09      	ldr	r3, [pc, #36]	; (401880 <xPortStartScheduler+0xc0>)
  40185a:	4798      	blx	r3
  40185c:	e000e400 	.word	0xe000e400
  401860:	20400cc8 	.word	0x20400cc8
  401864:	20400ccc 	.word	0x20400ccc
  401868:	e000ed20 	.word	0xe000ed20
  40186c:	004017a9 	.word	0x004017a9
  401870:	20400020 	.word	0x20400020
  401874:	0040162d 	.word	0x0040162d
  401878:	e000ef34 	.word	0xe000ef34
  40187c:	0040160d 	.word	0x0040160d
  401880:	004015d1 	.word	0x004015d1

00401884 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401884:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401888:	2b0f      	cmp	r3, #15
  40188a:	d911      	bls.n	4018b0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40188c:	4a12      	ldr	r2, [pc, #72]	; (4018d8 <vPortValidateInterruptPriority+0x54>)
  40188e:	5c9b      	ldrb	r3, [r3, r2]
  401890:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401892:	4a12      	ldr	r2, [pc, #72]	; (4018dc <vPortValidateInterruptPriority+0x58>)
  401894:	7812      	ldrb	r2, [r2, #0]
  401896:	429a      	cmp	r2, r3
  401898:	d90a      	bls.n	4018b0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40189a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40189e:	b672      	cpsid	i
  4018a0:	f383 8811 	msr	BASEPRI, r3
  4018a4:	f3bf 8f6f 	isb	sy
  4018a8:	f3bf 8f4f 	dsb	sy
  4018ac:	b662      	cpsie	i
  4018ae:	e7fe      	b.n	4018ae <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4018b0:	4b0b      	ldr	r3, [pc, #44]	; (4018e0 <vPortValidateInterruptPriority+0x5c>)
  4018b2:	681b      	ldr	r3, [r3, #0]
  4018b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4018b8:	4a0a      	ldr	r2, [pc, #40]	; (4018e4 <vPortValidateInterruptPriority+0x60>)
  4018ba:	6812      	ldr	r2, [r2, #0]
  4018bc:	4293      	cmp	r3, r2
  4018be:	d90a      	bls.n	4018d6 <vPortValidateInterruptPriority+0x52>
  4018c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018c4:	b672      	cpsid	i
  4018c6:	f383 8811 	msr	BASEPRI, r3
  4018ca:	f3bf 8f6f 	isb	sy
  4018ce:	f3bf 8f4f 	dsb	sy
  4018d2:	b662      	cpsie	i
  4018d4:	e7fe      	b.n	4018d4 <vPortValidateInterruptPriority+0x50>
  4018d6:	4770      	bx	lr
  4018d8:	e000e3f0 	.word	0xe000e3f0
  4018dc:	20400cc8 	.word	0x20400cc8
  4018e0:	e000ed0c 	.word	0xe000ed0c
  4018e4:	20400ccc 	.word	0x20400ccc

004018e8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4018e8:	b510      	push	{r4, lr}
  4018ea:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4018ec:	4b06      	ldr	r3, [pc, #24]	; (401908 <pvPortMalloc+0x20>)
  4018ee:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4018f0:	4620      	mov	r0, r4
  4018f2:	4b06      	ldr	r3, [pc, #24]	; (40190c <pvPortMalloc+0x24>)
  4018f4:	4798      	blx	r3
  4018f6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4018f8:	4b05      	ldr	r3, [pc, #20]	; (401910 <pvPortMalloc+0x28>)
  4018fa:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4018fc:	b10c      	cbz	r4, 401902 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4018fe:	4620      	mov	r0, r4
  401900:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401902:	4b04      	ldr	r3, [pc, #16]	; (401914 <pvPortMalloc+0x2c>)
  401904:	4798      	blx	r3
	return pvReturn;
  401906:	e7fa      	b.n	4018fe <pvPortMalloc+0x16>
  401908:	004024b1 	.word	0x004024b1
  40190c:	0040447d 	.word	0x0040447d
  401910:	00402619 	.word	0x00402619
  401914:	00403437 	.word	0x00403437

00401918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401918:	b148      	cbz	r0, 40192e <vPortFree+0x16>
{
  40191a:	b510      	push	{r4, lr}
  40191c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40191e:	4b04      	ldr	r3, [pc, #16]	; (401930 <vPortFree+0x18>)
  401920:	4798      	blx	r3
		{
			free( pv );
  401922:	4620      	mov	r0, r4
  401924:	4b03      	ldr	r3, [pc, #12]	; (401934 <vPortFree+0x1c>)
  401926:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401928:	4b03      	ldr	r3, [pc, #12]	; (401938 <vPortFree+0x20>)
  40192a:	4798      	blx	r3
  40192c:	bd10      	pop	{r4, pc}
  40192e:	4770      	bx	lr
  401930:	004024b1 	.word	0x004024b1
  401934:	0040448d 	.word	0x0040448d
  401938:	00402619 	.word	0x00402619

0040193c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40193c:	b538      	push	{r3, r4, r5, lr}
  40193e:	4604      	mov	r4, r0
  401940:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401942:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401944:	b95a      	cbnz	r2, 40195e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401946:	6803      	ldr	r3, [r0, #0]
  401948:	2b00      	cmp	r3, #0
  40194a:	d12e      	bne.n	4019aa <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40194c:	6840      	ldr	r0, [r0, #4]
  40194e:	4b1b      	ldr	r3, [pc, #108]	; (4019bc <prvCopyDataToQueue+0x80>)
  401950:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401952:	2300      	movs	r3, #0
  401954:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401958:	3301      	adds	r3, #1
  40195a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40195c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40195e:	b96d      	cbnz	r5, 40197c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401960:	6880      	ldr	r0, [r0, #8]
  401962:	4b17      	ldr	r3, [pc, #92]	; (4019c0 <prvCopyDataToQueue+0x84>)
  401964:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401966:	68a3      	ldr	r3, [r4, #8]
  401968:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40196a:	4413      	add	r3, r2
  40196c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40196e:	6862      	ldr	r2, [r4, #4]
  401970:	4293      	cmp	r3, r2
  401972:	d31c      	bcc.n	4019ae <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401974:	6823      	ldr	r3, [r4, #0]
  401976:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401978:	2000      	movs	r0, #0
  40197a:	e7ec      	b.n	401956 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40197c:	68c0      	ldr	r0, [r0, #12]
  40197e:	4b10      	ldr	r3, [pc, #64]	; (4019c0 <prvCopyDataToQueue+0x84>)
  401980:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401982:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401984:	425b      	negs	r3, r3
  401986:	68e2      	ldr	r2, [r4, #12]
  401988:	441a      	add	r2, r3
  40198a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40198c:	6821      	ldr	r1, [r4, #0]
  40198e:	428a      	cmp	r2, r1
  401990:	d202      	bcs.n	401998 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401992:	6862      	ldr	r2, [r4, #4]
  401994:	4413      	add	r3, r2
  401996:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401998:	2d02      	cmp	r5, #2
  40199a:	d10a      	bne.n	4019b2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40199c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40199e:	b153      	cbz	r3, 4019b6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4019a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4019a2:	3b01      	subs	r3, #1
  4019a4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4019a6:	2000      	movs	r0, #0
  4019a8:	e7d5      	b.n	401956 <prvCopyDataToQueue+0x1a>
  4019aa:	2000      	movs	r0, #0
  4019ac:	e7d3      	b.n	401956 <prvCopyDataToQueue+0x1a>
  4019ae:	2000      	movs	r0, #0
  4019b0:	e7d1      	b.n	401956 <prvCopyDataToQueue+0x1a>
  4019b2:	2000      	movs	r0, #0
  4019b4:	e7cf      	b.n	401956 <prvCopyDataToQueue+0x1a>
  4019b6:	2000      	movs	r0, #0
  4019b8:	e7cd      	b.n	401956 <prvCopyDataToQueue+0x1a>
  4019ba:	bf00      	nop
  4019bc:	00402c61 	.word	0x00402c61
  4019c0:	004049fd 	.word	0x004049fd

004019c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4019c4:	b530      	push	{r4, r5, lr}
  4019c6:	b083      	sub	sp, #12
  4019c8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4019ca:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4019cc:	b174      	cbz	r4, 4019ec <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4019ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4019d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019d2:	429a      	cmp	r2, r3
  4019d4:	d315      	bcc.n	401a02 <prvNotifyQueueSetContainer+0x3e>
  4019d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019da:	b672      	cpsid	i
  4019dc:	f383 8811 	msr	BASEPRI, r3
  4019e0:	f3bf 8f6f 	isb	sy
  4019e4:	f3bf 8f4f 	dsb	sy
  4019e8:	b662      	cpsie	i
  4019ea:	e7fe      	b.n	4019ea <prvNotifyQueueSetContainer+0x26>
  4019ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019f0:	b672      	cpsid	i
  4019f2:	f383 8811 	msr	BASEPRI, r3
  4019f6:	f3bf 8f6f 	isb	sy
  4019fa:	f3bf 8f4f 	dsb	sy
  4019fe:	b662      	cpsie	i
  401a00:	e7fe      	b.n	401a00 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401a02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a04:	4293      	cmp	r3, r2
  401a06:	d803      	bhi.n	401a10 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401a08:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401a0a:	4628      	mov	r0, r5
  401a0c:	b003      	add	sp, #12
  401a0e:	bd30      	pop	{r4, r5, pc}
  401a10:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401a12:	a901      	add	r1, sp, #4
  401a14:	4620      	mov	r0, r4
  401a16:	4b0b      	ldr	r3, [pc, #44]	; (401a44 <prvNotifyQueueSetContainer+0x80>)
  401a18:	4798      	blx	r3
  401a1a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401a1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a22:	d10a      	bne.n	401a3a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a26:	2b00      	cmp	r3, #0
  401a28:	d0ef      	beq.n	401a0a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401a2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a2e:	4b06      	ldr	r3, [pc, #24]	; (401a48 <prvNotifyQueueSetContainer+0x84>)
  401a30:	4798      	blx	r3
  401a32:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401a34:	bf18      	it	ne
  401a36:	2501      	movne	r5, #1
  401a38:	e7e7      	b.n	401a0a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401a3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a3c:	3301      	adds	r3, #1
  401a3e:	64a3      	str	r3, [r4, #72]	; 0x48
  401a40:	e7e3      	b.n	401a0a <prvNotifyQueueSetContainer+0x46>
  401a42:	bf00      	nop
  401a44:	0040193d 	.word	0x0040193d
  401a48:	00402a35 	.word	0x00402a35

00401a4c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401a4c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401a4e:	b172      	cbz	r2, 401a6e <prvCopyDataFromQueue+0x22>
{
  401a50:	b510      	push	{r4, lr}
  401a52:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401a54:	68c4      	ldr	r4, [r0, #12]
  401a56:	4414      	add	r4, r2
  401a58:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401a5a:	6840      	ldr	r0, [r0, #4]
  401a5c:	4284      	cmp	r4, r0
  401a5e:	d301      	bcc.n	401a64 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401a60:	6818      	ldr	r0, [r3, #0]
  401a62:	60d8      	str	r0, [r3, #12]
  401a64:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401a66:	68d9      	ldr	r1, [r3, #12]
  401a68:	4b01      	ldr	r3, [pc, #4]	; (401a70 <prvCopyDataFromQueue+0x24>)
  401a6a:	4798      	blx	r3
  401a6c:	bd10      	pop	{r4, pc}
  401a6e:	4770      	bx	lr
  401a70:	004049fd 	.word	0x004049fd

00401a74 <prvUnlockQueue>:
{
  401a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a76:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401a78:	4b22      	ldr	r3, [pc, #136]	; (401b04 <prvUnlockQueue+0x90>)
  401a7a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401a7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a7e:	2b00      	cmp	r3, #0
  401a80:	dd1b      	ble.n	401aba <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401a82:	4d21      	ldr	r5, [pc, #132]	; (401b08 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401a84:	4f21      	ldr	r7, [pc, #132]	; (401b0c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a86:	4e22      	ldr	r6, [pc, #136]	; (401b10 <prvUnlockQueue+0x9c>)
  401a88:	e00b      	b.n	401aa2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a8c:	b1ab      	cbz	r3, 401aba <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a92:	47b0      	blx	r6
  401a94:	b978      	cbnz	r0, 401ab6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401a96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a98:	3b01      	subs	r3, #1
  401a9a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401a9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a9e:	2b00      	cmp	r3, #0
  401aa0:	dd0b      	ble.n	401aba <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401aa4:	2b00      	cmp	r3, #0
  401aa6:	d0f0      	beq.n	401a8a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401aa8:	2100      	movs	r1, #0
  401aaa:	4620      	mov	r0, r4
  401aac:	47a8      	blx	r5
  401aae:	2801      	cmp	r0, #1
  401ab0:	d1f1      	bne.n	401a96 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401ab2:	47b8      	blx	r7
  401ab4:	e7ef      	b.n	401a96 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401ab6:	47b8      	blx	r7
  401ab8:	e7ed      	b.n	401a96 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401aba:	f04f 33ff 	mov.w	r3, #4294967295
  401abe:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401ac0:	4b14      	ldr	r3, [pc, #80]	; (401b14 <prvUnlockQueue+0xa0>)
  401ac2:	4798      	blx	r3
	taskENTER_CRITICAL();
  401ac4:	4b0f      	ldr	r3, [pc, #60]	; (401b04 <prvUnlockQueue+0x90>)
  401ac6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401ac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401aca:	2b00      	cmp	r3, #0
  401acc:	dd14      	ble.n	401af8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ace:	6923      	ldr	r3, [r4, #16]
  401ad0:	b193      	cbz	r3, 401af8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401ad2:	f104 0610 	add.w	r6, r4, #16
  401ad6:	4d0e      	ldr	r5, [pc, #56]	; (401b10 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401ad8:	4f0c      	ldr	r7, [pc, #48]	; (401b0c <prvUnlockQueue+0x98>)
  401ada:	e007      	b.n	401aec <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401adc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ade:	3b01      	subs	r3, #1
  401ae0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401ae2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ae4:	2b00      	cmp	r3, #0
  401ae6:	dd07      	ble.n	401af8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ae8:	6923      	ldr	r3, [r4, #16]
  401aea:	b12b      	cbz	r3, 401af8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401aec:	4630      	mov	r0, r6
  401aee:	47a8      	blx	r5
  401af0:	2800      	cmp	r0, #0
  401af2:	d0f3      	beq.n	401adc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401af4:	47b8      	blx	r7
  401af6:	e7f1      	b.n	401adc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401af8:	f04f 33ff 	mov.w	r3, #4294967295
  401afc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401afe:	4b05      	ldr	r3, [pc, #20]	; (401b14 <prvUnlockQueue+0xa0>)
  401b00:	4798      	blx	r3
  401b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b04:	0040168d 	.word	0x0040168d
  401b08:	004019c5 	.word	0x004019c5
  401b0c:	00402b91 	.word	0x00402b91
  401b10:	00402a35 	.word	0x00402a35
  401b14:	004016d9 	.word	0x004016d9

00401b18 <xQueueGenericReset>:
{
  401b18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401b1a:	b308      	cbz	r0, 401b60 <xQueueGenericReset+0x48>
  401b1c:	4604      	mov	r4, r0
  401b1e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401b20:	4b1d      	ldr	r3, [pc, #116]	; (401b98 <xQueueGenericReset+0x80>)
  401b22:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401b24:	6822      	ldr	r2, [r4, #0]
  401b26:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401b28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b2a:	fb03 f301 	mul.w	r3, r3, r1
  401b2e:	18d0      	adds	r0, r2, r3
  401b30:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401b32:	2000      	movs	r0, #0
  401b34:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401b36:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401b38:	1a5b      	subs	r3, r3, r1
  401b3a:	4413      	add	r3, r2
  401b3c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401b3e:	f04f 33ff 	mov.w	r3, #4294967295
  401b42:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401b44:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401b46:	b9fd      	cbnz	r5, 401b88 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401b48:	6923      	ldr	r3, [r4, #16]
  401b4a:	b12b      	cbz	r3, 401b58 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401b4c:	f104 0010 	add.w	r0, r4, #16
  401b50:	4b12      	ldr	r3, [pc, #72]	; (401b9c <xQueueGenericReset+0x84>)
  401b52:	4798      	blx	r3
  401b54:	2801      	cmp	r0, #1
  401b56:	d00e      	beq.n	401b76 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401b58:	4b11      	ldr	r3, [pc, #68]	; (401ba0 <xQueueGenericReset+0x88>)
  401b5a:	4798      	blx	r3
}
  401b5c:	2001      	movs	r0, #1
  401b5e:	bd38      	pop	{r3, r4, r5, pc}
  401b60:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b64:	b672      	cpsid	i
  401b66:	f383 8811 	msr	BASEPRI, r3
  401b6a:	f3bf 8f6f 	isb	sy
  401b6e:	f3bf 8f4f 	dsb	sy
  401b72:	b662      	cpsie	i
  401b74:	e7fe      	b.n	401b74 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b7a:	4b0a      	ldr	r3, [pc, #40]	; (401ba4 <xQueueGenericReset+0x8c>)
  401b7c:	601a      	str	r2, [r3, #0]
  401b7e:	f3bf 8f4f 	dsb	sy
  401b82:	f3bf 8f6f 	isb	sy
  401b86:	e7e7      	b.n	401b58 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401b88:	f104 0010 	add.w	r0, r4, #16
  401b8c:	4d06      	ldr	r5, [pc, #24]	; (401ba8 <xQueueGenericReset+0x90>)
  401b8e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401b90:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b94:	47a8      	blx	r5
  401b96:	e7df      	b.n	401b58 <xQueueGenericReset+0x40>
  401b98:	0040168d 	.word	0x0040168d
  401b9c:	00402a35 	.word	0x00402a35
  401ba0:	004016d9 	.word	0x004016d9
  401ba4:	e000ed04 	.word	0xe000ed04
  401ba8:	00401541 	.word	0x00401541

00401bac <xQueueGenericCreate>:
{
  401bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401bae:	b950      	cbnz	r0, 401bc6 <xQueueGenericCreate+0x1a>
  401bb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bb4:	b672      	cpsid	i
  401bb6:	f383 8811 	msr	BASEPRI, r3
  401bba:	f3bf 8f6f 	isb	sy
  401bbe:	f3bf 8f4f 	dsb	sy
  401bc2:	b662      	cpsie	i
  401bc4:	e7fe      	b.n	401bc4 <xQueueGenericCreate+0x18>
  401bc6:	4606      	mov	r6, r0
  401bc8:	4617      	mov	r7, r2
  401bca:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401bcc:	b189      	cbz	r1, 401bf2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401bce:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401bd2:	3059      	adds	r0, #89	; 0x59
  401bd4:	4b12      	ldr	r3, [pc, #72]	; (401c20 <xQueueGenericCreate+0x74>)
  401bd6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401bd8:	4604      	mov	r4, r0
  401bda:	b9e8      	cbnz	r0, 401c18 <xQueueGenericCreate+0x6c>
  401bdc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401be0:	b672      	cpsid	i
  401be2:	f383 8811 	msr	BASEPRI, r3
  401be6:	f3bf 8f6f 	isb	sy
  401bea:	f3bf 8f4f 	dsb	sy
  401bee:	b662      	cpsie	i
  401bf0:	e7fe      	b.n	401bf0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401bf2:	2058      	movs	r0, #88	; 0x58
  401bf4:	4b0a      	ldr	r3, [pc, #40]	; (401c20 <xQueueGenericCreate+0x74>)
  401bf6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401bf8:	4604      	mov	r4, r0
  401bfa:	2800      	cmp	r0, #0
  401bfc:	d0ee      	beq.n	401bdc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401bfe:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401c00:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401c02:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401c04:	2101      	movs	r1, #1
  401c06:	4620      	mov	r0, r4
  401c08:	4b06      	ldr	r3, [pc, #24]	; (401c24 <xQueueGenericCreate+0x78>)
  401c0a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401c0c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401c10:	2300      	movs	r3, #0
  401c12:	6563      	str	r3, [r4, #84]	; 0x54
}
  401c14:	4620      	mov	r0, r4
  401c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401c18:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401c1c:	6003      	str	r3, [r0, #0]
  401c1e:	e7ef      	b.n	401c00 <xQueueGenericCreate+0x54>
  401c20:	004018e9 	.word	0x004018e9
  401c24:	00401b19 	.word	0x00401b19

00401c28 <xQueueGenericSend>:
{
  401c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c2c:	b085      	sub	sp, #20
  401c2e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401c30:	b1b8      	cbz	r0, 401c62 <xQueueGenericSend+0x3a>
  401c32:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401c34:	b301      	cbz	r1, 401c78 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401c36:	2b02      	cmp	r3, #2
  401c38:	d02c      	beq.n	401c94 <xQueueGenericSend+0x6c>
  401c3a:	461d      	mov	r5, r3
  401c3c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401c3e:	4b66      	ldr	r3, [pc, #408]	; (401dd8 <xQueueGenericSend+0x1b0>)
  401c40:	4798      	blx	r3
  401c42:	2800      	cmp	r0, #0
  401c44:	d134      	bne.n	401cb0 <xQueueGenericSend+0x88>
  401c46:	9b01      	ldr	r3, [sp, #4]
  401c48:	2b00      	cmp	r3, #0
  401c4a:	d038      	beq.n	401cbe <xQueueGenericSend+0x96>
  401c4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c50:	b672      	cpsid	i
  401c52:	f383 8811 	msr	BASEPRI, r3
  401c56:	f3bf 8f6f 	isb	sy
  401c5a:	f3bf 8f4f 	dsb	sy
  401c5e:	b662      	cpsie	i
  401c60:	e7fe      	b.n	401c60 <xQueueGenericSend+0x38>
  401c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c66:	b672      	cpsid	i
  401c68:	f383 8811 	msr	BASEPRI, r3
  401c6c:	f3bf 8f6f 	isb	sy
  401c70:	f3bf 8f4f 	dsb	sy
  401c74:	b662      	cpsie	i
  401c76:	e7fe      	b.n	401c76 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401c78:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c7a:	2a00      	cmp	r2, #0
  401c7c:	d0db      	beq.n	401c36 <xQueueGenericSend+0xe>
  401c7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c82:	b672      	cpsid	i
  401c84:	f383 8811 	msr	BASEPRI, r3
  401c88:	f3bf 8f6f 	isb	sy
  401c8c:	f3bf 8f4f 	dsb	sy
  401c90:	b662      	cpsie	i
  401c92:	e7fe      	b.n	401c92 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401c94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401c96:	2a01      	cmp	r2, #1
  401c98:	d0cf      	beq.n	401c3a <xQueueGenericSend+0x12>
  401c9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c9e:	b672      	cpsid	i
  401ca0:	f383 8811 	msr	BASEPRI, r3
  401ca4:	f3bf 8f6f 	isb	sy
  401ca8:	f3bf 8f4f 	dsb	sy
  401cac:	b662      	cpsie	i
  401cae:	e7fe      	b.n	401cae <xQueueGenericSend+0x86>
  401cb0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401cb2:	4e4a      	ldr	r6, [pc, #296]	; (401ddc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401cb4:	f8df a150 	ldr.w	sl, [pc, #336]	; 401e08 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401cb8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401de8 <xQueueGenericSend+0x1c0>
  401cbc:	e042      	b.n	401d44 <xQueueGenericSend+0x11c>
  401cbe:	2700      	movs	r7, #0
  401cc0:	e7f7      	b.n	401cb2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401cc2:	462a      	mov	r2, r5
  401cc4:	4641      	mov	r1, r8
  401cc6:	4620      	mov	r0, r4
  401cc8:	4b45      	ldr	r3, [pc, #276]	; (401de0 <xQueueGenericSend+0x1b8>)
  401cca:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401cce:	b19b      	cbz	r3, 401cf8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401cd0:	4629      	mov	r1, r5
  401cd2:	4620      	mov	r0, r4
  401cd4:	4b43      	ldr	r3, [pc, #268]	; (401de4 <xQueueGenericSend+0x1bc>)
  401cd6:	4798      	blx	r3
  401cd8:	2801      	cmp	r0, #1
  401cda:	d107      	bne.n	401cec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ce0:	4b41      	ldr	r3, [pc, #260]	; (401de8 <xQueueGenericSend+0x1c0>)
  401ce2:	601a      	str	r2, [r3, #0]
  401ce4:	f3bf 8f4f 	dsb	sy
  401ce8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401cec:	4b3f      	ldr	r3, [pc, #252]	; (401dec <xQueueGenericSend+0x1c4>)
  401cee:	4798      	blx	r3
				return pdPASS;
  401cf0:	2001      	movs	r0, #1
}
  401cf2:	b005      	add	sp, #20
  401cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cfa:	b173      	cbz	r3, 401d1a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401cfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d00:	4b3b      	ldr	r3, [pc, #236]	; (401df0 <xQueueGenericSend+0x1c8>)
  401d02:	4798      	blx	r3
  401d04:	2801      	cmp	r0, #1
  401d06:	d1f1      	bne.n	401cec <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d0c:	4b36      	ldr	r3, [pc, #216]	; (401de8 <xQueueGenericSend+0x1c0>)
  401d0e:	601a      	str	r2, [r3, #0]
  401d10:	f3bf 8f4f 	dsb	sy
  401d14:	f3bf 8f6f 	isb	sy
  401d18:	e7e8      	b.n	401cec <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401d1a:	2800      	cmp	r0, #0
  401d1c:	d0e6      	beq.n	401cec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d22:	4b31      	ldr	r3, [pc, #196]	; (401de8 <xQueueGenericSend+0x1c0>)
  401d24:	601a      	str	r2, [r3, #0]
  401d26:	f3bf 8f4f 	dsb	sy
  401d2a:	f3bf 8f6f 	isb	sy
  401d2e:	e7dd      	b.n	401cec <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401d30:	4b2e      	ldr	r3, [pc, #184]	; (401dec <xQueueGenericSend+0x1c4>)
  401d32:	4798      	blx	r3
					return errQUEUE_FULL;
  401d34:	2000      	movs	r0, #0
  401d36:	e7dc      	b.n	401cf2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401d38:	4620      	mov	r0, r4
  401d3a:	4b2e      	ldr	r3, [pc, #184]	; (401df4 <xQueueGenericSend+0x1cc>)
  401d3c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401d3e:	4b2e      	ldr	r3, [pc, #184]	; (401df8 <xQueueGenericSend+0x1d0>)
  401d40:	4798      	blx	r3
  401d42:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401d44:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401d46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d4a:	429a      	cmp	r2, r3
  401d4c:	d3b9      	bcc.n	401cc2 <xQueueGenericSend+0x9a>
  401d4e:	2d02      	cmp	r5, #2
  401d50:	d0b7      	beq.n	401cc2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401d52:	9b01      	ldr	r3, [sp, #4]
  401d54:	2b00      	cmp	r3, #0
  401d56:	d0eb      	beq.n	401d30 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401d58:	b90f      	cbnz	r7, 401d5e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401d5a:	a802      	add	r0, sp, #8
  401d5c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401d5e:	4b23      	ldr	r3, [pc, #140]	; (401dec <xQueueGenericSend+0x1c4>)
  401d60:	4798      	blx	r3
		vTaskSuspendAll();
  401d62:	4b26      	ldr	r3, [pc, #152]	; (401dfc <xQueueGenericSend+0x1d4>)
  401d64:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401d66:	47b0      	blx	r6
  401d68:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d6e:	d101      	bne.n	401d74 <xQueueGenericSend+0x14c>
  401d70:	2300      	movs	r3, #0
  401d72:	6463      	str	r3, [r4, #68]	; 0x44
  401d74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d76:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d7a:	d101      	bne.n	401d80 <xQueueGenericSend+0x158>
  401d7c:	2300      	movs	r3, #0
  401d7e:	64a3      	str	r3, [r4, #72]	; 0x48
  401d80:	4b1a      	ldr	r3, [pc, #104]	; (401dec <xQueueGenericSend+0x1c4>)
  401d82:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401d84:	a901      	add	r1, sp, #4
  401d86:	a802      	add	r0, sp, #8
  401d88:	4b1d      	ldr	r3, [pc, #116]	; (401e00 <xQueueGenericSend+0x1d8>)
  401d8a:	4798      	blx	r3
  401d8c:	b9e0      	cbnz	r0, 401dc8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401d8e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401d90:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401d94:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401d96:	4b15      	ldr	r3, [pc, #84]	; (401dec <xQueueGenericSend+0x1c4>)
  401d98:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401d9a:	45bb      	cmp	fp, r7
  401d9c:	d1cc      	bne.n	401d38 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401d9e:	9901      	ldr	r1, [sp, #4]
  401da0:	f104 0010 	add.w	r0, r4, #16
  401da4:	4b17      	ldr	r3, [pc, #92]	; (401e04 <xQueueGenericSend+0x1dc>)
  401da6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401da8:	4620      	mov	r0, r4
  401daa:	4b12      	ldr	r3, [pc, #72]	; (401df4 <xQueueGenericSend+0x1cc>)
  401dac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401dae:	4b12      	ldr	r3, [pc, #72]	; (401df8 <xQueueGenericSend+0x1d0>)
  401db0:	4798      	blx	r3
  401db2:	2800      	cmp	r0, #0
  401db4:	d1c5      	bne.n	401d42 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401dba:	f8c9 3000 	str.w	r3, [r9]
  401dbe:	f3bf 8f4f 	dsb	sy
  401dc2:	f3bf 8f6f 	isb	sy
  401dc6:	e7bc      	b.n	401d42 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401dc8:	4620      	mov	r0, r4
  401dca:	4b0a      	ldr	r3, [pc, #40]	; (401df4 <xQueueGenericSend+0x1cc>)
  401dcc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401dce:	4b0a      	ldr	r3, [pc, #40]	; (401df8 <xQueueGenericSend+0x1d0>)
  401dd0:	4798      	blx	r3
			return errQUEUE_FULL;
  401dd2:	2000      	movs	r0, #0
  401dd4:	e78d      	b.n	401cf2 <xQueueGenericSend+0xca>
  401dd6:	bf00      	nop
  401dd8:	00402b9d 	.word	0x00402b9d
  401ddc:	0040168d 	.word	0x0040168d
  401de0:	0040193d 	.word	0x0040193d
  401de4:	004019c5 	.word	0x004019c5
  401de8:	e000ed04 	.word	0xe000ed04
  401dec:	004016d9 	.word	0x004016d9
  401df0:	00402a35 	.word	0x00402a35
  401df4:	00401a75 	.word	0x00401a75
  401df8:	00402619 	.word	0x00402619
  401dfc:	004024b1 	.word	0x004024b1
  401e00:	00402afd 	.word	0x00402afd
  401e04:	00402931 	.word	0x00402931
  401e08:	00402acd 	.word	0x00402acd

00401e0c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401e0c:	2800      	cmp	r0, #0
  401e0e:	d036      	beq.n	401e7e <xQueueGenericSendFromISR+0x72>
{
  401e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e14:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e16:	2900      	cmp	r1, #0
  401e18:	d03c      	beq.n	401e94 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401e1a:	2b02      	cmp	r3, #2
  401e1c:	d048      	beq.n	401eb0 <xQueueGenericSendFromISR+0xa4>
  401e1e:	461e      	mov	r6, r3
  401e20:	4615      	mov	r5, r2
  401e22:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401e24:	4b35      	ldr	r3, [pc, #212]	; (401efc <xQueueGenericSendFromISR+0xf0>)
  401e26:	4798      	blx	r3
	__asm volatile
  401e28:	f3ef 8711 	mrs	r7, BASEPRI
  401e2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e30:	b672      	cpsid	i
  401e32:	f383 8811 	msr	BASEPRI, r3
  401e36:	f3bf 8f6f 	isb	sy
  401e3a:	f3bf 8f4f 	dsb	sy
  401e3e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401e40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e44:	429a      	cmp	r2, r3
  401e46:	d301      	bcc.n	401e4c <xQueueGenericSendFromISR+0x40>
  401e48:	2e02      	cmp	r6, #2
  401e4a:	d14f      	bne.n	401eec <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401e4c:	4632      	mov	r2, r6
  401e4e:	4641      	mov	r1, r8
  401e50:	4620      	mov	r0, r4
  401e52:	4b2b      	ldr	r3, [pc, #172]	; (401f00 <xQueueGenericSendFromISR+0xf4>)
  401e54:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e58:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e5c:	d141      	bne.n	401ee2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401e5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e60:	2b00      	cmp	r3, #0
  401e62:	d033      	beq.n	401ecc <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401e64:	4631      	mov	r1, r6
  401e66:	4620      	mov	r0, r4
  401e68:	4b26      	ldr	r3, [pc, #152]	; (401f04 <xQueueGenericSendFromISR+0xf8>)
  401e6a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401e6c:	2d00      	cmp	r5, #0
  401e6e:	d03f      	beq.n	401ef0 <xQueueGenericSendFromISR+0xe4>
  401e70:	2801      	cmp	r0, #1
  401e72:	d13d      	bne.n	401ef0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e74:	6028      	str	r0, [r5, #0]
	__asm volatile
  401e76:	f387 8811 	msr	BASEPRI, r7
}
  401e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e82:	b672      	cpsid	i
  401e84:	f383 8811 	msr	BASEPRI, r3
  401e88:	f3bf 8f6f 	isb	sy
  401e8c:	f3bf 8f4f 	dsb	sy
  401e90:	b662      	cpsie	i
  401e92:	e7fe      	b.n	401e92 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e94:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401e96:	2800      	cmp	r0, #0
  401e98:	d0bf      	beq.n	401e1a <xQueueGenericSendFromISR+0xe>
  401e9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e9e:	b672      	cpsid	i
  401ea0:	f383 8811 	msr	BASEPRI, r3
  401ea4:	f3bf 8f6f 	isb	sy
  401ea8:	f3bf 8f4f 	dsb	sy
  401eac:	b662      	cpsie	i
  401eae:	e7fe      	b.n	401eae <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401eb0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401eb2:	2801      	cmp	r0, #1
  401eb4:	d0b3      	beq.n	401e1e <xQueueGenericSendFromISR+0x12>
  401eb6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eba:	b672      	cpsid	i
  401ebc:	f383 8811 	msr	BASEPRI, r3
  401ec0:	f3bf 8f6f 	isb	sy
  401ec4:	f3bf 8f4f 	dsb	sy
  401ec8:	b662      	cpsie	i
  401eca:	e7fe      	b.n	401eca <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ece:	b18b      	cbz	r3, 401ef4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ed0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ed4:	4b0c      	ldr	r3, [pc, #48]	; (401f08 <xQueueGenericSendFromISR+0xfc>)
  401ed6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ed8:	b175      	cbz	r5, 401ef8 <xQueueGenericSendFromISR+0xec>
  401eda:	b168      	cbz	r0, 401ef8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401edc:	2001      	movs	r0, #1
  401ede:	6028      	str	r0, [r5, #0]
  401ee0:	e7c9      	b.n	401e76 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401ee2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ee4:	3301      	adds	r3, #1
  401ee6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401ee8:	2001      	movs	r0, #1
  401eea:	e7c4      	b.n	401e76 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401eec:	2000      	movs	r0, #0
  401eee:	e7c2      	b.n	401e76 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401ef0:	2001      	movs	r0, #1
  401ef2:	e7c0      	b.n	401e76 <xQueueGenericSendFromISR+0x6a>
  401ef4:	2001      	movs	r0, #1
  401ef6:	e7be      	b.n	401e76 <xQueueGenericSendFromISR+0x6a>
  401ef8:	2001      	movs	r0, #1
  401efa:	e7bc      	b.n	401e76 <xQueueGenericSendFromISR+0x6a>
  401efc:	00401885 	.word	0x00401885
  401f00:	0040193d 	.word	0x0040193d
  401f04:	004019c5 	.word	0x004019c5
  401f08:	00402a35 	.word	0x00402a35

00401f0c <xQueueGenericReceive>:
{
  401f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f10:	b084      	sub	sp, #16
  401f12:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401f14:	b198      	cbz	r0, 401f3e <xQueueGenericReceive+0x32>
  401f16:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f18:	b1e1      	cbz	r1, 401f54 <xQueueGenericReceive+0x48>
  401f1a:	4698      	mov	r8, r3
  401f1c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401f1e:	4b61      	ldr	r3, [pc, #388]	; (4020a4 <xQueueGenericReceive+0x198>)
  401f20:	4798      	blx	r3
  401f22:	bb28      	cbnz	r0, 401f70 <xQueueGenericReceive+0x64>
  401f24:	9b01      	ldr	r3, [sp, #4]
  401f26:	b353      	cbz	r3, 401f7e <xQueueGenericReceive+0x72>
  401f28:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f2c:	b672      	cpsid	i
  401f2e:	f383 8811 	msr	BASEPRI, r3
  401f32:	f3bf 8f6f 	isb	sy
  401f36:	f3bf 8f4f 	dsb	sy
  401f3a:	b662      	cpsie	i
  401f3c:	e7fe      	b.n	401f3c <xQueueGenericReceive+0x30>
  401f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f42:	b672      	cpsid	i
  401f44:	f383 8811 	msr	BASEPRI, r3
  401f48:	f3bf 8f6f 	isb	sy
  401f4c:	f3bf 8f4f 	dsb	sy
  401f50:	b662      	cpsie	i
  401f52:	e7fe      	b.n	401f52 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f54:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f56:	2a00      	cmp	r2, #0
  401f58:	d0df      	beq.n	401f1a <xQueueGenericReceive+0xe>
  401f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f5e:	b672      	cpsid	i
  401f60:	f383 8811 	msr	BASEPRI, r3
  401f64:	f3bf 8f6f 	isb	sy
  401f68:	f3bf 8f4f 	dsb	sy
  401f6c:	b662      	cpsie	i
  401f6e:	e7fe      	b.n	401f6e <xQueueGenericReceive+0x62>
  401f70:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401f72:	4d4d      	ldr	r5, [pc, #308]	; (4020a8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401f74:	f8df a160 	ldr.w	sl, [pc, #352]	; 4020d8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401f78:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4020b8 <xQueueGenericReceive+0x1ac>
  401f7c:	e04b      	b.n	402016 <xQueueGenericReceive+0x10a>
  401f7e:	2600      	movs	r6, #0
  401f80:	e7f7      	b.n	401f72 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401f82:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f84:	4639      	mov	r1, r7
  401f86:	4620      	mov	r0, r4
  401f88:	4b48      	ldr	r3, [pc, #288]	; (4020ac <xQueueGenericReceive+0x1a0>)
  401f8a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401f8c:	f1b8 0f00 	cmp.w	r8, #0
  401f90:	d11d      	bne.n	401fce <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401f92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f94:	3b01      	subs	r3, #1
  401f96:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f98:	6823      	ldr	r3, [r4, #0]
  401f9a:	b913      	cbnz	r3, 401fa2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401f9c:	4b44      	ldr	r3, [pc, #272]	; (4020b0 <xQueueGenericReceive+0x1a4>)
  401f9e:	4798      	blx	r3
  401fa0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401fa2:	6923      	ldr	r3, [r4, #16]
  401fa4:	b16b      	cbz	r3, 401fc2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401fa6:	f104 0010 	add.w	r0, r4, #16
  401faa:	4b42      	ldr	r3, [pc, #264]	; (4020b4 <xQueueGenericReceive+0x1a8>)
  401fac:	4798      	blx	r3
  401fae:	2801      	cmp	r0, #1
  401fb0:	d107      	bne.n	401fc2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fb6:	4b40      	ldr	r3, [pc, #256]	; (4020b8 <xQueueGenericReceive+0x1ac>)
  401fb8:	601a      	str	r2, [r3, #0]
  401fba:	f3bf 8f4f 	dsb	sy
  401fbe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401fc2:	4b3e      	ldr	r3, [pc, #248]	; (4020bc <xQueueGenericReceive+0x1b0>)
  401fc4:	4798      	blx	r3
				return pdPASS;
  401fc6:	2001      	movs	r0, #1
}
  401fc8:	b004      	add	sp, #16
  401fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401fce:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fd2:	2b00      	cmp	r3, #0
  401fd4:	d0f5      	beq.n	401fc2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401fd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fda:	4b36      	ldr	r3, [pc, #216]	; (4020b4 <xQueueGenericReceive+0x1a8>)
  401fdc:	4798      	blx	r3
  401fde:	2800      	cmp	r0, #0
  401fe0:	d0ef      	beq.n	401fc2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fe6:	4b34      	ldr	r3, [pc, #208]	; (4020b8 <xQueueGenericReceive+0x1ac>)
  401fe8:	601a      	str	r2, [r3, #0]
  401fea:	f3bf 8f4f 	dsb	sy
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	e7e6      	b.n	401fc2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401ff4:	4b31      	ldr	r3, [pc, #196]	; (4020bc <xQueueGenericReceive+0x1b0>)
  401ff6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401ff8:	2000      	movs	r0, #0
  401ffa:	e7e5      	b.n	401fc8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401ffc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401ffe:	6860      	ldr	r0, [r4, #4]
  402000:	4b2f      	ldr	r3, [pc, #188]	; (4020c0 <xQueueGenericReceive+0x1b4>)
  402002:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402004:	4b2d      	ldr	r3, [pc, #180]	; (4020bc <xQueueGenericReceive+0x1b0>)
  402006:	4798      	blx	r3
  402008:	e030      	b.n	40206c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40200a:	4620      	mov	r0, r4
  40200c:	4b2d      	ldr	r3, [pc, #180]	; (4020c4 <xQueueGenericReceive+0x1b8>)
  40200e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402010:	4b2d      	ldr	r3, [pc, #180]	; (4020c8 <xQueueGenericReceive+0x1bc>)
  402012:	4798      	blx	r3
  402014:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402016:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40201a:	2b00      	cmp	r3, #0
  40201c:	d1b1      	bne.n	401f82 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40201e:	9b01      	ldr	r3, [sp, #4]
  402020:	2b00      	cmp	r3, #0
  402022:	d0e7      	beq.n	401ff4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402024:	b90e      	cbnz	r6, 40202a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402026:	a802      	add	r0, sp, #8
  402028:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40202a:	4b24      	ldr	r3, [pc, #144]	; (4020bc <xQueueGenericReceive+0x1b0>)
  40202c:	4798      	blx	r3
		vTaskSuspendAll();
  40202e:	4b27      	ldr	r3, [pc, #156]	; (4020cc <xQueueGenericReceive+0x1c0>)
  402030:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402032:	47a8      	blx	r5
  402034:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402036:	f1b3 3fff 	cmp.w	r3, #4294967295
  40203a:	d101      	bne.n	402040 <xQueueGenericReceive+0x134>
  40203c:	2300      	movs	r3, #0
  40203e:	6463      	str	r3, [r4, #68]	; 0x44
  402040:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402042:	f1b3 3fff 	cmp.w	r3, #4294967295
  402046:	d101      	bne.n	40204c <xQueueGenericReceive+0x140>
  402048:	2300      	movs	r3, #0
  40204a:	64a3      	str	r3, [r4, #72]	; 0x48
  40204c:	4b1b      	ldr	r3, [pc, #108]	; (4020bc <xQueueGenericReceive+0x1b0>)
  40204e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402050:	a901      	add	r1, sp, #4
  402052:	a802      	add	r0, sp, #8
  402054:	4b1e      	ldr	r3, [pc, #120]	; (4020d0 <xQueueGenericReceive+0x1c4>)
  402056:	4798      	blx	r3
  402058:	b9e8      	cbnz	r0, 402096 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40205a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40205c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40205e:	4b17      	ldr	r3, [pc, #92]	; (4020bc <xQueueGenericReceive+0x1b0>)
  402060:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402062:	2e00      	cmp	r6, #0
  402064:	d1d1      	bne.n	40200a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402066:	6823      	ldr	r3, [r4, #0]
  402068:	2b00      	cmp	r3, #0
  40206a:	d0c7      	beq.n	401ffc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40206c:	9901      	ldr	r1, [sp, #4]
  40206e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402072:	4b18      	ldr	r3, [pc, #96]	; (4020d4 <xQueueGenericReceive+0x1c8>)
  402074:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402076:	4620      	mov	r0, r4
  402078:	4b12      	ldr	r3, [pc, #72]	; (4020c4 <xQueueGenericReceive+0x1b8>)
  40207a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40207c:	4b12      	ldr	r3, [pc, #72]	; (4020c8 <xQueueGenericReceive+0x1bc>)
  40207e:	4798      	blx	r3
  402080:	2800      	cmp	r0, #0
  402082:	d1c7      	bne.n	402014 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402088:	f8c9 3000 	str.w	r3, [r9]
  40208c:	f3bf 8f4f 	dsb	sy
  402090:	f3bf 8f6f 	isb	sy
  402094:	e7be      	b.n	402014 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402096:	4620      	mov	r0, r4
  402098:	4b0a      	ldr	r3, [pc, #40]	; (4020c4 <xQueueGenericReceive+0x1b8>)
  40209a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40209c:	4b0a      	ldr	r3, [pc, #40]	; (4020c8 <xQueueGenericReceive+0x1bc>)
  40209e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4020a0:	2000      	movs	r0, #0
  4020a2:	e791      	b.n	401fc8 <xQueueGenericReceive+0xbc>
  4020a4:	00402b9d 	.word	0x00402b9d
  4020a8:	0040168d 	.word	0x0040168d
  4020ac:	00401a4d 	.word	0x00401a4d
  4020b0:	00402d1d 	.word	0x00402d1d
  4020b4:	00402a35 	.word	0x00402a35
  4020b8:	e000ed04 	.word	0xe000ed04
  4020bc:	004016d9 	.word	0x004016d9
  4020c0:	00402bbd 	.word	0x00402bbd
  4020c4:	00401a75 	.word	0x00401a75
  4020c8:	00402619 	.word	0x00402619
  4020cc:	004024b1 	.word	0x004024b1
  4020d0:	00402afd 	.word	0x00402afd
  4020d4:	00402931 	.word	0x00402931
  4020d8:	00402acd 	.word	0x00402acd

004020dc <vQueueAddToRegistry>:
	{
  4020dc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4020de:	4b0b      	ldr	r3, [pc, #44]	; (40210c <vQueueAddToRegistry+0x30>)
  4020e0:	681b      	ldr	r3, [r3, #0]
  4020e2:	b153      	cbz	r3, 4020fa <vQueueAddToRegistry+0x1e>
  4020e4:	2301      	movs	r3, #1
  4020e6:	4c09      	ldr	r4, [pc, #36]	; (40210c <vQueueAddToRegistry+0x30>)
  4020e8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4020ec:	b132      	cbz	r2, 4020fc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020ee:	3301      	adds	r3, #1
  4020f0:	2b08      	cmp	r3, #8
  4020f2:	d1f9      	bne.n	4020e8 <vQueueAddToRegistry+0xc>
	}
  4020f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020f8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020fa:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4020fc:	4a03      	ldr	r2, [pc, #12]	; (40210c <vQueueAddToRegistry+0x30>)
  4020fe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402106:	6058      	str	r0, [r3, #4]
				break;
  402108:	e7f4      	b.n	4020f4 <vQueueAddToRegistry+0x18>
  40210a:	bf00      	nop
  40210c:	20400e70 	.word	0x20400e70

00402110 <vQueueWaitForMessageRestricted>:
	{
  402110:	b570      	push	{r4, r5, r6, lr}
  402112:	4604      	mov	r4, r0
  402114:	460d      	mov	r5, r1
  402116:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402118:	4b0f      	ldr	r3, [pc, #60]	; (402158 <vQueueWaitForMessageRestricted+0x48>)
  40211a:	4798      	blx	r3
  40211c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40211e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402122:	d00b      	beq.n	40213c <vQueueWaitForMessageRestricted+0x2c>
  402124:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402126:	f1b3 3fff 	cmp.w	r3, #4294967295
  40212a:	d00a      	beq.n	402142 <vQueueWaitForMessageRestricted+0x32>
  40212c:	4b0b      	ldr	r3, [pc, #44]	; (40215c <vQueueWaitForMessageRestricted+0x4c>)
  40212e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402132:	b14b      	cbz	r3, 402148 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402134:	4620      	mov	r0, r4
  402136:	4b0a      	ldr	r3, [pc, #40]	; (402160 <vQueueWaitForMessageRestricted+0x50>)
  402138:	4798      	blx	r3
  40213a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40213c:	2300      	movs	r3, #0
  40213e:	6463      	str	r3, [r4, #68]	; 0x44
  402140:	e7f0      	b.n	402124 <vQueueWaitForMessageRestricted+0x14>
  402142:	2300      	movs	r3, #0
  402144:	64a3      	str	r3, [r4, #72]	; 0x48
  402146:	e7f1      	b.n	40212c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402148:	4632      	mov	r2, r6
  40214a:	4629      	mov	r1, r5
  40214c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402150:	4b04      	ldr	r3, [pc, #16]	; (402164 <vQueueWaitForMessageRestricted+0x54>)
  402152:	4798      	blx	r3
  402154:	e7ee      	b.n	402134 <vQueueWaitForMessageRestricted+0x24>
  402156:	bf00      	nop
  402158:	0040168d 	.word	0x0040168d
  40215c:	004016d9 	.word	0x004016d9
  402160:	00401a75 	.word	0x00401a75
  402164:	004029b5 	.word	0x004029b5

00402168 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402168:	4b08      	ldr	r3, [pc, #32]	; (40218c <prvResetNextTaskUnblockTime+0x24>)
  40216a:	681b      	ldr	r3, [r3, #0]
  40216c:	681b      	ldr	r3, [r3, #0]
  40216e:	b13b      	cbz	r3, 402180 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402170:	4b06      	ldr	r3, [pc, #24]	; (40218c <prvResetNextTaskUnblockTime+0x24>)
  402172:	681b      	ldr	r3, [r3, #0]
  402174:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402176:	68db      	ldr	r3, [r3, #12]
  402178:	685a      	ldr	r2, [r3, #4]
  40217a:	4b05      	ldr	r3, [pc, #20]	; (402190 <prvResetNextTaskUnblockTime+0x28>)
  40217c:	601a      	str	r2, [r3, #0]
  40217e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402180:	f04f 32ff 	mov.w	r2, #4294967295
  402184:	4b02      	ldr	r3, [pc, #8]	; (402190 <prvResetNextTaskUnblockTime+0x28>)
  402186:	601a      	str	r2, [r3, #0]
  402188:	4770      	bx	lr
  40218a:	bf00      	nop
  40218c:	20400cd4 	.word	0x20400cd4
  402190:	20400d80 	.word	0x20400d80

00402194 <prvAddCurrentTaskToDelayedList>:
{
  402194:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402196:	4b0f      	ldr	r3, [pc, #60]	; (4021d4 <prvAddCurrentTaskToDelayedList+0x40>)
  402198:	681b      	ldr	r3, [r3, #0]
  40219a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40219c:	4b0e      	ldr	r3, [pc, #56]	; (4021d8 <prvAddCurrentTaskToDelayedList+0x44>)
  40219e:	681b      	ldr	r3, [r3, #0]
  4021a0:	4298      	cmp	r0, r3
  4021a2:	d30e      	bcc.n	4021c2 <prvAddCurrentTaskToDelayedList+0x2e>
  4021a4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021a6:	4b0d      	ldr	r3, [pc, #52]	; (4021dc <prvAddCurrentTaskToDelayedList+0x48>)
  4021a8:	6818      	ldr	r0, [r3, #0]
  4021aa:	4b0a      	ldr	r3, [pc, #40]	; (4021d4 <prvAddCurrentTaskToDelayedList+0x40>)
  4021ac:	6819      	ldr	r1, [r3, #0]
  4021ae:	3104      	adds	r1, #4
  4021b0:	4b0b      	ldr	r3, [pc, #44]	; (4021e0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4021b2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4021b4:	4b0b      	ldr	r3, [pc, #44]	; (4021e4 <prvAddCurrentTaskToDelayedList+0x50>)
  4021b6:	681b      	ldr	r3, [r3, #0]
  4021b8:	429c      	cmp	r4, r3
  4021ba:	d201      	bcs.n	4021c0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4021bc:	4b09      	ldr	r3, [pc, #36]	; (4021e4 <prvAddCurrentTaskToDelayedList+0x50>)
  4021be:	601c      	str	r4, [r3, #0]
  4021c0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021c2:	4b09      	ldr	r3, [pc, #36]	; (4021e8 <prvAddCurrentTaskToDelayedList+0x54>)
  4021c4:	6818      	ldr	r0, [r3, #0]
  4021c6:	4b03      	ldr	r3, [pc, #12]	; (4021d4 <prvAddCurrentTaskToDelayedList+0x40>)
  4021c8:	6819      	ldr	r1, [r3, #0]
  4021ca:	3104      	adds	r1, #4
  4021cc:	4b04      	ldr	r3, [pc, #16]	; (4021e0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4021ce:	4798      	blx	r3
  4021d0:	bd10      	pop	{r4, pc}
  4021d2:	bf00      	nop
  4021d4:	20400cd0 	.word	0x20400cd0
  4021d8:	20400dc8 	.word	0x20400dc8
  4021dc:	20400cd4 	.word	0x20400cd4
  4021e0:	00401575 	.word	0x00401575
  4021e4:	20400d80 	.word	0x20400d80
  4021e8:	20400cd8 	.word	0x20400cd8

004021ec <xTaskGenericCreate>:
{
  4021ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021f0:	b083      	sub	sp, #12
  4021f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4021f4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4021f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4021fa:	b160      	cbz	r0, 402216 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4021fc:	2d04      	cmp	r5, #4
  4021fe:	d915      	bls.n	40222c <xTaskGenericCreate+0x40>
  402200:	f04f 0380 	mov.w	r3, #128	; 0x80
  402204:	b672      	cpsid	i
  402206:	f383 8811 	msr	BASEPRI, r3
  40220a:	f3bf 8f6f 	isb	sy
  40220e:	f3bf 8f4f 	dsb	sy
  402212:	b662      	cpsie	i
  402214:	e7fe      	b.n	402214 <xTaskGenericCreate+0x28>
  402216:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221a:	b672      	cpsid	i
  40221c:	f383 8811 	msr	BASEPRI, r3
  402220:	f3bf 8f6f 	isb	sy
  402224:	f3bf 8f4f 	dsb	sy
  402228:	b662      	cpsie	i
  40222a:	e7fe      	b.n	40222a <xTaskGenericCreate+0x3e>
  40222c:	9001      	str	r0, [sp, #4]
  40222e:	4698      	mov	r8, r3
  402230:	4691      	mov	r9, r2
  402232:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402234:	b936      	cbnz	r6, 402244 <xTaskGenericCreate+0x58>
  402236:	0090      	lsls	r0, r2, #2
  402238:	4b62      	ldr	r3, [pc, #392]	; (4023c4 <xTaskGenericCreate+0x1d8>)
  40223a:	4798      	blx	r3
		if( pxStack != NULL )
  40223c:	4606      	mov	r6, r0
  40223e:	2800      	cmp	r0, #0
  402240:	f000 809e 	beq.w	402380 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402244:	2058      	movs	r0, #88	; 0x58
  402246:	4b5f      	ldr	r3, [pc, #380]	; (4023c4 <xTaskGenericCreate+0x1d8>)
  402248:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40224a:	4604      	mov	r4, r0
  40224c:	2800      	cmp	r0, #0
  40224e:	f000 8094 	beq.w	40237a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402252:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402254:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402258:	21a5      	movs	r1, #165	; 0xa5
  40225a:	4630      	mov	r0, r6
  40225c:	4b5a      	ldr	r3, [pc, #360]	; (4023c8 <xTaskGenericCreate+0x1dc>)
  40225e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402260:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402264:	444e      	add	r6, r9
  402266:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402268:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40226c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402270:	783b      	ldrb	r3, [r7, #0]
  402272:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402276:	783b      	ldrb	r3, [r7, #0]
  402278:	2b00      	cmp	r3, #0
  40227a:	f040 8084 	bne.w	402386 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40227e:	2700      	movs	r7, #0
  402280:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402284:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402286:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402288:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40228a:	f104 0904 	add.w	r9, r4, #4
  40228e:	4648      	mov	r0, r9
  402290:	f8df b184 	ldr.w	fp, [pc, #388]	; 402418 <xTaskGenericCreate+0x22c>
  402294:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402296:	f104 0018 	add.w	r0, r4, #24
  40229a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40229c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40229e:	f1c5 0305 	rsb	r3, r5, #5
  4022a2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4022a4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4022a6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4022a8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4022ac:	4642      	mov	r2, r8
  4022ae:	9901      	ldr	r1, [sp, #4]
  4022b0:	4630      	mov	r0, r6
  4022b2:	4b46      	ldr	r3, [pc, #280]	; (4023cc <xTaskGenericCreate+0x1e0>)
  4022b4:	4798      	blx	r3
  4022b6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4022b8:	f1ba 0f00 	cmp.w	sl, #0
  4022bc:	d001      	beq.n	4022c2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4022be:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4022c2:	4b43      	ldr	r3, [pc, #268]	; (4023d0 <xTaskGenericCreate+0x1e4>)
  4022c4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4022c6:	4a43      	ldr	r2, [pc, #268]	; (4023d4 <xTaskGenericCreate+0x1e8>)
  4022c8:	6813      	ldr	r3, [r2, #0]
  4022ca:	3301      	adds	r3, #1
  4022cc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4022ce:	4b42      	ldr	r3, [pc, #264]	; (4023d8 <xTaskGenericCreate+0x1ec>)
  4022d0:	681b      	ldr	r3, [r3, #0]
  4022d2:	2b00      	cmp	r3, #0
  4022d4:	d166      	bne.n	4023a4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4022d6:	4b40      	ldr	r3, [pc, #256]	; (4023d8 <xTaskGenericCreate+0x1ec>)
  4022d8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4022da:	6813      	ldr	r3, [r2, #0]
  4022dc:	2b01      	cmp	r3, #1
  4022de:	d121      	bne.n	402324 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4022e0:	4f3e      	ldr	r7, [pc, #248]	; (4023dc <xTaskGenericCreate+0x1f0>)
  4022e2:	4638      	mov	r0, r7
  4022e4:	4e3e      	ldr	r6, [pc, #248]	; (4023e0 <xTaskGenericCreate+0x1f4>)
  4022e6:	47b0      	blx	r6
  4022e8:	f107 0014 	add.w	r0, r7, #20
  4022ec:	47b0      	blx	r6
  4022ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4022f2:	47b0      	blx	r6
  4022f4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4022f8:	47b0      	blx	r6
  4022fa:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4022fe:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402300:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40241c <xTaskGenericCreate+0x230>
  402304:	4640      	mov	r0, r8
  402306:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402308:	4f36      	ldr	r7, [pc, #216]	; (4023e4 <xTaskGenericCreate+0x1f8>)
  40230a:	4638      	mov	r0, r7
  40230c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  40230e:	4836      	ldr	r0, [pc, #216]	; (4023e8 <xTaskGenericCreate+0x1fc>)
  402310:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402312:	4836      	ldr	r0, [pc, #216]	; (4023ec <xTaskGenericCreate+0x200>)
  402314:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402316:	4836      	ldr	r0, [pc, #216]	; (4023f0 <xTaskGenericCreate+0x204>)
  402318:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40231a:	4b36      	ldr	r3, [pc, #216]	; (4023f4 <xTaskGenericCreate+0x208>)
  40231c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402320:	4b35      	ldr	r3, [pc, #212]	; (4023f8 <xTaskGenericCreate+0x20c>)
  402322:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402324:	4a35      	ldr	r2, [pc, #212]	; (4023fc <xTaskGenericCreate+0x210>)
  402326:	6813      	ldr	r3, [r2, #0]
  402328:	3301      	adds	r3, #1
  40232a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40232c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40232e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402330:	4a33      	ldr	r2, [pc, #204]	; (402400 <xTaskGenericCreate+0x214>)
  402332:	6811      	ldr	r1, [r2, #0]
  402334:	2301      	movs	r3, #1
  402336:	4083      	lsls	r3, r0
  402338:	430b      	orrs	r3, r1
  40233a:	6013      	str	r3, [r2, #0]
  40233c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402340:	4649      	mov	r1, r9
  402342:	4b26      	ldr	r3, [pc, #152]	; (4023dc <xTaskGenericCreate+0x1f0>)
  402344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402348:	4b2e      	ldr	r3, [pc, #184]	; (402404 <xTaskGenericCreate+0x218>)
  40234a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40234c:	4b2e      	ldr	r3, [pc, #184]	; (402408 <xTaskGenericCreate+0x21c>)
  40234e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402350:	4b2e      	ldr	r3, [pc, #184]	; (40240c <xTaskGenericCreate+0x220>)
  402352:	681b      	ldr	r3, [r3, #0]
  402354:	2b00      	cmp	r3, #0
  402356:	d031      	beq.n	4023bc <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402358:	4b1f      	ldr	r3, [pc, #124]	; (4023d8 <xTaskGenericCreate+0x1ec>)
  40235a:	681b      	ldr	r3, [r3, #0]
  40235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40235e:	429d      	cmp	r5, r3
  402360:	d92e      	bls.n	4023c0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402366:	4b2a      	ldr	r3, [pc, #168]	; (402410 <xTaskGenericCreate+0x224>)
  402368:	601a      	str	r2, [r3, #0]
  40236a:	f3bf 8f4f 	dsb	sy
  40236e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402372:	2001      	movs	r0, #1
}
  402374:	b003      	add	sp, #12
  402376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40237a:	4630      	mov	r0, r6
  40237c:	4b25      	ldr	r3, [pc, #148]	; (402414 <xTaskGenericCreate+0x228>)
  40237e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402380:	f04f 30ff 	mov.w	r0, #4294967295
  402384:	e7f6      	b.n	402374 <xTaskGenericCreate+0x188>
  402386:	463b      	mov	r3, r7
  402388:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40238c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40238e:	7859      	ldrb	r1, [r3, #1]
  402390:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402394:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402398:	2900      	cmp	r1, #0
  40239a:	f43f af70 	beq.w	40227e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40239e:	42bb      	cmp	r3, r7
  4023a0:	d1f5      	bne.n	40238e <xTaskGenericCreate+0x1a2>
  4023a2:	e76c      	b.n	40227e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4023a4:	4b19      	ldr	r3, [pc, #100]	; (40240c <xTaskGenericCreate+0x220>)
  4023a6:	681b      	ldr	r3, [r3, #0]
  4023a8:	2b00      	cmp	r3, #0
  4023aa:	d1bb      	bne.n	402324 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4023ac:	4b0a      	ldr	r3, [pc, #40]	; (4023d8 <xTaskGenericCreate+0x1ec>)
  4023ae:	681b      	ldr	r3, [r3, #0]
  4023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4023b2:	429d      	cmp	r5, r3
  4023b4:	d3b6      	bcc.n	402324 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4023b6:	4b08      	ldr	r3, [pc, #32]	; (4023d8 <xTaskGenericCreate+0x1ec>)
  4023b8:	601c      	str	r4, [r3, #0]
  4023ba:	e7b3      	b.n	402324 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4023bc:	2001      	movs	r0, #1
  4023be:	e7d9      	b.n	402374 <xTaskGenericCreate+0x188>
  4023c0:	2001      	movs	r0, #1
	return xReturn;
  4023c2:	e7d7      	b.n	402374 <xTaskGenericCreate+0x188>
  4023c4:	004018e9 	.word	0x004018e9
  4023c8:	00404b31 	.word	0x00404b31
  4023cc:	00401641 	.word	0x00401641
  4023d0:	0040168d 	.word	0x0040168d
  4023d4:	20400d40 	.word	0x20400d40
  4023d8:	20400cd0 	.word	0x20400cd0
  4023dc:	20400cdc 	.word	0x20400cdc
  4023e0:	00401541 	.word	0x00401541
  4023e4:	20400d6c 	.word	0x20400d6c
  4023e8:	20400d88 	.word	0x20400d88
  4023ec:	20400db4 	.word	0x20400db4
  4023f0:	20400da0 	.word	0x20400da0
  4023f4:	20400cd4 	.word	0x20400cd4
  4023f8:	20400cd8 	.word	0x20400cd8
  4023fc:	20400d4c 	.word	0x20400d4c
  402400:	20400d54 	.word	0x20400d54
  402404:	0040155d 	.word	0x0040155d
  402408:	004016d9 	.word	0x004016d9
  40240c:	20400d9c 	.word	0x20400d9c
  402410:	e000ed04 	.word	0xe000ed04
  402414:	00401919 	.word	0x00401919
  402418:	00401557 	.word	0x00401557
  40241c:	20400d58 	.word	0x20400d58

00402420 <vTaskStartScheduler>:
{
  402420:	b510      	push	{r4, lr}
  402422:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402424:	2300      	movs	r3, #0
  402426:	9303      	str	r3, [sp, #12]
  402428:	9302      	str	r3, [sp, #8]
  40242a:	9301      	str	r3, [sp, #4]
  40242c:	9300      	str	r3, [sp, #0]
  40242e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402432:	4917      	ldr	r1, [pc, #92]	; (402490 <vTaskStartScheduler+0x70>)
  402434:	4817      	ldr	r0, [pc, #92]	; (402494 <vTaskStartScheduler+0x74>)
  402436:	4c18      	ldr	r4, [pc, #96]	; (402498 <vTaskStartScheduler+0x78>)
  402438:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40243a:	2801      	cmp	r0, #1
  40243c:	d00b      	beq.n	402456 <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  40243e:	bb20      	cbnz	r0, 40248a <vTaskStartScheduler+0x6a>
  402440:	f04f 0380 	mov.w	r3, #128	; 0x80
  402444:	b672      	cpsid	i
  402446:	f383 8811 	msr	BASEPRI, r3
  40244a:	f3bf 8f6f 	isb	sy
  40244e:	f3bf 8f4f 	dsb	sy
  402452:	b662      	cpsie	i
  402454:	e7fe      	b.n	402454 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  402456:	4b11      	ldr	r3, [pc, #68]	; (40249c <vTaskStartScheduler+0x7c>)
  402458:	4798      	blx	r3
	if( xReturn == pdPASS )
  40245a:	2801      	cmp	r0, #1
  40245c:	d1ef      	bne.n	40243e <vTaskStartScheduler+0x1e>
  40245e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402462:	b672      	cpsid	i
  402464:	f383 8811 	msr	BASEPRI, r3
  402468:	f3bf 8f6f 	isb	sy
  40246c:	f3bf 8f4f 	dsb	sy
  402470:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402472:	f04f 32ff 	mov.w	r2, #4294967295
  402476:	4b0a      	ldr	r3, [pc, #40]	; (4024a0 <vTaskStartScheduler+0x80>)
  402478:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40247a:	2201      	movs	r2, #1
  40247c:	4b09      	ldr	r3, [pc, #36]	; (4024a4 <vTaskStartScheduler+0x84>)
  40247e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402480:	2200      	movs	r2, #0
  402482:	4b09      	ldr	r3, [pc, #36]	; (4024a8 <vTaskStartScheduler+0x88>)
  402484:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402486:	4b09      	ldr	r3, [pc, #36]	; (4024ac <vTaskStartScheduler+0x8c>)
  402488:	4798      	blx	r3
}
  40248a:	b004      	add	sp, #16
  40248c:	bd10      	pop	{r4, pc}
  40248e:	bf00      	nop
  402490:	0040ac0c 	.word	0x0040ac0c
  402494:	004027c9 	.word	0x004027c9
  402498:	004021ed 	.word	0x004021ed
  40249c:	00402e09 	.word	0x00402e09
  4024a0:	20400d80 	.word	0x20400d80
  4024a4:	20400d9c 	.word	0x20400d9c
  4024a8:	20400dc8 	.word	0x20400dc8
  4024ac:	004017c1 	.word	0x004017c1

004024b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4024b0:	4a02      	ldr	r2, [pc, #8]	; (4024bc <vTaskSuspendAll+0xc>)
  4024b2:	6813      	ldr	r3, [r2, #0]
  4024b4:	3301      	adds	r3, #1
  4024b6:	6013      	str	r3, [r2, #0]
  4024b8:	4770      	bx	lr
  4024ba:	bf00      	nop
  4024bc:	20400d48 	.word	0x20400d48

004024c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4024c0:	4b01      	ldr	r3, [pc, #4]	; (4024c8 <xTaskGetTickCount+0x8>)
  4024c2:	6818      	ldr	r0, [r3, #0]
}
  4024c4:	4770      	bx	lr
  4024c6:	bf00      	nop
  4024c8:	20400dc8 	.word	0x20400dc8

004024cc <xTaskIncrementTick>:
{
  4024cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024d0:	4b42      	ldr	r3, [pc, #264]	; (4025dc <xTaskIncrementTick+0x110>)
  4024d2:	681b      	ldr	r3, [r3, #0]
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d178      	bne.n	4025ca <xTaskIncrementTick+0xfe>
		++xTickCount;
  4024d8:	4b41      	ldr	r3, [pc, #260]	; (4025e0 <xTaskIncrementTick+0x114>)
  4024da:	681a      	ldr	r2, [r3, #0]
  4024dc:	3201      	adds	r2, #1
  4024de:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4024e0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4024e2:	b9d6      	cbnz	r6, 40251a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4024e4:	4b3f      	ldr	r3, [pc, #252]	; (4025e4 <xTaskIncrementTick+0x118>)
  4024e6:	681b      	ldr	r3, [r3, #0]
  4024e8:	681b      	ldr	r3, [r3, #0]
  4024ea:	b153      	cbz	r3, 402502 <xTaskIncrementTick+0x36>
  4024ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024f0:	b672      	cpsid	i
  4024f2:	f383 8811 	msr	BASEPRI, r3
  4024f6:	f3bf 8f6f 	isb	sy
  4024fa:	f3bf 8f4f 	dsb	sy
  4024fe:	b662      	cpsie	i
  402500:	e7fe      	b.n	402500 <xTaskIncrementTick+0x34>
  402502:	4a38      	ldr	r2, [pc, #224]	; (4025e4 <xTaskIncrementTick+0x118>)
  402504:	6811      	ldr	r1, [r2, #0]
  402506:	4b38      	ldr	r3, [pc, #224]	; (4025e8 <xTaskIncrementTick+0x11c>)
  402508:	6818      	ldr	r0, [r3, #0]
  40250a:	6010      	str	r0, [r2, #0]
  40250c:	6019      	str	r1, [r3, #0]
  40250e:	4a37      	ldr	r2, [pc, #220]	; (4025ec <xTaskIncrementTick+0x120>)
  402510:	6813      	ldr	r3, [r2, #0]
  402512:	3301      	adds	r3, #1
  402514:	6013      	str	r3, [r2, #0]
  402516:	4b36      	ldr	r3, [pc, #216]	; (4025f0 <xTaskIncrementTick+0x124>)
  402518:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40251a:	4b36      	ldr	r3, [pc, #216]	; (4025f4 <xTaskIncrementTick+0x128>)
  40251c:	681b      	ldr	r3, [r3, #0]
  40251e:	429e      	cmp	r6, r3
  402520:	d218      	bcs.n	402554 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402522:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402524:	4b34      	ldr	r3, [pc, #208]	; (4025f8 <xTaskIncrementTick+0x12c>)
  402526:	681b      	ldr	r3, [r3, #0]
  402528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40252a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40252e:	4a33      	ldr	r2, [pc, #204]	; (4025fc <xTaskIncrementTick+0x130>)
  402530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402534:	2b02      	cmp	r3, #2
  402536:	bf28      	it	cs
  402538:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40253a:	4b31      	ldr	r3, [pc, #196]	; (402600 <xTaskIncrementTick+0x134>)
  40253c:	681b      	ldr	r3, [r3, #0]
  40253e:	b90b      	cbnz	r3, 402544 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402540:	4b30      	ldr	r3, [pc, #192]	; (402604 <xTaskIncrementTick+0x138>)
  402542:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402544:	4b30      	ldr	r3, [pc, #192]	; (402608 <xTaskIncrementTick+0x13c>)
  402546:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402548:	2b00      	cmp	r3, #0
}
  40254a:	bf0c      	ite	eq
  40254c:	4620      	moveq	r0, r4
  40254e:	2001      	movne	r0, #1
  402550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402554:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402556:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4025e4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40255a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402614 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40255e:	4f2b      	ldr	r7, [pc, #172]	; (40260c <xTaskIncrementTick+0x140>)
  402560:	e01f      	b.n	4025a2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402562:	f04f 32ff 	mov.w	r2, #4294967295
  402566:	4b23      	ldr	r3, [pc, #140]	; (4025f4 <xTaskIncrementTick+0x128>)
  402568:	601a      	str	r2, [r3, #0]
						break;
  40256a:	e7db      	b.n	402524 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  40256c:	4a21      	ldr	r2, [pc, #132]	; (4025f4 <xTaskIncrementTick+0x128>)
  40256e:	6013      	str	r3, [r2, #0]
							break;
  402570:	e7d8      	b.n	402524 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402572:	f105 0018 	add.w	r0, r5, #24
  402576:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402578:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40257a:	683a      	ldr	r2, [r7, #0]
  40257c:	2301      	movs	r3, #1
  40257e:	4083      	lsls	r3, r0
  402580:	4313      	orrs	r3, r2
  402582:	603b      	str	r3, [r7, #0]
  402584:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402588:	4651      	mov	r1, sl
  40258a:	4b1c      	ldr	r3, [pc, #112]	; (4025fc <xTaskIncrementTick+0x130>)
  40258c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402590:	4b1f      	ldr	r3, [pc, #124]	; (402610 <xTaskIncrementTick+0x144>)
  402592:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402594:	4b18      	ldr	r3, [pc, #96]	; (4025f8 <xTaskIncrementTick+0x12c>)
  402596:	681b      	ldr	r3, [r3, #0]
  402598:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  40259c:	429a      	cmp	r2, r3
  40259e:	bf28      	it	cs
  4025a0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4025a2:	f8d9 3000 	ldr.w	r3, [r9]
  4025a6:	681b      	ldr	r3, [r3, #0]
  4025a8:	2b00      	cmp	r3, #0
  4025aa:	d0da      	beq.n	402562 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4025ac:	f8d9 3000 	ldr.w	r3, [r9]
  4025b0:	68db      	ldr	r3, [r3, #12]
  4025b2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4025b4:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4025b6:	429e      	cmp	r6, r3
  4025b8:	d3d8      	bcc.n	40256c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4025ba:	f105 0a04 	add.w	sl, r5, #4
  4025be:	4650      	mov	r0, sl
  4025c0:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4025c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4025c4:	2b00      	cmp	r3, #0
  4025c6:	d1d4      	bne.n	402572 <xTaskIncrementTick+0xa6>
  4025c8:	e7d6      	b.n	402578 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4025ca:	4a0d      	ldr	r2, [pc, #52]	; (402600 <xTaskIncrementTick+0x134>)
  4025cc:	6813      	ldr	r3, [r2, #0]
  4025ce:	3301      	adds	r3, #1
  4025d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4025d2:	4b0c      	ldr	r3, [pc, #48]	; (402604 <xTaskIncrementTick+0x138>)
  4025d4:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4025d6:	2400      	movs	r4, #0
  4025d8:	e7b4      	b.n	402544 <xTaskIncrementTick+0x78>
  4025da:	bf00      	nop
  4025dc:	20400d48 	.word	0x20400d48
  4025e0:	20400dc8 	.word	0x20400dc8
  4025e4:	20400cd4 	.word	0x20400cd4
  4025e8:	20400cd8 	.word	0x20400cd8
  4025ec:	20400d84 	.word	0x20400d84
  4025f0:	00402169 	.word	0x00402169
  4025f4:	20400d80 	.word	0x20400d80
  4025f8:	20400cd0 	.word	0x20400cd0
  4025fc:	20400cdc 	.word	0x20400cdc
  402600:	20400d44 	.word	0x20400d44
  402604:	00403435 	.word	0x00403435
  402608:	20400dcc 	.word	0x20400dcc
  40260c:	20400d54 	.word	0x20400d54
  402610:	0040155d 	.word	0x0040155d
  402614:	004015a9 	.word	0x004015a9

00402618 <xTaskResumeAll>:
{
  402618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  40261c:	4b38      	ldr	r3, [pc, #224]	; (402700 <xTaskResumeAll+0xe8>)
  40261e:	681b      	ldr	r3, [r3, #0]
  402620:	b953      	cbnz	r3, 402638 <xTaskResumeAll+0x20>
  402622:	f04f 0380 	mov.w	r3, #128	; 0x80
  402626:	b672      	cpsid	i
  402628:	f383 8811 	msr	BASEPRI, r3
  40262c:	f3bf 8f6f 	isb	sy
  402630:	f3bf 8f4f 	dsb	sy
  402634:	b662      	cpsie	i
  402636:	e7fe      	b.n	402636 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402638:	4b32      	ldr	r3, [pc, #200]	; (402704 <xTaskResumeAll+0xec>)
  40263a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40263c:	4b30      	ldr	r3, [pc, #192]	; (402700 <xTaskResumeAll+0xe8>)
  40263e:	681a      	ldr	r2, [r3, #0]
  402640:	3a01      	subs	r2, #1
  402642:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402644:	681b      	ldr	r3, [r3, #0]
  402646:	2b00      	cmp	r3, #0
  402648:	d155      	bne.n	4026f6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40264a:	4b2f      	ldr	r3, [pc, #188]	; (402708 <xTaskResumeAll+0xf0>)
  40264c:	681b      	ldr	r3, [r3, #0]
  40264e:	2b00      	cmp	r3, #0
  402650:	d132      	bne.n	4026b8 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402652:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402654:	4b2d      	ldr	r3, [pc, #180]	; (40270c <xTaskResumeAll+0xf4>)
  402656:	4798      	blx	r3
}
  402658:	4620      	mov	r0, r4
  40265a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40265e:	68fb      	ldr	r3, [r7, #12]
  402660:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402662:	f104 0018 	add.w	r0, r4, #24
  402666:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402668:	f104 0804 	add.w	r8, r4, #4
  40266c:	4640      	mov	r0, r8
  40266e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402670:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402672:	682a      	ldr	r2, [r5, #0]
  402674:	2301      	movs	r3, #1
  402676:	4083      	lsls	r3, r0
  402678:	4313      	orrs	r3, r2
  40267a:	602b      	str	r3, [r5, #0]
  40267c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402680:	4641      	mov	r1, r8
  402682:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402686:	4b22      	ldr	r3, [pc, #136]	; (402710 <xTaskResumeAll+0xf8>)
  402688:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40268a:	4b22      	ldr	r3, [pc, #136]	; (402714 <xTaskResumeAll+0xfc>)
  40268c:	681b      	ldr	r3, [r3, #0]
  40268e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402692:	429a      	cmp	r2, r3
  402694:	d20c      	bcs.n	4026b0 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402696:	683b      	ldr	r3, [r7, #0]
  402698:	2b00      	cmp	r3, #0
  40269a:	d1e0      	bne.n	40265e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40269c:	4b1e      	ldr	r3, [pc, #120]	; (402718 <xTaskResumeAll+0x100>)
  40269e:	681b      	ldr	r3, [r3, #0]
  4026a0:	b1db      	cbz	r3, 4026da <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4026a2:	4b1d      	ldr	r3, [pc, #116]	; (402718 <xTaskResumeAll+0x100>)
  4026a4:	681b      	ldr	r3, [r3, #0]
  4026a6:	b1c3      	cbz	r3, 4026da <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4026a8:	4e1c      	ldr	r6, [pc, #112]	; (40271c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4026aa:	4d1d      	ldr	r5, [pc, #116]	; (402720 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4026ac:	4c1a      	ldr	r4, [pc, #104]	; (402718 <xTaskResumeAll+0x100>)
  4026ae:	e00e      	b.n	4026ce <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4026b0:	2201      	movs	r2, #1
  4026b2:	4b1b      	ldr	r3, [pc, #108]	; (402720 <xTaskResumeAll+0x108>)
  4026b4:	601a      	str	r2, [r3, #0]
  4026b6:	e7ee      	b.n	402696 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4026b8:	4f1a      	ldr	r7, [pc, #104]	; (402724 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4026ba:	4e1b      	ldr	r6, [pc, #108]	; (402728 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4026bc:	4d1b      	ldr	r5, [pc, #108]	; (40272c <xTaskResumeAll+0x114>)
  4026be:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402734 <xTaskResumeAll+0x11c>
  4026c2:	e7e8      	b.n	402696 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4026c4:	6823      	ldr	r3, [r4, #0]
  4026c6:	3b01      	subs	r3, #1
  4026c8:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4026ca:	6823      	ldr	r3, [r4, #0]
  4026cc:	b12b      	cbz	r3, 4026da <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4026ce:	47b0      	blx	r6
  4026d0:	2800      	cmp	r0, #0
  4026d2:	d0f7      	beq.n	4026c4 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4026d4:	2301      	movs	r3, #1
  4026d6:	602b      	str	r3, [r5, #0]
  4026d8:	e7f4      	b.n	4026c4 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4026da:	4b11      	ldr	r3, [pc, #68]	; (402720 <xTaskResumeAll+0x108>)
  4026dc:	681b      	ldr	r3, [r3, #0]
  4026de:	2b01      	cmp	r3, #1
  4026e0:	d10b      	bne.n	4026fa <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026e6:	4b12      	ldr	r3, [pc, #72]	; (402730 <xTaskResumeAll+0x118>)
  4026e8:	601a      	str	r2, [r3, #0]
  4026ea:	f3bf 8f4f 	dsb	sy
  4026ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4026f2:	2401      	movs	r4, #1
  4026f4:	e7ae      	b.n	402654 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4026f6:	2400      	movs	r4, #0
  4026f8:	e7ac      	b.n	402654 <xTaskResumeAll+0x3c>
  4026fa:	2400      	movs	r4, #0
  4026fc:	e7aa      	b.n	402654 <xTaskResumeAll+0x3c>
  4026fe:	bf00      	nop
  402700:	20400d48 	.word	0x20400d48
  402704:	0040168d 	.word	0x0040168d
  402708:	20400d40 	.word	0x20400d40
  40270c:	004016d9 	.word	0x004016d9
  402710:	0040155d 	.word	0x0040155d
  402714:	20400cd0 	.word	0x20400cd0
  402718:	20400d44 	.word	0x20400d44
  40271c:	004024cd 	.word	0x004024cd
  402720:	20400dcc 	.word	0x20400dcc
  402724:	20400d88 	.word	0x20400d88
  402728:	004015a9 	.word	0x004015a9
  40272c:	20400d54 	.word	0x20400d54
  402730:	e000ed04 	.word	0xe000ed04
  402734:	20400cdc 	.word	0x20400cdc

00402738 <vTaskDelay>:
	{
  402738:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40273a:	2800      	cmp	r0, #0
  40273c:	d029      	beq.n	402792 <vTaskDelay+0x5a>
  40273e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402740:	4b18      	ldr	r3, [pc, #96]	; (4027a4 <vTaskDelay+0x6c>)
  402742:	681b      	ldr	r3, [r3, #0]
  402744:	b153      	cbz	r3, 40275c <vTaskDelay+0x24>
  402746:	f04f 0380 	mov.w	r3, #128	; 0x80
  40274a:	b672      	cpsid	i
  40274c:	f383 8811 	msr	BASEPRI, r3
  402750:	f3bf 8f6f 	isb	sy
  402754:	f3bf 8f4f 	dsb	sy
  402758:	b662      	cpsie	i
  40275a:	e7fe      	b.n	40275a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40275c:	4b12      	ldr	r3, [pc, #72]	; (4027a8 <vTaskDelay+0x70>)
  40275e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402760:	4b12      	ldr	r3, [pc, #72]	; (4027ac <vTaskDelay+0x74>)
  402762:	681b      	ldr	r3, [r3, #0]
  402764:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402766:	4b12      	ldr	r3, [pc, #72]	; (4027b0 <vTaskDelay+0x78>)
  402768:	6818      	ldr	r0, [r3, #0]
  40276a:	3004      	adds	r0, #4
  40276c:	4b11      	ldr	r3, [pc, #68]	; (4027b4 <vTaskDelay+0x7c>)
  40276e:	4798      	blx	r3
  402770:	b948      	cbnz	r0, 402786 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402772:	4b0f      	ldr	r3, [pc, #60]	; (4027b0 <vTaskDelay+0x78>)
  402774:	681a      	ldr	r2, [r3, #0]
  402776:	4910      	ldr	r1, [pc, #64]	; (4027b8 <vTaskDelay+0x80>)
  402778:	680b      	ldr	r3, [r1, #0]
  40277a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40277c:	2201      	movs	r2, #1
  40277e:	4082      	lsls	r2, r0
  402780:	ea23 0302 	bic.w	r3, r3, r2
  402784:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402786:	4620      	mov	r0, r4
  402788:	4b0c      	ldr	r3, [pc, #48]	; (4027bc <vTaskDelay+0x84>)
  40278a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40278c:	4b0c      	ldr	r3, [pc, #48]	; (4027c0 <vTaskDelay+0x88>)
  40278e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402790:	b938      	cbnz	r0, 4027a2 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402796:	4b0b      	ldr	r3, [pc, #44]	; (4027c4 <vTaskDelay+0x8c>)
  402798:	601a      	str	r2, [r3, #0]
  40279a:	f3bf 8f4f 	dsb	sy
  40279e:	f3bf 8f6f 	isb	sy
  4027a2:	bd10      	pop	{r4, pc}
  4027a4:	20400d48 	.word	0x20400d48
  4027a8:	004024b1 	.word	0x004024b1
  4027ac:	20400dc8 	.word	0x20400dc8
  4027b0:	20400cd0 	.word	0x20400cd0
  4027b4:	004015a9 	.word	0x004015a9
  4027b8:	20400d54 	.word	0x20400d54
  4027bc:	00402195 	.word	0x00402195
  4027c0:	00402619 	.word	0x00402619
  4027c4:	e000ed04 	.word	0xe000ed04

004027c8 <prvIdleTask>:
{
  4027c8:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4027ca:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402854 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027ce:	4e19      	ldr	r6, [pc, #100]	; (402834 <prvIdleTask+0x6c>)
				taskYIELD();
  4027d0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402858 <prvIdleTask+0x90>
  4027d4:	e02a      	b.n	40282c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4027d6:	4b18      	ldr	r3, [pc, #96]	; (402838 <prvIdleTask+0x70>)
  4027d8:	681b      	ldr	r3, [r3, #0]
  4027da:	2b01      	cmp	r3, #1
  4027dc:	d81e      	bhi.n	40281c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4027de:	682b      	ldr	r3, [r5, #0]
  4027e0:	2b00      	cmp	r3, #0
  4027e2:	d0f8      	beq.n	4027d6 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4027e4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027e6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4027e8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4027ea:	2c00      	cmp	r4, #0
  4027ec:	d0f7      	beq.n	4027de <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4027ee:	4b13      	ldr	r3, [pc, #76]	; (40283c <prvIdleTask+0x74>)
  4027f0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4027f2:	68f3      	ldr	r3, [r6, #12]
  4027f4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4027f6:	1d20      	adds	r0, r4, #4
  4027f8:	4b11      	ldr	r3, [pc, #68]	; (402840 <prvIdleTask+0x78>)
  4027fa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4027fc:	4a11      	ldr	r2, [pc, #68]	; (402844 <prvIdleTask+0x7c>)
  4027fe:	6813      	ldr	r3, [r2, #0]
  402800:	3b01      	subs	r3, #1
  402802:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402804:	682b      	ldr	r3, [r5, #0]
  402806:	3b01      	subs	r3, #1
  402808:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40280a:	4b0f      	ldr	r3, [pc, #60]	; (402848 <prvIdleTask+0x80>)
  40280c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40280e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402810:	f8df a048 	ldr.w	sl, [pc, #72]	; 40285c <prvIdleTask+0x94>
  402814:	47d0      	blx	sl
		vPortFree( pxTCB );
  402816:	4620      	mov	r0, r4
  402818:	47d0      	blx	sl
  40281a:	e7e0      	b.n	4027de <prvIdleTask+0x16>
				taskYIELD();
  40281c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402820:	f8c9 3000 	str.w	r3, [r9]
  402824:	f3bf 8f4f 	dsb	sy
  402828:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40282c:	4d07      	ldr	r5, [pc, #28]	; (40284c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40282e:	4f08      	ldr	r7, [pc, #32]	; (402850 <prvIdleTask+0x88>)
  402830:	e7d5      	b.n	4027de <prvIdleTask+0x16>
  402832:	bf00      	nop
  402834:	20400db4 	.word	0x20400db4
  402838:	20400cdc 	.word	0x20400cdc
  40283c:	0040168d 	.word	0x0040168d
  402840:	004015a9 	.word	0x004015a9
  402844:	20400d40 	.word	0x20400d40
  402848:	004016d9 	.word	0x004016d9
  40284c:	20400d50 	.word	0x20400d50
  402850:	00402619 	.word	0x00402619
  402854:	004024b1 	.word	0x004024b1
  402858:	e000ed04 	.word	0xe000ed04
  40285c:	00401919 	.word	0x00401919

00402860 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402860:	4b2d      	ldr	r3, [pc, #180]	; (402918 <vTaskSwitchContext+0xb8>)
  402862:	681b      	ldr	r3, [r3, #0]
  402864:	2b00      	cmp	r3, #0
  402866:	d12c      	bne.n	4028c2 <vTaskSwitchContext+0x62>
{
  402868:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40286a:	2200      	movs	r2, #0
  40286c:	4b2b      	ldr	r3, [pc, #172]	; (40291c <vTaskSwitchContext+0xbc>)
  40286e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402870:	4b2b      	ldr	r3, [pc, #172]	; (402920 <vTaskSwitchContext+0xc0>)
  402872:	681b      	ldr	r3, [r3, #0]
  402874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402876:	681a      	ldr	r2, [r3, #0]
  402878:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40287c:	d103      	bne.n	402886 <vTaskSwitchContext+0x26>
  40287e:	685a      	ldr	r2, [r3, #4]
  402880:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402884:	d021      	beq.n	4028ca <vTaskSwitchContext+0x6a>
  402886:	4b26      	ldr	r3, [pc, #152]	; (402920 <vTaskSwitchContext+0xc0>)
  402888:	6818      	ldr	r0, [r3, #0]
  40288a:	6819      	ldr	r1, [r3, #0]
  40288c:	3134      	adds	r1, #52	; 0x34
  40288e:	4b25      	ldr	r3, [pc, #148]	; (402924 <vTaskSwitchContext+0xc4>)
  402890:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402892:	4b25      	ldr	r3, [pc, #148]	; (402928 <vTaskSwitchContext+0xc8>)
  402894:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402896:	fab3 f383 	clz	r3, r3
  40289a:	b2db      	uxtb	r3, r3
  40289c:	f1c3 031f 	rsb	r3, r3, #31
  4028a0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4028a4:	4a21      	ldr	r2, [pc, #132]	; (40292c <vTaskSwitchContext+0xcc>)
  4028a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4028aa:	b9ba      	cbnz	r2, 4028dc <vTaskSwitchContext+0x7c>
	__asm volatile
  4028ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028b0:	b672      	cpsid	i
  4028b2:	f383 8811 	msr	BASEPRI, r3
  4028b6:	f3bf 8f6f 	isb	sy
  4028ba:	f3bf 8f4f 	dsb	sy
  4028be:	b662      	cpsie	i
  4028c0:	e7fe      	b.n	4028c0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4028c2:	2201      	movs	r2, #1
  4028c4:	4b15      	ldr	r3, [pc, #84]	; (40291c <vTaskSwitchContext+0xbc>)
  4028c6:	601a      	str	r2, [r3, #0]
  4028c8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4028ca:	689a      	ldr	r2, [r3, #8]
  4028cc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4028d0:	d1d9      	bne.n	402886 <vTaskSwitchContext+0x26>
  4028d2:	68db      	ldr	r3, [r3, #12]
  4028d4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4028d8:	d1d5      	bne.n	402886 <vTaskSwitchContext+0x26>
  4028da:	e7da      	b.n	402892 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4028dc:	4a13      	ldr	r2, [pc, #76]	; (40292c <vTaskSwitchContext+0xcc>)
  4028de:	0099      	lsls	r1, r3, #2
  4028e0:	18c8      	adds	r0, r1, r3
  4028e2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4028e6:	6844      	ldr	r4, [r0, #4]
  4028e8:	6864      	ldr	r4, [r4, #4]
  4028ea:	6044      	str	r4, [r0, #4]
  4028ec:	4419      	add	r1, r3
  4028ee:	4602      	mov	r2, r0
  4028f0:	3208      	adds	r2, #8
  4028f2:	4294      	cmp	r4, r2
  4028f4:	d009      	beq.n	40290a <vTaskSwitchContext+0xaa>
  4028f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028fa:	4a0c      	ldr	r2, [pc, #48]	; (40292c <vTaskSwitchContext+0xcc>)
  4028fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402900:	685b      	ldr	r3, [r3, #4]
  402902:	68da      	ldr	r2, [r3, #12]
  402904:	4b06      	ldr	r3, [pc, #24]	; (402920 <vTaskSwitchContext+0xc0>)
  402906:	601a      	str	r2, [r3, #0]
  402908:	bd10      	pop	{r4, pc}
  40290a:	6860      	ldr	r0, [r4, #4]
  40290c:	4a07      	ldr	r2, [pc, #28]	; (40292c <vTaskSwitchContext+0xcc>)
  40290e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402912:	6050      	str	r0, [r2, #4]
  402914:	e7ef      	b.n	4028f6 <vTaskSwitchContext+0x96>
  402916:	bf00      	nop
  402918:	20400d48 	.word	0x20400d48
  40291c:	20400dcc 	.word	0x20400dcc
  402920:	20400cd0 	.word	0x20400cd0
  402924:	0040341d 	.word	0x0040341d
  402928:	20400d54 	.word	0x20400d54
  40292c:	20400cdc 	.word	0x20400cdc

00402930 <vTaskPlaceOnEventList>:
{
  402930:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402932:	b1e0      	cbz	r0, 40296e <vTaskPlaceOnEventList+0x3e>
  402934:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402936:	4d17      	ldr	r5, [pc, #92]	; (402994 <vTaskPlaceOnEventList+0x64>)
  402938:	6829      	ldr	r1, [r5, #0]
  40293a:	3118      	adds	r1, #24
  40293c:	4b16      	ldr	r3, [pc, #88]	; (402998 <vTaskPlaceOnEventList+0x68>)
  40293e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402940:	6828      	ldr	r0, [r5, #0]
  402942:	3004      	adds	r0, #4
  402944:	4b15      	ldr	r3, [pc, #84]	; (40299c <vTaskPlaceOnEventList+0x6c>)
  402946:	4798      	blx	r3
  402948:	b940      	cbnz	r0, 40295c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40294a:	682a      	ldr	r2, [r5, #0]
  40294c:	4914      	ldr	r1, [pc, #80]	; (4029a0 <vTaskPlaceOnEventList+0x70>)
  40294e:	680b      	ldr	r3, [r1, #0]
  402950:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402952:	2201      	movs	r2, #1
  402954:	4082      	lsls	r2, r0
  402956:	ea23 0302 	bic.w	r3, r3, r2
  40295a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40295c:	f1b4 3fff 	cmp.w	r4, #4294967295
  402960:	d010      	beq.n	402984 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402962:	4b10      	ldr	r3, [pc, #64]	; (4029a4 <vTaskPlaceOnEventList+0x74>)
  402964:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402966:	4420      	add	r0, r4
  402968:	4b0f      	ldr	r3, [pc, #60]	; (4029a8 <vTaskPlaceOnEventList+0x78>)
  40296a:	4798      	blx	r3
  40296c:	bd38      	pop	{r3, r4, r5, pc}
  40296e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402972:	b672      	cpsid	i
  402974:	f383 8811 	msr	BASEPRI, r3
  402978:	f3bf 8f6f 	isb	sy
  40297c:	f3bf 8f4f 	dsb	sy
  402980:	b662      	cpsie	i
  402982:	e7fe      	b.n	402982 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402984:	4b03      	ldr	r3, [pc, #12]	; (402994 <vTaskPlaceOnEventList+0x64>)
  402986:	6819      	ldr	r1, [r3, #0]
  402988:	3104      	adds	r1, #4
  40298a:	4808      	ldr	r0, [pc, #32]	; (4029ac <vTaskPlaceOnEventList+0x7c>)
  40298c:	4b08      	ldr	r3, [pc, #32]	; (4029b0 <vTaskPlaceOnEventList+0x80>)
  40298e:	4798      	blx	r3
  402990:	bd38      	pop	{r3, r4, r5, pc}
  402992:	bf00      	nop
  402994:	20400cd0 	.word	0x20400cd0
  402998:	00401575 	.word	0x00401575
  40299c:	004015a9 	.word	0x004015a9
  4029a0:	20400d54 	.word	0x20400d54
  4029a4:	20400dc8 	.word	0x20400dc8
  4029a8:	00402195 	.word	0x00402195
  4029ac:	20400da0 	.word	0x20400da0
  4029b0:	0040155d 	.word	0x0040155d

004029b4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4029b4:	b1e8      	cbz	r0, 4029f2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4029b6:	b570      	push	{r4, r5, r6, lr}
  4029b8:	4615      	mov	r5, r2
  4029ba:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4029bc:	4e16      	ldr	r6, [pc, #88]	; (402a18 <vTaskPlaceOnEventListRestricted+0x64>)
  4029be:	6831      	ldr	r1, [r6, #0]
  4029c0:	3118      	adds	r1, #24
  4029c2:	4b16      	ldr	r3, [pc, #88]	; (402a1c <vTaskPlaceOnEventListRestricted+0x68>)
  4029c4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029c6:	6830      	ldr	r0, [r6, #0]
  4029c8:	3004      	adds	r0, #4
  4029ca:	4b15      	ldr	r3, [pc, #84]	; (402a20 <vTaskPlaceOnEventListRestricted+0x6c>)
  4029cc:	4798      	blx	r3
  4029ce:	b940      	cbnz	r0, 4029e2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029d0:	6832      	ldr	r2, [r6, #0]
  4029d2:	4914      	ldr	r1, [pc, #80]	; (402a24 <vTaskPlaceOnEventListRestricted+0x70>)
  4029d4:	680b      	ldr	r3, [r1, #0]
  4029d6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4029d8:	2201      	movs	r2, #1
  4029da:	4082      	lsls	r2, r0
  4029dc:	ea23 0302 	bic.w	r3, r3, r2
  4029e0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4029e2:	2d01      	cmp	r5, #1
  4029e4:	d010      	beq.n	402a08 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4029e6:	4b10      	ldr	r3, [pc, #64]	; (402a28 <vTaskPlaceOnEventListRestricted+0x74>)
  4029e8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4029ea:	4420      	add	r0, r4
  4029ec:	4b0f      	ldr	r3, [pc, #60]	; (402a2c <vTaskPlaceOnEventListRestricted+0x78>)
  4029ee:	4798      	blx	r3
  4029f0:	bd70      	pop	{r4, r5, r6, pc}
  4029f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029f6:	b672      	cpsid	i
  4029f8:	f383 8811 	msr	BASEPRI, r3
  4029fc:	f3bf 8f6f 	isb	sy
  402a00:	f3bf 8f4f 	dsb	sy
  402a04:	b662      	cpsie	i
  402a06:	e7fe      	b.n	402a06 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402a08:	4b03      	ldr	r3, [pc, #12]	; (402a18 <vTaskPlaceOnEventListRestricted+0x64>)
  402a0a:	6819      	ldr	r1, [r3, #0]
  402a0c:	3104      	adds	r1, #4
  402a0e:	4808      	ldr	r0, [pc, #32]	; (402a30 <vTaskPlaceOnEventListRestricted+0x7c>)
  402a10:	4b02      	ldr	r3, [pc, #8]	; (402a1c <vTaskPlaceOnEventListRestricted+0x68>)
  402a12:	4798      	blx	r3
  402a14:	bd70      	pop	{r4, r5, r6, pc}
  402a16:	bf00      	nop
  402a18:	20400cd0 	.word	0x20400cd0
  402a1c:	0040155d 	.word	0x0040155d
  402a20:	004015a9 	.word	0x004015a9
  402a24:	20400d54 	.word	0x20400d54
  402a28:	20400dc8 	.word	0x20400dc8
  402a2c:	00402195 	.word	0x00402195
  402a30:	20400da0 	.word	0x20400da0

00402a34 <xTaskRemoveFromEventList>:
{
  402a34:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402a36:	68c3      	ldr	r3, [r0, #12]
  402a38:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402a3a:	b324      	cbz	r4, 402a86 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402a3c:	f104 0518 	add.w	r5, r4, #24
  402a40:	4628      	mov	r0, r5
  402a42:	4b1a      	ldr	r3, [pc, #104]	; (402aac <xTaskRemoveFromEventList+0x78>)
  402a44:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a46:	4b1a      	ldr	r3, [pc, #104]	; (402ab0 <xTaskRemoveFromEventList+0x7c>)
  402a48:	681b      	ldr	r3, [r3, #0]
  402a4a:	bb3b      	cbnz	r3, 402a9c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402a4c:	1d25      	adds	r5, r4, #4
  402a4e:	4628      	mov	r0, r5
  402a50:	4b16      	ldr	r3, [pc, #88]	; (402aac <xTaskRemoveFromEventList+0x78>)
  402a52:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402a54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a56:	4a17      	ldr	r2, [pc, #92]	; (402ab4 <xTaskRemoveFromEventList+0x80>)
  402a58:	6811      	ldr	r1, [r2, #0]
  402a5a:	2301      	movs	r3, #1
  402a5c:	4083      	lsls	r3, r0
  402a5e:	430b      	orrs	r3, r1
  402a60:	6013      	str	r3, [r2, #0]
  402a62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a66:	4629      	mov	r1, r5
  402a68:	4b13      	ldr	r3, [pc, #76]	; (402ab8 <xTaskRemoveFromEventList+0x84>)
  402a6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a6e:	4b13      	ldr	r3, [pc, #76]	; (402abc <xTaskRemoveFromEventList+0x88>)
  402a70:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402a72:	4b13      	ldr	r3, [pc, #76]	; (402ac0 <xTaskRemoveFromEventList+0x8c>)
  402a74:	681b      	ldr	r3, [r3, #0]
  402a76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a7a:	429a      	cmp	r2, r3
  402a7c:	d913      	bls.n	402aa6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402a7e:	2001      	movs	r0, #1
  402a80:	4b10      	ldr	r3, [pc, #64]	; (402ac4 <xTaskRemoveFromEventList+0x90>)
  402a82:	6018      	str	r0, [r3, #0]
  402a84:	bd38      	pop	{r3, r4, r5, pc}
  402a86:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a8a:	b672      	cpsid	i
  402a8c:	f383 8811 	msr	BASEPRI, r3
  402a90:	f3bf 8f6f 	isb	sy
  402a94:	f3bf 8f4f 	dsb	sy
  402a98:	b662      	cpsie	i
  402a9a:	e7fe      	b.n	402a9a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402a9c:	4629      	mov	r1, r5
  402a9e:	480a      	ldr	r0, [pc, #40]	; (402ac8 <xTaskRemoveFromEventList+0x94>)
  402aa0:	4b06      	ldr	r3, [pc, #24]	; (402abc <xTaskRemoveFromEventList+0x88>)
  402aa2:	4798      	blx	r3
  402aa4:	e7e5      	b.n	402a72 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402aa6:	2000      	movs	r0, #0
}
  402aa8:	bd38      	pop	{r3, r4, r5, pc}
  402aaa:	bf00      	nop
  402aac:	004015a9 	.word	0x004015a9
  402ab0:	20400d48 	.word	0x20400d48
  402ab4:	20400d54 	.word	0x20400d54
  402ab8:	20400cdc 	.word	0x20400cdc
  402abc:	0040155d 	.word	0x0040155d
  402ac0:	20400cd0 	.word	0x20400cd0
  402ac4:	20400dcc 	.word	0x20400dcc
  402ac8:	20400d88 	.word	0x20400d88

00402acc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402acc:	b130      	cbz	r0, 402adc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402ace:	4a09      	ldr	r2, [pc, #36]	; (402af4 <vTaskSetTimeOutState+0x28>)
  402ad0:	6812      	ldr	r2, [r2, #0]
  402ad2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402ad4:	4a08      	ldr	r2, [pc, #32]	; (402af8 <vTaskSetTimeOutState+0x2c>)
  402ad6:	6812      	ldr	r2, [r2, #0]
  402ad8:	6042      	str	r2, [r0, #4]
  402ada:	4770      	bx	lr
  402adc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ae0:	b672      	cpsid	i
  402ae2:	f383 8811 	msr	BASEPRI, r3
  402ae6:	f3bf 8f6f 	isb	sy
  402aea:	f3bf 8f4f 	dsb	sy
  402aee:	b662      	cpsie	i
  402af0:	e7fe      	b.n	402af0 <vTaskSetTimeOutState+0x24>
  402af2:	bf00      	nop
  402af4:	20400d84 	.word	0x20400d84
  402af8:	20400dc8 	.word	0x20400dc8

00402afc <xTaskCheckForTimeOut>:
{
  402afc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402afe:	b1c0      	cbz	r0, 402b32 <xTaskCheckForTimeOut+0x36>
  402b00:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402b02:	b309      	cbz	r1, 402b48 <xTaskCheckForTimeOut+0x4c>
  402b04:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402b06:	4b1d      	ldr	r3, [pc, #116]	; (402b7c <xTaskCheckForTimeOut+0x80>)
  402b08:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402b0a:	4b1d      	ldr	r3, [pc, #116]	; (402b80 <xTaskCheckForTimeOut+0x84>)
  402b0c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402b0e:	682b      	ldr	r3, [r5, #0]
  402b10:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b14:	d02e      	beq.n	402b74 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402b16:	491b      	ldr	r1, [pc, #108]	; (402b84 <xTaskCheckForTimeOut+0x88>)
  402b18:	6809      	ldr	r1, [r1, #0]
  402b1a:	6820      	ldr	r0, [r4, #0]
  402b1c:	4288      	cmp	r0, r1
  402b1e:	d002      	beq.n	402b26 <xTaskCheckForTimeOut+0x2a>
  402b20:	6861      	ldr	r1, [r4, #4]
  402b22:	428a      	cmp	r2, r1
  402b24:	d228      	bcs.n	402b78 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402b26:	6861      	ldr	r1, [r4, #4]
  402b28:	1a50      	subs	r0, r2, r1
  402b2a:	4283      	cmp	r3, r0
  402b2c:	d817      	bhi.n	402b5e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402b2e:	2401      	movs	r4, #1
  402b30:	e01c      	b.n	402b6c <xTaskCheckForTimeOut+0x70>
  402b32:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b36:	b672      	cpsid	i
  402b38:	f383 8811 	msr	BASEPRI, r3
  402b3c:	f3bf 8f6f 	isb	sy
  402b40:	f3bf 8f4f 	dsb	sy
  402b44:	b662      	cpsie	i
  402b46:	e7fe      	b.n	402b46 <xTaskCheckForTimeOut+0x4a>
  402b48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b4c:	b672      	cpsid	i
  402b4e:	f383 8811 	msr	BASEPRI, r3
  402b52:	f3bf 8f6f 	isb	sy
  402b56:	f3bf 8f4f 	dsb	sy
  402b5a:	b662      	cpsie	i
  402b5c:	e7fe      	b.n	402b5c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402b5e:	1a9b      	subs	r3, r3, r2
  402b60:	440b      	add	r3, r1
  402b62:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402b64:	4620      	mov	r0, r4
  402b66:	4b08      	ldr	r3, [pc, #32]	; (402b88 <xTaskCheckForTimeOut+0x8c>)
  402b68:	4798      	blx	r3
			xReturn = pdFALSE;
  402b6a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402b6c:	4b07      	ldr	r3, [pc, #28]	; (402b8c <xTaskCheckForTimeOut+0x90>)
  402b6e:	4798      	blx	r3
}
  402b70:	4620      	mov	r0, r4
  402b72:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402b74:	2400      	movs	r4, #0
  402b76:	e7f9      	b.n	402b6c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402b78:	2401      	movs	r4, #1
  402b7a:	e7f7      	b.n	402b6c <xTaskCheckForTimeOut+0x70>
  402b7c:	0040168d 	.word	0x0040168d
  402b80:	20400dc8 	.word	0x20400dc8
  402b84:	20400d84 	.word	0x20400d84
  402b88:	00402acd 	.word	0x00402acd
  402b8c:	004016d9 	.word	0x004016d9

00402b90 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402b90:	2201      	movs	r2, #1
  402b92:	4b01      	ldr	r3, [pc, #4]	; (402b98 <vTaskMissedYield+0x8>)
  402b94:	601a      	str	r2, [r3, #0]
  402b96:	4770      	bx	lr
  402b98:	20400dcc 	.word	0x20400dcc

00402b9c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402b9c:	4b05      	ldr	r3, [pc, #20]	; (402bb4 <xTaskGetSchedulerState+0x18>)
  402b9e:	681b      	ldr	r3, [r3, #0]
  402ba0:	b133      	cbz	r3, 402bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402ba2:	4b05      	ldr	r3, [pc, #20]	; (402bb8 <xTaskGetSchedulerState+0x1c>)
  402ba4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	bf0c      	ite	eq
  402baa:	2002      	moveq	r0, #2
  402bac:	2000      	movne	r0, #0
  402bae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402bb0:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402bb2:	4770      	bx	lr
  402bb4:	20400d9c 	.word	0x20400d9c
  402bb8:	20400d48 	.word	0x20400d48

00402bbc <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402bbc:	2800      	cmp	r0, #0
  402bbe:	d044      	beq.n	402c4a <vTaskPriorityInherit+0x8e>
	{
  402bc0:	b538      	push	{r3, r4, r5, lr}
  402bc2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402bc4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402bc6:	4921      	ldr	r1, [pc, #132]	; (402c4c <vTaskPriorityInherit+0x90>)
  402bc8:	6809      	ldr	r1, [r1, #0]
  402bca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bcc:	428a      	cmp	r2, r1
  402bce:	d214      	bcs.n	402bfa <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402bd0:	6981      	ldr	r1, [r0, #24]
  402bd2:	2900      	cmp	r1, #0
  402bd4:	db05      	blt.n	402be2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bd6:	491d      	ldr	r1, [pc, #116]	; (402c4c <vTaskPriorityInherit+0x90>)
  402bd8:	6809      	ldr	r1, [r1, #0]
  402bda:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bdc:	f1c1 0105 	rsb	r1, r1, #5
  402be0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402be2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402be6:	491a      	ldr	r1, [pc, #104]	; (402c50 <vTaskPriorityInherit+0x94>)
  402be8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402bec:	6961      	ldr	r1, [r4, #20]
  402bee:	4291      	cmp	r1, r2
  402bf0:	d004      	beq.n	402bfc <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402bf2:	4a16      	ldr	r2, [pc, #88]	; (402c4c <vTaskPriorityInherit+0x90>)
  402bf4:	6812      	ldr	r2, [r2, #0]
  402bf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402bf8:	62e2      	str	r2, [r4, #44]	; 0x2c
  402bfa:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402bfc:	1d25      	adds	r5, r4, #4
  402bfe:	4628      	mov	r0, r5
  402c00:	4b14      	ldr	r3, [pc, #80]	; (402c54 <vTaskPriorityInherit+0x98>)
  402c02:	4798      	blx	r3
  402c04:	b970      	cbnz	r0, 402c24 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402c08:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402c0c:	4a10      	ldr	r2, [pc, #64]	; (402c50 <vTaskPriorityInherit+0x94>)
  402c0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402c12:	b93a      	cbnz	r2, 402c24 <vTaskPriorityInherit+0x68>
  402c14:	4810      	ldr	r0, [pc, #64]	; (402c58 <vTaskPriorityInherit+0x9c>)
  402c16:	6802      	ldr	r2, [r0, #0]
  402c18:	2101      	movs	r1, #1
  402c1a:	fa01 f303 	lsl.w	r3, r1, r3
  402c1e:	ea22 0303 	bic.w	r3, r2, r3
  402c22:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402c24:	4b09      	ldr	r3, [pc, #36]	; (402c4c <vTaskPriorityInherit+0x90>)
  402c26:	681b      	ldr	r3, [r3, #0]
  402c28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402c2a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402c2c:	4a0a      	ldr	r2, [pc, #40]	; (402c58 <vTaskPriorityInherit+0x9c>)
  402c2e:	6811      	ldr	r1, [r2, #0]
  402c30:	2301      	movs	r3, #1
  402c32:	4083      	lsls	r3, r0
  402c34:	430b      	orrs	r3, r1
  402c36:	6013      	str	r3, [r2, #0]
  402c38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c3c:	4629      	mov	r1, r5
  402c3e:	4b04      	ldr	r3, [pc, #16]	; (402c50 <vTaskPriorityInherit+0x94>)
  402c40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c44:	4b05      	ldr	r3, [pc, #20]	; (402c5c <vTaskPriorityInherit+0xa0>)
  402c46:	4798      	blx	r3
  402c48:	bd38      	pop	{r3, r4, r5, pc}
  402c4a:	4770      	bx	lr
  402c4c:	20400cd0 	.word	0x20400cd0
  402c50:	20400cdc 	.word	0x20400cdc
  402c54:	004015a9 	.word	0x004015a9
  402c58:	20400d54 	.word	0x20400d54
  402c5c:	0040155d 	.word	0x0040155d

00402c60 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402c60:	2800      	cmp	r0, #0
  402c62:	d04d      	beq.n	402d00 <xTaskPriorityDisinherit+0xa0>
	{
  402c64:	b538      	push	{r3, r4, r5, lr}
  402c66:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402c68:	4a27      	ldr	r2, [pc, #156]	; (402d08 <xTaskPriorityDisinherit+0xa8>)
  402c6a:	6812      	ldr	r2, [r2, #0]
  402c6c:	4290      	cmp	r0, r2
  402c6e:	d00a      	beq.n	402c86 <xTaskPriorityDisinherit+0x26>
  402c70:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c74:	b672      	cpsid	i
  402c76:	f383 8811 	msr	BASEPRI, r3
  402c7a:	f3bf 8f6f 	isb	sy
  402c7e:	f3bf 8f4f 	dsb	sy
  402c82:	b662      	cpsie	i
  402c84:	e7fe      	b.n	402c84 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402c86:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c88:	b952      	cbnz	r2, 402ca0 <xTaskPriorityDisinherit+0x40>
  402c8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c8e:	b672      	cpsid	i
  402c90:	f383 8811 	msr	BASEPRI, r3
  402c94:	f3bf 8f6f 	isb	sy
  402c98:	f3bf 8f4f 	dsb	sy
  402c9c:	b662      	cpsie	i
  402c9e:	e7fe      	b.n	402c9e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402ca0:	3a01      	subs	r2, #1
  402ca2:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402ca4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402ca6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402ca8:	4288      	cmp	r0, r1
  402caa:	d02b      	beq.n	402d04 <xTaskPriorityDisinherit+0xa4>
  402cac:	bb52      	cbnz	r2, 402d04 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402cae:	1d25      	adds	r5, r4, #4
  402cb0:	4628      	mov	r0, r5
  402cb2:	4b16      	ldr	r3, [pc, #88]	; (402d0c <xTaskPriorityDisinherit+0xac>)
  402cb4:	4798      	blx	r3
  402cb6:	b968      	cbnz	r0, 402cd4 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402cb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402cba:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402cbe:	4b14      	ldr	r3, [pc, #80]	; (402d10 <xTaskPriorityDisinherit+0xb0>)
  402cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402cc4:	b933      	cbnz	r3, 402cd4 <xTaskPriorityDisinherit+0x74>
  402cc6:	4813      	ldr	r0, [pc, #76]	; (402d14 <xTaskPriorityDisinherit+0xb4>)
  402cc8:	6803      	ldr	r3, [r0, #0]
  402cca:	2201      	movs	r2, #1
  402ccc:	408a      	lsls	r2, r1
  402cce:	ea23 0302 	bic.w	r3, r3, r2
  402cd2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402cd4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402cd6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402cd8:	f1c0 0305 	rsb	r3, r0, #5
  402cdc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402cde:	4a0d      	ldr	r2, [pc, #52]	; (402d14 <xTaskPriorityDisinherit+0xb4>)
  402ce0:	6811      	ldr	r1, [r2, #0]
  402ce2:	2401      	movs	r4, #1
  402ce4:	fa04 f300 	lsl.w	r3, r4, r0
  402ce8:	430b      	orrs	r3, r1
  402cea:	6013      	str	r3, [r2, #0]
  402cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402cf0:	4629      	mov	r1, r5
  402cf2:	4b07      	ldr	r3, [pc, #28]	; (402d10 <xTaskPriorityDisinherit+0xb0>)
  402cf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402cf8:	4b07      	ldr	r3, [pc, #28]	; (402d18 <xTaskPriorityDisinherit+0xb8>)
  402cfa:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402cfc:	4620      	mov	r0, r4
  402cfe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402d00:	2000      	movs	r0, #0
  402d02:	4770      	bx	lr
  402d04:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402d06:	bd38      	pop	{r3, r4, r5, pc}
  402d08:	20400cd0 	.word	0x20400cd0
  402d0c:	004015a9 	.word	0x004015a9
  402d10:	20400cdc 	.word	0x20400cdc
  402d14:	20400d54 	.word	0x20400d54
  402d18:	0040155d 	.word	0x0040155d

00402d1c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402d1c:	4b05      	ldr	r3, [pc, #20]	; (402d34 <pvTaskIncrementMutexHeldCount+0x18>)
  402d1e:	681b      	ldr	r3, [r3, #0]
  402d20:	b123      	cbz	r3, 402d2c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402d22:	4b04      	ldr	r3, [pc, #16]	; (402d34 <pvTaskIncrementMutexHeldCount+0x18>)
  402d24:	681a      	ldr	r2, [r3, #0]
  402d26:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402d28:	3301      	adds	r3, #1
  402d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402d2c:	4b01      	ldr	r3, [pc, #4]	; (402d34 <pvTaskIncrementMutexHeldCount+0x18>)
  402d2e:	6818      	ldr	r0, [r3, #0]
	}
  402d30:	4770      	bx	lr
  402d32:	bf00      	nop
  402d34:	20400cd0 	.word	0x20400cd0

00402d38 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402d38:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402d3a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d3c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402d3e:	4291      	cmp	r1, r2
  402d40:	d80c      	bhi.n	402d5c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402d42:	1ad2      	subs	r2, r2, r3
  402d44:	6983      	ldr	r3, [r0, #24]
  402d46:	429a      	cmp	r2, r3
  402d48:	d301      	bcc.n	402d4e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402d4a:	2001      	movs	r0, #1
  402d4c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402d4e:	1d01      	adds	r1, r0, #4
  402d50:	4b09      	ldr	r3, [pc, #36]	; (402d78 <prvInsertTimerInActiveList+0x40>)
  402d52:	6818      	ldr	r0, [r3, #0]
  402d54:	4b09      	ldr	r3, [pc, #36]	; (402d7c <prvInsertTimerInActiveList+0x44>)
  402d56:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d58:	2000      	movs	r0, #0
  402d5a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402d5c:	429a      	cmp	r2, r3
  402d5e:	d203      	bcs.n	402d68 <prvInsertTimerInActiveList+0x30>
  402d60:	4299      	cmp	r1, r3
  402d62:	d301      	bcc.n	402d68 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402d64:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402d66:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d68:	1d01      	adds	r1, r0, #4
  402d6a:	4b05      	ldr	r3, [pc, #20]	; (402d80 <prvInsertTimerInActiveList+0x48>)
  402d6c:	6818      	ldr	r0, [r3, #0]
  402d6e:	4b03      	ldr	r3, [pc, #12]	; (402d7c <prvInsertTimerInActiveList+0x44>)
  402d70:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d72:	2000      	movs	r0, #0
  402d74:	bd08      	pop	{r3, pc}
  402d76:	bf00      	nop
  402d78:	20400dd4 	.word	0x20400dd4
  402d7c:	00401575 	.word	0x00401575
  402d80:	20400dd0 	.word	0x20400dd0

00402d84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d84:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d86:	4b15      	ldr	r3, [pc, #84]	; (402ddc <prvCheckForValidListAndQueue+0x58>)
  402d88:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d8a:	4b15      	ldr	r3, [pc, #84]	; (402de0 <prvCheckForValidListAndQueue+0x5c>)
  402d8c:	681b      	ldr	r3, [r3, #0]
  402d8e:	b113      	cbz	r3, 402d96 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d90:	4b14      	ldr	r3, [pc, #80]	; (402de4 <prvCheckForValidListAndQueue+0x60>)
  402d92:	4798      	blx	r3
  402d94:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402d96:	4d14      	ldr	r5, [pc, #80]	; (402de8 <prvCheckForValidListAndQueue+0x64>)
  402d98:	4628      	mov	r0, r5
  402d9a:	4e14      	ldr	r6, [pc, #80]	; (402dec <prvCheckForValidListAndQueue+0x68>)
  402d9c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402d9e:	4c14      	ldr	r4, [pc, #80]	; (402df0 <prvCheckForValidListAndQueue+0x6c>)
  402da0:	4620      	mov	r0, r4
  402da2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402da4:	4b13      	ldr	r3, [pc, #76]	; (402df4 <prvCheckForValidListAndQueue+0x70>)
  402da6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402da8:	4b13      	ldr	r3, [pc, #76]	; (402df8 <prvCheckForValidListAndQueue+0x74>)
  402daa:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402dac:	2200      	movs	r2, #0
  402dae:	2110      	movs	r1, #16
  402db0:	2005      	movs	r0, #5
  402db2:	4b12      	ldr	r3, [pc, #72]	; (402dfc <prvCheckForValidListAndQueue+0x78>)
  402db4:	4798      	blx	r3
  402db6:	4b0a      	ldr	r3, [pc, #40]	; (402de0 <prvCheckForValidListAndQueue+0x5c>)
  402db8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402dba:	b118      	cbz	r0, 402dc4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402dbc:	4910      	ldr	r1, [pc, #64]	; (402e00 <prvCheckForValidListAndQueue+0x7c>)
  402dbe:	4b11      	ldr	r3, [pc, #68]	; (402e04 <prvCheckForValidListAndQueue+0x80>)
  402dc0:	4798      	blx	r3
  402dc2:	e7e5      	b.n	402d90 <prvCheckForValidListAndQueue+0xc>
  402dc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dc8:	b672      	cpsid	i
  402dca:	f383 8811 	msr	BASEPRI, r3
  402dce:	f3bf 8f6f 	isb	sy
  402dd2:	f3bf 8f4f 	dsb	sy
  402dd6:	b662      	cpsie	i
  402dd8:	e7fe      	b.n	402dd8 <prvCheckForValidListAndQueue+0x54>
  402dda:	bf00      	nop
  402ddc:	0040168d 	.word	0x0040168d
  402de0:	20400e04 	.word	0x20400e04
  402de4:	004016d9 	.word	0x004016d9
  402de8:	20400dd8 	.word	0x20400dd8
  402dec:	00401541 	.word	0x00401541
  402df0:	20400dec 	.word	0x20400dec
  402df4:	20400dd0 	.word	0x20400dd0
  402df8:	20400dd4 	.word	0x20400dd4
  402dfc:	00401bad 	.word	0x00401bad
  402e00:	0040ac14 	.word	0x0040ac14
  402e04:	004020dd 	.word	0x004020dd

00402e08 <xTimerCreateTimerTask>:
{
  402e08:	b510      	push	{r4, lr}
  402e0a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402e0c:	4b0f      	ldr	r3, [pc, #60]	; (402e4c <xTimerCreateTimerTask+0x44>)
  402e0e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402e10:	4b0f      	ldr	r3, [pc, #60]	; (402e50 <xTimerCreateTimerTask+0x48>)
  402e12:	681b      	ldr	r3, [r3, #0]
  402e14:	b173      	cbz	r3, 402e34 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402e16:	2300      	movs	r3, #0
  402e18:	9303      	str	r3, [sp, #12]
  402e1a:	9302      	str	r3, [sp, #8]
  402e1c:	9301      	str	r3, [sp, #4]
  402e1e:	2204      	movs	r2, #4
  402e20:	9200      	str	r2, [sp, #0]
  402e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402e26:	490b      	ldr	r1, [pc, #44]	; (402e54 <xTimerCreateTimerTask+0x4c>)
  402e28:	480b      	ldr	r0, [pc, #44]	; (402e58 <xTimerCreateTimerTask+0x50>)
  402e2a:	4c0c      	ldr	r4, [pc, #48]	; (402e5c <xTimerCreateTimerTask+0x54>)
  402e2c:	47a0      	blx	r4
	configASSERT( xReturn );
  402e2e:	b108      	cbz	r0, 402e34 <xTimerCreateTimerTask+0x2c>
}
  402e30:	b004      	add	sp, #16
  402e32:	bd10      	pop	{r4, pc}
  402e34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e38:	b672      	cpsid	i
  402e3a:	f383 8811 	msr	BASEPRI, r3
  402e3e:	f3bf 8f6f 	isb	sy
  402e42:	f3bf 8f4f 	dsb	sy
  402e46:	b662      	cpsie	i
  402e48:	e7fe      	b.n	402e48 <xTimerCreateTimerTask+0x40>
  402e4a:	bf00      	nop
  402e4c:	00402d85 	.word	0x00402d85
  402e50:	20400e04 	.word	0x20400e04
  402e54:	0040ac1c 	.word	0x0040ac1c
  402e58:	00402f89 	.word	0x00402f89
  402e5c:	004021ed 	.word	0x004021ed

00402e60 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402e60:	b1d8      	cbz	r0, 402e9a <xTimerGenericCommand+0x3a>
{
  402e62:	b530      	push	{r4, r5, lr}
  402e64:	b085      	sub	sp, #20
  402e66:	4615      	mov	r5, r2
  402e68:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402e6a:	4a15      	ldr	r2, [pc, #84]	; (402ec0 <xTimerGenericCommand+0x60>)
  402e6c:	6810      	ldr	r0, [r2, #0]
  402e6e:	b320      	cbz	r0, 402eba <xTimerGenericCommand+0x5a>
  402e70:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402e72:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402e74:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402e76:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402e78:	2905      	cmp	r1, #5
  402e7a:	dc19      	bgt.n	402eb0 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402e7c:	4b11      	ldr	r3, [pc, #68]	; (402ec4 <xTimerGenericCommand+0x64>)
  402e7e:	4798      	blx	r3
  402e80:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402e82:	f04f 0300 	mov.w	r3, #0
  402e86:	bf0c      	ite	eq
  402e88:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402e8a:	461a      	movne	r2, r3
  402e8c:	4669      	mov	r1, sp
  402e8e:	480c      	ldr	r0, [pc, #48]	; (402ec0 <xTimerGenericCommand+0x60>)
  402e90:	6800      	ldr	r0, [r0, #0]
  402e92:	4c0d      	ldr	r4, [pc, #52]	; (402ec8 <xTimerGenericCommand+0x68>)
  402e94:	47a0      	blx	r4
}
  402e96:	b005      	add	sp, #20
  402e98:	bd30      	pop	{r4, r5, pc}
  402e9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e9e:	b672      	cpsid	i
  402ea0:	f383 8811 	msr	BASEPRI, r3
  402ea4:	f3bf 8f6f 	isb	sy
  402ea8:	f3bf 8f4f 	dsb	sy
  402eac:	b662      	cpsie	i
  402eae:	e7fe      	b.n	402eae <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402eb0:	2300      	movs	r3, #0
  402eb2:	4669      	mov	r1, sp
  402eb4:	4c05      	ldr	r4, [pc, #20]	; (402ecc <xTimerGenericCommand+0x6c>)
  402eb6:	47a0      	blx	r4
  402eb8:	e7ed      	b.n	402e96 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402eba:	2000      	movs	r0, #0
	return xReturn;
  402ebc:	e7eb      	b.n	402e96 <xTimerGenericCommand+0x36>
  402ebe:	bf00      	nop
  402ec0:	20400e04 	.word	0x20400e04
  402ec4:	00402b9d 	.word	0x00402b9d
  402ec8:	00401c29 	.word	0x00401c29
  402ecc:	00401e0d 	.word	0x00401e0d

00402ed0 <prvSampleTimeNow>:
{
  402ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ed4:	b082      	sub	sp, #8
  402ed6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402ed8:	4b24      	ldr	r3, [pc, #144]	; (402f6c <prvSampleTimeNow+0x9c>)
  402eda:	4798      	blx	r3
  402edc:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402ede:	4b24      	ldr	r3, [pc, #144]	; (402f70 <prvSampleTimeNow+0xa0>)
  402ee0:	681b      	ldr	r3, [r3, #0]
  402ee2:	4298      	cmp	r0, r3
  402ee4:	d31b      	bcc.n	402f1e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402ee6:	2300      	movs	r3, #0
  402ee8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402eec:	4b20      	ldr	r3, [pc, #128]	; (402f70 <prvSampleTimeNow+0xa0>)
  402eee:	601f      	str	r7, [r3, #0]
}
  402ef0:	4638      	mov	r0, r7
  402ef2:	b002      	add	sp, #8
  402ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402ef8:	2100      	movs	r1, #0
  402efa:	9100      	str	r1, [sp, #0]
  402efc:	460b      	mov	r3, r1
  402efe:	4652      	mov	r2, sl
  402f00:	4620      	mov	r0, r4
  402f02:	4c1c      	ldr	r4, [pc, #112]	; (402f74 <prvSampleTimeNow+0xa4>)
  402f04:	47a0      	blx	r4
				configASSERT( xResult );
  402f06:	b960      	cbnz	r0, 402f22 <prvSampleTimeNow+0x52>
  402f08:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f0c:	b672      	cpsid	i
  402f0e:	f383 8811 	msr	BASEPRI, r3
  402f12:	f3bf 8f6f 	isb	sy
  402f16:	f3bf 8f4f 	dsb	sy
  402f1a:	b662      	cpsie	i
  402f1c:	e7fe      	b.n	402f1c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402f1e:	4d16      	ldr	r5, [pc, #88]	; (402f78 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f20:	4e16      	ldr	r6, [pc, #88]	; (402f7c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402f22:	682b      	ldr	r3, [r5, #0]
  402f24:	681a      	ldr	r2, [r3, #0]
  402f26:	b1c2      	cbz	r2, 402f5a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f28:	68db      	ldr	r3, [r3, #12]
  402f2a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f2e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f30:	f104 0904 	add.w	r9, r4, #4
  402f34:	4648      	mov	r0, r9
  402f36:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f3a:	4620      	mov	r0, r4
  402f3c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f3e:	69e3      	ldr	r3, [r4, #28]
  402f40:	2b01      	cmp	r3, #1
  402f42:	d1ee      	bne.n	402f22 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402f44:	69a3      	ldr	r3, [r4, #24]
  402f46:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402f48:	459a      	cmp	sl, r3
  402f4a:	d2d5      	bcs.n	402ef8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402f4c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f4e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f50:	4649      	mov	r1, r9
  402f52:	6828      	ldr	r0, [r5, #0]
  402f54:	4b0a      	ldr	r3, [pc, #40]	; (402f80 <prvSampleTimeNow+0xb0>)
  402f56:	4798      	blx	r3
  402f58:	e7e3      	b.n	402f22 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402f5a:	4a0a      	ldr	r2, [pc, #40]	; (402f84 <prvSampleTimeNow+0xb4>)
  402f5c:	6810      	ldr	r0, [r2, #0]
  402f5e:	4906      	ldr	r1, [pc, #24]	; (402f78 <prvSampleTimeNow+0xa8>)
  402f60:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402f62:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402f64:	2301      	movs	r3, #1
  402f66:	f8c8 3000 	str.w	r3, [r8]
  402f6a:	e7bf      	b.n	402eec <prvSampleTimeNow+0x1c>
  402f6c:	004024c1 	.word	0x004024c1
  402f70:	20400e00 	.word	0x20400e00
  402f74:	00402e61 	.word	0x00402e61
  402f78:	20400dd0 	.word	0x20400dd0
  402f7c:	004015a9 	.word	0x004015a9
  402f80:	00401575 	.word	0x00401575
  402f84:	20400dd4 	.word	0x20400dd4

00402f88 <prvTimerTask>:
{
  402f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f8c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f8e:	4e75      	ldr	r6, [pc, #468]	; (403164 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402f90:	4f75      	ldr	r7, [pc, #468]	; (403168 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402f92:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403190 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f96:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403194 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f9a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402f9c:	681a      	ldr	r2, [r3, #0]
  402f9e:	2a00      	cmp	r2, #0
  402fa0:	f000 80ce 	beq.w	403140 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fa4:	68db      	ldr	r3, [r3, #12]
  402fa6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402fa8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402faa:	a804      	add	r0, sp, #16
  402fac:	4b6f      	ldr	r3, [pc, #444]	; (40316c <prvTimerTask+0x1e4>)
  402fae:	4798      	blx	r3
  402fb0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402fb2:	9b04      	ldr	r3, [sp, #16]
  402fb4:	2b00      	cmp	r3, #0
  402fb6:	d144      	bne.n	403042 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402fb8:	42a0      	cmp	r0, r4
  402fba:	d212      	bcs.n	402fe2 <prvTimerTask+0x5a>
  402fbc:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402fbe:	1b61      	subs	r1, r4, r5
  402fc0:	4b6b      	ldr	r3, [pc, #428]	; (403170 <prvTimerTask+0x1e8>)
  402fc2:	6818      	ldr	r0, [r3, #0]
  402fc4:	4b6b      	ldr	r3, [pc, #428]	; (403174 <prvTimerTask+0x1ec>)
  402fc6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402fc8:	4b6b      	ldr	r3, [pc, #428]	; (403178 <prvTimerTask+0x1f0>)
  402fca:	4798      	blx	r3
  402fcc:	2800      	cmp	r0, #0
  402fce:	d13a      	bne.n	403046 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402fd4:	f8c9 3000 	str.w	r3, [r9]
  402fd8:	f3bf 8f4f 	dsb	sy
  402fdc:	f3bf 8f6f 	isb	sy
  402fe0:	e031      	b.n	403046 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402fe2:	4b65      	ldr	r3, [pc, #404]	; (403178 <prvTimerTask+0x1f0>)
  402fe4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fe6:	6833      	ldr	r3, [r6, #0]
  402fe8:	68db      	ldr	r3, [r3, #12]
  402fea:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fee:	f10a 0004 	add.w	r0, sl, #4
  402ff2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402ff4:	f8da 301c 	ldr.w	r3, [sl, #28]
  402ff8:	2b01      	cmp	r3, #1
  402ffa:	d004      	beq.n	403006 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402ffc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403000:	4650      	mov	r0, sl
  403002:	4798      	blx	r3
  403004:	e01f      	b.n	403046 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403006:	f8da 1018 	ldr.w	r1, [sl, #24]
  40300a:	4623      	mov	r3, r4
  40300c:	462a      	mov	r2, r5
  40300e:	4421      	add	r1, r4
  403010:	4650      	mov	r0, sl
  403012:	4d5a      	ldr	r5, [pc, #360]	; (40317c <prvTimerTask+0x1f4>)
  403014:	47a8      	blx	r5
  403016:	2801      	cmp	r0, #1
  403018:	d1f0      	bne.n	402ffc <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40301a:	2100      	movs	r1, #0
  40301c:	9100      	str	r1, [sp, #0]
  40301e:	460b      	mov	r3, r1
  403020:	4622      	mov	r2, r4
  403022:	4650      	mov	r0, sl
  403024:	4c56      	ldr	r4, [pc, #344]	; (403180 <prvTimerTask+0x1f8>)
  403026:	47a0      	blx	r4
			configASSERT( xResult );
  403028:	2800      	cmp	r0, #0
  40302a:	d1e7      	bne.n	402ffc <prvTimerTask+0x74>
  40302c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403030:	b672      	cpsid	i
  403032:	f383 8811 	msr	BASEPRI, r3
  403036:	f3bf 8f6f 	isb	sy
  40303a:	f3bf 8f4f 	dsb	sy
  40303e:	b662      	cpsie	i
  403040:	e7fe      	b.n	403040 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403042:	4b4d      	ldr	r3, [pc, #308]	; (403178 <prvTimerTask+0x1f0>)
  403044:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403046:	4d4a      	ldr	r5, [pc, #296]	; (403170 <prvTimerTask+0x1e8>)
  403048:	4c4e      	ldr	r4, [pc, #312]	; (403184 <prvTimerTask+0x1fc>)
  40304a:	e006      	b.n	40305a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40304c:	9907      	ldr	r1, [sp, #28]
  40304e:	9806      	ldr	r0, [sp, #24]
  403050:	9b05      	ldr	r3, [sp, #20]
  403052:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403054:	9b04      	ldr	r3, [sp, #16]
  403056:	2b00      	cmp	r3, #0
  403058:	da09      	bge.n	40306e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40305a:	2300      	movs	r3, #0
  40305c:	461a      	mov	r2, r3
  40305e:	a904      	add	r1, sp, #16
  403060:	6828      	ldr	r0, [r5, #0]
  403062:	47a0      	blx	r4
  403064:	2800      	cmp	r0, #0
  403066:	d098      	beq.n	402f9a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403068:	9b04      	ldr	r3, [sp, #16]
  40306a:	2b00      	cmp	r3, #0
  40306c:	dbee      	blt.n	40304c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40306e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403072:	f8da 3014 	ldr.w	r3, [sl, #20]
  403076:	b113      	cbz	r3, 40307e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403078:	f10a 0004 	add.w	r0, sl, #4
  40307c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40307e:	a803      	add	r0, sp, #12
  403080:	4b3a      	ldr	r3, [pc, #232]	; (40316c <prvTimerTask+0x1e4>)
  403082:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403084:	9b04      	ldr	r3, [sp, #16]
  403086:	2b09      	cmp	r3, #9
  403088:	d8e7      	bhi.n	40305a <prvTimerTask+0xd2>
  40308a:	a201      	add	r2, pc, #4	; (adr r2, 403090 <prvTimerTask+0x108>)
  40308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403090:	004030b9 	.word	0x004030b9
  403094:	004030b9 	.word	0x004030b9
  403098:	004030b9 	.word	0x004030b9
  40309c:	0040305b 	.word	0x0040305b
  4030a0:	0040310d 	.word	0x0040310d
  4030a4:	00403139 	.word	0x00403139
  4030a8:	004030b9 	.word	0x004030b9
  4030ac:	004030b9 	.word	0x004030b9
  4030b0:	0040305b 	.word	0x0040305b
  4030b4:	0040310d 	.word	0x0040310d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4030b8:	9c05      	ldr	r4, [sp, #20]
  4030ba:	f8da 1018 	ldr.w	r1, [sl, #24]
  4030be:	4623      	mov	r3, r4
  4030c0:	4602      	mov	r2, r0
  4030c2:	4421      	add	r1, r4
  4030c4:	4650      	mov	r0, sl
  4030c6:	4c2d      	ldr	r4, [pc, #180]	; (40317c <prvTimerTask+0x1f4>)
  4030c8:	47a0      	blx	r4
  4030ca:	2801      	cmp	r0, #1
  4030cc:	d1bc      	bne.n	403048 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4030ce:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4030d2:	4650      	mov	r0, sl
  4030d4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4030d6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4030da:	2b01      	cmp	r3, #1
  4030dc:	d1b4      	bne.n	403048 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4030de:	f8da 2018 	ldr.w	r2, [sl, #24]
  4030e2:	2100      	movs	r1, #0
  4030e4:	9100      	str	r1, [sp, #0]
  4030e6:	460b      	mov	r3, r1
  4030e8:	9805      	ldr	r0, [sp, #20]
  4030ea:	4402      	add	r2, r0
  4030ec:	4650      	mov	r0, sl
  4030ee:	4c24      	ldr	r4, [pc, #144]	; (403180 <prvTimerTask+0x1f8>)
  4030f0:	47a0      	blx	r4
							configASSERT( xResult );
  4030f2:	2800      	cmp	r0, #0
  4030f4:	d1a8      	bne.n	403048 <prvTimerTask+0xc0>
  4030f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030fa:	b672      	cpsid	i
  4030fc:	f383 8811 	msr	BASEPRI, r3
  403100:	f3bf 8f6f 	isb	sy
  403104:	f3bf 8f4f 	dsb	sy
  403108:	b662      	cpsie	i
  40310a:	e7fe      	b.n	40310a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40310c:	9905      	ldr	r1, [sp, #20]
  40310e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403112:	b131      	cbz	r1, 403122 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403114:	4603      	mov	r3, r0
  403116:	4602      	mov	r2, r0
  403118:	4401      	add	r1, r0
  40311a:	4650      	mov	r0, sl
  40311c:	4c17      	ldr	r4, [pc, #92]	; (40317c <prvTimerTask+0x1f4>)
  40311e:	47a0      	blx	r4
  403120:	e792      	b.n	403048 <prvTimerTask+0xc0>
  403122:	f04f 0380 	mov.w	r3, #128	; 0x80
  403126:	b672      	cpsid	i
  403128:	f383 8811 	msr	BASEPRI, r3
  40312c:	f3bf 8f6f 	isb	sy
  403130:	f3bf 8f4f 	dsb	sy
  403134:	b662      	cpsie	i
  403136:	e7fe      	b.n	403136 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403138:	4650      	mov	r0, sl
  40313a:	4b13      	ldr	r3, [pc, #76]	; (403188 <prvTimerTask+0x200>)
  40313c:	4798      	blx	r3
  40313e:	e783      	b.n	403048 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403140:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403142:	a804      	add	r0, sp, #16
  403144:	4b09      	ldr	r3, [pc, #36]	; (40316c <prvTimerTask+0x1e4>)
  403146:	4798      	blx	r3
  403148:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40314a:	9b04      	ldr	r3, [sp, #16]
  40314c:	2b00      	cmp	r3, #0
  40314e:	f47f af78 	bne.w	403042 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403152:	4b0e      	ldr	r3, [pc, #56]	; (40318c <prvTimerTask+0x204>)
  403154:	681b      	ldr	r3, [r3, #0]
  403156:	681a      	ldr	r2, [r3, #0]
  403158:	fab2 f282 	clz	r2, r2
  40315c:	0952      	lsrs	r2, r2, #5
  40315e:	2400      	movs	r4, #0
  403160:	e72d      	b.n	402fbe <prvTimerTask+0x36>
  403162:	bf00      	nop
  403164:	20400dd0 	.word	0x20400dd0
  403168:	004024b1 	.word	0x004024b1
  40316c:	00402ed1 	.word	0x00402ed1
  403170:	20400e04 	.word	0x20400e04
  403174:	00402111 	.word	0x00402111
  403178:	00402619 	.word	0x00402619
  40317c:	00402d39 	.word	0x00402d39
  403180:	00402e61 	.word	0x00402e61
  403184:	00401f0d 	.word	0x00401f0d
  403188:	00401919 	.word	0x00401919
  40318c:	20400dd4 	.word	0x20400dd4
  403190:	e000ed04 	.word	0xe000ed04
  403194:	004015a9 	.word	0x004015a9

00403198 <but_callback>:
	
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS){
	}
}

void but_callback(void) {
  403198:	b510      	push	{r4, lr}
  40319a:	b082      	sub	sp, #8
	int active = 1;
  40319c:	a902      	add	r1, sp, #8
  40319e:	2301      	movs	r3, #1
  4031a0:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR(xQueuePing, &active, &xHigherPriorityTaskWoken);
  4031a4:	2300      	movs	r3, #0
  4031a6:	4a03      	ldr	r2, [pc, #12]	; (4031b4 <but_callback+0x1c>)
  4031a8:	4803      	ldr	r0, [pc, #12]	; (4031b8 <but_callback+0x20>)
  4031aa:	6800      	ldr	r0, [r0, #0]
  4031ac:	4c03      	ldr	r4, [pc, #12]	; (4031bc <but_callback+0x24>)
  4031ae:	47a0      	blx	r4
}
  4031b0:	b002      	add	sp, #8
  4031b2:	bd10      	pop	{r4, pc}
  4031b4:	20400074 	.word	0x20400074
  4031b8:	20400eb4 	.word	0x20400eb4
  4031bc:	00401e0d 	.word	0x00401e0d

004031c0 <echo_callback>:

void echo_callback(void){
  4031c0:	b510      	push	{r4, lr}
  4031c2:	b082      	sub	sp, #8
	if(pio_get(EC_PIO, PIO_INPUT, EC_MASK)){
  4031c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4031c8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4031cc:	4819      	ldr	r0, [pc, #100]	; (403234 <echo_callback+0x74>)
  4031ce:	4b1a      	ldr	r3, [pc, #104]	; (403238 <echo_callback+0x78>)
  4031d0:	4798      	blx	r3
  4031d2:	b9b0      	cbnz	r0, 403202 <echo_callback+0x42>
		RTT_init(32768, 0, 0);
	} else {
		float ul_result = rtt_read_timer_value(RTT) / 32768.0;
  4031d4:	4819      	ldr	r0, [pc, #100]	; (40323c <echo_callback+0x7c>)
  4031d6:	4b1a      	ldr	r3, [pc, #104]	; (403240 <echo_callback+0x80>)
  4031d8:	4798      	blx	r3
  4031da:	4b1a      	ldr	r3, [pc, #104]	; (403244 <echo_callback+0x84>)
  4031dc:	4798      	blx	r3
  4031de:	2200      	movs	r2, #0
  4031e0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4031e4:	4c18      	ldr	r4, [pc, #96]	; (403248 <echo_callback+0x88>)
  4031e6:	47a0      	blx	r4
  4031e8:	4b18      	ldr	r3, [pc, #96]	; (40324c <echo_callback+0x8c>)
  4031ea:	4798      	blx	r3
  4031ec:	a902      	add	r1, sp, #8
  4031ee:	f841 0d04 	str.w	r0, [r1, #-4]!
		xQueueSendFromISR(xQueueEcho, &ul_result, &xHigherPriorityTaskWoken);
  4031f2:	2300      	movs	r3, #0
  4031f4:	4a16      	ldr	r2, [pc, #88]	; (403250 <echo_callback+0x90>)
  4031f6:	4817      	ldr	r0, [pc, #92]	; (403254 <echo_callback+0x94>)
  4031f8:	6800      	ldr	r0, [r0, #0]
  4031fa:	4c17      	ldr	r4, [pc, #92]	; (403258 <echo_callback+0x98>)
  4031fc:	47a0      	blx	r4
	}
}
  4031fe:	b002      	add	sp, #8
  403200:	bd10      	pop	{r4, pc}
	rtt_sel_source(RTT, false);
  403202:	4c0e      	ldr	r4, [pc, #56]	; (40323c <echo_callback+0x7c>)
  403204:	2100      	movs	r1, #0
  403206:	4620      	mov	r0, r4
  403208:	4b14      	ldr	r3, [pc, #80]	; (40325c <echo_callback+0x9c>)
  40320a:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  40320c:	2101      	movs	r1, #1
  40320e:	4620      	mov	r0, r4
  403210:	4b13      	ldr	r3, [pc, #76]	; (403260 <echo_callback+0xa0>)
  403212:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403214:	4b13      	ldr	r3, [pc, #76]	; (403264 <echo_callback+0xa4>)
  403216:	2208      	movs	r2, #8
  403218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40321c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403220:	2180      	movs	r1, #128	; 0x80
  403222:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403226:	601a      	str	r2, [r3, #0]
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  403228:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  40322c:	4620      	mov	r0, r4
  40322e:	4b0e      	ldr	r3, [pc, #56]	; (403268 <echo_callback+0xa8>)
  403230:	4798      	blx	r3
  403232:	e7e4      	b.n	4031fe <echo_callback+0x3e>
  403234:	400e1400 	.word	0x400e1400
  403238:	00400ce7 	.word	0x00400ce7
  40323c:	400e1830 	.word	0x400e1830
  403240:	00400201 	.word	0x00400201
  403244:	00403d6d 	.word	0x00403d6d
  403248:	00403e59 	.word	0x00403e59
  40324c:	0040438d 	.word	0x0040438d
  403250:	20400074 	.word	0x20400074
  403254:	20400eb8 	.word	0x20400eb8
  403258:	00401e0d 	.word	0x00401e0d
  40325c:	004001c1 	.word	0x004001c1
  403260:	004001ad 	.word	0x004001ad
  403264:	e000e100 	.word	0xe000e100
  403268:	004001ed 	.word	0x004001ed

0040326c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40326c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40326e:	b083      	sub	sp, #12
  403270:	4605      	mov	r5, r0
  403272:	460c      	mov	r4, r1
	uint32_t val = 0;
  403274:	2300      	movs	r3, #0
  403276:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403278:	4b2a      	ldr	r3, [pc, #168]	; (403324 <usart_serial_getchar+0xb8>)
  40327a:	4298      	cmp	r0, r3
  40327c:	d013      	beq.n	4032a6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40327e:	4b2a      	ldr	r3, [pc, #168]	; (403328 <usart_serial_getchar+0xbc>)
  403280:	4298      	cmp	r0, r3
  403282:	d018      	beq.n	4032b6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403284:	4b29      	ldr	r3, [pc, #164]	; (40332c <usart_serial_getchar+0xc0>)
  403286:	4298      	cmp	r0, r3
  403288:	d01d      	beq.n	4032c6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40328a:	4b29      	ldr	r3, [pc, #164]	; (403330 <usart_serial_getchar+0xc4>)
  40328c:	429d      	cmp	r5, r3
  40328e:	d022      	beq.n	4032d6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403290:	4b28      	ldr	r3, [pc, #160]	; (403334 <usart_serial_getchar+0xc8>)
  403292:	429d      	cmp	r5, r3
  403294:	d027      	beq.n	4032e6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403296:	4b28      	ldr	r3, [pc, #160]	; (403338 <usart_serial_getchar+0xcc>)
  403298:	429d      	cmp	r5, r3
  40329a:	d02e      	beq.n	4032fa <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40329c:	4b27      	ldr	r3, [pc, #156]	; (40333c <usart_serial_getchar+0xd0>)
  40329e:	429d      	cmp	r5, r3
  4032a0:	d035      	beq.n	40330e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4032a2:	b003      	add	sp, #12
  4032a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4032a6:	461f      	mov	r7, r3
  4032a8:	4e25      	ldr	r6, [pc, #148]	; (403340 <usart_serial_getchar+0xd4>)
  4032aa:	4621      	mov	r1, r4
  4032ac:	4638      	mov	r0, r7
  4032ae:	47b0      	blx	r6
  4032b0:	2800      	cmp	r0, #0
  4032b2:	d1fa      	bne.n	4032aa <usart_serial_getchar+0x3e>
  4032b4:	e7e9      	b.n	40328a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4032b6:	461f      	mov	r7, r3
  4032b8:	4e21      	ldr	r6, [pc, #132]	; (403340 <usart_serial_getchar+0xd4>)
  4032ba:	4621      	mov	r1, r4
  4032bc:	4638      	mov	r0, r7
  4032be:	47b0      	blx	r6
  4032c0:	2800      	cmp	r0, #0
  4032c2:	d1fa      	bne.n	4032ba <usart_serial_getchar+0x4e>
  4032c4:	e7e4      	b.n	403290 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4032c6:	461f      	mov	r7, r3
  4032c8:	4e1d      	ldr	r6, [pc, #116]	; (403340 <usart_serial_getchar+0xd4>)
  4032ca:	4621      	mov	r1, r4
  4032cc:	4638      	mov	r0, r7
  4032ce:	47b0      	blx	r6
  4032d0:	2800      	cmp	r0, #0
  4032d2:	d1fa      	bne.n	4032ca <usart_serial_getchar+0x5e>
  4032d4:	e7df      	b.n	403296 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4032d6:	461f      	mov	r7, r3
  4032d8:	4e19      	ldr	r6, [pc, #100]	; (403340 <usart_serial_getchar+0xd4>)
  4032da:	4621      	mov	r1, r4
  4032dc:	4638      	mov	r0, r7
  4032de:	47b0      	blx	r6
  4032e0:	2800      	cmp	r0, #0
  4032e2:	d1fa      	bne.n	4032da <usart_serial_getchar+0x6e>
  4032e4:	e7da      	b.n	40329c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4032e6:	461e      	mov	r6, r3
  4032e8:	4d16      	ldr	r5, [pc, #88]	; (403344 <usart_serial_getchar+0xd8>)
  4032ea:	a901      	add	r1, sp, #4
  4032ec:	4630      	mov	r0, r6
  4032ee:	47a8      	blx	r5
  4032f0:	2800      	cmp	r0, #0
  4032f2:	d1fa      	bne.n	4032ea <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4032f4:	9b01      	ldr	r3, [sp, #4]
  4032f6:	7023      	strb	r3, [r4, #0]
  4032f8:	e7d3      	b.n	4032a2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4032fa:	461e      	mov	r6, r3
  4032fc:	4d11      	ldr	r5, [pc, #68]	; (403344 <usart_serial_getchar+0xd8>)
  4032fe:	a901      	add	r1, sp, #4
  403300:	4630      	mov	r0, r6
  403302:	47a8      	blx	r5
  403304:	2800      	cmp	r0, #0
  403306:	d1fa      	bne.n	4032fe <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403308:	9b01      	ldr	r3, [sp, #4]
  40330a:	7023      	strb	r3, [r4, #0]
  40330c:	e7c9      	b.n	4032a2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40330e:	461e      	mov	r6, r3
  403310:	4d0c      	ldr	r5, [pc, #48]	; (403344 <usart_serial_getchar+0xd8>)
  403312:	a901      	add	r1, sp, #4
  403314:	4630      	mov	r0, r6
  403316:	47a8      	blx	r5
  403318:	2800      	cmp	r0, #0
  40331a:	d1fa      	bne.n	403312 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40331c:	9b01      	ldr	r3, [sp, #4]
  40331e:	7023      	strb	r3, [r4, #0]
}
  403320:	e7bf      	b.n	4032a2 <usart_serial_getchar+0x36>
  403322:	bf00      	nop
  403324:	400e0800 	.word	0x400e0800
  403328:	400e0a00 	.word	0x400e0a00
  40332c:	400e1a00 	.word	0x400e1a00
  403330:	400e1c00 	.word	0x400e1c00
  403334:	40024000 	.word	0x40024000
  403338:	40028000 	.word	0x40028000
  40333c:	4002c000 	.word	0x4002c000
  403340:	0040116b 	.word	0x0040116b
  403344:	00401277 	.word	0x00401277

00403348 <usart_serial_putchar>:
{
  403348:	b570      	push	{r4, r5, r6, lr}
  40334a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40334c:	4b2a      	ldr	r3, [pc, #168]	; (4033f8 <usart_serial_putchar+0xb0>)
  40334e:	4298      	cmp	r0, r3
  403350:	d013      	beq.n	40337a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403352:	4b2a      	ldr	r3, [pc, #168]	; (4033fc <usart_serial_putchar+0xb4>)
  403354:	4298      	cmp	r0, r3
  403356:	d019      	beq.n	40338c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403358:	4b29      	ldr	r3, [pc, #164]	; (403400 <usart_serial_putchar+0xb8>)
  40335a:	4298      	cmp	r0, r3
  40335c:	d01f      	beq.n	40339e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40335e:	4b29      	ldr	r3, [pc, #164]	; (403404 <usart_serial_putchar+0xbc>)
  403360:	4298      	cmp	r0, r3
  403362:	d025      	beq.n	4033b0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403364:	4b28      	ldr	r3, [pc, #160]	; (403408 <usart_serial_putchar+0xc0>)
  403366:	4298      	cmp	r0, r3
  403368:	d02b      	beq.n	4033c2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40336a:	4b28      	ldr	r3, [pc, #160]	; (40340c <usart_serial_putchar+0xc4>)
  40336c:	4298      	cmp	r0, r3
  40336e:	d031      	beq.n	4033d4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403370:	4b27      	ldr	r3, [pc, #156]	; (403410 <usart_serial_putchar+0xc8>)
  403372:	4298      	cmp	r0, r3
  403374:	d037      	beq.n	4033e6 <usart_serial_putchar+0x9e>
	return 0;
  403376:	2000      	movs	r0, #0
}
  403378:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40337a:	461e      	mov	r6, r3
  40337c:	4d25      	ldr	r5, [pc, #148]	; (403414 <usart_serial_putchar+0xcc>)
  40337e:	4621      	mov	r1, r4
  403380:	4630      	mov	r0, r6
  403382:	47a8      	blx	r5
  403384:	2800      	cmp	r0, #0
  403386:	d1fa      	bne.n	40337e <usart_serial_putchar+0x36>
		return 1;
  403388:	2001      	movs	r0, #1
  40338a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40338c:	461e      	mov	r6, r3
  40338e:	4d21      	ldr	r5, [pc, #132]	; (403414 <usart_serial_putchar+0xcc>)
  403390:	4621      	mov	r1, r4
  403392:	4630      	mov	r0, r6
  403394:	47a8      	blx	r5
  403396:	2800      	cmp	r0, #0
  403398:	d1fa      	bne.n	403390 <usart_serial_putchar+0x48>
		return 1;
  40339a:	2001      	movs	r0, #1
  40339c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40339e:	461e      	mov	r6, r3
  4033a0:	4d1c      	ldr	r5, [pc, #112]	; (403414 <usart_serial_putchar+0xcc>)
  4033a2:	4621      	mov	r1, r4
  4033a4:	4630      	mov	r0, r6
  4033a6:	47a8      	blx	r5
  4033a8:	2800      	cmp	r0, #0
  4033aa:	d1fa      	bne.n	4033a2 <usart_serial_putchar+0x5a>
		return 1;
  4033ac:	2001      	movs	r0, #1
  4033ae:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4033b0:	461e      	mov	r6, r3
  4033b2:	4d18      	ldr	r5, [pc, #96]	; (403414 <usart_serial_putchar+0xcc>)
  4033b4:	4621      	mov	r1, r4
  4033b6:	4630      	mov	r0, r6
  4033b8:	47a8      	blx	r5
  4033ba:	2800      	cmp	r0, #0
  4033bc:	d1fa      	bne.n	4033b4 <usart_serial_putchar+0x6c>
		return 1;
  4033be:	2001      	movs	r0, #1
  4033c0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033c2:	461e      	mov	r6, r3
  4033c4:	4d14      	ldr	r5, [pc, #80]	; (403418 <usart_serial_putchar+0xd0>)
  4033c6:	4621      	mov	r1, r4
  4033c8:	4630      	mov	r0, r6
  4033ca:	47a8      	blx	r5
  4033cc:	2800      	cmp	r0, #0
  4033ce:	d1fa      	bne.n	4033c6 <usart_serial_putchar+0x7e>
		return 1;
  4033d0:	2001      	movs	r0, #1
  4033d2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033d4:	461e      	mov	r6, r3
  4033d6:	4d10      	ldr	r5, [pc, #64]	; (403418 <usart_serial_putchar+0xd0>)
  4033d8:	4621      	mov	r1, r4
  4033da:	4630      	mov	r0, r6
  4033dc:	47a8      	blx	r5
  4033de:	2800      	cmp	r0, #0
  4033e0:	d1fa      	bne.n	4033d8 <usart_serial_putchar+0x90>
		return 1;
  4033e2:	2001      	movs	r0, #1
  4033e4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033e6:	461e      	mov	r6, r3
  4033e8:	4d0b      	ldr	r5, [pc, #44]	; (403418 <usart_serial_putchar+0xd0>)
  4033ea:	4621      	mov	r1, r4
  4033ec:	4630      	mov	r0, r6
  4033ee:	47a8      	blx	r5
  4033f0:	2800      	cmp	r0, #0
  4033f2:	d1fa      	bne.n	4033ea <usart_serial_putchar+0xa2>
		return 1;
  4033f4:	2001      	movs	r0, #1
  4033f6:	bd70      	pop	{r4, r5, r6, pc}
  4033f8:	400e0800 	.word	0x400e0800
  4033fc:	400e0a00 	.word	0x400e0a00
  403400:	400e1a00 	.word	0x400e1a00
  403404:	400e1c00 	.word	0x400e1c00
  403408:	40024000 	.word	0x40024000
  40340c:	40028000 	.word	0x40028000
  403410:	4002c000 	.word	0x4002c000
  403414:	00401159 	.word	0x00401159
  403418:	00401261 	.word	0x00401261

0040341c <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  40341c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40341e:	460a      	mov	r2, r1
  403420:	4601      	mov	r1, r0
  403422:	4802      	ldr	r0, [pc, #8]	; (40342c <vApplicationStackOverflowHook+0x10>)
  403424:	4b02      	ldr	r3, [pc, #8]	; (403430 <vApplicationStackOverflowHook+0x14>)
  403426:	4798      	blx	r3
  403428:	e7fe      	b.n	403428 <vApplicationStackOverflowHook+0xc>
  40342a:	bf00      	nop
  40342c:	0040acd8 	.word	0x0040acd8
  403430:	00404be5 	.word	0x00404be5

00403434 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403434:	4770      	bx	lr

00403436 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  403436:	f04f 0380 	mov.w	r3, #128	; 0x80
  40343a:	b672      	cpsid	i
  40343c:	f383 8811 	msr	BASEPRI, r3
  403440:	f3bf 8f6f 	isb	sy
  403444:	f3bf 8f4f 	dsb	sy
  403448:	b662      	cpsie	i
  40344a:	e7fe      	b.n	40344a <vApplicationMallocFailedHook+0x14>

0040344c <RTT_Handler>:
void RTT_Handler(void){
  40344c:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  40344e:	4802      	ldr	r0, [pc, #8]	; (403458 <RTT_Handler+0xc>)
  403450:	4b02      	ldr	r3, [pc, #8]	; (40345c <RTT_Handler+0x10>)
  403452:	4798      	blx	r3
  403454:	bd08      	pop	{r3, pc}
  403456:	bf00      	nop
  403458:	400e1830 	.word	0x400e1830
  40345c:	00400215 	.word	0x00400215

00403460 <trigger>:

void trigger (void){
  403460:	b510      	push	{r4, lr}
	pio_set(TR_PIO, TR_MASK);
  403462:	4c07      	ldr	r4, [pc, #28]	; (403480 <trigger+0x20>)
  403464:	2140      	movs	r1, #64	; 0x40
  403466:	4620      	mov	r0, r4
  403468:	4b06      	ldr	r3, [pc, #24]	; (403484 <trigger+0x24>)
  40346a:	4798      	blx	r3
	delay_us(10);
  40346c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  403470:	4b05      	ldr	r3, [pc, #20]	; (403488 <trigger+0x28>)
  403472:	4798      	blx	r3
	pio_clear(TR_PIO, TR_MASK);
  403474:	2140      	movs	r1, #64	; 0x40
  403476:	4620      	mov	r0, r4
  403478:	4b04      	ldr	r3, [pc, #16]	; (40348c <trigger+0x2c>)
  40347a:	4798      	blx	r3
  40347c:	bd10      	pop	{r4, pc}
  40347e:	bf00      	nop
  403480:	400e0e00 	.word	0x400e0e00
  403484:	00400cdf 	.word	0x00400cdf
  403488:	20400001 	.word	0x20400001
  40348c:	00400ce3 	.word	0x00400ce3

00403490 <task_sensor>:
		}
		vTaskDelay(500 / portTICK_PERIOD_MS);
	}
}

static void task_sensor(void *pvParameters){
  403490:	b570      	push	{r4, r5, r6, lr}
  403492:	ed2d 8b02 	vpush	{d8}
  403496:	b082      	sub	sp, #8
	int ping = 0;
	float ec = 0.0;
  403498:	2300      	movs	r3, #0
  40349a:	9301      	str	r3, [sp, #4]
	float distance = 0.0;
  40349c:	9300      	str	r3, [sp, #0]
	
	for (;;)  {
		trigger();
  40349e:	4e13      	ldr	r6, [pc, #76]	; (4034ec <task_sensor+0x5c>)
		if (xQueueReceive(xQueueEcho, &ec, 0)){
  4034a0:	4d13      	ldr	r5, [pc, #76]	; (4034f0 <task_sensor+0x60>)
			distance = (float)(ec * 340.0) / (2.0);
  4034a2:	ed9f 8a14 	vldr	s16, [pc, #80]	; 4034f4 <task_sensor+0x64>
  4034a6:	e003      	b.n	4034b0 <task_sensor+0x20>
			xQueueSendFromISR(xQueueOled, &distance, &xHigherPriorityTaskWoken);
		}
		vTaskDelay(500 / portTICK_PERIOD_MS);
  4034a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4034ac:	4b12      	ldr	r3, [pc, #72]	; (4034f8 <task_sensor+0x68>)
  4034ae:	4798      	blx	r3
		trigger();
  4034b0:	47b0      	blx	r6
		if (xQueueReceive(xQueueEcho, &ec, 0)){
  4034b2:	2300      	movs	r3, #0
  4034b4:	461a      	mov	r2, r3
  4034b6:	a901      	add	r1, sp, #4
  4034b8:	6828      	ldr	r0, [r5, #0]
  4034ba:	4c10      	ldr	r4, [pc, #64]	; (4034fc <task_sensor+0x6c>)
  4034bc:	47a0      	blx	r4
  4034be:	2800      	cmp	r0, #0
  4034c0:	d0f2      	beq.n	4034a8 <task_sensor+0x18>
			distance = (float)(ec * 340.0) / (2.0);
  4034c2:	eddd 7a01 	vldr	s15, [sp, #4]
  4034c6:	ee67 7a88 	vmul.f32	s15, s15, s16
  4034ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  4034ce:	ee67 7a87 	vmul.f32	s15, s15, s14
  4034d2:	a902      	add	r1, sp, #8
  4034d4:	ee17 3a90 	vmov	r3, s15
  4034d8:	f841 3d08 	str.w	r3, [r1, #-8]!
			xQueueSendFromISR(xQueueOled, &distance, &xHigherPriorityTaskWoken);
  4034dc:	2300      	movs	r3, #0
  4034de:	4a08      	ldr	r2, [pc, #32]	; (403500 <task_sensor+0x70>)
  4034e0:	4808      	ldr	r0, [pc, #32]	; (403504 <task_sensor+0x74>)
  4034e2:	6800      	ldr	r0, [r0, #0]
  4034e4:	4c08      	ldr	r4, [pc, #32]	; (403508 <task_sensor+0x78>)
  4034e6:	47a0      	blx	r4
  4034e8:	e7de      	b.n	4034a8 <task_sensor+0x18>
  4034ea:	bf00      	nop
  4034ec:	00403461 	.word	0x00403461
  4034f0:	20400eb8 	.word	0x20400eb8
  4034f4:	43aa0000 	.word	0x43aa0000
  4034f8:	00402739 	.word	0x00402739
  4034fc:	00401f0d 	.word	0x00401f0d
  403500:	20400074 	.word	0x20400074
  403504:	20400eb0 	.word	0x20400eb0
  403508:	00401e0d 	.word	0x00401e0d

0040350c <reset_oled>:
void reset_oled(){
  40350c:	b510      	push	{r4, lr}
  40350e:	b082      	sub	sp, #8
	gfx_mono_draw_filled_rect(0, 10, 118, 22, GFX_PIXEL_CLR);
  403510:	2000      	movs	r0, #0
  403512:	9000      	str	r0, [sp, #0]
  403514:	2316      	movs	r3, #22
  403516:	2276      	movs	r2, #118	; 0x76
  403518:	210a      	movs	r1, #10
  40351a:	4c02      	ldr	r4, [pc, #8]	; (403524 <reset_oled+0x18>)
  40351c:	47a0      	blx	r4
}
  40351e:	b002      	add	sp, #8
  403520:	bd10      	pop	{r4, pc}
  403522:	bf00      	nop
  403524:	00400551 	.word	0x00400551

00403528 <write_oled>:
void write_oled(char string[], int x, int y){
  403528:	b510      	push	{r4, lr}
	gfx_mono_draw_string(string, x, y, &sysfont);
  40352a:	4b03      	ldr	r3, [pc, #12]	; (403538 <write_oled+0x10>)
  40352c:	b2d2      	uxtb	r2, r2
  40352e:	b2c9      	uxtb	r1, r1
  403530:	4c02      	ldr	r4, [pc, #8]	; (40353c <write_oled+0x14>)
  403532:	47a0      	blx	r4
  403534:	bd10      	pop	{r4, pc}
  403536:	bf00      	nop
  403538:	2040000c 	.word	0x2040000c
  40353c:	00400635 	.word	0x00400635

00403540 <devolve_y>:
int devolve_y(float valor){
  403540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403542:	ed2d 8b02 	vpush	{d8}
  403546:	ee08 0a10 	vmov	s16, r0
	if (valor < 0.1){
  40354a:	4b81      	ldr	r3, [pc, #516]	; (403750 <devolve_y+0x210>)
  40354c:	4798      	blx	r3
  40354e:	4604      	mov	r4, r0
  403550:	460d      	mov	r5, r1
  403552:	a371      	add	r3, pc, #452	; (adr r3, 403718 <devolve_y+0x1d8>)
  403554:	e9d3 2300 	ldrd	r2, r3, [r3]
  403558:	4e7e      	ldr	r6, [pc, #504]	; (403754 <devolve_y+0x214>)
  40355a:	47b0      	blx	r6
  40355c:	2800      	cmp	r0, #0
  40355e:	f040 80d4 	bne.w	40370a <devolve_y+0x1ca>
	else if (valor >= 0.1 & valor < 0.3){
  403562:	f04f 0601 	mov.w	r6, #1
  403566:	a36c      	add	r3, pc, #432	; (adr r3, 403718 <devolve_y+0x1d8>)
  403568:	e9d3 2300 	ldrd	r2, r3, [r3]
  40356c:	4620      	mov	r0, r4
  40356e:	4629      	mov	r1, r5
  403570:	4f79      	ldr	r7, [pc, #484]	; (403758 <devolve_y+0x218>)
  403572:	47b8      	blx	r7
  403574:	b908      	cbnz	r0, 40357a <devolve_y+0x3a>
  403576:	f04f 0600 	mov.w	r6, #0
  40357a:	b2f6      	uxtb	r6, r6
  40357c:	b17e      	cbz	r6, 40359e <devolve_y+0x5e>
  40357e:	f04f 0601 	mov.w	r6, #1
  403582:	a367      	add	r3, pc, #412	; (adr r3, 403720 <devolve_y+0x1e0>)
  403584:	e9d3 2300 	ldrd	r2, r3, [r3]
  403588:	4620      	mov	r0, r4
  40358a:	4629      	mov	r1, r5
  40358c:	4f71      	ldr	r7, [pc, #452]	; (403754 <devolve_y+0x214>)
  40358e:	47b8      	blx	r7
  403590:	b908      	cbnz	r0, 403596 <devolve_y+0x56>
  403592:	f04f 0600 	mov.w	r6, #0
  403596:	b2f6      	uxtb	r6, r6
  403598:	b10e      	cbz	r6, 40359e <devolve_y+0x5e>
		return 24;
  40359a:	2018      	movs	r0, #24
  40359c:	e0b6      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 0.3 & valor < 0.5){
  40359e:	f04f 0601 	mov.w	r6, #1
  4035a2:	a35f      	add	r3, pc, #380	; (adr r3, 403720 <devolve_y+0x1e0>)
  4035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035a8:	4620      	mov	r0, r4
  4035aa:	4629      	mov	r1, r5
  4035ac:	4f6a      	ldr	r7, [pc, #424]	; (403758 <devolve_y+0x218>)
  4035ae:	47b8      	blx	r7
  4035b0:	b908      	cbnz	r0, 4035b6 <devolve_y+0x76>
  4035b2:	f04f 0600 	mov.w	r6, #0
  4035b6:	b2f6      	uxtb	r6, r6
  4035b8:	b146      	cbz	r6, 4035cc <devolve_y+0x8c>
  4035ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  4035be:	eeb4 8ae7 	vcmpe.f32	s16, s15
  4035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4035c6:	d501      	bpl.n	4035cc <devolve_y+0x8c>
		return 23;
  4035c8:	2017      	movs	r0, #23
  4035ca:	e09f      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 0.5 & valor < 0.7){
  4035cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  4035d0:	eeb4 8a67 	vcmp.f32	s16, s15
  4035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4035d8:	db0f      	blt.n	4035fa <devolve_y+0xba>
  4035da:	f04f 0601 	mov.w	r6, #1
  4035de:	a352      	add	r3, pc, #328	; (adr r3, 403728 <devolve_y+0x1e8>)
  4035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035e4:	4620      	mov	r0, r4
  4035e6:	4629      	mov	r1, r5
  4035e8:	4f5a      	ldr	r7, [pc, #360]	; (403754 <devolve_y+0x214>)
  4035ea:	47b8      	blx	r7
  4035ec:	b908      	cbnz	r0, 4035f2 <devolve_y+0xb2>
  4035ee:	f04f 0600 	mov.w	r6, #0
  4035f2:	b2f6      	uxtb	r6, r6
  4035f4:	b10e      	cbz	r6, 4035fa <devolve_y+0xba>
		return 22;
  4035f6:	2016      	movs	r0, #22
  4035f8:	e088      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 0.7 & valor < 0.9){
  4035fa:	f04f 0601 	mov.w	r6, #1
  4035fe:	a34a      	add	r3, pc, #296	; (adr r3, 403728 <devolve_y+0x1e8>)
  403600:	e9d3 2300 	ldrd	r2, r3, [r3]
  403604:	4620      	mov	r0, r4
  403606:	4629      	mov	r1, r5
  403608:	4f53      	ldr	r7, [pc, #332]	; (403758 <devolve_y+0x218>)
  40360a:	47b8      	blx	r7
  40360c:	b908      	cbnz	r0, 403612 <devolve_y+0xd2>
  40360e:	f04f 0600 	mov.w	r6, #0
  403612:	b2f6      	uxtb	r6, r6
  403614:	b17e      	cbz	r6, 403636 <devolve_y+0xf6>
  403616:	f04f 0601 	mov.w	r6, #1
  40361a:	a345      	add	r3, pc, #276	; (adr r3, 403730 <devolve_y+0x1f0>)
  40361c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403620:	4620      	mov	r0, r4
  403622:	4629      	mov	r1, r5
  403624:	4f4b      	ldr	r7, [pc, #300]	; (403754 <devolve_y+0x214>)
  403626:	47b8      	blx	r7
  403628:	b908      	cbnz	r0, 40362e <devolve_y+0xee>
  40362a:	f04f 0600 	mov.w	r6, #0
  40362e:	b2f6      	uxtb	r6, r6
  403630:	b10e      	cbz	r6, 403636 <devolve_y+0xf6>
		return 19;
  403632:	2013      	movs	r0, #19
  403634:	e06a      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 0.9 & valor < 1.1){
  403636:	f04f 0601 	mov.w	r6, #1
  40363a:	a33d      	add	r3, pc, #244	; (adr r3, 403730 <devolve_y+0x1f0>)
  40363c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403640:	4620      	mov	r0, r4
  403642:	4629      	mov	r1, r5
  403644:	4f44      	ldr	r7, [pc, #272]	; (403758 <devolve_y+0x218>)
  403646:	47b8      	blx	r7
  403648:	b908      	cbnz	r0, 40364e <devolve_y+0x10e>
  40364a:	f04f 0600 	mov.w	r6, #0
  40364e:	b2f6      	uxtb	r6, r6
  403650:	b17e      	cbz	r6, 403672 <devolve_y+0x132>
  403652:	f04f 0601 	mov.w	r6, #1
  403656:	a338      	add	r3, pc, #224	; (adr r3, 403738 <devolve_y+0x1f8>)
  403658:	e9d3 2300 	ldrd	r2, r3, [r3]
  40365c:	4620      	mov	r0, r4
  40365e:	4629      	mov	r1, r5
  403660:	4f3c      	ldr	r7, [pc, #240]	; (403754 <devolve_y+0x214>)
  403662:	47b8      	blx	r7
  403664:	b908      	cbnz	r0, 40366a <devolve_y+0x12a>
  403666:	f04f 0600 	mov.w	r6, #0
  40366a:	b2f6      	uxtb	r6, r6
  40366c:	b10e      	cbz	r6, 403672 <devolve_y+0x132>
		return 18;
  40366e:	2012      	movs	r0, #18
  403670:	e04c      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 1.1 & valor < 1.3){
  403672:	f04f 0601 	mov.w	r6, #1
  403676:	a330      	add	r3, pc, #192	; (adr r3, 403738 <devolve_y+0x1f8>)
  403678:	e9d3 2300 	ldrd	r2, r3, [r3]
  40367c:	4620      	mov	r0, r4
  40367e:	4629      	mov	r1, r5
  403680:	4f35      	ldr	r7, [pc, #212]	; (403758 <devolve_y+0x218>)
  403682:	47b8      	blx	r7
  403684:	b908      	cbnz	r0, 40368a <devolve_y+0x14a>
  403686:	f04f 0600 	mov.w	r6, #0
  40368a:	b2f6      	uxtb	r6, r6
  40368c:	b17e      	cbz	r6, 4036ae <devolve_y+0x16e>
  40368e:	f04f 0601 	mov.w	r6, #1
  403692:	a32b      	add	r3, pc, #172	; (adr r3, 403740 <devolve_y+0x200>)
  403694:	e9d3 2300 	ldrd	r2, r3, [r3]
  403698:	4620      	mov	r0, r4
  40369a:	4629      	mov	r1, r5
  40369c:	4f2d      	ldr	r7, [pc, #180]	; (403754 <devolve_y+0x214>)
  40369e:	47b8      	blx	r7
  4036a0:	b908      	cbnz	r0, 4036a6 <devolve_y+0x166>
  4036a2:	f04f 0600 	mov.w	r6, #0
  4036a6:	b2f6      	uxtb	r6, r6
  4036a8:	b10e      	cbz	r6, 4036ae <devolve_y+0x16e>
		return 17;
  4036aa:	2011      	movs	r0, #17
  4036ac:	e02e      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 1.3 & valor < 1.5){
  4036ae:	f04f 0601 	mov.w	r6, #1
  4036b2:	a323      	add	r3, pc, #140	; (adr r3, 403740 <devolve_y+0x200>)
  4036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036b8:	4620      	mov	r0, r4
  4036ba:	4629      	mov	r1, r5
  4036bc:	4f26      	ldr	r7, [pc, #152]	; (403758 <devolve_y+0x218>)
  4036be:	47b8      	blx	r7
  4036c0:	b908      	cbnz	r0, 4036c6 <devolve_y+0x186>
  4036c2:	f04f 0600 	mov.w	r6, #0
  4036c6:	b2f6      	uxtb	r6, r6
  4036c8:	b146      	cbz	r6, 4036dc <devolve_y+0x19c>
  4036ca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
  4036ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
  4036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4036d6:	d501      	bpl.n	4036dc <devolve_y+0x19c>
		return 16;
  4036d8:	2010      	movs	r0, #16
  4036da:	e017      	b.n	40370c <devolve_y+0x1cc>
	else if (valor >= 1.5 & valor < 1.7){
  4036dc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
  4036e0:	eeb4 8a67 	vcmp.f32	s16, s15
  4036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4036e8:	db10      	blt.n	40370c <devolve_y+0x1cc>
  4036ea:	f04f 0601 	mov.w	r6, #1
  4036ee:	a316      	add	r3, pc, #88	; (adr r3, 403748 <devolve_y+0x208>)
  4036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036f4:	4620      	mov	r0, r4
  4036f6:	4629      	mov	r1, r5
  4036f8:	4c16      	ldr	r4, [pc, #88]	; (403754 <devolve_y+0x214>)
  4036fa:	47a0      	blx	r4
  4036fc:	b908      	cbnz	r0, 403702 <devolve_y+0x1c2>
  4036fe:	f04f 0600 	mov.w	r6, #0
  403702:	b2f6      	uxtb	r6, r6
  403704:	b116      	cbz	r6, 40370c <devolve_y+0x1cc>
		return 15;
  403706:	200f      	movs	r0, #15
  403708:	e000      	b.n	40370c <devolve_y+0x1cc>
		return 25;
  40370a:	2019      	movs	r0, #25
}
  40370c:	ecbd 8b02 	vpop	{d8}
  403710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403712:	bf00      	nop
  403714:	f3af 8000 	nop.w
  403718:	9999999a 	.word	0x9999999a
  40371c:	3fb99999 	.word	0x3fb99999
  403720:	33333333 	.word	0x33333333
  403724:	3fd33333 	.word	0x3fd33333
  403728:	66666666 	.word	0x66666666
  40372c:	3fe66666 	.word	0x3fe66666
  403730:	cccccccd 	.word	0xcccccccd
  403734:	3feccccc 	.word	0x3feccccc
  403738:	9999999a 	.word	0x9999999a
  40373c:	3ff19999 	.word	0x3ff19999
  403740:	cccccccd 	.word	0xcccccccd
  403744:	3ff4cccc 	.word	0x3ff4cccc
  403748:	33333333 	.word	0x33333333
  40374c:	3ffb3333 	.word	0x3ffb3333
  403750:	00403db1 	.word	0x00403db1
  403754:	0040433d 	.word	0x0040433d
  403758:	00404365 	.word	0x00404365

0040375c <graph>:
void graph(int w, int h){
  40375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403760:	b087      	sub	sp, #28
  403762:	9004      	str	r0, [sp, #16]
  403764:	9105      	str	r1, [sp, #20]
  403766:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4037f4 <graph+0x98>
  40376a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4037f8 <graph+0x9c>
  40376e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 4037fc <graph+0xa0>
		printf("%d\n", valor);
  403772:	4d19      	ldr	r5, [pc, #100]	; (4037d8 <graph+0x7c>)
  403774:	4654      	mov	r4, sl
		int valor = devolve_y(lista_distancia[l]);
  403776:	f85a 0b04 	ldr.w	r0, [sl], #4
  40377a:	4b18      	ldr	r3, [pc, #96]	; (4037dc <graph+0x80>)
  40377c:	4798      	blx	r3
  40377e:	4601      	mov	r1, r0
  403780:	9002      	str	r0, [sp, #8]
		printf("%d\n", valor);
  403782:	4817      	ldr	r0, [pc, #92]	; (4037e0 <graph+0x84>)
  403784:	47a8      	blx	r5
		printf("%f\n", lista_distancia[l]);
  403786:	6820      	ldr	r0, [r4, #0]
  403788:	4b16      	ldr	r3, [pc, #88]	; (4037e4 <graph+0x88>)
  40378a:	4798      	blx	r3
  40378c:	4602      	mov	r2, r0
  40378e:	460b      	mov	r3, r1
  403790:	4815      	ldr	r0, [pc, #84]	; (4037e8 <graph+0x8c>)
  403792:	47a8      	blx	r5
		for (int i = lista_eixo_min[l]; i < lista_eixo_max[l]; i+=2){
  403794:	f858 4b04 	ldr.w	r4, [r8], #4
  403798:	465e      	mov	r6, fp
  40379a:	f8db 3000 	ldr.w	r3, [fp]
  40379e:	429c      	cmp	r4, r3
  4037a0:	da11      	bge.n	4037c6 <graph+0x6a>
			gfx_mono_draw_rect(i, valor, w, h, GFX_PIXEL_SET);
  4037a2:	f89d 9014 	ldrb.w	r9, [sp, #20]
  4037a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4037aa:	9303      	str	r3, [sp, #12]
  4037ac:	4f0f      	ldr	r7, [pc, #60]	; (4037ec <graph+0x90>)
  4037ae:	2301      	movs	r3, #1
  4037b0:	9300      	str	r3, [sp, #0]
  4037b2:	464b      	mov	r3, r9
  4037b4:	9a03      	ldr	r2, [sp, #12]
  4037b6:	f89d 1008 	ldrb.w	r1, [sp, #8]
  4037ba:	b2e0      	uxtb	r0, r4
  4037bc:	47b8      	blx	r7
		for (int i = lista_eixo_min[l]; i < lista_eixo_max[l]; i+=2){
  4037be:	3402      	adds	r4, #2
  4037c0:	6833      	ldr	r3, [r6, #0]
  4037c2:	42a3      	cmp	r3, r4
  4037c4:	dcf3      	bgt.n	4037ae <graph+0x52>
  4037c6:	f10b 0b04 	add.w	fp, fp, #4
	for (int l = 0; l < 10; l++){
  4037ca:	4b09      	ldr	r3, [pc, #36]	; (4037f0 <graph+0x94>)
  4037cc:	459a      	cmp	sl, r3
  4037ce:	d1d1      	bne.n	403774 <graph+0x18>
}
  4037d0:	b007      	add	sp, #28
  4037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037d6:	bf00      	nop
  4037d8:	00404be5 	.word	0x00404be5
  4037dc:	00403541 	.word	0x00403541
  4037e0:	0040ac24 	.word	0x0040ac24
  4037e4:	00403db1 	.word	0x00403db1
  4037e8:	0040ac28 	.word	0x0040ac28
  4037ec:	00400501 	.word	0x00400501
  4037f0:	20400e30 	.word	0x20400e30
  4037f4:	20400e08 	.word	0x20400e08
  4037f8:	2040004c 	.word	0x2040004c
  4037fc:	20400024 	.word	0x20400024

00403800 <add_lista>:
void add_lista(float distance){
  403800:	4b05      	ldr	r3, [pc, #20]	; (403818 <add_lista+0x18>)
  403802:	f103 0128 	add.w	r1, r3, #40	; 0x28
		lista_distancia[i] = lista_distancia[i + 1];
  403806:	685a      	ldr	r2, [r3, #4]
  403808:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < 10; i++){
  40380c:	428b      	cmp	r3, r1
  40380e:	d1fa      	bne.n	403806 <add_lista+0x6>
	lista_distancia[10 - 1] = distance;
  403810:	4b01      	ldr	r3, [pc, #4]	; (403818 <add_lista+0x18>)
  403812:	6258      	str	r0, [r3, #36]	; 0x24
  403814:	4770      	bx	lr
  403816:	bf00      	nop
  403818:	20400e08 	.word	0x20400e08

0040381c <task_oled>:
static void task_oled(void *pvParameters){
  40381c:	b580      	push	{r7, lr}
  40381e:	b082      	sub	sp, #8
	gfx_mono_ssd1306_init();
  403820:	4b14      	ldr	r3, [pc, #80]	; (403874 <task_oled+0x58>)
  403822:	4798      	blx	r3
	float distance = 0;
  403824:	2300      	movs	r3, #0
  403826:	9301      	str	r3, [sp, #4]
		if (xQueueReceive(xQueueOled, &distance, 0)){
  403828:	4d13      	ldr	r5, [pc, #76]	; (403878 <task_oled+0x5c>)
  40382a:	4c14      	ldr	r4, [pc, #80]	; (40387c <task_oled+0x60>)
			add_lista(distance);
  40382c:	4f14      	ldr	r7, [pc, #80]	; (403880 <task_oled+0x64>)
  40382e:	e003      	b.n	403838 <task_oled+0x1c>
		vTaskDelay(500 / portTICK_PERIOD_MS);
  403830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403834:	4b13      	ldr	r3, [pc, #76]	; (403884 <task_oled+0x68>)
  403836:	4798      	blx	r3
		if (xQueueReceive(xQueueOled, &distance, 0)){
  403838:	2300      	movs	r3, #0
  40383a:	461a      	mov	r2, r3
  40383c:	a901      	add	r1, sp, #4
  40383e:	6828      	ldr	r0, [r5, #0]
  403840:	47a0      	blx	r4
  403842:	2800      	cmp	r0, #0
  403844:	d0f4      	beq.n	403830 <task_oled+0x14>
			add_lista(distance);
  403846:	9801      	ldr	r0, [sp, #4]
  403848:	47b8      	blx	r7
			sprintf(string, "%f", distance);
  40384a:	9801      	ldr	r0, [sp, #4]
  40384c:	4b0e      	ldr	r3, [pc, #56]	; (403888 <task_oled+0x6c>)
  40384e:	4798      	blx	r3
  403850:	4602      	mov	r2, r0
  403852:	460b      	mov	r3, r1
  403854:	490d      	ldr	r1, [pc, #52]	; (40388c <task_oled+0x70>)
  403856:	4668      	mov	r0, sp
  403858:	4e0d      	ldr	r6, [pc, #52]	; (403890 <task_oled+0x74>)
  40385a:	47b0      	blx	r6
			write_oled(string, 10 , 0);
  40385c:	2200      	movs	r2, #0
  40385e:	210a      	movs	r1, #10
  403860:	4668      	mov	r0, sp
  403862:	4b0c      	ldr	r3, [pc, #48]	; (403894 <task_oled+0x78>)
  403864:	4798      	blx	r3
			reset_oled();
  403866:	4b0c      	ldr	r3, [pc, #48]	; (403898 <task_oled+0x7c>)
  403868:	4798      	blx	r3
			graph(2, 2);
  40386a:	2102      	movs	r1, #2
  40386c:	4608      	mov	r0, r1
  40386e:	4b0b      	ldr	r3, [pc, #44]	; (40389c <task_oled+0x80>)
  403870:	4798      	blx	r3
  403872:	e7dd      	b.n	403830 <task_oled+0x14>
  403874:	004006cd 	.word	0x004006cd
  403878:	20400eb0 	.word	0x20400eb0
  40387c:	00401f0d 	.word	0x00401f0d
  403880:	00403801 	.word	0x00403801
  403884:	00402739 	.word	0x00402739
  403888:	00403db1 	.word	0x00403db1
  40388c:	0040acd4 	.word	0x0040acd4
  403890:	00404e7d 	.word	0x00404e7d
  403894:	00403529 	.word	0x00403529
  403898:	0040350d 	.word	0x0040350d
  40389c:	0040375d 	.word	0x0040375d

004038a0 <main>:
	NVIC_EnableIRQ(EC_ID);
	
	NVIC_SetPriority(EC_ID, 4);
}

int main(void) {
  4038a0:	b580      	push	{r7, lr}
  4038a2:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  4038a4:	4b67      	ldr	r3, [pc, #412]	; (403a44 <main+0x1a4>)
  4038a6:	4798      	blx	r3
	board_init();
  4038a8:	4b67      	ldr	r3, [pc, #412]	; (403a48 <main+0x1a8>)
  4038aa:	4798      	blx	r3
  4038ac:	4d67      	ldr	r5, [pc, #412]	; (403a4c <main+0x1ac>)
  4038ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4038b2:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4038b4:	f04f 0880 	mov.w	r8, #128	; 0x80
  4038b8:	f885 830a 	strb.w	r8, [r5, #778]	; 0x30a
	pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4038bc:	4c64      	ldr	r4, [pc, #400]	; (403a50 <main+0x1b0>)
  4038be:	2309      	movs	r3, #9
  4038c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4038c4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4038c8:	4620      	mov	r0, r4
  4038ca:	4f62      	ldr	r7, [pc, #392]	; (403a54 <main+0x1b4>)
  4038cc:	47b8      	blx	r7
	pio_set_debounce_filter(BUT_PIO, BUT_PIO_PIN_MASK, 60);
  4038ce:	223c      	movs	r2, #60	; 0x3c
  4038d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4038d4:	4620      	mov	r0, r4
  4038d6:	4b60      	ldr	r3, [pc, #384]	; (403a58 <main+0x1b8>)
  4038d8:	4798      	blx	r3
	pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  4038da:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4038de:	4620      	mov	r0, r4
  4038e0:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403ae0 <main+0x240>
  4038e4:	47c8      	blx	r9
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_IT_FALL_EDGE , &but_callback);
  4038e6:	4b5d      	ldr	r3, [pc, #372]	; (403a5c <main+0x1bc>)
  4038e8:	9300      	str	r3, [sp, #0]
  4038ea:	2350      	movs	r3, #80	; 0x50
  4038ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4038f0:	210a      	movs	r1, #10
  4038f2:	4620      	mov	r0, r4
  4038f4:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 403ae4 <main+0x244>
  4038f8:	47d0      	blx	sl
	pmc_enable_periph_clk(TR_ID);
  4038fa:	200a      	movs	r0, #10
  4038fc:	4e58      	ldr	r6, [pc, #352]	; (403a60 <main+0x1c0>)
  4038fe:	47b0      	blx	r6
	pmc_enable_periph_clk(EC_ID);
  403900:	2010      	movs	r0, #16
  403902:	47b0      	blx	r6
	pio_configure(TR_PIO, PIO_OUTPUT_0, TR_MASK, PIO_DEFAULT);
  403904:	2300      	movs	r3, #0
  403906:	2240      	movs	r2, #64	; 0x40
  403908:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40390c:	4620      	mov	r0, r4
  40390e:	47b8      	blx	r7
	pio_configure(EC_PIO, PIO_INPUT, EC_MASK, PIO_DEFAULT);
  403910:	f504 64c0 	add.w	r4, r4, #1536	; 0x600
  403914:	2300      	movs	r3, #0
  403916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40391a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40391e:	4620      	mov	r0, r4
  403920:	47b8      	blx	r7
	pio_handler_set(EC_PIO, EC_ID, EC_MASK, PIO_IT_EDGE, &echo_callback);
  403922:	4b50      	ldr	r3, [pc, #320]	; (403a64 <main+0x1c4>)
  403924:	9300      	str	r3, [sp, #0]
  403926:	2340      	movs	r3, #64	; 0x40
  403928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40392c:	2110      	movs	r1, #16
  40392e:	4620      	mov	r0, r4
  403930:	47d0      	blx	sl
	pio_enable_interrupt(EC_PIO, EC_MASK);
  403932:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403936:	4620      	mov	r0, r4
  403938:	47c8      	blx	r9
	pio_get_interrupt_status(EC_PIO);
  40393a:	4620      	mov	r0, r4
  40393c:	4b4a      	ldr	r3, [pc, #296]	; (403a68 <main+0x1c8>)
  40393e:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403944:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403946:	f885 8310 	strb.w	r8, [r5, #784]	; 0x310
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40394a:	4d48      	ldr	r5, [pc, #288]	; (403a6c <main+0x1cc>)
  40394c:	4b48      	ldr	r3, [pc, #288]	; (403a70 <main+0x1d0>)
  40394e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403950:	4a48      	ldr	r2, [pc, #288]	; (403a74 <main+0x1d4>)
  403952:	4b49      	ldr	r3, [pc, #292]	; (403a78 <main+0x1d8>)
  403954:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403956:	4a49      	ldr	r2, [pc, #292]	; (403a7c <main+0x1dc>)
  403958:	4b49      	ldr	r3, [pc, #292]	; (403a80 <main+0x1e0>)
  40395a:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40395c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403960:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403962:	23c0      	movs	r3, #192	; 0xc0
  403964:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403966:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40396a:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  40396c:	2400      	movs	r4, #0
  40396e:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403970:	9408      	str	r4, [sp, #32]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403972:	200e      	movs	r0, #14
  403974:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  403976:	4a43      	ldr	r2, [pc, #268]	; (403a84 <main+0x1e4>)
  403978:	a904      	add	r1, sp, #16
  40397a:	4628      	mov	r0, r5
  40397c:	4b42      	ldr	r3, [pc, #264]	; (403a88 <main+0x1e8>)
  40397e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403980:	4628      	mov	r0, r5
  403982:	4b42      	ldr	r3, [pc, #264]	; (403a8c <main+0x1ec>)
  403984:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403986:	4628      	mov	r0, r5
  403988:	4b41      	ldr	r3, [pc, #260]	; (403a90 <main+0x1f0>)
  40398a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40398c:	4e41      	ldr	r6, [pc, #260]	; (403a94 <main+0x1f4>)
  40398e:	6833      	ldr	r3, [r6, #0]
  403990:	4621      	mov	r1, r4
  403992:	6898      	ldr	r0, [r3, #8]
  403994:	4d40      	ldr	r5, [pc, #256]	; (403a98 <main+0x1f8>)
  403996:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403998:	6833      	ldr	r3, [r6, #0]
  40399a:	4621      	mov	r1, r4
  40399c:	6858      	ldr	r0, [r3, #4]
  40399e:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4039a0:	6833      	ldr	r3, [r6, #0]
  4039a2:	4621      	mov	r1, r4
  4039a4:	6898      	ldr	r0, [r3, #8]
  4039a6:	47a8      	blx	r5
	BUT_init();
	io_init();
	/* Initialize the console uart */
	configure_console();
	printf("Comecou\n");
  4039a8:	483c      	ldr	r0, [pc, #240]	; (403a9c <main+0x1fc>)
  4039aa:	4b3d      	ldr	r3, [pc, #244]	; (403aa0 <main+0x200>)
  4039ac:	4798      	blx	r3
	
	xQueuePing = xQueueCreate(32, sizeof(uint32_t));
  4039ae:	4622      	mov	r2, r4
  4039b0:	2104      	movs	r1, #4
  4039b2:	2020      	movs	r0, #32
  4039b4:	4d3b      	ldr	r5, [pc, #236]	; (403aa4 <main+0x204>)
  4039b6:	47a8      	blx	r5
  4039b8:	4b3b      	ldr	r3, [pc, #236]	; (403aa8 <main+0x208>)
  4039ba:	6018      	str	r0, [r3, #0]
	xQueueEcho = xQueueCreate(32, sizeof(float));
  4039bc:	4622      	mov	r2, r4
  4039be:	2104      	movs	r1, #4
  4039c0:	2020      	movs	r0, #32
  4039c2:	47a8      	blx	r5
  4039c4:	4b39      	ldr	r3, [pc, #228]	; (403aac <main+0x20c>)
  4039c6:	6018      	str	r0, [r3, #0]
	xQueueOled = xQueueCreate(32, sizeof(float));
  4039c8:	4622      	mov	r2, r4
  4039ca:	2104      	movs	r1, #4
  4039cc:	2020      	movs	r0, #32
  4039ce:	47a8      	blx	r5
  4039d0:	4b37      	ldr	r3, [pc, #220]	; (403ab0 <main+0x210>)
  4039d2:	6018      	str	r0, [r3, #0]
	
	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4039d4:	9403      	str	r4, [sp, #12]
  4039d6:	9402      	str	r4, [sp, #8]
  4039d8:	9401      	str	r4, [sp, #4]
  4039da:	9400      	str	r4, [sp, #0]
  4039dc:	4623      	mov	r3, r4
  4039de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4039e2:	4934      	ldr	r1, [pc, #208]	; (403ab4 <main+0x214>)
  4039e4:	4834      	ldr	r0, [pc, #208]	; (403ab8 <main+0x218>)
  4039e6:	4c35      	ldr	r4, [pc, #212]	; (403abc <main+0x21c>)
  4039e8:	47a0      	blx	r4
  4039ea:	2801      	cmp	r0, #1
  4039ec:	d002      	beq.n	4039f4 <main+0x154>
		printf("Failed to create oled task\r\n");
  4039ee:	4834      	ldr	r0, [pc, #208]	; (403ac0 <main+0x220>)
  4039f0:	4b2b      	ldr	r3, [pc, #172]	; (403aa0 <main+0x200>)
  4039f2:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_sensor, "sensor", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS){
  4039f4:	2300      	movs	r3, #0
  4039f6:	9303      	str	r3, [sp, #12]
  4039f8:	9302      	str	r3, [sp, #8]
  4039fa:	9301      	str	r3, [sp, #4]
  4039fc:	9300      	str	r3, [sp, #0]
  4039fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403a02:	4930      	ldr	r1, [pc, #192]	; (403ac4 <main+0x224>)
  403a04:	4830      	ldr	r0, [pc, #192]	; (403ac8 <main+0x228>)
  403a06:	4c2d      	ldr	r4, [pc, #180]	; (403abc <main+0x21c>)
  403a08:	47a0      	blx	r4
  403a0a:	2801      	cmp	r0, #1
  403a0c:	d002      	beq.n	403a14 <main+0x174>
		printf("Failed to create sensor task\r\n");
  403a0e:	482f      	ldr	r0, [pc, #188]	; (403acc <main+0x22c>)
  403a10:	4b23      	ldr	r3, [pc, #140]	; (403aa0 <main+0x200>)
  403a12:	4798      	blx	r3
	}
	
	if (xQueuePing == NULL){
  403a14:	4b24      	ldr	r3, [pc, #144]	; (403aa8 <main+0x208>)
  403a16:	681b      	ldr	r3, [r3, #0]
  403a18:	b143      	cbz	r3, 403a2c <main+0x18c>
		printf("Failed to create Ping List\n");
	}
	
	if (xQueueEcho == NULL){
  403a1a:	4b24      	ldr	r3, [pc, #144]	; (403aac <main+0x20c>)
  403a1c:	681b      	ldr	r3, [r3, #0]
  403a1e:	b14b      	cbz	r3, 403a34 <main+0x194>
		printf("Failed to create Echo List\n");
	}
	
	if (xQueueOled == NULL){
  403a20:	4b23      	ldr	r3, [pc, #140]	; (403ab0 <main+0x210>)
  403a22:	681b      	ldr	r3, [r3, #0]
  403a24:	b153      	cbz	r3, 403a3c <main+0x19c>
		printf("Failed to create Oled List\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  403a26:	4b2a      	ldr	r3, [pc, #168]	; (403ad0 <main+0x230>)
  403a28:	4798      	blx	r3
  403a2a:	e7fe      	b.n	403a2a <main+0x18a>
		printf("Failed to create Ping List\n");
  403a2c:	4829      	ldr	r0, [pc, #164]	; (403ad4 <main+0x234>)
  403a2e:	4b1c      	ldr	r3, [pc, #112]	; (403aa0 <main+0x200>)
  403a30:	4798      	blx	r3
  403a32:	e7f2      	b.n	403a1a <main+0x17a>
		printf("Failed to create Echo List\n");
  403a34:	4828      	ldr	r0, [pc, #160]	; (403ad8 <main+0x238>)
  403a36:	4b1a      	ldr	r3, [pc, #104]	; (403aa0 <main+0x200>)
  403a38:	4798      	blx	r3
  403a3a:	e7f1      	b.n	403a20 <main+0x180>
		printf("Failed to create Oled List\n");
  403a3c:	4827      	ldr	r0, [pc, #156]	; (403adc <main+0x23c>)
  403a3e:	4b18      	ldr	r3, [pc, #96]	; (403aa0 <main+0x200>)
  403a40:	4798      	blx	r3
  403a42:	e7f0      	b.n	403a26 <main+0x186>
  403a44:	00400a31 	.word	0x00400a31
  403a48:	00400b2d 	.word	0x00400b2d
  403a4c:	e000e100 	.word	0xe000e100
  403a50:	400e0e00 	.word	0x400e0e00
  403a54:	00400df1 	.word	0x00400df1
  403a58:	00400cc5 	.word	0x00400cc5
  403a5c:	00403199 	.word	0x00403199
  403a60:	00401105 	.word	0x00401105
  403a64:	004031c1 	.word	0x004031c1
  403a68:	00400eb7 	.word	0x00400eb7
  403a6c:	40028000 	.word	0x40028000
  403a70:	20400e6c 	.word	0x20400e6c
  403a74:	00403349 	.word	0x00403349
  403a78:	20400e68 	.word	0x20400e68
  403a7c:	0040326d 	.word	0x0040326d
  403a80:	20400e64 	.word	0x20400e64
  403a84:	08f0d180 	.word	0x08f0d180
  403a88:	00401201 	.word	0x00401201
  403a8c:	00401255 	.word	0x00401255
  403a90:	0040125b 	.word	0x0040125b
  403a94:	20400078 	.word	0x20400078
  403a98:	00404cdd 	.word	0x00404cdd
  403a9c:	0040ac2c 	.word	0x0040ac2c
  403aa0:	00404ca9 	.word	0x00404ca9
  403aa4:	00401bad 	.word	0x00401bad
  403aa8:	20400eb4 	.word	0x20400eb4
  403aac:	20400eb8 	.word	0x20400eb8
  403ab0:	20400eb0 	.word	0x20400eb0
  403ab4:	0040ac34 	.word	0x0040ac34
  403ab8:	0040381d 	.word	0x0040381d
  403abc:	004021ed 	.word	0x004021ed
  403ac0:	0040ac3c 	.word	0x0040ac3c
  403ac4:	0040ac58 	.word	0x0040ac58
  403ac8:	00403491 	.word	0x00403491
  403acc:	0040ac60 	.word	0x0040ac60
  403ad0:	00402421 	.word	0x00402421
  403ad4:	0040ac80 	.word	0x0040ac80
  403ad8:	0040ac9c 	.word	0x0040ac9c
  403adc:	0040acb8 	.word	0x0040acb8
  403ae0:	00400eb3 	.word	0x00400eb3
  403ae4:	00400f11 	.word	0x00400f11

00403ae8 <__aeabi_drsub>:
  403ae8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403aec:	e002      	b.n	403af4 <__adddf3>
  403aee:	bf00      	nop

00403af0 <__aeabi_dsub>:
  403af0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403af4 <__adddf3>:
  403af4:	b530      	push	{r4, r5, lr}
  403af6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403afa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403afe:	ea94 0f05 	teq	r4, r5
  403b02:	bf08      	it	eq
  403b04:	ea90 0f02 	teqeq	r0, r2
  403b08:	bf1f      	itttt	ne
  403b0a:	ea54 0c00 	orrsne.w	ip, r4, r0
  403b0e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403b12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403b16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403b1a:	f000 80e2 	beq.w	403ce2 <__adddf3+0x1ee>
  403b1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403b22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403b26:	bfb8      	it	lt
  403b28:	426d      	neglt	r5, r5
  403b2a:	dd0c      	ble.n	403b46 <__adddf3+0x52>
  403b2c:	442c      	add	r4, r5
  403b2e:	ea80 0202 	eor.w	r2, r0, r2
  403b32:	ea81 0303 	eor.w	r3, r1, r3
  403b36:	ea82 0000 	eor.w	r0, r2, r0
  403b3a:	ea83 0101 	eor.w	r1, r3, r1
  403b3e:	ea80 0202 	eor.w	r2, r0, r2
  403b42:	ea81 0303 	eor.w	r3, r1, r3
  403b46:	2d36      	cmp	r5, #54	; 0x36
  403b48:	bf88      	it	hi
  403b4a:	bd30      	pophi	{r4, r5, pc}
  403b4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403b50:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403b54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403b58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403b5c:	d002      	beq.n	403b64 <__adddf3+0x70>
  403b5e:	4240      	negs	r0, r0
  403b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403b64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403b68:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403b6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403b70:	d002      	beq.n	403b78 <__adddf3+0x84>
  403b72:	4252      	negs	r2, r2
  403b74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403b78:	ea94 0f05 	teq	r4, r5
  403b7c:	f000 80a7 	beq.w	403cce <__adddf3+0x1da>
  403b80:	f1a4 0401 	sub.w	r4, r4, #1
  403b84:	f1d5 0e20 	rsbs	lr, r5, #32
  403b88:	db0d      	blt.n	403ba6 <__adddf3+0xb2>
  403b8a:	fa02 fc0e 	lsl.w	ip, r2, lr
  403b8e:	fa22 f205 	lsr.w	r2, r2, r5
  403b92:	1880      	adds	r0, r0, r2
  403b94:	f141 0100 	adc.w	r1, r1, #0
  403b98:	fa03 f20e 	lsl.w	r2, r3, lr
  403b9c:	1880      	adds	r0, r0, r2
  403b9e:	fa43 f305 	asr.w	r3, r3, r5
  403ba2:	4159      	adcs	r1, r3
  403ba4:	e00e      	b.n	403bc4 <__adddf3+0xd0>
  403ba6:	f1a5 0520 	sub.w	r5, r5, #32
  403baa:	f10e 0e20 	add.w	lr, lr, #32
  403bae:	2a01      	cmp	r2, #1
  403bb0:	fa03 fc0e 	lsl.w	ip, r3, lr
  403bb4:	bf28      	it	cs
  403bb6:	f04c 0c02 	orrcs.w	ip, ip, #2
  403bba:	fa43 f305 	asr.w	r3, r3, r5
  403bbe:	18c0      	adds	r0, r0, r3
  403bc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403bc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403bc8:	d507      	bpl.n	403bda <__adddf3+0xe6>
  403bca:	f04f 0e00 	mov.w	lr, #0
  403bce:	f1dc 0c00 	rsbs	ip, ip, #0
  403bd2:	eb7e 0000 	sbcs.w	r0, lr, r0
  403bd6:	eb6e 0101 	sbc.w	r1, lr, r1
  403bda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403bde:	d31b      	bcc.n	403c18 <__adddf3+0x124>
  403be0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403be4:	d30c      	bcc.n	403c00 <__adddf3+0x10c>
  403be6:	0849      	lsrs	r1, r1, #1
  403be8:	ea5f 0030 	movs.w	r0, r0, rrx
  403bec:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403bf0:	f104 0401 	add.w	r4, r4, #1
  403bf4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403bf8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403bfc:	f080 809a 	bcs.w	403d34 <__adddf3+0x240>
  403c00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403c04:	bf08      	it	eq
  403c06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403c0a:	f150 0000 	adcs.w	r0, r0, #0
  403c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403c12:	ea41 0105 	orr.w	r1, r1, r5
  403c16:	bd30      	pop	{r4, r5, pc}
  403c18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403c1c:	4140      	adcs	r0, r0
  403c1e:	eb41 0101 	adc.w	r1, r1, r1
  403c22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403c26:	f1a4 0401 	sub.w	r4, r4, #1
  403c2a:	d1e9      	bne.n	403c00 <__adddf3+0x10c>
  403c2c:	f091 0f00 	teq	r1, #0
  403c30:	bf04      	itt	eq
  403c32:	4601      	moveq	r1, r0
  403c34:	2000      	moveq	r0, #0
  403c36:	fab1 f381 	clz	r3, r1
  403c3a:	bf08      	it	eq
  403c3c:	3320      	addeq	r3, #32
  403c3e:	f1a3 030b 	sub.w	r3, r3, #11
  403c42:	f1b3 0220 	subs.w	r2, r3, #32
  403c46:	da0c      	bge.n	403c62 <__adddf3+0x16e>
  403c48:	320c      	adds	r2, #12
  403c4a:	dd08      	ble.n	403c5e <__adddf3+0x16a>
  403c4c:	f102 0c14 	add.w	ip, r2, #20
  403c50:	f1c2 020c 	rsb	r2, r2, #12
  403c54:	fa01 f00c 	lsl.w	r0, r1, ip
  403c58:	fa21 f102 	lsr.w	r1, r1, r2
  403c5c:	e00c      	b.n	403c78 <__adddf3+0x184>
  403c5e:	f102 0214 	add.w	r2, r2, #20
  403c62:	bfd8      	it	le
  403c64:	f1c2 0c20 	rsble	ip, r2, #32
  403c68:	fa01 f102 	lsl.w	r1, r1, r2
  403c6c:	fa20 fc0c 	lsr.w	ip, r0, ip
  403c70:	bfdc      	itt	le
  403c72:	ea41 010c 	orrle.w	r1, r1, ip
  403c76:	4090      	lslle	r0, r2
  403c78:	1ae4      	subs	r4, r4, r3
  403c7a:	bfa2      	ittt	ge
  403c7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403c80:	4329      	orrge	r1, r5
  403c82:	bd30      	popge	{r4, r5, pc}
  403c84:	ea6f 0404 	mvn.w	r4, r4
  403c88:	3c1f      	subs	r4, #31
  403c8a:	da1c      	bge.n	403cc6 <__adddf3+0x1d2>
  403c8c:	340c      	adds	r4, #12
  403c8e:	dc0e      	bgt.n	403cae <__adddf3+0x1ba>
  403c90:	f104 0414 	add.w	r4, r4, #20
  403c94:	f1c4 0220 	rsb	r2, r4, #32
  403c98:	fa20 f004 	lsr.w	r0, r0, r4
  403c9c:	fa01 f302 	lsl.w	r3, r1, r2
  403ca0:	ea40 0003 	orr.w	r0, r0, r3
  403ca4:	fa21 f304 	lsr.w	r3, r1, r4
  403ca8:	ea45 0103 	orr.w	r1, r5, r3
  403cac:	bd30      	pop	{r4, r5, pc}
  403cae:	f1c4 040c 	rsb	r4, r4, #12
  403cb2:	f1c4 0220 	rsb	r2, r4, #32
  403cb6:	fa20 f002 	lsr.w	r0, r0, r2
  403cba:	fa01 f304 	lsl.w	r3, r1, r4
  403cbe:	ea40 0003 	orr.w	r0, r0, r3
  403cc2:	4629      	mov	r1, r5
  403cc4:	bd30      	pop	{r4, r5, pc}
  403cc6:	fa21 f004 	lsr.w	r0, r1, r4
  403cca:	4629      	mov	r1, r5
  403ccc:	bd30      	pop	{r4, r5, pc}
  403cce:	f094 0f00 	teq	r4, #0
  403cd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403cd6:	bf06      	itte	eq
  403cd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403cdc:	3401      	addeq	r4, #1
  403cde:	3d01      	subne	r5, #1
  403ce0:	e74e      	b.n	403b80 <__adddf3+0x8c>
  403ce2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403ce6:	bf18      	it	ne
  403ce8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403cec:	d029      	beq.n	403d42 <__adddf3+0x24e>
  403cee:	ea94 0f05 	teq	r4, r5
  403cf2:	bf08      	it	eq
  403cf4:	ea90 0f02 	teqeq	r0, r2
  403cf8:	d005      	beq.n	403d06 <__adddf3+0x212>
  403cfa:	ea54 0c00 	orrs.w	ip, r4, r0
  403cfe:	bf04      	itt	eq
  403d00:	4619      	moveq	r1, r3
  403d02:	4610      	moveq	r0, r2
  403d04:	bd30      	pop	{r4, r5, pc}
  403d06:	ea91 0f03 	teq	r1, r3
  403d0a:	bf1e      	ittt	ne
  403d0c:	2100      	movne	r1, #0
  403d0e:	2000      	movne	r0, #0
  403d10:	bd30      	popne	{r4, r5, pc}
  403d12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403d16:	d105      	bne.n	403d24 <__adddf3+0x230>
  403d18:	0040      	lsls	r0, r0, #1
  403d1a:	4149      	adcs	r1, r1
  403d1c:	bf28      	it	cs
  403d1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403d22:	bd30      	pop	{r4, r5, pc}
  403d24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403d28:	bf3c      	itt	cc
  403d2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403d2e:	bd30      	popcc	{r4, r5, pc}
  403d30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403d34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403d38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403d3c:	f04f 0000 	mov.w	r0, #0
  403d40:	bd30      	pop	{r4, r5, pc}
  403d42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403d46:	bf1a      	itte	ne
  403d48:	4619      	movne	r1, r3
  403d4a:	4610      	movne	r0, r2
  403d4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403d50:	bf1c      	itt	ne
  403d52:	460b      	movne	r3, r1
  403d54:	4602      	movne	r2, r0
  403d56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403d5a:	bf06      	itte	eq
  403d5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403d60:	ea91 0f03 	teqeq	r1, r3
  403d64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403d68:	bd30      	pop	{r4, r5, pc}
  403d6a:	bf00      	nop

00403d6c <__aeabi_ui2d>:
  403d6c:	f090 0f00 	teq	r0, #0
  403d70:	bf04      	itt	eq
  403d72:	2100      	moveq	r1, #0
  403d74:	4770      	bxeq	lr
  403d76:	b530      	push	{r4, r5, lr}
  403d78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403d7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403d80:	f04f 0500 	mov.w	r5, #0
  403d84:	f04f 0100 	mov.w	r1, #0
  403d88:	e750      	b.n	403c2c <__adddf3+0x138>
  403d8a:	bf00      	nop

00403d8c <__aeabi_i2d>:
  403d8c:	f090 0f00 	teq	r0, #0
  403d90:	bf04      	itt	eq
  403d92:	2100      	moveq	r1, #0
  403d94:	4770      	bxeq	lr
  403d96:	b530      	push	{r4, r5, lr}
  403d98:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403d9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403da0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403da4:	bf48      	it	mi
  403da6:	4240      	negmi	r0, r0
  403da8:	f04f 0100 	mov.w	r1, #0
  403dac:	e73e      	b.n	403c2c <__adddf3+0x138>
  403dae:	bf00      	nop

00403db0 <__aeabi_f2d>:
  403db0:	0042      	lsls	r2, r0, #1
  403db2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403db6:	ea4f 0131 	mov.w	r1, r1, rrx
  403dba:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403dbe:	bf1f      	itttt	ne
  403dc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403dc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403dc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403dcc:	4770      	bxne	lr
  403dce:	f092 0f00 	teq	r2, #0
  403dd2:	bf14      	ite	ne
  403dd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403dd8:	4770      	bxeq	lr
  403dda:	b530      	push	{r4, r5, lr}
  403ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
  403de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403de8:	e720      	b.n	403c2c <__adddf3+0x138>
  403dea:	bf00      	nop

00403dec <__aeabi_ul2d>:
  403dec:	ea50 0201 	orrs.w	r2, r0, r1
  403df0:	bf08      	it	eq
  403df2:	4770      	bxeq	lr
  403df4:	b530      	push	{r4, r5, lr}
  403df6:	f04f 0500 	mov.w	r5, #0
  403dfa:	e00a      	b.n	403e12 <__aeabi_l2d+0x16>

00403dfc <__aeabi_l2d>:
  403dfc:	ea50 0201 	orrs.w	r2, r0, r1
  403e00:	bf08      	it	eq
  403e02:	4770      	bxeq	lr
  403e04:	b530      	push	{r4, r5, lr}
  403e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403e0a:	d502      	bpl.n	403e12 <__aeabi_l2d+0x16>
  403e0c:	4240      	negs	r0, r0
  403e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403e1e:	f43f aedc 	beq.w	403bda <__adddf3+0xe6>
  403e22:	f04f 0203 	mov.w	r2, #3
  403e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403e2a:	bf18      	it	ne
  403e2c:	3203      	addne	r2, #3
  403e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403e32:	bf18      	it	ne
  403e34:	3203      	addne	r2, #3
  403e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403e3a:	f1c2 0320 	rsb	r3, r2, #32
  403e3e:	fa00 fc03 	lsl.w	ip, r0, r3
  403e42:	fa20 f002 	lsr.w	r0, r0, r2
  403e46:	fa01 fe03 	lsl.w	lr, r1, r3
  403e4a:	ea40 000e 	orr.w	r0, r0, lr
  403e4e:	fa21 f102 	lsr.w	r1, r1, r2
  403e52:	4414      	add	r4, r2
  403e54:	e6c1      	b.n	403bda <__adddf3+0xe6>
  403e56:	bf00      	nop

00403e58 <__aeabi_dmul>:
  403e58:	b570      	push	{r4, r5, r6, lr}
  403e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403e66:	bf1d      	ittte	ne
  403e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403e6c:	ea94 0f0c 	teqne	r4, ip
  403e70:	ea95 0f0c 	teqne	r5, ip
  403e74:	f000 f8de 	bleq	404034 <__aeabi_dmul+0x1dc>
  403e78:	442c      	add	r4, r5
  403e7a:	ea81 0603 	eor.w	r6, r1, r3
  403e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403e8a:	bf18      	it	ne
  403e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403e98:	d038      	beq.n	403f0c <__aeabi_dmul+0xb4>
  403e9a:	fba0 ce02 	umull	ip, lr, r0, r2
  403e9e:	f04f 0500 	mov.w	r5, #0
  403ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
  403ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
  403eae:	f04f 0600 	mov.w	r6, #0
  403eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
  403eb6:	f09c 0f00 	teq	ip, #0
  403eba:	bf18      	it	ne
  403ebc:	f04e 0e01 	orrne.w	lr, lr, #1
  403ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403ecc:	d204      	bcs.n	403ed8 <__aeabi_dmul+0x80>
  403ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403ed2:	416d      	adcs	r5, r5
  403ed4:	eb46 0606 	adc.w	r6, r6, r6
  403ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403ef0:	bf88      	it	hi
  403ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403ef6:	d81e      	bhi.n	403f36 <__aeabi_dmul+0xde>
  403ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403efc:	bf08      	it	eq
  403efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403f02:	f150 0000 	adcs.w	r0, r0, #0
  403f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403f0a:	bd70      	pop	{r4, r5, r6, pc}
  403f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403f10:	ea46 0101 	orr.w	r1, r6, r1
  403f14:	ea40 0002 	orr.w	r0, r0, r2
  403f18:	ea81 0103 	eor.w	r1, r1, r3
  403f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403f20:	bfc2      	ittt	gt
  403f22:	ebd4 050c 	rsbsgt	r5, r4, ip
  403f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403f2a:	bd70      	popgt	{r4, r5, r6, pc}
  403f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403f30:	f04f 0e00 	mov.w	lr, #0
  403f34:	3c01      	subs	r4, #1
  403f36:	f300 80ab 	bgt.w	404090 <__aeabi_dmul+0x238>
  403f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403f3e:	bfde      	ittt	le
  403f40:	2000      	movle	r0, #0
  403f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403f46:	bd70      	pople	{r4, r5, r6, pc}
  403f48:	f1c4 0400 	rsb	r4, r4, #0
  403f4c:	3c20      	subs	r4, #32
  403f4e:	da35      	bge.n	403fbc <__aeabi_dmul+0x164>
  403f50:	340c      	adds	r4, #12
  403f52:	dc1b      	bgt.n	403f8c <__aeabi_dmul+0x134>
  403f54:	f104 0414 	add.w	r4, r4, #20
  403f58:	f1c4 0520 	rsb	r5, r4, #32
  403f5c:	fa00 f305 	lsl.w	r3, r0, r5
  403f60:	fa20 f004 	lsr.w	r0, r0, r4
  403f64:	fa01 f205 	lsl.w	r2, r1, r5
  403f68:	ea40 0002 	orr.w	r0, r0, r2
  403f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403f78:	fa21 f604 	lsr.w	r6, r1, r4
  403f7c:	eb42 0106 	adc.w	r1, r2, r6
  403f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403f84:	bf08      	it	eq
  403f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403f8a:	bd70      	pop	{r4, r5, r6, pc}
  403f8c:	f1c4 040c 	rsb	r4, r4, #12
  403f90:	f1c4 0520 	rsb	r5, r4, #32
  403f94:	fa00 f304 	lsl.w	r3, r0, r4
  403f98:	fa20 f005 	lsr.w	r0, r0, r5
  403f9c:	fa01 f204 	lsl.w	r2, r1, r4
  403fa0:	ea40 0002 	orr.w	r0, r0, r2
  403fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403fac:	f141 0100 	adc.w	r1, r1, #0
  403fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403fb4:	bf08      	it	eq
  403fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403fba:	bd70      	pop	{r4, r5, r6, pc}
  403fbc:	f1c4 0520 	rsb	r5, r4, #32
  403fc0:	fa00 f205 	lsl.w	r2, r0, r5
  403fc4:	ea4e 0e02 	orr.w	lr, lr, r2
  403fc8:	fa20 f304 	lsr.w	r3, r0, r4
  403fcc:	fa01 f205 	lsl.w	r2, r1, r5
  403fd0:	ea43 0302 	orr.w	r3, r3, r2
  403fd4:	fa21 f004 	lsr.w	r0, r1, r4
  403fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403fdc:	fa21 f204 	lsr.w	r2, r1, r4
  403fe0:	ea20 0002 	bic.w	r0, r0, r2
  403fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403fec:	bf08      	it	eq
  403fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403ff2:	bd70      	pop	{r4, r5, r6, pc}
  403ff4:	f094 0f00 	teq	r4, #0
  403ff8:	d10f      	bne.n	40401a <__aeabi_dmul+0x1c2>
  403ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403ffe:	0040      	lsls	r0, r0, #1
  404000:	eb41 0101 	adc.w	r1, r1, r1
  404004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404008:	bf08      	it	eq
  40400a:	3c01      	subeq	r4, #1
  40400c:	d0f7      	beq.n	403ffe <__aeabi_dmul+0x1a6>
  40400e:	ea41 0106 	orr.w	r1, r1, r6
  404012:	f095 0f00 	teq	r5, #0
  404016:	bf18      	it	ne
  404018:	4770      	bxne	lr
  40401a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40401e:	0052      	lsls	r2, r2, #1
  404020:	eb43 0303 	adc.w	r3, r3, r3
  404024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404028:	bf08      	it	eq
  40402a:	3d01      	subeq	r5, #1
  40402c:	d0f7      	beq.n	40401e <__aeabi_dmul+0x1c6>
  40402e:	ea43 0306 	orr.w	r3, r3, r6
  404032:	4770      	bx	lr
  404034:	ea94 0f0c 	teq	r4, ip
  404038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40403c:	bf18      	it	ne
  40403e:	ea95 0f0c 	teqne	r5, ip
  404042:	d00c      	beq.n	40405e <__aeabi_dmul+0x206>
  404044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404048:	bf18      	it	ne
  40404a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40404e:	d1d1      	bne.n	403ff4 <__aeabi_dmul+0x19c>
  404050:	ea81 0103 	eor.w	r1, r1, r3
  404054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404058:	f04f 0000 	mov.w	r0, #0
  40405c:	bd70      	pop	{r4, r5, r6, pc}
  40405e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404062:	bf06      	itte	eq
  404064:	4610      	moveq	r0, r2
  404066:	4619      	moveq	r1, r3
  404068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40406c:	d019      	beq.n	4040a2 <__aeabi_dmul+0x24a>
  40406e:	ea94 0f0c 	teq	r4, ip
  404072:	d102      	bne.n	40407a <__aeabi_dmul+0x222>
  404074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404078:	d113      	bne.n	4040a2 <__aeabi_dmul+0x24a>
  40407a:	ea95 0f0c 	teq	r5, ip
  40407e:	d105      	bne.n	40408c <__aeabi_dmul+0x234>
  404080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404084:	bf1c      	itt	ne
  404086:	4610      	movne	r0, r2
  404088:	4619      	movne	r1, r3
  40408a:	d10a      	bne.n	4040a2 <__aeabi_dmul+0x24a>
  40408c:	ea81 0103 	eor.w	r1, r1, r3
  404090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40409c:	f04f 0000 	mov.w	r0, #0
  4040a0:	bd70      	pop	{r4, r5, r6, pc}
  4040a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4040a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4040aa:	bd70      	pop	{r4, r5, r6, pc}

004040ac <__aeabi_ddiv>:
  4040ac:	b570      	push	{r4, r5, r6, lr}
  4040ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4040b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4040b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4040ba:	bf1d      	ittte	ne
  4040bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4040c0:	ea94 0f0c 	teqne	r4, ip
  4040c4:	ea95 0f0c 	teqne	r5, ip
  4040c8:	f000 f8a7 	bleq	40421a <__aeabi_ddiv+0x16e>
  4040cc:	eba4 0405 	sub.w	r4, r4, r5
  4040d0:	ea81 0e03 	eor.w	lr, r1, r3
  4040d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4040d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4040dc:	f000 8088 	beq.w	4041f0 <__aeabi_ddiv+0x144>
  4040e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4040e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4040e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4040ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4040f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4040f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4040f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4040fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404104:	429d      	cmp	r5, r3
  404106:	bf08      	it	eq
  404108:	4296      	cmpeq	r6, r2
  40410a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40410e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404112:	d202      	bcs.n	40411a <__aeabi_ddiv+0x6e>
  404114:	085b      	lsrs	r3, r3, #1
  404116:	ea4f 0232 	mov.w	r2, r2, rrx
  40411a:	1ab6      	subs	r6, r6, r2
  40411c:	eb65 0503 	sbc.w	r5, r5, r3
  404120:	085b      	lsrs	r3, r3, #1
  404122:	ea4f 0232 	mov.w	r2, r2, rrx
  404126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40412a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40412e:	ebb6 0e02 	subs.w	lr, r6, r2
  404132:	eb75 0e03 	sbcs.w	lr, r5, r3
  404136:	bf22      	ittt	cs
  404138:	1ab6      	subcs	r6, r6, r2
  40413a:	4675      	movcs	r5, lr
  40413c:	ea40 000c 	orrcs.w	r0, r0, ip
  404140:	085b      	lsrs	r3, r3, #1
  404142:	ea4f 0232 	mov.w	r2, r2, rrx
  404146:	ebb6 0e02 	subs.w	lr, r6, r2
  40414a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40414e:	bf22      	ittt	cs
  404150:	1ab6      	subcs	r6, r6, r2
  404152:	4675      	movcs	r5, lr
  404154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404158:	085b      	lsrs	r3, r3, #1
  40415a:	ea4f 0232 	mov.w	r2, r2, rrx
  40415e:	ebb6 0e02 	subs.w	lr, r6, r2
  404162:	eb75 0e03 	sbcs.w	lr, r5, r3
  404166:	bf22      	ittt	cs
  404168:	1ab6      	subcs	r6, r6, r2
  40416a:	4675      	movcs	r5, lr
  40416c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404170:	085b      	lsrs	r3, r3, #1
  404172:	ea4f 0232 	mov.w	r2, r2, rrx
  404176:	ebb6 0e02 	subs.w	lr, r6, r2
  40417a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40417e:	bf22      	ittt	cs
  404180:	1ab6      	subcs	r6, r6, r2
  404182:	4675      	movcs	r5, lr
  404184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404188:	ea55 0e06 	orrs.w	lr, r5, r6
  40418c:	d018      	beq.n	4041c0 <__aeabi_ddiv+0x114>
  40418e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404196:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40419a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40419e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4041a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4041a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4041aa:	d1c0      	bne.n	40412e <__aeabi_ddiv+0x82>
  4041ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4041b0:	d10b      	bne.n	4041ca <__aeabi_ddiv+0x11e>
  4041b2:	ea41 0100 	orr.w	r1, r1, r0
  4041b6:	f04f 0000 	mov.w	r0, #0
  4041ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4041be:	e7b6      	b.n	40412e <__aeabi_ddiv+0x82>
  4041c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4041c4:	bf04      	itt	eq
  4041c6:	4301      	orreq	r1, r0
  4041c8:	2000      	moveq	r0, #0
  4041ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4041ce:	bf88      	it	hi
  4041d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4041d4:	f63f aeaf 	bhi.w	403f36 <__aeabi_dmul+0xde>
  4041d8:	ebb5 0c03 	subs.w	ip, r5, r3
  4041dc:	bf04      	itt	eq
  4041de:	ebb6 0c02 	subseq.w	ip, r6, r2
  4041e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4041e6:	f150 0000 	adcs.w	r0, r0, #0
  4041ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4041ee:	bd70      	pop	{r4, r5, r6, pc}
  4041f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4041f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4041f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4041fc:	bfc2      	ittt	gt
  4041fe:	ebd4 050c 	rsbsgt	r5, r4, ip
  404202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404206:	bd70      	popgt	{r4, r5, r6, pc}
  404208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40420c:	f04f 0e00 	mov.w	lr, #0
  404210:	3c01      	subs	r4, #1
  404212:	e690      	b.n	403f36 <__aeabi_dmul+0xde>
  404214:	ea45 0e06 	orr.w	lr, r5, r6
  404218:	e68d      	b.n	403f36 <__aeabi_dmul+0xde>
  40421a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40421e:	ea94 0f0c 	teq	r4, ip
  404222:	bf08      	it	eq
  404224:	ea95 0f0c 	teqeq	r5, ip
  404228:	f43f af3b 	beq.w	4040a2 <__aeabi_dmul+0x24a>
  40422c:	ea94 0f0c 	teq	r4, ip
  404230:	d10a      	bne.n	404248 <__aeabi_ddiv+0x19c>
  404232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404236:	f47f af34 	bne.w	4040a2 <__aeabi_dmul+0x24a>
  40423a:	ea95 0f0c 	teq	r5, ip
  40423e:	f47f af25 	bne.w	40408c <__aeabi_dmul+0x234>
  404242:	4610      	mov	r0, r2
  404244:	4619      	mov	r1, r3
  404246:	e72c      	b.n	4040a2 <__aeabi_dmul+0x24a>
  404248:	ea95 0f0c 	teq	r5, ip
  40424c:	d106      	bne.n	40425c <__aeabi_ddiv+0x1b0>
  40424e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404252:	f43f aefd 	beq.w	404050 <__aeabi_dmul+0x1f8>
  404256:	4610      	mov	r0, r2
  404258:	4619      	mov	r1, r3
  40425a:	e722      	b.n	4040a2 <__aeabi_dmul+0x24a>
  40425c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404260:	bf18      	it	ne
  404262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404266:	f47f aec5 	bne.w	403ff4 <__aeabi_dmul+0x19c>
  40426a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40426e:	f47f af0d 	bne.w	40408c <__aeabi_dmul+0x234>
  404272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404276:	f47f aeeb 	bne.w	404050 <__aeabi_dmul+0x1f8>
  40427a:	e712      	b.n	4040a2 <__aeabi_dmul+0x24a>

0040427c <__gedf2>:
  40427c:	f04f 3cff 	mov.w	ip, #4294967295
  404280:	e006      	b.n	404290 <__cmpdf2+0x4>
  404282:	bf00      	nop

00404284 <__ledf2>:
  404284:	f04f 0c01 	mov.w	ip, #1
  404288:	e002      	b.n	404290 <__cmpdf2+0x4>
  40428a:	bf00      	nop

0040428c <__cmpdf2>:
  40428c:	f04f 0c01 	mov.w	ip, #1
  404290:	f84d cd04 	str.w	ip, [sp, #-4]!
  404294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40429c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4042a0:	bf18      	it	ne
  4042a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4042a6:	d01b      	beq.n	4042e0 <__cmpdf2+0x54>
  4042a8:	b001      	add	sp, #4
  4042aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4042ae:	bf0c      	ite	eq
  4042b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4042b4:	ea91 0f03 	teqne	r1, r3
  4042b8:	bf02      	ittt	eq
  4042ba:	ea90 0f02 	teqeq	r0, r2
  4042be:	2000      	moveq	r0, #0
  4042c0:	4770      	bxeq	lr
  4042c2:	f110 0f00 	cmn.w	r0, #0
  4042c6:	ea91 0f03 	teq	r1, r3
  4042ca:	bf58      	it	pl
  4042cc:	4299      	cmppl	r1, r3
  4042ce:	bf08      	it	eq
  4042d0:	4290      	cmpeq	r0, r2
  4042d2:	bf2c      	ite	cs
  4042d4:	17d8      	asrcs	r0, r3, #31
  4042d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4042da:	f040 0001 	orr.w	r0, r0, #1
  4042de:	4770      	bx	lr
  4042e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4042e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4042e8:	d102      	bne.n	4042f0 <__cmpdf2+0x64>
  4042ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4042ee:	d107      	bne.n	404300 <__cmpdf2+0x74>
  4042f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4042f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4042f8:	d1d6      	bne.n	4042a8 <__cmpdf2+0x1c>
  4042fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4042fe:	d0d3      	beq.n	4042a8 <__cmpdf2+0x1c>
  404300:	f85d 0b04 	ldr.w	r0, [sp], #4
  404304:	4770      	bx	lr
  404306:	bf00      	nop

00404308 <__aeabi_cdrcmple>:
  404308:	4684      	mov	ip, r0
  40430a:	4610      	mov	r0, r2
  40430c:	4662      	mov	r2, ip
  40430e:	468c      	mov	ip, r1
  404310:	4619      	mov	r1, r3
  404312:	4663      	mov	r3, ip
  404314:	e000      	b.n	404318 <__aeabi_cdcmpeq>
  404316:	bf00      	nop

00404318 <__aeabi_cdcmpeq>:
  404318:	b501      	push	{r0, lr}
  40431a:	f7ff ffb7 	bl	40428c <__cmpdf2>
  40431e:	2800      	cmp	r0, #0
  404320:	bf48      	it	mi
  404322:	f110 0f00 	cmnmi.w	r0, #0
  404326:	bd01      	pop	{r0, pc}

00404328 <__aeabi_dcmpeq>:
  404328:	f84d ed08 	str.w	lr, [sp, #-8]!
  40432c:	f7ff fff4 	bl	404318 <__aeabi_cdcmpeq>
  404330:	bf0c      	ite	eq
  404332:	2001      	moveq	r0, #1
  404334:	2000      	movne	r0, #0
  404336:	f85d fb08 	ldr.w	pc, [sp], #8
  40433a:	bf00      	nop

0040433c <__aeabi_dcmplt>:
  40433c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404340:	f7ff ffea 	bl	404318 <__aeabi_cdcmpeq>
  404344:	bf34      	ite	cc
  404346:	2001      	movcc	r0, #1
  404348:	2000      	movcs	r0, #0
  40434a:	f85d fb08 	ldr.w	pc, [sp], #8
  40434e:	bf00      	nop

00404350 <__aeabi_dcmple>:
  404350:	f84d ed08 	str.w	lr, [sp, #-8]!
  404354:	f7ff ffe0 	bl	404318 <__aeabi_cdcmpeq>
  404358:	bf94      	ite	ls
  40435a:	2001      	movls	r0, #1
  40435c:	2000      	movhi	r0, #0
  40435e:	f85d fb08 	ldr.w	pc, [sp], #8
  404362:	bf00      	nop

00404364 <__aeabi_dcmpge>:
  404364:	f84d ed08 	str.w	lr, [sp, #-8]!
  404368:	f7ff ffce 	bl	404308 <__aeabi_cdrcmple>
  40436c:	bf94      	ite	ls
  40436e:	2001      	movls	r0, #1
  404370:	2000      	movhi	r0, #0
  404372:	f85d fb08 	ldr.w	pc, [sp], #8
  404376:	bf00      	nop

00404378 <__aeabi_dcmpgt>:
  404378:	f84d ed08 	str.w	lr, [sp, #-8]!
  40437c:	f7ff ffc4 	bl	404308 <__aeabi_cdrcmple>
  404380:	bf34      	ite	cc
  404382:	2001      	movcc	r0, #1
  404384:	2000      	movcs	r0, #0
  404386:	f85d fb08 	ldr.w	pc, [sp], #8
  40438a:	bf00      	nop

0040438c <__aeabi_d2f>:
  40438c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404390:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404394:	bf24      	itt	cs
  404396:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40439a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40439e:	d90d      	bls.n	4043bc <__aeabi_d2f+0x30>
  4043a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4043a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4043a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4043ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4043b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4043b4:	bf08      	it	eq
  4043b6:	f020 0001 	biceq.w	r0, r0, #1
  4043ba:	4770      	bx	lr
  4043bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4043c0:	d121      	bne.n	404406 <__aeabi_d2f+0x7a>
  4043c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4043c6:	bfbc      	itt	lt
  4043c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4043cc:	4770      	bxlt	lr
  4043ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4043d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4043d6:	f1c2 0218 	rsb	r2, r2, #24
  4043da:	f1c2 0c20 	rsb	ip, r2, #32
  4043de:	fa10 f30c 	lsls.w	r3, r0, ip
  4043e2:	fa20 f002 	lsr.w	r0, r0, r2
  4043e6:	bf18      	it	ne
  4043e8:	f040 0001 	orrne.w	r0, r0, #1
  4043ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4043f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4043f4:	fa03 fc0c 	lsl.w	ip, r3, ip
  4043f8:	ea40 000c 	orr.w	r0, r0, ip
  4043fc:	fa23 f302 	lsr.w	r3, r3, r2
  404400:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404404:	e7cc      	b.n	4043a0 <__aeabi_d2f+0x14>
  404406:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40440a:	d107      	bne.n	40441c <__aeabi_d2f+0x90>
  40440c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404410:	bf1e      	ittt	ne
  404412:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404416:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40441a:	4770      	bxne	lr
  40441c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404420:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404428:	4770      	bx	lr
  40442a:	bf00      	nop

0040442c <__libc_init_array>:
  40442c:	b570      	push	{r4, r5, r6, lr}
  40442e:	4e0f      	ldr	r6, [pc, #60]	; (40446c <__libc_init_array+0x40>)
  404430:	4d0f      	ldr	r5, [pc, #60]	; (404470 <__libc_init_array+0x44>)
  404432:	1b76      	subs	r6, r6, r5
  404434:	10b6      	asrs	r6, r6, #2
  404436:	bf18      	it	ne
  404438:	2400      	movne	r4, #0
  40443a:	d005      	beq.n	404448 <__libc_init_array+0x1c>
  40443c:	3401      	adds	r4, #1
  40443e:	f855 3b04 	ldr.w	r3, [r5], #4
  404442:	4798      	blx	r3
  404444:	42a6      	cmp	r6, r4
  404446:	d1f9      	bne.n	40443c <__libc_init_array+0x10>
  404448:	4e0a      	ldr	r6, [pc, #40]	; (404474 <__libc_init_array+0x48>)
  40444a:	4d0b      	ldr	r5, [pc, #44]	; (404478 <__libc_init_array+0x4c>)
  40444c:	1b76      	subs	r6, r6, r5
  40444e:	f006 fda7 	bl	40afa0 <_init>
  404452:	10b6      	asrs	r6, r6, #2
  404454:	bf18      	it	ne
  404456:	2400      	movne	r4, #0
  404458:	d006      	beq.n	404468 <__libc_init_array+0x3c>
  40445a:	3401      	adds	r4, #1
  40445c:	f855 3b04 	ldr.w	r3, [r5], #4
  404460:	4798      	blx	r3
  404462:	42a6      	cmp	r6, r4
  404464:	d1f9      	bne.n	40445a <__libc_init_array+0x2e>
  404466:	bd70      	pop	{r4, r5, r6, pc}
  404468:	bd70      	pop	{r4, r5, r6, pc}
  40446a:	bf00      	nop
  40446c:	0040afac 	.word	0x0040afac
  404470:	0040afac 	.word	0x0040afac
  404474:	0040afb4 	.word	0x0040afb4
  404478:	0040afac 	.word	0x0040afac

0040447c <malloc>:
  40447c:	4b02      	ldr	r3, [pc, #8]	; (404488 <malloc+0xc>)
  40447e:	4601      	mov	r1, r0
  404480:	6818      	ldr	r0, [r3, #0]
  404482:	f000 b80b 	b.w	40449c <_malloc_r>
  404486:	bf00      	nop
  404488:	20400078 	.word	0x20400078

0040448c <free>:
  40448c:	4b02      	ldr	r3, [pc, #8]	; (404498 <free+0xc>)
  40448e:	4601      	mov	r1, r0
  404490:	6818      	ldr	r0, [r3, #0]
  404492:	f004 bc8d 	b.w	408db0 <_free_r>
  404496:	bf00      	nop
  404498:	20400078 	.word	0x20400078

0040449c <_malloc_r>:
  40449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044a0:	f101 060b 	add.w	r6, r1, #11
  4044a4:	2e16      	cmp	r6, #22
  4044a6:	b083      	sub	sp, #12
  4044a8:	4605      	mov	r5, r0
  4044aa:	f240 809e 	bls.w	4045ea <_malloc_r+0x14e>
  4044ae:	f036 0607 	bics.w	r6, r6, #7
  4044b2:	f100 80bd 	bmi.w	404630 <_malloc_r+0x194>
  4044b6:	42b1      	cmp	r1, r6
  4044b8:	f200 80ba 	bhi.w	404630 <_malloc_r+0x194>
  4044bc:	f000 fb86 	bl	404bcc <__malloc_lock>
  4044c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4044c4:	f0c0 8293 	bcc.w	4049ee <_malloc_r+0x552>
  4044c8:	0a73      	lsrs	r3, r6, #9
  4044ca:	f000 80b8 	beq.w	40463e <_malloc_r+0x1a2>
  4044ce:	2b04      	cmp	r3, #4
  4044d0:	f200 8179 	bhi.w	4047c6 <_malloc_r+0x32a>
  4044d4:	09b3      	lsrs	r3, r6, #6
  4044d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4044da:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4044de:	00c3      	lsls	r3, r0, #3
  4044e0:	4fbf      	ldr	r7, [pc, #764]	; (4047e0 <_malloc_r+0x344>)
  4044e2:	443b      	add	r3, r7
  4044e4:	f1a3 0108 	sub.w	r1, r3, #8
  4044e8:	685c      	ldr	r4, [r3, #4]
  4044ea:	42a1      	cmp	r1, r4
  4044ec:	d106      	bne.n	4044fc <_malloc_r+0x60>
  4044ee:	e00c      	b.n	40450a <_malloc_r+0x6e>
  4044f0:	2a00      	cmp	r2, #0
  4044f2:	f280 80aa 	bge.w	40464a <_malloc_r+0x1ae>
  4044f6:	68e4      	ldr	r4, [r4, #12]
  4044f8:	42a1      	cmp	r1, r4
  4044fa:	d006      	beq.n	40450a <_malloc_r+0x6e>
  4044fc:	6863      	ldr	r3, [r4, #4]
  4044fe:	f023 0303 	bic.w	r3, r3, #3
  404502:	1b9a      	subs	r2, r3, r6
  404504:	2a0f      	cmp	r2, #15
  404506:	ddf3      	ble.n	4044f0 <_malloc_r+0x54>
  404508:	4670      	mov	r0, lr
  40450a:	693c      	ldr	r4, [r7, #16]
  40450c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4047f4 <_malloc_r+0x358>
  404510:	4574      	cmp	r4, lr
  404512:	f000 81ab 	beq.w	40486c <_malloc_r+0x3d0>
  404516:	6863      	ldr	r3, [r4, #4]
  404518:	f023 0303 	bic.w	r3, r3, #3
  40451c:	1b9a      	subs	r2, r3, r6
  40451e:	2a0f      	cmp	r2, #15
  404520:	f300 8190 	bgt.w	404844 <_malloc_r+0x3a8>
  404524:	2a00      	cmp	r2, #0
  404526:	f8c7 e014 	str.w	lr, [r7, #20]
  40452a:	f8c7 e010 	str.w	lr, [r7, #16]
  40452e:	f280 809d 	bge.w	40466c <_malloc_r+0x1d0>
  404532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404536:	f080 8161 	bcs.w	4047fc <_malloc_r+0x360>
  40453a:	08db      	lsrs	r3, r3, #3
  40453c:	f103 0c01 	add.w	ip, r3, #1
  404540:	1099      	asrs	r1, r3, #2
  404542:	687a      	ldr	r2, [r7, #4]
  404544:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404548:	f8c4 8008 	str.w	r8, [r4, #8]
  40454c:	2301      	movs	r3, #1
  40454e:	408b      	lsls	r3, r1
  404550:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404554:	4313      	orrs	r3, r2
  404556:	3908      	subs	r1, #8
  404558:	60e1      	str	r1, [r4, #12]
  40455a:	607b      	str	r3, [r7, #4]
  40455c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404560:	f8c8 400c 	str.w	r4, [r8, #12]
  404564:	1082      	asrs	r2, r0, #2
  404566:	2401      	movs	r4, #1
  404568:	4094      	lsls	r4, r2
  40456a:	429c      	cmp	r4, r3
  40456c:	f200 808b 	bhi.w	404686 <_malloc_r+0x1ea>
  404570:	421c      	tst	r4, r3
  404572:	d106      	bne.n	404582 <_malloc_r+0xe6>
  404574:	f020 0003 	bic.w	r0, r0, #3
  404578:	0064      	lsls	r4, r4, #1
  40457a:	421c      	tst	r4, r3
  40457c:	f100 0004 	add.w	r0, r0, #4
  404580:	d0fa      	beq.n	404578 <_malloc_r+0xdc>
  404582:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404586:	46cc      	mov	ip, r9
  404588:	4680      	mov	r8, r0
  40458a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40458e:	459c      	cmp	ip, r3
  404590:	d107      	bne.n	4045a2 <_malloc_r+0x106>
  404592:	e16d      	b.n	404870 <_malloc_r+0x3d4>
  404594:	2a00      	cmp	r2, #0
  404596:	f280 817b 	bge.w	404890 <_malloc_r+0x3f4>
  40459a:	68db      	ldr	r3, [r3, #12]
  40459c:	459c      	cmp	ip, r3
  40459e:	f000 8167 	beq.w	404870 <_malloc_r+0x3d4>
  4045a2:	6859      	ldr	r1, [r3, #4]
  4045a4:	f021 0103 	bic.w	r1, r1, #3
  4045a8:	1b8a      	subs	r2, r1, r6
  4045aa:	2a0f      	cmp	r2, #15
  4045ac:	ddf2      	ble.n	404594 <_malloc_r+0xf8>
  4045ae:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4045b2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4045b6:	9300      	str	r3, [sp, #0]
  4045b8:	199c      	adds	r4, r3, r6
  4045ba:	4628      	mov	r0, r5
  4045bc:	f046 0601 	orr.w	r6, r6, #1
  4045c0:	f042 0501 	orr.w	r5, r2, #1
  4045c4:	605e      	str	r6, [r3, #4]
  4045c6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4045ca:	f8cc 8008 	str.w	r8, [ip, #8]
  4045ce:	617c      	str	r4, [r7, #20]
  4045d0:	613c      	str	r4, [r7, #16]
  4045d2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4045d6:	f8c4 e008 	str.w	lr, [r4, #8]
  4045da:	6065      	str	r5, [r4, #4]
  4045dc:	505a      	str	r2, [r3, r1]
  4045de:	f000 fafb 	bl	404bd8 <__malloc_unlock>
  4045e2:	9b00      	ldr	r3, [sp, #0]
  4045e4:	f103 0408 	add.w	r4, r3, #8
  4045e8:	e01e      	b.n	404628 <_malloc_r+0x18c>
  4045ea:	2910      	cmp	r1, #16
  4045ec:	d820      	bhi.n	404630 <_malloc_r+0x194>
  4045ee:	f000 faed 	bl	404bcc <__malloc_lock>
  4045f2:	2610      	movs	r6, #16
  4045f4:	2318      	movs	r3, #24
  4045f6:	2002      	movs	r0, #2
  4045f8:	4f79      	ldr	r7, [pc, #484]	; (4047e0 <_malloc_r+0x344>)
  4045fa:	443b      	add	r3, r7
  4045fc:	f1a3 0208 	sub.w	r2, r3, #8
  404600:	685c      	ldr	r4, [r3, #4]
  404602:	4294      	cmp	r4, r2
  404604:	f000 813d 	beq.w	404882 <_malloc_r+0x3e6>
  404608:	6863      	ldr	r3, [r4, #4]
  40460a:	68e1      	ldr	r1, [r4, #12]
  40460c:	68a6      	ldr	r6, [r4, #8]
  40460e:	f023 0303 	bic.w	r3, r3, #3
  404612:	4423      	add	r3, r4
  404614:	4628      	mov	r0, r5
  404616:	685a      	ldr	r2, [r3, #4]
  404618:	60f1      	str	r1, [r6, #12]
  40461a:	f042 0201 	orr.w	r2, r2, #1
  40461e:	608e      	str	r6, [r1, #8]
  404620:	605a      	str	r2, [r3, #4]
  404622:	f000 fad9 	bl	404bd8 <__malloc_unlock>
  404626:	3408      	adds	r4, #8
  404628:	4620      	mov	r0, r4
  40462a:	b003      	add	sp, #12
  40462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404630:	2400      	movs	r4, #0
  404632:	230c      	movs	r3, #12
  404634:	4620      	mov	r0, r4
  404636:	602b      	str	r3, [r5, #0]
  404638:	b003      	add	sp, #12
  40463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40463e:	2040      	movs	r0, #64	; 0x40
  404640:	f44f 7300 	mov.w	r3, #512	; 0x200
  404644:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404648:	e74a      	b.n	4044e0 <_malloc_r+0x44>
  40464a:	4423      	add	r3, r4
  40464c:	68e1      	ldr	r1, [r4, #12]
  40464e:	685a      	ldr	r2, [r3, #4]
  404650:	68a6      	ldr	r6, [r4, #8]
  404652:	f042 0201 	orr.w	r2, r2, #1
  404656:	60f1      	str	r1, [r6, #12]
  404658:	4628      	mov	r0, r5
  40465a:	608e      	str	r6, [r1, #8]
  40465c:	605a      	str	r2, [r3, #4]
  40465e:	f000 fabb 	bl	404bd8 <__malloc_unlock>
  404662:	3408      	adds	r4, #8
  404664:	4620      	mov	r0, r4
  404666:	b003      	add	sp, #12
  404668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40466c:	4423      	add	r3, r4
  40466e:	4628      	mov	r0, r5
  404670:	685a      	ldr	r2, [r3, #4]
  404672:	f042 0201 	orr.w	r2, r2, #1
  404676:	605a      	str	r2, [r3, #4]
  404678:	f000 faae 	bl	404bd8 <__malloc_unlock>
  40467c:	3408      	adds	r4, #8
  40467e:	4620      	mov	r0, r4
  404680:	b003      	add	sp, #12
  404682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404686:	68bc      	ldr	r4, [r7, #8]
  404688:	6863      	ldr	r3, [r4, #4]
  40468a:	f023 0803 	bic.w	r8, r3, #3
  40468e:	45b0      	cmp	r8, r6
  404690:	d304      	bcc.n	40469c <_malloc_r+0x200>
  404692:	eba8 0306 	sub.w	r3, r8, r6
  404696:	2b0f      	cmp	r3, #15
  404698:	f300 8085 	bgt.w	4047a6 <_malloc_r+0x30a>
  40469c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4047f8 <_malloc_r+0x35c>
  4046a0:	4b50      	ldr	r3, [pc, #320]	; (4047e4 <_malloc_r+0x348>)
  4046a2:	f8d9 2000 	ldr.w	r2, [r9]
  4046a6:	681b      	ldr	r3, [r3, #0]
  4046a8:	3201      	adds	r2, #1
  4046aa:	4433      	add	r3, r6
  4046ac:	eb04 0a08 	add.w	sl, r4, r8
  4046b0:	f000 8155 	beq.w	40495e <_malloc_r+0x4c2>
  4046b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4046b8:	330f      	adds	r3, #15
  4046ba:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4046be:	f02b 0b0f 	bic.w	fp, fp, #15
  4046c2:	4659      	mov	r1, fp
  4046c4:	4628      	mov	r0, r5
  4046c6:	f000 faf7 	bl	404cb8 <_sbrk_r>
  4046ca:	1c41      	adds	r1, r0, #1
  4046cc:	4602      	mov	r2, r0
  4046ce:	f000 80fc 	beq.w	4048ca <_malloc_r+0x42e>
  4046d2:	4582      	cmp	sl, r0
  4046d4:	f200 80f7 	bhi.w	4048c6 <_malloc_r+0x42a>
  4046d8:	4b43      	ldr	r3, [pc, #268]	; (4047e8 <_malloc_r+0x34c>)
  4046da:	6819      	ldr	r1, [r3, #0]
  4046dc:	4459      	add	r1, fp
  4046de:	6019      	str	r1, [r3, #0]
  4046e0:	f000 814d 	beq.w	40497e <_malloc_r+0x4e2>
  4046e4:	f8d9 0000 	ldr.w	r0, [r9]
  4046e8:	3001      	adds	r0, #1
  4046ea:	bf1b      	ittet	ne
  4046ec:	eba2 0a0a 	subne.w	sl, r2, sl
  4046f0:	4451      	addne	r1, sl
  4046f2:	f8c9 2000 	streq.w	r2, [r9]
  4046f6:	6019      	strne	r1, [r3, #0]
  4046f8:	f012 0107 	ands.w	r1, r2, #7
  4046fc:	f000 8115 	beq.w	40492a <_malloc_r+0x48e>
  404700:	f1c1 0008 	rsb	r0, r1, #8
  404704:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404708:	4402      	add	r2, r0
  40470a:	3108      	adds	r1, #8
  40470c:	eb02 090b 	add.w	r9, r2, fp
  404710:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404714:	eba1 0909 	sub.w	r9, r1, r9
  404718:	4649      	mov	r1, r9
  40471a:	4628      	mov	r0, r5
  40471c:	9301      	str	r3, [sp, #4]
  40471e:	9200      	str	r2, [sp, #0]
  404720:	f000 faca 	bl	404cb8 <_sbrk_r>
  404724:	1c43      	adds	r3, r0, #1
  404726:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40472a:	f000 8143 	beq.w	4049b4 <_malloc_r+0x518>
  40472e:	1a80      	subs	r0, r0, r2
  404730:	4448      	add	r0, r9
  404732:	f040 0001 	orr.w	r0, r0, #1
  404736:	6819      	ldr	r1, [r3, #0]
  404738:	60ba      	str	r2, [r7, #8]
  40473a:	4449      	add	r1, r9
  40473c:	42bc      	cmp	r4, r7
  40473e:	6050      	str	r0, [r2, #4]
  404740:	6019      	str	r1, [r3, #0]
  404742:	d017      	beq.n	404774 <_malloc_r+0x2d8>
  404744:	f1b8 0f0f 	cmp.w	r8, #15
  404748:	f240 80fb 	bls.w	404942 <_malloc_r+0x4a6>
  40474c:	6860      	ldr	r0, [r4, #4]
  40474e:	f1a8 020c 	sub.w	r2, r8, #12
  404752:	f022 0207 	bic.w	r2, r2, #7
  404756:	eb04 0e02 	add.w	lr, r4, r2
  40475a:	f000 0001 	and.w	r0, r0, #1
  40475e:	f04f 0c05 	mov.w	ip, #5
  404762:	4310      	orrs	r0, r2
  404764:	2a0f      	cmp	r2, #15
  404766:	6060      	str	r0, [r4, #4]
  404768:	f8ce c004 	str.w	ip, [lr, #4]
  40476c:	f8ce c008 	str.w	ip, [lr, #8]
  404770:	f200 8117 	bhi.w	4049a2 <_malloc_r+0x506>
  404774:	4b1d      	ldr	r3, [pc, #116]	; (4047ec <_malloc_r+0x350>)
  404776:	68bc      	ldr	r4, [r7, #8]
  404778:	681a      	ldr	r2, [r3, #0]
  40477a:	4291      	cmp	r1, r2
  40477c:	bf88      	it	hi
  40477e:	6019      	strhi	r1, [r3, #0]
  404780:	4b1b      	ldr	r3, [pc, #108]	; (4047f0 <_malloc_r+0x354>)
  404782:	681a      	ldr	r2, [r3, #0]
  404784:	4291      	cmp	r1, r2
  404786:	6862      	ldr	r2, [r4, #4]
  404788:	bf88      	it	hi
  40478a:	6019      	strhi	r1, [r3, #0]
  40478c:	f022 0203 	bic.w	r2, r2, #3
  404790:	4296      	cmp	r6, r2
  404792:	eba2 0306 	sub.w	r3, r2, r6
  404796:	d801      	bhi.n	40479c <_malloc_r+0x300>
  404798:	2b0f      	cmp	r3, #15
  40479a:	dc04      	bgt.n	4047a6 <_malloc_r+0x30a>
  40479c:	4628      	mov	r0, r5
  40479e:	f000 fa1b 	bl	404bd8 <__malloc_unlock>
  4047a2:	2400      	movs	r4, #0
  4047a4:	e740      	b.n	404628 <_malloc_r+0x18c>
  4047a6:	19a2      	adds	r2, r4, r6
  4047a8:	f043 0301 	orr.w	r3, r3, #1
  4047ac:	f046 0601 	orr.w	r6, r6, #1
  4047b0:	6066      	str	r6, [r4, #4]
  4047b2:	4628      	mov	r0, r5
  4047b4:	60ba      	str	r2, [r7, #8]
  4047b6:	6053      	str	r3, [r2, #4]
  4047b8:	f000 fa0e 	bl	404bd8 <__malloc_unlock>
  4047bc:	3408      	adds	r4, #8
  4047be:	4620      	mov	r0, r4
  4047c0:	b003      	add	sp, #12
  4047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047c6:	2b14      	cmp	r3, #20
  4047c8:	d971      	bls.n	4048ae <_malloc_r+0x412>
  4047ca:	2b54      	cmp	r3, #84	; 0x54
  4047cc:	f200 80a3 	bhi.w	404916 <_malloc_r+0x47a>
  4047d0:	0b33      	lsrs	r3, r6, #12
  4047d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4047d6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4047da:	00c3      	lsls	r3, r0, #3
  4047dc:	e680      	b.n	4044e0 <_malloc_r+0x44>
  4047de:	bf00      	nop
  4047e0:	204004a8 	.word	0x204004a8
  4047e4:	20400e60 	.word	0x20400e60
  4047e8:	20400e30 	.word	0x20400e30
  4047ec:	20400e58 	.word	0x20400e58
  4047f0:	20400e5c 	.word	0x20400e5c
  4047f4:	204004b0 	.word	0x204004b0
  4047f8:	204008b0 	.word	0x204008b0
  4047fc:	0a5a      	lsrs	r2, r3, #9
  4047fe:	2a04      	cmp	r2, #4
  404800:	d95b      	bls.n	4048ba <_malloc_r+0x41e>
  404802:	2a14      	cmp	r2, #20
  404804:	f200 80ae 	bhi.w	404964 <_malloc_r+0x4c8>
  404808:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40480c:	00c9      	lsls	r1, r1, #3
  40480e:	325b      	adds	r2, #91	; 0x5b
  404810:	eb07 0c01 	add.w	ip, r7, r1
  404814:	5879      	ldr	r1, [r7, r1]
  404816:	f1ac 0c08 	sub.w	ip, ip, #8
  40481a:	458c      	cmp	ip, r1
  40481c:	f000 8088 	beq.w	404930 <_malloc_r+0x494>
  404820:	684a      	ldr	r2, [r1, #4]
  404822:	f022 0203 	bic.w	r2, r2, #3
  404826:	4293      	cmp	r3, r2
  404828:	d273      	bcs.n	404912 <_malloc_r+0x476>
  40482a:	6889      	ldr	r1, [r1, #8]
  40482c:	458c      	cmp	ip, r1
  40482e:	d1f7      	bne.n	404820 <_malloc_r+0x384>
  404830:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404834:	687b      	ldr	r3, [r7, #4]
  404836:	60e2      	str	r2, [r4, #12]
  404838:	f8c4 c008 	str.w	ip, [r4, #8]
  40483c:	6094      	str	r4, [r2, #8]
  40483e:	f8cc 400c 	str.w	r4, [ip, #12]
  404842:	e68f      	b.n	404564 <_malloc_r+0xc8>
  404844:	19a1      	adds	r1, r4, r6
  404846:	f046 0c01 	orr.w	ip, r6, #1
  40484a:	f042 0601 	orr.w	r6, r2, #1
  40484e:	f8c4 c004 	str.w	ip, [r4, #4]
  404852:	4628      	mov	r0, r5
  404854:	6179      	str	r1, [r7, #20]
  404856:	6139      	str	r1, [r7, #16]
  404858:	f8c1 e00c 	str.w	lr, [r1, #12]
  40485c:	f8c1 e008 	str.w	lr, [r1, #8]
  404860:	604e      	str	r6, [r1, #4]
  404862:	50e2      	str	r2, [r4, r3]
  404864:	f000 f9b8 	bl	404bd8 <__malloc_unlock>
  404868:	3408      	adds	r4, #8
  40486a:	e6dd      	b.n	404628 <_malloc_r+0x18c>
  40486c:	687b      	ldr	r3, [r7, #4]
  40486e:	e679      	b.n	404564 <_malloc_r+0xc8>
  404870:	f108 0801 	add.w	r8, r8, #1
  404874:	f018 0f03 	tst.w	r8, #3
  404878:	f10c 0c08 	add.w	ip, ip, #8
  40487c:	f47f ae85 	bne.w	40458a <_malloc_r+0xee>
  404880:	e02d      	b.n	4048de <_malloc_r+0x442>
  404882:	68dc      	ldr	r4, [r3, #12]
  404884:	42a3      	cmp	r3, r4
  404886:	bf08      	it	eq
  404888:	3002      	addeq	r0, #2
  40488a:	f43f ae3e 	beq.w	40450a <_malloc_r+0x6e>
  40488e:	e6bb      	b.n	404608 <_malloc_r+0x16c>
  404890:	4419      	add	r1, r3
  404892:	461c      	mov	r4, r3
  404894:	684a      	ldr	r2, [r1, #4]
  404896:	68db      	ldr	r3, [r3, #12]
  404898:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40489c:	f042 0201 	orr.w	r2, r2, #1
  4048a0:	604a      	str	r2, [r1, #4]
  4048a2:	4628      	mov	r0, r5
  4048a4:	60f3      	str	r3, [r6, #12]
  4048a6:	609e      	str	r6, [r3, #8]
  4048a8:	f000 f996 	bl	404bd8 <__malloc_unlock>
  4048ac:	e6bc      	b.n	404628 <_malloc_r+0x18c>
  4048ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4048b2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4048b6:	00c3      	lsls	r3, r0, #3
  4048b8:	e612      	b.n	4044e0 <_malloc_r+0x44>
  4048ba:	099a      	lsrs	r2, r3, #6
  4048bc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4048c0:	00c9      	lsls	r1, r1, #3
  4048c2:	3238      	adds	r2, #56	; 0x38
  4048c4:	e7a4      	b.n	404810 <_malloc_r+0x374>
  4048c6:	42bc      	cmp	r4, r7
  4048c8:	d054      	beq.n	404974 <_malloc_r+0x4d8>
  4048ca:	68bc      	ldr	r4, [r7, #8]
  4048cc:	6862      	ldr	r2, [r4, #4]
  4048ce:	f022 0203 	bic.w	r2, r2, #3
  4048d2:	e75d      	b.n	404790 <_malloc_r+0x2f4>
  4048d4:	f859 3908 	ldr.w	r3, [r9], #-8
  4048d8:	4599      	cmp	r9, r3
  4048da:	f040 8086 	bne.w	4049ea <_malloc_r+0x54e>
  4048de:	f010 0f03 	tst.w	r0, #3
  4048e2:	f100 30ff 	add.w	r0, r0, #4294967295
  4048e6:	d1f5      	bne.n	4048d4 <_malloc_r+0x438>
  4048e8:	687b      	ldr	r3, [r7, #4]
  4048ea:	ea23 0304 	bic.w	r3, r3, r4
  4048ee:	607b      	str	r3, [r7, #4]
  4048f0:	0064      	lsls	r4, r4, #1
  4048f2:	429c      	cmp	r4, r3
  4048f4:	f63f aec7 	bhi.w	404686 <_malloc_r+0x1ea>
  4048f8:	2c00      	cmp	r4, #0
  4048fa:	f43f aec4 	beq.w	404686 <_malloc_r+0x1ea>
  4048fe:	421c      	tst	r4, r3
  404900:	4640      	mov	r0, r8
  404902:	f47f ae3e 	bne.w	404582 <_malloc_r+0xe6>
  404906:	0064      	lsls	r4, r4, #1
  404908:	421c      	tst	r4, r3
  40490a:	f100 0004 	add.w	r0, r0, #4
  40490e:	d0fa      	beq.n	404906 <_malloc_r+0x46a>
  404910:	e637      	b.n	404582 <_malloc_r+0xe6>
  404912:	468c      	mov	ip, r1
  404914:	e78c      	b.n	404830 <_malloc_r+0x394>
  404916:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40491a:	d815      	bhi.n	404948 <_malloc_r+0x4ac>
  40491c:	0bf3      	lsrs	r3, r6, #15
  40491e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404922:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404926:	00c3      	lsls	r3, r0, #3
  404928:	e5da      	b.n	4044e0 <_malloc_r+0x44>
  40492a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40492e:	e6ed      	b.n	40470c <_malloc_r+0x270>
  404930:	687b      	ldr	r3, [r7, #4]
  404932:	1092      	asrs	r2, r2, #2
  404934:	2101      	movs	r1, #1
  404936:	fa01 f202 	lsl.w	r2, r1, r2
  40493a:	4313      	orrs	r3, r2
  40493c:	607b      	str	r3, [r7, #4]
  40493e:	4662      	mov	r2, ip
  404940:	e779      	b.n	404836 <_malloc_r+0x39a>
  404942:	2301      	movs	r3, #1
  404944:	6053      	str	r3, [r2, #4]
  404946:	e729      	b.n	40479c <_malloc_r+0x300>
  404948:	f240 5254 	movw	r2, #1364	; 0x554
  40494c:	4293      	cmp	r3, r2
  40494e:	d822      	bhi.n	404996 <_malloc_r+0x4fa>
  404950:	0cb3      	lsrs	r3, r6, #18
  404952:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404956:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40495a:	00c3      	lsls	r3, r0, #3
  40495c:	e5c0      	b.n	4044e0 <_malloc_r+0x44>
  40495e:	f103 0b10 	add.w	fp, r3, #16
  404962:	e6ae      	b.n	4046c2 <_malloc_r+0x226>
  404964:	2a54      	cmp	r2, #84	; 0x54
  404966:	d829      	bhi.n	4049bc <_malloc_r+0x520>
  404968:	0b1a      	lsrs	r2, r3, #12
  40496a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40496e:	00c9      	lsls	r1, r1, #3
  404970:	326e      	adds	r2, #110	; 0x6e
  404972:	e74d      	b.n	404810 <_malloc_r+0x374>
  404974:	4b20      	ldr	r3, [pc, #128]	; (4049f8 <_malloc_r+0x55c>)
  404976:	6819      	ldr	r1, [r3, #0]
  404978:	4459      	add	r1, fp
  40497a:	6019      	str	r1, [r3, #0]
  40497c:	e6b2      	b.n	4046e4 <_malloc_r+0x248>
  40497e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404982:	2800      	cmp	r0, #0
  404984:	f47f aeae 	bne.w	4046e4 <_malloc_r+0x248>
  404988:	eb08 030b 	add.w	r3, r8, fp
  40498c:	68ba      	ldr	r2, [r7, #8]
  40498e:	f043 0301 	orr.w	r3, r3, #1
  404992:	6053      	str	r3, [r2, #4]
  404994:	e6ee      	b.n	404774 <_malloc_r+0x2d8>
  404996:	207f      	movs	r0, #127	; 0x7f
  404998:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40499c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4049a0:	e59e      	b.n	4044e0 <_malloc_r+0x44>
  4049a2:	f104 0108 	add.w	r1, r4, #8
  4049a6:	4628      	mov	r0, r5
  4049a8:	9300      	str	r3, [sp, #0]
  4049aa:	f004 fa01 	bl	408db0 <_free_r>
  4049ae:	9b00      	ldr	r3, [sp, #0]
  4049b0:	6819      	ldr	r1, [r3, #0]
  4049b2:	e6df      	b.n	404774 <_malloc_r+0x2d8>
  4049b4:	2001      	movs	r0, #1
  4049b6:	f04f 0900 	mov.w	r9, #0
  4049ba:	e6bc      	b.n	404736 <_malloc_r+0x29a>
  4049bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4049c0:	d805      	bhi.n	4049ce <_malloc_r+0x532>
  4049c2:	0bda      	lsrs	r2, r3, #15
  4049c4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4049c8:	00c9      	lsls	r1, r1, #3
  4049ca:	3277      	adds	r2, #119	; 0x77
  4049cc:	e720      	b.n	404810 <_malloc_r+0x374>
  4049ce:	f240 5154 	movw	r1, #1364	; 0x554
  4049d2:	428a      	cmp	r2, r1
  4049d4:	d805      	bhi.n	4049e2 <_malloc_r+0x546>
  4049d6:	0c9a      	lsrs	r2, r3, #18
  4049d8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4049dc:	00c9      	lsls	r1, r1, #3
  4049de:	327c      	adds	r2, #124	; 0x7c
  4049e0:	e716      	b.n	404810 <_malloc_r+0x374>
  4049e2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4049e6:	227e      	movs	r2, #126	; 0x7e
  4049e8:	e712      	b.n	404810 <_malloc_r+0x374>
  4049ea:	687b      	ldr	r3, [r7, #4]
  4049ec:	e780      	b.n	4048f0 <_malloc_r+0x454>
  4049ee:	08f0      	lsrs	r0, r6, #3
  4049f0:	f106 0308 	add.w	r3, r6, #8
  4049f4:	e600      	b.n	4045f8 <_malloc_r+0x15c>
  4049f6:	bf00      	nop
  4049f8:	20400e30 	.word	0x20400e30

004049fc <memcpy>:
  4049fc:	4684      	mov	ip, r0
  4049fe:	ea41 0300 	orr.w	r3, r1, r0
  404a02:	f013 0303 	ands.w	r3, r3, #3
  404a06:	d16d      	bne.n	404ae4 <memcpy+0xe8>
  404a08:	3a40      	subs	r2, #64	; 0x40
  404a0a:	d341      	bcc.n	404a90 <memcpy+0x94>
  404a0c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a10:	f840 3b04 	str.w	r3, [r0], #4
  404a14:	f851 3b04 	ldr.w	r3, [r1], #4
  404a18:	f840 3b04 	str.w	r3, [r0], #4
  404a1c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a20:	f840 3b04 	str.w	r3, [r0], #4
  404a24:	f851 3b04 	ldr.w	r3, [r1], #4
  404a28:	f840 3b04 	str.w	r3, [r0], #4
  404a2c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a30:	f840 3b04 	str.w	r3, [r0], #4
  404a34:	f851 3b04 	ldr.w	r3, [r1], #4
  404a38:	f840 3b04 	str.w	r3, [r0], #4
  404a3c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a40:	f840 3b04 	str.w	r3, [r0], #4
  404a44:	f851 3b04 	ldr.w	r3, [r1], #4
  404a48:	f840 3b04 	str.w	r3, [r0], #4
  404a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a50:	f840 3b04 	str.w	r3, [r0], #4
  404a54:	f851 3b04 	ldr.w	r3, [r1], #4
  404a58:	f840 3b04 	str.w	r3, [r0], #4
  404a5c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a60:	f840 3b04 	str.w	r3, [r0], #4
  404a64:	f851 3b04 	ldr.w	r3, [r1], #4
  404a68:	f840 3b04 	str.w	r3, [r0], #4
  404a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a70:	f840 3b04 	str.w	r3, [r0], #4
  404a74:	f851 3b04 	ldr.w	r3, [r1], #4
  404a78:	f840 3b04 	str.w	r3, [r0], #4
  404a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  404a80:	f840 3b04 	str.w	r3, [r0], #4
  404a84:	f851 3b04 	ldr.w	r3, [r1], #4
  404a88:	f840 3b04 	str.w	r3, [r0], #4
  404a8c:	3a40      	subs	r2, #64	; 0x40
  404a8e:	d2bd      	bcs.n	404a0c <memcpy+0x10>
  404a90:	3230      	adds	r2, #48	; 0x30
  404a92:	d311      	bcc.n	404ab8 <memcpy+0xbc>
  404a94:	f851 3b04 	ldr.w	r3, [r1], #4
  404a98:	f840 3b04 	str.w	r3, [r0], #4
  404a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  404aa0:	f840 3b04 	str.w	r3, [r0], #4
  404aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  404aa8:	f840 3b04 	str.w	r3, [r0], #4
  404aac:	f851 3b04 	ldr.w	r3, [r1], #4
  404ab0:	f840 3b04 	str.w	r3, [r0], #4
  404ab4:	3a10      	subs	r2, #16
  404ab6:	d2ed      	bcs.n	404a94 <memcpy+0x98>
  404ab8:	320c      	adds	r2, #12
  404aba:	d305      	bcc.n	404ac8 <memcpy+0xcc>
  404abc:	f851 3b04 	ldr.w	r3, [r1], #4
  404ac0:	f840 3b04 	str.w	r3, [r0], #4
  404ac4:	3a04      	subs	r2, #4
  404ac6:	d2f9      	bcs.n	404abc <memcpy+0xc0>
  404ac8:	3204      	adds	r2, #4
  404aca:	d008      	beq.n	404ade <memcpy+0xe2>
  404acc:	07d2      	lsls	r2, r2, #31
  404ace:	bf1c      	itt	ne
  404ad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ad4:	f800 3b01 	strbne.w	r3, [r0], #1
  404ad8:	d301      	bcc.n	404ade <memcpy+0xe2>
  404ada:	880b      	ldrh	r3, [r1, #0]
  404adc:	8003      	strh	r3, [r0, #0]
  404ade:	4660      	mov	r0, ip
  404ae0:	4770      	bx	lr
  404ae2:	bf00      	nop
  404ae4:	2a08      	cmp	r2, #8
  404ae6:	d313      	bcc.n	404b10 <memcpy+0x114>
  404ae8:	078b      	lsls	r3, r1, #30
  404aea:	d08d      	beq.n	404a08 <memcpy+0xc>
  404aec:	f010 0303 	ands.w	r3, r0, #3
  404af0:	d08a      	beq.n	404a08 <memcpy+0xc>
  404af2:	f1c3 0304 	rsb	r3, r3, #4
  404af6:	1ad2      	subs	r2, r2, r3
  404af8:	07db      	lsls	r3, r3, #31
  404afa:	bf1c      	itt	ne
  404afc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b00:	f800 3b01 	strbne.w	r3, [r0], #1
  404b04:	d380      	bcc.n	404a08 <memcpy+0xc>
  404b06:	f831 3b02 	ldrh.w	r3, [r1], #2
  404b0a:	f820 3b02 	strh.w	r3, [r0], #2
  404b0e:	e77b      	b.n	404a08 <memcpy+0xc>
  404b10:	3a04      	subs	r2, #4
  404b12:	d3d9      	bcc.n	404ac8 <memcpy+0xcc>
  404b14:	3a01      	subs	r2, #1
  404b16:	f811 3b01 	ldrb.w	r3, [r1], #1
  404b1a:	f800 3b01 	strb.w	r3, [r0], #1
  404b1e:	d2f9      	bcs.n	404b14 <memcpy+0x118>
  404b20:	780b      	ldrb	r3, [r1, #0]
  404b22:	7003      	strb	r3, [r0, #0]
  404b24:	784b      	ldrb	r3, [r1, #1]
  404b26:	7043      	strb	r3, [r0, #1]
  404b28:	788b      	ldrb	r3, [r1, #2]
  404b2a:	7083      	strb	r3, [r0, #2]
  404b2c:	4660      	mov	r0, ip
  404b2e:	4770      	bx	lr

00404b30 <memset>:
  404b30:	b470      	push	{r4, r5, r6}
  404b32:	0786      	lsls	r6, r0, #30
  404b34:	d046      	beq.n	404bc4 <memset+0x94>
  404b36:	1e54      	subs	r4, r2, #1
  404b38:	2a00      	cmp	r2, #0
  404b3a:	d041      	beq.n	404bc0 <memset+0x90>
  404b3c:	b2ca      	uxtb	r2, r1
  404b3e:	4603      	mov	r3, r0
  404b40:	e002      	b.n	404b48 <memset+0x18>
  404b42:	f114 34ff 	adds.w	r4, r4, #4294967295
  404b46:	d33b      	bcc.n	404bc0 <memset+0x90>
  404b48:	f803 2b01 	strb.w	r2, [r3], #1
  404b4c:	079d      	lsls	r5, r3, #30
  404b4e:	d1f8      	bne.n	404b42 <memset+0x12>
  404b50:	2c03      	cmp	r4, #3
  404b52:	d92e      	bls.n	404bb2 <memset+0x82>
  404b54:	b2cd      	uxtb	r5, r1
  404b56:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404b5a:	2c0f      	cmp	r4, #15
  404b5c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404b60:	d919      	bls.n	404b96 <memset+0x66>
  404b62:	f103 0210 	add.w	r2, r3, #16
  404b66:	4626      	mov	r6, r4
  404b68:	3e10      	subs	r6, #16
  404b6a:	2e0f      	cmp	r6, #15
  404b6c:	f842 5c10 	str.w	r5, [r2, #-16]
  404b70:	f842 5c0c 	str.w	r5, [r2, #-12]
  404b74:	f842 5c08 	str.w	r5, [r2, #-8]
  404b78:	f842 5c04 	str.w	r5, [r2, #-4]
  404b7c:	f102 0210 	add.w	r2, r2, #16
  404b80:	d8f2      	bhi.n	404b68 <memset+0x38>
  404b82:	f1a4 0210 	sub.w	r2, r4, #16
  404b86:	f022 020f 	bic.w	r2, r2, #15
  404b8a:	f004 040f 	and.w	r4, r4, #15
  404b8e:	3210      	adds	r2, #16
  404b90:	2c03      	cmp	r4, #3
  404b92:	4413      	add	r3, r2
  404b94:	d90d      	bls.n	404bb2 <memset+0x82>
  404b96:	461e      	mov	r6, r3
  404b98:	4622      	mov	r2, r4
  404b9a:	3a04      	subs	r2, #4
  404b9c:	2a03      	cmp	r2, #3
  404b9e:	f846 5b04 	str.w	r5, [r6], #4
  404ba2:	d8fa      	bhi.n	404b9a <memset+0x6a>
  404ba4:	1f22      	subs	r2, r4, #4
  404ba6:	f022 0203 	bic.w	r2, r2, #3
  404baa:	3204      	adds	r2, #4
  404bac:	4413      	add	r3, r2
  404bae:	f004 0403 	and.w	r4, r4, #3
  404bb2:	b12c      	cbz	r4, 404bc0 <memset+0x90>
  404bb4:	b2c9      	uxtb	r1, r1
  404bb6:	441c      	add	r4, r3
  404bb8:	f803 1b01 	strb.w	r1, [r3], #1
  404bbc:	429c      	cmp	r4, r3
  404bbe:	d1fb      	bne.n	404bb8 <memset+0x88>
  404bc0:	bc70      	pop	{r4, r5, r6}
  404bc2:	4770      	bx	lr
  404bc4:	4614      	mov	r4, r2
  404bc6:	4603      	mov	r3, r0
  404bc8:	e7c2      	b.n	404b50 <memset+0x20>
  404bca:	bf00      	nop

00404bcc <__malloc_lock>:
  404bcc:	4801      	ldr	r0, [pc, #4]	; (404bd4 <__malloc_lock+0x8>)
  404bce:	f004 bb89 	b.w	4092e4 <__retarget_lock_acquire_recursive>
  404bd2:	bf00      	nop
  404bd4:	20400ecc 	.word	0x20400ecc

00404bd8 <__malloc_unlock>:
  404bd8:	4801      	ldr	r0, [pc, #4]	; (404be0 <__malloc_unlock+0x8>)
  404bda:	f004 bb85 	b.w	4092e8 <__retarget_lock_release_recursive>
  404bde:	bf00      	nop
  404be0:	20400ecc 	.word	0x20400ecc

00404be4 <printf>:
  404be4:	b40f      	push	{r0, r1, r2, r3}
  404be6:	b500      	push	{lr}
  404be8:	4907      	ldr	r1, [pc, #28]	; (404c08 <printf+0x24>)
  404bea:	b083      	sub	sp, #12
  404bec:	ab04      	add	r3, sp, #16
  404bee:	6808      	ldr	r0, [r1, #0]
  404bf0:	f853 2b04 	ldr.w	r2, [r3], #4
  404bf4:	6881      	ldr	r1, [r0, #8]
  404bf6:	9301      	str	r3, [sp, #4]
  404bf8:	f001 fc1e 	bl	406438 <_vfprintf_r>
  404bfc:	b003      	add	sp, #12
  404bfe:	f85d eb04 	ldr.w	lr, [sp], #4
  404c02:	b004      	add	sp, #16
  404c04:	4770      	bx	lr
  404c06:	bf00      	nop
  404c08:	20400078 	.word	0x20400078

00404c0c <_puts_r>:
  404c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404c0e:	4605      	mov	r5, r0
  404c10:	b089      	sub	sp, #36	; 0x24
  404c12:	4608      	mov	r0, r1
  404c14:	460c      	mov	r4, r1
  404c16:	f000 f973 	bl	404f00 <strlen>
  404c1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404c1c:	4f21      	ldr	r7, [pc, #132]	; (404ca4 <_puts_r+0x98>)
  404c1e:	9404      	str	r4, [sp, #16]
  404c20:	2601      	movs	r6, #1
  404c22:	1c44      	adds	r4, r0, #1
  404c24:	a904      	add	r1, sp, #16
  404c26:	2202      	movs	r2, #2
  404c28:	9403      	str	r4, [sp, #12]
  404c2a:	9005      	str	r0, [sp, #20]
  404c2c:	68ac      	ldr	r4, [r5, #8]
  404c2e:	9706      	str	r7, [sp, #24]
  404c30:	9607      	str	r6, [sp, #28]
  404c32:	9101      	str	r1, [sp, #4]
  404c34:	9202      	str	r2, [sp, #8]
  404c36:	b353      	cbz	r3, 404c8e <_puts_r+0x82>
  404c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c3a:	f013 0f01 	tst.w	r3, #1
  404c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c42:	b29a      	uxth	r2, r3
  404c44:	d101      	bne.n	404c4a <_puts_r+0x3e>
  404c46:	0590      	lsls	r0, r2, #22
  404c48:	d525      	bpl.n	404c96 <_puts_r+0x8a>
  404c4a:	0491      	lsls	r1, r2, #18
  404c4c:	d406      	bmi.n	404c5c <_puts_r+0x50>
  404c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404c58:	81a3      	strh	r3, [r4, #12]
  404c5a:	6662      	str	r2, [r4, #100]	; 0x64
  404c5c:	4628      	mov	r0, r5
  404c5e:	aa01      	add	r2, sp, #4
  404c60:	4621      	mov	r1, r4
  404c62:	f004 f98b 	bl	408f7c <__sfvwrite_r>
  404c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c68:	2800      	cmp	r0, #0
  404c6a:	bf0c      	ite	eq
  404c6c:	250a      	moveq	r5, #10
  404c6e:	f04f 35ff 	movne.w	r5, #4294967295
  404c72:	07da      	lsls	r2, r3, #31
  404c74:	d402      	bmi.n	404c7c <_puts_r+0x70>
  404c76:	89a3      	ldrh	r3, [r4, #12]
  404c78:	059b      	lsls	r3, r3, #22
  404c7a:	d502      	bpl.n	404c82 <_puts_r+0x76>
  404c7c:	4628      	mov	r0, r5
  404c7e:	b009      	add	sp, #36	; 0x24
  404c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c84:	f004 fb30 	bl	4092e8 <__retarget_lock_release_recursive>
  404c88:	4628      	mov	r0, r5
  404c8a:	b009      	add	sp, #36	; 0x24
  404c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c8e:	4628      	mov	r0, r5
  404c90:	f003 ffec 	bl	408c6c <__sinit>
  404c94:	e7d0      	b.n	404c38 <_puts_r+0x2c>
  404c96:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c98:	f004 fb24 	bl	4092e4 <__retarget_lock_acquire_recursive>
  404c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ca0:	b29a      	uxth	r2, r3
  404ca2:	e7d2      	b.n	404c4a <_puts_r+0x3e>
  404ca4:	0040acf4 	.word	0x0040acf4

00404ca8 <puts>:
  404ca8:	4b02      	ldr	r3, [pc, #8]	; (404cb4 <puts+0xc>)
  404caa:	4601      	mov	r1, r0
  404cac:	6818      	ldr	r0, [r3, #0]
  404cae:	f7ff bfad 	b.w	404c0c <_puts_r>
  404cb2:	bf00      	nop
  404cb4:	20400078 	.word	0x20400078

00404cb8 <_sbrk_r>:
  404cb8:	b538      	push	{r3, r4, r5, lr}
  404cba:	4c07      	ldr	r4, [pc, #28]	; (404cd8 <_sbrk_r+0x20>)
  404cbc:	2300      	movs	r3, #0
  404cbe:	4605      	mov	r5, r0
  404cc0:	4608      	mov	r0, r1
  404cc2:	6023      	str	r3, [r4, #0]
  404cc4:	f7fc fc14 	bl	4014f0 <_sbrk>
  404cc8:	1c43      	adds	r3, r0, #1
  404cca:	d000      	beq.n	404cce <_sbrk_r+0x16>
  404ccc:	bd38      	pop	{r3, r4, r5, pc}
  404cce:	6823      	ldr	r3, [r4, #0]
  404cd0:	2b00      	cmp	r3, #0
  404cd2:	d0fb      	beq.n	404ccc <_sbrk_r+0x14>
  404cd4:	602b      	str	r3, [r5, #0]
  404cd6:	bd38      	pop	{r3, r4, r5, pc}
  404cd8:	20400ee0 	.word	0x20400ee0

00404cdc <setbuf>:
  404cdc:	2900      	cmp	r1, #0
  404cde:	bf0c      	ite	eq
  404ce0:	2202      	moveq	r2, #2
  404ce2:	2200      	movne	r2, #0
  404ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404ce8:	f000 b800 	b.w	404cec <setvbuf>

00404cec <setvbuf>:
  404cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404cf0:	4c61      	ldr	r4, [pc, #388]	; (404e78 <setvbuf+0x18c>)
  404cf2:	6825      	ldr	r5, [r4, #0]
  404cf4:	b083      	sub	sp, #12
  404cf6:	4604      	mov	r4, r0
  404cf8:	460f      	mov	r7, r1
  404cfa:	4690      	mov	r8, r2
  404cfc:	461e      	mov	r6, r3
  404cfe:	b115      	cbz	r5, 404d06 <setvbuf+0x1a>
  404d00:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404d02:	2b00      	cmp	r3, #0
  404d04:	d064      	beq.n	404dd0 <setvbuf+0xe4>
  404d06:	f1b8 0f02 	cmp.w	r8, #2
  404d0a:	d006      	beq.n	404d1a <setvbuf+0x2e>
  404d0c:	f1b8 0f01 	cmp.w	r8, #1
  404d10:	f200 809f 	bhi.w	404e52 <setvbuf+0x166>
  404d14:	2e00      	cmp	r6, #0
  404d16:	f2c0 809c 	blt.w	404e52 <setvbuf+0x166>
  404d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404d1c:	07d8      	lsls	r0, r3, #31
  404d1e:	d534      	bpl.n	404d8a <setvbuf+0x9e>
  404d20:	4621      	mov	r1, r4
  404d22:	4628      	mov	r0, r5
  404d24:	f003 ff4a 	bl	408bbc <_fflush_r>
  404d28:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404d2a:	b141      	cbz	r1, 404d3e <setvbuf+0x52>
  404d2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404d30:	4299      	cmp	r1, r3
  404d32:	d002      	beq.n	404d3a <setvbuf+0x4e>
  404d34:	4628      	mov	r0, r5
  404d36:	f004 f83b 	bl	408db0 <_free_r>
  404d3a:	2300      	movs	r3, #0
  404d3c:	6323      	str	r3, [r4, #48]	; 0x30
  404d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d42:	2200      	movs	r2, #0
  404d44:	61a2      	str	r2, [r4, #24]
  404d46:	6062      	str	r2, [r4, #4]
  404d48:	061a      	lsls	r2, r3, #24
  404d4a:	d43a      	bmi.n	404dc2 <setvbuf+0xd6>
  404d4c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404d50:	f023 0303 	bic.w	r3, r3, #3
  404d54:	f1b8 0f02 	cmp.w	r8, #2
  404d58:	81a3      	strh	r3, [r4, #12]
  404d5a:	d01d      	beq.n	404d98 <setvbuf+0xac>
  404d5c:	ab01      	add	r3, sp, #4
  404d5e:	466a      	mov	r2, sp
  404d60:	4621      	mov	r1, r4
  404d62:	4628      	mov	r0, r5
  404d64:	f004 fac2 	bl	4092ec <__swhatbuf_r>
  404d68:	89a3      	ldrh	r3, [r4, #12]
  404d6a:	4318      	orrs	r0, r3
  404d6c:	81a0      	strh	r0, [r4, #12]
  404d6e:	2e00      	cmp	r6, #0
  404d70:	d132      	bne.n	404dd8 <setvbuf+0xec>
  404d72:	9e00      	ldr	r6, [sp, #0]
  404d74:	4630      	mov	r0, r6
  404d76:	f7ff fb81 	bl	40447c <malloc>
  404d7a:	4607      	mov	r7, r0
  404d7c:	2800      	cmp	r0, #0
  404d7e:	d06b      	beq.n	404e58 <setvbuf+0x16c>
  404d80:	89a3      	ldrh	r3, [r4, #12]
  404d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404d86:	81a3      	strh	r3, [r4, #12]
  404d88:	e028      	b.n	404ddc <setvbuf+0xf0>
  404d8a:	89a3      	ldrh	r3, [r4, #12]
  404d8c:	0599      	lsls	r1, r3, #22
  404d8e:	d4c7      	bmi.n	404d20 <setvbuf+0x34>
  404d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404d92:	f004 faa7 	bl	4092e4 <__retarget_lock_acquire_recursive>
  404d96:	e7c3      	b.n	404d20 <setvbuf+0x34>
  404d98:	2500      	movs	r5, #0
  404d9a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404d9c:	2600      	movs	r6, #0
  404d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404da2:	f043 0302 	orr.w	r3, r3, #2
  404da6:	2001      	movs	r0, #1
  404da8:	60a6      	str	r6, [r4, #8]
  404daa:	07ce      	lsls	r6, r1, #31
  404dac:	81a3      	strh	r3, [r4, #12]
  404dae:	6022      	str	r2, [r4, #0]
  404db0:	6122      	str	r2, [r4, #16]
  404db2:	6160      	str	r0, [r4, #20]
  404db4:	d401      	bmi.n	404dba <setvbuf+0xce>
  404db6:	0598      	lsls	r0, r3, #22
  404db8:	d53e      	bpl.n	404e38 <setvbuf+0x14c>
  404dba:	4628      	mov	r0, r5
  404dbc:	b003      	add	sp, #12
  404dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404dc2:	6921      	ldr	r1, [r4, #16]
  404dc4:	4628      	mov	r0, r5
  404dc6:	f003 fff3 	bl	408db0 <_free_r>
  404dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404dce:	e7bd      	b.n	404d4c <setvbuf+0x60>
  404dd0:	4628      	mov	r0, r5
  404dd2:	f003 ff4b 	bl	408c6c <__sinit>
  404dd6:	e796      	b.n	404d06 <setvbuf+0x1a>
  404dd8:	2f00      	cmp	r7, #0
  404dda:	d0cb      	beq.n	404d74 <setvbuf+0x88>
  404ddc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404dde:	2b00      	cmp	r3, #0
  404de0:	d033      	beq.n	404e4a <setvbuf+0x15e>
  404de2:	9b00      	ldr	r3, [sp, #0]
  404de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404de8:	6027      	str	r7, [r4, #0]
  404dea:	429e      	cmp	r6, r3
  404dec:	bf1c      	itt	ne
  404dee:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404df2:	81a2      	strhne	r2, [r4, #12]
  404df4:	f1b8 0f01 	cmp.w	r8, #1
  404df8:	bf04      	itt	eq
  404dfa:	f042 0201 	orreq.w	r2, r2, #1
  404dfe:	81a2      	strheq	r2, [r4, #12]
  404e00:	b292      	uxth	r2, r2
  404e02:	f012 0308 	ands.w	r3, r2, #8
  404e06:	6127      	str	r7, [r4, #16]
  404e08:	6166      	str	r6, [r4, #20]
  404e0a:	d00e      	beq.n	404e2a <setvbuf+0x13e>
  404e0c:	07d1      	lsls	r1, r2, #31
  404e0e:	d51a      	bpl.n	404e46 <setvbuf+0x15a>
  404e10:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404e12:	4276      	negs	r6, r6
  404e14:	2300      	movs	r3, #0
  404e16:	f015 0501 	ands.w	r5, r5, #1
  404e1a:	61a6      	str	r6, [r4, #24]
  404e1c:	60a3      	str	r3, [r4, #8]
  404e1e:	d009      	beq.n	404e34 <setvbuf+0x148>
  404e20:	2500      	movs	r5, #0
  404e22:	4628      	mov	r0, r5
  404e24:	b003      	add	sp, #12
  404e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404e2a:	60a3      	str	r3, [r4, #8]
  404e2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404e2e:	f015 0501 	ands.w	r5, r5, #1
  404e32:	d1f5      	bne.n	404e20 <setvbuf+0x134>
  404e34:	0593      	lsls	r3, r2, #22
  404e36:	d4c0      	bmi.n	404dba <setvbuf+0xce>
  404e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e3a:	f004 fa55 	bl	4092e8 <__retarget_lock_release_recursive>
  404e3e:	4628      	mov	r0, r5
  404e40:	b003      	add	sp, #12
  404e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404e46:	60a6      	str	r6, [r4, #8]
  404e48:	e7f0      	b.n	404e2c <setvbuf+0x140>
  404e4a:	4628      	mov	r0, r5
  404e4c:	f003 ff0e 	bl	408c6c <__sinit>
  404e50:	e7c7      	b.n	404de2 <setvbuf+0xf6>
  404e52:	f04f 35ff 	mov.w	r5, #4294967295
  404e56:	e7b0      	b.n	404dba <setvbuf+0xce>
  404e58:	f8dd 9000 	ldr.w	r9, [sp]
  404e5c:	45b1      	cmp	r9, r6
  404e5e:	d004      	beq.n	404e6a <setvbuf+0x17e>
  404e60:	4648      	mov	r0, r9
  404e62:	f7ff fb0b 	bl	40447c <malloc>
  404e66:	4607      	mov	r7, r0
  404e68:	b920      	cbnz	r0, 404e74 <setvbuf+0x188>
  404e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e6e:	f04f 35ff 	mov.w	r5, #4294967295
  404e72:	e792      	b.n	404d9a <setvbuf+0xae>
  404e74:	464e      	mov	r6, r9
  404e76:	e783      	b.n	404d80 <setvbuf+0x94>
  404e78:	20400078 	.word	0x20400078

00404e7c <sprintf>:
  404e7c:	b40e      	push	{r1, r2, r3}
  404e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e80:	b09c      	sub	sp, #112	; 0x70
  404e82:	ab21      	add	r3, sp, #132	; 0x84
  404e84:	490f      	ldr	r1, [pc, #60]	; (404ec4 <sprintf+0x48>)
  404e86:	f853 2b04 	ldr.w	r2, [r3], #4
  404e8a:	9301      	str	r3, [sp, #4]
  404e8c:	4605      	mov	r5, r0
  404e8e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404e92:	6808      	ldr	r0, [r1, #0]
  404e94:	9502      	str	r5, [sp, #8]
  404e96:	f44f 7702 	mov.w	r7, #520	; 0x208
  404e9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404e9e:	a902      	add	r1, sp, #8
  404ea0:	9506      	str	r5, [sp, #24]
  404ea2:	f8ad 7014 	strh.w	r7, [sp, #20]
  404ea6:	9404      	str	r4, [sp, #16]
  404ea8:	9407      	str	r4, [sp, #28]
  404eaa:	f8ad 6016 	strh.w	r6, [sp, #22]
  404eae:	f000 f895 	bl	404fdc <_svfprintf_r>
  404eb2:	9b02      	ldr	r3, [sp, #8]
  404eb4:	2200      	movs	r2, #0
  404eb6:	701a      	strb	r2, [r3, #0]
  404eb8:	b01c      	add	sp, #112	; 0x70
  404eba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404ebe:	b003      	add	sp, #12
  404ec0:	4770      	bx	lr
  404ec2:	bf00      	nop
  404ec4:	20400078 	.word	0x20400078
	...

00404f00 <strlen>:
  404f00:	f890 f000 	pld	[r0]
  404f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404f08:	f020 0107 	bic.w	r1, r0, #7
  404f0c:	f06f 0c00 	mvn.w	ip, #0
  404f10:	f010 0407 	ands.w	r4, r0, #7
  404f14:	f891 f020 	pld	[r1, #32]
  404f18:	f040 8049 	bne.w	404fae <strlen+0xae>
  404f1c:	f04f 0400 	mov.w	r4, #0
  404f20:	f06f 0007 	mvn.w	r0, #7
  404f24:	e9d1 2300 	ldrd	r2, r3, [r1]
  404f28:	f891 f040 	pld	[r1, #64]	; 0x40
  404f2c:	f100 0008 	add.w	r0, r0, #8
  404f30:	fa82 f24c 	uadd8	r2, r2, ip
  404f34:	faa4 f28c 	sel	r2, r4, ip
  404f38:	fa83 f34c 	uadd8	r3, r3, ip
  404f3c:	faa2 f38c 	sel	r3, r2, ip
  404f40:	bb4b      	cbnz	r3, 404f96 <strlen+0x96>
  404f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404f46:	fa82 f24c 	uadd8	r2, r2, ip
  404f4a:	f100 0008 	add.w	r0, r0, #8
  404f4e:	faa4 f28c 	sel	r2, r4, ip
  404f52:	fa83 f34c 	uadd8	r3, r3, ip
  404f56:	faa2 f38c 	sel	r3, r2, ip
  404f5a:	b9e3      	cbnz	r3, 404f96 <strlen+0x96>
  404f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404f60:	fa82 f24c 	uadd8	r2, r2, ip
  404f64:	f100 0008 	add.w	r0, r0, #8
  404f68:	faa4 f28c 	sel	r2, r4, ip
  404f6c:	fa83 f34c 	uadd8	r3, r3, ip
  404f70:	faa2 f38c 	sel	r3, r2, ip
  404f74:	b97b      	cbnz	r3, 404f96 <strlen+0x96>
  404f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404f7a:	f101 0120 	add.w	r1, r1, #32
  404f7e:	fa82 f24c 	uadd8	r2, r2, ip
  404f82:	f100 0008 	add.w	r0, r0, #8
  404f86:	faa4 f28c 	sel	r2, r4, ip
  404f8a:	fa83 f34c 	uadd8	r3, r3, ip
  404f8e:	faa2 f38c 	sel	r3, r2, ip
  404f92:	2b00      	cmp	r3, #0
  404f94:	d0c6      	beq.n	404f24 <strlen+0x24>
  404f96:	2a00      	cmp	r2, #0
  404f98:	bf04      	itt	eq
  404f9a:	3004      	addeq	r0, #4
  404f9c:	461a      	moveq	r2, r3
  404f9e:	ba12      	rev	r2, r2
  404fa0:	fab2 f282 	clz	r2, r2
  404fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404fac:	4770      	bx	lr
  404fae:	e9d1 2300 	ldrd	r2, r3, [r1]
  404fb2:	f004 0503 	and.w	r5, r4, #3
  404fb6:	f1c4 0000 	rsb	r0, r4, #0
  404fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404fbe:	f014 0f04 	tst.w	r4, #4
  404fc2:	f891 f040 	pld	[r1, #64]	; 0x40
  404fc6:	fa0c f505 	lsl.w	r5, ip, r5
  404fca:	ea62 0205 	orn	r2, r2, r5
  404fce:	bf1c      	itt	ne
  404fd0:	ea63 0305 	ornne	r3, r3, r5
  404fd4:	4662      	movne	r2, ip
  404fd6:	f04f 0400 	mov.w	r4, #0
  404fda:	e7a9      	b.n	404f30 <strlen+0x30>

00404fdc <_svfprintf_r>:
  404fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fe0:	b0c3      	sub	sp, #268	; 0x10c
  404fe2:	460c      	mov	r4, r1
  404fe4:	910b      	str	r1, [sp, #44]	; 0x2c
  404fe6:	4692      	mov	sl, r2
  404fe8:	930f      	str	r3, [sp, #60]	; 0x3c
  404fea:	900c      	str	r0, [sp, #48]	; 0x30
  404fec:	f004 f968 	bl	4092c0 <_localeconv_r>
  404ff0:	6803      	ldr	r3, [r0, #0]
  404ff2:	931a      	str	r3, [sp, #104]	; 0x68
  404ff4:	4618      	mov	r0, r3
  404ff6:	f7ff ff83 	bl	404f00 <strlen>
  404ffa:	89a3      	ldrh	r3, [r4, #12]
  404ffc:	9019      	str	r0, [sp, #100]	; 0x64
  404ffe:	0619      	lsls	r1, r3, #24
  405000:	d503      	bpl.n	40500a <_svfprintf_r+0x2e>
  405002:	6923      	ldr	r3, [r4, #16]
  405004:	2b00      	cmp	r3, #0
  405006:	f001 8003 	beq.w	406010 <_svfprintf_r+0x1034>
  40500a:	2300      	movs	r3, #0
  40500c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  405010:	9313      	str	r3, [sp, #76]	; 0x4c
  405012:	9315      	str	r3, [sp, #84]	; 0x54
  405014:	9314      	str	r3, [sp, #80]	; 0x50
  405016:	9327      	str	r3, [sp, #156]	; 0x9c
  405018:	9326      	str	r3, [sp, #152]	; 0x98
  40501a:	9318      	str	r3, [sp, #96]	; 0x60
  40501c:	931b      	str	r3, [sp, #108]	; 0x6c
  40501e:	9309      	str	r3, [sp, #36]	; 0x24
  405020:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  405024:	46c8      	mov	r8, r9
  405026:	9316      	str	r3, [sp, #88]	; 0x58
  405028:	9317      	str	r3, [sp, #92]	; 0x5c
  40502a:	f89a 3000 	ldrb.w	r3, [sl]
  40502e:	4654      	mov	r4, sl
  405030:	b1e3      	cbz	r3, 40506c <_svfprintf_r+0x90>
  405032:	2b25      	cmp	r3, #37	; 0x25
  405034:	d102      	bne.n	40503c <_svfprintf_r+0x60>
  405036:	e019      	b.n	40506c <_svfprintf_r+0x90>
  405038:	2b25      	cmp	r3, #37	; 0x25
  40503a:	d003      	beq.n	405044 <_svfprintf_r+0x68>
  40503c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405040:	2b00      	cmp	r3, #0
  405042:	d1f9      	bne.n	405038 <_svfprintf_r+0x5c>
  405044:	eba4 050a 	sub.w	r5, r4, sl
  405048:	b185      	cbz	r5, 40506c <_svfprintf_r+0x90>
  40504a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40504c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40504e:	f8c8 a000 	str.w	sl, [r8]
  405052:	3301      	adds	r3, #1
  405054:	442a      	add	r2, r5
  405056:	2b07      	cmp	r3, #7
  405058:	f8c8 5004 	str.w	r5, [r8, #4]
  40505c:	9227      	str	r2, [sp, #156]	; 0x9c
  40505e:	9326      	str	r3, [sp, #152]	; 0x98
  405060:	dc7f      	bgt.n	405162 <_svfprintf_r+0x186>
  405062:	f108 0808 	add.w	r8, r8, #8
  405066:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405068:	442b      	add	r3, r5
  40506a:	9309      	str	r3, [sp, #36]	; 0x24
  40506c:	7823      	ldrb	r3, [r4, #0]
  40506e:	2b00      	cmp	r3, #0
  405070:	d07f      	beq.n	405172 <_svfprintf_r+0x196>
  405072:	2300      	movs	r3, #0
  405074:	461a      	mov	r2, r3
  405076:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40507a:	4619      	mov	r1, r3
  40507c:	930d      	str	r3, [sp, #52]	; 0x34
  40507e:	469b      	mov	fp, r3
  405080:	f04f 30ff 	mov.w	r0, #4294967295
  405084:	7863      	ldrb	r3, [r4, #1]
  405086:	900a      	str	r0, [sp, #40]	; 0x28
  405088:	f104 0a01 	add.w	sl, r4, #1
  40508c:	f10a 0a01 	add.w	sl, sl, #1
  405090:	f1a3 0020 	sub.w	r0, r3, #32
  405094:	2858      	cmp	r0, #88	; 0x58
  405096:	f200 83c1 	bhi.w	40581c <_svfprintf_r+0x840>
  40509a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40509e:	0238      	.short	0x0238
  4050a0:	03bf03bf 	.word	0x03bf03bf
  4050a4:	03bf0240 	.word	0x03bf0240
  4050a8:	03bf03bf 	.word	0x03bf03bf
  4050ac:	03bf03bf 	.word	0x03bf03bf
  4050b0:	024503bf 	.word	0x024503bf
  4050b4:	03bf0203 	.word	0x03bf0203
  4050b8:	026b005d 	.word	0x026b005d
  4050bc:	028603bf 	.word	0x028603bf
  4050c0:	039d039d 	.word	0x039d039d
  4050c4:	039d039d 	.word	0x039d039d
  4050c8:	039d039d 	.word	0x039d039d
  4050cc:	039d039d 	.word	0x039d039d
  4050d0:	03bf039d 	.word	0x03bf039d
  4050d4:	03bf03bf 	.word	0x03bf03bf
  4050d8:	03bf03bf 	.word	0x03bf03bf
  4050dc:	03bf03bf 	.word	0x03bf03bf
  4050e0:	03bf03bf 	.word	0x03bf03bf
  4050e4:	033703bf 	.word	0x033703bf
  4050e8:	03bf0357 	.word	0x03bf0357
  4050ec:	03bf0357 	.word	0x03bf0357
  4050f0:	03bf03bf 	.word	0x03bf03bf
  4050f4:	039803bf 	.word	0x039803bf
  4050f8:	03bf03bf 	.word	0x03bf03bf
  4050fc:	03bf03ad 	.word	0x03bf03ad
  405100:	03bf03bf 	.word	0x03bf03bf
  405104:	03bf03bf 	.word	0x03bf03bf
  405108:	03bf0259 	.word	0x03bf0259
  40510c:	031e03bf 	.word	0x031e03bf
  405110:	03bf03bf 	.word	0x03bf03bf
  405114:	03bf03bf 	.word	0x03bf03bf
  405118:	03bf03bf 	.word	0x03bf03bf
  40511c:	03bf03bf 	.word	0x03bf03bf
  405120:	03bf03bf 	.word	0x03bf03bf
  405124:	02db02c6 	.word	0x02db02c6
  405128:	03570357 	.word	0x03570357
  40512c:	028b0357 	.word	0x028b0357
  405130:	03bf02db 	.word	0x03bf02db
  405134:	029003bf 	.word	0x029003bf
  405138:	029d03bf 	.word	0x029d03bf
  40513c:	02b401cc 	.word	0x02b401cc
  405140:	03bf0208 	.word	0x03bf0208
  405144:	03bf01e1 	.word	0x03bf01e1
  405148:	03bf007e 	.word	0x03bf007e
  40514c:	020d03bf 	.word	0x020d03bf
  405150:	980d      	ldr	r0, [sp, #52]	; 0x34
  405152:	930f      	str	r3, [sp, #60]	; 0x3c
  405154:	4240      	negs	r0, r0
  405156:	900d      	str	r0, [sp, #52]	; 0x34
  405158:	f04b 0b04 	orr.w	fp, fp, #4
  40515c:	f89a 3000 	ldrb.w	r3, [sl]
  405160:	e794      	b.n	40508c <_svfprintf_r+0xb0>
  405162:	aa25      	add	r2, sp, #148	; 0x94
  405164:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405166:	980c      	ldr	r0, [sp, #48]	; 0x30
  405168:	f004 fed2 	bl	409f10 <__ssprint_r>
  40516c:	b940      	cbnz	r0, 405180 <_svfprintf_r+0x1a4>
  40516e:	46c8      	mov	r8, r9
  405170:	e779      	b.n	405066 <_svfprintf_r+0x8a>
  405172:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  405174:	b123      	cbz	r3, 405180 <_svfprintf_r+0x1a4>
  405176:	980c      	ldr	r0, [sp, #48]	; 0x30
  405178:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40517a:	aa25      	add	r2, sp, #148	; 0x94
  40517c:	f004 fec8 	bl	409f10 <__ssprint_r>
  405180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405182:	899b      	ldrh	r3, [r3, #12]
  405184:	f013 0f40 	tst.w	r3, #64	; 0x40
  405188:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40518a:	bf18      	it	ne
  40518c:	f04f 33ff 	movne.w	r3, #4294967295
  405190:	9309      	str	r3, [sp, #36]	; 0x24
  405192:	9809      	ldr	r0, [sp, #36]	; 0x24
  405194:	b043      	add	sp, #268	; 0x10c
  405196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40519a:	f01b 0f20 	tst.w	fp, #32
  40519e:	9311      	str	r3, [sp, #68]	; 0x44
  4051a0:	f040 81dd 	bne.w	40555e <_svfprintf_r+0x582>
  4051a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4051a6:	f01b 0f10 	tst.w	fp, #16
  4051aa:	4613      	mov	r3, r2
  4051ac:	f040 856e 	bne.w	405c8c <_svfprintf_r+0xcb0>
  4051b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4051b4:	f000 856a 	beq.w	405c8c <_svfprintf_r+0xcb0>
  4051b8:	8814      	ldrh	r4, [r2, #0]
  4051ba:	3204      	adds	r2, #4
  4051bc:	2500      	movs	r5, #0
  4051be:	2301      	movs	r3, #1
  4051c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4051c2:	2700      	movs	r7, #0
  4051c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4051c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051ca:	1c4a      	adds	r2, r1, #1
  4051cc:	f000 8265 	beq.w	40569a <_svfprintf_r+0x6be>
  4051d0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4051d4:	9207      	str	r2, [sp, #28]
  4051d6:	ea54 0205 	orrs.w	r2, r4, r5
  4051da:	f040 8264 	bne.w	4056a6 <_svfprintf_r+0x6ca>
  4051de:	2900      	cmp	r1, #0
  4051e0:	f040 843c 	bne.w	405a5c <_svfprintf_r+0xa80>
  4051e4:	2b00      	cmp	r3, #0
  4051e6:	f040 84d7 	bne.w	405b98 <_svfprintf_r+0xbbc>
  4051ea:	f01b 0301 	ands.w	r3, fp, #1
  4051ee:	930e      	str	r3, [sp, #56]	; 0x38
  4051f0:	f000 8604 	beq.w	405dfc <_svfprintf_r+0xe20>
  4051f4:	ae42      	add	r6, sp, #264	; 0x108
  4051f6:	2330      	movs	r3, #48	; 0x30
  4051f8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4051fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405200:	4293      	cmp	r3, r2
  405202:	bfb8      	it	lt
  405204:	4613      	movlt	r3, r2
  405206:	9308      	str	r3, [sp, #32]
  405208:	2300      	movs	r3, #0
  40520a:	9312      	str	r3, [sp, #72]	; 0x48
  40520c:	b117      	cbz	r7, 405214 <_svfprintf_r+0x238>
  40520e:	9b08      	ldr	r3, [sp, #32]
  405210:	3301      	adds	r3, #1
  405212:	9308      	str	r3, [sp, #32]
  405214:	9b07      	ldr	r3, [sp, #28]
  405216:	f013 0302 	ands.w	r3, r3, #2
  40521a:	9310      	str	r3, [sp, #64]	; 0x40
  40521c:	d002      	beq.n	405224 <_svfprintf_r+0x248>
  40521e:	9b08      	ldr	r3, [sp, #32]
  405220:	3302      	adds	r3, #2
  405222:	9308      	str	r3, [sp, #32]
  405224:	9b07      	ldr	r3, [sp, #28]
  405226:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40522a:	f040 830e 	bne.w	40584a <_svfprintf_r+0x86e>
  40522e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405230:	9a08      	ldr	r2, [sp, #32]
  405232:	eba3 0b02 	sub.w	fp, r3, r2
  405236:	f1bb 0f00 	cmp.w	fp, #0
  40523a:	f340 8306 	ble.w	40584a <_svfprintf_r+0x86e>
  40523e:	f1bb 0f10 	cmp.w	fp, #16
  405242:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405244:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405246:	dd29      	ble.n	40529c <_svfprintf_r+0x2c0>
  405248:	4643      	mov	r3, r8
  40524a:	4621      	mov	r1, r4
  40524c:	46a8      	mov	r8, r5
  40524e:	2710      	movs	r7, #16
  405250:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405252:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405254:	e006      	b.n	405264 <_svfprintf_r+0x288>
  405256:	f1ab 0b10 	sub.w	fp, fp, #16
  40525a:	f1bb 0f10 	cmp.w	fp, #16
  40525e:	f103 0308 	add.w	r3, r3, #8
  405262:	dd18      	ble.n	405296 <_svfprintf_r+0x2ba>
  405264:	3201      	adds	r2, #1
  405266:	48b7      	ldr	r0, [pc, #732]	; (405544 <_svfprintf_r+0x568>)
  405268:	9226      	str	r2, [sp, #152]	; 0x98
  40526a:	3110      	adds	r1, #16
  40526c:	2a07      	cmp	r2, #7
  40526e:	9127      	str	r1, [sp, #156]	; 0x9c
  405270:	e883 0081 	stmia.w	r3, {r0, r7}
  405274:	ddef      	ble.n	405256 <_svfprintf_r+0x27a>
  405276:	aa25      	add	r2, sp, #148	; 0x94
  405278:	4629      	mov	r1, r5
  40527a:	4620      	mov	r0, r4
  40527c:	f004 fe48 	bl	409f10 <__ssprint_r>
  405280:	2800      	cmp	r0, #0
  405282:	f47f af7d 	bne.w	405180 <_svfprintf_r+0x1a4>
  405286:	f1ab 0b10 	sub.w	fp, fp, #16
  40528a:	f1bb 0f10 	cmp.w	fp, #16
  40528e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405290:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405292:	464b      	mov	r3, r9
  405294:	dce6      	bgt.n	405264 <_svfprintf_r+0x288>
  405296:	4645      	mov	r5, r8
  405298:	460c      	mov	r4, r1
  40529a:	4698      	mov	r8, r3
  40529c:	3201      	adds	r2, #1
  40529e:	4ba9      	ldr	r3, [pc, #676]	; (405544 <_svfprintf_r+0x568>)
  4052a0:	9226      	str	r2, [sp, #152]	; 0x98
  4052a2:	445c      	add	r4, fp
  4052a4:	2a07      	cmp	r2, #7
  4052a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4052a8:	e888 0808 	stmia.w	r8, {r3, fp}
  4052ac:	f300 8498 	bgt.w	405be0 <_svfprintf_r+0xc04>
  4052b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4052b4:	f108 0808 	add.w	r8, r8, #8
  4052b8:	b177      	cbz	r7, 4052d8 <_svfprintf_r+0x2fc>
  4052ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052bc:	3301      	adds	r3, #1
  4052be:	3401      	adds	r4, #1
  4052c0:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4052c4:	2201      	movs	r2, #1
  4052c6:	2b07      	cmp	r3, #7
  4052c8:	9427      	str	r4, [sp, #156]	; 0x9c
  4052ca:	9326      	str	r3, [sp, #152]	; 0x98
  4052cc:	e888 0006 	stmia.w	r8, {r1, r2}
  4052d0:	f300 83db 	bgt.w	405a8a <_svfprintf_r+0xaae>
  4052d4:	f108 0808 	add.w	r8, r8, #8
  4052d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052da:	b16b      	cbz	r3, 4052f8 <_svfprintf_r+0x31c>
  4052dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052de:	3301      	adds	r3, #1
  4052e0:	3402      	adds	r4, #2
  4052e2:	a91e      	add	r1, sp, #120	; 0x78
  4052e4:	2202      	movs	r2, #2
  4052e6:	2b07      	cmp	r3, #7
  4052e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4052ea:	9326      	str	r3, [sp, #152]	; 0x98
  4052ec:	e888 0006 	stmia.w	r8, {r1, r2}
  4052f0:	f300 83d6 	bgt.w	405aa0 <_svfprintf_r+0xac4>
  4052f4:	f108 0808 	add.w	r8, r8, #8
  4052f8:	2d80      	cmp	r5, #128	; 0x80
  4052fa:	f000 8315 	beq.w	405928 <_svfprintf_r+0x94c>
  4052fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405302:	1a9f      	subs	r7, r3, r2
  405304:	2f00      	cmp	r7, #0
  405306:	dd36      	ble.n	405376 <_svfprintf_r+0x39a>
  405308:	2f10      	cmp	r7, #16
  40530a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40530c:	4d8e      	ldr	r5, [pc, #568]	; (405548 <_svfprintf_r+0x56c>)
  40530e:	dd27      	ble.n	405360 <_svfprintf_r+0x384>
  405310:	4642      	mov	r2, r8
  405312:	4621      	mov	r1, r4
  405314:	46b0      	mov	r8, r6
  405316:	f04f 0b10 	mov.w	fp, #16
  40531a:	462e      	mov	r6, r5
  40531c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40531e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405320:	e004      	b.n	40532c <_svfprintf_r+0x350>
  405322:	3f10      	subs	r7, #16
  405324:	2f10      	cmp	r7, #16
  405326:	f102 0208 	add.w	r2, r2, #8
  40532a:	dd15      	ble.n	405358 <_svfprintf_r+0x37c>
  40532c:	3301      	adds	r3, #1
  40532e:	3110      	adds	r1, #16
  405330:	2b07      	cmp	r3, #7
  405332:	9127      	str	r1, [sp, #156]	; 0x9c
  405334:	9326      	str	r3, [sp, #152]	; 0x98
  405336:	e882 0840 	stmia.w	r2, {r6, fp}
  40533a:	ddf2      	ble.n	405322 <_svfprintf_r+0x346>
  40533c:	aa25      	add	r2, sp, #148	; 0x94
  40533e:	4629      	mov	r1, r5
  405340:	4620      	mov	r0, r4
  405342:	f004 fde5 	bl	409f10 <__ssprint_r>
  405346:	2800      	cmp	r0, #0
  405348:	f47f af1a 	bne.w	405180 <_svfprintf_r+0x1a4>
  40534c:	3f10      	subs	r7, #16
  40534e:	2f10      	cmp	r7, #16
  405350:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405352:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405354:	464a      	mov	r2, r9
  405356:	dce9      	bgt.n	40532c <_svfprintf_r+0x350>
  405358:	4635      	mov	r5, r6
  40535a:	460c      	mov	r4, r1
  40535c:	4646      	mov	r6, r8
  40535e:	4690      	mov	r8, r2
  405360:	3301      	adds	r3, #1
  405362:	443c      	add	r4, r7
  405364:	2b07      	cmp	r3, #7
  405366:	9427      	str	r4, [sp, #156]	; 0x9c
  405368:	9326      	str	r3, [sp, #152]	; 0x98
  40536a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40536e:	f300 8381 	bgt.w	405a74 <_svfprintf_r+0xa98>
  405372:	f108 0808 	add.w	r8, r8, #8
  405376:	9b07      	ldr	r3, [sp, #28]
  405378:	05df      	lsls	r7, r3, #23
  40537a:	f100 8268 	bmi.w	40584e <_svfprintf_r+0x872>
  40537e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405380:	990e      	ldr	r1, [sp, #56]	; 0x38
  405382:	f8c8 6000 	str.w	r6, [r8]
  405386:	3301      	adds	r3, #1
  405388:	440c      	add	r4, r1
  40538a:	2b07      	cmp	r3, #7
  40538c:	9427      	str	r4, [sp, #156]	; 0x9c
  40538e:	f8c8 1004 	str.w	r1, [r8, #4]
  405392:	9326      	str	r3, [sp, #152]	; 0x98
  405394:	f300 834d 	bgt.w	405a32 <_svfprintf_r+0xa56>
  405398:	f108 0808 	add.w	r8, r8, #8
  40539c:	9b07      	ldr	r3, [sp, #28]
  40539e:	075b      	lsls	r3, r3, #29
  4053a0:	d53a      	bpl.n	405418 <_svfprintf_r+0x43c>
  4053a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053a4:	9a08      	ldr	r2, [sp, #32]
  4053a6:	1a9d      	subs	r5, r3, r2
  4053a8:	2d00      	cmp	r5, #0
  4053aa:	dd35      	ble.n	405418 <_svfprintf_r+0x43c>
  4053ac:	2d10      	cmp	r5, #16
  4053ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053b0:	dd20      	ble.n	4053f4 <_svfprintf_r+0x418>
  4053b2:	2610      	movs	r6, #16
  4053b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4053b6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4053ba:	e004      	b.n	4053c6 <_svfprintf_r+0x3ea>
  4053bc:	3d10      	subs	r5, #16
  4053be:	2d10      	cmp	r5, #16
  4053c0:	f108 0808 	add.w	r8, r8, #8
  4053c4:	dd16      	ble.n	4053f4 <_svfprintf_r+0x418>
  4053c6:	3301      	adds	r3, #1
  4053c8:	4a5e      	ldr	r2, [pc, #376]	; (405544 <_svfprintf_r+0x568>)
  4053ca:	9326      	str	r3, [sp, #152]	; 0x98
  4053cc:	3410      	adds	r4, #16
  4053ce:	2b07      	cmp	r3, #7
  4053d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4053d2:	e888 0044 	stmia.w	r8, {r2, r6}
  4053d6:	ddf1      	ble.n	4053bc <_svfprintf_r+0x3e0>
  4053d8:	aa25      	add	r2, sp, #148	; 0x94
  4053da:	4659      	mov	r1, fp
  4053dc:	4638      	mov	r0, r7
  4053de:	f004 fd97 	bl	409f10 <__ssprint_r>
  4053e2:	2800      	cmp	r0, #0
  4053e4:	f47f aecc 	bne.w	405180 <_svfprintf_r+0x1a4>
  4053e8:	3d10      	subs	r5, #16
  4053ea:	2d10      	cmp	r5, #16
  4053ec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053f0:	46c8      	mov	r8, r9
  4053f2:	dce8      	bgt.n	4053c6 <_svfprintf_r+0x3ea>
  4053f4:	3301      	adds	r3, #1
  4053f6:	4a53      	ldr	r2, [pc, #332]	; (405544 <_svfprintf_r+0x568>)
  4053f8:	9326      	str	r3, [sp, #152]	; 0x98
  4053fa:	442c      	add	r4, r5
  4053fc:	2b07      	cmp	r3, #7
  4053fe:	9427      	str	r4, [sp, #156]	; 0x9c
  405400:	e888 0024 	stmia.w	r8, {r2, r5}
  405404:	dd08      	ble.n	405418 <_svfprintf_r+0x43c>
  405406:	aa25      	add	r2, sp, #148	; 0x94
  405408:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40540a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40540c:	f004 fd80 	bl	409f10 <__ssprint_r>
  405410:	2800      	cmp	r0, #0
  405412:	f47f aeb5 	bne.w	405180 <_svfprintf_r+0x1a4>
  405416:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405418:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40541a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40541c:	9908      	ldr	r1, [sp, #32]
  40541e:	428a      	cmp	r2, r1
  405420:	bfac      	ite	ge
  405422:	189b      	addge	r3, r3, r2
  405424:	185b      	addlt	r3, r3, r1
  405426:	9309      	str	r3, [sp, #36]	; 0x24
  405428:	2c00      	cmp	r4, #0
  40542a:	f040 830d 	bne.w	405a48 <_svfprintf_r+0xa6c>
  40542e:	2300      	movs	r3, #0
  405430:	9326      	str	r3, [sp, #152]	; 0x98
  405432:	46c8      	mov	r8, r9
  405434:	e5f9      	b.n	40502a <_svfprintf_r+0x4e>
  405436:	9311      	str	r3, [sp, #68]	; 0x44
  405438:	f01b 0320 	ands.w	r3, fp, #32
  40543c:	f040 81e3 	bne.w	405806 <_svfprintf_r+0x82a>
  405440:	f01b 0210 	ands.w	r2, fp, #16
  405444:	f040 842e 	bne.w	405ca4 <_svfprintf_r+0xcc8>
  405448:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40544c:	f000 842a 	beq.w	405ca4 <_svfprintf_r+0xcc8>
  405450:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405452:	4613      	mov	r3, r2
  405454:	460a      	mov	r2, r1
  405456:	3204      	adds	r2, #4
  405458:	880c      	ldrh	r4, [r1, #0]
  40545a:	920f      	str	r2, [sp, #60]	; 0x3c
  40545c:	2500      	movs	r5, #0
  40545e:	e6b0      	b.n	4051c2 <_svfprintf_r+0x1e6>
  405460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405462:	9311      	str	r3, [sp, #68]	; 0x44
  405464:	6816      	ldr	r6, [r2, #0]
  405466:	2400      	movs	r4, #0
  405468:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40546c:	1d15      	adds	r5, r2, #4
  40546e:	2e00      	cmp	r6, #0
  405470:	f000 86a7 	beq.w	4061c2 <_svfprintf_r+0x11e6>
  405474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405476:	1c53      	adds	r3, r2, #1
  405478:	f000 8609 	beq.w	40608e <_svfprintf_r+0x10b2>
  40547c:	4621      	mov	r1, r4
  40547e:	4630      	mov	r0, r6
  405480:	f003 ffae 	bl	4093e0 <memchr>
  405484:	2800      	cmp	r0, #0
  405486:	f000 86e1 	beq.w	40624c <_svfprintf_r+0x1270>
  40548a:	1b83      	subs	r3, r0, r6
  40548c:	930e      	str	r3, [sp, #56]	; 0x38
  40548e:	940a      	str	r4, [sp, #40]	; 0x28
  405490:	950f      	str	r5, [sp, #60]	; 0x3c
  405492:	f8cd b01c 	str.w	fp, [sp, #28]
  405496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40549a:	9308      	str	r3, [sp, #32]
  40549c:	9412      	str	r4, [sp, #72]	; 0x48
  40549e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4054a2:	e6b3      	b.n	40520c <_svfprintf_r+0x230>
  4054a4:	f89a 3000 	ldrb.w	r3, [sl]
  4054a8:	2201      	movs	r2, #1
  4054aa:	212b      	movs	r1, #43	; 0x2b
  4054ac:	e5ee      	b.n	40508c <_svfprintf_r+0xb0>
  4054ae:	f04b 0b20 	orr.w	fp, fp, #32
  4054b2:	f89a 3000 	ldrb.w	r3, [sl]
  4054b6:	e5e9      	b.n	40508c <_svfprintf_r+0xb0>
  4054b8:	9311      	str	r3, [sp, #68]	; 0x44
  4054ba:	2a00      	cmp	r2, #0
  4054bc:	f040 8795 	bne.w	4063ea <_svfprintf_r+0x140e>
  4054c0:	4b22      	ldr	r3, [pc, #136]	; (40554c <_svfprintf_r+0x570>)
  4054c2:	9318      	str	r3, [sp, #96]	; 0x60
  4054c4:	f01b 0f20 	tst.w	fp, #32
  4054c8:	f040 8111 	bne.w	4056ee <_svfprintf_r+0x712>
  4054cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054ce:	f01b 0f10 	tst.w	fp, #16
  4054d2:	4613      	mov	r3, r2
  4054d4:	f040 83e1 	bne.w	405c9a <_svfprintf_r+0xcbe>
  4054d8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4054dc:	f000 83dd 	beq.w	405c9a <_svfprintf_r+0xcbe>
  4054e0:	3304      	adds	r3, #4
  4054e2:	8814      	ldrh	r4, [r2, #0]
  4054e4:	930f      	str	r3, [sp, #60]	; 0x3c
  4054e6:	2500      	movs	r5, #0
  4054e8:	f01b 0f01 	tst.w	fp, #1
  4054ec:	f000 810c 	beq.w	405708 <_svfprintf_r+0x72c>
  4054f0:	ea54 0305 	orrs.w	r3, r4, r5
  4054f4:	f000 8108 	beq.w	405708 <_svfprintf_r+0x72c>
  4054f8:	2330      	movs	r3, #48	; 0x30
  4054fa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4054fe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  405502:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405506:	f04b 0b02 	orr.w	fp, fp, #2
  40550a:	2302      	movs	r3, #2
  40550c:	e659      	b.n	4051c2 <_svfprintf_r+0x1e6>
  40550e:	f89a 3000 	ldrb.w	r3, [sl]
  405512:	2900      	cmp	r1, #0
  405514:	f47f adba 	bne.w	40508c <_svfprintf_r+0xb0>
  405518:	2201      	movs	r2, #1
  40551a:	2120      	movs	r1, #32
  40551c:	e5b6      	b.n	40508c <_svfprintf_r+0xb0>
  40551e:	f04b 0b01 	orr.w	fp, fp, #1
  405522:	f89a 3000 	ldrb.w	r3, [sl]
  405526:	e5b1      	b.n	40508c <_svfprintf_r+0xb0>
  405528:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40552a:	6823      	ldr	r3, [r4, #0]
  40552c:	930d      	str	r3, [sp, #52]	; 0x34
  40552e:	4618      	mov	r0, r3
  405530:	2800      	cmp	r0, #0
  405532:	4623      	mov	r3, r4
  405534:	f103 0304 	add.w	r3, r3, #4
  405538:	f6ff ae0a 	blt.w	405150 <_svfprintf_r+0x174>
  40553c:	930f      	str	r3, [sp, #60]	; 0x3c
  40553e:	f89a 3000 	ldrb.w	r3, [sl]
  405542:	e5a3      	b.n	40508c <_svfprintf_r+0xb0>
  405544:	0040ad3c 	.word	0x0040ad3c
  405548:	0040ad4c 	.word	0x0040ad4c
  40554c:	0040ad1c 	.word	0x0040ad1c
  405550:	f04b 0b10 	orr.w	fp, fp, #16
  405554:	f01b 0f20 	tst.w	fp, #32
  405558:	9311      	str	r3, [sp, #68]	; 0x44
  40555a:	f43f ae23 	beq.w	4051a4 <_svfprintf_r+0x1c8>
  40555e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405560:	3507      	adds	r5, #7
  405562:	f025 0307 	bic.w	r3, r5, #7
  405566:	f103 0208 	add.w	r2, r3, #8
  40556a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40556e:	920f      	str	r2, [sp, #60]	; 0x3c
  405570:	2301      	movs	r3, #1
  405572:	e626      	b.n	4051c2 <_svfprintf_r+0x1e6>
  405574:	f89a 3000 	ldrb.w	r3, [sl]
  405578:	2b2a      	cmp	r3, #42	; 0x2a
  40557a:	f10a 0401 	add.w	r4, sl, #1
  40557e:	f000 8727 	beq.w	4063d0 <_svfprintf_r+0x13f4>
  405582:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405586:	2809      	cmp	r0, #9
  405588:	46a2      	mov	sl, r4
  40558a:	f200 86ad 	bhi.w	4062e8 <_svfprintf_r+0x130c>
  40558e:	2300      	movs	r3, #0
  405590:	461c      	mov	r4, r3
  405592:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405596:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40559a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40559e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4055a2:	2809      	cmp	r0, #9
  4055a4:	d9f5      	bls.n	405592 <_svfprintf_r+0x5b6>
  4055a6:	940a      	str	r4, [sp, #40]	; 0x28
  4055a8:	e572      	b.n	405090 <_svfprintf_r+0xb4>
  4055aa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4055ae:	f89a 3000 	ldrb.w	r3, [sl]
  4055b2:	e56b      	b.n	40508c <_svfprintf_r+0xb0>
  4055b4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4055b8:	f89a 3000 	ldrb.w	r3, [sl]
  4055bc:	e566      	b.n	40508c <_svfprintf_r+0xb0>
  4055be:	f89a 3000 	ldrb.w	r3, [sl]
  4055c2:	2b6c      	cmp	r3, #108	; 0x6c
  4055c4:	bf03      	ittte	eq
  4055c6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4055ca:	f04b 0b20 	orreq.w	fp, fp, #32
  4055ce:	f10a 0a01 	addeq.w	sl, sl, #1
  4055d2:	f04b 0b10 	orrne.w	fp, fp, #16
  4055d6:	e559      	b.n	40508c <_svfprintf_r+0xb0>
  4055d8:	2a00      	cmp	r2, #0
  4055da:	f040 8711 	bne.w	406400 <_svfprintf_r+0x1424>
  4055de:	f01b 0f20 	tst.w	fp, #32
  4055e2:	f040 84f9 	bne.w	405fd8 <_svfprintf_r+0xffc>
  4055e6:	f01b 0f10 	tst.w	fp, #16
  4055ea:	f040 84ac 	bne.w	405f46 <_svfprintf_r+0xf6a>
  4055ee:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4055f2:	f000 84a8 	beq.w	405f46 <_svfprintf_r+0xf6a>
  4055f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4055f8:	6813      	ldr	r3, [r2, #0]
  4055fa:	3204      	adds	r2, #4
  4055fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4055fe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405602:	801a      	strh	r2, [r3, #0]
  405604:	e511      	b.n	40502a <_svfprintf_r+0x4e>
  405606:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405608:	4bb3      	ldr	r3, [pc, #716]	; (4058d8 <_svfprintf_r+0x8fc>)
  40560a:	680c      	ldr	r4, [r1, #0]
  40560c:	9318      	str	r3, [sp, #96]	; 0x60
  40560e:	2230      	movs	r2, #48	; 0x30
  405610:	2378      	movs	r3, #120	; 0x78
  405612:	3104      	adds	r1, #4
  405614:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405618:	9311      	str	r3, [sp, #68]	; 0x44
  40561a:	f04b 0b02 	orr.w	fp, fp, #2
  40561e:	910f      	str	r1, [sp, #60]	; 0x3c
  405620:	2500      	movs	r5, #0
  405622:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405626:	2302      	movs	r3, #2
  405628:	e5cb      	b.n	4051c2 <_svfprintf_r+0x1e6>
  40562a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40562c:	9311      	str	r3, [sp, #68]	; 0x44
  40562e:	680a      	ldr	r2, [r1, #0]
  405630:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405634:	2300      	movs	r3, #0
  405636:	460a      	mov	r2, r1
  405638:	461f      	mov	r7, r3
  40563a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40563e:	3204      	adds	r2, #4
  405640:	2301      	movs	r3, #1
  405642:	9308      	str	r3, [sp, #32]
  405644:	f8cd b01c 	str.w	fp, [sp, #28]
  405648:	970a      	str	r7, [sp, #40]	; 0x28
  40564a:	9712      	str	r7, [sp, #72]	; 0x48
  40564c:	920f      	str	r2, [sp, #60]	; 0x3c
  40564e:	930e      	str	r3, [sp, #56]	; 0x38
  405650:	ae28      	add	r6, sp, #160	; 0xa0
  405652:	e5df      	b.n	405214 <_svfprintf_r+0x238>
  405654:	9311      	str	r3, [sp, #68]	; 0x44
  405656:	2a00      	cmp	r2, #0
  405658:	f040 86ea 	bne.w	406430 <_svfprintf_r+0x1454>
  40565c:	f01b 0f20 	tst.w	fp, #32
  405660:	d15d      	bne.n	40571e <_svfprintf_r+0x742>
  405662:	f01b 0f10 	tst.w	fp, #16
  405666:	f040 8308 	bne.w	405c7a <_svfprintf_r+0xc9e>
  40566a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40566e:	f000 8304 	beq.w	405c7a <_svfprintf_r+0xc9e>
  405672:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405674:	f9b1 4000 	ldrsh.w	r4, [r1]
  405678:	3104      	adds	r1, #4
  40567a:	17e5      	asrs	r5, r4, #31
  40567c:	4622      	mov	r2, r4
  40567e:	462b      	mov	r3, r5
  405680:	910f      	str	r1, [sp, #60]	; 0x3c
  405682:	2a00      	cmp	r2, #0
  405684:	f173 0300 	sbcs.w	r3, r3, #0
  405688:	db58      	blt.n	40573c <_svfprintf_r+0x760>
  40568a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40568c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405690:	1c4a      	adds	r2, r1, #1
  405692:	f04f 0301 	mov.w	r3, #1
  405696:	f47f ad9b 	bne.w	4051d0 <_svfprintf_r+0x1f4>
  40569a:	ea54 0205 	orrs.w	r2, r4, r5
  40569e:	f000 81df 	beq.w	405a60 <_svfprintf_r+0xa84>
  4056a2:	f8cd b01c 	str.w	fp, [sp, #28]
  4056a6:	2b01      	cmp	r3, #1
  4056a8:	f000 827b 	beq.w	405ba2 <_svfprintf_r+0xbc6>
  4056ac:	2b02      	cmp	r3, #2
  4056ae:	f040 8206 	bne.w	405abe <_svfprintf_r+0xae2>
  4056b2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4056b4:	464e      	mov	r6, r9
  4056b6:	0923      	lsrs	r3, r4, #4
  4056b8:	f004 010f 	and.w	r1, r4, #15
  4056bc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4056c0:	092a      	lsrs	r2, r5, #4
  4056c2:	461c      	mov	r4, r3
  4056c4:	4615      	mov	r5, r2
  4056c6:	5c43      	ldrb	r3, [r0, r1]
  4056c8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4056cc:	ea54 0305 	orrs.w	r3, r4, r5
  4056d0:	d1f1      	bne.n	4056b6 <_svfprintf_r+0x6da>
  4056d2:	eba9 0306 	sub.w	r3, r9, r6
  4056d6:	930e      	str	r3, [sp, #56]	; 0x38
  4056d8:	e590      	b.n	4051fc <_svfprintf_r+0x220>
  4056da:	9311      	str	r3, [sp, #68]	; 0x44
  4056dc:	2a00      	cmp	r2, #0
  4056de:	f040 86a3 	bne.w	406428 <_svfprintf_r+0x144c>
  4056e2:	4b7e      	ldr	r3, [pc, #504]	; (4058dc <_svfprintf_r+0x900>)
  4056e4:	9318      	str	r3, [sp, #96]	; 0x60
  4056e6:	f01b 0f20 	tst.w	fp, #32
  4056ea:	f43f aeef 	beq.w	4054cc <_svfprintf_r+0x4f0>
  4056ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4056f0:	3507      	adds	r5, #7
  4056f2:	f025 0307 	bic.w	r3, r5, #7
  4056f6:	f103 0208 	add.w	r2, r3, #8
  4056fa:	f01b 0f01 	tst.w	fp, #1
  4056fe:	920f      	str	r2, [sp, #60]	; 0x3c
  405700:	e9d3 4500 	ldrd	r4, r5, [r3]
  405704:	f47f aef4 	bne.w	4054f0 <_svfprintf_r+0x514>
  405708:	2302      	movs	r3, #2
  40570a:	e55a      	b.n	4051c2 <_svfprintf_r+0x1e6>
  40570c:	9311      	str	r3, [sp, #68]	; 0x44
  40570e:	2a00      	cmp	r2, #0
  405710:	f040 8686 	bne.w	406420 <_svfprintf_r+0x1444>
  405714:	f04b 0b10 	orr.w	fp, fp, #16
  405718:	f01b 0f20 	tst.w	fp, #32
  40571c:	d0a1      	beq.n	405662 <_svfprintf_r+0x686>
  40571e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405720:	3507      	adds	r5, #7
  405722:	f025 0507 	bic.w	r5, r5, #7
  405726:	e9d5 2300 	ldrd	r2, r3, [r5]
  40572a:	2a00      	cmp	r2, #0
  40572c:	f105 0108 	add.w	r1, r5, #8
  405730:	461d      	mov	r5, r3
  405732:	f173 0300 	sbcs.w	r3, r3, #0
  405736:	910f      	str	r1, [sp, #60]	; 0x3c
  405738:	4614      	mov	r4, r2
  40573a:	daa6      	bge.n	40568a <_svfprintf_r+0x6ae>
  40573c:	272d      	movs	r7, #45	; 0x2d
  40573e:	4264      	negs	r4, r4
  405740:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405744:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405748:	2301      	movs	r3, #1
  40574a:	e53d      	b.n	4051c8 <_svfprintf_r+0x1ec>
  40574c:	9311      	str	r3, [sp, #68]	; 0x44
  40574e:	2a00      	cmp	r2, #0
  405750:	f040 8662 	bne.w	406418 <_svfprintf_r+0x143c>
  405754:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405756:	3507      	adds	r5, #7
  405758:	f025 0307 	bic.w	r3, r5, #7
  40575c:	f103 0208 	add.w	r2, r3, #8
  405760:	920f      	str	r2, [sp, #60]	; 0x3c
  405762:	681a      	ldr	r2, [r3, #0]
  405764:	9215      	str	r2, [sp, #84]	; 0x54
  405766:	685b      	ldr	r3, [r3, #4]
  405768:	9314      	str	r3, [sp, #80]	; 0x50
  40576a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40576c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40576e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405772:	4628      	mov	r0, r5
  405774:	4621      	mov	r1, r4
  405776:	f04f 32ff 	mov.w	r2, #4294967295
  40577a:	4b59      	ldr	r3, [pc, #356]	; (4058e0 <_svfprintf_r+0x904>)
  40577c:	f004 ff36 	bl	40a5ec <__aeabi_dcmpun>
  405780:	2800      	cmp	r0, #0
  405782:	f040 834a 	bne.w	405e1a <_svfprintf_r+0xe3e>
  405786:	4628      	mov	r0, r5
  405788:	4621      	mov	r1, r4
  40578a:	f04f 32ff 	mov.w	r2, #4294967295
  40578e:	4b54      	ldr	r3, [pc, #336]	; (4058e0 <_svfprintf_r+0x904>)
  405790:	f7fe fdde 	bl	404350 <__aeabi_dcmple>
  405794:	2800      	cmp	r0, #0
  405796:	f040 8340 	bne.w	405e1a <_svfprintf_r+0xe3e>
  40579a:	a815      	add	r0, sp, #84	; 0x54
  40579c:	c80d      	ldmia	r0, {r0, r2, r3}
  40579e:	9914      	ldr	r1, [sp, #80]	; 0x50
  4057a0:	f7fe fdcc 	bl	40433c <__aeabi_dcmplt>
  4057a4:	2800      	cmp	r0, #0
  4057a6:	f040 8530 	bne.w	40620a <_svfprintf_r+0x122e>
  4057aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4057ae:	4e4d      	ldr	r6, [pc, #308]	; (4058e4 <_svfprintf_r+0x908>)
  4057b0:	4b4d      	ldr	r3, [pc, #308]	; (4058e8 <_svfprintf_r+0x90c>)
  4057b2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4057b6:	9007      	str	r0, [sp, #28]
  4057b8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4057ba:	2203      	movs	r2, #3
  4057bc:	2100      	movs	r1, #0
  4057be:	9208      	str	r2, [sp, #32]
  4057c0:	910a      	str	r1, [sp, #40]	; 0x28
  4057c2:	2847      	cmp	r0, #71	; 0x47
  4057c4:	bfd8      	it	le
  4057c6:	461e      	movle	r6, r3
  4057c8:	920e      	str	r2, [sp, #56]	; 0x38
  4057ca:	9112      	str	r1, [sp, #72]	; 0x48
  4057cc:	e51e      	b.n	40520c <_svfprintf_r+0x230>
  4057ce:	f04b 0b08 	orr.w	fp, fp, #8
  4057d2:	f89a 3000 	ldrb.w	r3, [sl]
  4057d6:	e459      	b.n	40508c <_svfprintf_r+0xb0>
  4057d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4057dc:	2300      	movs	r3, #0
  4057de:	461c      	mov	r4, r3
  4057e0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4057e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4057e8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4057ec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4057f0:	2809      	cmp	r0, #9
  4057f2:	d9f5      	bls.n	4057e0 <_svfprintf_r+0x804>
  4057f4:	940d      	str	r4, [sp, #52]	; 0x34
  4057f6:	e44b      	b.n	405090 <_svfprintf_r+0xb4>
  4057f8:	f04b 0b10 	orr.w	fp, fp, #16
  4057fc:	9311      	str	r3, [sp, #68]	; 0x44
  4057fe:	f01b 0320 	ands.w	r3, fp, #32
  405802:	f43f ae1d 	beq.w	405440 <_svfprintf_r+0x464>
  405806:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405808:	3507      	adds	r5, #7
  40580a:	f025 0307 	bic.w	r3, r5, #7
  40580e:	f103 0208 	add.w	r2, r3, #8
  405812:	e9d3 4500 	ldrd	r4, r5, [r3]
  405816:	920f      	str	r2, [sp, #60]	; 0x3c
  405818:	2300      	movs	r3, #0
  40581a:	e4d2      	b.n	4051c2 <_svfprintf_r+0x1e6>
  40581c:	9311      	str	r3, [sp, #68]	; 0x44
  40581e:	2a00      	cmp	r2, #0
  405820:	f040 85e7 	bne.w	4063f2 <_svfprintf_r+0x1416>
  405824:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405826:	2a00      	cmp	r2, #0
  405828:	f43f aca3 	beq.w	405172 <_svfprintf_r+0x196>
  40582c:	2300      	movs	r3, #0
  40582e:	2101      	movs	r1, #1
  405830:	461f      	mov	r7, r3
  405832:	9108      	str	r1, [sp, #32]
  405834:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405838:	f8cd b01c 	str.w	fp, [sp, #28]
  40583c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405840:	930a      	str	r3, [sp, #40]	; 0x28
  405842:	9312      	str	r3, [sp, #72]	; 0x48
  405844:	910e      	str	r1, [sp, #56]	; 0x38
  405846:	ae28      	add	r6, sp, #160	; 0xa0
  405848:	e4e4      	b.n	405214 <_svfprintf_r+0x238>
  40584a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40584c:	e534      	b.n	4052b8 <_svfprintf_r+0x2dc>
  40584e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405850:	2b65      	cmp	r3, #101	; 0x65
  405852:	f340 80a7 	ble.w	4059a4 <_svfprintf_r+0x9c8>
  405856:	a815      	add	r0, sp, #84	; 0x54
  405858:	c80d      	ldmia	r0, {r0, r2, r3}
  40585a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40585c:	f7fe fd64 	bl	404328 <__aeabi_dcmpeq>
  405860:	2800      	cmp	r0, #0
  405862:	f000 8150 	beq.w	405b06 <_svfprintf_r+0xb2a>
  405866:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405868:	4a20      	ldr	r2, [pc, #128]	; (4058ec <_svfprintf_r+0x910>)
  40586a:	f8c8 2000 	str.w	r2, [r8]
  40586e:	3301      	adds	r3, #1
  405870:	3401      	adds	r4, #1
  405872:	2201      	movs	r2, #1
  405874:	2b07      	cmp	r3, #7
  405876:	9427      	str	r4, [sp, #156]	; 0x9c
  405878:	9326      	str	r3, [sp, #152]	; 0x98
  40587a:	f8c8 2004 	str.w	r2, [r8, #4]
  40587e:	f300 836a 	bgt.w	405f56 <_svfprintf_r+0xf7a>
  405882:	f108 0808 	add.w	r8, r8, #8
  405886:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40588a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40588c:	4293      	cmp	r3, r2
  40588e:	db03      	blt.n	405898 <_svfprintf_r+0x8bc>
  405890:	9b07      	ldr	r3, [sp, #28]
  405892:	07dd      	lsls	r5, r3, #31
  405894:	f57f ad82 	bpl.w	40539c <_svfprintf_r+0x3c0>
  405898:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40589a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40589c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40589e:	f8c8 2000 	str.w	r2, [r8]
  4058a2:	3301      	adds	r3, #1
  4058a4:	440c      	add	r4, r1
  4058a6:	2b07      	cmp	r3, #7
  4058a8:	f8c8 1004 	str.w	r1, [r8, #4]
  4058ac:	9427      	str	r4, [sp, #156]	; 0x9c
  4058ae:	9326      	str	r3, [sp, #152]	; 0x98
  4058b0:	f300 839e 	bgt.w	405ff0 <_svfprintf_r+0x1014>
  4058b4:	f108 0808 	add.w	r8, r8, #8
  4058b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4058ba:	1e5e      	subs	r6, r3, #1
  4058bc:	2e00      	cmp	r6, #0
  4058be:	f77f ad6d 	ble.w	40539c <_svfprintf_r+0x3c0>
  4058c2:	2e10      	cmp	r6, #16
  4058c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058c6:	4d0a      	ldr	r5, [pc, #40]	; (4058f0 <_svfprintf_r+0x914>)
  4058c8:	f340 81f5 	ble.w	405cb6 <_svfprintf_r+0xcda>
  4058cc:	4622      	mov	r2, r4
  4058ce:	2710      	movs	r7, #16
  4058d0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4058d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4058d6:	e013      	b.n	405900 <_svfprintf_r+0x924>
  4058d8:	0040ad1c 	.word	0x0040ad1c
  4058dc:	0040ad08 	.word	0x0040ad08
  4058e0:	7fefffff 	.word	0x7fefffff
  4058e4:	0040acfc 	.word	0x0040acfc
  4058e8:	0040acf8 	.word	0x0040acf8
  4058ec:	0040ad38 	.word	0x0040ad38
  4058f0:	0040ad4c 	.word	0x0040ad4c
  4058f4:	f108 0808 	add.w	r8, r8, #8
  4058f8:	3e10      	subs	r6, #16
  4058fa:	2e10      	cmp	r6, #16
  4058fc:	f340 81da 	ble.w	405cb4 <_svfprintf_r+0xcd8>
  405900:	3301      	adds	r3, #1
  405902:	3210      	adds	r2, #16
  405904:	2b07      	cmp	r3, #7
  405906:	9227      	str	r2, [sp, #156]	; 0x9c
  405908:	9326      	str	r3, [sp, #152]	; 0x98
  40590a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40590e:	ddf1      	ble.n	4058f4 <_svfprintf_r+0x918>
  405910:	aa25      	add	r2, sp, #148	; 0x94
  405912:	4621      	mov	r1, r4
  405914:	4658      	mov	r0, fp
  405916:	f004 fafb 	bl	409f10 <__ssprint_r>
  40591a:	2800      	cmp	r0, #0
  40591c:	f47f ac30 	bne.w	405180 <_svfprintf_r+0x1a4>
  405920:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405922:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405924:	46c8      	mov	r8, r9
  405926:	e7e7      	b.n	4058f8 <_svfprintf_r+0x91c>
  405928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40592a:	9a08      	ldr	r2, [sp, #32]
  40592c:	1a9f      	subs	r7, r3, r2
  40592e:	2f00      	cmp	r7, #0
  405930:	f77f ace5 	ble.w	4052fe <_svfprintf_r+0x322>
  405934:	2f10      	cmp	r7, #16
  405936:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405938:	4db6      	ldr	r5, [pc, #728]	; (405c14 <_svfprintf_r+0xc38>)
  40593a:	dd27      	ble.n	40598c <_svfprintf_r+0x9b0>
  40593c:	4642      	mov	r2, r8
  40593e:	4621      	mov	r1, r4
  405940:	46b0      	mov	r8, r6
  405942:	f04f 0b10 	mov.w	fp, #16
  405946:	462e      	mov	r6, r5
  405948:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40594a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40594c:	e004      	b.n	405958 <_svfprintf_r+0x97c>
  40594e:	3f10      	subs	r7, #16
  405950:	2f10      	cmp	r7, #16
  405952:	f102 0208 	add.w	r2, r2, #8
  405956:	dd15      	ble.n	405984 <_svfprintf_r+0x9a8>
  405958:	3301      	adds	r3, #1
  40595a:	3110      	adds	r1, #16
  40595c:	2b07      	cmp	r3, #7
  40595e:	9127      	str	r1, [sp, #156]	; 0x9c
  405960:	9326      	str	r3, [sp, #152]	; 0x98
  405962:	e882 0840 	stmia.w	r2, {r6, fp}
  405966:	ddf2      	ble.n	40594e <_svfprintf_r+0x972>
  405968:	aa25      	add	r2, sp, #148	; 0x94
  40596a:	4629      	mov	r1, r5
  40596c:	4620      	mov	r0, r4
  40596e:	f004 facf 	bl	409f10 <__ssprint_r>
  405972:	2800      	cmp	r0, #0
  405974:	f47f ac04 	bne.w	405180 <_svfprintf_r+0x1a4>
  405978:	3f10      	subs	r7, #16
  40597a:	2f10      	cmp	r7, #16
  40597c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40597e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405980:	464a      	mov	r2, r9
  405982:	dce9      	bgt.n	405958 <_svfprintf_r+0x97c>
  405984:	4635      	mov	r5, r6
  405986:	460c      	mov	r4, r1
  405988:	4646      	mov	r6, r8
  40598a:	4690      	mov	r8, r2
  40598c:	3301      	adds	r3, #1
  40598e:	443c      	add	r4, r7
  405990:	2b07      	cmp	r3, #7
  405992:	9427      	str	r4, [sp, #156]	; 0x9c
  405994:	9326      	str	r3, [sp, #152]	; 0x98
  405996:	e888 00a0 	stmia.w	r8, {r5, r7}
  40599a:	f300 8232 	bgt.w	405e02 <_svfprintf_r+0xe26>
  40599e:	f108 0808 	add.w	r8, r8, #8
  4059a2:	e4ac      	b.n	4052fe <_svfprintf_r+0x322>
  4059a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4059a6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4059a8:	2b01      	cmp	r3, #1
  4059aa:	f340 81fe 	ble.w	405daa <_svfprintf_r+0xdce>
  4059ae:	3701      	adds	r7, #1
  4059b0:	3401      	adds	r4, #1
  4059b2:	2301      	movs	r3, #1
  4059b4:	2f07      	cmp	r7, #7
  4059b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4059b8:	9726      	str	r7, [sp, #152]	; 0x98
  4059ba:	f8c8 6000 	str.w	r6, [r8]
  4059be:	f8c8 3004 	str.w	r3, [r8, #4]
  4059c2:	f300 8203 	bgt.w	405dcc <_svfprintf_r+0xdf0>
  4059c6:	f108 0808 	add.w	r8, r8, #8
  4059ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4059cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4059ce:	f8c8 3000 	str.w	r3, [r8]
  4059d2:	3701      	adds	r7, #1
  4059d4:	4414      	add	r4, r2
  4059d6:	2f07      	cmp	r7, #7
  4059d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4059da:	9726      	str	r7, [sp, #152]	; 0x98
  4059dc:	f8c8 2004 	str.w	r2, [r8, #4]
  4059e0:	f300 8200 	bgt.w	405de4 <_svfprintf_r+0xe08>
  4059e4:	f108 0808 	add.w	r8, r8, #8
  4059e8:	a815      	add	r0, sp, #84	; 0x54
  4059ea:	c80d      	ldmia	r0, {r0, r2, r3}
  4059ec:	9914      	ldr	r1, [sp, #80]	; 0x50
  4059ee:	f7fe fc9b 	bl	404328 <__aeabi_dcmpeq>
  4059f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4059f4:	2800      	cmp	r0, #0
  4059f6:	f040 8101 	bne.w	405bfc <_svfprintf_r+0xc20>
  4059fa:	3b01      	subs	r3, #1
  4059fc:	3701      	adds	r7, #1
  4059fe:	3601      	adds	r6, #1
  405a00:	441c      	add	r4, r3
  405a02:	2f07      	cmp	r7, #7
  405a04:	9726      	str	r7, [sp, #152]	; 0x98
  405a06:	9427      	str	r4, [sp, #156]	; 0x9c
  405a08:	f8c8 6000 	str.w	r6, [r8]
  405a0c:	f8c8 3004 	str.w	r3, [r8, #4]
  405a10:	f300 8127 	bgt.w	405c62 <_svfprintf_r+0xc86>
  405a14:	f108 0808 	add.w	r8, r8, #8
  405a18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  405a1a:	f8c8 2004 	str.w	r2, [r8, #4]
  405a1e:	3701      	adds	r7, #1
  405a20:	4414      	add	r4, r2
  405a22:	ab21      	add	r3, sp, #132	; 0x84
  405a24:	2f07      	cmp	r7, #7
  405a26:	9427      	str	r4, [sp, #156]	; 0x9c
  405a28:	9726      	str	r7, [sp, #152]	; 0x98
  405a2a:	f8c8 3000 	str.w	r3, [r8]
  405a2e:	f77f acb3 	ble.w	405398 <_svfprintf_r+0x3bc>
  405a32:	aa25      	add	r2, sp, #148	; 0x94
  405a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a36:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a38:	f004 fa6a 	bl	409f10 <__ssprint_r>
  405a3c:	2800      	cmp	r0, #0
  405a3e:	f47f ab9f 	bne.w	405180 <_svfprintf_r+0x1a4>
  405a42:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a44:	46c8      	mov	r8, r9
  405a46:	e4a9      	b.n	40539c <_svfprintf_r+0x3c0>
  405a48:	aa25      	add	r2, sp, #148	; 0x94
  405a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a4e:	f004 fa5f 	bl	409f10 <__ssprint_r>
  405a52:	2800      	cmp	r0, #0
  405a54:	f43f aceb 	beq.w	40542e <_svfprintf_r+0x452>
  405a58:	f7ff bb92 	b.w	405180 <_svfprintf_r+0x1a4>
  405a5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405a60:	2b01      	cmp	r3, #1
  405a62:	f000 8134 	beq.w	405cce <_svfprintf_r+0xcf2>
  405a66:	2b02      	cmp	r3, #2
  405a68:	d125      	bne.n	405ab6 <_svfprintf_r+0xada>
  405a6a:	f8cd b01c 	str.w	fp, [sp, #28]
  405a6e:	2400      	movs	r4, #0
  405a70:	2500      	movs	r5, #0
  405a72:	e61e      	b.n	4056b2 <_svfprintf_r+0x6d6>
  405a74:	aa25      	add	r2, sp, #148	; 0x94
  405a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a78:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a7a:	f004 fa49 	bl	409f10 <__ssprint_r>
  405a7e:	2800      	cmp	r0, #0
  405a80:	f47f ab7e 	bne.w	405180 <_svfprintf_r+0x1a4>
  405a84:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a86:	46c8      	mov	r8, r9
  405a88:	e475      	b.n	405376 <_svfprintf_r+0x39a>
  405a8a:	aa25      	add	r2, sp, #148	; 0x94
  405a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a90:	f004 fa3e 	bl	409f10 <__ssprint_r>
  405a94:	2800      	cmp	r0, #0
  405a96:	f47f ab73 	bne.w	405180 <_svfprintf_r+0x1a4>
  405a9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a9c:	46c8      	mov	r8, r9
  405a9e:	e41b      	b.n	4052d8 <_svfprintf_r+0x2fc>
  405aa0:	aa25      	add	r2, sp, #148	; 0x94
  405aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aa4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405aa6:	f004 fa33 	bl	409f10 <__ssprint_r>
  405aaa:	2800      	cmp	r0, #0
  405aac:	f47f ab68 	bne.w	405180 <_svfprintf_r+0x1a4>
  405ab0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ab2:	46c8      	mov	r8, r9
  405ab4:	e420      	b.n	4052f8 <_svfprintf_r+0x31c>
  405ab6:	f8cd b01c 	str.w	fp, [sp, #28]
  405aba:	2400      	movs	r4, #0
  405abc:	2500      	movs	r5, #0
  405abe:	4649      	mov	r1, r9
  405ac0:	e000      	b.n	405ac4 <_svfprintf_r+0xae8>
  405ac2:	4631      	mov	r1, r6
  405ac4:	08e2      	lsrs	r2, r4, #3
  405ac6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405aca:	08e8      	lsrs	r0, r5, #3
  405acc:	f004 0307 	and.w	r3, r4, #7
  405ad0:	4605      	mov	r5, r0
  405ad2:	4614      	mov	r4, r2
  405ad4:	3330      	adds	r3, #48	; 0x30
  405ad6:	ea54 0205 	orrs.w	r2, r4, r5
  405ada:	f801 3c01 	strb.w	r3, [r1, #-1]
  405ade:	f101 36ff 	add.w	r6, r1, #4294967295
  405ae2:	d1ee      	bne.n	405ac2 <_svfprintf_r+0xae6>
  405ae4:	9a07      	ldr	r2, [sp, #28]
  405ae6:	07d2      	lsls	r2, r2, #31
  405ae8:	f57f adf3 	bpl.w	4056d2 <_svfprintf_r+0x6f6>
  405aec:	2b30      	cmp	r3, #48	; 0x30
  405aee:	f43f adf0 	beq.w	4056d2 <_svfprintf_r+0x6f6>
  405af2:	3902      	subs	r1, #2
  405af4:	2330      	movs	r3, #48	; 0x30
  405af6:	f806 3c01 	strb.w	r3, [r6, #-1]
  405afa:	eba9 0301 	sub.w	r3, r9, r1
  405afe:	930e      	str	r3, [sp, #56]	; 0x38
  405b00:	460e      	mov	r6, r1
  405b02:	f7ff bb7b 	b.w	4051fc <_svfprintf_r+0x220>
  405b06:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405b08:	2900      	cmp	r1, #0
  405b0a:	f340 822e 	ble.w	405f6a <_svfprintf_r+0xf8e>
  405b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405b12:	4293      	cmp	r3, r2
  405b14:	bfa8      	it	ge
  405b16:	4613      	movge	r3, r2
  405b18:	2b00      	cmp	r3, #0
  405b1a:	461f      	mov	r7, r3
  405b1c:	dd0d      	ble.n	405b3a <_svfprintf_r+0xb5e>
  405b1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b20:	f8c8 6000 	str.w	r6, [r8]
  405b24:	3301      	adds	r3, #1
  405b26:	443c      	add	r4, r7
  405b28:	2b07      	cmp	r3, #7
  405b2a:	9427      	str	r4, [sp, #156]	; 0x9c
  405b2c:	f8c8 7004 	str.w	r7, [r8, #4]
  405b30:	9326      	str	r3, [sp, #152]	; 0x98
  405b32:	f300 831f 	bgt.w	406174 <_svfprintf_r+0x1198>
  405b36:	f108 0808 	add.w	r8, r8, #8
  405b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b3c:	2f00      	cmp	r7, #0
  405b3e:	bfa8      	it	ge
  405b40:	1bdb      	subge	r3, r3, r7
  405b42:	2b00      	cmp	r3, #0
  405b44:	461f      	mov	r7, r3
  405b46:	f340 80d6 	ble.w	405cf6 <_svfprintf_r+0xd1a>
  405b4a:	2f10      	cmp	r7, #16
  405b4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b4e:	4d31      	ldr	r5, [pc, #196]	; (405c14 <_svfprintf_r+0xc38>)
  405b50:	f340 81ed 	ble.w	405f2e <_svfprintf_r+0xf52>
  405b54:	4642      	mov	r2, r8
  405b56:	4621      	mov	r1, r4
  405b58:	46b0      	mov	r8, r6
  405b5a:	f04f 0b10 	mov.w	fp, #16
  405b5e:	462e      	mov	r6, r5
  405b60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405b62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405b64:	e004      	b.n	405b70 <_svfprintf_r+0xb94>
  405b66:	3208      	adds	r2, #8
  405b68:	3f10      	subs	r7, #16
  405b6a:	2f10      	cmp	r7, #16
  405b6c:	f340 81db 	ble.w	405f26 <_svfprintf_r+0xf4a>
  405b70:	3301      	adds	r3, #1
  405b72:	3110      	adds	r1, #16
  405b74:	2b07      	cmp	r3, #7
  405b76:	9127      	str	r1, [sp, #156]	; 0x9c
  405b78:	9326      	str	r3, [sp, #152]	; 0x98
  405b7a:	e882 0840 	stmia.w	r2, {r6, fp}
  405b7e:	ddf2      	ble.n	405b66 <_svfprintf_r+0xb8a>
  405b80:	aa25      	add	r2, sp, #148	; 0x94
  405b82:	4629      	mov	r1, r5
  405b84:	4620      	mov	r0, r4
  405b86:	f004 f9c3 	bl	409f10 <__ssprint_r>
  405b8a:	2800      	cmp	r0, #0
  405b8c:	f47f aaf8 	bne.w	405180 <_svfprintf_r+0x1a4>
  405b90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405b92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b94:	464a      	mov	r2, r9
  405b96:	e7e7      	b.n	405b68 <_svfprintf_r+0xb8c>
  405b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b9a:	930e      	str	r3, [sp, #56]	; 0x38
  405b9c:	464e      	mov	r6, r9
  405b9e:	f7ff bb2d 	b.w	4051fc <_svfprintf_r+0x220>
  405ba2:	2d00      	cmp	r5, #0
  405ba4:	bf08      	it	eq
  405ba6:	2c0a      	cmpeq	r4, #10
  405ba8:	f0c0 808f 	bcc.w	405cca <_svfprintf_r+0xcee>
  405bac:	464e      	mov	r6, r9
  405bae:	4620      	mov	r0, r4
  405bb0:	4629      	mov	r1, r5
  405bb2:	220a      	movs	r2, #10
  405bb4:	2300      	movs	r3, #0
  405bb6:	f004 fd57 	bl	40a668 <__aeabi_uldivmod>
  405bba:	3230      	adds	r2, #48	; 0x30
  405bbc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405bc0:	4620      	mov	r0, r4
  405bc2:	4629      	mov	r1, r5
  405bc4:	2300      	movs	r3, #0
  405bc6:	220a      	movs	r2, #10
  405bc8:	f004 fd4e 	bl	40a668 <__aeabi_uldivmod>
  405bcc:	4604      	mov	r4, r0
  405bce:	460d      	mov	r5, r1
  405bd0:	ea54 0305 	orrs.w	r3, r4, r5
  405bd4:	d1eb      	bne.n	405bae <_svfprintf_r+0xbd2>
  405bd6:	eba9 0306 	sub.w	r3, r9, r6
  405bda:	930e      	str	r3, [sp, #56]	; 0x38
  405bdc:	f7ff bb0e 	b.w	4051fc <_svfprintf_r+0x220>
  405be0:	aa25      	add	r2, sp, #148	; 0x94
  405be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405be4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405be6:	f004 f993 	bl	409f10 <__ssprint_r>
  405bea:	2800      	cmp	r0, #0
  405bec:	f47f aac8 	bne.w	405180 <_svfprintf_r+0x1a4>
  405bf0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405bf4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405bf6:	46c8      	mov	r8, r9
  405bf8:	f7ff bb5e 	b.w	4052b8 <_svfprintf_r+0x2dc>
  405bfc:	1e5e      	subs	r6, r3, #1
  405bfe:	2e00      	cmp	r6, #0
  405c00:	f77f af0a 	ble.w	405a18 <_svfprintf_r+0xa3c>
  405c04:	2e10      	cmp	r6, #16
  405c06:	4d03      	ldr	r5, [pc, #12]	; (405c14 <_svfprintf_r+0xc38>)
  405c08:	dd22      	ble.n	405c50 <_svfprintf_r+0xc74>
  405c0a:	4622      	mov	r2, r4
  405c0c:	f04f 0b10 	mov.w	fp, #16
  405c10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405c12:	e006      	b.n	405c22 <_svfprintf_r+0xc46>
  405c14:	0040ad4c 	.word	0x0040ad4c
  405c18:	3e10      	subs	r6, #16
  405c1a:	2e10      	cmp	r6, #16
  405c1c:	f108 0808 	add.w	r8, r8, #8
  405c20:	dd15      	ble.n	405c4e <_svfprintf_r+0xc72>
  405c22:	3701      	adds	r7, #1
  405c24:	3210      	adds	r2, #16
  405c26:	2f07      	cmp	r7, #7
  405c28:	9227      	str	r2, [sp, #156]	; 0x9c
  405c2a:	9726      	str	r7, [sp, #152]	; 0x98
  405c2c:	e888 0820 	stmia.w	r8, {r5, fp}
  405c30:	ddf2      	ble.n	405c18 <_svfprintf_r+0xc3c>
  405c32:	aa25      	add	r2, sp, #148	; 0x94
  405c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c36:	4620      	mov	r0, r4
  405c38:	f004 f96a 	bl	409f10 <__ssprint_r>
  405c3c:	2800      	cmp	r0, #0
  405c3e:	f47f aa9f 	bne.w	405180 <_svfprintf_r+0x1a4>
  405c42:	3e10      	subs	r6, #16
  405c44:	2e10      	cmp	r6, #16
  405c46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405c48:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c4a:	46c8      	mov	r8, r9
  405c4c:	dce9      	bgt.n	405c22 <_svfprintf_r+0xc46>
  405c4e:	4614      	mov	r4, r2
  405c50:	3701      	adds	r7, #1
  405c52:	4434      	add	r4, r6
  405c54:	2f07      	cmp	r7, #7
  405c56:	9427      	str	r4, [sp, #156]	; 0x9c
  405c58:	9726      	str	r7, [sp, #152]	; 0x98
  405c5a:	e888 0060 	stmia.w	r8, {r5, r6}
  405c5e:	f77f aed9 	ble.w	405a14 <_svfprintf_r+0xa38>
  405c62:	aa25      	add	r2, sp, #148	; 0x94
  405c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c66:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c68:	f004 f952 	bl	409f10 <__ssprint_r>
  405c6c:	2800      	cmp	r0, #0
  405c6e:	f47f aa87 	bne.w	405180 <_svfprintf_r+0x1a4>
  405c72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c74:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c76:	46c8      	mov	r8, r9
  405c78:	e6ce      	b.n	405a18 <_svfprintf_r+0xa3c>
  405c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c7c:	6814      	ldr	r4, [r2, #0]
  405c7e:	4613      	mov	r3, r2
  405c80:	3304      	adds	r3, #4
  405c82:	17e5      	asrs	r5, r4, #31
  405c84:	930f      	str	r3, [sp, #60]	; 0x3c
  405c86:	4622      	mov	r2, r4
  405c88:	462b      	mov	r3, r5
  405c8a:	e4fa      	b.n	405682 <_svfprintf_r+0x6a6>
  405c8c:	3204      	adds	r2, #4
  405c8e:	681c      	ldr	r4, [r3, #0]
  405c90:	920f      	str	r2, [sp, #60]	; 0x3c
  405c92:	2301      	movs	r3, #1
  405c94:	2500      	movs	r5, #0
  405c96:	f7ff ba94 	b.w	4051c2 <_svfprintf_r+0x1e6>
  405c9a:	681c      	ldr	r4, [r3, #0]
  405c9c:	3304      	adds	r3, #4
  405c9e:	930f      	str	r3, [sp, #60]	; 0x3c
  405ca0:	2500      	movs	r5, #0
  405ca2:	e421      	b.n	4054e8 <_svfprintf_r+0x50c>
  405ca4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405ca6:	460a      	mov	r2, r1
  405ca8:	3204      	adds	r2, #4
  405caa:	680c      	ldr	r4, [r1, #0]
  405cac:	920f      	str	r2, [sp, #60]	; 0x3c
  405cae:	2500      	movs	r5, #0
  405cb0:	f7ff ba87 	b.w	4051c2 <_svfprintf_r+0x1e6>
  405cb4:	4614      	mov	r4, r2
  405cb6:	3301      	adds	r3, #1
  405cb8:	4434      	add	r4, r6
  405cba:	2b07      	cmp	r3, #7
  405cbc:	9427      	str	r4, [sp, #156]	; 0x9c
  405cbe:	9326      	str	r3, [sp, #152]	; 0x98
  405cc0:	e888 0060 	stmia.w	r8, {r5, r6}
  405cc4:	f77f ab68 	ble.w	405398 <_svfprintf_r+0x3bc>
  405cc8:	e6b3      	b.n	405a32 <_svfprintf_r+0xa56>
  405cca:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405cce:	f8cd b01c 	str.w	fp, [sp, #28]
  405cd2:	ae42      	add	r6, sp, #264	; 0x108
  405cd4:	3430      	adds	r4, #48	; 0x30
  405cd6:	2301      	movs	r3, #1
  405cd8:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405cdc:	930e      	str	r3, [sp, #56]	; 0x38
  405cde:	f7ff ba8d 	b.w	4051fc <_svfprintf_r+0x220>
  405ce2:	aa25      	add	r2, sp, #148	; 0x94
  405ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ce6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ce8:	f004 f912 	bl	409f10 <__ssprint_r>
  405cec:	2800      	cmp	r0, #0
  405cee:	f47f aa47 	bne.w	405180 <_svfprintf_r+0x1a4>
  405cf2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405cf4:	46c8      	mov	r8, r9
  405cf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405cfa:	429a      	cmp	r2, r3
  405cfc:	db44      	blt.n	405d88 <_svfprintf_r+0xdac>
  405cfe:	9b07      	ldr	r3, [sp, #28]
  405d00:	07d9      	lsls	r1, r3, #31
  405d02:	d441      	bmi.n	405d88 <_svfprintf_r+0xdac>
  405d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d06:	9812      	ldr	r0, [sp, #72]	; 0x48
  405d08:	1a9a      	subs	r2, r3, r2
  405d0a:	1a1d      	subs	r5, r3, r0
  405d0c:	4295      	cmp	r5, r2
  405d0e:	bfa8      	it	ge
  405d10:	4615      	movge	r5, r2
  405d12:	2d00      	cmp	r5, #0
  405d14:	dd0e      	ble.n	405d34 <_svfprintf_r+0xd58>
  405d16:	9926      	ldr	r1, [sp, #152]	; 0x98
  405d18:	f8c8 5004 	str.w	r5, [r8, #4]
  405d1c:	3101      	adds	r1, #1
  405d1e:	4406      	add	r6, r0
  405d20:	442c      	add	r4, r5
  405d22:	2907      	cmp	r1, #7
  405d24:	f8c8 6000 	str.w	r6, [r8]
  405d28:	9427      	str	r4, [sp, #156]	; 0x9c
  405d2a:	9126      	str	r1, [sp, #152]	; 0x98
  405d2c:	f300 823b 	bgt.w	4061a6 <_svfprintf_r+0x11ca>
  405d30:	f108 0808 	add.w	r8, r8, #8
  405d34:	2d00      	cmp	r5, #0
  405d36:	bfac      	ite	ge
  405d38:	1b56      	subge	r6, r2, r5
  405d3a:	4616      	movlt	r6, r2
  405d3c:	2e00      	cmp	r6, #0
  405d3e:	f77f ab2d 	ble.w	40539c <_svfprintf_r+0x3c0>
  405d42:	2e10      	cmp	r6, #16
  405d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405d46:	4db0      	ldr	r5, [pc, #704]	; (406008 <_svfprintf_r+0x102c>)
  405d48:	ddb5      	ble.n	405cb6 <_svfprintf_r+0xcda>
  405d4a:	4622      	mov	r2, r4
  405d4c:	2710      	movs	r7, #16
  405d4e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405d52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405d54:	e004      	b.n	405d60 <_svfprintf_r+0xd84>
  405d56:	f108 0808 	add.w	r8, r8, #8
  405d5a:	3e10      	subs	r6, #16
  405d5c:	2e10      	cmp	r6, #16
  405d5e:	dda9      	ble.n	405cb4 <_svfprintf_r+0xcd8>
  405d60:	3301      	adds	r3, #1
  405d62:	3210      	adds	r2, #16
  405d64:	2b07      	cmp	r3, #7
  405d66:	9227      	str	r2, [sp, #156]	; 0x9c
  405d68:	9326      	str	r3, [sp, #152]	; 0x98
  405d6a:	e888 00a0 	stmia.w	r8, {r5, r7}
  405d6e:	ddf2      	ble.n	405d56 <_svfprintf_r+0xd7a>
  405d70:	aa25      	add	r2, sp, #148	; 0x94
  405d72:	4621      	mov	r1, r4
  405d74:	4658      	mov	r0, fp
  405d76:	f004 f8cb 	bl	409f10 <__ssprint_r>
  405d7a:	2800      	cmp	r0, #0
  405d7c:	f47f aa00 	bne.w	405180 <_svfprintf_r+0x1a4>
  405d80:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405d84:	46c8      	mov	r8, r9
  405d86:	e7e8      	b.n	405d5a <_svfprintf_r+0xd7e>
  405d88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405d8a:	9819      	ldr	r0, [sp, #100]	; 0x64
  405d8c:	991a      	ldr	r1, [sp, #104]	; 0x68
  405d8e:	f8c8 1000 	str.w	r1, [r8]
  405d92:	3301      	adds	r3, #1
  405d94:	4404      	add	r4, r0
  405d96:	2b07      	cmp	r3, #7
  405d98:	9427      	str	r4, [sp, #156]	; 0x9c
  405d9a:	f8c8 0004 	str.w	r0, [r8, #4]
  405d9e:	9326      	str	r3, [sp, #152]	; 0x98
  405da0:	f300 81f5 	bgt.w	40618e <_svfprintf_r+0x11b2>
  405da4:	f108 0808 	add.w	r8, r8, #8
  405da8:	e7ac      	b.n	405d04 <_svfprintf_r+0xd28>
  405daa:	9b07      	ldr	r3, [sp, #28]
  405dac:	07da      	lsls	r2, r3, #31
  405dae:	f53f adfe 	bmi.w	4059ae <_svfprintf_r+0x9d2>
  405db2:	3701      	adds	r7, #1
  405db4:	3401      	adds	r4, #1
  405db6:	2301      	movs	r3, #1
  405db8:	2f07      	cmp	r7, #7
  405dba:	9427      	str	r4, [sp, #156]	; 0x9c
  405dbc:	9726      	str	r7, [sp, #152]	; 0x98
  405dbe:	f8c8 6000 	str.w	r6, [r8]
  405dc2:	f8c8 3004 	str.w	r3, [r8, #4]
  405dc6:	f77f ae25 	ble.w	405a14 <_svfprintf_r+0xa38>
  405dca:	e74a      	b.n	405c62 <_svfprintf_r+0xc86>
  405dcc:	aa25      	add	r2, sp, #148	; 0x94
  405dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405dd0:	980c      	ldr	r0, [sp, #48]	; 0x30
  405dd2:	f004 f89d 	bl	409f10 <__ssprint_r>
  405dd6:	2800      	cmp	r0, #0
  405dd8:	f47f a9d2 	bne.w	405180 <_svfprintf_r+0x1a4>
  405ddc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405dde:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405de0:	46c8      	mov	r8, r9
  405de2:	e5f2      	b.n	4059ca <_svfprintf_r+0x9ee>
  405de4:	aa25      	add	r2, sp, #148	; 0x94
  405de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405de8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405dea:	f004 f891 	bl	409f10 <__ssprint_r>
  405dee:	2800      	cmp	r0, #0
  405df0:	f47f a9c6 	bne.w	405180 <_svfprintf_r+0x1a4>
  405df4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405df6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405df8:	46c8      	mov	r8, r9
  405dfa:	e5f5      	b.n	4059e8 <_svfprintf_r+0xa0c>
  405dfc:	464e      	mov	r6, r9
  405dfe:	f7ff b9fd 	b.w	4051fc <_svfprintf_r+0x220>
  405e02:	aa25      	add	r2, sp, #148	; 0x94
  405e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e06:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e08:	f004 f882 	bl	409f10 <__ssprint_r>
  405e0c:	2800      	cmp	r0, #0
  405e0e:	f47f a9b7 	bne.w	405180 <_svfprintf_r+0x1a4>
  405e12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e14:	46c8      	mov	r8, r9
  405e16:	f7ff ba72 	b.w	4052fe <_svfprintf_r+0x322>
  405e1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405e1c:	4622      	mov	r2, r4
  405e1e:	4620      	mov	r0, r4
  405e20:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405e22:	4623      	mov	r3, r4
  405e24:	4621      	mov	r1, r4
  405e26:	f004 fbe1 	bl	40a5ec <__aeabi_dcmpun>
  405e2a:	2800      	cmp	r0, #0
  405e2c:	f040 8286 	bne.w	40633c <_svfprintf_r+0x1360>
  405e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e32:	3301      	adds	r3, #1
  405e34:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e36:	f023 0320 	bic.w	r3, r3, #32
  405e3a:	930e      	str	r3, [sp, #56]	; 0x38
  405e3c:	f000 81e2 	beq.w	406204 <_svfprintf_r+0x1228>
  405e40:	2b47      	cmp	r3, #71	; 0x47
  405e42:	f000 811e 	beq.w	406082 <_svfprintf_r+0x10a6>
  405e46:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405e4a:	9307      	str	r3, [sp, #28]
  405e4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405e4e:	1e1f      	subs	r7, r3, #0
  405e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405e52:	9308      	str	r3, [sp, #32]
  405e54:	bfbb      	ittet	lt
  405e56:	463b      	movlt	r3, r7
  405e58:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405e5c:	2300      	movge	r3, #0
  405e5e:	232d      	movlt	r3, #45	; 0x2d
  405e60:	9310      	str	r3, [sp, #64]	; 0x40
  405e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e64:	2b66      	cmp	r3, #102	; 0x66
  405e66:	f000 81bb 	beq.w	4061e0 <_svfprintf_r+0x1204>
  405e6a:	2b46      	cmp	r3, #70	; 0x46
  405e6c:	f000 80df 	beq.w	40602e <_svfprintf_r+0x1052>
  405e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405e72:	9a08      	ldr	r2, [sp, #32]
  405e74:	2b45      	cmp	r3, #69	; 0x45
  405e76:	bf0c      	ite	eq
  405e78:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405e7a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405e7c:	a823      	add	r0, sp, #140	; 0x8c
  405e7e:	a920      	add	r1, sp, #128	; 0x80
  405e80:	bf08      	it	eq
  405e82:	1c5d      	addeq	r5, r3, #1
  405e84:	9004      	str	r0, [sp, #16]
  405e86:	9103      	str	r1, [sp, #12]
  405e88:	a81f      	add	r0, sp, #124	; 0x7c
  405e8a:	2102      	movs	r1, #2
  405e8c:	463b      	mov	r3, r7
  405e8e:	9002      	str	r0, [sp, #8]
  405e90:	9501      	str	r5, [sp, #4]
  405e92:	9100      	str	r1, [sp, #0]
  405e94:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e96:	f001 fec7 	bl	407c28 <_dtoa_r>
  405e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e9c:	2b67      	cmp	r3, #103	; 0x67
  405e9e:	4606      	mov	r6, r0
  405ea0:	f040 81e0 	bne.w	406264 <_svfprintf_r+0x1288>
  405ea4:	f01b 0f01 	tst.w	fp, #1
  405ea8:	f000 8246 	beq.w	406338 <_svfprintf_r+0x135c>
  405eac:	1974      	adds	r4, r6, r5
  405eae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405eb0:	9808      	ldr	r0, [sp, #32]
  405eb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405eb4:	4639      	mov	r1, r7
  405eb6:	f7fe fa37 	bl	404328 <__aeabi_dcmpeq>
  405eba:	2800      	cmp	r0, #0
  405ebc:	f040 8165 	bne.w	40618a <_svfprintf_r+0x11ae>
  405ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405ec2:	42a3      	cmp	r3, r4
  405ec4:	d206      	bcs.n	405ed4 <_svfprintf_r+0xef8>
  405ec6:	2130      	movs	r1, #48	; 0x30
  405ec8:	1c5a      	adds	r2, r3, #1
  405eca:	9223      	str	r2, [sp, #140]	; 0x8c
  405ecc:	7019      	strb	r1, [r3, #0]
  405ece:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405ed0:	429c      	cmp	r4, r3
  405ed2:	d8f9      	bhi.n	405ec8 <_svfprintf_r+0xeec>
  405ed4:	1b9b      	subs	r3, r3, r6
  405ed6:	9313      	str	r3, [sp, #76]	; 0x4c
  405ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405eda:	2b47      	cmp	r3, #71	; 0x47
  405edc:	f000 80e9 	beq.w	4060b2 <_svfprintf_r+0x10d6>
  405ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ee2:	2b65      	cmp	r3, #101	; 0x65
  405ee4:	f340 81cd 	ble.w	406282 <_svfprintf_r+0x12a6>
  405ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405eea:	2b66      	cmp	r3, #102	; 0x66
  405eec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405eee:	9312      	str	r3, [sp, #72]	; 0x48
  405ef0:	f000 819e 	beq.w	406230 <_svfprintf_r+0x1254>
  405ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ef6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ef8:	4619      	mov	r1, r3
  405efa:	4291      	cmp	r1, r2
  405efc:	f300 818a 	bgt.w	406214 <_svfprintf_r+0x1238>
  405f00:	f01b 0f01 	tst.w	fp, #1
  405f04:	f040 8213 	bne.w	40632e <_svfprintf_r+0x1352>
  405f08:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405f0c:	9308      	str	r3, [sp, #32]
  405f0e:	2367      	movs	r3, #103	; 0x67
  405f10:	920e      	str	r2, [sp, #56]	; 0x38
  405f12:	9311      	str	r3, [sp, #68]	; 0x44
  405f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405f16:	2b00      	cmp	r3, #0
  405f18:	f040 80c4 	bne.w	4060a4 <_svfprintf_r+0x10c8>
  405f1c:	930a      	str	r3, [sp, #40]	; 0x28
  405f1e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405f22:	f7ff b973 	b.w	40520c <_svfprintf_r+0x230>
  405f26:	4635      	mov	r5, r6
  405f28:	460c      	mov	r4, r1
  405f2a:	4646      	mov	r6, r8
  405f2c:	4690      	mov	r8, r2
  405f2e:	3301      	adds	r3, #1
  405f30:	443c      	add	r4, r7
  405f32:	2b07      	cmp	r3, #7
  405f34:	9427      	str	r4, [sp, #156]	; 0x9c
  405f36:	9326      	str	r3, [sp, #152]	; 0x98
  405f38:	e888 00a0 	stmia.w	r8, {r5, r7}
  405f3c:	f73f aed1 	bgt.w	405ce2 <_svfprintf_r+0xd06>
  405f40:	f108 0808 	add.w	r8, r8, #8
  405f44:	e6d7      	b.n	405cf6 <_svfprintf_r+0xd1a>
  405f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405f48:	6813      	ldr	r3, [r2, #0]
  405f4a:	3204      	adds	r2, #4
  405f4c:	920f      	str	r2, [sp, #60]	; 0x3c
  405f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405f50:	601a      	str	r2, [r3, #0]
  405f52:	f7ff b86a 	b.w	40502a <_svfprintf_r+0x4e>
  405f56:	aa25      	add	r2, sp, #148	; 0x94
  405f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f5a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f5c:	f003 ffd8 	bl	409f10 <__ssprint_r>
  405f60:	2800      	cmp	r0, #0
  405f62:	f47f a90d 	bne.w	405180 <_svfprintf_r+0x1a4>
  405f66:	46c8      	mov	r8, r9
  405f68:	e48d      	b.n	405886 <_svfprintf_r+0x8aa>
  405f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f6c:	4a27      	ldr	r2, [pc, #156]	; (40600c <_svfprintf_r+0x1030>)
  405f6e:	f8c8 2000 	str.w	r2, [r8]
  405f72:	3301      	adds	r3, #1
  405f74:	3401      	adds	r4, #1
  405f76:	2201      	movs	r2, #1
  405f78:	2b07      	cmp	r3, #7
  405f7a:	9427      	str	r4, [sp, #156]	; 0x9c
  405f7c:	9326      	str	r3, [sp, #152]	; 0x98
  405f7e:	f8c8 2004 	str.w	r2, [r8, #4]
  405f82:	dc72      	bgt.n	40606a <_svfprintf_r+0x108e>
  405f84:	f108 0808 	add.w	r8, r8, #8
  405f88:	b929      	cbnz	r1, 405f96 <_svfprintf_r+0xfba>
  405f8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405f8c:	b91b      	cbnz	r3, 405f96 <_svfprintf_r+0xfba>
  405f8e:	9b07      	ldr	r3, [sp, #28]
  405f90:	07d8      	lsls	r0, r3, #31
  405f92:	f57f aa03 	bpl.w	40539c <_svfprintf_r+0x3c0>
  405f96:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f98:	9819      	ldr	r0, [sp, #100]	; 0x64
  405f9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405f9c:	f8c8 2000 	str.w	r2, [r8]
  405fa0:	3301      	adds	r3, #1
  405fa2:	4602      	mov	r2, r0
  405fa4:	4422      	add	r2, r4
  405fa6:	2b07      	cmp	r3, #7
  405fa8:	9227      	str	r2, [sp, #156]	; 0x9c
  405faa:	f8c8 0004 	str.w	r0, [r8, #4]
  405fae:	9326      	str	r3, [sp, #152]	; 0x98
  405fb0:	f300 818d 	bgt.w	4062ce <_svfprintf_r+0x12f2>
  405fb4:	f108 0808 	add.w	r8, r8, #8
  405fb8:	2900      	cmp	r1, #0
  405fba:	f2c0 8165 	blt.w	406288 <_svfprintf_r+0x12ac>
  405fbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405fc0:	f8c8 6000 	str.w	r6, [r8]
  405fc4:	3301      	adds	r3, #1
  405fc6:	188c      	adds	r4, r1, r2
  405fc8:	2b07      	cmp	r3, #7
  405fca:	9427      	str	r4, [sp, #156]	; 0x9c
  405fcc:	9326      	str	r3, [sp, #152]	; 0x98
  405fce:	f8c8 1004 	str.w	r1, [r8, #4]
  405fd2:	f77f a9e1 	ble.w	405398 <_svfprintf_r+0x3bc>
  405fd6:	e52c      	b.n	405a32 <_svfprintf_r+0xa56>
  405fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405fda:	9909      	ldr	r1, [sp, #36]	; 0x24
  405fdc:	6813      	ldr	r3, [r2, #0]
  405fde:	17cd      	asrs	r5, r1, #31
  405fe0:	4608      	mov	r0, r1
  405fe2:	3204      	adds	r2, #4
  405fe4:	4629      	mov	r1, r5
  405fe6:	920f      	str	r2, [sp, #60]	; 0x3c
  405fe8:	e9c3 0100 	strd	r0, r1, [r3]
  405fec:	f7ff b81d 	b.w	40502a <_svfprintf_r+0x4e>
  405ff0:	aa25      	add	r2, sp, #148	; 0x94
  405ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ff4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ff6:	f003 ff8b 	bl	409f10 <__ssprint_r>
  405ffa:	2800      	cmp	r0, #0
  405ffc:	f47f a8c0 	bne.w	405180 <_svfprintf_r+0x1a4>
  406000:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406002:	46c8      	mov	r8, r9
  406004:	e458      	b.n	4058b8 <_svfprintf_r+0x8dc>
  406006:	bf00      	nop
  406008:	0040ad4c 	.word	0x0040ad4c
  40600c:	0040ad38 	.word	0x0040ad38
  406010:	2140      	movs	r1, #64	; 0x40
  406012:	980c      	ldr	r0, [sp, #48]	; 0x30
  406014:	f7fe fa42 	bl	40449c <_malloc_r>
  406018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40601a:	6010      	str	r0, [r2, #0]
  40601c:	6110      	str	r0, [r2, #16]
  40601e:	2800      	cmp	r0, #0
  406020:	f000 81f2 	beq.w	406408 <_svfprintf_r+0x142c>
  406024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406026:	2340      	movs	r3, #64	; 0x40
  406028:	6153      	str	r3, [r2, #20]
  40602a:	f7fe bfee 	b.w	40500a <_svfprintf_r+0x2e>
  40602e:	a823      	add	r0, sp, #140	; 0x8c
  406030:	a920      	add	r1, sp, #128	; 0x80
  406032:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406034:	9004      	str	r0, [sp, #16]
  406036:	9103      	str	r1, [sp, #12]
  406038:	a81f      	add	r0, sp, #124	; 0x7c
  40603a:	2103      	movs	r1, #3
  40603c:	9002      	str	r0, [sp, #8]
  40603e:	9a08      	ldr	r2, [sp, #32]
  406040:	9401      	str	r4, [sp, #4]
  406042:	463b      	mov	r3, r7
  406044:	9100      	str	r1, [sp, #0]
  406046:	980c      	ldr	r0, [sp, #48]	; 0x30
  406048:	f001 fdee 	bl	407c28 <_dtoa_r>
  40604c:	4625      	mov	r5, r4
  40604e:	4606      	mov	r6, r0
  406050:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406052:	2b46      	cmp	r3, #70	; 0x46
  406054:	eb06 0405 	add.w	r4, r6, r5
  406058:	f47f af29 	bne.w	405eae <_svfprintf_r+0xed2>
  40605c:	7833      	ldrb	r3, [r6, #0]
  40605e:	2b30      	cmp	r3, #48	; 0x30
  406060:	f000 8178 	beq.w	406354 <_svfprintf_r+0x1378>
  406064:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  406066:	442c      	add	r4, r5
  406068:	e721      	b.n	405eae <_svfprintf_r+0xed2>
  40606a:	aa25      	add	r2, sp, #148	; 0x94
  40606c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40606e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406070:	f003 ff4e 	bl	409f10 <__ssprint_r>
  406074:	2800      	cmp	r0, #0
  406076:	f47f a883 	bne.w	405180 <_svfprintf_r+0x1a4>
  40607a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40607c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40607e:	46c8      	mov	r8, r9
  406080:	e782      	b.n	405f88 <_svfprintf_r+0xfac>
  406082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406084:	2b00      	cmp	r3, #0
  406086:	bf08      	it	eq
  406088:	2301      	moveq	r3, #1
  40608a:	930a      	str	r3, [sp, #40]	; 0x28
  40608c:	e6db      	b.n	405e46 <_svfprintf_r+0xe6a>
  40608e:	4630      	mov	r0, r6
  406090:	940a      	str	r4, [sp, #40]	; 0x28
  406092:	f7fe ff35 	bl	404f00 <strlen>
  406096:	950f      	str	r5, [sp, #60]	; 0x3c
  406098:	900e      	str	r0, [sp, #56]	; 0x38
  40609a:	f8cd b01c 	str.w	fp, [sp, #28]
  40609e:	4603      	mov	r3, r0
  4060a0:	f7ff b9f9 	b.w	405496 <_svfprintf_r+0x4ba>
  4060a4:	272d      	movs	r7, #45	; 0x2d
  4060a6:	2300      	movs	r3, #0
  4060a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4060ac:	930a      	str	r3, [sp, #40]	; 0x28
  4060ae:	f7ff b8ae 	b.w	40520e <_svfprintf_r+0x232>
  4060b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4060b4:	9312      	str	r3, [sp, #72]	; 0x48
  4060b6:	461a      	mov	r2, r3
  4060b8:	3303      	adds	r3, #3
  4060ba:	db04      	blt.n	4060c6 <_svfprintf_r+0x10ea>
  4060bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060be:	4619      	mov	r1, r3
  4060c0:	4291      	cmp	r1, r2
  4060c2:	f6bf af17 	bge.w	405ef4 <_svfprintf_r+0xf18>
  4060c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060c8:	3b02      	subs	r3, #2
  4060ca:	9311      	str	r3, [sp, #68]	; 0x44
  4060cc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4060d0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4060d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4060d6:	3b01      	subs	r3, #1
  4060d8:	2b00      	cmp	r3, #0
  4060da:	931f      	str	r3, [sp, #124]	; 0x7c
  4060dc:	bfbd      	ittte	lt
  4060de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4060e0:	f1c3 0301 	rsblt	r3, r3, #1
  4060e4:	222d      	movlt	r2, #45	; 0x2d
  4060e6:	222b      	movge	r2, #43	; 0x2b
  4060e8:	2b09      	cmp	r3, #9
  4060ea:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4060ee:	f340 8116 	ble.w	40631e <_svfprintf_r+0x1342>
  4060f2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4060f6:	4620      	mov	r0, r4
  4060f8:	4dab      	ldr	r5, [pc, #684]	; (4063a8 <_svfprintf_r+0x13cc>)
  4060fa:	e000      	b.n	4060fe <_svfprintf_r+0x1122>
  4060fc:	4610      	mov	r0, r2
  4060fe:	fb85 1203 	smull	r1, r2, r5, r3
  406102:	17d9      	asrs	r1, r3, #31
  406104:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  406108:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40610c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  406110:	3230      	adds	r2, #48	; 0x30
  406112:	2909      	cmp	r1, #9
  406114:	f800 2c01 	strb.w	r2, [r0, #-1]
  406118:	460b      	mov	r3, r1
  40611a:	f100 32ff 	add.w	r2, r0, #4294967295
  40611e:	dced      	bgt.n	4060fc <_svfprintf_r+0x1120>
  406120:	3330      	adds	r3, #48	; 0x30
  406122:	3802      	subs	r0, #2
  406124:	b2d9      	uxtb	r1, r3
  406126:	4284      	cmp	r4, r0
  406128:	f802 1c01 	strb.w	r1, [r2, #-1]
  40612c:	f240 8165 	bls.w	4063fa <_svfprintf_r+0x141e>
  406130:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  406134:	4613      	mov	r3, r2
  406136:	e001      	b.n	40613c <_svfprintf_r+0x1160>
  406138:	f813 1b01 	ldrb.w	r1, [r3], #1
  40613c:	f800 1b01 	strb.w	r1, [r0], #1
  406140:	42a3      	cmp	r3, r4
  406142:	d1f9      	bne.n	406138 <_svfprintf_r+0x115c>
  406144:	3301      	adds	r3, #1
  406146:	1a9b      	subs	r3, r3, r2
  406148:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40614c:	4413      	add	r3, r2
  40614e:	aa21      	add	r2, sp, #132	; 0x84
  406150:	1a9b      	subs	r3, r3, r2
  406152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406154:	931b      	str	r3, [sp, #108]	; 0x6c
  406156:	2a01      	cmp	r2, #1
  406158:	4413      	add	r3, r2
  40615a:	930e      	str	r3, [sp, #56]	; 0x38
  40615c:	f340 8119 	ble.w	406392 <_svfprintf_r+0x13b6>
  406160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406162:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406164:	4413      	add	r3, r2
  406166:	930e      	str	r3, [sp, #56]	; 0x38
  406168:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40616c:	9308      	str	r3, [sp, #32]
  40616e:	2300      	movs	r3, #0
  406170:	9312      	str	r3, [sp, #72]	; 0x48
  406172:	e6cf      	b.n	405f14 <_svfprintf_r+0xf38>
  406174:	aa25      	add	r2, sp, #148	; 0x94
  406176:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406178:	980c      	ldr	r0, [sp, #48]	; 0x30
  40617a:	f003 fec9 	bl	409f10 <__ssprint_r>
  40617e:	2800      	cmp	r0, #0
  406180:	f47e affe 	bne.w	405180 <_svfprintf_r+0x1a4>
  406184:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406186:	46c8      	mov	r8, r9
  406188:	e4d7      	b.n	405b3a <_svfprintf_r+0xb5e>
  40618a:	4623      	mov	r3, r4
  40618c:	e6a2      	b.n	405ed4 <_svfprintf_r+0xef8>
  40618e:	aa25      	add	r2, sp, #148	; 0x94
  406190:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406192:	980c      	ldr	r0, [sp, #48]	; 0x30
  406194:	f003 febc 	bl	409f10 <__ssprint_r>
  406198:	2800      	cmp	r0, #0
  40619a:	f47e aff1 	bne.w	405180 <_svfprintf_r+0x1a4>
  40619e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4061a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4061a2:	46c8      	mov	r8, r9
  4061a4:	e5ae      	b.n	405d04 <_svfprintf_r+0xd28>
  4061a6:	aa25      	add	r2, sp, #148	; 0x94
  4061a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4061aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061ac:	f003 feb0 	bl	409f10 <__ssprint_r>
  4061b0:	2800      	cmp	r0, #0
  4061b2:	f47e afe5 	bne.w	405180 <_svfprintf_r+0x1a4>
  4061b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4061b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4061ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4061bc:	1a9a      	subs	r2, r3, r2
  4061be:	46c8      	mov	r8, r9
  4061c0:	e5b8      	b.n	405d34 <_svfprintf_r+0xd58>
  4061c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061c4:	9612      	str	r6, [sp, #72]	; 0x48
  4061c6:	2b06      	cmp	r3, #6
  4061c8:	bf28      	it	cs
  4061ca:	2306      	movcs	r3, #6
  4061cc:	960a      	str	r6, [sp, #40]	; 0x28
  4061ce:	4637      	mov	r7, r6
  4061d0:	9308      	str	r3, [sp, #32]
  4061d2:	950f      	str	r5, [sp, #60]	; 0x3c
  4061d4:	f8cd b01c 	str.w	fp, [sp, #28]
  4061d8:	930e      	str	r3, [sp, #56]	; 0x38
  4061da:	4e74      	ldr	r6, [pc, #464]	; (4063ac <_svfprintf_r+0x13d0>)
  4061dc:	f7ff b816 	b.w	40520c <_svfprintf_r+0x230>
  4061e0:	a823      	add	r0, sp, #140	; 0x8c
  4061e2:	a920      	add	r1, sp, #128	; 0x80
  4061e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4061e6:	9004      	str	r0, [sp, #16]
  4061e8:	9103      	str	r1, [sp, #12]
  4061ea:	a81f      	add	r0, sp, #124	; 0x7c
  4061ec:	2103      	movs	r1, #3
  4061ee:	9002      	str	r0, [sp, #8]
  4061f0:	9a08      	ldr	r2, [sp, #32]
  4061f2:	9501      	str	r5, [sp, #4]
  4061f4:	463b      	mov	r3, r7
  4061f6:	9100      	str	r1, [sp, #0]
  4061f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061fa:	f001 fd15 	bl	407c28 <_dtoa_r>
  4061fe:	4606      	mov	r6, r0
  406200:	1944      	adds	r4, r0, r5
  406202:	e72b      	b.n	40605c <_svfprintf_r+0x1080>
  406204:	2306      	movs	r3, #6
  406206:	930a      	str	r3, [sp, #40]	; 0x28
  406208:	e61d      	b.n	405e46 <_svfprintf_r+0xe6a>
  40620a:	272d      	movs	r7, #45	; 0x2d
  40620c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406210:	f7ff bacd 	b.w	4057ae <_svfprintf_r+0x7d2>
  406214:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406218:	4413      	add	r3, r2
  40621a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40621c:	930e      	str	r3, [sp, #56]	; 0x38
  40621e:	2a00      	cmp	r2, #0
  406220:	f340 80b0 	ble.w	406384 <_svfprintf_r+0x13a8>
  406224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406228:	9308      	str	r3, [sp, #32]
  40622a:	2367      	movs	r3, #103	; 0x67
  40622c:	9311      	str	r3, [sp, #68]	; 0x44
  40622e:	e671      	b.n	405f14 <_svfprintf_r+0xf38>
  406230:	2b00      	cmp	r3, #0
  406232:	f340 80c3 	ble.w	4063bc <_svfprintf_r+0x13e0>
  406236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406238:	2a00      	cmp	r2, #0
  40623a:	f040 8099 	bne.w	406370 <_svfprintf_r+0x1394>
  40623e:	f01b 0f01 	tst.w	fp, #1
  406242:	f040 8095 	bne.w	406370 <_svfprintf_r+0x1394>
  406246:	9308      	str	r3, [sp, #32]
  406248:	930e      	str	r3, [sp, #56]	; 0x38
  40624a:	e663      	b.n	405f14 <_svfprintf_r+0xf38>
  40624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40624e:	9308      	str	r3, [sp, #32]
  406250:	930e      	str	r3, [sp, #56]	; 0x38
  406252:	900a      	str	r0, [sp, #40]	; 0x28
  406254:	950f      	str	r5, [sp, #60]	; 0x3c
  406256:	f8cd b01c 	str.w	fp, [sp, #28]
  40625a:	9012      	str	r0, [sp, #72]	; 0x48
  40625c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406260:	f7fe bfd4 	b.w	40520c <_svfprintf_r+0x230>
  406264:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406266:	2b47      	cmp	r3, #71	; 0x47
  406268:	f47f ae20 	bne.w	405eac <_svfprintf_r+0xed0>
  40626c:	f01b 0f01 	tst.w	fp, #1
  406270:	f47f aeee 	bne.w	406050 <_svfprintf_r+0x1074>
  406274:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406276:	1b9b      	subs	r3, r3, r6
  406278:	9313      	str	r3, [sp, #76]	; 0x4c
  40627a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40627c:	2b47      	cmp	r3, #71	; 0x47
  40627e:	f43f af18 	beq.w	4060b2 <_svfprintf_r+0x10d6>
  406282:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406284:	9312      	str	r3, [sp, #72]	; 0x48
  406286:	e721      	b.n	4060cc <_svfprintf_r+0x10f0>
  406288:	424f      	negs	r7, r1
  40628a:	3110      	adds	r1, #16
  40628c:	4d48      	ldr	r5, [pc, #288]	; (4063b0 <_svfprintf_r+0x13d4>)
  40628e:	da2f      	bge.n	4062f0 <_svfprintf_r+0x1314>
  406290:	2410      	movs	r4, #16
  406292:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406296:	e004      	b.n	4062a2 <_svfprintf_r+0x12c6>
  406298:	f108 0808 	add.w	r8, r8, #8
  40629c:	3f10      	subs	r7, #16
  40629e:	2f10      	cmp	r7, #16
  4062a0:	dd26      	ble.n	4062f0 <_svfprintf_r+0x1314>
  4062a2:	3301      	adds	r3, #1
  4062a4:	3210      	adds	r2, #16
  4062a6:	2b07      	cmp	r3, #7
  4062a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4062aa:	9326      	str	r3, [sp, #152]	; 0x98
  4062ac:	f8c8 5000 	str.w	r5, [r8]
  4062b0:	f8c8 4004 	str.w	r4, [r8, #4]
  4062b4:	ddf0      	ble.n	406298 <_svfprintf_r+0x12bc>
  4062b6:	aa25      	add	r2, sp, #148	; 0x94
  4062b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4062ba:	4658      	mov	r0, fp
  4062bc:	f003 fe28 	bl	409f10 <__ssprint_r>
  4062c0:	2800      	cmp	r0, #0
  4062c2:	f47e af5d 	bne.w	405180 <_svfprintf_r+0x1a4>
  4062c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4062c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4062ca:	46c8      	mov	r8, r9
  4062cc:	e7e6      	b.n	40629c <_svfprintf_r+0x12c0>
  4062ce:	aa25      	add	r2, sp, #148	; 0x94
  4062d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4062d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4062d4:	f003 fe1c 	bl	409f10 <__ssprint_r>
  4062d8:	2800      	cmp	r0, #0
  4062da:	f47e af51 	bne.w	405180 <_svfprintf_r+0x1a4>
  4062de:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4062e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4062e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4062e4:	46c8      	mov	r8, r9
  4062e6:	e667      	b.n	405fb8 <_svfprintf_r+0xfdc>
  4062e8:	2000      	movs	r0, #0
  4062ea:	900a      	str	r0, [sp, #40]	; 0x28
  4062ec:	f7fe bed0 	b.w	405090 <_svfprintf_r+0xb4>
  4062f0:	3301      	adds	r3, #1
  4062f2:	443a      	add	r2, r7
  4062f4:	2b07      	cmp	r3, #7
  4062f6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4062fa:	9227      	str	r2, [sp, #156]	; 0x9c
  4062fc:	9326      	str	r3, [sp, #152]	; 0x98
  4062fe:	f108 0808 	add.w	r8, r8, #8
  406302:	f77f ae5c 	ble.w	405fbe <_svfprintf_r+0xfe2>
  406306:	aa25      	add	r2, sp, #148	; 0x94
  406308:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40630a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40630c:	f003 fe00 	bl	409f10 <__ssprint_r>
  406310:	2800      	cmp	r0, #0
  406312:	f47e af35 	bne.w	405180 <_svfprintf_r+0x1a4>
  406316:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406318:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40631a:	46c8      	mov	r8, r9
  40631c:	e64f      	b.n	405fbe <_svfprintf_r+0xfe2>
  40631e:	3330      	adds	r3, #48	; 0x30
  406320:	2230      	movs	r2, #48	; 0x30
  406322:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  406326:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40632a:	ab22      	add	r3, sp, #136	; 0x88
  40632c:	e70f      	b.n	40614e <_svfprintf_r+0x1172>
  40632e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406330:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406332:	4413      	add	r3, r2
  406334:	930e      	str	r3, [sp, #56]	; 0x38
  406336:	e775      	b.n	406224 <_svfprintf_r+0x1248>
  406338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40633a:	e5cb      	b.n	405ed4 <_svfprintf_r+0xef8>
  40633c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40633e:	4e1d      	ldr	r6, [pc, #116]	; (4063b4 <_svfprintf_r+0x13d8>)
  406340:	2b00      	cmp	r3, #0
  406342:	bfb6      	itet	lt
  406344:	272d      	movlt	r7, #45	; 0x2d
  406346:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40634a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40634e:	4b1a      	ldr	r3, [pc, #104]	; (4063b8 <_svfprintf_r+0x13dc>)
  406350:	f7ff ba2f 	b.w	4057b2 <_svfprintf_r+0x7d6>
  406354:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406356:	9808      	ldr	r0, [sp, #32]
  406358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40635a:	4639      	mov	r1, r7
  40635c:	f7fd ffe4 	bl	404328 <__aeabi_dcmpeq>
  406360:	2800      	cmp	r0, #0
  406362:	f47f ae7f 	bne.w	406064 <_svfprintf_r+0x1088>
  406366:	f1c5 0501 	rsb	r5, r5, #1
  40636a:	951f      	str	r5, [sp, #124]	; 0x7c
  40636c:	442c      	add	r4, r5
  40636e:	e59e      	b.n	405eae <_svfprintf_r+0xed2>
  406370:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406372:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406374:	4413      	add	r3, r2
  406376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406378:	441a      	add	r2, r3
  40637a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40637e:	920e      	str	r2, [sp, #56]	; 0x38
  406380:	9308      	str	r3, [sp, #32]
  406382:	e5c7      	b.n	405f14 <_svfprintf_r+0xf38>
  406384:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406388:	f1c3 0301 	rsb	r3, r3, #1
  40638c:	441a      	add	r2, r3
  40638e:	4613      	mov	r3, r2
  406390:	e7d0      	b.n	406334 <_svfprintf_r+0x1358>
  406392:	f01b 0301 	ands.w	r3, fp, #1
  406396:	9312      	str	r3, [sp, #72]	; 0x48
  406398:	f47f aee2 	bne.w	406160 <_svfprintf_r+0x1184>
  40639c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40639e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4063a2:	9308      	str	r3, [sp, #32]
  4063a4:	e5b6      	b.n	405f14 <_svfprintf_r+0xf38>
  4063a6:	bf00      	nop
  4063a8:	66666667 	.word	0x66666667
  4063ac:	0040ad30 	.word	0x0040ad30
  4063b0:	0040ad4c 	.word	0x0040ad4c
  4063b4:	0040ad04 	.word	0x0040ad04
  4063b8:	0040ad00 	.word	0x0040ad00
  4063bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4063be:	b913      	cbnz	r3, 4063c6 <_svfprintf_r+0x13ea>
  4063c0:	f01b 0f01 	tst.w	fp, #1
  4063c4:	d002      	beq.n	4063cc <_svfprintf_r+0x13f0>
  4063c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4063c8:	3301      	adds	r3, #1
  4063ca:	e7d4      	b.n	406376 <_svfprintf_r+0x139a>
  4063cc:	2301      	movs	r3, #1
  4063ce:	e73a      	b.n	406246 <_svfprintf_r+0x126a>
  4063d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4063d2:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4063d6:	6828      	ldr	r0, [r5, #0]
  4063d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4063dc:	900a      	str	r0, [sp, #40]	; 0x28
  4063de:	4628      	mov	r0, r5
  4063e0:	3004      	adds	r0, #4
  4063e2:	46a2      	mov	sl, r4
  4063e4:	900f      	str	r0, [sp, #60]	; 0x3c
  4063e6:	f7fe be51 	b.w	40508c <_svfprintf_r+0xb0>
  4063ea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4063ee:	f7ff b867 	b.w	4054c0 <_svfprintf_r+0x4e4>
  4063f2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4063f6:	f7ff ba15 	b.w	405824 <_svfprintf_r+0x848>
  4063fa:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4063fe:	e6a6      	b.n	40614e <_svfprintf_r+0x1172>
  406400:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406404:	f7ff b8eb 	b.w	4055de <_svfprintf_r+0x602>
  406408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40640a:	230c      	movs	r3, #12
  40640c:	6013      	str	r3, [r2, #0]
  40640e:	f04f 33ff 	mov.w	r3, #4294967295
  406412:	9309      	str	r3, [sp, #36]	; 0x24
  406414:	f7fe bebd 	b.w	405192 <_svfprintf_r+0x1b6>
  406418:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40641c:	f7ff b99a 	b.w	405754 <_svfprintf_r+0x778>
  406420:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406424:	f7ff b976 	b.w	405714 <_svfprintf_r+0x738>
  406428:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40642c:	f7ff b959 	b.w	4056e2 <_svfprintf_r+0x706>
  406430:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406434:	f7ff b912 	b.w	40565c <_svfprintf_r+0x680>

00406438 <_vfprintf_r>:
  406438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40643c:	b0c1      	sub	sp, #260	; 0x104
  40643e:	461d      	mov	r5, r3
  406440:	468a      	mov	sl, r1
  406442:	4691      	mov	r9, r2
  406444:	4604      	mov	r4, r0
  406446:	9008      	str	r0, [sp, #32]
  406448:	f002 ff3a 	bl	4092c0 <_localeconv_r>
  40644c:	6803      	ldr	r3, [r0, #0]
  40644e:	9315      	str	r3, [sp, #84]	; 0x54
  406450:	4618      	mov	r0, r3
  406452:	f7fe fd55 	bl	404f00 <strlen>
  406456:	950e      	str	r5, [sp, #56]	; 0x38
  406458:	9014      	str	r0, [sp, #80]	; 0x50
  40645a:	b11c      	cbz	r4, 406464 <_vfprintf_r+0x2c>
  40645c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40645e:	2b00      	cmp	r3, #0
  406460:	f000 825f 	beq.w	406922 <_vfprintf_r+0x4ea>
  406464:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406468:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  40646c:	f013 0f01 	tst.w	r3, #1
  406470:	b293      	uxth	r3, r2
  406472:	d102      	bne.n	40647a <_vfprintf_r+0x42>
  406474:	0599      	lsls	r1, r3, #22
  406476:	f140 8275 	bpl.w	406964 <_vfprintf_r+0x52c>
  40647a:	049f      	lsls	r7, r3, #18
  40647c:	d40a      	bmi.n	406494 <_vfprintf_r+0x5c>
  40647e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  406482:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  406486:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40648a:	f8aa 300c 	strh.w	r3, [sl, #12]
  40648e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  406492:	b29b      	uxth	r3, r3
  406494:	071e      	lsls	r6, r3, #28
  406496:	f140 8223 	bpl.w	4068e0 <_vfprintf_r+0x4a8>
  40649a:	f8da 2010 	ldr.w	r2, [sl, #16]
  40649e:	2a00      	cmp	r2, #0
  4064a0:	f000 821e 	beq.w	4068e0 <_vfprintf_r+0x4a8>
  4064a4:	f003 021a 	and.w	r2, r3, #26
  4064a8:	2a0a      	cmp	r2, #10
  4064aa:	f000 823e 	beq.w	40692a <_vfprintf_r+0x4f2>
  4064ae:	2300      	movs	r3, #0
  4064b0:	4618      	mov	r0, r3
  4064b2:	9311      	str	r3, [sp, #68]	; 0x44
  4064b4:	9313      	str	r3, [sp, #76]	; 0x4c
  4064b6:	9312      	str	r3, [sp, #72]	; 0x48
  4064b8:	9325      	str	r3, [sp, #148]	; 0x94
  4064ba:	9324      	str	r3, [sp, #144]	; 0x90
  4064bc:	9318      	str	r3, [sp, #96]	; 0x60
  4064be:	9319      	str	r3, [sp, #100]	; 0x64
  4064c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4064c2:	ab30      	add	r3, sp, #192	; 0xc0
  4064c4:	9323      	str	r3, [sp, #140]	; 0x8c
  4064c6:	4698      	mov	r8, r3
  4064c8:	9016      	str	r0, [sp, #88]	; 0x58
  4064ca:	9017      	str	r0, [sp, #92]	; 0x5c
  4064cc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4064d0:	f899 3000 	ldrb.w	r3, [r9]
  4064d4:	464c      	mov	r4, r9
  4064d6:	b1eb      	cbz	r3, 406514 <_vfprintf_r+0xdc>
  4064d8:	2b25      	cmp	r3, #37	; 0x25
  4064da:	d102      	bne.n	4064e2 <_vfprintf_r+0xaa>
  4064dc:	e01a      	b.n	406514 <_vfprintf_r+0xdc>
  4064de:	2b25      	cmp	r3, #37	; 0x25
  4064e0:	d003      	beq.n	4064ea <_vfprintf_r+0xb2>
  4064e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4064e6:	2b00      	cmp	r3, #0
  4064e8:	d1f9      	bne.n	4064de <_vfprintf_r+0xa6>
  4064ea:	eba4 0509 	sub.w	r5, r4, r9
  4064ee:	b18d      	cbz	r5, 406514 <_vfprintf_r+0xdc>
  4064f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4064f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4064f4:	f8c8 9000 	str.w	r9, [r8]
  4064f8:	3301      	adds	r3, #1
  4064fa:	442a      	add	r2, r5
  4064fc:	2b07      	cmp	r3, #7
  4064fe:	f8c8 5004 	str.w	r5, [r8, #4]
  406502:	9225      	str	r2, [sp, #148]	; 0x94
  406504:	9324      	str	r3, [sp, #144]	; 0x90
  406506:	f300 8201 	bgt.w	40690c <_vfprintf_r+0x4d4>
  40650a:	f108 0808 	add.w	r8, r8, #8
  40650e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406510:	442b      	add	r3, r5
  406512:	930b      	str	r3, [sp, #44]	; 0x2c
  406514:	7823      	ldrb	r3, [r4, #0]
  406516:	2b00      	cmp	r3, #0
  406518:	f000 83f0 	beq.w	406cfc <_vfprintf_r+0x8c4>
  40651c:	2300      	movs	r3, #0
  40651e:	461a      	mov	r2, r3
  406520:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406524:	4619      	mov	r1, r3
  406526:	930c      	str	r3, [sp, #48]	; 0x30
  406528:	469b      	mov	fp, r3
  40652a:	7866      	ldrb	r6, [r4, #1]
  40652c:	f04f 33ff 	mov.w	r3, #4294967295
  406530:	f104 0901 	add.w	r9, r4, #1
  406534:	9309      	str	r3, [sp, #36]	; 0x24
  406536:	f109 0901 	add.w	r9, r9, #1
  40653a:	f1a6 0320 	sub.w	r3, r6, #32
  40653e:	2b58      	cmp	r3, #88	; 0x58
  406540:	f200 83bf 	bhi.w	406cc2 <_vfprintf_r+0x88a>
  406544:	e8df f013 	tbh	[pc, r3, lsl #1]
  406548:	03bd02e0 	.word	0x03bd02e0
  40654c:	034f03bd 	.word	0x034f03bd
  406550:	03bd03bd 	.word	0x03bd03bd
  406554:	03bd03bd 	.word	0x03bd03bd
  406558:	03bd03bd 	.word	0x03bd03bd
  40655c:	03080354 	.word	0x03080354
  406560:	021a03bd 	.word	0x021a03bd
  406564:	03bd02e8 	.word	0x03bd02e8
  406568:	033a0303 	.word	0x033a0303
  40656c:	033a033a 	.word	0x033a033a
  406570:	033a033a 	.word	0x033a033a
  406574:	033a033a 	.word	0x033a033a
  406578:	033a033a 	.word	0x033a033a
  40657c:	03bd03bd 	.word	0x03bd03bd
  406580:	03bd03bd 	.word	0x03bd03bd
  406584:	03bd03bd 	.word	0x03bd03bd
  406588:	03bd03bd 	.word	0x03bd03bd
  40658c:	03bd03bd 	.word	0x03bd03bd
  406590:	03620349 	.word	0x03620349
  406594:	036203bd 	.word	0x036203bd
  406598:	03bd03bd 	.word	0x03bd03bd
  40659c:	03bd03bd 	.word	0x03bd03bd
  4065a0:	03bd03a2 	.word	0x03bd03a2
  4065a4:	006f03bd 	.word	0x006f03bd
  4065a8:	03bd03bd 	.word	0x03bd03bd
  4065ac:	03bd03bd 	.word	0x03bd03bd
  4065b0:	005903bd 	.word	0x005903bd
  4065b4:	03bd03bd 	.word	0x03bd03bd
  4065b8:	03bd031e 	.word	0x03bd031e
  4065bc:	03bd03bd 	.word	0x03bd03bd
  4065c0:	03bd03bd 	.word	0x03bd03bd
  4065c4:	03bd03bd 	.word	0x03bd03bd
  4065c8:	03bd03bd 	.word	0x03bd03bd
  4065cc:	032403bd 	.word	0x032403bd
  4065d0:	03620273 	.word	0x03620273
  4065d4:	03620362 	.word	0x03620362
  4065d8:	027302b7 	.word	0x027302b7
  4065dc:	03bd03bd 	.word	0x03bd03bd
  4065e0:	03bd02bc 	.word	0x03bd02bc
  4065e4:	007102c9 	.word	0x007102c9
  4065e8:	0247030d 	.word	0x0247030d
  4065ec:	025203bd 	.word	0x025203bd
  4065f0:	005b03bd 	.word	0x005b03bd
  4065f4:	03bd03bd 	.word	0x03bd03bd
  4065f8:	021f      	.short	0x021f
  4065fa:	f04b 0b10 	orr.w	fp, fp, #16
  4065fe:	f01b 0f20 	tst.w	fp, #32
  406602:	f040 8353 	bne.w	406cac <_vfprintf_r+0x874>
  406606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406608:	f01b 0f10 	tst.w	fp, #16
  40660c:	4613      	mov	r3, r2
  40660e:	f040 85b4 	bne.w	40717a <_vfprintf_r+0xd42>
  406612:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406616:	f000 85b0 	beq.w	40717a <_vfprintf_r+0xd42>
  40661a:	8814      	ldrh	r4, [r2, #0]
  40661c:	3204      	adds	r2, #4
  40661e:	2500      	movs	r5, #0
  406620:	2301      	movs	r3, #1
  406622:	920e      	str	r2, [sp, #56]	; 0x38
  406624:	e014      	b.n	406650 <_vfprintf_r+0x218>
  406626:	f04b 0b10 	orr.w	fp, fp, #16
  40662a:	f01b 0320 	ands.w	r3, fp, #32
  40662e:	f040 8332 	bne.w	406c96 <_vfprintf_r+0x85e>
  406632:	f01b 0210 	ands.w	r2, fp, #16
  406636:	f040 8589 	bne.w	40714c <_vfprintf_r+0xd14>
  40663a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40663e:	f000 8585 	beq.w	40714c <_vfprintf_r+0xd14>
  406642:	990e      	ldr	r1, [sp, #56]	; 0x38
  406644:	4613      	mov	r3, r2
  406646:	460a      	mov	r2, r1
  406648:	3204      	adds	r2, #4
  40664a:	880c      	ldrh	r4, [r1, #0]
  40664c:	920e      	str	r2, [sp, #56]	; 0x38
  40664e:	2500      	movs	r5, #0
  406650:	f04f 0a00 	mov.w	sl, #0
  406654:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406658:	9909      	ldr	r1, [sp, #36]	; 0x24
  40665a:	1c4a      	adds	r2, r1, #1
  40665c:	f000 820b 	beq.w	406a76 <_vfprintf_r+0x63e>
  406660:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406664:	9206      	str	r2, [sp, #24]
  406666:	ea54 0205 	orrs.w	r2, r4, r5
  40666a:	f040 820a 	bne.w	406a82 <_vfprintf_r+0x64a>
  40666e:	2900      	cmp	r1, #0
  406670:	f040 846f 	bne.w	406f52 <_vfprintf_r+0xb1a>
  406674:	2b00      	cmp	r3, #0
  406676:	f040 852d 	bne.w	4070d4 <_vfprintf_r+0xc9c>
  40667a:	f01b 0301 	ands.w	r3, fp, #1
  40667e:	930d      	str	r3, [sp, #52]	; 0x34
  406680:	f000 8668 	beq.w	407354 <_vfprintf_r+0xf1c>
  406684:	af40      	add	r7, sp, #256	; 0x100
  406686:	2330      	movs	r3, #48	; 0x30
  406688:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40668c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40668e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406690:	4293      	cmp	r3, r2
  406692:	bfb8      	it	lt
  406694:	4613      	movlt	r3, r2
  406696:	9307      	str	r3, [sp, #28]
  406698:	2300      	movs	r3, #0
  40669a:	9310      	str	r3, [sp, #64]	; 0x40
  40669c:	f1ba 0f00 	cmp.w	sl, #0
  4066a0:	d002      	beq.n	4066a8 <_vfprintf_r+0x270>
  4066a2:	9b07      	ldr	r3, [sp, #28]
  4066a4:	3301      	adds	r3, #1
  4066a6:	9307      	str	r3, [sp, #28]
  4066a8:	9b06      	ldr	r3, [sp, #24]
  4066aa:	f013 0302 	ands.w	r3, r3, #2
  4066ae:	930f      	str	r3, [sp, #60]	; 0x3c
  4066b0:	d002      	beq.n	4066b8 <_vfprintf_r+0x280>
  4066b2:	9b07      	ldr	r3, [sp, #28]
  4066b4:	3302      	adds	r3, #2
  4066b6:	9307      	str	r3, [sp, #28]
  4066b8:	9b06      	ldr	r3, [sp, #24]
  4066ba:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4066be:	f040 831b 	bne.w	406cf8 <_vfprintf_r+0x8c0>
  4066c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4066c4:	9a07      	ldr	r2, [sp, #28]
  4066c6:	eba3 0b02 	sub.w	fp, r3, r2
  4066ca:	f1bb 0f00 	cmp.w	fp, #0
  4066ce:	f340 8313 	ble.w	406cf8 <_vfprintf_r+0x8c0>
  4066d2:	f1bb 0f10 	cmp.w	fp, #16
  4066d6:	9925      	ldr	r1, [sp, #148]	; 0x94
  4066d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4066da:	dd28      	ble.n	40672e <_vfprintf_r+0x2f6>
  4066dc:	4643      	mov	r3, r8
  4066de:	2410      	movs	r4, #16
  4066e0:	46a8      	mov	r8, r5
  4066e2:	f8dd a020 	ldr.w	sl, [sp, #32]
  4066e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4066e8:	e006      	b.n	4066f8 <_vfprintf_r+0x2c0>
  4066ea:	f1ab 0b10 	sub.w	fp, fp, #16
  4066ee:	f1bb 0f10 	cmp.w	fp, #16
  4066f2:	f103 0308 	add.w	r3, r3, #8
  4066f6:	dd18      	ble.n	40672a <_vfprintf_r+0x2f2>
  4066f8:	3201      	adds	r2, #1
  4066fa:	48b9      	ldr	r0, [pc, #740]	; (4069e0 <_vfprintf_r+0x5a8>)
  4066fc:	9224      	str	r2, [sp, #144]	; 0x90
  4066fe:	3110      	adds	r1, #16
  406700:	2a07      	cmp	r2, #7
  406702:	9125      	str	r1, [sp, #148]	; 0x94
  406704:	e883 0011 	stmia.w	r3, {r0, r4}
  406708:	ddef      	ble.n	4066ea <_vfprintf_r+0x2b2>
  40670a:	aa23      	add	r2, sp, #140	; 0x8c
  40670c:	4629      	mov	r1, r5
  40670e:	4650      	mov	r0, sl
  406710:	f003 fcbc 	bl	40a08c <__sprint_r>
  406714:	2800      	cmp	r0, #0
  406716:	f040 836a 	bne.w	406dee <_vfprintf_r+0x9b6>
  40671a:	f1ab 0b10 	sub.w	fp, fp, #16
  40671e:	f1bb 0f10 	cmp.w	fp, #16
  406722:	9925      	ldr	r1, [sp, #148]	; 0x94
  406724:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406726:	ab30      	add	r3, sp, #192	; 0xc0
  406728:	dce6      	bgt.n	4066f8 <_vfprintf_r+0x2c0>
  40672a:	4645      	mov	r5, r8
  40672c:	4698      	mov	r8, r3
  40672e:	3201      	adds	r2, #1
  406730:	4bab      	ldr	r3, [pc, #684]	; (4069e0 <_vfprintf_r+0x5a8>)
  406732:	9224      	str	r2, [sp, #144]	; 0x90
  406734:	eb0b 0401 	add.w	r4, fp, r1
  406738:	2a07      	cmp	r2, #7
  40673a:	9425      	str	r4, [sp, #148]	; 0x94
  40673c:	e888 0808 	stmia.w	r8, {r3, fp}
  406740:	f300 84cd 	bgt.w	4070de <_vfprintf_r+0xca6>
  406744:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406748:	f108 0808 	add.w	r8, r8, #8
  40674c:	f1ba 0f00 	cmp.w	sl, #0
  406750:	d00e      	beq.n	406770 <_vfprintf_r+0x338>
  406752:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406754:	3301      	adds	r3, #1
  406756:	3401      	adds	r4, #1
  406758:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40675c:	2201      	movs	r2, #1
  40675e:	2b07      	cmp	r3, #7
  406760:	9425      	str	r4, [sp, #148]	; 0x94
  406762:	9324      	str	r3, [sp, #144]	; 0x90
  406764:	e888 0006 	stmia.w	r8, {r1, r2}
  406768:	f300 840a 	bgt.w	406f80 <_vfprintf_r+0xb48>
  40676c:	f108 0808 	add.w	r8, r8, #8
  406770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406772:	b16b      	cbz	r3, 406790 <_vfprintf_r+0x358>
  406774:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406776:	3301      	adds	r3, #1
  406778:	3402      	adds	r4, #2
  40677a:	a91c      	add	r1, sp, #112	; 0x70
  40677c:	2202      	movs	r2, #2
  40677e:	2b07      	cmp	r3, #7
  406780:	9425      	str	r4, [sp, #148]	; 0x94
  406782:	9324      	str	r3, [sp, #144]	; 0x90
  406784:	e888 0006 	stmia.w	r8, {r1, r2}
  406788:	f300 8406 	bgt.w	406f98 <_vfprintf_r+0xb60>
  40678c:	f108 0808 	add.w	r8, r8, #8
  406790:	2d80      	cmp	r5, #128	; 0x80
  406792:	f000 832e 	beq.w	406df2 <_vfprintf_r+0x9ba>
  406796:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40679a:	eba3 0a02 	sub.w	sl, r3, r2
  40679e:	f1ba 0f00 	cmp.w	sl, #0
  4067a2:	dd3b      	ble.n	40681c <_vfprintf_r+0x3e4>
  4067a4:	f1ba 0f10 	cmp.w	sl, #16
  4067a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067aa:	4d8e      	ldr	r5, [pc, #568]	; (4069e4 <_vfprintf_r+0x5ac>)
  4067ac:	dd2b      	ble.n	406806 <_vfprintf_r+0x3ce>
  4067ae:	4642      	mov	r2, r8
  4067b0:	4621      	mov	r1, r4
  4067b2:	46b0      	mov	r8, r6
  4067b4:	f04f 0b10 	mov.w	fp, #16
  4067b8:	462e      	mov	r6, r5
  4067ba:	9c08      	ldr	r4, [sp, #32]
  4067bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4067be:	e006      	b.n	4067ce <_vfprintf_r+0x396>
  4067c0:	f1aa 0a10 	sub.w	sl, sl, #16
  4067c4:	f1ba 0f10 	cmp.w	sl, #16
  4067c8:	f102 0208 	add.w	r2, r2, #8
  4067cc:	dd17      	ble.n	4067fe <_vfprintf_r+0x3c6>
  4067ce:	3301      	adds	r3, #1
  4067d0:	3110      	adds	r1, #16
  4067d2:	2b07      	cmp	r3, #7
  4067d4:	9125      	str	r1, [sp, #148]	; 0x94
  4067d6:	9324      	str	r3, [sp, #144]	; 0x90
  4067d8:	e882 0840 	stmia.w	r2, {r6, fp}
  4067dc:	ddf0      	ble.n	4067c0 <_vfprintf_r+0x388>
  4067de:	aa23      	add	r2, sp, #140	; 0x8c
  4067e0:	4629      	mov	r1, r5
  4067e2:	4620      	mov	r0, r4
  4067e4:	f003 fc52 	bl	40a08c <__sprint_r>
  4067e8:	2800      	cmp	r0, #0
  4067ea:	f040 8300 	bne.w	406dee <_vfprintf_r+0x9b6>
  4067ee:	f1aa 0a10 	sub.w	sl, sl, #16
  4067f2:	f1ba 0f10 	cmp.w	sl, #16
  4067f6:	9925      	ldr	r1, [sp, #148]	; 0x94
  4067f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067fa:	aa30      	add	r2, sp, #192	; 0xc0
  4067fc:	dce7      	bgt.n	4067ce <_vfprintf_r+0x396>
  4067fe:	4635      	mov	r5, r6
  406800:	460c      	mov	r4, r1
  406802:	4646      	mov	r6, r8
  406804:	4690      	mov	r8, r2
  406806:	3301      	adds	r3, #1
  406808:	4454      	add	r4, sl
  40680a:	2b07      	cmp	r3, #7
  40680c:	9425      	str	r4, [sp, #148]	; 0x94
  40680e:	9324      	str	r3, [sp, #144]	; 0x90
  406810:	e888 0420 	stmia.w	r8, {r5, sl}
  406814:	f300 83a9 	bgt.w	406f6a <_vfprintf_r+0xb32>
  406818:	f108 0808 	add.w	r8, r8, #8
  40681c:	9b06      	ldr	r3, [sp, #24]
  40681e:	05db      	lsls	r3, r3, #23
  406820:	f100 8285 	bmi.w	406d2e <_vfprintf_r+0x8f6>
  406824:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406826:	990d      	ldr	r1, [sp, #52]	; 0x34
  406828:	f8c8 7000 	str.w	r7, [r8]
  40682c:	3301      	adds	r3, #1
  40682e:	440c      	add	r4, r1
  406830:	2b07      	cmp	r3, #7
  406832:	9425      	str	r4, [sp, #148]	; 0x94
  406834:	f8c8 1004 	str.w	r1, [r8, #4]
  406838:	9324      	str	r3, [sp, #144]	; 0x90
  40683a:	f300 8375 	bgt.w	406f28 <_vfprintf_r+0xaf0>
  40683e:	f108 0808 	add.w	r8, r8, #8
  406842:	9b06      	ldr	r3, [sp, #24]
  406844:	0759      	lsls	r1, r3, #29
  406846:	d53b      	bpl.n	4068c0 <_vfprintf_r+0x488>
  406848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40684a:	9a07      	ldr	r2, [sp, #28]
  40684c:	1a9d      	subs	r5, r3, r2
  40684e:	2d00      	cmp	r5, #0
  406850:	dd36      	ble.n	4068c0 <_vfprintf_r+0x488>
  406852:	2d10      	cmp	r5, #16
  406854:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406856:	dd21      	ble.n	40689c <_vfprintf_r+0x464>
  406858:	2610      	movs	r6, #16
  40685a:	9f08      	ldr	r7, [sp, #32]
  40685c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406860:	e004      	b.n	40686c <_vfprintf_r+0x434>
  406862:	3d10      	subs	r5, #16
  406864:	2d10      	cmp	r5, #16
  406866:	f108 0808 	add.w	r8, r8, #8
  40686a:	dd17      	ble.n	40689c <_vfprintf_r+0x464>
  40686c:	3301      	adds	r3, #1
  40686e:	4a5c      	ldr	r2, [pc, #368]	; (4069e0 <_vfprintf_r+0x5a8>)
  406870:	9324      	str	r3, [sp, #144]	; 0x90
  406872:	3410      	adds	r4, #16
  406874:	2b07      	cmp	r3, #7
  406876:	9425      	str	r4, [sp, #148]	; 0x94
  406878:	e888 0044 	stmia.w	r8, {r2, r6}
  40687c:	ddf1      	ble.n	406862 <_vfprintf_r+0x42a>
  40687e:	aa23      	add	r2, sp, #140	; 0x8c
  406880:	4651      	mov	r1, sl
  406882:	4638      	mov	r0, r7
  406884:	f003 fc02 	bl	40a08c <__sprint_r>
  406888:	2800      	cmp	r0, #0
  40688a:	f040 823f 	bne.w	406d0c <_vfprintf_r+0x8d4>
  40688e:	3d10      	subs	r5, #16
  406890:	2d10      	cmp	r5, #16
  406892:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406894:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406896:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40689a:	dce7      	bgt.n	40686c <_vfprintf_r+0x434>
  40689c:	3301      	adds	r3, #1
  40689e:	4a50      	ldr	r2, [pc, #320]	; (4069e0 <_vfprintf_r+0x5a8>)
  4068a0:	9324      	str	r3, [sp, #144]	; 0x90
  4068a2:	442c      	add	r4, r5
  4068a4:	2b07      	cmp	r3, #7
  4068a6:	9425      	str	r4, [sp, #148]	; 0x94
  4068a8:	e888 0024 	stmia.w	r8, {r2, r5}
  4068ac:	dd08      	ble.n	4068c0 <_vfprintf_r+0x488>
  4068ae:	aa23      	add	r2, sp, #140	; 0x8c
  4068b0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4068b2:	9808      	ldr	r0, [sp, #32]
  4068b4:	f003 fbea 	bl	40a08c <__sprint_r>
  4068b8:	2800      	cmp	r0, #0
  4068ba:	f040 8347 	bne.w	406f4c <_vfprintf_r+0xb14>
  4068be:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4068c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4068c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4068c4:	9907      	ldr	r1, [sp, #28]
  4068c6:	428a      	cmp	r2, r1
  4068c8:	bfac      	ite	ge
  4068ca:	189b      	addge	r3, r3, r2
  4068cc:	185b      	addlt	r3, r3, r1
  4068ce:	930b      	str	r3, [sp, #44]	; 0x2c
  4068d0:	2c00      	cmp	r4, #0
  4068d2:	f040 8333 	bne.w	406f3c <_vfprintf_r+0xb04>
  4068d6:	2300      	movs	r3, #0
  4068d8:	9324      	str	r3, [sp, #144]	; 0x90
  4068da:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4068de:	e5f7      	b.n	4064d0 <_vfprintf_r+0x98>
  4068e0:	4651      	mov	r1, sl
  4068e2:	9808      	ldr	r0, [sp, #32]
  4068e4:	f001 f896 	bl	407a14 <__swsetup_r>
  4068e8:	2800      	cmp	r0, #0
  4068ea:	d038      	beq.n	40695e <_vfprintf_r+0x526>
  4068ec:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4068f0:	07dd      	lsls	r5, r3, #31
  4068f2:	d404      	bmi.n	4068fe <_vfprintf_r+0x4c6>
  4068f4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4068f8:	059c      	lsls	r4, r3, #22
  4068fa:	f140 85ca 	bpl.w	407492 <_vfprintf_r+0x105a>
  4068fe:	f04f 33ff 	mov.w	r3, #4294967295
  406902:	930b      	str	r3, [sp, #44]	; 0x2c
  406904:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406906:	b041      	add	sp, #260	; 0x104
  406908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40690c:	aa23      	add	r2, sp, #140	; 0x8c
  40690e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406910:	9808      	ldr	r0, [sp, #32]
  406912:	f003 fbbb 	bl	40a08c <__sprint_r>
  406916:	2800      	cmp	r0, #0
  406918:	f040 8318 	bne.w	406f4c <_vfprintf_r+0xb14>
  40691c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406920:	e5f5      	b.n	40650e <_vfprintf_r+0xd6>
  406922:	9808      	ldr	r0, [sp, #32]
  406924:	f002 f9a2 	bl	408c6c <__sinit>
  406928:	e59c      	b.n	406464 <_vfprintf_r+0x2c>
  40692a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  40692e:	2a00      	cmp	r2, #0
  406930:	f6ff adbd 	blt.w	4064ae <_vfprintf_r+0x76>
  406934:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  406938:	07d0      	lsls	r0, r2, #31
  40693a:	d405      	bmi.n	406948 <_vfprintf_r+0x510>
  40693c:	0599      	lsls	r1, r3, #22
  40693e:	d403      	bmi.n	406948 <_vfprintf_r+0x510>
  406940:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406944:	f002 fcd0 	bl	4092e8 <__retarget_lock_release_recursive>
  406948:	462b      	mov	r3, r5
  40694a:	464a      	mov	r2, r9
  40694c:	4651      	mov	r1, sl
  40694e:	9808      	ldr	r0, [sp, #32]
  406950:	f001 f81e 	bl	407990 <__sbprintf>
  406954:	900b      	str	r0, [sp, #44]	; 0x2c
  406956:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406958:	b041      	add	sp, #260	; 0x104
  40695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40695e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406962:	e59f      	b.n	4064a4 <_vfprintf_r+0x6c>
  406964:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406968:	f002 fcbc 	bl	4092e4 <__retarget_lock_acquire_recursive>
  40696c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  406970:	b293      	uxth	r3, r2
  406972:	e582      	b.n	40647a <_vfprintf_r+0x42>
  406974:	980c      	ldr	r0, [sp, #48]	; 0x30
  406976:	930e      	str	r3, [sp, #56]	; 0x38
  406978:	4240      	negs	r0, r0
  40697a:	900c      	str	r0, [sp, #48]	; 0x30
  40697c:	f04b 0b04 	orr.w	fp, fp, #4
  406980:	f899 6000 	ldrb.w	r6, [r9]
  406984:	e5d7      	b.n	406536 <_vfprintf_r+0xfe>
  406986:	2a00      	cmp	r2, #0
  406988:	f040 87df 	bne.w	40794a <_vfprintf_r+0x1512>
  40698c:	4b16      	ldr	r3, [pc, #88]	; (4069e8 <_vfprintf_r+0x5b0>)
  40698e:	9318      	str	r3, [sp, #96]	; 0x60
  406990:	f01b 0f20 	tst.w	fp, #32
  406994:	f040 84b9 	bne.w	40730a <_vfprintf_r+0xed2>
  406998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40699a:	f01b 0f10 	tst.w	fp, #16
  40699e:	4613      	mov	r3, r2
  4069a0:	f040 83dc 	bne.w	40715c <_vfprintf_r+0xd24>
  4069a4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4069a8:	f000 83d8 	beq.w	40715c <_vfprintf_r+0xd24>
  4069ac:	3304      	adds	r3, #4
  4069ae:	8814      	ldrh	r4, [r2, #0]
  4069b0:	930e      	str	r3, [sp, #56]	; 0x38
  4069b2:	2500      	movs	r5, #0
  4069b4:	f01b 0f01 	tst.w	fp, #1
  4069b8:	f000 8322 	beq.w	407000 <_vfprintf_r+0xbc8>
  4069bc:	ea54 0305 	orrs.w	r3, r4, r5
  4069c0:	f000 831e 	beq.w	407000 <_vfprintf_r+0xbc8>
  4069c4:	2330      	movs	r3, #48	; 0x30
  4069c6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4069ca:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4069ce:	f04b 0b02 	orr.w	fp, fp, #2
  4069d2:	2302      	movs	r3, #2
  4069d4:	e63c      	b.n	406650 <_vfprintf_r+0x218>
  4069d6:	f04b 0b20 	orr.w	fp, fp, #32
  4069da:	f899 6000 	ldrb.w	r6, [r9]
  4069de:	e5aa      	b.n	406536 <_vfprintf_r+0xfe>
  4069e0:	0040ad5c 	.word	0x0040ad5c
  4069e4:	0040ad6c 	.word	0x0040ad6c
  4069e8:	0040ad1c 	.word	0x0040ad1c
  4069ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4069ee:	6817      	ldr	r7, [r2, #0]
  4069f0:	2400      	movs	r4, #0
  4069f2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4069f6:	1d15      	adds	r5, r2, #4
  4069f8:	2f00      	cmp	r7, #0
  4069fa:	f000 864e 	beq.w	40769a <_vfprintf_r+0x1262>
  4069fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406a00:	1c53      	adds	r3, r2, #1
  406a02:	f000 85cc 	beq.w	40759e <_vfprintf_r+0x1166>
  406a06:	4621      	mov	r1, r4
  406a08:	4638      	mov	r0, r7
  406a0a:	f002 fce9 	bl	4093e0 <memchr>
  406a0e:	2800      	cmp	r0, #0
  406a10:	f000 8697 	beq.w	407742 <_vfprintf_r+0x130a>
  406a14:	1bc3      	subs	r3, r0, r7
  406a16:	930d      	str	r3, [sp, #52]	; 0x34
  406a18:	9409      	str	r4, [sp, #36]	; 0x24
  406a1a:	950e      	str	r5, [sp, #56]	; 0x38
  406a1c:	f8cd b018 	str.w	fp, [sp, #24]
  406a20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406a24:	9307      	str	r3, [sp, #28]
  406a26:	9410      	str	r4, [sp, #64]	; 0x40
  406a28:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406a2c:	e636      	b.n	40669c <_vfprintf_r+0x264>
  406a2e:	2a00      	cmp	r2, #0
  406a30:	f040 8796 	bne.w	407960 <_vfprintf_r+0x1528>
  406a34:	f01b 0f20 	tst.w	fp, #32
  406a38:	f040 845a 	bne.w	4072f0 <_vfprintf_r+0xeb8>
  406a3c:	f01b 0f10 	tst.w	fp, #16
  406a40:	f040 83a2 	bne.w	407188 <_vfprintf_r+0xd50>
  406a44:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406a48:	f000 839e 	beq.w	407188 <_vfprintf_r+0xd50>
  406a4c:	990e      	ldr	r1, [sp, #56]	; 0x38
  406a4e:	f9b1 4000 	ldrsh.w	r4, [r1]
  406a52:	3104      	adds	r1, #4
  406a54:	17e5      	asrs	r5, r4, #31
  406a56:	4622      	mov	r2, r4
  406a58:	462b      	mov	r3, r5
  406a5a:	910e      	str	r1, [sp, #56]	; 0x38
  406a5c:	2a00      	cmp	r2, #0
  406a5e:	f173 0300 	sbcs.w	r3, r3, #0
  406a62:	f2c0 8487 	blt.w	407374 <_vfprintf_r+0xf3c>
  406a66:	9909      	ldr	r1, [sp, #36]	; 0x24
  406a68:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406a6c:	1c4a      	adds	r2, r1, #1
  406a6e:	f04f 0301 	mov.w	r3, #1
  406a72:	f47f adf5 	bne.w	406660 <_vfprintf_r+0x228>
  406a76:	ea54 0205 	orrs.w	r2, r4, r5
  406a7a:	f000 826c 	beq.w	406f56 <_vfprintf_r+0xb1e>
  406a7e:	f8cd b018 	str.w	fp, [sp, #24]
  406a82:	2b01      	cmp	r3, #1
  406a84:	f000 8308 	beq.w	407098 <_vfprintf_r+0xc60>
  406a88:	2b02      	cmp	r3, #2
  406a8a:	f040 8295 	bne.w	406fb8 <_vfprintf_r+0xb80>
  406a8e:	9818      	ldr	r0, [sp, #96]	; 0x60
  406a90:	af30      	add	r7, sp, #192	; 0xc0
  406a92:	0923      	lsrs	r3, r4, #4
  406a94:	f004 010f 	and.w	r1, r4, #15
  406a98:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406a9c:	092a      	lsrs	r2, r5, #4
  406a9e:	461c      	mov	r4, r3
  406aa0:	4615      	mov	r5, r2
  406aa2:	5c43      	ldrb	r3, [r0, r1]
  406aa4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406aa8:	ea54 0305 	orrs.w	r3, r4, r5
  406aac:	d1f1      	bne.n	406a92 <_vfprintf_r+0x65a>
  406aae:	ab30      	add	r3, sp, #192	; 0xc0
  406ab0:	1bdb      	subs	r3, r3, r7
  406ab2:	930d      	str	r3, [sp, #52]	; 0x34
  406ab4:	e5ea      	b.n	40668c <_vfprintf_r+0x254>
  406ab6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406aba:	f899 6000 	ldrb.w	r6, [r9]
  406abe:	e53a      	b.n	406536 <_vfprintf_r+0xfe>
  406ac0:	f899 6000 	ldrb.w	r6, [r9]
  406ac4:	2e6c      	cmp	r6, #108	; 0x6c
  406ac6:	bf03      	ittte	eq
  406ac8:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  406acc:	f04b 0b20 	orreq.w	fp, fp, #32
  406ad0:	f109 0901 	addeq.w	r9, r9, #1
  406ad4:	f04b 0b10 	orrne.w	fp, fp, #16
  406ad8:	e52d      	b.n	406536 <_vfprintf_r+0xfe>
  406ada:	2a00      	cmp	r2, #0
  406adc:	f040 874c 	bne.w	407978 <_vfprintf_r+0x1540>
  406ae0:	f01b 0f20 	tst.w	fp, #32
  406ae4:	f040 853f 	bne.w	407566 <_vfprintf_r+0x112e>
  406ae8:	f01b 0f10 	tst.w	fp, #16
  406aec:	f040 80fc 	bne.w	406ce8 <_vfprintf_r+0x8b0>
  406af0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406af4:	f000 80f8 	beq.w	406ce8 <_vfprintf_r+0x8b0>
  406af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406afa:	6813      	ldr	r3, [r2, #0]
  406afc:	3204      	adds	r2, #4
  406afe:	920e      	str	r2, [sp, #56]	; 0x38
  406b00:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  406b04:	801a      	strh	r2, [r3, #0]
  406b06:	e4e3      	b.n	4064d0 <_vfprintf_r+0x98>
  406b08:	f899 6000 	ldrb.w	r6, [r9]
  406b0c:	2900      	cmp	r1, #0
  406b0e:	f47f ad12 	bne.w	406536 <_vfprintf_r+0xfe>
  406b12:	2201      	movs	r2, #1
  406b14:	2120      	movs	r1, #32
  406b16:	e50e      	b.n	406536 <_vfprintf_r+0xfe>
  406b18:	f899 6000 	ldrb.w	r6, [r9]
  406b1c:	2e2a      	cmp	r6, #42	; 0x2a
  406b1e:	f109 0001 	add.w	r0, r9, #1
  406b22:	f000 86f1 	beq.w	407908 <_vfprintf_r+0x14d0>
  406b26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406b2a:	2b09      	cmp	r3, #9
  406b2c:	4681      	mov	r9, r0
  406b2e:	bf98      	it	ls
  406b30:	2000      	movls	r0, #0
  406b32:	f200 863d 	bhi.w	4077b0 <_vfprintf_r+0x1378>
  406b36:	f819 6b01 	ldrb.w	r6, [r9], #1
  406b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406b3e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406b42:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406b46:	2b09      	cmp	r3, #9
  406b48:	d9f5      	bls.n	406b36 <_vfprintf_r+0x6fe>
  406b4a:	9009      	str	r0, [sp, #36]	; 0x24
  406b4c:	e4f5      	b.n	40653a <_vfprintf_r+0x102>
  406b4e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406b52:	f899 6000 	ldrb.w	r6, [r9]
  406b56:	e4ee      	b.n	406536 <_vfprintf_r+0xfe>
  406b58:	f899 6000 	ldrb.w	r6, [r9]
  406b5c:	2201      	movs	r2, #1
  406b5e:	212b      	movs	r1, #43	; 0x2b
  406b60:	e4e9      	b.n	406536 <_vfprintf_r+0xfe>
  406b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406b64:	4bae      	ldr	r3, [pc, #696]	; (406e20 <_vfprintf_r+0x9e8>)
  406b66:	6814      	ldr	r4, [r2, #0]
  406b68:	9318      	str	r3, [sp, #96]	; 0x60
  406b6a:	2678      	movs	r6, #120	; 0x78
  406b6c:	2330      	movs	r3, #48	; 0x30
  406b6e:	3204      	adds	r2, #4
  406b70:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  406b74:	f04b 0b02 	orr.w	fp, fp, #2
  406b78:	920e      	str	r2, [sp, #56]	; 0x38
  406b7a:	2500      	movs	r5, #0
  406b7c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  406b80:	2302      	movs	r3, #2
  406b82:	e565      	b.n	406650 <_vfprintf_r+0x218>
  406b84:	2a00      	cmp	r2, #0
  406b86:	f040 86e4 	bne.w	407952 <_vfprintf_r+0x151a>
  406b8a:	4ba6      	ldr	r3, [pc, #664]	; (406e24 <_vfprintf_r+0x9ec>)
  406b8c:	9318      	str	r3, [sp, #96]	; 0x60
  406b8e:	e6ff      	b.n	406990 <_vfprintf_r+0x558>
  406b90:	990e      	ldr	r1, [sp, #56]	; 0x38
  406b92:	f8cd b018 	str.w	fp, [sp, #24]
  406b96:	680a      	ldr	r2, [r1, #0]
  406b98:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  406b9c:	2300      	movs	r3, #0
  406b9e:	460a      	mov	r2, r1
  406ba0:	469a      	mov	sl, r3
  406ba2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406ba6:	3204      	adds	r2, #4
  406ba8:	2301      	movs	r3, #1
  406baa:	9307      	str	r3, [sp, #28]
  406bac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  406bb0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  406bb4:	920e      	str	r2, [sp, #56]	; 0x38
  406bb6:	930d      	str	r3, [sp, #52]	; 0x34
  406bb8:	af26      	add	r7, sp, #152	; 0x98
  406bba:	e575      	b.n	4066a8 <_vfprintf_r+0x270>
  406bbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406bc0:	2000      	movs	r0, #0
  406bc2:	f819 6b01 	ldrb.w	r6, [r9], #1
  406bc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406bca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406bce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406bd2:	2b09      	cmp	r3, #9
  406bd4:	d9f5      	bls.n	406bc2 <_vfprintf_r+0x78a>
  406bd6:	900c      	str	r0, [sp, #48]	; 0x30
  406bd8:	e4af      	b.n	40653a <_vfprintf_r+0x102>
  406bda:	2a00      	cmp	r2, #0
  406bdc:	f040 86c8 	bne.w	407970 <_vfprintf_r+0x1538>
  406be0:	f04b 0b10 	orr.w	fp, fp, #16
  406be4:	e726      	b.n	406a34 <_vfprintf_r+0x5fc>
  406be6:	f04b 0b01 	orr.w	fp, fp, #1
  406bea:	f899 6000 	ldrb.w	r6, [r9]
  406bee:	e4a2      	b.n	406536 <_vfprintf_r+0xfe>
  406bf0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406bf2:	6823      	ldr	r3, [r4, #0]
  406bf4:	930c      	str	r3, [sp, #48]	; 0x30
  406bf6:	4618      	mov	r0, r3
  406bf8:	2800      	cmp	r0, #0
  406bfa:	4623      	mov	r3, r4
  406bfc:	f103 0304 	add.w	r3, r3, #4
  406c00:	f6ff aeb8 	blt.w	406974 <_vfprintf_r+0x53c>
  406c04:	930e      	str	r3, [sp, #56]	; 0x38
  406c06:	f899 6000 	ldrb.w	r6, [r9]
  406c0a:	e494      	b.n	406536 <_vfprintf_r+0xfe>
  406c0c:	2a00      	cmp	r2, #0
  406c0e:	f040 86b7 	bne.w	407980 <_vfprintf_r+0x1548>
  406c12:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406c14:	3507      	adds	r5, #7
  406c16:	f025 0307 	bic.w	r3, r5, #7
  406c1a:	f103 0208 	add.w	r2, r3, #8
  406c1e:	920e      	str	r2, [sp, #56]	; 0x38
  406c20:	681a      	ldr	r2, [r3, #0]
  406c22:	9213      	str	r2, [sp, #76]	; 0x4c
  406c24:	685b      	ldr	r3, [r3, #4]
  406c26:	9312      	str	r3, [sp, #72]	; 0x48
  406c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406c2a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  406c2c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  406c30:	4628      	mov	r0, r5
  406c32:	4621      	mov	r1, r4
  406c34:	f04f 32ff 	mov.w	r2, #4294967295
  406c38:	4b7b      	ldr	r3, [pc, #492]	; (406e28 <_vfprintf_r+0x9f0>)
  406c3a:	f003 fcd7 	bl	40a5ec <__aeabi_dcmpun>
  406c3e:	2800      	cmp	r0, #0
  406c40:	f040 83a2 	bne.w	407388 <_vfprintf_r+0xf50>
  406c44:	4628      	mov	r0, r5
  406c46:	4621      	mov	r1, r4
  406c48:	f04f 32ff 	mov.w	r2, #4294967295
  406c4c:	4b76      	ldr	r3, [pc, #472]	; (406e28 <_vfprintf_r+0x9f0>)
  406c4e:	f7fd fb7f 	bl	404350 <__aeabi_dcmple>
  406c52:	2800      	cmp	r0, #0
  406c54:	f040 8398 	bne.w	407388 <_vfprintf_r+0xf50>
  406c58:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406c5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406c5e:	9912      	ldr	r1, [sp, #72]	; 0x48
  406c60:	f7fd fb6c 	bl	40433c <__aeabi_dcmplt>
  406c64:	2800      	cmp	r0, #0
  406c66:	f040 8435 	bne.w	4074d4 <_vfprintf_r+0x109c>
  406c6a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406c6e:	4f6f      	ldr	r7, [pc, #444]	; (406e2c <_vfprintf_r+0x9f4>)
  406c70:	4b6f      	ldr	r3, [pc, #444]	; (406e30 <_vfprintf_r+0x9f8>)
  406c72:	2203      	movs	r2, #3
  406c74:	2100      	movs	r1, #0
  406c76:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406c7a:	9207      	str	r2, [sp, #28]
  406c7c:	9109      	str	r1, [sp, #36]	; 0x24
  406c7e:	9006      	str	r0, [sp, #24]
  406c80:	2e47      	cmp	r6, #71	; 0x47
  406c82:	bfd8      	it	le
  406c84:	461f      	movle	r7, r3
  406c86:	920d      	str	r2, [sp, #52]	; 0x34
  406c88:	9110      	str	r1, [sp, #64]	; 0x40
  406c8a:	e507      	b.n	40669c <_vfprintf_r+0x264>
  406c8c:	f04b 0b08 	orr.w	fp, fp, #8
  406c90:	f899 6000 	ldrb.w	r6, [r9]
  406c94:	e44f      	b.n	406536 <_vfprintf_r+0xfe>
  406c96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406c98:	3507      	adds	r5, #7
  406c9a:	f025 0307 	bic.w	r3, r5, #7
  406c9e:	f103 0208 	add.w	r2, r3, #8
  406ca2:	e9d3 4500 	ldrd	r4, r5, [r3]
  406ca6:	920e      	str	r2, [sp, #56]	; 0x38
  406ca8:	2300      	movs	r3, #0
  406caa:	e4d1      	b.n	406650 <_vfprintf_r+0x218>
  406cac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406cae:	3507      	adds	r5, #7
  406cb0:	f025 0307 	bic.w	r3, r5, #7
  406cb4:	f103 0208 	add.w	r2, r3, #8
  406cb8:	e9d3 4500 	ldrd	r4, r5, [r3]
  406cbc:	920e      	str	r2, [sp, #56]	; 0x38
  406cbe:	2301      	movs	r3, #1
  406cc0:	e4c6      	b.n	406650 <_vfprintf_r+0x218>
  406cc2:	2a00      	cmp	r2, #0
  406cc4:	f040 8650 	bne.w	407968 <_vfprintf_r+0x1530>
  406cc8:	b1c6      	cbz	r6, 406cfc <_vfprintf_r+0x8c4>
  406cca:	2300      	movs	r3, #0
  406ccc:	2201      	movs	r2, #1
  406cce:	469a      	mov	sl, r3
  406cd0:	9207      	str	r2, [sp, #28]
  406cd2:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  406cd6:	f8cd b018 	str.w	fp, [sp, #24]
  406cda:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406cde:	9309      	str	r3, [sp, #36]	; 0x24
  406ce0:	9310      	str	r3, [sp, #64]	; 0x40
  406ce2:	920d      	str	r2, [sp, #52]	; 0x34
  406ce4:	af26      	add	r7, sp, #152	; 0x98
  406ce6:	e4df      	b.n	4066a8 <_vfprintf_r+0x270>
  406ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406cea:	6813      	ldr	r3, [r2, #0]
  406cec:	3204      	adds	r2, #4
  406cee:	920e      	str	r2, [sp, #56]	; 0x38
  406cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406cf2:	601a      	str	r2, [r3, #0]
  406cf4:	f7ff bbec 	b.w	4064d0 <_vfprintf_r+0x98>
  406cf8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406cfa:	e527      	b.n	40674c <_vfprintf_r+0x314>
  406cfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406cfe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406d02:	2b00      	cmp	r3, #0
  406d04:	f040 8594 	bne.w	407830 <_vfprintf_r+0x13f8>
  406d08:	2300      	movs	r3, #0
  406d0a:	9324      	str	r3, [sp, #144]	; 0x90
  406d0c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406d10:	f013 0f01 	tst.w	r3, #1
  406d14:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406d18:	d102      	bne.n	406d20 <_vfprintf_r+0x8e8>
  406d1a:	059a      	lsls	r2, r3, #22
  406d1c:	f140 8249 	bpl.w	4071b2 <_vfprintf_r+0xd7a>
  406d20:	065b      	lsls	r3, r3, #25
  406d22:	f53f adec 	bmi.w	4068fe <_vfprintf_r+0x4c6>
  406d26:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406d28:	b041      	add	sp, #260	; 0x104
  406d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d2e:	2e65      	cmp	r6, #101	; 0x65
  406d30:	f340 80b2 	ble.w	406e98 <_vfprintf_r+0xa60>
  406d34:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406d36:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406d3a:	9912      	ldr	r1, [sp, #72]	; 0x48
  406d3c:	f7fd faf4 	bl	404328 <__aeabi_dcmpeq>
  406d40:	2800      	cmp	r0, #0
  406d42:	f000 8160 	beq.w	407006 <_vfprintf_r+0xbce>
  406d46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d48:	4a3a      	ldr	r2, [pc, #232]	; (406e34 <_vfprintf_r+0x9fc>)
  406d4a:	f8c8 2000 	str.w	r2, [r8]
  406d4e:	3301      	adds	r3, #1
  406d50:	3401      	adds	r4, #1
  406d52:	2201      	movs	r2, #1
  406d54:	2b07      	cmp	r3, #7
  406d56:	9425      	str	r4, [sp, #148]	; 0x94
  406d58:	9324      	str	r3, [sp, #144]	; 0x90
  406d5a:	f8c8 2004 	str.w	r2, [r8, #4]
  406d5e:	f300 83bf 	bgt.w	4074e0 <_vfprintf_r+0x10a8>
  406d62:	f108 0808 	add.w	r8, r8, #8
  406d66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406d68:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406d6c:	4293      	cmp	r3, r2
  406d6e:	db03      	blt.n	406d78 <_vfprintf_r+0x940>
  406d70:	9b06      	ldr	r3, [sp, #24]
  406d72:	07df      	lsls	r7, r3, #31
  406d74:	f57f ad65 	bpl.w	406842 <_vfprintf_r+0x40a>
  406d78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d7a:	9914      	ldr	r1, [sp, #80]	; 0x50
  406d7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  406d7e:	f8c8 2000 	str.w	r2, [r8]
  406d82:	3301      	adds	r3, #1
  406d84:	440c      	add	r4, r1
  406d86:	2b07      	cmp	r3, #7
  406d88:	f8c8 1004 	str.w	r1, [r8, #4]
  406d8c:	9425      	str	r4, [sp, #148]	; 0x94
  406d8e:	9324      	str	r3, [sp, #144]	; 0x90
  406d90:	f300 83f8 	bgt.w	407584 <_vfprintf_r+0x114c>
  406d94:	f108 0808 	add.w	r8, r8, #8
  406d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d9a:	1e5e      	subs	r6, r3, #1
  406d9c:	2e00      	cmp	r6, #0
  406d9e:	f77f ad50 	ble.w	406842 <_vfprintf_r+0x40a>
  406da2:	2e10      	cmp	r6, #16
  406da4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406da6:	4d24      	ldr	r5, [pc, #144]	; (406e38 <_vfprintf_r+0xa00>)
  406da8:	f340 81dd 	ble.w	407166 <_vfprintf_r+0xd2e>
  406dac:	2710      	movs	r7, #16
  406dae:	f8dd a020 	ldr.w	sl, [sp, #32]
  406db2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406db6:	e005      	b.n	406dc4 <_vfprintf_r+0x98c>
  406db8:	f108 0808 	add.w	r8, r8, #8
  406dbc:	3e10      	subs	r6, #16
  406dbe:	2e10      	cmp	r6, #16
  406dc0:	f340 81d1 	ble.w	407166 <_vfprintf_r+0xd2e>
  406dc4:	3301      	adds	r3, #1
  406dc6:	3410      	adds	r4, #16
  406dc8:	2b07      	cmp	r3, #7
  406dca:	9425      	str	r4, [sp, #148]	; 0x94
  406dcc:	9324      	str	r3, [sp, #144]	; 0x90
  406dce:	e888 00a0 	stmia.w	r8, {r5, r7}
  406dd2:	ddf1      	ble.n	406db8 <_vfprintf_r+0x980>
  406dd4:	aa23      	add	r2, sp, #140	; 0x8c
  406dd6:	4659      	mov	r1, fp
  406dd8:	4650      	mov	r0, sl
  406dda:	f003 f957 	bl	40a08c <__sprint_r>
  406dde:	2800      	cmp	r0, #0
  406de0:	f040 83cd 	bne.w	40757e <_vfprintf_r+0x1146>
  406de4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406de8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406dec:	e7e6      	b.n	406dbc <_vfprintf_r+0x984>
  406dee:	46aa      	mov	sl, r5
  406df0:	e78c      	b.n	406d0c <_vfprintf_r+0x8d4>
  406df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406df4:	9a07      	ldr	r2, [sp, #28]
  406df6:	eba3 0a02 	sub.w	sl, r3, r2
  406dfa:	f1ba 0f00 	cmp.w	sl, #0
  406dfe:	f77f acca 	ble.w	406796 <_vfprintf_r+0x35e>
  406e02:	f1ba 0f10 	cmp.w	sl, #16
  406e06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e08:	4d0b      	ldr	r5, [pc, #44]	; (406e38 <_vfprintf_r+0xa00>)
  406e0a:	dd39      	ble.n	406e80 <_vfprintf_r+0xa48>
  406e0c:	4642      	mov	r2, r8
  406e0e:	4621      	mov	r1, r4
  406e10:	46b0      	mov	r8, r6
  406e12:	f04f 0b10 	mov.w	fp, #16
  406e16:	462e      	mov	r6, r5
  406e18:	9c08      	ldr	r4, [sp, #32]
  406e1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406e1c:	e015      	b.n	406e4a <_vfprintf_r+0xa12>
  406e1e:	bf00      	nop
  406e20:	0040ad1c 	.word	0x0040ad1c
  406e24:	0040ad08 	.word	0x0040ad08
  406e28:	7fefffff 	.word	0x7fefffff
  406e2c:	0040acfc 	.word	0x0040acfc
  406e30:	0040acf8 	.word	0x0040acf8
  406e34:	0040ad38 	.word	0x0040ad38
  406e38:	0040ad6c 	.word	0x0040ad6c
  406e3c:	f1aa 0a10 	sub.w	sl, sl, #16
  406e40:	f1ba 0f10 	cmp.w	sl, #16
  406e44:	f102 0208 	add.w	r2, r2, #8
  406e48:	dd16      	ble.n	406e78 <_vfprintf_r+0xa40>
  406e4a:	3301      	adds	r3, #1
  406e4c:	3110      	adds	r1, #16
  406e4e:	2b07      	cmp	r3, #7
  406e50:	9125      	str	r1, [sp, #148]	; 0x94
  406e52:	9324      	str	r3, [sp, #144]	; 0x90
  406e54:	e882 0840 	stmia.w	r2, {r6, fp}
  406e58:	ddf0      	ble.n	406e3c <_vfprintf_r+0xa04>
  406e5a:	aa23      	add	r2, sp, #140	; 0x8c
  406e5c:	4629      	mov	r1, r5
  406e5e:	4620      	mov	r0, r4
  406e60:	f003 f914 	bl	40a08c <__sprint_r>
  406e64:	2800      	cmp	r0, #0
  406e66:	d1c2      	bne.n	406dee <_vfprintf_r+0x9b6>
  406e68:	f1aa 0a10 	sub.w	sl, sl, #16
  406e6c:	f1ba 0f10 	cmp.w	sl, #16
  406e70:	9925      	ldr	r1, [sp, #148]	; 0x94
  406e72:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406e74:	aa30      	add	r2, sp, #192	; 0xc0
  406e76:	dce8      	bgt.n	406e4a <_vfprintf_r+0xa12>
  406e78:	4635      	mov	r5, r6
  406e7a:	460c      	mov	r4, r1
  406e7c:	4646      	mov	r6, r8
  406e7e:	4690      	mov	r8, r2
  406e80:	3301      	adds	r3, #1
  406e82:	4454      	add	r4, sl
  406e84:	2b07      	cmp	r3, #7
  406e86:	9425      	str	r4, [sp, #148]	; 0x94
  406e88:	9324      	str	r3, [sp, #144]	; 0x90
  406e8a:	e888 0420 	stmia.w	r8, {r5, sl}
  406e8e:	f300 8264 	bgt.w	40735a <_vfprintf_r+0xf22>
  406e92:	f108 0808 	add.w	r8, r8, #8
  406e96:	e47e      	b.n	406796 <_vfprintf_r+0x35e>
  406e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406e9a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  406e9c:	2b01      	cmp	r3, #1
  406e9e:	f340 81fd 	ble.w	40729c <_vfprintf_r+0xe64>
  406ea2:	3601      	adds	r6, #1
  406ea4:	3401      	adds	r4, #1
  406ea6:	2301      	movs	r3, #1
  406ea8:	2e07      	cmp	r6, #7
  406eaa:	9425      	str	r4, [sp, #148]	; 0x94
  406eac:	9624      	str	r6, [sp, #144]	; 0x90
  406eae:	f8c8 7000 	str.w	r7, [r8]
  406eb2:	f8c8 3004 	str.w	r3, [r8, #4]
  406eb6:	f300 820e 	bgt.w	4072d6 <_vfprintf_r+0xe9e>
  406eba:	f108 0808 	add.w	r8, r8, #8
  406ebe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406ec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406ec2:	f8c8 3000 	str.w	r3, [r8]
  406ec6:	3601      	adds	r6, #1
  406ec8:	4414      	add	r4, r2
  406eca:	2e07      	cmp	r6, #7
  406ecc:	9425      	str	r4, [sp, #148]	; 0x94
  406ece:	9624      	str	r6, [sp, #144]	; 0x90
  406ed0:	f8c8 2004 	str.w	r2, [r8, #4]
  406ed4:	f300 822e 	bgt.w	407334 <_vfprintf_r+0xefc>
  406ed8:	f108 0808 	add.w	r8, r8, #8
  406edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406ede:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406ee0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406ee2:	9912      	ldr	r1, [sp, #72]	; 0x48
  406ee4:	f7fd fa20 	bl	404328 <__aeabi_dcmpeq>
  406ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406eea:	2800      	cmp	r0, #0
  406eec:	f040 8106 	bne.w	4070fc <_vfprintf_r+0xcc4>
  406ef0:	3b01      	subs	r3, #1
  406ef2:	3601      	adds	r6, #1
  406ef4:	3701      	adds	r7, #1
  406ef6:	441c      	add	r4, r3
  406ef8:	2e07      	cmp	r6, #7
  406efa:	9624      	str	r6, [sp, #144]	; 0x90
  406efc:	9425      	str	r4, [sp, #148]	; 0x94
  406efe:	f8c8 7000 	str.w	r7, [r8]
  406f02:	f8c8 3004 	str.w	r3, [r8, #4]
  406f06:	f300 81d9 	bgt.w	4072bc <_vfprintf_r+0xe84>
  406f0a:	f108 0808 	add.w	r8, r8, #8
  406f0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406f10:	f8c8 2004 	str.w	r2, [r8, #4]
  406f14:	3601      	adds	r6, #1
  406f16:	4414      	add	r4, r2
  406f18:	ab1f      	add	r3, sp, #124	; 0x7c
  406f1a:	2e07      	cmp	r6, #7
  406f1c:	9425      	str	r4, [sp, #148]	; 0x94
  406f1e:	9624      	str	r6, [sp, #144]	; 0x90
  406f20:	f8c8 3000 	str.w	r3, [r8]
  406f24:	f77f ac8b 	ble.w	40683e <_vfprintf_r+0x406>
  406f28:	aa23      	add	r2, sp, #140	; 0x8c
  406f2a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f2c:	9808      	ldr	r0, [sp, #32]
  406f2e:	f003 f8ad 	bl	40a08c <__sprint_r>
  406f32:	b958      	cbnz	r0, 406f4c <_vfprintf_r+0xb14>
  406f34:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f36:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f3a:	e482      	b.n	406842 <_vfprintf_r+0x40a>
  406f3c:	aa23      	add	r2, sp, #140	; 0x8c
  406f3e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f40:	9808      	ldr	r0, [sp, #32]
  406f42:	f003 f8a3 	bl	40a08c <__sprint_r>
  406f46:	2800      	cmp	r0, #0
  406f48:	f43f acc5 	beq.w	4068d6 <_vfprintf_r+0x49e>
  406f4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406f50:	e6dc      	b.n	406d0c <_vfprintf_r+0x8d4>
  406f52:	f8dd b018 	ldr.w	fp, [sp, #24]
  406f56:	2b01      	cmp	r3, #1
  406f58:	f000 8121 	beq.w	40719e <_vfprintf_r+0xd66>
  406f5c:	2b02      	cmp	r3, #2
  406f5e:	d127      	bne.n	406fb0 <_vfprintf_r+0xb78>
  406f60:	f8cd b018 	str.w	fp, [sp, #24]
  406f64:	2400      	movs	r4, #0
  406f66:	2500      	movs	r5, #0
  406f68:	e591      	b.n	406a8e <_vfprintf_r+0x656>
  406f6a:	aa23      	add	r2, sp, #140	; 0x8c
  406f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f6e:	9808      	ldr	r0, [sp, #32]
  406f70:	f003 f88c 	bl	40a08c <__sprint_r>
  406f74:	2800      	cmp	r0, #0
  406f76:	d1e9      	bne.n	406f4c <_vfprintf_r+0xb14>
  406f78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f7e:	e44d      	b.n	40681c <_vfprintf_r+0x3e4>
  406f80:	aa23      	add	r2, sp, #140	; 0x8c
  406f82:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f84:	9808      	ldr	r0, [sp, #32]
  406f86:	f003 f881 	bl	40a08c <__sprint_r>
  406f8a:	2800      	cmp	r0, #0
  406f8c:	d1de      	bne.n	406f4c <_vfprintf_r+0xb14>
  406f8e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406f90:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406f94:	f7ff bbec 	b.w	406770 <_vfprintf_r+0x338>
  406f98:	aa23      	add	r2, sp, #140	; 0x8c
  406f9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406f9c:	9808      	ldr	r0, [sp, #32]
  406f9e:	f003 f875 	bl	40a08c <__sprint_r>
  406fa2:	2800      	cmp	r0, #0
  406fa4:	d1d2      	bne.n	406f4c <_vfprintf_r+0xb14>
  406fa6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406fa8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406fac:	f7ff bbf0 	b.w	406790 <_vfprintf_r+0x358>
  406fb0:	f8cd b018 	str.w	fp, [sp, #24]
  406fb4:	2400      	movs	r4, #0
  406fb6:	2500      	movs	r5, #0
  406fb8:	a930      	add	r1, sp, #192	; 0xc0
  406fba:	e000      	b.n	406fbe <_vfprintf_r+0xb86>
  406fbc:	4639      	mov	r1, r7
  406fbe:	08e2      	lsrs	r2, r4, #3
  406fc0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406fc4:	08e8      	lsrs	r0, r5, #3
  406fc6:	f004 0307 	and.w	r3, r4, #7
  406fca:	4605      	mov	r5, r0
  406fcc:	4614      	mov	r4, r2
  406fce:	3330      	adds	r3, #48	; 0x30
  406fd0:	ea54 0205 	orrs.w	r2, r4, r5
  406fd4:	f801 3c01 	strb.w	r3, [r1, #-1]
  406fd8:	f101 37ff 	add.w	r7, r1, #4294967295
  406fdc:	d1ee      	bne.n	406fbc <_vfprintf_r+0xb84>
  406fde:	9a06      	ldr	r2, [sp, #24]
  406fe0:	07d2      	lsls	r2, r2, #31
  406fe2:	f57f ad64 	bpl.w	406aae <_vfprintf_r+0x676>
  406fe6:	2b30      	cmp	r3, #48	; 0x30
  406fe8:	f43f ad61 	beq.w	406aae <_vfprintf_r+0x676>
  406fec:	2330      	movs	r3, #48	; 0x30
  406fee:	3902      	subs	r1, #2
  406ff0:	f807 3c01 	strb.w	r3, [r7, #-1]
  406ff4:	ab30      	add	r3, sp, #192	; 0xc0
  406ff6:	1a5b      	subs	r3, r3, r1
  406ff8:	930d      	str	r3, [sp, #52]	; 0x34
  406ffa:	460f      	mov	r7, r1
  406ffc:	f7ff bb46 	b.w	40668c <_vfprintf_r+0x254>
  407000:	2302      	movs	r3, #2
  407002:	f7ff bb25 	b.w	406650 <_vfprintf_r+0x218>
  407006:	991d      	ldr	r1, [sp, #116]	; 0x74
  407008:	2900      	cmp	r1, #0
  40700a:	f340 8274 	ble.w	4074f6 <_vfprintf_r+0x10be>
  40700e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407010:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407012:	4293      	cmp	r3, r2
  407014:	bfa8      	it	ge
  407016:	4613      	movge	r3, r2
  407018:	2b00      	cmp	r3, #0
  40701a:	461e      	mov	r6, r3
  40701c:	dd0d      	ble.n	40703a <_vfprintf_r+0xc02>
  40701e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407020:	f8c8 7000 	str.w	r7, [r8]
  407024:	3301      	adds	r3, #1
  407026:	4434      	add	r4, r6
  407028:	2b07      	cmp	r3, #7
  40702a:	9425      	str	r4, [sp, #148]	; 0x94
  40702c:	f8c8 6004 	str.w	r6, [r8, #4]
  407030:	9324      	str	r3, [sp, #144]	; 0x90
  407032:	f300 8324 	bgt.w	40767e <_vfprintf_r+0x1246>
  407036:	f108 0808 	add.w	r8, r8, #8
  40703a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40703c:	2e00      	cmp	r6, #0
  40703e:	bfa8      	it	ge
  407040:	1b9b      	subge	r3, r3, r6
  407042:	2b00      	cmp	r3, #0
  407044:	461e      	mov	r6, r3
  407046:	f340 80d0 	ble.w	4071ea <_vfprintf_r+0xdb2>
  40704a:	2e10      	cmp	r6, #16
  40704c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40704e:	4dc0      	ldr	r5, [pc, #768]	; (407350 <_vfprintf_r+0xf18>)
  407050:	f340 80b7 	ble.w	4071c2 <_vfprintf_r+0xd8a>
  407054:	4622      	mov	r2, r4
  407056:	f04f 0a10 	mov.w	sl, #16
  40705a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40705e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407060:	e005      	b.n	40706e <_vfprintf_r+0xc36>
  407062:	f108 0808 	add.w	r8, r8, #8
  407066:	3e10      	subs	r6, #16
  407068:	2e10      	cmp	r6, #16
  40706a:	f340 80a9 	ble.w	4071c0 <_vfprintf_r+0xd88>
  40706e:	3301      	adds	r3, #1
  407070:	3210      	adds	r2, #16
  407072:	2b07      	cmp	r3, #7
  407074:	9225      	str	r2, [sp, #148]	; 0x94
  407076:	9324      	str	r3, [sp, #144]	; 0x90
  407078:	e888 0420 	stmia.w	r8, {r5, sl}
  40707c:	ddf1      	ble.n	407062 <_vfprintf_r+0xc2a>
  40707e:	aa23      	add	r2, sp, #140	; 0x8c
  407080:	4621      	mov	r1, r4
  407082:	4658      	mov	r0, fp
  407084:	f003 f802 	bl	40a08c <__sprint_r>
  407088:	2800      	cmp	r0, #0
  40708a:	f040 8324 	bne.w	4076d6 <_vfprintf_r+0x129e>
  40708e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407090:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407092:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407096:	e7e6      	b.n	407066 <_vfprintf_r+0xc2e>
  407098:	2d00      	cmp	r5, #0
  40709a:	bf08      	it	eq
  40709c:	2c0a      	cmpeq	r4, #10
  40709e:	d37c      	bcc.n	40719a <_vfprintf_r+0xd62>
  4070a0:	af30      	add	r7, sp, #192	; 0xc0
  4070a2:	4620      	mov	r0, r4
  4070a4:	4629      	mov	r1, r5
  4070a6:	220a      	movs	r2, #10
  4070a8:	2300      	movs	r3, #0
  4070aa:	f003 fadd 	bl	40a668 <__aeabi_uldivmod>
  4070ae:	3230      	adds	r2, #48	; 0x30
  4070b0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4070b4:	4620      	mov	r0, r4
  4070b6:	4629      	mov	r1, r5
  4070b8:	2300      	movs	r3, #0
  4070ba:	220a      	movs	r2, #10
  4070bc:	f003 fad4 	bl	40a668 <__aeabi_uldivmod>
  4070c0:	4604      	mov	r4, r0
  4070c2:	460d      	mov	r5, r1
  4070c4:	ea54 0305 	orrs.w	r3, r4, r5
  4070c8:	d1eb      	bne.n	4070a2 <_vfprintf_r+0xc6a>
  4070ca:	ab30      	add	r3, sp, #192	; 0xc0
  4070cc:	1bdb      	subs	r3, r3, r7
  4070ce:	930d      	str	r3, [sp, #52]	; 0x34
  4070d0:	f7ff badc 	b.w	40668c <_vfprintf_r+0x254>
  4070d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4070d6:	930d      	str	r3, [sp, #52]	; 0x34
  4070d8:	af30      	add	r7, sp, #192	; 0xc0
  4070da:	f7ff bad7 	b.w	40668c <_vfprintf_r+0x254>
  4070de:	aa23      	add	r2, sp, #140	; 0x8c
  4070e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4070e2:	9808      	ldr	r0, [sp, #32]
  4070e4:	f002 ffd2 	bl	40a08c <__sprint_r>
  4070e8:	2800      	cmp	r0, #0
  4070ea:	f47f af2f 	bne.w	406f4c <_vfprintf_r+0xb14>
  4070ee:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4070f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4070f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4070f8:	f7ff bb28 	b.w	40674c <_vfprintf_r+0x314>
  4070fc:	1e5f      	subs	r7, r3, #1
  4070fe:	2f00      	cmp	r7, #0
  407100:	f77f af05 	ble.w	406f0e <_vfprintf_r+0xad6>
  407104:	2f10      	cmp	r7, #16
  407106:	4d92      	ldr	r5, [pc, #584]	; (407350 <_vfprintf_r+0xf18>)
  407108:	f340 810a 	ble.w	407320 <_vfprintf_r+0xee8>
  40710c:	f04f 0a10 	mov.w	sl, #16
  407110:	f8dd b020 	ldr.w	fp, [sp, #32]
  407114:	e005      	b.n	407122 <_vfprintf_r+0xcea>
  407116:	f108 0808 	add.w	r8, r8, #8
  40711a:	3f10      	subs	r7, #16
  40711c:	2f10      	cmp	r7, #16
  40711e:	f340 80ff 	ble.w	407320 <_vfprintf_r+0xee8>
  407122:	3601      	adds	r6, #1
  407124:	3410      	adds	r4, #16
  407126:	2e07      	cmp	r6, #7
  407128:	9425      	str	r4, [sp, #148]	; 0x94
  40712a:	9624      	str	r6, [sp, #144]	; 0x90
  40712c:	e888 0420 	stmia.w	r8, {r5, sl}
  407130:	ddf1      	ble.n	407116 <_vfprintf_r+0xcde>
  407132:	aa23      	add	r2, sp, #140	; 0x8c
  407134:	990a      	ldr	r1, [sp, #40]	; 0x28
  407136:	4658      	mov	r0, fp
  407138:	f002 ffa8 	bl	40a08c <__sprint_r>
  40713c:	2800      	cmp	r0, #0
  40713e:	f47f af05 	bne.w	406f4c <_vfprintf_r+0xb14>
  407142:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407144:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407146:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40714a:	e7e6      	b.n	40711a <_vfprintf_r+0xce2>
  40714c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40714e:	460a      	mov	r2, r1
  407150:	3204      	adds	r2, #4
  407152:	680c      	ldr	r4, [r1, #0]
  407154:	920e      	str	r2, [sp, #56]	; 0x38
  407156:	2500      	movs	r5, #0
  407158:	f7ff ba7a 	b.w	406650 <_vfprintf_r+0x218>
  40715c:	681c      	ldr	r4, [r3, #0]
  40715e:	3304      	adds	r3, #4
  407160:	930e      	str	r3, [sp, #56]	; 0x38
  407162:	2500      	movs	r5, #0
  407164:	e426      	b.n	4069b4 <_vfprintf_r+0x57c>
  407166:	3301      	adds	r3, #1
  407168:	4434      	add	r4, r6
  40716a:	2b07      	cmp	r3, #7
  40716c:	9425      	str	r4, [sp, #148]	; 0x94
  40716e:	9324      	str	r3, [sp, #144]	; 0x90
  407170:	e888 0060 	stmia.w	r8, {r5, r6}
  407174:	f77f ab63 	ble.w	40683e <_vfprintf_r+0x406>
  407178:	e6d6      	b.n	406f28 <_vfprintf_r+0xaf0>
  40717a:	3204      	adds	r2, #4
  40717c:	681c      	ldr	r4, [r3, #0]
  40717e:	920e      	str	r2, [sp, #56]	; 0x38
  407180:	2301      	movs	r3, #1
  407182:	2500      	movs	r5, #0
  407184:	f7ff ba64 	b.w	406650 <_vfprintf_r+0x218>
  407188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40718a:	6814      	ldr	r4, [r2, #0]
  40718c:	4613      	mov	r3, r2
  40718e:	3304      	adds	r3, #4
  407190:	17e5      	asrs	r5, r4, #31
  407192:	930e      	str	r3, [sp, #56]	; 0x38
  407194:	4622      	mov	r2, r4
  407196:	462b      	mov	r3, r5
  407198:	e460      	b.n	406a5c <_vfprintf_r+0x624>
  40719a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40719e:	f8cd b018 	str.w	fp, [sp, #24]
  4071a2:	af40      	add	r7, sp, #256	; 0x100
  4071a4:	3430      	adds	r4, #48	; 0x30
  4071a6:	2301      	movs	r3, #1
  4071a8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4071ac:	930d      	str	r3, [sp, #52]	; 0x34
  4071ae:	f7ff ba6d 	b.w	40668c <_vfprintf_r+0x254>
  4071b2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4071b6:	f002 f897 	bl	4092e8 <__retarget_lock_release_recursive>
  4071ba:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4071be:	e5af      	b.n	406d20 <_vfprintf_r+0x8e8>
  4071c0:	4614      	mov	r4, r2
  4071c2:	3301      	adds	r3, #1
  4071c4:	4434      	add	r4, r6
  4071c6:	2b07      	cmp	r3, #7
  4071c8:	9425      	str	r4, [sp, #148]	; 0x94
  4071ca:	9324      	str	r3, [sp, #144]	; 0x90
  4071cc:	e888 0060 	stmia.w	r8, {r5, r6}
  4071d0:	f340 816d 	ble.w	4074ae <_vfprintf_r+0x1076>
  4071d4:	aa23      	add	r2, sp, #140	; 0x8c
  4071d6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4071d8:	9808      	ldr	r0, [sp, #32]
  4071da:	f002 ff57 	bl	40a08c <__sprint_r>
  4071de:	2800      	cmp	r0, #0
  4071e0:	f47f aeb4 	bne.w	406f4c <_vfprintf_r+0xb14>
  4071e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4071e6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4071ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4071ee:	4293      	cmp	r3, r2
  4071f0:	f280 8158 	bge.w	4074a4 <_vfprintf_r+0x106c>
  4071f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4071f6:	9814      	ldr	r0, [sp, #80]	; 0x50
  4071f8:	9915      	ldr	r1, [sp, #84]	; 0x54
  4071fa:	f8c8 1000 	str.w	r1, [r8]
  4071fe:	3201      	adds	r2, #1
  407200:	4404      	add	r4, r0
  407202:	2a07      	cmp	r2, #7
  407204:	9425      	str	r4, [sp, #148]	; 0x94
  407206:	f8c8 0004 	str.w	r0, [r8, #4]
  40720a:	9224      	str	r2, [sp, #144]	; 0x90
  40720c:	f300 8152 	bgt.w	4074b4 <_vfprintf_r+0x107c>
  407210:	f108 0808 	add.w	r8, r8, #8
  407214:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407216:	9910      	ldr	r1, [sp, #64]	; 0x40
  407218:	1ad3      	subs	r3, r2, r3
  40721a:	1a56      	subs	r6, r2, r1
  40721c:	429e      	cmp	r6, r3
  40721e:	bfa8      	it	ge
  407220:	461e      	movge	r6, r3
  407222:	2e00      	cmp	r6, #0
  407224:	dd0e      	ble.n	407244 <_vfprintf_r+0xe0c>
  407226:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407228:	f8c8 6004 	str.w	r6, [r8, #4]
  40722c:	3201      	adds	r2, #1
  40722e:	440f      	add	r7, r1
  407230:	4434      	add	r4, r6
  407232:	2a07      	cmp	r2, #7
  407234:	f8c8 7000 	str.w	r7, [r8]
  407238:	9425      	str	r4, [sp, #148]	; 0x94
  40723a:	9224      	str	r2, [sp, #144]	; 0x90
  40723c:	f300 823c 	bgt.w	4076b8 <_vfprintf_r+0x1280>
  407240:	f108 0808 	add.w	r8, r8, #8
  407244:	2e00      	cmp	r6, #0
  407246:	bfac      	ite	ge
  407248:	1b9e      	subge	r6, r3, r6
  40724a:	461e      	movlt	r6, r3
  40724c:	2e00      	cmp	r6, #0
  40724e:	f77f aaf8 	ble.w	406842 <_vfprintf_r+0x40a>
  407252:	2e10      	cmp	r6, #16
  407254:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407256:	4d3e      	ldr	r5, [pc, #248]	; (407350 <_vfprintf_r+0xf18>)
  407258:	dd85      	ble.n	407166 <_vfprintf_r+0xd2e>
  40725a:	2710      	movs	r7, #16
  40725c:	f8dd a020 	ldr.w	sl, [sp, #32]
  407260:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407264:	e005      	b.n	407272 <_vfprintf_r+0xe3a>
  407266:	f108 0808 	add.w	r8, r8, #8
  40726a:	3e10      	subs	r6, #16
  40726c:	2e10      	cmp	r6, #16
  40726e:	f77f af7a 	ble.w	407166 <_vfprintf_r+0xd2e>
  407272:	3301      	adds	r3, #1
  407274:	3410      	adds	r4, #16
  407276:	2b07      	cmp	r3, #7
  407278:	9425      	str	r4, [sp, #148]	; 0x94
  40727a:	9324      	str	r3, [sp, #144]	; 0x90
  40727c:	e888 00a0 	stmia.w	r8, {r5, r7}
  407280:	ddf1      	ble.n	407266 <_vfprintf_r+0xe2e>
  407282:	aa23      	add	r2, sp, #140	; 0x8c
  407284:	4659      	mov	r1, fp
  407286:	4650      	mov	r0, sl
  407288:	f002 ff00 	bl	40a08c <__sprint_r>
  40728c:	2800      	cmp	r0, #0
  40728e:	f040 8176 	bne.w	40757e <_vfprintf_r+0x1146>
  407292:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407294:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407296:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40729a:	e7e6      	b.n	40726a <_vfprintf_r+0xe32>
  40729c:	9b06      	ldr	r3, [sp, #24]
  40729e:	07d8      	lsls	r0, r3, #31
  4072a0:	f53f adff 	bmi.w	406ea2 <_vfprintf_r+0xa6a>
  4072a4:	3601      	adds	r6, #1
  4072a6:	3401      	adds	r4, #1
  4072a8:	2301      	movs	r3, #1
  4072aa:	2e07      	cmp	r6, #7
  4072ac:	9425      	str	r4, [sp, #148]	; 0x94
  4072ae:	9624      	str	r6, [sp, #144]	; 0x90
  4072b0:	f8c8 7000 	str.w	r7, [r8]
  4072b4:	f8c8 3004 	str.w	r3, [r8, #4]
  4072b8:	f77f ae27 	ble.w	406f0a <_vfprintf_r+0xad2>
  4072bc:	aa23      	add	r2, sp, #140	; 0x8c
  4072be:	990a      	ldr	r1, [sp, #40]	; 0x28
  4072c0:	9808      	ldr	r0, [sp, #32]
  4072c2:	f002 fee3 	bl	40a08c <__sprint_r>
  4072c6:	2800      	cmp	r0, #0
  4072c8:	f47f ae40 	bne.w	406f4c <_vfprintf_r+0xb14>
  4072cc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4072ce:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4072d0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4072d4:	e61b      	b.n	406f0e <_vfprintf_r+0xad6>
  4072d6:	aa23      	add	r2, sp, #140	; 0x8c
  4072d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4072da:	9808      	ldr	r0, [sp, #32]
  4072dc:	f002 fed6 	bl	40a08c <__sprint_r>
  4072e0:	2800      	cmp	r0, #0
  4072e2:	f47f ae33 	bne.w	406f4c <_vfprintf_r+0xb14>
  4072e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4072e8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4072ea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4072ee:	e5e6      	b.n	406ebe <_vfprintf_r+0xa86>
  4072f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4072f2:	3507      	adds	r5, #7
  4072f4:	f025 0507 	bic.w	r5, r5, #7
  4072f8:	e9d5 2300 	ldrd	r2, r3, [r5]
  4072fc:	f105 0108 	add.w	r1, r5, #8
  407300:	910e      	str	r1, [sp, #56]	; 0x38
  407302:	4614      	mov	r4, r2
  407304:	461d      	mov	r5, r3
  407306:	f7ff bba9 	b.w	406a5c <_vfprintf_r+0x624>
  40730a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40730c:	3507      	adds	r5, #7
  40730e:	f025 0307 	bic.w	r3, r5, #7
  407312:	f103 0208 	add.w	r2, r3, #8
  407316:	920e      	str	r2, [sp, #56]	; 0x38
  407318:	e9d3 4500 	ldrd	r4, r5, [r3]
  40731c:	f7ff bb4a 	b.w	4069b4 <_vfprintf_r+0x57c>
  407320:	3601      	adds	r6, #1
  407322:	443c      	add	r4, r7
  407324:	2e07      	cmp	r6, #7
  407326:	9425      	str	r4, [sp, #148]	; 0x94
  407328:	9624      	str	r6, [sp, #144]	; 0x90
  40732a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40732e:	f77f adec 	ble.w	406f0a <_vfprintf_r+0xad2>
  407332:	e7c3      	b.n	4072bc <_vfprintf_r+0xe84>
  407334:	aa23      	add	r2, sp, #140	; 0x8c
  407336:	990a      	ldr	r1, [sp, #40]	; 0x28
  407338:	9808      	ldr	r0, [sp, #32]
  40733a:	f002 fea7 	bl	40a08c <__sprint_r>
  40733e:	2800      	cmp	r0, #0
  407340:	f47f ae04 	bne.w	406f4c <_vfprintf_r+0xb14>
  407344:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407346:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407348:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40734c:	e5c6      	b.n	406edc <_vfprintf_r+0xaa4>
  40734e:	bf00      	nop
  407350:	0040ad6c 	.word	0x0040ad6c
  407354:	af30      	add	r7, sp, #192	; 0xc0
  407356:	f7ff b999 	b.w	40668c <_vfprintf_r+0x254>
  40735a:	aa23      	add	r2, sp, #140	; 0x8c
  40735c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40735e:	9808      	ldr	r0, [sp, #32]
  407360:	f002 fe94 	bl	40a08c <__sprint_r>
  407364:	2800      	cmp	r0, #0
  407366:	f47f adf1 	bne.w	406f4c <_vfprintf_r+0xb14>
  40736a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40736c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407370:	f7ff ba11 	b.w	406796 <_vfprintf_r+0x35e>
  407374:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  407378:	4264      	negs	r4, r4
  40737a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40737e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407382:	2301      	movs	r3, #1
  407384:	f7ff b968 	b.w	406658 <_vfprintf_r+0x220>
  407388:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40738a:	4622      	mov	r2, r4
  40738c:	4620      	mov	r0, r4
  40738e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  407390:	4623      	mov	r3, r4
  407392:	4621      	mov	r1, r4
  407394:	f003 f92a 	bl	40a5ec <__aeabi_dcmpun>
  407398:	2800      	cmp	r0, #0
  40739a:	f040 828c 	bne.w	4078b6 <_vfprintf_r+0x147e>
  40739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073a0:	3301      	adds	r3, #1
  4073a2:	f026 0320 	bic.w	r3, r6, #32
  4073a6:	930d      	str	r3, [sp, #52]	; 0x34
  4073a8:	f000 8091 	beq.w	4074ce <_vfprintf_r+0x1096>
  4073ac:	2b47      	cmp	r3, #71	; 0x47
  4073ae:	d104      	bne.n	4073ba <_vfprintf_r+0xf82>
  4073b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073b2:	2b00      	cmp	r3, #0
  4073b4:	bf08      	it	eq
  4073b6:	2301      	moveq	r3, #1
  4073b8:	9309      	str	r3, [sp, #36]	; 0x24
  4073ba:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4073be:	9306      	str	r3, [sp, #24]
  4073c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4073c2:	f1b3 0a00 	subs.w	sl, r3, #0
  4073c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4073c8:	9307      	str	r3, [sp, #28]
  4073ca:	bfbb      	ittet	lt
  4073cc:	4653      	movlt	r3, sl
  4073ce:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  4073d2:	2300      	movge	r3, #0
  4073d4:	232d      	movlt	r3, #45	; 0x2d
  4073d6:	2e66      	cmp	r6, #102	; 0x66
  4073d8:	930f      	str	r3, [sp, #60]	; 0x3c
  4073da:	f000 817f 	beq.w	4076dc <_vfprintf_r+0x12a4>
  4073de:	2e46      	cmp	r6, #70	; 0x46
  4073e0:	f000 81d4 	beq.w	40778c <_vfprintf_r+0x1354>
  4073e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4073e6:	9a07      	ldr	r2, [sp, #28]
  4073e8:	2b45      	cmp	r3, #69	; 0x45
  4073ea:	bf0c      	ite	eq
  4073ec:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  4073ee:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  4073f0:	a821      	add	r0, sp, #132	; 0x84
  4073f2:	a91e      	add	r1, sp, #120	; 0x78
  4073f4:	bf08      	it	eq
  4073f6:	1c5d      	addeq	r5, r3, #1
  4073f8:	9004      	str	r0, [sp, #16]
  4073fa:	9103      	str	r1, [sp, #12]
  4073fc:	a81d      	add	r0, sp, #116	; 0x74
  4073fe:	2102      	movs	r1, #2
  407400:	9002      	str	r0, [sp, #8]
  407402:	4653      	mov	r3, sl
  407404:	9501      	str	r5, [sp, #4]
  407406:	9100      	str	r1, [sp, #0]
  407408:	9808      	ldr	r0, [sp, #32]
  40740a:	f000 fc0d 	bl	407c28 <_dtoa_r>
  40740e:	2e67      	cmp	r6, #103	; 0x67
  407410:	4607      	mov	r7, r0
  407412:	f040 81af 	bne.w	407774 <_vfprintf_r+0x133c>
  407416:	f01b 0f01 	tst.w	fp, #1
  40741a:	f000 8213 	beq.w	407844 <_vfprintf_r+0x140c>
  40741e:	197c      	adds	r4, r7, r5
  407420:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407422:	9807      	ldr	r0, [sp, #28]
  407424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407426:	4651      	mov	r1, sl
  407428:	f7fc ff7e 	bl	404328 <__aeabi_dcmpeq>
  40742c:	2800      	cmp	r0, #0
  40742e:	f040 8132 	bne.w	407696 <_vfprintf_r+0x125e>
  407432:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407434:	42a3      	cmp	r3, r4
  407436:	d206      	bcs.n	407446 <_vfprintf_r+0x100e>
  407438:	2130      	movs	r1, #48	; 0x30
  40743a:	1c5a      	adds	r2, r3, #1
  40743c:	9221      	str	r2, [sp, #132]	; 0x84
  40743e:	7019      	strb	r1, [r3, #0]
  407440:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407442:	429c      	cmp	r4, r3
  407444:	d8f9      	bhi.n	40743a <_vfprintf_r+0x1002>
  407446:	1bdb      	subs	r3, r3, r7
  407448:	9311      	str	r3, [sp, #68]	; 0x44
  40744a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40744c:	2b47      	cmp	r3, #71	; 0x47
  40744e:	f000 80b9 	beq.w	4075c4 <_vfprintf_r+0x118c>
  407452:	2e65      	cmp	r6, #101	; 0x65
  407454:	f340 8276 	ble.w	407944 <_vfprintf_r+0x150c>
  407458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40745a:	9310      	str	r3, [sp, #64]	; 0x40
  40745c:	2e66      	cmp	r6, #102	; 0x66
  40745e:	f000 8162 	beq.w	407726 <_vfprintf_r+0x12ee>
  407462:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407464:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407466:	4619      	mov	r1, r3
  407468:	4291      	cmp	r1, r2
  40746a:	f300 814f 	bgt.w	40770c <_vfprintf_r+0x12d4>
  40746e:	f01b 0f01 	tst.w	fp, #1
  407472:	f040 8209 	bne.w	407888 <_vfprintf_r+0x1450>
  407476:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40747a:	9307      	str	r3, [sp, #28]
  40747c:	920d      	str	r2, [sp, #52]	; 0x34
  40747e:	2667      	movs	r6, #103	; 0x67
  407480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407482:	2b00      	cmp	r3, #0
  407484:	f040 8096 	bne.w	4075b4 <_vfprintf_r+0x117c>
  407488:	9309      	str	r3, [sp, #36]	; 0x24
  40748a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40748e:	f7ff b905 	b.w	40669c <_vfprintf_r+0x264>
  407492:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407496:	f001 ff27 	bl	4092e8 <__retarget_lock_release_recursive>
  40749a:	f04f 33ff 	mov.w	r3, #4294967295
  40749e:	930b      	str	r3, [sp, #44]	; 0x2c
  4074a0:	f7ff ba30 	b.w	406904 <_vfprintf_r+0x4cc>
  4074a4:	9a06      	ldr	r2, [sp, #24]
  4074a6:	07d5      	lsls	r5, r2, #31
  4074a8:	f57f aeb4 	bpl.w	407214 <_vfprintf_r+0xddc>
  4074ac:	e6a2      	b.n	4071f4 <_vfprintf_r+0xdbc>
  4074ae:	f108 0808 	add.w	r8, r8, #8
  4074b2:	e69a      	b.n	4071ea <_vfprintf_r+0xdb2>
  4074b4:	aa23      	add	r2, sp, #140	; 0x8c
  4074b6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074b8:	9808      	ldr	r0, [sp, #32]
  4074ba:	f002 fde7 	bl	40a08c <__sprint_r>
  4074be:	2800      	cmp	r0, #0
  4074c0:	f47f ad44 	bne.w	406f4c <_vfprintf_r+0xb14>
  4074c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4074c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4074c8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4074cc:	e6a2      	b.n	407214 <_vfprintf_r+0xddc>
  4074ce:	2306      	movs	r3, #6
  4074d0:	9309      	str	r3, [sp, #36]	; 0x24
  4074d2:	e772      	b.n	4073ba <_vfprintf_r+0xf82>
  4074d4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4074d8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4074dc:	f7ff bbc7 	b.w	406c6e <_vfprintf_r+0x836>
  4074e0:	aa23      	add	r2, sp, #140	; 0x8c
  4074e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074e4:	9808      	ldr	r0, [sp, #32]
  4074e6:	f002 fdd1 	bl	40a08c <__sprint_r>
  4074ea:	2800      	cmp	r0, #0
  4074ec:	f47f ad2e 	bne.w	406f4c <_vfprintf_r+0xb14>
  4074f0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4074f4:	e437      	b.n	406d66 <_vfprintf_r+0x92e>
  4074f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4074f8:	4ab4      	ldr	r2, [pc, #720]	; (4077cc <_vfprintf_r+0x1394>)
  4074fa:	f8c8 2000 	str.w	r2, [r8]
  4074fe:	3301      	adds	r3, #1
  407500:	3401      	adds	r4, #1
  407502:	2201      	movs	r2, #1
  407504:	2b07      	cmp	r3, #7
  407506:	9425      	str	r4, [sp, #148]	; 0x94
  407508:	9324      	str	r3, [sp, #144]	; 0x90
  40750a:	f8c8 2004 	str.w	r2, [r8, #4]
  40750e:	f300 8124 	bgt.w	40775a <_vfprintf_r+0x1322>
  407512:	f108 0808 	add.w	r8, r8, #8
  407516:	b929      	cbnz	r1, 407524 <_vfprintf_r+0x10ec>
  407518:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40751a:	b91b      	cbnz	r3, 407524 <_vfprintf_r+0x10ec>
  40751c:	9b06      	ldr	r3, [sp, #24]
  40751e:	07de      	lsls	r6, r3, #31
  407520:	f57f a98f 	bpl.w	406842 <_vfprintf_r+0x40a>
  407524:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407526:	9814      	ldr	r0, [sp, #80]	; 0x50
  407528:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40752a:	f8c8 2000 	str.w	r2, [r8]
  40752e:	3301      	adds	r3, #1
  407530:	4602      	mov	r2, r0
  407532:	4422      	add	r2, r4
  407534:	2b07      	cmp	r3, #7
  407536:	9225      	str	r2, [sp, #148]	; 0x94
  407538:	f8c8 0004 	str.w	r0, [r8, #4]
  40753c:	9324      	str	r3, [sp, #144]	; 0x90
  40753e:	f300 8169 	bgt.w	407814 <_vfprintf_r+0x13dc>
  407542:	f108 0808 	add.w	r8, r8, #8
  407546:	2900      	cmp	r1, #0
  407548:	f2c0 8136 	blt.w	4077b8 <_vfprintf_r+0x1380>
  40754c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40754e:	f8c8 7000 	str.w	r7, [r8]
  407552:	3301      	adds	r3, #1
  407554:	188c      	adds	r4, r1, r2
  407556:	2b07      	cmp	r3, #7
  407558:	9425      	str	r4, [sp, #148]	; 0x94
  40755a:	9324      	str	r3, [sp, #144]	; 0x90
  40755c:	f8c8 1004 	str.w	r1, [r8, #4]
  407560:	f77f a96d 	ble.w	40683e <_vfprintf_r+0x406>
  407564:	e4e0      	b.n	406f28 <_vfprintf_r+0xaf0>
  407566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407568:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40756a:	6813      	ldr	r3, [r2, #0]
  40756c:	17cd      	asrs	r5, r1, #31
  40756e:	4608      	mov	r0, r1
  407570:	3204      	adds	r2, #4
  407572:	4629      	mov	r1, r5
  407574:	920e      	str	r2, [sp, #56]	; 0x38
  407576:	e9c3 0100 	strd	r0, r1, [r3]
  40757a:	f7fe bfa9 	b.w	4064d0 <_vfprintf_r+0x98>
  40757e:	46da      	mov	sl, fp
  407580:	f7ff bbc4 	b.w	406d0c <_vfprintf_r+0x8d4>
  407584:	aa23      	add	r2, sp, #140	; 0x8c
  407586:	990a      	ldr	r1, [sp, #40]	; 0x28
  407588:	9808      	ldr	r0, [sp, #32]
  40758a:	f002 fd7f 	bl	40a08c <__sprint_r>
  40758e:	2800      	cmp	r0, #0
  407590:	f47f acdc 	bne.w	406f4c <_vfprintf_r+0xb14>
  407594:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407596:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40759a:	f7ff bbfd 	b.w	406d98 <_vfprintf_r+0x960>
  40759e:	4638      	mov	r0, r7
  4075a0:	9409      	str	r4, [sp, #36]	; 0x24
  4075a2:	f7fd fcad 	bl	404f00 <strlen>
  4075a6:	950e      	str	r5, [sp, #56]	; 0x38
  4075a8:	900d      	str	r0, [sp, #52]	; 0x34
  4075aa:	f8cd b018 	str.w	fp, [sp, #24]
  4075ae:	4603      	mov	r3, r0
  4075b0:	f7ff ba36 	b.w	406a20 <_vfprintf_r+0x5e8>
  4075b4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4075b8:	2300      	movs	r3, #0
  4075ba:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4075be:	9309      	str	r3, [sp, #36]	; 0x24
  4075c0:	f7ff b86f 	b.w	4066a2 <_vfprintf_r+0x26a>
  4075c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4075c6:	9310      	str	r3, [sp, #64]	; 0x40
  4075c8:	461a      	mov	r2, r3
  4075ca:	3303      	adds	r3, #3
  4075cc:	db04      	blt.n	4075d8 <_vfprintf_r+0x11a0>
  4075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4075d0:	4619      	mov	r1, r3
  4075d2:	4291      	cmp	r1, r2
  4075d4:	f6bf af45 	bge.w	407462 <_vfprintf_r+0x102a>
  4075d8:	3e02      	subs	r6, #2
  4075da:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4075dc:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4075e0:	3b01      	subs	r3, #1
  4075e2:	2b00      	cmp	r3, #0
  4075e4:	931d      	str	r3, [sp, #116]	; 0x74
  4075e6:	bfbd      	ittte	lt
  4075e8:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  4075ea:	f1c3 0301 	rsblt	r3, r3, #1
  4075ee:	222d      	movlt	r2, #45	; 0x2d
  4075f0:	222b      	movge	r2, #43	; 0x2b
  4075f2:	2b09      	cmp	r3, #9
  4075f4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4075f8:	f340 813e 	ble.w	407878 <_vfprintf_r+0x1440>
  4075fc:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  407600:	4620      	mov	r0, r4
  407602:	4d73      	ldr	r5, [pc, #460]	; (4077d0 <_vfprintf_r+0x1398>)
  407604:	e000      	b.n	407608 <_vfprintf_r+0x11d0>
  407606:	4610      	mov	r0, r2
  407608:	fb85 1203 	smull	r1, r2, r5, r3
  40760c:	17d9      	asrs	r1, r3, #31
  40760e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407612:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407616:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40761a:	3230      	adds	r2, #48	; 0x30
  40761c:	2909      	cmp	r1, #9
  40761e:	f800 2c01 	strb.w	r2, [r0, #-1]
  407622:	460b      	mov	r3, r1
  407624:	f100 32ff 	add.w	r2, r0, #4294967295
  407628:	dced      	bgt.n	407606 <_vfprintf_r+0x11ce>
  40762a:	3330      	adds	r3, #48	; 0x30
  40762c:	3802      	subs	r0, #2
  40762e:	b2d9      	uxtb	r1, r3
  407630:	4284      	cmp	r4, r0
  407632:	f802 1c01 	strb.w	r1, [r2, #-1]
  407636:	f240 8190 	bls.w	40795a <_vfprintf_r+0x1522>
  40763a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  40763e:	4613      	mov	r3, r2
  407640:	e001      	b.n	407646 <_vfprintf_r+0x120e>
  407642:	f813 1b01 	ldrb.w	r1, [r3], #1
  407646:	f800 1b01 	strb.w	r1, [r0], #1
  40764a:	42a3      	cmp	r3, r4
  40764c:	d1f9      	bne.n	407642 <_vfprintf_r+0x120a>
  40764e:	3301      	adds	r3, #1
  407650:	1a9b      	subs	r3, r3, r2
  407652:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407656:	4413      	add	r3, r2
  407658:	aa1f      	add	r2, sp, #124	; 0x7c
  40765a:	1a9b      	subs	r3, r3, r2
  40765c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40765e:	9319      	str	r3, [sp, #100]	; 0x64
  407660:	2a01      	cmp	r2, #1
  407662:	4413      	add	r3, r2
  407664:	930d      	str	r3, [sp, #52]	; 0x34
  407666:	f340 8145 	ble.w	4078f4 <_vfprintf_r+0x14bc>
  40766a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40766c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40766e:	4413      	add	r3, r2
  407670:	930d      	str	r3, [sp, #52]	; 0x34
  407672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407676:	9307      	str	r3, [sp, #28]
  407678:	2300      	movs	r3, #0
  40767a:	9310      	str	r3, [sp, #64]	; 0x40
  40767c:	e700      	b.n	407480 <_vfprintf_r+0x1048>
  40767e:	aa23      	add	r2, sp, #140	; 0x8c
  407680:	990a      	ldr	r1, [sp, #40]	; 0x28
  407682:	9808      	ldr	r0, [sp, #32]
  407684:	f002 fd02 	bl	40a08c <__sprint_r>
  407688:	2800      	cmp	r0, #0
  40768a:	f47f ac5f 	bne.w	406f4c <_vfprintf_r+0xb14>
  40768e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407690:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407694:	e4d1      	b.n	40703a <_vfprintf_r+0xc02>
  407696:	4623      	mov	r3, r4
  407698:	e6d5      	b.n	407446 <_vfprintf_r+0x100e>
  40769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40769c:	9710      	str	r7, [sp, #64]	; 0x40
  40769e:	2b06      	cmp	r3, #6
  4076a0:	bf28      	it	cs
  4076a2:	2306      	movcs	r3, #6
  4076a4:	9709      	str	r7, [sp, #36]	; 0x24
  4076a6:	46ba      	mov	sl, r7
  4076a8:	9307      	str	r3, [sp, #28]
  4076aa:	950e      	str	r5, [sp, #56]	; 0x38
  4076ac:	f8cd b018 	str.w	fp, [sp, #24]
  4076b0:	930d      	str	r3, [sp, #52]	; 0x34
  4076b2:	4f48      	ldr	r7, [pc, #288]	; (4077d4 <_vfprintf_r+0x139c>)
  4076b4:	f7fe bff2 	b.w	40669c <_vfprintf_r+0x264>
  4076b8:	aa23      	add	r2, sp, #140	; 0x8c
  4076ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4076bc:	9808      	ldr	r0, [sp, #32]
  4076be:	f002 fce5 	bl	40a08c <__sprint_r>
  4076c2:	2800      	cmp	r0, #0
  4076c4:	f47f ac42 	bne.w	406f4c <_vfprintf_r+0xb14>
  4076c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4076ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4076cc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4076ce:	1ad3      	subs	r3, r2, r3
  4076d0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4076d4:	e5b6      	b.n	407244 <_vfprintf_r+0xe0c>
  4076d6:	46a2      	mov	sl, r4
  4076d8:	f7ff bb18 	b.w	406d0c <_vfprintf_r+0x8d4>
  4076dc:	a821      	add	r0, sp, #132	; 0x84
  4076de:	a91e      	add	r1, sp, #120	; 0x78
  4076e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4076e2:	9004      	str	r0, [sp, #16]
  4076e4:	9103      	str	r1, [sp, #12]
  4076e6:	a81d      	add	r0, sp, #116	; 0x74
  4076e8:	2103      	movs	r1, #3
  4076ea:	9002      	str	r0, [sp, #8]
  4076ec:	9a07      	ldr	r2, [sp, #28]
  4076ee:	9501      	str	r5, [sp, #4]
  4076f0:	4653      	mov	r3, sl
  4076f2:	9100      	str	r1, [sp, #0]
  4076f4:	9808      	ldr	r0, [sp, #32]
  4076f6:	f000 fa97 	bl	407c28 <_dtoa_r>
  4076fa:	4607      	mov	r7, r0
  4076fc:	1944      	adds	r4, r0, r5
  4076fe:	783b      	ldrb	r3, [r7, #0]
  407700:	2b30      	cmp	r3, #48	; 0x30
  407702:	f000 80ca 	beq.w	40789a <_vfprintf_r+0x1462>
  407706:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407708:	442c      	add	r4, r5
  40770a:	e689      	b.n	407420 <_vfprintf_r+0xfe8>
  40770c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40770e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407710:	4413      	add	r3, r2
  407712:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407714:	930d      	str	r3, [sp, #52]	; 0x34
  407716:	2a00      	cmp	r2, #0
  407718:	f340 80e4 	ble.w	4078e4 <_vfprintf_r+0x14ac>
  40771c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407720:	9307      	str	r3, [sp, #28]
  407722:	2667      	movs	r6, #103	; 0x67
  407724:	e6ac      	b.n	407480 <_vfprintf_r+0x1048>
  407726:	2b00      	cmp	r3, #0
  407728:	f340 80fb 	ble.w	407922 <_vfprintf_r+0x14ea>
  40772c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40772e:	2a00      	cmp	r2, #0
  407730:	f040 80ce 	bne.w	4078d0 <_vfprintf_r+0x1498>
  407734:	f01b 0f01 	tst.w	fp, #1
  407738:	f040 80ca 	bne.w	4078d0 <_vfprintf_r+0x1498>
  40773c:	9307      	str	r3, [sp, #28]
  40773e:	930d      	str	r3, [sp, #52]	; 0x34
  407740:	e69e      	b.n	407480 <_vfprintf_r+0x1048>
  407742:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407744:	9307      	str	r3, [sp, #28]
  407746:	930d      	str	r3, [sp, #52]	; 0x34
  407748:	9009      	str	r0, [sp, #36]	; 0x24
  40774a:	950e      	str	r5, [sp, #56]	; 0x38
  40774c:	f8cd b018 	str.w	fp, [sp, #24]
  407750:	9010      	str	r0, [sp, #64]	; 0x40
  407752:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407756:	f7fe bfa1 	b.w	40669c <_vfprintf_r+0x264>
  40775a:	aa23      	add	r2, sp, #140	; 0x8c
  40775c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40775e:	9808      	ldr	r0, [sp, #32]
  407760:	f002 fc94 	bl	40a08c <__sprint_r>
  407764:	2800      	cmp	r0, #0
  407766:	f47f abf1 	bne.w	406f4c <_vfprintf_r+0xb14>
  40776a:	991d      	ldr	r1, [sp, #116]	; 0x74
  40776c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40776e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407772:	e6d0      	b.n	407516 <_vfprintf_r+0x10de>
  407774:	2e47      	cmp	r6, #71	; 0x47
  407776:	f47f ae52 	bne.w	40741e <_vfprintf_r+0xfe6>
  40777a:	f01b 0f01 	tst.w	fp, #1
  40777e:	f000 80da 	beq.w	407936 <_vfprintf_r+0x14fe>
  407782:	2e46      	cmp	r6, #70	; 0x46
  407784:	eb07 0405 	add.w	r4, r7, r5
  407788:	d0b9      	beq.n	4076fe <_vfprintf_r+0x12c6>
  40778a:	e649      	b.n	407420 <_vfprintf_r+0xfe8>
  40778c:	a821      	add	r0, sp, #132	; 0x84
  40778e:	a91e      	add	r1, sp, #120	; 0x78
  407790:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407792:	9004      	str	r0, [sp, #16]
  407794:	9103      	str	r1, [sp, #12]
  407796:	a81d      	add	r0, sp, #116	; 0x74
  407798:	2103      	movs	r1, #3
  40779a:	9002      	str	r0, [sp, #8]
  40779c:	9a07      	ldr	r2, [sp, #28]
  40779e:	9401      	str	r4, [sp, #4]
  4077a0:	4653      	mov	r3, sl
  4077a2:	9100      	str	r1, [sp, #0]
  4077a4:	9808      	ldr	r0, [sp, #32]
  4077a6:	f000 fa3f 	bl	407c28 <_dtoa_r>
  4077aa:	4625      	mov	r5, r4
  4077ac:	4607      	mov	r7, r0
  4077ae:	e7e8      	b.n	407782 <_vfprintf_r+0x134a>
  4077b0:	2300      	movs	r3, #0
  4077b2:	9309      	str	r3, [sp, #36]	; 0x24
  4077b4:	f7fe bec1 	b.w	40653a <_vfprintf_r+0x102>
  4077b8:	424e      	negs	r6, r1
  4077ba:	3110      	adds	r1, #16
  4077bc:	4d06      	ldr	r5, [pc, #24]	; (4077d8 <_vfprintf_r+0x13a0>)
  4077be:	da43      	bge.n	407848 <_vfprintf_r+0x1410>
  4077c0:	2410      	movs	r4, #16
  4077c2:	f8dd a020 	ldr.w	sl, [sp, #32]
  4077c6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4077ca:	e00c      	b.n	4077e6 <_vfprintf_r+0x13ae>
  4077cc:	0040ad38 	.word	0x0040ad38
  4077d0:	66666667 	.word	0x66666667
  4077d4:	0040ad30 	.word	0x0040ad30
  4077d8:	0040ad6c 	.word	0x0040ad6c
  4077dc:	f108 0808 	add.w	r8, r8, #8
  4077e0:	3e10      	subs	r6, #16
  4077e2:	2e10      	cmp	r6, #16
  4077e4:	dd30      	ble.n	407848 <_vfprintf_r+0x1410>
  4077e6:	3301      	adds	r3, #1
  4077e8:	3210      	adds	r2, #16
  4077ea:	2b07      	cmp	r3, #7
  4077ec:	9225      	str	r2, [sp, #148]	; 0x94
  4077ee:	9324      	str	r3, [sp, #144]	; 0x90
  4077f0:	f8c8 5000 	str.w	r5, [r8]
  4077f4:	f8c8 4004 	str.w	r4, [r8, #4]
  4077f8:	ddf0      	ble.n	4077dc <_vfprintf_r+0x13a4>
  4077fa:	aa23      	add	r2, sp, #140	; 0x8c
  4077fc:	4659      	mov	r1, fp
  4077fe:	4650      	mov	r0, sl
  407800:	f002 fc44 	bl	40a08c <__sprint_r>
  407804:	2800      	cmp	r0, #0
  407806:	f47f aeba 	bne.w	40757e <_vfprintf_r+0x1146>
  40780a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40780c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40780e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407812:	e7e5      	b.n	4077e0 <_vfprintf_r+0x13a8>
  407814:	aa23      	add	r2, sp, #140	; 0x8c
  407816:	990a      	ldr	r1, [sp, #40]	; 0x28
  407818:	9808      	ldr	r0, [sp, #32]
  40781a:	f002 fc37 	bl	40a08c <__sprint_r>
  40781e:	2800      	cmp	r0, #0
  407820:	f47f ab94 	bne.w	406f4c <_vfprintf_r+0xb14>
  407824:	991d      	ldr	r1, [sp, #116]	; 0x74
  407826:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407828:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40782a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40782e:	e68a      	b.n	407546 <_vfprintf_r+0x110e>
  407830:	9808      	ldr	r0, [sp, #32]
  407832:	aa23      	add	r2, sp, #140	; 0x8c
  407834:	4651      	mov	r1, sl
  407836:	f002 fc29 	bl	40a08c <__sprint_r>
  40783a:	2800      	cmp	r0, #0
  40783c:	f43f aa64 	beq.w	406d08 <_vfprintf_r+0x8d0>
  407840:	f7ff ba64 	b.w	406d0c <_vfprintf_r+0x8d4>
  407844:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407846:	e5fe      	b.n	407446 <_vfprintf_r+0x100e>
  407848:	3301      	adds	r3, #1
  40784a:	4432      	add	r2, r6
  40784c:	2b07      	cmp	r3, #7
  40784e:	e888 0060 	stmia.w	r8, {r5, r6}
  407852:	9225      	str	r2, [sp, #148]	; 0x94
  407854:	9324      	str	r3, [sp, #144]	; 0x90
  407856:	f108 0808 	add.w	r8, r8, #8
  40785a:	f77f ae77 	ble.w	40754c <_vfprintf_r+0x1114>
  40785e:	aa23      	add	r2, sp, #140	; 0x8c
  407860:	990a      	ldr	r1, [sp, #40]	; 0x28
  407862:	9808      	ldr	r0, [sp, #32]
  407864:	f002 fc12 	bl	40a08c <__sprint_r>
  407868:	2800      	cmp	r0, #0
  40786a:	f47f ab6f 	bne.w	406f4c <_vfprintf_r+0xb14>
  40786e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407870:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407872:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407876:	e669      	b.n	40754c <_vfprintf_r+0x1114>
  407878:	3330      	adds	r3, #48	; 0x30
  40787a:	2230      	movs	r2, #48	; 0x30
  40787c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  407880:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  407884:	ab20      	add	r3, sp, #128	; 0x80
  407886:	e6e7      	b.n	407658 <_vfprintf_r+0x1220>
  407888:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40788a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40788c:	4413      	add	r3, r2
  40788e:	930d      	str	r3, [sp, #52]	; 0x34
  407890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407894:	9307      	str	r3, [sp, #28]
  407896:	2667      	movs	r6, #103	; 0x67
  407898:	e5f2      	b.n	407480 <_vfprintf_r+0x1048>
  40789a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40789c:	9807      	ldr	r0, [sp, #28]
  40789e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4078a0:	4651      	mov	r1, sl
  4078a2:	f7fc fd41 	bl	404328 <__aeabi_dcmpeq>
  4078a6:	2800      	cmp	r0, #0
  4078a8:	f47f af2d 	bne.w	407706 <_vfprintf_r+0x12ce>
  4078ac:	f1c5 0501 	rsb	r5, r5, #1
  4078b0:	951d      	str	r5, [sp, #116]	; 0x74
  4078b2:	442c      	add	r4, r5
  4078b4:	e5b4      	b.n	407420 <_vfprintf_r+0xfe8>
  4078b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4078b8:	4f33      	ldr	r7, [pc, #204]	; (407988 <_vfprintf_r+0x1550>)
  4078ba:	2b00      	cmp	r3, #0
  4078bc:	bfb6      	itet	lt
  4078be:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4078c2:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4078c6:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4078ca:	4b30      	ldr	r3, [pc, #192]	; (40798c <_vfprintf_r+0x1554>)
  4078cc:	f7ff b9d1 	b.w	406c72 <_vfprintf_r+0x83a>
  4078d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4078d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4078d4:	4413      	add	r3, r2
  4078d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4078d8:	441a      	add	r2, r3
  4078da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4078de:	920d      	str	r2, [sp, #52]	; 0x34
  4078e0:	9307      	str	r3, [sp, #28]
  4078e2:	e5cd      	b.n	407480 <_vfprintf_r+0x1048>
  4078e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4078e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4078e8:	f1c3 0301 	rsb	r3, r3, #1
  4078ec:	441a      	add	r2, r3
  4078ee:	4613      	mov	r3, r2
  4078f0:	920d      	str	r2, [sp, #52]	; 0x34
  4078f2:	e713      	b.n	40771c <_vfprintf_r+0x12e4>
  4078f4:	f01b 0301 	ands.w	r3, fp, #1
  4078f8:	9310      	str	r3, [sp, #64]	; 0x40
  4078fa:	f47f aeb6 	bne.w	40766a <_vfprintf_r+0x1232>
  4078fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407900:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407904:	9307      	str	r3, [sp, #28]
  407906:	e5bb      	b.n	407480 <_vfprintf_r+0x1048>
  407908:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40790a:	f899 6001 	ldrb.w	r6, [r9, #1]
  40790e:	6823      	ldr	r3, [r4, #0]
  407910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  407914:	9309      	str	r3, [sp, #36]	; 0x24
  407916:	4623      	mov	r3, r4
  407918:	3304      	adds	r3, #4
  40791a:	4681      	mov	r9, r0
  40791c:	930e      	str	r3, [sp, #56]	; 0x38
  40791e:	f7fe be0a 	b.w	406536 <_vfprintf_r+0xfe>
  407922:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407924:	b913      	cbnz	r3, 40792c <_vfprintf_r+0x14f4>
  407926:	f01b 0f01 	tst.w	fp, #1
  40792a:	d002      	beq.n	407932 <_vfprintf_r+0x14fa>
  40792c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40792e:	3301      	adds	r3, #1
  407930:	e7d1      	b.n	4078d6 <_vfprintf_r+0x149e>
  407932:	2301      	movs	r3, #1
  407934:	e702      	b.n	40773c <_vfprintf_r+0x1304>
  407936:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407938:	1bdb      	subs	r3, r3, r7
  40793a:	9311      	str	r3, [sp, #68]	; 0x44
  40793c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40793e:	2b47      	cmp	r3, #71	; 0x47
  407940:	f43f ae40 	beq.w	4075c4 <_vfprintf_r+0x118c>
  407944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407946:	9310      	str	r3, [sp, #64]	; 0x40
  407948:	e647      	b.n	4075da <_vfprintf_r+0x11a2>
  40794a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40794e:	f7ff b81d 	b.w	40698c <_vfprintf_r+0x554>
  407952:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407956:	f7ff b918 	b.w	406b8a <_vfprintf_r+0x752>
  40795a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40795e:	e67b      	b.n	407658 <_vfprintf_r+0x1220>
  407960:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407964:	f7ff b866 	b.w	406a34 <_vfprintf_r+0x5fc>
  407968:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40796c:	f7ff b9ac 	b.w	406cc8 <_vfprintf_r+0x890>
  407970:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407974:	f7ff b934 	b.w	406be0 <_vfprintf_r+0x7a8>
  407978:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40797c:	f7ff b8b0 	b.w	406ae0 <_vfprintf_r+0x6a8>
  407980:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407984:	f7ff b945 	b.w	406c12 <_vfprintf_r+0x7da>
  407988:	0040ad04 	.word	0x0040ad04
  40798c:	0040ad00 	.word	0x0040ad00

00407990 <__sbprintf>:
  407990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407994:	460c      	mov	r4, r1
  407996:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40799a:	8989      	ldrh	r1, [r1, #12]
  40799c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40799e:	89e5      	ldrh	r5, [r4, #14]
  4079a0:	9619      	str	r6, [sp, #100]	; 0x64
  4079a2:	f021 0102 	bic.w	r1, r1, #2
  4079a6:	4606      	mov	r6, r0
  4079a8:	69e0      	ldr	r0, [r4, #28]
  4079aa:	f8ad 100c 	strh.w	r1, [sp, #12]
  4079ae:	4617      	mov	r7, r2
  4079b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4079b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4079b6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4079ba:	4698      	mov	r8, r3
  4079bc:	ad1a      	add	r5, sp, #104	; 0x68
  4079be:	2300      	movs	r3, #0
  4079c0:	9007      	str	r0, [sp, #28]
  4079c2:	a816      	add	r0, sp, #88	; 0x58
  4079c4:	9209      	str	r2, [sp, #36]	; 0x24
  4079c6:	9306      	str	r3, [sp, #24]
  4079c8:	9500      	str	r5, [sp, #0]
  4079ca:	9504      	str	r5, [sp, #16]
  4079cc:	9102      	str	r1, [sp, #8]
  4079ce:	9105      	str	r1, [sp, #20]
  4079d0:	f001 fc84 	bl	4092dc <__retarget_lock_init_recursive>
  4079d4:	4643      	mov	r3, r8
  4079d6:	463a      	mov	r2, r7
  4079d8:	4669      	mov	r1, sp
  4079da:	4630      	mov	r0, r6
  4079dc:	f7fe fd2c 	bl	406438 <_vfprintf_r>
  4079e0:	1e05      	subs	r5, r0, #0
  4079e2:	db07      	blt.n	4079f4 <__sbprintf+0x64>
  4079e4:	4630      	mov	r0, r6
  4079e6:	4669      	mov	r1, sp
  4079e8:	f001 f8e8 	bl	408bbc <_fflush_r>
  4079ec:	2800      	cmp	r0, #0
  4079ee:	bf18      	it	ne
  4079f0:	f04f 35ff 	movne.w	r5, #4294967295
  4079f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4079f8:	065b      	lsls	r3, r3, #25
  4079fa:	d503      	bpl.n	407a04 <__sbprintf+0x74>
  4079fc:	89a3      	ldrh	r3, [r4, #12]
  4079fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a02:	81a3      	strh	r3, [r4, #12]
  407a04:	9816      	ldr	r0, [sp, #88]	; 0x58
  407a06:	f001 fc6b 	bl	4092e0 <__retarget_lock_close_recursive>
  407a0a:	4628      	mov	r0, r5
  407a0c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407a14 <__swsetup_r>:
  407a14:	b538      	push	{r3, r4, r5, lr}
  407a16:	4b30      	ldr	r3, [pc, #192]	; (407ad8 <__swsetup_r+0xc4>)
  407a18:	681b      	ldr	r3, [r3, #0]
  407a1a:	4605      	mov	r5, r0
  407a1c:	460c      	mov	r4, r1
  407a1e:	b113      	cbz	r3, 407a26 <__swsetup_r+0x12>
  407a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407a22:	2a00      	cmp	r2, #0
  407a24:	d038      	beq.n	407a98 <__swsetup_r+0x84>
  407a26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407a2a:	b293      	uxth	r3, r2
  407a2c:	0718      	lsls	r0, r3, #28
  407a2e:	d50c      	bpl.n	407a4a <__swsetup_r+0x36>
  407a30:	6920      	ldr	r0, [r4, #16]
  407a32:	b1a8      	cbz	r0, 407a60 <__swsetup_r+0x4c>
  407a34:	f013 0201 	ands.w	r2, r3, #1
  407a38:	d01e      	beq.n	407a78 <__swsetup_r+0x64>
  407a3a:	6963      	ldr	r3, [r4, #20]
  407a3c:	2200      	movs	r2, #0
  407a3e:	425b      	negs	r3, r3
  407a40:	61a3      	str	r3, [r4, #24]
  407a42:	60a2      	str	r2, [r4, #8]
  407a44:	b1f0      	cbz	r0, 407a84 <__swsetup_r+0x70>
  407a46:	2000      	movs	r0, #0
  407a48:	bd38      	pop	{r3, r4, r5, pc}
  407a4a:	06d9      	lsls	r1, r3, #27
  407a4c:	d53c      	bpl.n	407ac8 <__swsetup_r+0xb4>
  407a4e:	0758      	lsls	r0, r3, #29
  407a50:	d426      	bmi.n	407aa0 <__swsetup_r+0x8c>
  407a52:	6920      	ldr	r0, [r4, #16]
  407a54:	f042 0308 	orr.w	r3, r2, #8
  407a58:	81a3      	strh	r3, [r4, #12]
  407a5a:	b29b      	uxth	r3, r3
  407a5c:	2800      	cmp	r0, #0
  407a5e:	d1e9      	bne.n	407a34 <__swsetup_r+0x20>
  407a60:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407a64:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407a68:	d0e4      	beq.n	407a34 <__swsetup_r+0x20>
  407a6a:	4628      	mov	r0, r5
  407a6c:	4621      	mov	r1, r4
  407a6e:	f001 fc6b 	bl	409348 <__smakebuf_r>
  407a72:	89a3      	ldrh	r3, [r4, #12]
  407a74:	6920      	ldr	r0, [r4, #16]
  407a76:	e7dd      	b.n	407a34 <__swsetup_r+0x20>
  407a78:	0799      	lsls	r1, r3, #30
  407a7a:	bf58      	it	pl
  407a7c:	6962      	ldrpl	r2, [r4, #20]
  407a7e:	60a2      	str	r2, [r4, #8]
  407a80:	2800      	cmp	r0, #0
  407a82:	d1e0      	bne.n	407a46 <__swsetup_r+0x32>
  407a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a88:	061a      	lsls	r2, r3, #24
  407a8a:	d5dd      	bpl.n	407a48 <__swsetup_r+0x34>
  407a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a90:	81a3      	strh	r3, [r4, #12]
  407a92:	f04f 30ff 	mov.w	r0, #4294967295
  407a96:	bd38      	pop	{r3, r4, r5, pc}
  407a98:	4618      	mov	r0, r3
  407a9a:	f001 f8e7 	bl	408c6c <__sinit>
  407a9e:	e7c2      	b.n	407a26 <__swsetup_r+0x12>
  407aa0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407aa2:	b151      	cbz	r1, 407aba <__swsetup_r+0xa6>
  407aa4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407aa8:	4299      	cmp	r1, r3
  407aaa:	d004      	beq.n	407ab6 <__swsetup_r+0xa2>
  407aac:	4628      	mov	r0, r5
  407aae:	f001 f97f 	bl	408db0 <_free_r>
  407ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407ab6:	2300      	movs	r3, #0
  407ab8:	6323      	str	r3, [r4, #48]	; 0x30
  407aba:	2300      	movs	r3, #0
  407abc:	6920      	ldr	r0, [r4, #16]
  407abe:	6063      	str	r3, [r4, #4]
  407ac0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407ac4:	6020      	str	r0, [r4, #0]
  407ac6:	e7c5      	b.n	407a54 <__swsetup_r+0x40>
  407ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407acc:	2309      	movs	r3, #9
  407ace:	602b      	str	r3, [r5, #0]
  407ad0:	f04f 30ff 	mov.w	r0, #4294967295
  407ad4:	81a2      	strh	r2, [r4, #12]
  407ad6:	bd38      	pop	{r3, r4, r5, pc}
  407ad8:	20400078 	.word	0x20400078

00407adc <register_fini>:
  407adc:	4b02      	ldr	r3, [pc, #8]	; (407ae8 <register_fini+0xc>)
  407ade:	b113      	cbz	r3, 407ae6 <register_fini+0xa>
  407ae0:	4802      	ldr	r0, [pc, #8]	; (407aec <register_fini+0x10>)
  407ae2:	f000 b805 	b.w	407af0 <atexit>
  407ae6:	4770      	bx	lr
  407ae8:	00000000 	.word	0x00000000
  407aec:	00408cdd 	.word	0x00408cdd

00407af0 <atexit>:
  407af0:	2300      	movs	r3, #0
  407af2:	4601      	mov	r1, r0
  407af4:	461a      	mov	r2, r3
  407af6:	4618      	mov	r0, r3
  407af8:	f002 bae8 	b.w	40a0cc <__register_exitproc>

00407afc <quorem>:
  407afc:	6902      	ldr	r2, [r0, #16]
  407afe:	690b      	ldr	r3, [r1, #16]
  407b00:	4293      	cmp	r3, r2
  407b02:	f300 808d 	bgt.w	407c20 <quorem+0x124>
  407b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b0a:	f103 38ff 	add.w	r8, r3, #4294967295
  407b0e:	f101 0714 	add.w	r7, r1, #20
  407b12:	f100 0b14 	add.w	fp, r0, #20
  407b16:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407b1a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407b1e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407b22:	b083      	sub	sp, #12
  407b24:	3201      	adds	r2, #1
  407b26:	fbb3 f9f2 	udiv	r9, r3, r2
  407b2a:	eb0b 0304 	add.w	r3, fp, r4
  407b2e:	9400      	str	r4, [sp, #0]
  407b30:	eb07 0a04 	add.w	sl, r7, r4
  407b34:	9301      	str	r3, [sp, #4]
  407b36:	f1b9 0f00 	cmp.w	r9, #0
  407b3a:	d039      	beq.n	407bb0 <quorem+0xb4>
  407b3c:	2500      	movs	r5, #0
  407b3e:	462e      	mov	r6, r5
  407b40:	46bc      	mov	ip, r7
  407b42:	46de      	mov	lr, fp
  407b44:	f85c 4b04 	ldr.w	r4, [ip], #4
  407b48:	f8de 3000 	ldr.w	r3, [lr]
  407b4c:	b2a2      	uxth	r2, r4
  407b4e:	fb09 5502 	mla	r5, r9, r2, r5
  407b52:	0c22      	lsrs	r2, r4, #16
  407b54:	0c2c      	lsrs	r4, r5, #16
  407b56:	fb09 4202 	mla	r2, r9, r2, r4
  407b5a:	b2ad      	uxth	r5, r5
  407b5c:	1b75      	subs	r5, r6, r5
  407b5e:	b296      	uxth	r6, r2
  407b60:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407b64:	fa15 f383 	uxtah	r3, r5, r3
  407b68:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407b6c:	b29b      	uxth	r3, r3
  407b6e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  407b72:	45e2      	cmp	sl, ip
  407b74:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407b78:	f84e 3b04 	str.w	r3, [lr], #4
  407b7c:	ea4f 4626 	mov.w	r6, r6, asr #16
  407b80:	d2e0      	bcs.n	407b44 <quorem+0x48>
  407b82:	9b00      	ldr	r3, [sp, #0]
  407b84:	f85b 3003 	ldr.w	r3, [fp, r3]
  407b88:	b993      	cbnz	r3, 407bb0 <quorem+0xb4>
  407b8a:	9c01      	ldr	r4, [sp, #4]
  407b8c:	1f23      	subs	r3, r4, #4
  407b8e:	459b      	cmp	fp, r3
  407b90:	d20c      	bcs.n	407bac <quorem+0xb0>
  407b92:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407b96:	b94b      	cbnz	r3, 407bac <quorem+0xb0>
  407b98:	f1a4 0308 	sub.w	r3, r4, #8
  407b9c:	e002      	b.n	407ba4 <quorem+0xa8>
  407b9e:	681a      	ldr	r2, [r3, #0]
  407ba0:	3b04      	subs	r3, #4
  407ba2:	b91a      	cbnz	r2, 407bac <quorem+0xb0>
  407ba4:	459b      	cmp	fp, r3
  407ba6:	f108 38ff 	add.w	r8, r8, #4294967295
  407baa:	d3f8      	bcc.n	407b9e <quorem+0xa2>
  407bac:	f8c0 8010 	str.w	r8, [r0, #16]
  407bb0:	4604      	mov	r4, r0
  407bb2:	f001 fec7 	bl	409944 <__mcmp>
  407bb6:	2800      	cmp	r0, #0
  407bb8:	db2e      	blt.n	407c18 <quorem+0x11c>
  407bba:	f109 0901 	add.w	r9, r9, #1
  407bbe:	465d      	mov	r5, fp
  407bc0:	2300      	movs	r3, #0
  407bc2:	f857 1b04 	ldr.w	r1, [r7], #4
  407bc6:	6828      	ldr	r0, [r5, #0]
  407bc8:	b28a      	uxth	r2, r1
  407bca:	1a9a      	subs	r2, r3, r2
  407bcc:	0c0b      	lsrs	r3, r1, #16
  407bce:	fa12 f280 	uxtah	r2, r2, r0
  407bd2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407bd6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407bda:	b292      	uxth	r2, r2
  407bdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407be0:	45ba      	cmp	sl, r7
  407be2:	f845 2b04 	str.w	r2, [r5], #4
  407be6:	ea4f 4323 	mov.w	r3, r3, asr #16
  407bea:	d2ea      	bcs.n	407bc2 <quorem+0xc6>
  407bec:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407bf0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407bf4:	b982      	cbnz	r2, 407c18 <quorem+0x11c>
  407bf6:	1f1a      	subs	r2, r3, #4
  407bf8:	4593      	cmp	fp, r2
  407bfa:	d20b      	bcs.n	407c14 <quorem+0x118>
  407bfc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407c00:	b942      	cbnz	r2, 407c14 <quorem+0x118>
  407c02:	3b08      	subs	r3, #8
  407c04:	e002      	b.n	407c0c <quorem+0x110>
  407c06:	681a      	ldr	r2, [r3, #0]
  407c08:	3b04      	subs	r3, #4
  407c0a:	b91a      	cbnz	r2, 407c14 <quorem+0x118>
  407c0c:	459b      	cmp	fp, r3
  407c0e:	f108 38ff 	add.w	r8, r8, #4294967295
  407c12:	d3f8      	bcc.n	407c06 <quorem+0x10a>
  407c14:	f8c4 8010 	str.w	r8, [r4, #16]
  407c18:	4648      	mov	r0, r9
  407c1a:	b003      	add	sp, #12
  407c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c20:	2000      	movs	r0, #0
  407c22:	4770      	bx	lr
  407c24:	0000      	movs	r0, r0
	...

00407c28 <_dtoa_r>:
  407c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407c2e:	b09b      	sub	sp, #108	; 0x6c
  407c30:	4604      	mov	r4, r0
  407c32:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407c34:	4692      	mov	sl, r2
  407c36:	469b      	mov	fp, r3
  407c38:	b141      	cbz	r1, 407c4c <_dtoa_r+0x24>
  407c3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407c3c:	604a      	str	r2, [r1, #4]
  407c3e:	2301      	movs	r3, #1
  407c40:	4093      	lsls	r3, r2
  407c42:	608b      	str	r3, [r1, #8]
  407c44:	f001 fca6 	bl	409594 <_Bfree>
  407c48:	2300      	movs	r3, #0
  407c4a:	6423      	str	r3, [r4, #64]	; 0x40
  407c4c:	f1bb 0f00 	cmp.w	fp, #0
  407c50:	465d      	mov	r5, fp
  407c52:	db35      	blt.n	407cc0 <_dtoa_r+0x98>
  407c54:	2300      	movs	r3, #0
  407c56:	6033      	str	r3, [r6, #0]
  407c58:	4b9d      	ldr	r3, [pc, #628]	; (407ed0 <_dtoa_r+0x2a8>)
  407c5a:	43ab      	bics	r3, r5
  407c5c:	d015      	beq.n	407c8a <_dtoa_r+0x62>
  407c5e:	4650      	mov	r0, sl
  407c60:	4659      	mov	r1, fp
  407c62:	2200      	movs	r2, #0
  407c64:	2300      	movs	r3, #0
  407c66:	f7fc fb5f 	bl	404328 <__aeabi_dcmpeq>
  407c6a:	4680      	mov	r8, r0
  407c6c:	2800      	cmp	r0, #0
  407c6e:	d02d      	beq.n	407ccc <_dtoa_r+0xa4>
  407c70:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407c72:	2301      	movs	r3, #1
  407c74:	6013      	str	r3, [r2, #0]
  407c76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407c78:	2b00      	cmp	r3, #0
  407c7a:	f000 80bd 	beq.w	407df8 <_dtoa_r+0x1d0>
  407c7e:	4895      	ldr	r0, [pc, #596]	; (407ed4 <_dtoa_r+0x2ac>)
  407c80:	6018      	str	r0, [r3, #0]
  407c82:	3801      	subs	r0, #1
  407c84:	b01b      	add	sp, #108	; 0x6c
  407c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407c8c:	f242 730f 	movw	r3, #9999	; 0x270f
  407c90:	6013      	str	r3, [r2, #0]
  407c92:	f1ba 0f00 	cmp.w	sl, #0
  407c96:	d10d      	bne.n	407cb4 <_dtoa_r+0x8c>
  407c98:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407c9c:	b955      	cbnz	r5, 407cb4 <_dtoa_r+0x8c>
  407c9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407ca0:	488d      	ldr	r0, [pc, #564]	; (407ed8 <_dtoa_r+0x2b0>)
  407ca2:	2b00      	cmp	r3, #0
  407ca4:	d0ee      	beq.n	407c84 <_dtoa_r+0x5c>
  407ca6:	f100 0308 	add.w	r3, r0, #8
  407caa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407cac:	6013      	str	r3, [r2, #0]
  407cae:	b01b      	add	sp, #108	; 0x6c
  407cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407cb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407cb6:	4889      	ldr	r0, [pc, #548]	; (407edc <_dtoa_r+0x2b4>)
  407cb8:	2b00      	cmp	r3, #0
  407cba:	d0e3      	beq.n	407c84 <_dtoa_r+0x5c>
  407cbc:	1cc3      	adds	r3, r0, #3
  407cbe:	e7f4      	b.n	407caa <_dtoa_r+0x82>
  407cc0:	2301      	movs	r3, #1
  407cc2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407cc6:	6033      	str	r3, [r6, #0]
  407cc8:	46ab      	mov	fp, r5
  407cca:	e7c5      	b.n	407c58 <_dtoa_r+0x30>
  407ccc:	aa18      	add	r2, sp, #96	; 0x60
  407cce:	ab19      	add	r3, sp, #100	; 0x64
  407cd0:	9201      	str	r2, [sp, #4]
  407cd2:	9300      	str	r3, [sp, #0]
  407cd4:	4652      	mov	r2, sl
  407cd6:	465b      	mov	r3, fp
  407cd8:	4620      	mov	r0, r4
  407cda:	f001 fed3 	bl	409a84 <__d2b>
  407cde:	0d2b      	lsrs	r3, r5, #20
  407ce0:	4681      	mov	r9, r0
  407ce2:	d071      	beq.n	407dc8 <_dtoa_r+0x1a0>
  407ce4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407ce8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407cec:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407cee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407cf2:	4650      	mov	r0, sl
  407cf4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407cf8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407cfc:	2200      	movs	r2, #0
  407cfe:	4b78      	ldr	r3, [pc, #480]	; (407ee0 <_dtoa_r+0x2b8>)
  407d00:	f7fb fef6 	bl	403af0 <__aeabi_dsub>
  407d04:	a36c      	add	r3, pc, #432	; (adr r3, 407eb8 <_dtoa_r+0x290>)
  407d06:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d0a:	f7fc f8a5 	bl	403e58 <__aeabi_dmul>
  407d0e:	a36c      	add	r3, pc, #432	; (adr r3, 407ec0 <_dtoa_r+0x298>)
  407d10:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d14:	f7fb feee 	bl	403af4 <__adddf3>
  407d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407d1c:	4630      	mov	r0, r6
  407d1e:	f7fc f835 	bl	403d8c <__aeabi_i2d>
  407d22:	a369      	add	r3, pc, #420	; (adr r3, 407ec8 <_dtoa_r+0x2a0>)
  407d24:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d28:	f7fc f896 	bl	403e58 <__aeabi_dmul>
  407d2c:	4602      	mov	r2, r0
  407d2e:	460b      	mov	r3, r1
  407d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d34:	f7fb fede 	bl	403af4 <__adddf3>
  407d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407d3c:	f002 fc6c 	bl	40a618 <__aeabi_d2iz>
  407d40:	2200      	movs	r2, #0
  407d42:	9002      	str	r0, [sp, #8]
  407d44:	2300      	movs	r3, #0
  407d46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407d4a:	f7fc faf7 	bl	40433c <__aeabi_dcmplt>
  407d4e:	2800      	cmp	r0, #0
  407d50:	f040 8173 	bne.w	40803a <_dtoa_r+0x412>
  407d54:	9d02      	ldr	r5, [sp, #8]
  407d56:	2d16      	cmp	r5, #22
  407d58:	f200 815d 	bhi.w	408016 <_dtoa_r+0x3ee>
  407d5c:	4b61      	ldr	r3, [pc, #388]	; (407ee4 <_dtoa_r+0x2bc>)
  407d5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  407d62:	e9d3 0100 	ldrd	r0, r1, [r3]
  407d66:	4652      	mov	r2, sl
  407d68:	465b      	mov	r3, fp
  407d6a:	f7fc fb05 	bl	404378 <__aeabi_dcmpgt>
  407d6e:	2800      	cmp	r0, #0
  407d70:	f000 81c5 	beq.w	4080fe <_dtoa_r+0x4d6>
  407d74:	1e6b      	subs	r3, r5, #1
  407d76:	9302      	str	r3, [sp, #8]
  407d78:	2300      	movs	r3, #0
  407d7a:	930e      	str	r3, [sp, #56]	; 0x38
  407d7c:	1bbf      	subs	r7, r7, r6
  407d7e:	1e7b      	subs	r3, r7, #1
  407d80:	9306      	str	r3, [sp, #24]
  407d82:	f100 8154 	bmi.w	40802e <_dtoa_r+0x406>
  407d86:	2300      	movs	r3, #0
  407d88:	9308      	str	r3, [sp, #32]
  407d8a:	9b02      	ldr	r3, [sp, #8]
  407d8c:	2b00      	cmp	r3, #0
  407d8e:	f2c0 8145 	blt.w	40801c <_dtoa_r+0x3f4>
  407d92:	9a06      	ldr	r2, [sp, #24]
  407d94:	930d      	str	r3, [sp, #52]	; 0x34
  407d96:	4611      	mov	r1, r2
  407d98:	4419      	add	r1, r3
  407d9a:	2300      	movs	r3, #0
  407d9c:	9106      	str	r1, [sp, #24]
  407d9e:	930c      	str	r3, [sp, #48]	; 0x30
  407da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407da2:	2b09      	cmp	r3, #9
  407da4:	d82a      	bhi.n	407dfc <_dtoa_r+0x1d4>
  407da6:	2b05      	cmp	r3, #5
  407da8:	f340 865b 	ble.w	408a62 <_dtoa_r+0xe3a>
  407dac:	3b04      	subs	r3, #4
  407dae:	9324      	str	r3, [sp, #144]	; 0x90
  407db0:	2500      	movs	r5, #0
  407db2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407db4:	3b02      	subs	r3, #2
  407db6:	2b03      	cmp	r3, #3
  407db8:	f200 8642 	bhi.w	408a40 <_dtoa_r+0xe18>
  407dbc:	e8df f013 	tbh	[pc, r3, lsl #1]
  407dc0:	02c903d4 	.word	0x02c903d4
  407dc4:	046103df 	.word	0x046103df
  407dc8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407dca:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407dcc:	443e      	add	r6, r7
  407dce:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407dd2:	2b20      	cmp	r3, #32
  407dd4:	f340 818e 	ble.w	4080f4 <_dtoa_r+0x4cc>
  407dd8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407ddc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407de0:	409d      	lsls	r5, r3
  407de2:	fa2a f000 	lsr.w	r0, sl, r0
  407de6:	4328      	orrs	r0, r5
  407de8:	f7fb ffc0 	bl	403d6c <__aeabi_ui2d>
  407dec:	2301      	movs	r3, #1
  407dee:	3e01      	subs	r6, #1
  407df0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407df4:	9314      	str	r3, [sp, #80]	; 0x50
  407df6:	e781      	b.n	407cfc <_dtoa_r+0xd4>
  407df8:	483b      	ldr	r0, [pc, #236]	; (407ee8 <_dtoa_r+0x2c0>)
  407dfa:	e743      	b.n	407c84 <_dtoa_r+0x5c>
  407dfc:	2100      	movs	r1, #0
  407dfe:	6461      	str	r1, [r4, #68]	; 0x44
  407e00:	4620      	mov	r0, r4
  407e02:	9125      	str	r1, [sp, #148]	; 0x94
  407e04:	f001 fba0 	bl	409548 <_Balloc>
  407e08:	f04f 33ff 	mov.w	r3, #4294967295
  407e0c:	930a      	str	r3, [sp, #40]	; 0x28
  407e0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407e10:	930f      	str	r3, [sp, #60]	; 0x3c
  407e12:	2301      	movs	r3, #1
  407e14:	9004      	str	r0, [sp, #16]
  407e16:	6420      	str	r0, [r4, #64]	; 0x40
  407e18:	9224      	str	r2, [sp, #144]	; 0x90
  407e1a:	930b      	str	r3, [sp, #44]	; 0x2c
  407e1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407e1e:	2b00      	cmp	r3, #0
  407e20:	f2c0 80d9 	blt.w	407fd6 <_dtoa_r+0x3ae>
  407e24:	9a02      	ldr	r2, [sp, #8]
  407e26:	2a0e      	cmp	r2, #14
  407e28:	f300 80d5 	bgt.w	407fd6 <_dtoa_r+0x3ae>
  407e2c:	4b2d      	ldr	r3, [pc, #180]	; (407ee4 <_dtoa_r+0x2bc>)
  407e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407e32:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e36:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407e3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407e3c:	2b00      	cmp	r3, #0
  407e3e:	f2c0 83ba 	blt.w	4085b6 <_dtoa_r+0x98e>
  407e42:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  407e46:	4650      	mov	r0, sl
  407e48:	462a      	mov	r2, r5
  407e4a:	4633      	mov	r3, r6
  407e4c:	4659      	mov	r1, fp
  407e4e:	f7fc f92d 	bl	4040ac <__aeabi_ddiv>
  407e52:	f002 fbe1 	bl	40a618 <__aeabi_d2iz>
  407e56:	4680      	mov	r8, r0
  407e58:	f7fb ff98 	bl	403d8c <__aeabi_i2d>
  407e5c:	462a      	mov	r2, r5
  407e5e:	4633      	mov	r3, r6
  407e60:	f7fb fffa 	bl	403e58 <__aeabi_dmul>
  407e64:	460b      	mov	r3, r1
  407e66:	4602      	mov	r2, r0
  407e68:	4659      	mov	r1, fp
  407e6a:	4650      	mov	r0, sl
  407e6c:	f7fb fe40 	bl	403af0 <__aeabi_dsub>
  407e70:	9d04      	ldr	r5, [sp, #16]
  407e72:	f108 0330 	add.w	r3, r8, #48	; 0x30
  407e76:	702b      	strb	r3, [r5, #0]
  407e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e7a:	2b01      	cmp	r3, #1
  407e7c:	4606      	mov	r6, r0
  407e7e:	460f      	mov	r7, r1
  407e80:	f105 0501 	add.w	r5, r5, #1
  407e84:	d068      	beq.n	407f58 <_dtoa_r+0x330>
  407e86:	2200      	movs	r2, #0
  407e88:	4b18      	ldr	r3, [pc, #96]	; (407eec <_dtoa_r+0x2c4>)
  407e8a:	f7fb ffe5 	bl	403e58 <__aeabi_dmul>
  407e8e:	2200      	movs	r2, #0
  407e90:	2300      	movs	r3, #0
  407e92:	4606      	mov	r6, r0
  407e94:	460f      	mov	r7, r1
  407e96:	f7fc fa47 	bl	404328 <__aeabi_dcmpeq>
  407e9a:	2800      	cmp	r0, #0
  407e9c:	f040 8088 	bne.w	407fb0 <_dtoa_r+0x388>
  407ea0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  407ea4:	f04f 0a00 	mov.w	sl, #0
  407ea8:	f8df b040 	ldr.w	fp, [pc, #64]	; 407eec <_dtoa_r+0x2c4>
  407eac:	940c      	str	r4, [sp, #48]	; 0x30
  407eae:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407eb2:	e028      	b.n	407f06 <_dtoa_r+0x2de>
  407eb4:	f3af 8000 	nop.w
  407eb8:	636f4361 	.word	0x636f4361
  407ebc:	3fd287a7 	.word	0x3fd287a7
  407ec0:	8b60c8b3 	.word	0x8b60c8b3
  407ec4:	3fc68a28 	.word	0x3fc68a28
  407ec8:	509f79fb 	.word	0x509f79fb
  407ecc:	3fd34413 	.word	0x3fd34413
  407ed0:	7ff00000 	.word	0x7ff00000
  407ed4:	0040ad39 	.word	0x0040ad39
  407ed8:	0040ad7c 	.word	0x0040ad7c
  407edc:	0040ad88 	.word	0x0040ad88
  407ee0:	3ff80000 	.word	0x3ff80000
  407ee4:	0040adb8 	.word	0x0040adb8
  407ee8:	0040ad38 	.word	0x0040ad38
  407eec:	40240000 	.word	0x40240000
  407ef0:	f7fb ffb2 	bl	403e58 <__aeabi_dmul>
  407ef4:	2200      	movs	r2, #0
  407ef6:	2300      	movs	r3, #0
  407ef8:	4606      	mov	r6, r0
  407efa:	460f      	mov	r7, r1
  407efc:	f7fc fa14 	bl	404328 <__aeabi_dcmpeq>
  407f00:	2800      	cmp	r0, #0
  407f02:	f040 83c1 	bne.w	408688 <_dtoa_r+0xa60>
  407f06:	4642      	mov	r2, r8
  407f08:	464b      	mov	r3, r9
  407f0a:	4630      	mov	r0, r6
  407f0c:	4639      	mov	r1, r7
  407f0e:	f7fc f8cd 	bl	4040ac <__aeabi_ddiv>
  407f12:	f002 fb81 	bl	40a618 <__aeabi_d2iz>
  407f16:	4604      	mov	r4, r0
  407f18:	f7fb ff38 	bl	403d8c <__aeabi_i2d>
  407f1c:	4642      	mov	r2, r8
  407f1e:	464b      	mov	r3, r9
  407f20:	f7fb ff9a 	bl	403e58 <__aeabi_dmul>
  407f24:	4602      	mov	r2, r0
  407f26:	460b      	mov	r3, r1
  407f28:	4630      	mov	r0, r6
  407f2a:	4639      	mov	r1, r7
  407f2c:	f7fb fde0 	bl	403af0 <__aeabi_dsub>
  407f30:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407f34:	9e04      	ldr	r6, [sp, #16]
  407f36:	f805 eb01 	strb.w	lr, [r5], #1
  407f3a:	eba5 0e06 	sub.w	lr, r5, r6
  407f3e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407f40:	45b6      	cmp	lr, r6
  407f42:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407f46:	4652      	mov	r2, sl
  407f48:	465b      	mov	r3, fp
  407f4a:	d1d1      	bne.n	407ef0 <_dtoa_r+0x2c8>
  407f4c:	46a0      	mov	r8, r4
  407f4e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407f52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407f54:	4606      	mov	r6, r0
  407f56:	460f      	mov	r7, r1
  407f58:	4632      	mov	r2, r6
  407f5a:	463b      	mov	r3, r7
  407f5c:	4630      	mov	r0, r6
  407f5e:	4639      	mov	r1, r7
  407f60:	f7fb fdc8 	bl	403af4 <__adddf3>
  407f64:	4606      	mov	r6, r0
  407f66:	460f      	mov	r7, r1
  407f68:	4602      	mov	r2, r0
  407f6a:	460b      	mov	r3, r1
  407f6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407f70:	f7fc f9e4 	bl	40433c <__aeabi_dcmplt>
  407f74:	b948      	cbnz	r0, 407f8a <_dtoa_r+0x362>
  407f76:	4632      	mov	r2, r6
  407f78:	463b      	mov	r3, r7
  407f7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407f7e:	f7fc f9d3 	bl	404328 <__aeabi_dcmpeq>
  407f82:	b1a8      	cbz	r0, 407fb0 <_dtoa_r+0x388>
  407f84:	f018 0f01 	tst.w	r8, #1
  407f88:	d012      	beq.n	407fb0 <_dtoa_r+0x388>
  407f8a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407f8e:	9a04      	ldr	r2, [sp, #16]
  407f90:	1e6b      	subs	r3, r5, #1
  407f92:	e004      	b.n	407f9e <_dtoa_r+0x376>
  407f94:	429a      	cmp	r2, r3
  407f96:	f000 8401 	beq.w	40879c <_dtoa_r+0xb74>
  407f9a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407f9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  407fa2:	f103 0501 	add.w	r5, r3, #1
  407fa6:	d0f5      	beq.n	407f94 <_dtoa_r+0x36c>
  407fa8:	f108 0801 	add.w	r8, r8, #1
  407fac:	f883 8000 	strb.w	r8, [r3]
  407fb0:	4649      	mov	r1, r9
  407fb2:	4620      	mov	r0, r4
  407fb4:	f001 faee 	bl	409594 <_Bfree>
  407fb8:	2200      	movs	r2, #0
  407fba:	9b02      	ldr	r3, [sp, #8]
  407fbc:	702a      	strb	r2, [r5, #0]
  407fbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407fc0:	3301      	adds	r3, #1
  407fc2:	6013      	str	r3, [r2, #0]
  407fc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407fc6:	2b00      	cmp	r3, #0
  407fc8:	f000 839e 	beq.w	408708 <_dtoa_r+0xae0>
  407fcc:	9804      	ldr	r0, [sp, #16]
  407fce:	601d      	str	r5, [r3, #0]
  407fd0:	b01b      	add	sp, #108	; 0x6c
  407fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407fd8:	2a00      	cmp	r2, #0
  407fda:	d03e      	beq.n	40805a <_dtoa_r+0x432>
  407fdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407fde:	2a01      	cmp	r2, #1
  407fe0:	f340 8311 	ble.w	408606 <_dtoa_r+0x9de>
  407fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407fe8:	1e5f      	subs	r7, r3, #1
  407fea:	42ba      	cmp	r2, r7
  407fec:	f2c0 838f 	blt.w	40870e <_dtoa_r+0xae6>
  407ff0:	1bd7      	subs	r7, r2, r7
  407ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ff4:	2b00      	cmp	r3, #0
  407ff6:	f2c0 848b 	blt.w	408910 <_dtoa_r+0xce8>
  407ffa:	9d08      	ldr	r5, [sp, #32]
  407ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ffe:	9a08      	ldr	r2, [sp, #32]
  408000:	441a      	add	r2, r3
  408002:	9208      	str	r2, [sp, #32]
  408004:	9a06      	ldr	r2, [sp, #24]
  408006:	2101      	movs	r1, #1
  408008:	441a      	add	r2, r3
  40800a:	4620      	mov	r0, r4
  40800c:	9206      	str	r2, [sp, #24]
  40800e:	f001 fb5b 	bl	4096c8 <__i2b>
  408012:	4606      	mov	r6, r0
  408014:	e024      	b.n	408060 <_dtoa_r+0x438>
  408016:	2301      	movs	r3, #1
  408018:	930e      	str	r3, [sp, #56]	; 0x38
  40801a:	e6af      	b.n	407d7c <_dtoa_r+0x154>
  40801c:	9a08      	ldr	r2, [sp, #32]
  40801e:	9b02      	ldr	r3, [sp, #8]
  408020:	1ad2      	subs	r2, r2, r3
  408022:	425b      	negs	r3, r3
  408024:	930c      	str	r3, [sp, #48]	; 0x30
  408026:	2300      	movs	r3, #0
  408028:	9208      	str	r2, [sp, #32]
  40802a:	930d      	str	r3, [sp, #52]	; 0x34
  40802c:	e6b8      	b.n	407da0 <_dtoa_r+0x178>
  40802e:	f1c7 0301 	rsb	r3, r7, #1
  408032:	9308      	str	r3, [sp, #32]
  408034:	2300      	movs	r3, #0
  408036:	9306      	str	r3, [sp, #24]
  408038:	e6a7      	b.n	407d8a <_dtoa_r+0x162>
  40803a:	9d02      	ldr	r5, [sp, #8]
  40803c:	4628      	mov	r0, r5
  40803e:	f7fb fea5 	bl	403d8c <__aeabi_i2d>
  408042:	4602      	mov	r2, r0
  408044:	460b      	mov	r3, r1
  408046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40804a:	f7fc f96d 	bl	404328 <__aeabi_dcmpeq>
  40804e:	2800      	cmp	r0, #0
  408050:	f47f ae80 	bne.w	407d54 <_dtoa_r+0x12c>
  408054:	1e6b      	subs	r3, r5, #1
  408056:	9302      	str	r3, [sp, #8]
  408058:	e67c      	b.n	407d54 <_dtoa_r+0x12c>
  40805a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40805c:	9d08      	ldr	r5, [sp, #32]
  40805e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  408060:	2d00      	cmp	r5, #0
  408062:	dd0c      	ble.n	40807e <_dtoa_r+0x456>
  408064:	9906      	ldr	r1, [sp, #24]
  408066:	2900      	cmp	r1, #0
  408068:	460b      	mov	r3, r1
  40806a:	dd08      	ble.n	40807e <_dtoa_r+0x456>
  40806c:	42a9      	cmp	r1, r5
  40806e:	9a08      	ldr	r2, [sp, #32]
  408070:	bfa8      	it	ge
  408072:	462b      	movge	r3, r5
  408074:	1ad2      	subs	r2, r2, r3
  408076:	1aed      	subs	r5, r5, r3
  408078:	1acb      	subs	r3, r1, r3
  40807a:	9208      	str	r2, [sp, #32]
  40807c:	9306      	str	r3, [sp, #24]
  40807e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408080:	b1d3      	cbz	r3, 4080b8 <_dtoa_r+0x490>
  408082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408084:	2b00      	cmp	r3, #0
  408086:	f000 82b7 	beq.w	4085f8 <_dtoa_r+0x9d0>
  40808a:	2f00      	cmp	r7, #0
  40808c:	dd10      	ble.n	4080b0 <_dtoa_r+0x488>
  40808e:	4631      	mov	r1, r6
  408090:	463a      	mov	r2, r7
  408092:	4620      	mov	r0, r4
  408094:	f001 fbb4 	bl	409800 <__pow5mult>
  408098:	464a      	mov	r2, r9
  40809a:	4601      	mov	r1, r0
  40809c:	4606      	mov	r6, r0
  40809e:	4620      	mov	r0, r4
  4080a0:	f001 fb1c 	bl	4096dc <__multiply>
  4080a4:	4649      	mov	r1, r9
  4080a6:	4680      	mov	r8, r0
  4080a8:	4620      	mov	r0, r4
  4080aa:	f001 fa73 	bl	409594 <_Bfree>
  4080ae:	46c1      	mov	r9, r8
  4080b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4080b2:	1bda      	subs	r2, r3, r7
  4080b4:	f040 82a1 	bne.w	4085fa <_dtoa_r+0x9d2>
  4080b8:	2101      	movs	r1, #1
  4080ba:	4620      	mov	r0, r4
  4080bc:	f001 fb04 	bl	4096c8 <__i2b>
  4080c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4080c2:	2b00      	cmp	r3, #0
  4080c4:	4680      	mov	r8, r0
  4080c6:	dd1c      	ble.n	408102 <_dtoa_r+0x4da>
  4080c8:	4601      	mov	r1, r0
  4080ca:	461a      	mov	r2, r3
  4080cc:	4620      	mov	r0, r4
  4080ce:	f001 fb97 	bl	409800 <__pow5mult>
  4080d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080d4:	2b01      	cmp	r3, #1
  4080d6:	4680      	mov	r8, r0
  4080d8:	f340 8254 	ble.w	408584 <_dtoa_r+0x95c>
  4080dc:	2300      	movs	r3, #0
  4080de:	930c      	str	r3, [sp, #48]	; 0x30
  4080e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4080e4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4080e8:	6918      	ldr	r0, [r3, #16]
  4080ea:	f001 fa9d 	bl	409628 <__hi0bits>
  4080ee:	f1c0 0020 	rsb	r0, r0, #32
  4080f2:	e010      	b.n	408116 <_dtoa_r+0x4ee>
  4080f4:	f1c3 0520 	rsb	r5, r3, #32
  4080f8:	fa0a f005 	lsl.w	r0, sl, r5
  4080fc:	e674      	b.n	407de8 <_dtoa_r+0x1c0>
  4080fe:	900e      	str	r0, [sp, #56]	; 0x38
  408100:	e63c      	b.n	407d7c <_dtoa_r+0x154>
  408102:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408104:	2b01      	cmp	r3, #1
  408106:	f340 8287 	ble.w	408618 <_dtoa_r+0x9f0>
  40810a:	2300      	movs	r3, #0
  40810c:	930c      	str	r3, [sp, #48]	; 0x30
  40810e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408110:	2001      	movs	r0, #1
  408112:	2b00      	cmp	r3, #0
  408114:	d1e4      	bne.n	4080e0 <_dtoa_r+0x4b8>
  408116:	9a06      	ldr	r2, [sp, #24]
  408118:	4410      	add	r0, r2
  40811a:	f010 001f 	ands.w	r0, r0, #31
  40811e:	f000 80a1 	beq.w	408264 <_dtoa_r+0x63c>
  408122:	f1c0 0320 	rsb	r3, r0, #32
  408126:	2b04      	cmp	r3, #4
  408128:	f340 849e 	ble.w	408a68 <_dtoa_r+0xe40>
  40812c:	9b08      	ldr	r3, [sp, #32]
  40812e:	f1c0 001c 	rsb	r0, r0, #28
  408132:	4403      	add	r3, r0
  408134:	9308      	str	r3, [sp, #32]
  408136:	4613      	mov	r3, r2
  408138:	4403      	add	r3, r0
  40813a:	4405      	add	r5, r0
  40813c:	9306      	str	r3, [sp, #24]
  40813e:	9b08      	ldr	r3, [sp, #32]
  408140:	2b00      	cmp	r3, #0
  408142:	dd05      	ble.n	408150 <_dtoa_r+0x528>
  408144:	4649      	mov	r1, r9
  408146:	461a      	mov	r2, r3
  408148:	4620      	mov	r0, r4
  40814a:	f001 fba9 	bl	4098a0 <__lshift>
  40814e:	4681      	mov	r9, r0
  408150:	9b06      	ldr	r3, [sp, #24]
  408152:	2b00      	cmp	r3, #0
  408154:	dd05      	ble.n	408162 <_dtoa_r+0x53a>
  408156:	4641      	mov	r1, r8
  408158:	461a      	mov	r2, r3
  40815a:	4620      	mov	r0, r4
  40815c:	f001 fba0 	bl	4098a0 <__lshift>
  408160:	4680      	mov	r8, r0
  408162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408164:	2b00      	cmp	r3, #0
  408166:	f040 8086 	bne.w	408276 <_dtoa_r+0x64e>
  40816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40816c:	2b00      	cmp	r3, #0
  40816e:	f340 8266 	ble.w	40863e <_dtoa_r+0xa16>
  408172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408174:	2b00      	cmp	r3, #0
  408176:	f000 8098 	beq.w	4082aa <_dtoa_r+0x682>
  40817a:	2d00      	cmp	r5, #0
  40817c:	dd05      	ble.n	40818a <_dtoa_r+0x562>
  40817e:	4631      	mov	r1, r6
  408180:	462a      	mov	r2, r5
  408182:	4620      	mov	r0, r4
  408184:	f001 fb8c 	bl	4098a0 <__lshift>
  408188:	4606      	mov	r6, r0
  40818a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40818c:	2b00      	cmp	r3, #0
  40818e:	f040 8337 	bne.w	408800 <_dtoa_r+0xbd8>
  408192:	9606      	str	r6, [sp, #24]
  408194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408196:	9a04      	ldr	r2, [sp, #16]
  408198:	f8dd b018 	ldr.w	fp, [sp, #24]
  40819c:	3b01      	subs	r3, #1
  40819e:	18d3      	adds	r3, r2, r3
  4081a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4081a2:	f00a 0301 	and.w	r3, sl, #1
  4081a6:	930c      	str	r3, [sp, #48]	; 0x30
  4081a8:	4617      	mov	r7, r2
  4081aa:	46c2      	mov	sl, r8
  4081ac:	4651      	mov	r1, sl
  4081ae:	4648      	mov	r0, r9
  4081b0:	f7ff fca4 	bl	407afc <quorem>
  4081b4:	4631      	mov	r1, r6
  4081b6:	4605      	mov	r5, r0
  4081b8:	4648      	mov	r0, r9
  4081ba:	f001 fbc3 	bl	409944 <__mcmp>
  4081be:	465a      	mov	r2, fp
  4081c0:	900a      	str	r0, [sp, #40]	; 0x28
  4081c2:	4651      	mov	r1, sl
  4081c4:	4620      	mov	r0, r4
  4081c6:	f001 fbd9 	bl	40997c <__mdiff>
  4081ca:	68c2      	ldr	r2, [r0, #12]
  4081cc:	4680      	mov	r8, r0
  4081ce:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4081d2:	2a00      	cmp	r2, #0
  4081d4:	f040 822b 	bne.w	40862e <_dtoa_r+0xa06>
  4081d8:	4601      	mov	r1, r0
  4081da:	4648      	mov	r0, r9
  4081dc:	9308      	str	r3, [sp, #32]
  4081de:	f001 fbb1 	bl	409944 <__mcmp>
  4081e2:	4641      	mov	r1, r8
  4081e4:	9006      	str	r0, [sp, #24]
  4081e6:	4620      	mov	r0, r4
  4081e8:	f001 f9d4 	bl	409594 <_Bfree>
  4081ec:	9a06      	ldr	r2, [sp, #24]
  4081ee:	9b08      	ldr	r3, [sp, #32]
  4081f0:	b932      	cbnz	r2, 408200 <_dtoa_r+0x5d8>
  4081f2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4081f4:	b921      	cbnz	r1, 408200 <_dtoa_r+0x5d8>
  4081f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4081f8:	2a00      	cmp	r2, #0
  4081fa:	f000 83ef 	beq.w	4089dc <_dtoa_r+0xdb4>
  4081fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408200:	990a      	ldr	r1, [sp, #40]	; 0x28
  408202:	2900      	cmp	r1, #0
  408204:	f2c0 829f 	blt.w	408746 <_dtoa_r+0xb1e>
  408208:	d105      	bne.n	408216 <_dtoa_r+0x5ee>
  40820a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40820c:	b919      	cbnz	r1, 408216 <_dtoa_r+0x5ee>
  40820e:	990c      	ldr	r1, [sp, #48]	; 0x30
  408210:	2900      	cmp	r1, #0
  408212:	f000 8298 	beq.w	408746 <_dtoa_r+0xb1e>
  408216:	2a00      	cmp	r2, #0
  408218:	f300 8306 	bgt.w	408828 <_dtoa_r+0xc00>
  40821c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40821e:	703b      	strb	r3, [r7, #0]
  408220:	f107 0801 	add.w	r8, r7, #1
  408224:	4297      	cmp	r7, r2
  408226:	4645      	mov	r5, r8
  408228:	f000 830c 	beq.w	408844 <_dtoa_r+0xc1c>
  40822c:	4649      	mov	r1, r9
  40822e:	2300      	movs	r3, #0
  408230:	220a      	movs	r2, #10
  408232:	4620      	mov	r0, r4
  408234:	f001 f9b8 	bl	4095a8 <__multadd>
  408238:	455e      	cmp	r6, fp
  40823a:	4681      	mov	r9, r0
  40823c:	4631      	mov	r1, r6
  40823e:	f04f 0300 	mov.w	r3, #0
  408242:	f04f 020a 	mov.w	r2, #10
  408246:	4620      	mov	r0, r4
  408248:	f000 81eb 	beq.w	408622 <_dtoa_r+0x9fa>
  40824c:	f001 f9ac 	bl	4095a8 <__multadd>
  408250:	4659      	mov	r1, fp
  408252:	4606      	mov	r6, r0
  408254:	2300      	movs	r3, #0
  408256:	220a      	movs	r2, #10
  408258:	4620      	mov	r0, r4
  40825a:	f001 f9a5 	bl	4095a8 <__multadd>
  40825e:	4647      	mov	r7, r8
  408260:	4683      	mov	fp, r0
  408262:	e7a3      	b.n	4081ac <_dtoa_r+0x584>
  408264:	201c      	movs	r0, #28
  408266:	9b08      	ldr	r3, [sp, #32]
  408268:	4403      	add	r3, r0
  40826a:	9308      	str	r3, [sp, #32]
  40826c:	9b06      	ldr	r3, [sp, #24]
  40826e:	4403      	add	r3, r0
  408270:	4405      	add	r5, r0
  408272:	9306      	str	r3, [sp, #24]
  408274:	e763      	b.n	40813e <_dtoa_r+0x516>
  408276:	4641      	mov	r1, r8
  408278:	4648      	mov	r0, r9
  40827a:	f001 fb63 	bl	409944 <__mcmp>
  40827e:	2800      	cmp	r0, #0
  408280:	f6bf af73 	bge.w	40816a <_dtoa_r+0x542>
  408284:	9f02      	ldr	r7, [sp, #8]
  408286:	4649      	mov	r1, r9
  408288:	2300      	movs	r3, #0
  40828a:	220a      	movs	r2, #10
  40828c:	4620      	mov	r0, r4
  40828e:	3f01      	subs	r7, #1
  408290:	9702      	str	r7, [sp, #8]
  408292:	f001 f989 	bl	4095a8 <__multadd>
  408296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408298:	4681      	mov	r9, r0
  40829a:	2b00      	cmp	r3, #0
  40829c:	f040 83b6 	bne.w	408a0c <_dtoa_r+0xde4>
  4082a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4082a2:	2b00      	cmp	r3, #0
  4082a4:	f340 83bf 	ble.w	408a26 <_dtoa_r+0xdfe>
  4082a8:	930a      	str	r3, [sp, #40]	; 0x28
  4082aa:	f8dd b010 	ldr.w	fp, [sp, #16]
  4082ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4082b0:	465d      	mov	r5, fp
  4082b2:	e002      	b.n	4082ba <_dtoa_r+0x692>
  4082b4:	f001 f978 	bl	4095a8 <__multadd>
  4082b8:	4681      	mov	r9, r0
  4082ba:	4641      	mov	r1, r8
  4082bc:	4648      	mov	r0, r9
  4082be:	f7ff fc1d 	bl	407afc <quorem>
  4082c2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4082c6:	f805 ab01 	strb.w	sl, [r5], #1
  4082ca:	eba5 030b 	sub.w	r3, r5, fp
  4082ce:	42bb      	cmp	r3, r7
  4082d0:	f04f 020a 	mov.w	r2, #10
  4082d4:	f04f 0300 	mov.w	r3, #0
  4082d8:	4649      	mov	r1, r9
  4082da:	4620      	mov	r0, r4
  4082dc:	dbea      	blt.n	4082b4 <_dtoa_r+0x68c>
  4082de:	9b04      	ldr	r3, [sp, #16]
  4082e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4082e2:	2a01      	cmp	r2, #1
  4082e4:	bfac      	ite	ge
  4082e6:	189b      	addge	r3, r3, r2
  4082e8:	3301      	addlt	r3, #1
  4082ea:	461d      	mov	r5, r3
  4082ec:	f04f 0b00 	mov.w	fp, #0
  4082f0:	4649      	mov	r1, r9
  4082f2:	2201      	movs	r2, #1
  4082f4:	4620      	mov	r0, r4
  4082f6:	f001 fad3 	bl	4098a0 <__lshift>
  4082fa:	4641      	mov	r1, r8
  4082fc:	4681      	mov	r9, r0
  4082fe:	f001 fb21 	bl	409944 <__mcmp>
  408302:	2800      	cmp	r0, #0
  408304:	f340 823d 	ble.w	408782 <_dtoa_r+0xb5a>
  408308:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40830c:	9904      	ldr	r1, [sp, #16]
  40830e:	1e6b      	subs	r3, r5, #1
  408310:	e004      	b.n	40831c <_dtoa_r+0x6f4>
  408312:	428b      	cmp	r3, r1
  408314:	f000 81ae 	beq.w	408674 <_dtoa_r+0xa4c>
  408318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40831c:	2a39      	cmp	r2, #57	; 0x39
  40831e:	f103 0501 	add.w	r5, r3, #1
  408322:	d0f6      	beq.n	408312 <_dtoa_r+0x6ea>
  408324:	3201      	adds	r2, #1
  408326:	701a      	strb	r2, [r3, #0]
  408328:	4641      	mov	r1, r8
  40832a:	4620      	mov	r0, r4
  40832c:	f001 f932 	bl	409594 <_Bfree>
  408330:	2e00      	cmp	r6, #0
  408332:	f43f ae3d 	beq.w	407fb0 <_dtoa_r+0x388>
  408336:	f1bb 0f00 	cmp.w	fp, #0
  40833a:	d005      	beq.n	408348 <_dtoa_r+0x720>
  40833c:	45b3      	cmp	fp, r6
  40833e:	d003      	beq.n	408348 <_dtoa_r+0x720>
  408340:	4659      	mov	r1, fp
  408342:	4620      	mov	r0, r4
  408344:	f001 f926 	bl	409594 <_Bfree>
  408348:	4631      	mov	r1, r6
  40834a:	4620      	mov	r0, r4
  40834c:	f001 f922 	bl	409594 <_Bfree>
  408350:	e62e      	b.n	407fb0 <_dtoa_r+0x388>
  408352:	2300      	movs	r3, #0
  408354:	930b      	str	r3, [sp, #44]	; 0x2c
  408356:	9b02      	ldr	r3, [sp, #8]
  408358:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40835a:	4413      	add	r3, r2
  40835c:	930f      	str	r3, [sp, #60]	; 0x3c
  40835e:	3301      	adds	r3, #1
  408360:	2b01      	cmp	r3, #1
  408362:	461f      	mov	r7, r3
  408364:	461e      	mov	r6, r3
  408366:	930a      	str	r3, [sp, #40]	; 0x28
  408368:	bfb8      	it	lt
  40836a:	2701      	movlt	r7, #1
  40836c:	2100      	movs	r1, #0
  40836e:	2f17      	cmp	r7, #23
  408370:	6461      	str	r1, [r4, #68]	; 0x44
  408372:	d90a      	bls.n	40838a <_dtoa_r+0x762>
  408374:	2201      	movs	r2, #1
  408376:	2304      	movs	r3, #4
  408378:	005b      	lsls	r3, r3, #1
  40837a:	f103 0014 	add.w	r0, r3, #20
  40837e:	4287      	cmp	r7, r0
  408380:	4611      	mov	r1, r2
  408382:	f102 0201 	add.w	r2, r2, #1
  408386:	d2f7      	bcs.n	408378 <_dtoa_r+0x750>
  408388:	6461      	str	r1, [r4, #68]	; 0x44
  40838a:	4620      	mov	r0, r4
  40838c:	f001 f8dc 	bl	409548 <_Balloc>
  408390:	2e0e      	cmp	r6, #14
  408392:	9004      	str	r0, [sp, #16]
  408394:	6420      	str	r0, [r4, #64]	; 0x40
  408396:	f63f ad41 	bhi.w	407e1c <_dtoa_r+0x1f4>
  40839a:	2d00      	cmp	r5, #0
  40839c:	f43f ad3e 	beq.w	407e1c <_dtoa_r+0x1f4>
  4083a0:	9902      	ldr	r1, [sp, #8]
  4083a2:	2900      	cmp	r1, #0
  4083a4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4083a8:	f340 8202 	ble.w	4087b0 <_dtoa_r+0xb88>
  4083ac:	4bb8      	ldr	r3, [pc, #736]	; (408690 <_dtoa_r+0xa68>)
  4083ae:	f001 020f 	and.w	r2, r1, #15
  4083b2:	110d      	asrs	r5, r1, #4
  4083b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4083b8:	06e9      	lsls	r1, r5, #27
  4083ba:	e9d3 6700 	ldrd	r6, r7, [r3]
  4083be:	f140 81ae 	bpl.w	40871e <_dtoa_r+0xaf6>
  4083c2:	4bb4      	ldr	r3, [pc, #720]	; (408694 <_dtoa_r+0xa6c>)
  4083c4:	4650      	mov	r0, sl
  4083c6:	4659      	mov	r1, fp
  4083c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4083cc:	f7fb fe6e 	bl	4040ac <__aeabi_ddiv>
  4083d0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4083d4:	f005 050f 	and.w	r5, r5, #15
  4083d8:	f04f 0a03 	mov.w	sl, #3
  4083dc:	b18d      	cbz	r5, 408402 <_dtoa_r+0x7da>
  4083de:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 408694 <_dtoa_r+0xa6c>
  4083e2:	07ea      	lsls	r2, r5, #31
  4083e4:	d509      	bpl.n	4083fa <_dtoa_r+0x7d2>
  4083e6:	4630      	mov	r0, r6
  4083e8:	4639      	mov	r1, r7
  4083ea:	e9d8 2300 	ldrd	r2, r3, [r8]
  4083ee:	f7fb fd33 	bl	403e58 <__aeabi_dmul>
  4083f2:	f10a 0a01 	add.w	sl, sl, #1
  4083f6:	4606      	mov	r6, r0
  4083f8:	460f      	mov	r7, r1
  4083fa:	106d      	asrs	r5, r5, #1
  4083fc:	f108 0808 	add.w	r8, r8, #8
  408400:	d1ef      	bne.n	4083e2 <_dtoa_r+0x7ba>
  408402:	463b      	mov	r3, r7
  408404:	4632      	mov	r2, r6
  408406:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40840a:	f7fb fe4f 	bl	4040ac <__aeabi_ddiv>
  40840e:	4607      	mov	r7, r0
  408410:	4688      	mov	r8, r1
  408412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408414:	b143      	cbz	r3, 408428 <_dtoa_r+0x800>
  408416:	2200      	movs	r2, #0
  408418:	4b9f      	ldr	r3, [pc, #636]	; (408698 <_dtoa_r+0xa70>)
  40841a:	4638      	mov	r0, r7
  40841c:	4641      	mov	r1, r8
  40841e:	f7fb ff8d 	bl	40433c <__aeabi_dcmplt>
  408422:	2800      	cmp	r0, #0
  408424:	f040 8286 	bne.w	408934 <_dtoa_r+0xd0c>
  408428:	4650      	mov	r0, sl
  40842a:	f7fb fcaf 	bl	403d8c <__aeabi_i2d>
  40842e:	463a      	mov	r2, r7
  408430:	4643      	mov	r3, r8
  408432:	f7fb fd11 	bl	403e58 <__aeabi_dmul>
  408436:	4b99      	ldr	r3, [pc, #612]	; (40869c <_dtoa_r+0xa74>)
  408438:	2200      	movs	r2, #0
  40843a:	f7fb fb5b 	bl	403af4 <__adddf3>
  40843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408440:	4605      	mov	r5, r0
  408442:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408446:	2b00      	cmp	r3, #0
  408448:	f000 813e 	beq.w	4086c8 <_dtoa_r+0xaa0>
  40844c:	9b02      	ldr	r3, [sp, #8]
  40844e:	9315      	str	r3, [sp, #84]	; 0x54
  408450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408452:	9312      	str	r3, [sp, #72]	; 0x48
  408454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408456:	2b00      	cmp	r3, #0
  408458:	f000 81fa 	beq.w	408850 <_dtoa_r+0xc28>
  40845c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40845e:	4b8c      	ldr	r3, [pc, #560]	; (408690 <_dtoa_r+0xa68>)
  408460:	498f      	ldr	r1, [pc, #572]	; (4086a0 <_dtoa_r+0xa78>)
  408462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408466:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40846a:	2000      	movs	r0, #0
  40846c:	f7fb fe1e 	bl	4040ac <__aeabi_ddiv>
  408470:	462a      	mov	r2, r5
  408472:	4633      	mov	r3, r6
  408474:	f7fb fb3c 	bl	403af0 <__aeabi_dsub>
  408478:	4682      	mov	sl, r0
  40847a:	468b      	mov	fp, r1
  40847c:	4638      	mov	r0, r7
  40847e:	4641      	mov	r1, r8
  408480:	f002 f8ca 	bl	40a618 <__aeabi_d2iz>
  408484:	4605      	mov	r5, r0
  408486:	f7fb fc81 	bl	403d8c <__aeabi_i2d>
  40848a:	4602      	mov	r2, r0
  40848c:	460b      	mov	r3, r1
  40848e:	4638      	mov	r0, r7
  408490:	4641      	mov	r1, r8
  408492:	f7fb fb2d 	bl	403af0 <__aeabi_dsub>
  408496:	3530      	adds	r5, #48	; 0x30
  408498:	fa5f f885 	uxtb.w	r8, r5
  40849c:	9d04      	ldr	r5, [sp, #16]
  40849e:	4606      	mov	r6, r0
  4084a0:	460f      	mov	r7, r1
  4084a2:	f885 8000 	strb.w	r8, [r5]
  4084a6:	4602      	mov	r2, r0
  4084a8:	460b      	mov	r3, r1
  4084aa:	4650      	mov	r0, sl
  4084ac:	4659      	mov	r1, fp
  4084ae:	3501      	adds	r5, #1
  4084b0:	f7fb ff62 	bl	404378 <__aeabi_dcmpgt>
  4084b4:	2800      	cmp	r0, #0
  4084b6:	d154      	bne.n	408562 <_dtoa_r+0x93a>
  4084b8:	4632      	mov	r2, r6
  4084ba:	463b      	mov	r3, r7
  4084bc:	2000      	movs	r0, #0
  4084be:	4976      	ldr	r1, [pc, #472]	; (408698 <_dtoa_r+0xa70>)
  4084c0:	f7fb fb16 	bl	403af0 <__aeabi_dsub>
  4084c4:	4602      	mov	r2, r0
  4084c6:	460b      	mov	r3, r1
  4084c8:	4650      	mov	r0, sl
  4084ca:	4659      	mov	r1, fp
  4084cc:	f7fb ff54 	bl	404378 <__aeabi_dcmpgt>
  4084d0:	2800      	cmp	r0, #0
  4084d2:	f040 8270 	bne.w	4089b6 <_dtoa_r+0xd8e>
  4084d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4084d8:	2a01      	cmp	r2, #1
  4084da:	f000 8111 	beq.w	408700 <_dtoa_r+0xad8>
  4084de:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4084e0:	9a04      	ldr	r2, [sp, #16]
  4084e2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4084e6:	4413      	add	r3, r2
  4084e8:	4699      	mov	r9, r3
  4084ea:	e00d      	b.n	408508 <_dtoa_r+0x8e0>
  4084ec:	2000      	movs	r0, #0
  4084ee:	496a      	ldr	r1, [pc, #424]	; (408698 <_dtoa_r+0xa70>)
  4084f0:	f7fb fafe 	bl	403af0 <__aeabi_dsub>
  4084f4:	4652      	mov	r2, sl
  4084f6:	465b      	mov	r3, fp
  4084f8:	f7fb ff20 	bl	40433c <__aeabi_dcmplt>
  4084fc:	2800      	cmp	r0, #0
  4084fe:	f040 8258 	bne.w	4089b2 <_dtoa_r+0xd8a>
  408502:	454d      	cmp	r5, r9
  408504:	f000 80fa 	beq.w	4086fc <_dtoa_r+0xad4>
  408508:	4650      	mov	r0, sl
  40850a:	4659      	mov	r1, fp
  40850c:	2200      	movs	r2, #0
  40850e:	4b65      	ldr	r3, [pc, #404]	; (4086a4 <_dtoa_r+0xa7c>)
  408510:	f7fb fca2 	bl	403e58 <__aeabi_dmul>
  408514:	2200      	movs	r2, #0
  408516:	4b63      	ldr	r3, [pc, #396]	; (4086a4 <_dtoa_r+0xa7c>)
  408518:	4682      	mov	sl, r0
  40851a:	468b      	mov	fp, r1
  40851c:	4630      	mov	r0, r6
  40851e:	4639      	mov	r1, r7
  408520:	f7fb fc9a 	bl	403e58 <__aeabi_dmul>
  408524:	460f      	mov	r7, r1
  408526:	4606      	mov	r6, r0
  408528:	f002 f876 	bl	40a618 <__aeabi_d2iz>
  40852c:	4680      	mov	r8, r0
  40852e:	f7fb fc2d 	bl	403d8c <__aeabi_i2d>
  408532:	4602      	mov	r2, r0
  408534:	460b      	mov	r3, r1
  408536:	4630      	mov	r0, r6
  408538:	4639      	mov	r1, r7
  40853a:	f7fb fad9 	bl	403af0 <__aeabi_dsub>
  40853e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408542:	fa5f f888 	uxtb.w	r8, r8
  408546:	4652      	mov	r2, sl
  408548:	465b      	mov	r3, fp
  40854a:	f805 8b01 	strb.w	r8, [r5], #1
  40854e:	4606      	mov	r6, r0
  408550:	460f      	mov	r7, r1
  408552:	f7fb fef3 	bl	40433c <__aeabi_dcmplt>
  408556:	4632      	mov	r2, r6
  408558:	463b      	mov	r3, r7
  40855a:	2800      	cmp	r0, #0
  40855c:	d0c6      	beq.n	4084ec <_dtoa_r+0x8c4>
  40855e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408562:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408564:	9302      	str	r3, [sp, #8]
  408566:	e523      	b.n	407fb0 <_dtoa_r+0x388>
  408568:	2300      	movs	r3, #0
  40856a:	930b      	str	r3, [sp, #44]	; 0x2c
  40856c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40856e:	2b00      	cmp	r3, #0
  408570:	f340 80dc 	ble.w	40872c <_dtoa_r+0xb04>
  408574:	461f      	mov	r7, r3
  408576:	461e      	mov	r6, r3
  408578:	930f      	str	r3, [sp, #60]	; 0x3c
  40857a:	930a      	str	r3, [sp, #40]	; 0x28
  40857c:	e6f6      	b.n	40836c <_dtoa_r+0x744>
  40857e:	2301      	movs	r3, #1
  408580:	930b      	str	r3, [sp, #44]	; 0x2c
  408582:	e7f3      	b.n	40856c <_dtoa_r+0x944>
  408584:	f1ba 0f00 	cmp.w	sl, #0
  408588:	f47f ada8 	bne.w	4080dc <_dtoa_r+0x4b4>
  40858c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408590:	2b00      	cmp	r3, #0
  408592:	f47f adba 	bne.w	40810a <_dtoa_r+0x4e2>
  408596:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40859a:	0d3f      	lsrs	r7, r7, #20
  40859c:	053f      	lsls	r7, r7, #20
  40859e:	2f00      	cmp	r7, #0
  4085a0:	f000 820d 	beq.w	4089be <_dtoa_r+0xd96>
  4085a4:	9b08      	ldr	r3, [sp, #32]
  4085a6:	3301      	adds	r3, #1
  4085a8:	9308      	str	r3, [sp, #32]
  4085aa:	9b06      	ldr	r3, [sp, #24]
  4085ac:	3301      	adds	r3, #1
  4085ae:	9306      	str	r3, [sp, #24]
  4085b0:	2301      	movs	r3, #1
  4085b2:	930c      	str	r3, [sp, #48]	; 0x30
  4085b4:	e5ab      	b.n	40810e <_dtoa_r+0x4e6>
  4085b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4085b8:	2b00      	cmp	r3, #0
  4085ba:	f73f ac42 	bgt.w	407e42 <_dtoa_r+0x21a>
  4085be:	f040 8221 	bne.w	408a04 <_dtoa_r+0xddc>
  4085c2:	2200      	movs	r2, #0
  4085c4:	4b38      	ldr	r3, [pc, #224]	; (4086a8 <_dtoa_r+0xa80>)
  4085c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4085ca:	f7fb fc45 	bl	403e58 <__aeabi_dmul>
  4085ce:	4652      	mov	r2, sl
  4085d0:	465b      	mov	r3, fp
  4085d2:	f7fb fec7 	bl	404364 <__aeabi_dcmpge>
  4085d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4085da:	4646      	mov	r6, r8
  4085dc:	2800      	cmp	r0, #0
  4085de:	d041      	beq.n	408664 <_dtoa_r+0xa3c>
  4085e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4085e2:	9d04      	ldr	r5, [sp, #16]
  4085e4:	43db      	mvns	r3, r3
  4085e6:	9302      	str	r3, [sp, #8]
  4085e8:	4641      	mov	r1, r8
  4085ea:	4620      	mov	r0, r4
  4085ec:	f000 ffd2 	bl	409594 <_Bfree>
  4085f0:	2e00      	cmp	r6, #0
  4085f2:	f43f acdd 	beq.w	407fb0 <_dtoa_r+0x388>
  4085f6:	e6a7      	b.n	408348 <_dtoa_r+0x720>
  4085f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4085fa:	4649      	mov	r1, r9
  4085fc:	4620      	mov	r0, r4
  4085fe:	f001 f8ff 	bl	409800 <__pow5mult>
  408602:	4681      	mov	r9, r0
  408604:	e558      	b.n	4080b8 <_dtoa_r+0x490>
  408606:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408608:	2a00      	cmp	r2, #0
  40860a:	f000 8187 	beq.w	40891c <_dtoa_r+0xcf4>
  40860e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408612:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408614:	9d08      	ldr	r5, [sp, #32]
  408616:	e4f2      	b.n	407ffe <_dtoa_r+0x3d6>
  408618:	f1ba 0f00 	cmp.w	sl, #0
  40861c:	f47f ad75 	bne.w	40810a <_dtoa_r+0x4e2>
  408620:	e7b4      	b.n	40858c <_dtoa_r+0x964>
  408622:	f000 ffc1 	bl	4095a8 <__multadd>
  408626:	4647      	mov	r7, r8
  408628:	4606      	mov	r6, r0
  40862a:	4683      	mov	fp, r0
  40862c:	e5be      	b.n	4081ac <_dtoa_r+0x584>
  40862e:	4601      	mov	r1, r0
  408630:	4620      	mov	r0, r4
  408632:	9306      	str	r3, [sp, #24]
  408634:	f000 ffae 	bl	409594 <_Bfree>
  408638:	2201      	movs	r2, #1
  40863a:	9b06      	ldr	r3, [sp, #24]
  40863c:	e5e0      	b.n	408200 <_dtoa_r+0x5d8>
  40863e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408640:	2b02      	cmp	r3, #2
  408642:	f77f ad96 	ble.w	408172 <_dtoa_r+0x54a>
  408646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408648:	2b00      	cmp	r3, #0
  40864a:	d1c9      	bne.n	4085e0 <_dtoa_r+0x9b8>
  40864c:	4641      	mov	r1, r8
  40864e:	2205      	movs	r2, #5
  408650:	4620      	mov	r0, r4
  408652:	f000 ffa9 	bl	4095a8 <__multadd>
  408656:	4601      	mov	r1, r0
  408658:	4680      	mov	r8, r0
  40865a:	4648      	mov	r0, r9
  40865c:	f001 f972 	bl	409944 <__mcmp>
  408660:	2800      	cmp	r0, #0
  408662:	ddbd      	ble.n	4085e0 <_dtoa_r+0x9b8>
  408664:	9a02      	ldr	r2, [sp, #8]
  408666:	9904      	ldr	r1, [sp, #16]
  408668:	2331      	movs	r3, #49	; 0x31
  40866a:	3201      	adds	r2, #1
  40866c:	9202      	str	r2, [sp, #8]
  40866e:	700b      	strb	r3, [r1, #0]
  408670:	1c4d      	adds	r5, r1, #1
  408672:	e7b9      	b.n	4085e8 <_dtoa_r+0x9c0>
  408674:	9a02      	ldr	r2, [sp, #8]
  408676:	3201      	adds	r2, #1
  408678:	9202      	str	r2, [sp, #8]
  40867a:	9a04      	ldr	r2, [sp, #16]
  40867c:	2331      	movs	r3, #49	; 0x31
  40867e:	7013      	strb	r3, [r2, #0]
  408680:	e652      	b.n	408328 <_dtoa_r+0x700>
  408682:	2301      	movs	r3, #1
  408684:	930b      	str	r3, [sp, #44]	; 0x2c
  408686:	e666      	b.n	408356 <_dtoa_r+0x72e>
  408688:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40868c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40868e:	e48f      	b.n	407fb0 <_dtoa_r+0x388>
  408690:	0040adb8 	.word	0x0040adb8
  408694:	0040ad90 	.word	0x0040ad90
  408698:	3ff00000 	.word	0x3ff00000
  40869c:	401c0000 	.word	0x401c0000
  4086a0:	3fe00000 	.word	0x3fe00000
  4086a4:	40240000 	.word	0x40240000
  4086a8:	40140000 	.word	0x40140000
  4086ac:	4650      	mov	r0, sl
  4086ae:	f7fb fb6d 	bl	403d8c <__aeabi_i2d>
  4086b2:	463a      	mov	r2, r7
  4086b4:	4643      	mov	r3, r8
  4086b6:	f7fb fbcf 	bl	403e58 <__aeabi_dmul>
  4086ba:	2200      	movs	r2, #0
  4086bc:	4bc1      	ldr	r3, [pc, #772]	; (4089c4 <_dtoa_r+0xd9c>)
  4086be:	f7fb fa19 	bl	403af4 <__adddf3>
  4086c2:	4605      	mov	r5, r0
  4086c4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4086c8:	4641      	mov	r1, r8
  4086ca:	2200      	movs	r2, #0
  4086cc:	4bbe      	ldr	r3, [pc, #760]	; (4089c8 <_dtoa_r+0xda0>)
  4086ce:	4638      	mov	r0, r7
  4086d0:	f7fb fa0e 	bl	403af0 <__aeabi_dsub>
  4086d4:	462a      	mov	r2, r5
  4086d6:	4633      	mov	r3, r6
  4086d8:	4682      	mov	sl, r0
  4086da:	468b      	mov	fp, r1
  4086dc:	f7fb fe4c 	bl	404378 <__aeabi_dcmpgt>
  4086e0:	4680      	mov	r8, r0
  4086e2:	2800      	cmp	r0, #0
  4086e4:	f040 8110 	bne.w	408908 <_dtoa_r+0xce0>
  4086e8:	462a      	mov	r2, r5
  4086ea:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4086ee:	4650      	mov	r0, sl
  4086f0:	4659      	mov	r1, fp
  4086f2:	f7fb fe23 	bl	40433c <__aeabi_dcmplt>
  4086f6:	b118      	cbz	r0, 408700 <_dtoa_r+0xad8>
  4086f8:	4646      	mov	r6, r8
  4086fa:	e771      	b.n	4085e0 <_dtoa_r+0x9b8>
  4086fc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408700:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408704:	f7ff bb8a 	b.w	407e1c <_dtoa_r+0x1f4>
  408708:	9804      	ldr	r0, [sp, #16]
  40870a:	f7ff babb 	b.w	407c84 <_dtoa_r+0x5c>
  40870e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408712:	970c      	str	r7, [sp, #48]	; 0x30
  408714:	1afb      	subs	r3, r7, r3
  408716:	441a      	add	r2, r3
  408718:	920d      	str	r2, [sp, #52]	; 0x34
  40871a:	2700      	movs	r7, #0
  40871c:	e469      	b.n	407ff2 <_dtoa_r+0x3ca>
  40871e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408722:	f04f 0a02 	mov.w	sl, #2
  408726:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40872a:	e657      	b.n	4083dc <_dtoa_r+0x7b4>
  40872c:	2100      	movs	r1, #0
  40872e:	2301      	movs	r3, #1
  408730:	6461      	str	r1, [r4, #68]	; 0x44
  408732:	4620      	mov	r0, r4
  408734:	9325      	str	r3, [sp, #148]	; 0x94
  408736:	f000 ff07 	bl	409548 <_Balloc>
  40873a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40873c:	9004      	str	r0, [sp, #16]
  40873e:	6420      	str	r0, [r4, #64]	; 0x40
  408740:	930a      	str	r3, [sp, #40]	; 0x28
  408742:	930f      	str	r3, [sp, #60]	; 0x3c
  408744:	e629      	b.n	40839a <_dtoa_r+0x772>
  408746:	2a00      	cmp	r2, #0
  408748:	46d0      	mov	r8, sl
  40874a:	f8cd b018 	str.w	fp, [sp, #24]
  40874e:	469a      	mov	sl, r3
  408750:	dd11      	ble.n	408776 <_dtoa_r+0xb4e>
  408752:	4649      	mov	r1, r9
  408754:	2201      	movs	r2, #1
  408756:	4620      	mov	r0, r4
  408758:	f001 f8a2 	bl	4098a0 <__lshift>
  40875c:	4641      	mov	r1, r8
  40875e:	4681      	mov	r9, r0
  408760:	f001 f8f0 	bl	409944 <__mcmp>
  408764:	2800      	cmp	r0, #0
  408766:	f340 8146 	ble.w	4089f6 <_dtoa_r+0xdce>
  40876a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40876e:	f000 8106 	beq.w	40897e <_dtoa_r+0xd56>
  408772:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  408776:	46b3      	mov	fp, r6
  408778:	f887 a000 	strb.w	sl, [r7]
  40877c:	1c7d      	adds	r5, r7, #1
  40877e:	9e06      	ldr	r6, [sp, #24]
  408780:	e5d2      	b.n	408328 <_dtoa_r+0x700>
  408782:	d104      	bne.n	40878e <_dtoa_r+0xb66>
  408784:	f01a 0f01 	tst.w	sl, #1
  408788:	d001      	beq.n	40878e <_dtoa_r+0xb66>
  40878a:	e5bd      	b.n	408308 <_dtoa_r+0x6e0>
  40878c:	4615      	mov	r5, r2
  40878e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408792:	2b30      	cmp	r3, #48	; 0x30
  408794:	f105 32ff 	add.w	r2, r5, #4294967295
  408798:	d0f8      	beq.n	40878c <_dtoa_r+0xb64>
  40879a:	e5c5      	b.n	408328 <_dtoa_r+0x700>
  40879c:	9904      	ldr	r1, [sp, #16]
  40879e:	2230      	movs	r2, #48	; 0x30
  4087a0:	700a      	strb	r2, [r1, #0]
  4087a2:	9a02      	ldr	r2, [sp, #8]
  4087a4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4087a8:	3201      	adds	r2, #1
  4087aa:	9202      	str	r2, [sp, #8]
  4087ac:	f7ff bbfc 	b.w	407fa8 <_dtoa_r+0x380>
  4087b0:	f000 80bb 	beq.w	40892a <_dtoa_r+0xd02>
  4087b4:	9b02      	ldr	r3, [sp, #8]
  4087b6:	425d      	negs	r5, r3
  4087b8:	4b84      	ldr	r3, [pc, #528]	; (4089cc <_dtoa_r+0xda4>)
  4087ba:	f005 020f 	and.w	r2, r5, #15
  4087be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4087ca:	f7fb fb45 	bl	403e58 <__aeabi_dmul>
  4087ce:	112d      	asrs	r5, r5, #4
  4087d0:	4607      	mov	r7, r0
  4087d2:	4688      	mov	r8, r1
  4087d4:	f000 812c 	beq.w	408a30 <_dtoa_r+0xe08>
  4087d8:	4e7d      	ldr	r6, [pc, #500]	; (4089d0 <_dtoa_r+0xda8>)
  4087da:	f04f 0a02 	mov.w	sl, #2
  4087de:	07eb      	lsls	r3, r5, #31
  4087e0:	d509      	bpl.n	4087f6 <_dtoa_r+0xbce>
  4087e2:	4638      	mov	r0, r7
  4087e4:	4641      	mov	r1, r8
  4087e6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4087ea:	f7fb fb35 	bl	403e58 <__aeabi_dmul>
  4087ee:	f10a 0a01 	add.w	sl, sl, #1
  4087f2:	4607      	mov	r7, r0
  4087f4:	4688      	mov	r8, r1
  4087f6:	106d      	asrs	r5, r5, #1
  4087f8:	f106 0608 	add.w	r6, r6, #8
  4087fc:	d1ef      	bne.n	4087de <_dtoa_r+0xbb6>
  4087fe:	e608      	b.n	408412 <_dtoa_r+0x7ea>
  408800:	6871      	ldr	r1, [r6, #4]
  408802:	4620      	mov	r0, r4
  408804:	f000 fea0 	bl	409548 <_Balloc>
  408808:	6933      	ldr	r3, [r6, #16]
  40880a:	3302      	adds	r3, #2
  40880c:	009a      	lsls	r2, r3, #2
  40880e:	4605      	mov	r5, r0
  408810:	f106 010c 	add.w	r1, r6, #12
  408814:	300c      	adds	r0, #12
  408816:	f7fc f8f1 	bl	4049fc <memcpy>
  40881a:	4629      	mov	r1, r5
  40881c:	2201      	movs	r2, #1
  40881e:	4620      	mov	r0, r4
  408820:	f001 f83e 	bl	4098a0 <__lshift>
  408824:	9006      	str	r0, [sp, #24]
  408826:	e4b5      	b.n	408194 <_dtoa_r+0x56c>
  408828:	2b39      	cmp	r3, #57	; 0x39
  40882a:	f8cd b018 	str.w	fp, [sp, #24]
  40882e:	46d0      	mov	r8, sl
  408830:	f000 80a5 	beq.w	40897e <_dtoa_r+0xd56>
  408834:	f103 0a01 	add.w	sl, r3, #1
  408838:	46b3      	mov	fp, r6
  40883a:	f887 a000 	strb.w	sl, [r7]
  40883e:	1c7d      	adds	r5, r7, #1
  408840:	9e06      	ldr	r6, [sp, #24]
  408842:	e571      	b.n	408328 <_dtoa_r+0x700>
  408844:	465a      	mov	r2, fp
  408846:	46d0      	mov	r8, sl
  408848:	46b3      	mov	fp, r6
  40884a:	469a      	mov	sl, r3
  40884c:	4616      	mov	r6, r2
  40884e:	e54f      	b.n	4082f0 <_dtoa_r+0x6c8>
  408850:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408852:	495e      	ldr	r1, [pc, #376]	; (4089cc <_dtoa_r+0xda4>)
  408854:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408858:	462a      	mov	r2, r5
  40885a:	4633      	mov	r3, r6
  40885c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408860:	f7fb fafa 	bl	403e58 <__aeabi_dmul>
  408864:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408868:	4638      	mov	r0, r7
  40886a:	4641      	mov	r1, r8
  40886c:	f001 fed4 	bl	40a618 <__aeabi_d2iz>
  408870:	4605      	mov	r5, r0
  408872:	f7fb fa8b 	bl	403d8c <__aeabi_i2d>
  408876:	460b      	mov	r3, r1
  408878:	4602      	mov	r2, r0
  40887a:	4641      	mov	r1, r8
  40887c:	4638      	mov	r0, r7
  40887e:	f7fb f937 	bl	403af0 <__aeabi_dsub>
  408882:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408884:	460f      	mov	r7, r1
  408886:	9904      	ldr	r1, [sp, #16]
  408888:	3530      	adds	r5, #48	; 0x30
  40888a:	2b01      	cmp	r3, #1
  40888c:	700d      	strb	r5, [r1, #0]
  40888e:	4606      	mov	r6, r0
  408890:	f101 0501 	add.w	r5, r1, #1
  408894:	d026      	beq.n	4088e4 <_dtoa_r+0xcbc>
  408896:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408898:	9a04      	ldr	r2, [sp, #16]
  40889a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4089d8 <_dtoa_r+0xdb0>
  40889e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4088a2:	4413      	add	r3, r2
  4088a4:	f04f 0a00 	mov.w	sl, #0
  4088a8:	4699      	mov	r9, r3
  4088aa:	4652      	mov	r2, sl
  4088ac:	465b      	mov	r3, fp
  4088ae:	4630      	mov	r0, r6
  4088b0:	4639      	mov	r1, r7
  4088b2:	f7fb fad1 	bl	403e58 <__aeabi_dmul>
  4088b6:	460f      	mov	r7, r1
  4088b8:	4606      	mov	r6, r0
  4088ba:	f001 fead 	bl	40a618 <__aeabi_d2iz>
  4088be:	4680      	mov	r8, r0
  4088c0:	f7fb fa64 	bl	403d8c <__aeabi_i2d>
  4088c4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4088c8:	4602      	mov	r2, r0
  4088ca:	460b      	mov	r3, r1
  4088cc:	4630      	mov	r0, r6
  4088ce:	4639      	mov	r1, r7
  4088d0:	f7fb f90e 	bl	403af0 <__aeabi_dsub>
  4088d4:	f805 8b01 	strb.w	r8, [r5], #1
  4088d8:	454d      	cmp	r5, r9
  4088da:	4606      	mov	r6, r0
  4088dc:	460f      	mov	r7, r1
  4088de:	d1e4      	bne.n	4088aa <_dtoa_r+0xc82>
  4088e0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4088e4:	4b3b      	ldr	r3, [pc, #236]	; (4089d4 <_dtoa_r+0xdac>)
  4088e6:	2200      	movs	r2, #0
  4088e8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4088ec:	f7fb f902 	bl	403af4 <__adddf3>
  4088f0:	4632      	mov	r2, r6
  4088f2:	463b      	mov	r3, r7
  4088f4:	f7fb fd22 	bl	40433c <__aeabi_dcmplt>
  4088f8:	2800      	cmp	r0, #0
  4088fa:	d046      	beq.n	40898a <_dtoa_r+0xd62>
  4088fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4088fe:	9302      	str	r3, [sp, #8]
  408900:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408904:	f7ff bb43 	b.w	407f8e <_dtoa_r+0x366>
  408908:	f04f 0800 	mov.w	r8, #0
  40890c:	4646      	mov	r6, r8
  40890e:	e6a9      	b.n	408664 <_dtoa_r+0xa3c>
  408910:	9b08      	ldr	r3, [sp, #32]
  408912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408914:	1a9d      	subs	r5, r3, r2
  408916:	2300      	movs	r3, #0
  408918:	f7ff bb71 	b.w	407ffe <_dtoa_r+0x3d6>
  40891c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40891e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408920:	9d08      	ldr	r5, [sp, #32]
  408922:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408926:	f7ff bb6a 	b.w	407ffe <_dtoa_r+0x3d6>
  40892a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40892e:	f04f 0a02 	mov.w	sl, #2
  408932:	e56e      	b.n	408412 <_dtoa_r+0x7ea>
  408934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408936:	2b00      	cmp	r3, #0
  408938:	f43f aeb8 	beq.w	4086ac <_dtoa_r+0xa84>
  40893c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40893e:	2b00      	cmp	r3, #0
  408940:	f77f aede 	ble.w	408700 <_dtoa_r+0xad8>
  408944:	2200      	movs	r2, #0
  408946:	4b24      	ldr	r3, [pc, #144]	; (4089d8 <_dtoa_r+0xdb0>)
  408948:	4638      	mov	r0, r7
  40894a:	4641      	mov	r1, r8
  40894c:	f7fb fa84 	bl	403e58 <__aeabi_dmul>
  408950:	4607      	mov	r7, r0
  408952:	4688      	mov	r8, r1
  408954:	f10a 0001 	add.w	r0, sl, #1
  408958:	f7fb fa18 	bl	403d8c <__aeabi_i2d>
  40895c:	463a      	mov	r2, r7
  40895e:	4643      	mov	r3, r8
  408960:	f7fb fa7a 	bl	403e58 <__aeabi_dmul>
  408964:	2200      	movs	r2, #0
  408966:	4b17      	ldr	r3, [pc, #92]	; (4089c4 <_dtoa_r+0xd9c>)
  408968:	f7fb f8c4 	bl	403af4 <__adddf3>
  40896c:	9a02      	ldr	r2, [sp, #8]
  40896e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408970:	9312      	str	r3, [sp, #72]	; 0x48
  408972:	3a01      	subs	r2, #1
  408974:	4605      	mov	r5, r0
  408976:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40897a:	9215      	str	r2, [sp, #84]	; 0x54
  40897c:	e56a      	b.n	408454 <_dtoa_r+0x82c>
  40897e:	2239      	movs	r2, #57	; 0x39
  408980:	46b3      	mov	fp, r6
  408982:	703a      	strb	r2, [r7, #0]
  408984:	9e06      	ldr	r6, [sp, #24]
  408986:	1c7d      	adds	r5, r7, #1
  408988:	e4c0      	b.n	40830c <_dtoa_r+0x6e4>
  40898a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40898e:	2000      	movs	r0, #0
  408990:	4910      	ldr	r1, [pc, #64]	; (4089d4 <_dtoa_r+0xdac>)
  408992:	f7fb f8ad 	bl	403af0 <__aeabi_dsub>
  408996:	4632      	mov	r2, r6
  408998:	463b      	mov	r3, r7
  40899a:	f7fb fced 	bl	404378 <__aeabi_dcmpgt>
  40899e:	b908      	cbnz	r0, 4089a4 <_dtoa_r+0xd7c>
  4089a0:	e6ae      	b.n	408700 <_dtoa_r+0xad8>
  4089a2:	4615      	mov	r5, r2
  4089a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4089a8:	2b30      	cmp	r3, #48	; 0x30
  4089aa:	f105 32ff 	add.w	r2, r5, #4294967295
  4089ae:	d0f8      	beq.n	4089a2 <_dtoa_r+0xd7a>
  4089b0:	e5d7      	b.n	408562 <_dtoa_r+0x93a>
  4089b2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4089b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4089b8:	9302      	str	r3, [sp, #8]
  4089ba:	f7ff bae8 	b.w	407f8e <_dtoa_r+0x366>
  4089be:	970c      	str	r7, [sp, #48]	; 0x30
  4089c0:	f7ff bba5 	b.w	40810e <_dtoa_r+0x4e6>
  4089c4:	401c0000 	.word	0x401c0000
  4089c8:	40140000 	.word	0x40140000
  4089cc:	0040adb8 	.word	0x0040adb8
  4089d0:	0040ad90 	.word	0x0040ad90
  4089d4:	3fe00000 	.word	0x3fe00000
  4089d8:	40240000 	.word	0x40240000
  4089dc:	2b39      	cmp	r3, #57	; 0x39
  4089de:	f8cd b018 	str.w	fp, [sp, #24]
  4089e2:	46d0      	mov	r8, sl
  4089e4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4089e8:	469a      	mov	sl, r3
  4089ea:	d0c8      	beq.n	40897e <_dtoa_r+0xd56>
  4089ec:	f1bb 0f00 	cmp.w	fp, #0
  4089f0:	f73f aebf 	bgt.w	408772 <_dtoa_r+0xb4a>
  4089f4:	e6bf      	b.n	408776 <_dtoa_r+0xb4e>
  4089f6:	f47f aebe 	bne.w	408776 <_dtoa_r+0xb4e>
  4089fa:	f01a 0f01 	tst.w	sl, #1
  4089fe:	f43f aeba 	beq.w	408776 <_dtoa_r+0xb4e>
  408a02:	e6b2      	b.n	40876a <_dtoa_r+0xb42>
  408a04:	f04f 0800 	mov.w	r8, #0
  408a08:	4646      	mov	r6, r8
  408a0a:	e5e9      	b.n	4085e0 <_dtoa_r+0x9b8>
  408a0c:	4631      	mov	r1, r6
  408a0e:	2300      	movs	r3, #0
  408a10:	220a      	movs	r2, #10
  408a12:	4620      	mov	r0, r4
  408a14:	f000 fdc8 	bl	4095a8 <__multadd>
  408a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a1a:	2b00      	cmp	r3, #0
  408a1c:	4606      	mov	r6, r0
  408a1e:	dd0a      	ble.n	408a36 <_dtoa_r+0xe0e>
  408a20:	930a      	str	r3, [sp, #40]	; 0x28
  408a22:	f7ff bbaa 	b.w	40817a <_dtoa_r+0x552>
  408a26:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a28:	2b02      	cmp	r3, #2
  408a2a:	dc23      	bgt.n	408a74 <_dtoa_r+0xe4c>
  408a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a2e:	e43b      	b.n	4082a8 <_dtoa_r+0x680>
  408a30:	f04f 0a02 	mov.w	sl, #2
  408a34:	e4ed      	b.n	408412 <_dtoa_r+0x7ea>
  408a36:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a38:	2b02      	cmp	r3, #2
  408a3a:	dc1b      	bgt.n	408a74 <_dtoa_r+0xe4c>
  408a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a3e:	e7ef      	b.n	408a20 <_dtoa_r+0xdf8>
  408a40:	2500      	movs	r5, #0
  408a42:	6465      	str	r5, [r4, #68]	; 0x44
  408a44:	4629      	mov	r1, r5
  408a46:	4620      	mov	r0, r4
  408a48:	f000 fd7e 	bl	409548 <_Balloc>
  408a4c:	f04f 33ff 	mov.w	r3, #4294967295
  408a50:	930a      	str	r3, [sp, #40]	; 0x28
  408a52:	930f      	str	r3, [sp, #60]	; 0x3c
  408a54:	2301      	movs	r3, #1
  408a56:	9004      	str	r0, [sp, #16]
  408a58:	9525      	str	r5, [sp, #148]	; 0x94
  408a5a:	6420      	str	r0, [r4, #64]	; 0x40
  408a5c:	930b      	str	r3, [sp, #44]	; 0x2c
  408a5e:	f7ff b9dd 	b.w	407e1c <_dtoa_r+0x1f4>
  408a62:	2501      	movs	r5, #1
  408a64:	f7ff b9a5 	b.w	407db2 <_dtoa_r+0x18a>
  408a68:	f43f ab69 	beq.w	40813e <_dtoa_r+0x516>
  408a6c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408a70:	f7ff bbf9 	b.w	408266 <_dtoa_r+0x63e>
  408a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a76:	930a      	str	r3, [sp, #40]	; 0x28
  408a78:	e5e5      	b.n	408646 <_dtoa_r+0xa1e>
  408a7a:	bf00      	nop

00408a7c <__sflush_r>:
  408a7c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408a80:	b29a      	uxth	r2, r3
  408a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408a86:	460d      	mov	r5, r1
  408a88:	0711      	lsls	r1, r2, #28
  408a8a:	4680      	mov	r8, r0
  408a8c:	d43a      	bmi.n	408b04 <__sflush_r+0x88>
  408a8e:	686a      	ldr	r2, [r5, #4]
  408a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408a94:	2a00      	cmp	r2, #0
  408a96:	81ab      	strh	r3, [r5, #12]
  408a98:	dd6f      	ble.n	408b7a <__sflush_r+0xfe>
  408a9a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408a9c:	2c00      	cmp	r4, #0
  408a9e:	d049      	beq.n	408b34 <__sflush_r+0xb8>
  408aa0:	2200      	movs	r2, #0
  408aa2:	b29b      	uxth	r3, r3
  408aa4:	f8d8 6000 	ldr.w	r6, [r8]
  408aa8:	f8c8 2000 	str.w	r2, [r8]
  408aac:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408ab0:	d067      	beq.n	408b82 <__sflush_r+0x106>
  408ab2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408ab4:	075f      	lsls	r7, r3, #29
  408ab6:	d505      	bpl.n	408ac4 <__sflush_r+0x48>
  408ab8:	6869      	ldr	r1, [r5, #4]
  408aba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408abc:	1a52      	subs	r2, r2, r1
  408abe:	b10b      	cbz	r3, 408ac4 <__sflush_r+0x48>
  408ac0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408ac2:	1ad2      	subs	r2, r2, r3
  408ac4:	2300      	movs	r3, #0
  408ac6:	69e9      	ldr	r1, [r5, #28]
  408ac8:	4640      	mov	r0, r8
  408aca:	47a0      	blx	r4
  408acc:	1c44      	adds	r4, r0, #1
  408ace:	d03c      	beq.n	408b4a <__sflush_r+0xce>
  408ad0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408ad4:	692a      	ldr	r2, [r5, #16]
  408ad6:	602a      	str	r2, [r5, #0]
  408ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408adc:	2200      	movs	r2, #0
  408ade:	81ab      	strh	r3, [r5, #12]
  408ae0:	04db      	lsls	r3, r3, #19
  408ae2:	606a      	str	r2, [r5, #4]
  408ae4:	d447      	bmi.n	408b76 <__sflush_r+0xfa>
  408ae6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408ae8:	f8c8 6000 	str.w	r6, [r8]
  408aec:	b311      	cbz	r1, 408b34 <__sflush_r+0xb8>
  408aee:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408af2:	4299      	cmp	r1, r3
  408af4:	d002      	beq.n	408afc <__sflush_r+0x80>
  408af6:	4640      	mov	r0, r8
  408af8:	f000 f95a 	bl	408db0 <_free_r>
  408afc:	2000      	movs	r0, #0
  408afe:	6328      	str	r0, [r5, #48]	; 0x30
  408b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b04:	692e      	ldr	r6, [r5, #16]
  408b06:	b1ae      	cbz	r6, 408b34 <__sflush_r+0xb8>
  408b08:	682c      	ldr	r4, [r5, #0]
  408b0a:	602e      	str	r6, [r5, #0]
  408b0c:	0791      	lsls	r1, r2, #30
  408b0e:	bf0c      	ite	eq
  408b10:	696b      	ldreq	r3, [r5, #20]
  408b12:	2300      	movne	r3, #0
  408b14:	1ba4      	subs	r4, r4, r6
  408b16:	60ab      	str	r3, [r5, #8]
  408b18:	e00a      	b.n	408b30 <__sflush_r+0xb4>
  408b1a:	4623      	mov	r3, r4
  408b1c:	4632      	mov	r2, r6
  408b1e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408b20:	69e9      	ldr	r1, [r5, #28]
  408b22:	4640      	mov	r0, r8
  408b24:	47b8      	blx	r7
  408b26:	2800      	cmp	r0, #0
  408b28:	eba4 0400 	sub.w	r4, r4, r0
  408b2c:	4406      	add	r6, r0
  408b2e:	dd04      	ble.n	408b3a <__sflush_r+0xbe>
  408b30:	2c00      	cmp	r4, #0
  408b32:	dcf2      	bgt.n	408b1a <__sflush_r+0x9e>
  408b34:	2000      	movs	r0, #0
  408b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b3a:	89ab      	ldrh	r3, [r5, #12]
  408b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408b40:	81ab      	strh	r3, [r5, #12]
  408b42:	f04f 30ff 	mov.w	r0, #4294967295
  408b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b4a:	f8d8 4000 	ldr.w	r4, [r8]
  408b4e:	2c1d      	cmp	r4, #29
  408b50:	d8f3      	bhi.n	408b3a <__sflush_r+0xbe>
  408b52:	4b19      	ldr	r3, [pc, #100]	; (408bb8 <__sflush_r+0x13c>)
  408b54:	40e3      	lsrs	r3, r4
  408b56:	43db      	mvns	r3, r3
  408b58:	f013 0301 	ands.w	r3, r3, #1
  408b5c:	d1ed      	bne.n	408b3a <__sflush_r+0xbe>
  408b5e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  408b62:	606b      	str	r3, [r5, #4]
  408b64:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408b68:	6929      	ldr	r1, [r5, #16]
  408b6a:	81ab      	strh	r3, [r5, #12]
  408b6c:	04da      	lsls	r2, r3, #19
  408b6e:	6029      	str	r1, [r5, #0]
  408b70:	d5b9      	bpl.n	408ae6 <__sflush_r+0x6a>
  408b72:	2c00      	cmp	r4, #0
  408b74:	d1b7      	bne.n	408ae6 <__sflush_r+0x6a>
  408b76:	6528      	str	r0, [r5, #80]	; 0x50
  408b78:	e7b5      	b.n	408ae6 <__sflush_r+0x6a>
  408b7a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408b7c:	2a00      	cmp	r2, #0
  408b7e:	dc8c      	bgt.n	408a9a <__sflush_r+0x1e>
  408b80:	e7d8      	b.n	408b34 <__sflush_r+0xb8>
  408b82:	2301      	movs	r3, #1
  408b84:	69e9      	ldr	r1, [r5, #28]
  408b86:	4640      	mov	r0, r8
  408b88:	47a0      	blx	r4
  408b8a:	1c43      	adds	r3, r0, #1
  408b8c:	4602      	mov	r2, r0
  408b8e:	d002      	beq.n	408b96 <__sflush_r+0x11a>
  408b90:	89ab      	ldrh	r3, [r5, #12]
  408b92:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408b94:	e78e      	b.n	408ab4 <__sflush_r+0x38>
  408b96:	f8d8 3000 	ldr.w	r3, [r8]
  408b9a:	2b00      	cmp	r3, #0
  408b9c:	d0f8      	beq.n	408b90 <__sflush_r+0x114>
  408b9e:	2b1d      	cmp	r3, #29
  408ba0:	d001      	beq.n	408ba6 <__sflush_r+0x12a>
  408ba2:	2b16      	cmp	r3, #22
  408ba4:	d102      	bne.n	408bac <__sflush_r+0x130>
  408ba6:	f8c8 6000 	str.w	r6, [r8]
  408baa:	e7c3      	b.n	408b34 <__sflush_r+0xb8>
  408bac:	89ab      	ldrh	r3, [r5, #12]
  408bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408bb2:	81ab      	strh	r3, [r5, #12]
  408bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bb8:	20400001 	.word	0x20400001

00408bbc <_fflush_r>:
  408bbc:	b538      	push	{r3, r4, r5, lr}
  408bbe:	460d      	mov	r5, r1
  408bc0:	4604      	mov	r4, r0
  408bc2:	b108      	cbz	r0, 408bc8 <_fflush_r+0xc>
  408bc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408bc6:	b1bb      	cbz	r3, 408bf8 <_fflush_r+0x3c>
  408bc8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408bcc:	b188      	cbz	r0, 408bf2 <_fflush_r+0x36>
  408bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408bd0:	07db      	lsls	r3, r3, #31
  408bd2:	d401      	bmi.n	408bd8 <_fflush_r+0x1c>
  408bd4:	0581      	lsls	r1, r0, #22
  408bd6:	d517      	bpl.n	408c08 <_fflush_r+0x4c>
  408bd8:	4620      	mov	r0, r4
  408bda:	4629      	mov	r1, r5
  408bdc:	f7ff ff4e 	bl	408a7c <__sflush_r>
  408be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408be2:	07da      	lsls	r2, r3, #31
  408be4:	4604      	mov	r4, r0
  408be6:	d402      	bmi.n	408bee <_fflush_r+0x32>
  408be8:	89ab      	ldrh	r3, [r5, #12]
  408bea:	059b      	lsls	r3, r3, #22
  408bec:	d507      	bpl.n	408bfe <_fflush_r+0x42>
  408bee:	4620      	mov	r0, r4
  408bf0:	bd38      	pop	{r3, r4, r5, pc}
  408bf2:	4604      	mov	r4, r0
  408bf4:	4620      	mov	r0, r4
  408bf6:	bd38      	pop	{r3, r4, r5, pc}
  408bf8:	f000 f838 	bl	408c6c <__sinit>
  408bfc:	e7e4      	b.n	408bc8 <_fflush_r+0xc>
  408bfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408c00:	f000 fb72 	bl	4092e8 <__retarget_lock_release_recursive>
  408c04:	4620      	mov	r0, r4
  408c06:	bd38      	pop	{r3, r4, r5, pc}
  408c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408c0a:	f000 fb6b 	bl	4092e4 <__retarget_lock_acquire_recursive>
  408c0e:	e7e3      	b.n	408bd8 <_fflush_r+0x1c>

00408c10 <_cleanup_r>:
  408c10:	4901      	ldr	r1, [pc, #4]	; (408c18 <_cleanup_r+0x8>)
  408c12:	f000 bb2b 	b.w	40926c <_fwalk_reent>
  408c16:	bf00      	nop
  408c18:	0040a215 	.word	0x0040a215

00408c1c <std.isra.0>:
  408c1c:	b510      	push	{r4, lr}
  408c1e:	2300      	movs	r3, #0
  408c20:	4604      	mov	r4, r0
  408c22:	8181      	strh	r1, [r0, #12]
  408c24:	81c2      	strh	r2, [r0, #14]
  408c26:	6003      	str	r3, [r0, #0]
  408c28:	6043      	str	r3, [r0, #4]
  408c2a:	6083      	str	r3, [r0, #8]
  408c2c:	6643      	str	r3, [r0, #100]	; 0x64
  408c2e:	6103      	str	r3, [r0, #16]
  408c30:	6143      	str	r3, [r0, #20]
  408c32:	6183      	str	r3, [r0, #24]
  408c34:	4619      	mov	r1, r3
  408c36:	2208      	movs	r2, #8
  408c38:	305c      	adds	r0, #92	; 0x5c
  408c3a:	f7fb ff79 	bl	404b30 <memset>
  408c3e:	4807      	ldr	r0, [pc, #28]	; (408c5c <std.isra.0+0x40>)
  408c40:	4907      	ldr	r1, [pc, #28]	; (408c60 <std.isra.0+0x44>)
  408c42:	4a08      	ldr	r2, [pc, #32]	; (408c64 <std.isra.0+0x48>)
  408c44:	4b08      	ldr	r3, [pc, #32]	; (408c68 <std.isra.0+0x4c>)
  408c46:	6220      	str	r0, [r4, #32]
  408c48:	61e4      	str	r4, [r4, #28]
  408c4a:	6261      	str	r1, [r4, #36]	; 0x24
  408c4c:	62a2      	str	r2, [r4, #40]	; 0x28
  408c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408c50:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408c58:	f000 bb40 	b.w	4092dc <__retarget_lock_init_recursive>
  408c5c:	00409e89 	.word	0x00409e89
  408c60:	00409ead 	.word	0x00409ead
  408c64:	00409ee9 	.word	0x00409ee9
  408c68:	00409f09 	.word	0x00409f09

00408c6c <__sinit>:
  408c6c:	b510      	push	{r4, lr}
  408c6e:	4604      	mov	r4, r0
  408c70:	4812      	ldr	r0, [pc, #72]	; (408cbc <__sinit+0x50>)
  408c72:	f000 fb37 	bl	4092e4 <__retarget_lock_acquire_recursive>
  408c76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408c78:	b9d2      	cbnz	r2, 408cb0 <__sinit+0x44>
  408c7a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  408c7e:	4810      	ldr	r0, [pc, #64]	; (408cc0 <__sinit+0x54>)
  408c80:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  408c84:	2103      	movs	r1, #3
  408c86:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408c8a:	63e0      	str	r0, [r4, #60]	; 0x3c
  408c8c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408c90:	6860      	ldr	r0, [r4, #4]
  408c92:	2104      	movs	r1, #4
  408c94:	f7ff ffc2 	bl	408c1c <std.isra.0>
  408c98:	2201      	movs	r2, #1
  408c9a:	2109      	movs	r1, #9
  408c9c:	68a0      	ldr	r0, [r4, #8]
  408c9e:	f7ff ffbd 	bl	408c1c <std.isra.0>
  408ca2:	2202      	movs	r2, #2
  408ca4:	2112      	movs	r1, #18
  408ca6:	68e0      	ldr	r0, [r4, #12]
  408ca8:	f7ff ffb8 	bl	408c1c <std.isra.0>
  408cac:	2301      	movs	r3, #1
  408cae:	63a3      	str	r3, [r4, #56]	; 0x38
  408cb0:	4802      	ldr	r0, [pc, #8]	; (408cbc <__sinit+0x50>)
  408cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408cb6:	f000 bb17 	b.w	4092e8 <__retarget_lock_release_recursive>
  408cba:	bf00      	nop
  408cbc:	20400ec8 	.word	0x20400ec8
  408cc0:	00408c11 	.word	0x00408c11

00408cc4 <__sfp_lock_acquire>:
  408cc4:	4801      	ldr	r0, [pc, #4]	; (408ccc <__sfp_lock_acquire+0x8>)
  408cc6:	f000 bb0d 	b.w	4092e4 <__retarget_lock_acquire_recursive>
  408cca:	bf00      	nop
  408ccc:	20400edc 	.word	0x20400edc

00408cd0 <__sfp_lock_release>:
  408cd0:	4801      	ldr	r0, [pc, #4]	; (408cd8 <__sfp_lock_release+0x8>)
  408cd2:	f000 bb09 	b.w	4092e8 <__retarget_lock_release_recursive>
  408cd6:	bf00      	nop
  408cd8:	20400edc 	.word	0x20400edc

00408cdc <__libc_fini_array>:
  408cdc:	b538      	push	{r3, r4, r5, lr}
  408cde:	4c0a      	ldr	r4, [pc, #40]	; (408d08 <__libc_fini_array+0x2c>)
  408ce0:	4d0a      	ldr	r5, [pc, #40]	; (408d0c <__libc_fini_array+0x30>)
  408ce2:	1b64      	subs	r4, r4, r5
  408ce4:	10a4      	asrs	r4, r4, #2
  408ce6:	d00a      	beq.n	408cfe <__libc_fini_array+0x22>
  408ce8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408cec:	3b01      	subs	r3, #1
  408cee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408cf2:	3c01      	subs	r4, #1
  408cf4:	f855 3904 	ldr.w	r3, [r5], #-4
  408cf8:	4798      	blx	r3
  408cfa:	2c00      	cmp	r4, #0
  408cfc:	d1f9      	bne.n	408cf2 <__libc_fini_array+0x16>
  408cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408d02:	f002 b957 	b.w	40afb4 <_fini>
  408d06:	bf00      	nop
  408d08:	0040afc4 	.word	0x0040afc4
  408d0c:	0040afc0 	.word	0x0040afc0

00408d10 <_malloc_trim_r>:
  408d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d12:	4f24      	ldr	r7, [pc, #144]	; (408da4 <_malloc_trim_r+0x94>)
  408d14:	460c      	mov	r4, r1
  408d16:	4606      	mov	r6, r0
  408d18:	f7fb ff58 	bl	404bcc <__malloc_lock>
  408d1c:	68bb      	ldr	r3, [r7, #8]
  408d1e:	685d      	ldr	r5, [r3, #4]
  408d20:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408d24:	310f      	adds	r1, #15
  408d26:	f025 0503 	bic.w	r5, r5, #3
  408d2a:	4429      	add	r1, r5
  408d2c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408d30:	f021 010f 	bic.w	r1, r1, #15
  408d34:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408d38:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408d3c:	db07      	blt.n	408d4e <_malloc_trim_r+0x3e>
  408d3e:	2100      	movs	r1, #0
  408d40:	4630      	mov	r0, r6
  408d42:	f7fb ffb9 	bl	404cb8 <_sbrk_r>
  408d46:	68bb      	ldr	r3, [r7, #8]
  408d48:	442b      	add	r3, r5
  408d4a:	4298      	cmp	r0, r3
  408d4c:	d004      	beq.n	408d58 <_malloc_trim_r+0x48>
  408d4e:	4630      	mov	r0, r6
  408d50:	f7fb ff42 	bl	404bd8 <__malloc_unlock>
  408d54:	2000      	movs	r0, #0
  408d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d58:	4261      	negs	r1, r4
  408d5a:	4630      	mov	r0, r6
  408d5c:	f7fb ffac 	bl	404cb8 <_sbrk_r>
  408d60:	3001      	adds	r0, #1
  408d62:	d00d      	beq.n	408d80 <_malloc_trim_r+0x70>
  408d64:	4b10      	ldr	r3, [pc, #64]	; (408da8 <_malloc_trim_r+0x98>)
  408d66:	68ba      	ldr	r2, [r7, #8]
  408d68:	6819      	ldr	r1, [r3, #0]
  408d6a:	1b2d      	subs	r5, r5, r4
  408d6c:	f045 0501 	orr.w	r5, r5, #1
  408d70:	4630      	mov	r0, r6
  408d72:	1b09      	subs	r1, r1, r4
  408d74:	6055      	str	r5, [r2, #4]
  408d76:	6019      	str	r1, [r3, #0]
  408d78:	f7fb ff2e 	bl	404bd8 <__malloc_unlock>
  408d7c:	2001      	movs	r0, #1
  408d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d80:	2100      	movs	r1, #0
  408d82:	4630      	mov	r0, r6
  408d84:	f7fb ff98 	bl	404cb8 <_sbrk_r>
  408d88:	68ba      	ldr	r2, [r7, #8]
  408d8a:	1a83      	subs	r3, r0, r2
  408d8c:	2b0f      	cmp	r3, #15
  408d8e:	ddde      	ble.n	408d4e <_malloc_trim_r+0x3e>
  408d90:	4c06      	ldr	r4, [pc, #24]	; (408dac <_malloc_trim_r+0x9c>)
  408d92:	4905      	ldr	r1, [pc, #20]	; (408da8 <_malloc_trim_r+0x98>)
  408d94:	6824      	ldr	r4, [r4, #0]
  408d96:	f043 0301 	orr.w	r3, r3, #1
  408d9a:	1b00      	subs	r0, r0, r4
  408d9c:	6053      	str	r3, [r2, #4]
  408d9e:	6008      	str	r0, [r1, #0]
  408da0:	e7d5      	b.n	408d4e <_malloc_trim_r+0x3e>
  408da2:	bf00      	nop
  408da4:	204004a8 	.word	0x204004a8
  408da8:	20400e30 	.word	0x20400e30
  408dac:	204008b0 	.word	0x204008b0

00408db0 <_free_r>:
  408db0:	2900      	cmp	r1, #0
  408db2:	d044      	beq.n	408e3e <_free_r+0x8e>
  408db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408db8:	460d      	mov	r5, r1
  408dba:	4680      	mov	r8, r0
  408dbc:	f7fb ff06 	bl	404bcc <__malloc_lock>
  408dc0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408dc4:	4969      	ldr	r1, [pc, #420]	; (408f6c <_free_r+0x1bc>)
  408dc6:	f027 0301 	bic.w	r3, r7, #1
  408dca:	f1a5 0408 	sub.w	r4, r5, #8
  408dce:	18e2      	adds	r2, r4, r3
  408dd0:	688e      	ldr	r6, [r1, #8]
  408dd2:	6850      	ldr	r0, [r2, #4]
  408dd4:	42b2      	cmp	r2, r6
  408dd6:	f020 0003 	bic.w	r0, r0, #3
  408dda:	d05e      	beq.n	408e9a <_free_r+0xea>
  408ddc:	07fe      	lsls	r6, r7, #31
  408dde:	6050      	str	r0, [r2, #4]
  408de0:	d40b      	bmi.n	408dfa <_free_r+0x4a>
  408de2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408de6:	1be4      	subs	r4, r4, r7
  408de8:	f101 0e08 	add.w	lr, r1, #8
  408dec:	68a5      	ldr	r5, [r4, #8]
  408dee:	4575      	cmp	r5, lr
  408df0:	443b      	add	r3, r7
  408df2:	d06d      	beq.n	408ed0 <_free_r+0x120>
  408df4:	68e7      	ldr	r7, [r4, #12]
  408df6:	60ef      	str	r7, [r5, #12]
  408df8:	60bd      	str	r5, [r7, #8]
  408dfa:	1815      	adds	r5, r2, r0
  408dfc:	686d      	ldr	r5, [r5, #4]
  408dfe:	07ed      	lsls	r5, r5, #31
  408e00:	d53e      	bpl.n	408e80 <_free_r+0xd0>
  408e02:	f043 0201 	orr.w	r2, r3, #1
  408e06:	6062      	str	r2, [r4, #4]
  408e08:	50e3      	str	r3, [r4, r3]
  408e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408e0e:	d217      	bcs.n	408e40 <_free_r+0x90>
  408e10:	08db      	lsrs	r3, r3, #3
  408e12:	1c58      	adds	r0, r3, #1
  408e14:	109a      	asrs	r2, r3, #2
  408e16:	684d      	ldr	r5, [r1, #4]
  408e18:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408e1c:	60a7      	str	r7, [r4, #8]
  408e1e:	2301      	movs	r3, #1
  408e20:	4093      	lsls	r3, r2
  408e22:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408e26:	432b      	orrs	r3, r5
  408e28:	3a08      	subs	r2, #8
  408e2a:	60e2      	str	r2, [r4, #12]
  408e2c:	604b      	str	r3, [r1, #4]
  408e2e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408e32:	60fc      	str	r4, [r7, #12]
  408e34:	4640      	mov	r0, r8
  408e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408e3a:	f7fb becd 	b.w	404bd8 <__malloc_unlock>
  408e3e:	4770      	bx	lr
  408e40:	0a5a      	lsrs	r2, r3, #9
  408e42:	2a04      	cmp	r2, #4
  408e44:	d852      	bhi.n	408eec <_free_r+0x13c>
  408e46:	099a      	lsrs	r2, r3, #6
  408e48:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408e4c:	00ff      	lsls	r7, r7, #3
  408e4e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408e52:	19c8      	adds	r0, r1, r7
  408e54:	59ca      	ldr	r2, [r1, r7]
  408e56:	3808      	subs	r0, #8
  408e58:	4290      	cmp	r0, r2
  408e5a:	d04f      	beq.n	408efc <_free_r+0x14c>
  408e5c:	6851      	ldr	r1, [r2, #4]
  408e5e:	f021 0103 	bic.w	r1, r1, #3
  408e62:	428b      	cmp	r3, r1
  408e64:	d232      	bcs.n	408ecc <_free_r+0x11c>
  408e66:	6892      	ldr	r2, [r2, #8]
  408e68:	4290      	cmp	r0, r2
  408e6a:	d1f7      	bne.n	408e5c <_free_r+0xac>
  408e6c:	68c3      	ldr	r3, [r0, #12]
  408e6e:	60a0      	str	r0, [r4, #8]
  408e70:	60e3      	str	r3, [r4, #12]
  408e72:	609c      	str	r4, [r3, #8]
  408e74:	60c4      	str	r4, [r0, #12]
  408e76:	4640      	mov	r0, r8
  408e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408e7c:	f7fb beac 	b.w	404bd8 <__malloc_unlock>
  408e80:	6895      	ldr	r5, [r2, #8]
  408e82:	4f3b      	ldr	r7, [pc, #236]	; (408f70 <_free_r+0x1c0>)
  408e84:	42bd      	cmp	r5, r7
  408e86:	4403      	add	r3, r0
  408e88:	d040      	beq.n	408f0c <_free_r+0x15c>
  408e8a:	68d0      	ldr	r0, [r2, #12]
  408e8c:	60e8      	str	r0, [r5, #12]
  408e8e:	f043 0201 	orr.w	r2, r3, #1
  408e92:	6085      	str	r5, [r0, #8]
  408e94:	6062      	str	r2, [r4, #4]
  408e96:	50e3      	str	r3, [r4, r3]
  408e98:	e7b7      	b.n	408e0a <_free_r+0x5a>
  408e9a:	07ff      	lsls	r7, r7, #31
  408e9c:	4403      	add	r3, r0
  408e9e:	d407      	bmi.n	408eb0 <_free_r+0x100>
  408ea0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408ea4:	1aa4      	subs	r4, r4, r2
  408ea6:	4413      	add	r3, r2
  408ea8:	68a0      	ldr	r0, [r4, #8]
  408eaa:	68e2      	ldr	r2, [r4, #12]
  408eac:	60c2      	str	r2, [r0, #12]
  408eae:	6090      	str	r0, [r2, #8]
  408eb0:	4a30      	ldr	r2, [pc, #192]	; (408f74 <_free_r+0x1c4>)
  408eb2:	6812      	ldr	r2, [r2, #0]
  408eb4:	f043 0001 	orr.w	r0, r3, #1
  408eb8:	4293      	cmp	r3, r2
  408eba:	6060      	str	r0, [r4, #4]
  408ebc:	608c      	str	r4, [r1, #8]
  408ebe:	d3b9      	bcc.n	408e34 <_free_r+0x84>
  408ec0:	4b2d      	ldr	r3, [pc, #180]	; (408f78 <_free_r+0x1c8>)
  408ec2:	4640      	mov	r0, r8
  408ec4:	6819      	ldr	r1, [r3, #0]
  408ec6:	f7ff ff23 	bl	408d10 <_malloc_trim_r>
  408eca:	e7b3      	b.n	408e34 <_free_r+0x84>
  408ecc:	4610      	mov	r0, r2
  408ece:	e7cd      	b.n	408e6c <_free_r+0xbc>
  408ed0:	1811      	adds	r1, r2, r0
  408ed2:	6849      	ldr	r1, [r1, #4]
  408ed4:	07c9      	lsls	r1, r1, #31
  408ed6:	d444      	bmi.n	408f62 <_free_r+0x1b2>
  408ed8:	6891      	ldr	r1, [r2, #8]
  408eda:	68d2      	ldr	r2, [r2, #12]
  408edc:	60ca      	str	r2, [r1, #12]
  408ede:	4403      	add	r3, r0
  408ee0:	f043 0001 	orr.w	r0, r3, #1
  408ee4:	6091      	str	r1, [r2, #8]
  408ee6:	6060      	str	r0, [r4, #4]
  408ee8:	50e3      	str	r3, [r4, r3]
  408eea:	e7a3      	b.n	408e34 <_free_r+0x84>
  408eec:	2a14      	cmp	r2, #20
  408eee:	d816      	bhi.n	408f1e <_free_r+0x16e>
  408ef0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408ef4:	00ff      	lsls	r7, r7, #3
  408ef6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408efa:	e7aa      	b.n	408e52 <_free_r+0xa2>
  408efc:	10aa      	asrs	r2, r5, #2
  408efe:	2301      	movs	r3, #1
  408f00:	684d      	ldr	r5, [r1, #4]
  408f02:	4093      	lsls	r3, r2
  408f04:	432b      	orrs	r3, r5
  408f06:	604b      	str	r3, [r1, #4]
  408f08:	4603      	mov	r3, r0
  408f0a:	e7b0      	b.n	408e6e <_free_r+0xbe>
  408f0c:	f043 0201 	orr.w	r2, r3, #1
  408f10:	614c      	str	r4, [r1, #20]
  408f12:	610c      	str	r4, [r1, #16]
  408f14:	60e5      	str	r5, [r4, #12]
  408f16:	60a5      	str	r5, [r4, #8]
  408f18:	6062      	str	r2, [r4, #4]
  408f1a:	50e3      	str	r3, [r4, r3]
  408f1c:	e78a      	b.n	408e34 <_free_r+0x84>
  408f1e:	2a54      	cmp	r2, #84	; 0x54
  408f20:	d806      	bhi.n	408f30 <_free_r+0x180>
  408f22:	0b1a      	lsrs	r2, r3, #12
  408f24:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408f28:	00ff      	lsls	r7, r7, #3
  408f2a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408f2e:	e790      	b.n	408e52 <_free_r+0xa2>
  408f30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408f34:	d806      	bhi.n	408f44 <_free_r+0x194>
  408f36:	0bda      	lsrs	r2, r3, #15
  408f38:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408f3c:	00ff      	lsls	r7, r7, #3
  408f3e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408f42:	e786      	b.n	408e52 <_free_r+0xa2>
  408f44:	f240 5054 	movw	r0, #1364	; 0x554
  408f48:	4282      	cmp	r2, r0
  408f4a:	d806      	bhi.n	408f5a <_free_r+0x1aa>
  408f4c:	0c9a      	lsrs	r2, r3, #18
  408f4e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408f52:	00ff      	lsls	r7, r7, #3
  408f54:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408f58:	e77b      	b.n	408e52 <_free_r+0xa2>
  408f5a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408f5e:	257e      	movs	r5, #126	; 0x7e
  408f60:	e777      	b.n	408e52 <_free_r+0xa2>
  408f62:	f043 0101 	orr.w	r1, r3, #1
  408f66:	6061      	str	r1, [r4, #4]
  408f68:	6013      	str	r3, [r2, #0]
  408f6a:	e763      	b.n	408e34 <_free_r+0x84>
  408f6c:	204004a8 	.word	0x204004a8
  408f70:	204004b0 	.word	0x204004b0
  408f74:	204008b4 	.word	0x204008b4
  408f78:	20400e60 	.word	0x20400e60

00408f7c <__sfvwrite_r>:
  408f7c:	6893      	ldr	r3, [r2, #8]
  408f7e:	2b00      	cmp	r3, #0
  408f80:	d073      	beq.n	40906a <__sfvwrite_r+0xee>
  408f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f86:	898b      	ldrh	r3, [r1, #12]
  408f88:	b083      	sub	sp, #12
  408f8a:	460c      	mov	r4, r1
  408f8c:	0719      	lsls	r1, r3, #28
  408f8e:	9000      	str	r0, [sp, #0]
  408f90:	4616      	mov	r6, r2
  408f92:	d526      	bpl.n	408fe2 <__sfvwrite_r+0x66>
  408f94:	6922      	ldr	r2, [r4, #16]
  408f96:	b322      	cbz	r2, 408fe2 <__sfvwrite_r+0x66>
  408f98:	f013 0002 	ands.w	r0, r3, #2
  408f9c:	6835      	ldr	r5, [r6, #0]
  408f9e:	d02c      	beq.n	408ffa <__sfvwrite_r+0x7e>
  408fa0:	f04f 0900 	mov.w	r9, #0
  408fa4:	4fb0      	ldr	r7, [pc, #704]	; (409268 <__sfvwrite_r+0x2ec>)
  408fa6:	46c8      	mov	r8, r9
  408fa8:	46b2      	mov	sl, r6
  408faa:	45b8      	cmp	r8, r7
  408fac:	4643      	mov	r3, r8
  408fae:	464a      	mov	r2, r9
  408fb0:	bf28      	it	cs
  408fb2:	463b      	movcs	r3, r7
  408fb4:	9800      	ldr	r0, [sp, #0]
  408fb6:	f1b8 0f00 	cmp.w	r8, #0
  408fba:	d050      	beq.n	40905e <__sfvwrite_r+0xe2>
  408fbc:	69e1      	ldr	r1, [r4, #28]
  408fbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408fc0:	47b0      	blx	r6
  408fc2:	2800      	cmp	r0, #0
  408fc4:	dd58      	ble.n	409078 <__sfvwrite_r+0xfc>
  408fc6:	f8da 3008 	ldr.w	r3, [sl, #8]
  408fca:	1a1b      	subs	r3, r3, r0
  408fcc:	4481      	add	r9, r0
  408fce:	eba8 0800 	sub.w	r8, r8, r0
  408fd2:	f8ca 3008 	str.w	r3, [sl, #8]
  408fd6:	2b00      	cmp	r3, #0
  408fd8:	d1e7      	bne.n	408faa <__sfvwrite_r+0x2e>
  408fda:	2000      	movs	r0, #0
  408fdc:	b003      	add	sp, #12
  408fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fe2:	4621      	mov	r1, r4
  408fe4:	9800      	ldr	r0, [sp, #0]
  408fe6:	f7fe fd15 	bl	407a14 <__swsetup_r>
  408fea:	2800      	cmp	r0, #0
  408fec:	f040 8133 	bne.w	409256 <__sfvwrite_r+0x2da>
  408ff0:	89a3      	ldrh	r3, [r4, #12]
  408ff2:	6835      	ldr	r5, [r6, #0]
  408ff4:	f013 0002 	ands.w	r0, r3, #2
  408ff8:	d1d2      	bne.n	408fa0 <__sfvwrite_r+0x24>
  408ffa:	f013 0901 	ands.w	r9, r3, #1
  408ffe:	d145      	bne.n	40908c <__sfvwrite_r+0x110>
  409000:	464f      	mov	r7, r9
  409002:	9601      	str	r6, [sp, #4]
  409004:	b337      	cbz	r7, 409054 <__sfvwrite_r+0xd8>
  409006:	059a      	lsls	r2, r3, #22
  409008:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40900c:	f140 8083 	bpl.w	409116 <__sfvwrite_r+0x19a>
  409010:	4547      	cmp	r7, r8
  409012:	46c3      	mov	fp, r8
  409014:	f0c0 80ab 	bcc.w	40916e <__sfvwrite_r+0x1f2>
  409018:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40901c:	f040 80ac 	bne.w	409178 <__sfvwrite_r+0x1fc>
  409020:	6820      	ldr	r0, [r4, #0]
  409022:	46ba      	mov	sl, r7
  409024:	465a      	mov	r2, fp
  409026:	4649      	mov	r1, r9
  409028:	f000 fa2a 	bl	409480 <memmove>
  40902c:	68a2      	ldr	r2, [r4, #8]
  40902e:	6823      	ldr	r3, [r4, #0]
  409030:	eba2 0208 	sub.w	r2, r2, r8
  409034:	445b      	add	r3, fp
  409036:	60a2      	str	r2, [r4, #8]
  409038:	6023      	str	r3, [r4, #0]
  40903a:	9a01      	ldr	r2, [sp, #4]
  40903c:	6893      	ldr	r3, [r2, #8]
  40903e:	eba3 030a 	sub.w	r3, r3, sl
  409042:	44d1      	add	r9, sl
  409044:	eba7 070a 	sub.w	r7, r7, sl
  409048:	6093      	str	r3, [r2, #8]
  40904a:	2b00      	cmp	r3, #0
  40904c:	d0c5      	beq.n	408fda <__sfvwrite_r+0x5e>
  40904e:	89a3      	ldrh	r3, [r4, #12]
  409050:	2f00      	cmp	r7, #0
  409052:	d1d8      	bne.n	409006 <__sfvwrite_r+0x8a>
  409054:	f8d5 9000 	ldr.w	r9, [r5]
  409058:	686f      	ldr	r7, [r5, #4]
  40905a:	3508      	adds	r5, #8
  40905c:	e7d2      	b.n	409004 <__sfvwrite_r+0x88>
  40905e:	f8d5 9000 	ldr.w	r9, [r5]
  409062:	f8d5 8004 	ldr.w	r8, [r5, #4]
  409066:	3508      	adds	r5, #8
  409068:	e79f      	b.n	408faa <__sfvwrite_r+0x2e>
  40906a:	2000      	movs	r0, #0
  40906c:	4770      	bx	lr
  40906e:	4621      	mov	r1, r4
  409070:	9800      	ldr	r0, [sp, #0]
  409072:	f7ff fda3 	bl	408bbc <_fflush_r>
  409076:	b370      	cbz	r0, 4090d6 <__sfvwrite_r+0x15a>
  409078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40907c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409080:	f04f 30ff 	mov.w	r0, #4294967295
  409084:	81a3      	strh	r3, [r4, #12]
  409086:	b003      	add	sp, #12
  409088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40908c:	4681      	mov	r9, r0
  40908e:	4633      	mov	r3, r6
  409090:	464e      	mov	r6, r9
  409092:	46a8      	mov	r8, r5
  409094:	469a      	mov	sl, r3
  409096:	464d      	mov	r5, r9
  409098:	b34e      	cbz	r6, 4090ee <__sfvwrite_r+0x172>
  40909a:	b380      	cbz	r0, 4090fe <__sfvwrite_r+0x182>
  40909c:	6820      	ldr	r0, [r4, #0]
  40909e:	6923      	ldr	r3, [r4, #16]
  4090a0:	6962      	ldr	r2, [r4, #20]
  4090a2:	45b1      	cmp	r9, r6
  4090a4:	46cb      	mov	fp, r9
  4090a6:	bf28      	it	cs
  4090a8:	46b3      	movcs	fp, r6
  4090aa:	4298      	cmp	r0, r3
  4090ac:	465f      	mov	r7, fp
  4090ae:	d904      	bls.n	4090ba <__sfvwrite_r+0x13e>
  4090b0:	68a3      	ldr	r3, [r4, #8]
  4090b2:	4413      	add	r3, r2
  4090b4:	459b      	cmp	fp, r3
  4090b6:	f300 80a6 	bgt.w	409206 <__sfvwrite_r+0x28a>
  4090ba:	4593      	cmp	fp, r2
  4090bc:	db4b      	blt.n	409156 <__sfvwrite_r+0x1da>
  4090be:	4613      	mov	r3, r2
  4090c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4090c2:	69e1      	ldr	r1, [r4, #28]
  4090c4:	9800      	ldr	r0, [sp, #0]
  4090c6:	462a      	mov	r2, r5
  4090c8:	47b8      	blx	r7
  4090ca:	1e07      	subs	r7, r0, #0
  4090cc:	ddd4      	ble.n	409078 <__sfvwrite_r+0xfc>
  4090ce:	ebb9 0907 	subs.w	r9, r9, r7
  4090d2:	d0cc      	beq.n	40906e <__sfvwrite_r+0xf2>
  4090d4:	2001      	movs	r0, #1
  4090d6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4090da:	1bdb      	subs	r3, r3, r7
  4090dc:	443d      	add	r5, r7
  4090de:	1bf6      	subs	r6, r6, r7
  4090e0:	f8ca 3008 	str.w	r3, [sl, #8]
  4090e4:	2b00      	cmp	r3, #0
  4090e6:	f43f af78 	beq.w	408fda <__sfvwrite_r+0x5e>
  4090ea:	2e00      	cmp	r6, #0
  4090ec:	d1d5      	bne.n	40909a <__sfvwrite_r+0x11e>
  4090ee:	f108 0308 	add.w	r3, r8, #8
  4090f2:	e913 0060 	ldmdb	r3, {r5, r6}
  4090f6:	4698      	mov	r8, r3
  4090f8:	3308      	adds	r3, #8
  4090fa:	2e00      	cmp	r6, #0
  4090fc:	d0f9      	beq.n	4090f2 <__sfvwrite_r+0x176>
  4090fe:	4632      	mov	r2, r6
  409100:	210a      	movs	r1, #10
  409102:	4628      	mov	r0, r5
  409104:	f000 f96c 	bl	4093e0 <memchr>
  409108:	2800      	cmp	r0, #0
  40910a:	f000 80a1 	beq.w	409250 <__sfvwrite_r+0x2d4>
  40910e:	3001      	adds	r0, #1
  409110:	eba0 0905 	sub.w	r9, r0, r5
  409114:	e7c2      	b.n	40909c <__sfvwrite_r+0x120>
  409116:	6820      	ldr	r0, [r4, #0]
  409118:	6923      	ldr	r3, [r4, #16]
  40911a:	4298      	cmp	r0, r3
  40911c:	d802      	bhi.n	409124 <__sfvwrite_r+0x1a8>
  40911e:	6963      	ldr	r3, [r4, #20]
  409120:	429f      	cmp	r7, r3
  409122:	d25d      	bcs.n	4091e0 <__sfvwrite_r+0x264>
  409124:	45b8      	cmp	r8, r7
  409126:	bf28      	it	cs
  409128:	46b8      	movcs	r8, r7
  40912a:	4642      	mov	r2, r8
  40912c:	4649      	mov	r1, r9
  40912e:	f000 f9a7 	bl	409480 <memmove>
  409132:	68a3      	ldr	r3, [r4, #8]
  409134:	6822      	ldr	r2, [r4, #0]
  409136:	eba3 0308 	sub.w	r3, r3, r8
  40913a:	4442      	add	r2, r8
  40913c:	60a3      	str	r3, [r4, #8]
  40913e:	6022      	str	r2, [r4, #0]
  409140:	b10b      	cbz	r3, 409146 <__sfvwrite_r+0x1ca>
  409142:	46c2      	mov	sl, r8
  409144:	e779      	b.n	40903a <__sfvwrite_r+0xbe>
  409146:	4621      	mov	r1, r4
  409148:	9800      	ldr	r0, [sp, #0]
  40914a:	f7ff fd37 	bl	408bbc <_fflush_r>
  40914e:	2800      	cmp	r0, #0
  409150:	d192      	bne.n	409078 <__sfvwrite_r+0xfc>
  409152:	46c2      	mov	sl, r8
  409154:	e771      	b.n	40903a <__sfvwrite_r+0xbe>
  409156:	465a      	mov	r2, fp
  409158:	4629      	mov	r1, r5
  40915a:	f000 f991 	bl	409480 <memmove>
  40915e:	68a2      	ldr	r2, [r4, #8]
  409160:	6823      	ldr	r3, [r4, #0]
  409162:	eba2 020b 	sub.w	r2, r2, fp
  409166:	445b      	add	r3, fp
  409168:	60a2      	str	r2, [r4, #8]
  40916a:	6023      	str	r3, [r4, #0]
  40916c:	e7af      	b.n	4090ce <__sfvwrite_r+0x152>
  40916e:	6820      	ldr	r0, [r4, #0]
  409170:	46b8      	mov	r8, r7
  409172:	46ba      	mov	sl, r7
  409174:	46bb      	mov	fp, r7
  409176:	e755      	b.n	409024 <__sfvwrite_r+0xa8>
  409178:	6962      	ldr	r2, [r4, #20]
  40917a:	6820      	ldr	r0, [r4, #0]
  40917c:	6921      	ldr	r1, [r4, #16]
  40917e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  409182:	eba0 0a01 	sub.w	sl, r0, r1
  409186:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40918a:	f10a 0001 	add.w	r0, sl, #1
  40918e:	ea4f 0868 	mov.w	r8, r8, asr #1
  409192:	4438      	add	r0, r7
  409194:	4540      	cmp	r0, r8
  409196:	4642      	mov	r2, r8
  409198:	bf84      	itt	hi
  40919a:	4680      	movhi	r8, r0
  40919c:	4642      	movhi	r2, r8
  40919e:	055b      	lsls	r3, r3, #21
  4091a0:	d544      	bpl.n	40922c <__sfvwrite_r+0x2b0>
  4091a2:	4611      	mov	r1, r2
  4091a4:	9800      	ldr	r0, [sp, #0]
  4091a6:	f7fb f979 	bl	40449c <_malloc_r>
  4091aa:	4683      	mov	fp, r0
  4091ac:	2800      	cmp	r0, #0
  4091ae:	d055      	beq.n	40925c <__sfvwrite_r+0x2e0>
  4091b0:	4652      	mov	r2, sl
  4091b2:	6921      	ldr	r1, [r4, #16]
  4091b4:	f7fb fc22 	bl	4049fc <memcpy>
  4091b8:	89a3      	ldrh	r3, [r4, #12]
  4091ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4091be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4091c2:	81a3      	strh	r3, [r4, #12]
  4091c4:	eb0b 000a 	add.w	r0, fp, sl
  4091c8:	eba8 030a 	sub.w	r3, r8, sl
  4091cc:	f8c4 b010 	str.w	fp, [r4, #16]
  4091d0:	f8c4 8014 	str.w	r8, [r4, #20]
  4091d4:	6020      	str	r0, [r4, #0]
  4091d6:	60a3      	str	r3, [r4, #8]
  4091d8:	46b8      	mov	r8, r7
  4091da:	46ba      	mov	sl, r7
  4091dc:	46bb      	mov	fp, r7
  4091de:	e721      	b.n	409024 <__sfvwrite_r+0xa8>
  4091e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4091e4:	42b9      	cmp	r1, r7
  4091e6:	bf28      	it	cs
  4091e8:	4639      	movcs	r1, r7
  4091ea:	464a      	mov	r2, r9
  4091ec:	fb91 f1f3 	sdiv	r1, r1, r3
  4091f0:	9800      	ldr	r0, [sp, #0]
  4091f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4091f4:	fb03 f301 	mul.w	r3, r3, r1
  4091f8:	69e1      	ldr	r1, [r4, #28]
  4091fa:	47b0      	blx	r6
  4091fc:	f1b0 0a00 	subs.w	sl, r0, #0
  409200:	f73f af1b 	bgt.w	40903a <__sfvwrite_r+0xbe>
  409204:	e738      	b.n	409078 <__sfvwrite_r+0xfc>
  409206:	461a      	mov	r2, r3
  409208:	4629      	mov	r1, r5
  40920a:	9301      	str	r3, [sp, #4]
  40920c:	f000 f938 	bl	409480 <memmove>
  409210:	6822      	ldr	r2, [r4, #0]
  409212:	9b01      	ldr	r3, [sp, #4]
  409214:	9800      	ldr	r0, [sp, #0]
  409216:	441a      	add	r2, r3
  409218:	6022      	str	r2, [r4, #0]
  40921a:	4621      	mov	r1, r4
  40921c:	f7ff fcce 	bl	408bbc <_fflush_r>
  409220:	9b01      	ldr	r3, [sp, #4]
  409222:	2800      	cmp	r0, #0
  409224:	f47f af28 	bne.w	409078 <__sfvwrite_r+0xfc>
  409228:	461f      	mov	r7, r3
  40922a:	e750      	b.n	4090ce <__sfvwrite_r+0x152>
  40922c:	9800      	ldr	r0, [sp, #0]
  40922e:	f000 fc85 	bl	409b3c <_realloc_r>
  409232:	4683      	mov	fp, r0
  409234:	2800      	cmp	r0, #0
  409236:	d1c5      	bne.n	4091c4 <__sfvwrite_r+0x248>
  409238:	9d00      	ldr	r5, [sp, #0]
  40923a:	6921      	ldr	r1, [r4, #16]
  40923c:	4628      	mov	r0, r5
  40923e:	f7ff fdb7 	bl	408db0 <_free_r>
  409242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409246:	220c      	movs	r2, #12
  409248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40924c:	602a      	str	r2, [r5, #0]
  40924e:	e715      	b.n	40907c <__sfvwrite_r+0x100>
  409250:	f106 0901 	add.w	r9, r6, #1
  409254:	e722      	b.n	40909c <__sfvwrite_r+0x120>
  409256:	f04f 30ff 	mov.w	r0, #4294967295
  40925a:	e6bf      	b.n	408fdc <__sfvwrite_r+0x60>
  40925c:	9a00      	ldr	r2, [sp, #0]
  40925e:	230c      	movs	r3, #12
  409260:	6013      	str	r3, [r2, #0]
  409262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409266:	e709      	b.n	40907c <__sfvwrite_r+0x100>
  409268:	7ffffc00 	.word	0x7ffffc00

0040926c <_fwalk_reent>:
  40926c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409270:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  409274:	d01f      	beq.n	4092b6 <_fwalk_reent+0x4a>
  409276:	4688      	mov	r8, r1
  409278:	4606      	mov	r6, r0
  40927a:	f04f 0900 	mov.w	r9, #0
  40927e:	687d      	ldr	r5, [r7, #4]
  409280:	68bc      	ldr	r4, [r7, #8]
  409282:	3d01      	subs	r5, #1
  409284:	d411      	bmi.n	4092aa <_fwalk_reent+0x3e>
  409286:	89a3      	ldrh	r3, [r4, #12]
  409288:	2b01      	cmp	r3, #1
  40928a:	f105 35ff 	add.w	r5, r5, #4294967295
  40928e:	d908      	bls.n	4092a2 <_fwalk_reent+0x36>
  409290:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  409294:	3301      	adds	r3, #1
  409296:	4621      	mov	r1, r4
  409298:	4630      	mov	r0, r6
  40929a:	d002      	beq.n	4092a2 <_fwalk_reent+0x36>
  40929c:	47c0      	blx	r8
  40929e:	ea49 0900 	orr.w	r9, r9, r0
  4092a2:	1c6b      	adds	r3, r5, #1
  4092a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4092a8:	d1ed      	bne.n	409286 <_fwalk_reent+0x1a>
  4092aa:	683f      	ldr	r7, [r7, #0]
  4092ac:	2f00      	cmp	r7, #0
  4092ae:	d1e6      	bne.n	40927e <_fwalk_reent+0x12>
  4092b0:	4648      	mov	r0, r9
  4092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4092b6:	46b9      	mov	r9, r7
  4092b8:	4648      	mov	r0, r9
  4092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4092be:	bf00      	nop

004092c0 <_localeconv_r>:
  4092c0:	4a04      	ldr	r2, [pc, #16]	; (4092d4 <_localeconv_r+0x14>)
  4092c2:	4b05      	ldr	r3, [pc, #20]	; (4092d8 <_localeconv_r+0x18>)
  4092c4:	6812      	ldr	r2, [r2, #0]
  4092c6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4092c8:	2800      	cmp	r0, #0
  4092ca:	bf08      	it	eq
  4092cc:	4618      	moveq	r0, r3
  4092ce:	30f0      	adds	r0, #240	; 0xf0
  4092d0:	4770      	bx	lr
  4092d2:	bf00      	nop
  4092d4:	20400078 	.word	0x20400078
  4092d8:	204008bc 	.word	0x204008bc

004092dc <__retarget_lock_init_recursive>:
  4092dc:	4770      	bx	lr
  4092de:	bf00      	nop

004092e0 <__retarget_lock_close_recursive>:
  4092e0:	4770      	bx	lr
  4092e2:	bf00      	nop

004092e4 <__retarget_lock_acquire_recursive>:
  4092e4:	4770      	bx	lr
  4092e6:	bf00      	nop

004092e8 <__retarget_lock_release_recursive>:
  4092e8:	4770      	bx	lr
  4092ea:	bf00      	nop

004092ec <__swhatbuf_r>:
  4092ec:	b570      	push	{r4, r5, r6, lr}
  4092ee:	460c      	mov	r4, r1
  4092f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4092f4:	2900      	cmp	r1, #0
  4092f6:	b090      	sub	sp, #64	; 0x40
  4092f8:	4615      	mov	r5, r2
  4092fa:	461e      	mov	r6, r3
  4092fc:	db14      	blt.n	409328 <__swhatbuf_r+0x3c>
  4092fe:	aa01      	add	r2, sp, #4
  409300:	f001 f86e 	bl	40a3e0 <_fstat_r>
  409304:	2800      	cmp	r0, #0
  409306:	db0f      	blt.n	409328 <__swhatbuf_r+0x3c>
  409308:	9a02      	ldr	r2, [sp, #8]
  40930a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40930e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  409312:	fab2 f282 	clz	r2, r2
  409316:	0952      	lsrs	r2, r2, #5
  409318:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40931c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409320:	6032      	str	r2, [r6, #0]
  409322:	602b      	str	r3, [r5, #0]
  409324:	b010      	add	sp, #64	; 0x40
  409326:	bd70      	pop	{r4, r5, r6, pc}
  409328:	89a2      	ldrh	r2, [r4, #12]
  40932a:	2300      	movs	r3, #0
  40932c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409330:	6033      	str	r3, [r6, #0]
  409332:	d004      	beq.n	40933e <__swhatbuf_r+0x52>
  409334:	2240      	movs	r2, #64	; 0x40
  409336:	4618      	mov	r0, r3
  409338:	602a      	str	r2, [r5, #0]
  40933a:	b010      	add	sp, #64	; 0x40
  40933c:	bd70      	pop	{r4, r5, r6, pc}
  40933e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409342:	602b      	str	r3, [r5, #0]
  409344:	b010      	add	sp, #64	; 0x40
  409346:	bd70      	pop	{r4, r5, r6, pc}

00409348 <__smakebuf_r>:
  409348:	898a      	ldrh	r2, [r1, #12]
  40934a:	0792      	lsls	r2, r2, #30
  40934c:	460b      	mov	r3, r1
  40934e:	d506      	bpl.n	40935e <__smakebuf_r+0x16>
  409350:	f101 0243 	add.w	r2, r1, #67	; 0x43
  409354:	2101      	movs	r1, #1
  409356:	601a      	str	r2, [r3, #0]
  409358:	611a      	str	r2, [r3, #16]
  40935a:	6159      	str	r1, [r3, #20]
  40935c:	4770      	bx	lr
  40935e:	b5f0      	push	{r4, r5, r6, r7, lr}
  409360:	b083      	sub	sp, #12
  409362:	ab01      	add	r3, sp, #4
  409364:	466a      	mov	r2, sp
  409366:	460c      	mov	r4, r1
  409368:	4606      	mov	r6, r0
  40936a:	f7ff ffbf 	bl	4092ec <__swhatbuf_r>
  40936e:	9900      	ldr	r1, [sp, #0]
  409370:	4605      	mov	r5, r0
  409372:	4630      	mov	r0, r6
  409374:	f7fb f892 	bl	40449c <_malloc_r>
  409378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40937c:	b1d8      	cbz	r0, 4093b6 <__smakebuf_r+0x6e>
  40937e:	9a01      	ldr	r2, [sp, #4]
  409380:	4f15      	ldr	r7, [pc, #84]	; (4093d8 <__smakebuf_r+0x90>)
  409382:	9900      	ldr	r1, [sp, #0]
  409384:	63f7      	str	r7, [r6, #60]	; 0x3c
  409386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40938a:	81a3      	strh	r3, [r4, #12]
  40938c:	6020      	str	r0, [r4, #0]
  40938e:	6120      	str	r0, [r4, #16]
  409390:	6161      	str	r1, [r4, #20]
  409392:	b91a      	cbnz	r2, 40939c <__smakebuf_r+0x54>
  409394:	432b      	orrs	r3, r5
  409396:	81a3      	strh	r3, [r4, #12]
  409398:	b003      	add	sp, #12
  40939a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40939c:	4630      	mov	r0, r6
  40939e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4093a2:	f001 f831 	bl	40a408 <_isatty_r>
  4093a6:	b1a0      	cbz	r0, 4093d2 <__smakebuf_r+0x8a>
  4093a8:	89a3      	ldrh	r3, [r4, #12]
  4093aa:	f023 0303 	bic.w	r3, r3, #3
  4093ae:	f043 0301 	orr.w	r3, r3, #1
  4093b2:	b21b      	sxth	r3, r3
  4093b4:	e7ee      	b.n	409394 <__smakebuf_r+0x4c>
  4093b6:	059a      	lsls	r2, r3, #22
  4093b8:	d4ee      	bmi.n	409398 <__smakebuf_r+0x50>
  4093ba:	f023 0303 	bic.w	r3, r3, #3
  4093be:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4093c2:	f043 0302 	orr.w	r3, r3, #2
  4093c6:	2101      	movs	r1, #1
  4093c8:	81a3      	strh	r3, [r4, #12]
  4093ca:	6022      	str	r2, [r4, #0]
  4093cc:	6122      	str	r2, [r4, #16]
  4093ce:	6161      	str	r1, [r4, #20]
  4093d0:	e7e2      	b.n	409398 <__smakebuf_r+0x50>
  4093d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4093d6:	e7dd      	b.n	409394 <__smakebuf_r+0x4c>
  4093d8:	00408c11 	.word	0x00408c11
  4093dc:	00000000 	.word	0x00000000

004093e0 <memchr>:
  4093e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4093e4:	2a10      	cmp	r2, #16
  4093e6:	db2b      	blt.n	409440 <memchr+0x60>
  4093e8:	f010 0f07 	tst.w	r0, #7
  4093ec:	d008      	beq.n	409400 <memchr+0x20>
  4093ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4093f2:	3a01      	subs	r2, #1
  4093f4:	428b      	cmp	r3, r1
  4093f6:	d02d      	beq.n	409454 <memchr+0x74>
  4093f8:	f010 0f07 	tst.w	r0, #7
  4093fc:	b342      	cbz	r2, 409450 <memchr+0x70>
  4093fe:	d1f6      	bne.n	4093ee <memchr+0xe>
  409400:	b4f0      	push	{r4, r5, r6, r7}
  409402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40940a:	f022 0407 	bic.w	r4, r2, #7
  40940e:	f07f 0700 	mvns.w	r7, #0
  409412:	2300      	movs	r3, #0
  409414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409418:	3c08      	subs	r4, #8
  40941a:	ea85 0501 	eor.w	r5, r5, r1
  40941e:	ea86 0601 	eor.w	r6, r6, r1
  409422:	fa85 f547 	uadd8	r5, r5, r7
  409426:	faa3 f587 	sel	r5, r3, r7
  40942a:	fa86 f647 	uadd8	r6, r6, r7
  40942e:	faa5 f687 	sel	r6, r5, r7
  409432:	b98e      	cbnz	r6, 409458 <memchr+0x78>
  409434:	d1ee      	bne.n	409414 <memchr+0x34>
  409436:	bcf0      	pop	{r4, r5, r6, r7}
  409438:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40943c:	f002 0207 	and.w	r2, r2, #7
  409440:	b132      	cbz	r2, 409450 <memchr+0x70>
  409442:	f810 3b01 	ldrb.w	r3, [r0], #1
  409446:	3a01      	subs	r2, #1
  409448:	ea83 0301 	eor.w	r3, r3, r1
  40944c:	b113      	cbz	r3, 409454 <memchr+0x74>
  40944e:	d1f8      	bne.n	409442 <memchr+0x62>
  409450:	2000      	movs	r0, #0
  409452:	4770      	bx	lr
  409454:	3801      	subs	r0, #1
  409456:	4770      	bx	lr
  409458:	2d00      	cmp	r5, #0
  40945a:	bf06      	itte	eq
  40945c:	4635      	moveq	r5, r6
  40945e:	3803      	subeq	r0, #3
  409460:	3807      	subne	r0, #7
  409462:	f015 0f01 	tst.w	r5, #1
  409466:	d107      	bne.n	409478 <memchr+0x98>
  409468:	3001      	adds	r0, #1
  40946a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40946e:	bf02      	ittt	eq
  409470:	3001      	addeq	r0, #1
  409472:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409476:	3001      	addeq	r0, #1
  409478:	bcf0      	pop	{r4, r5, r6, r7}
  40947a:	3801      	subs	r0, #1
  40947c:	4770      	bx	lr
  40947e:	bf00      	nop

00409480 <memmove>:
  409480:	4288      	cmp	r0, r1
  409482:	b5f0      	push	{r4, r5, r6, r7, lr}
  409484:	d90d      	bls.n	4094a2 <memmove+0x22>
  409486:	188b      	adds	r3, r1, r2
  409488:	4298      	cmp	r0, r3
  40948a:	d20a      	bcs.n	4094a2 <memmove+0x22>
  40948c:	1884      	adds	r4, r0, r2
  40948e:	2a00      	cmp	r2, #0
  409490:	d051      	beq.n	409536 <memmove+0xb6>
  409492:	4622      	mov	r2, r4
  409494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409498:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40949c:	4299      	cmp	r1, r3
  40949e:	d1f9      	bne.n	409494 <memmove+0x14>
  4094a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4094a2:	2a0f      	cmp	r2, #15
  4094a4:	d948      	bls.n	409538 <memmove+0xb8>
  4094a6:	ea41 0300 	orr.w	r3, r1, r0
  4094aa:	079b      	lsls	r3, r3, #30
  4094ac:	d146      	bne.n	40953c <memmove+0xbc>
  4094ae:	f100 0410 	add.w	r4, r0, #16
  4094b2:	f101 0310 	add.w	r3, r1, #16
  4094b6:	4615      	mov	r5, r2
  4094b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4094bc:	f844 6c10 	str.w	r6, [r4, #-16]
  4094c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4094c4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4094c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4094cc:	f844 6c08 	str.w	r6, [r4, #-8]
  4094d0:	3d10      	subs	r5, #16
  4094d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4094d6:	f844 6c04 	str.w	r6, [r4, #-4]
  4094da:	2d0f      	cmp	r5, #15
  4094dc:	f103 0310 	add.w	r3, r3, #16
  4094e0:	f104 0410 	add.w	r4, r4, #16
  4094e4:	d8e8      	bhi.n	4094b8 <memmove+0x38>
  4094e6:	f1a2 0310 	sub.w	r3, r2, #16
  4094ea:	f023 030f 	bic.w	r3, r3, #15
  4094ee:	f002 0e0f 	and.w	lr, r2, #15
  4094f2:	3310      	adds	r3, #16
  4094f4:	f1be 0f03 	cmp.w	lr, #3
  4094f8:	4419      	add	r1, r3
  4094fa:	4403      	add	r3, r0
  4094fc:	d921      	bls.n	409542 <memmove+0xc2>
  4094fe:	1f1e      	subs	r6, r3, #4
  409500:	460d      	mov	r5, r1
  409502:	4674      	mov	r4, lr
  409504:	3c04      	subs	r4, #4
  409506:	f855 7b04 	ldr.w	r7, [r5], #4
  40950a:	f846 7f04 	str.w	r7, [r6, #4]!
  40950e:	2c03      	cmp	r4, #3
  409510:	d8f8      	bhi.n	409504 <memmove+0x84>
  409512:	f1ae 0404 	sub.w	r4, lr, #4
  409516:	f024 0403 	bic.w	r4, r4, #3
  40951a:	3404      	adds	r4, #4
  40951c:	4421      	add	r1, r4
  40951e:	4423      	add	r3, r4
  409520:	f002 0203 	and.w	r2, r2, #3
  409524:	b162      	cbz	r2, 409540 <memmove+0xc0>
  409526:	3b01      	subs	r3, #1
  409528:	440a      	add	r2, r1
  40952a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40952e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409532:	428a      	cmp	r2, r1
  409534:	d1f9      	bne.n	40952a <memmove+0xaa>
  409536:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409538:	4603      	mov	r3, r0
  40953a:	e7f3      	b.n	409524 <memmove+0xa4>
  40953c:	4603      	mov	r3, r0
  40953e:	e7f2      	b.n	409526 <memmove+0xa6>
  409540:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409542:	4672      	mov	r2, lr
  409544:	e7ee      	b.n	409524 <memmove+0xa4>
  409546:	bf00      	nop

00409548 <_Balloc>:
  409548:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40954a:	b570      	push	{r4, r5, r6, lr}
  40954c:	4605      	mov	r5, r0
  40954e:	460c      	mov	r4, r1
  409550:	b14b      	cbz	r3, 409566 <_Balloc+0x1e>
  409552:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409556:	b180      	cbz	r0, 40957a <_Balloc+0x32>
  409558:	6802      	ldr	r2, [r0, #0]
  40955a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40955e:	2300      	movs	r3, #0
  409560:	6103      	str	r3, [r0, #16]
  409562:	60c3      	str	r3, [r0, #12]
  409564:	bd70      	pop	{r4, r5, r6, pc}
  409566:	2221      	movs	r2, #33	; 0x21
  409568:	2104      	movs	r1, #4
  40956a:	f000 fe11 	bl	40a190 <_calloc_r>
  40956e:	64e8      	str	r0, [r5, #76]	; 0x4c
  409570:	4603      	mov	r3, r0
  409572:	2800      	cmp	r0, #0
  409574:	d1ed      	bne.n	409552 <_Balloc+0xa>
  409576:	2000      	movs	r0, #0
  409578:	bd70      	pop	{r4, r5, r6, pc}
  40957a:	2101      	movs	r1, #1
  40957c:	fa01 f604 	lsl.w	r6, r1, r4
  409580:	1d72      	adds	r2, r6, #5
  409582:	4628      	mov	r0, r5
  409584:	0092      	lsls	r2, r2, #2
  409586:	f000 fe03 	bl	40a190 <_calloc_r>
  40958a:	2800      	cmp	r0, #0
  40958c:	d0f3      	beq.n	409576 <_Balloc+0x2e>
  40958e:	6044      	str	r4, [r0, #4]
  409590:	6086      	str	r6, [r0, #8]
  409592:	e7e4      	b.n	40955e <_Balloc+0x16>

00409594 <_Bfree>:
  409594:	b131      	cbz	r1, 4095a4 <_Bfree+0x10>
  409596:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409598:	684a      	ldr	r2, [r1, #4]
  40959a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40959e:	6008      	str	r0, [r1, #0]
  4095a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4095a4:	4770      	bx	lr
  4095a6:	bf00      	nop

004095a8 <__multadd>:
  4095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4095aa:	690c      	ldr	r4, [r1, #16]
  4095ac:	b083      	sub	sp, #12
  4095ae:	460d      	mov	r5, r1
  4095b0:	4606      	mov	r6, r0
  4095b2:	f101 0e14 	add.w	lr, r1, #20
  4095b6:	2700      	movs	r7, #0
  4095b8:	f8de 0000 	ldr.w	r0, [lr]
  4095bc:	b281      	uxth	r1, r0
  4095be:	fb02 3301 	mla	r3, r2, r1, r3
  4095c2:	0c01      	lsrs	r1, r0, #16
  4095c4:	0c18      	lsrs	r0, r3, #16
  4095c6:	fb02 0101 	mla	r1, r2, r1, r0
  4095ca:	b29b      	uxth	r3, r3
  4095cc:	3701      	adds	r7, #1
  4095ce:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4095d2:	42bc      	cmp	r4, r7
  4095d4:	f84e 3b04 	str.w	r3, [lr], #4
  4095d8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4095dc:	dcec      	bgt.n	4095b8 <__multadd+0x10>
  4095de:	b13b      	cbz	r3, 4095f0 <__multadd+0x48>
  4095e0:	68aa      	ldr	r2, [r5, #8]
  4095e2:	4294      	cmp	r4, r2
  4095e4:	da07      	bge.n	4095f6 <__multadd+0x4e>
  4095e6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4095ea:	3401      	adds	r4, #1
  4095ec:	6153      	str	r3, [r2, #20]
  4095ee:	612c      	str	r4, [r5, #16]
  4095f0:	4628      	mov	r0, r5
  4095f2:	b003      	add	sp, #12
  4095f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4095f6:	6869      	ldr	r1, [r5, #4]
  4095f8:	9301      	str	r3, [sp, #4]
  4095fa:	3101      	adds	r1, #1
  4095fc:	4630      	mov	r0, r6
  4095fe:	f7ff ffa3 	bl	409548 <_Balloc>
  409602:	692a      	ldr	r2, [r5, #16]
  409604:	3202      	adds	r2, #2
  409606:	f105 010c 	add.w	r1, r5, #12
  40960a:	4607      	mov	r7, r0
  40960c:	0092      	lsls	r2, r2, #2
  40960e:	300c      	adds	r0, #12
  409610:	f7fb f9f4 	bl	4049fc <memcpy>
  409614:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409616:	6869      	ldr	r1, [r5, #4]
  409618:	9b01      	ldr	r3, [sp, #4]
  40961a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40961e:	6028      	str	r0, [r5, #0]
  409620:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409624:	463d      	mov	r5, r7
  409626:	e7de      	b.n	4095e6 <__multadd+0x3e>

00409628 <__hi0bits>:
  409628:	0c02      	lsrs	r2, r0, #16
  40962a:	0412      	lsls	r2, r2, #16
  40962c:	4603      	mov	r3, r0
  40962e:	b9b2      	cbnz	r2, 40965e <__hi0bits+0x36>
  409630:	0403      	lsls	r3, r0, #16
  409632:	2010      	movs	r0, #16
  409634:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409638:	bf04      	itt	eq
  40963a:	021b      	lsleq	r3, r3, #8
  40963c:	3008      	addeq	r0, #8
  40963e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409642:	bf04      	itt	eq
  409644:	011b      	lsleq	r3, r3, #4
  409646:	3004      	addeq	r0, #4
  409648:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40964c:	bf04      	itt	eq
  40964e:	009b      	lsleq	r3, r3, #2
  409650:	3002      	addeq	r0, #2
  409652:	2b00      	cmp	r3, #0
  409654:	db02      	blt.n	40965c <__hi0bits+0x34>
  409656:	005b      	lsls	r3, r3, #1
  409658:	d403      	bmi.n	409662 <__hi0bits+0x3a>
  40965a:	2020      	movs	r0, #32
  40965c:	4770      	bx	lr
  40965e:	2000      	movs	r0, #0
  409660:	e7e8      	b.n	409634 <__hi0bits+0xc>
  409662:	3001      	adds	r0, #1
  409664:	4770      	bx	lr
  409666:	bf00      	nop

00409668 <__lo0bits>:
  409668:	6803      	ldr	r3, [r0, #0]
  40966a:	f013 0207 	ands.w	r2, r3, #7
  40966e:	4601      	mov	r1, r0
  409670:	d007      	beq.n	409682 <__lo0bits+0x1a>
  409672:	07da      	lsls	r2, r3, #31
  409674:	d421      	bmi.n	4096ba <__lo0bits+0x52>
  409676:	0798      	lsls	r0, r3, #30
  409678:	d421      	bmi.n	4096be <__lo0bits+0x56>
  40967a:	089b      	lsrs	r3, r3, #2
  40967c:	600b      	str	r3, [r1, #0]
  40967e:	2002      	movs	r0, #2
  409680:	4770      	bx	lr
  409682:	b298      	uxth	r0, r3
  409684:	b198      	cbz	r0, 4096ae <__lo0bits+0x46>
  409686:	4610      	mov	r0, r2
  409688:	f013 0fff 	tst.w	r3, #255	; 0xff
  40968c:	bf04      	itt	eq
  40968e:	0a1b      	lsreq	r3, r3, #8
  409690:	3008      	addeq	r0, #8
  409692:	071a      	lsls	r2, r3, #28
  409694:	bf04      	itt	eq
  409696:	091b      	lsreq	r3, r3, #4
  409698:	3004      	addeq	r0, #4
  40969a:	079a      	lsls	r2, r3, #30
  40969c:	bf04      	itt	eq
  40969e:	089b      	lsreq	r3, r3, #2
  4096a0:	3002      	addeq	r0, #2
  4096a2:	07da      	lsls	r2, r3, #31
  4096a4:	d407      	bmi.n	4096b6 <__lo0bits+0x4e>
  4096a6:	085b      	lsrs	r3, r3, #1
  4096a8:	d104      	bne.n	4096b4 <__lo0bits+0x4c>
  4096aa:	2020      	movs	r0, #32
  4096ac:	4770      	bx	lr
  4096ae:	0c1b      	lsrs	r3, r3, #16
  4096b0:	2010      	movs	r0, #16
  4096b2:	e7e9      	b.n	409688 <__lo0bits+0x20>
  4096b4:	3001      	adds	r0, #1
  4096b6:	600b      	str	r3, [r1, #0]
  4096b8:	4770      	bx	lr
  4096ba:	2000      	movs	r0, #0
  4096bc:	4770      	bx	lr
  4096be:	085b      	lsrs	r3, r3, #1
  4096c0:	600b      	str	r3, [r1, #0]
  4096c2:	2001      	movs	r0, #1
  4096c4:	4770      	bx	lr
  4096c6:	bf00      	nop

004096c8 <__i2b>:
  4096c8:	b510      	push	{r4, lr}
  4096ca:	460c      	mov	r4, r1
  4096cc:	2101      	movs	r1, #1
  4096ce:	f7ff ff3b 	bl	409548 <_Balloc>
  4096d2:	2201      	movs	r2, #1
  4096d4:	6144      	str	r4, [r0, #20]
  4096d6:	6102      	str	r2, [r0, #16]
  4096d8:	bd10      	pop	{r4, pc}
  4096da:	bf00      	nop

004096dc <__multiply>:
  4096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4096e0:	690c      	ldr	r4, [r1, #16]
  4096e2:	6915      	ldr	r5, [r2, #16]
  4096e4:	42ac      	cmp	r4, r5
  4096e6:	b083      	sub	sp, #12
  4096e8:	468b      	mov	fp, r1
  4096ea:	4616      	mov	r6, r2
  4096ec:	da04      	bge.n	4096f8 <__multiply+0x1c>
  4096ee:	4622      	mov	r2, r4
  4096f0:	46b3      	mov	fp, r6
  4096f2:	462c      	mov	r4, r5
  4096f4:	460e      	mov	r6, r1
  4096f6:	4615      	mov	r5, r2
  4096f8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4096fc:	f8db 1004 	ldr.w	r1, [fp, #4]
  409700:	eb04 0805 	add.w	r8, r4, r5
  409704:	4598      	cmp	r8, r3
  409706:	bfc8      	it	gt
  409708:	3101      	addgt	r1, #1
  40970a:	f7ff ff1d 	bl	409548 <_Balloc>
  40970e:	f100 0914 	add.w	r9, r0, #20
  409712:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409716:	45d1      	cmp	r9, sl
  409718:	9000      	str	r0, [sp, #0]
  40971a:	d205      	bcs.n	409728 <__multiply+0x4c>
  40971c:	464b      	mov	r3, r9
  40971e:	2100      	movs	r1, #0
  409720:	f843 1b04 	str.w	r1, [r3], #4
  409724:	459a      	cmp	sl, r3
  409726:	d8fb      	bhi.n	409720 <__multiply+0x44>
  409728:	f106 0c14 	add.w	ip, r6, #20
  40972c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409730:	f10b 0b14 	add.w	fp, fp, #20
  409734:	459c      	cmp	ip, r3
  409736:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40973a:	d24c      	bcs.n	4097d6 <__multiply+0xfa>
  40973c:	f8cd a004 	str.w	sl, [sp, #4]
  409740:	469a      	mov	sl, r3
  409742:	f8dc 5000 	ldr.w	r5, [ip]
  409746:	b2af      	uxth	r7, r5
  409748:	b1ef      	cbz	r7, 409786 <__multiply+0xaa>
  40974a:	2100      	movs	r1, #0
  40974c:	464d      	mov	r5, r9
  40974e:	465e      	mov	r6, fp
  409750:	460c      	mov	r4, r1
  409752:	f856 2b04 	ldr.w	r2, [r6], #4
  409756:	6828      	ldr	r0, [r5, #0]
  409758:	b293      	uxth	r3, r2
  40975a:	b281      	uxth	r1, r0
  40975c:	fb07 1303 	mla	r3, r7, r3, r1
  409760:	0c12      	lsrs	r2, r2, #16
  409762:	0c01      	lsrs	r1, r0, #16
  409764:	4423      	add	r3, r4
  409766:	fb07 1102 	mla	r1, r7, r2, r1
  40976a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40976e:	b29b      	uxth	r3, r3
  409770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409774:	45b6      	cmp	lr, r6
  409776:	f845 3b04 	str.w	r3, [r5], #4
  40977a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40977e:	d8e8      	bhi.n	409752 <__multiply+0x76>
  409780:	602c      	str	r4, [r5, #0]
  409782:	f8dc 5000 	ldr.w	r5, [ip]
  409786:	0c2d      	lsrs	r5, r5, #16
  409788:	d01d      	beq.n	4097c6 <__multiply+0xea>
  40978a:	f8d9 3000 	ldr.w	r3, [r9]
  40978e:	4648      	mov	r0, r9
  409790:	461c      	mov	r4, r3
  409792:	4659      	mov	r1, fp
  409794:	2200      	movs	r2, #0
  409796:	880e      	ldrh	r6, [r1, #0]
  409798:	0c24      	lsrs	r4, r4, #16
  40979a:	fb05 4406 	mla	r4, r5, r6, r4
  40979e:	4422      	add	r2, r4
  4097a0:	b29b      	uxth	r3, r3
  4097a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4097a6:	f840 3b04 	str.w	r3, [r0], #4
  4097aa:	f851 3b04 	ldr.w	r3, [r1], #4
  4097ae:	6804      	ldr	r4, [r0, #0]
  4097b0:	0c1b      	lsrs	r3, r3, #16
  4097b2:	b2a6      	uxth	r6, r4
  4097b4:	fb05 6303 	mla	r3, r5, r3, r6
  4097b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4097bc:	458e      	cmp	lr, r1
  4097be:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4097c2:	d8e8      	bhi.n	409796 <__multiply+0xba>
  4097c4:	6003      	str	r3, [r0, #0]
  4097c6:	f10c 0c04 	add.w	ip, ip, #4
  4097ca:	45e2      	cmp	sl, ip
  4097cc:	f109 0904 	add.w	r9, r9, #4
  4097d0:	d8b7      	bhi.n	409742 <__multiply+0x66>
  4097d2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4097d6:	f1b8 0f00 	cmp.w	r8, #0
  4097da:	dd0b      	ble.n	4097f4 <__multiply+0x118>
  4097dc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4097e0:	f1aa 0a04 	sub.w	sl, sl, #4
  4097e4:	b11b      	cbz	r3, 4097ee <__multiply+0x112>
  4097e6:	e005      	b.n	4097f4 <__multiply+0x118>
  4097e8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4097ec:	b913      	cbnz	r3, 4097f4 <__multiply+0x118>
  4097ee:	f1b8 0801 	subs.w	r8, r8, #1
  4097f2:	d1f9      	bne.n	4097e8 <__multiply+0x10c>
  4097f4:	9800      	ldr	r0, [sp, #0]
  4097f6:	f8c0 8010 	str.w	r8, [r0, #16]
  4097fa:	b003      	add	sp, #12
  4097fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409800 <__pow5mult>:
  409800:	f012 0303 	ands.w	r3, r2, #3
  409804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409808:	4614      	mov	r4, r2
  40980a:	4607      	mov	r7, r0
  40980c:	d12e      	bne.n	40986c <__pow5mult+0x6c>
  40980e:	460d      	mov	r5, r1
  409810:	10a4      	asrs	r4, r4, #2
  409812:	d01c      	beq.n	40984e <__pow5mult+0x4e>
  409814:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409816:	b396      	cbz	r6, 40987e <__pow5mult+0x7e>
  409818:	07e3      	lsls	r3, r4, #31
  40981a:	f04f 0800 	mov.w	r8, #0
  40981e:	d406      	bmi.n	40982e <__pow5mult+0x2e>
  409820:	1064      	asrs	r4, r4, #1
  409822:	d014      	beq.n	40984e <__pow5mult+0x4e>
  409824:	6830      	ldr	r0, [r6, #0]
  409826:	b1a8      	cbz	r0, 409854 <__pow5mult+0x54>
  409828:	4606      	mov	r6, r0
  40982a:	07e3      	lsls	r3, r4, #31
  40982c:	d5f8      	bpl.n	409820 <__pow5mult+0x20>
  40982e:	4632      	mov	r2, r6
  409830:	4629      	mov	r1, r5
  409832:	4638      	mov	r0, r7
  409834:	f7ff ff52 	bl	4096dc <__multiply>
  409838:	b1b5      	cbz	r5, 409868 <__pow5mult+0x68>
  40983a:	686a      	ldr	r2, [r5, #4]
  40983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40983e:	1064      	asrs	r4, r4, #1
  409840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409844:	6029      	str	r1, [r5, #0]
  409846:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40984a:	4605      	mov	r5, r0
  40984c:	d1ea      	bne.n	409824 <__pow5mult+0x24>
  40984e:	4628      	mov	r0, r5
  409850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409854:	4632      	mov	r2, r6
  409856:	4631      	mov	r1, r6
  409858:	4638      	mov	r0, r7
  40985a:	f7ff ff3f 	bl	4096dc <__multiply>
  40985e:	6030      	str	r0, [r6, #0]
  409860:	f8c0 8000 	str.w	r8, [r0]
  409864:	4606      	mov	r6, r0
  409866:	e7e0      	b.n	40982a <__pow5mult+0x2a>
  409868:	4605      	mov	r5, r0
  40986a:	e7d9      	b.n	409820 <__pow5mult+0x20>
  40986c:	1e5a      	subs	r2, r3, #1
  40986e:	4d0b      	ldr	r5, [pc, #44]	; (40989c <__pow5mult+0x9c>)
  409870:	2300      	movs	r3, #0
  409872:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409876:	f7ff fe97 	bl	4095a8 <__multadd>
  40987a:	4605      	mov	r5, r0
  40987c:	e7c8      	b.n	409810 <__pow5mult+0x10>
  40987e:	2101      	movs	r1, #1
  409880:	4638      	mov	r0, r7
  409882:	f7ff fe61 	bl	409548 <_Balloc>
  409886:	f240 2171 	movw	r1, #625	; 0x271
  40988a:	2201      	movs	r2, #1
  40988c:	2300      	movs	r3, #0
  40988e:	6141      	str	r1, [r0, #20]
  409890:	6102      	str	r2, [r0, #16]
  409892:	4606      	mov	r6, r0
  409894:	64b8      	str	r0, [r7, #72]	; 0x48
  409896:	6003      	str	r3, [r0, #0]
  409898:	e7be      	b.n	409818 <__pow5mult+0x18>
  40989a:	bf00      	nop
  40989c:	0040ae80 	.word	0x0040ae80

004098a0 <__lshift>:
  4098a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4098a4:	4691      	mov	r9, r2
  4098a6:	690a      	ldr	r2, [r1, #16]
  4098a8:	688b      	ldr	r3, [r1, #8]
  4098aa:	ea4f 1469 	mov.w	r4, r9, asr #5
  4098ae:	eb04 0802 	add.w	r8, r4, r2
  4098b2:	f108 0501 	add.w	r5, r8, #1
  4098b6:	429d      	cmp	r5, r3
  4098b8:	460e      	mov	r6, r1
  4098ba:	4607      	mov	r7, r0
  4098bc:	6849      	ldr	r1, [r1, #4]
  4098be:	dd04      	ble.n	4098ca <__lshift+0x2a>
  4098c0:	005b      	lsls	r3, r3, #1
  4098c2:	429d      	cmp	r5, r3
  4098c4:	f101 0101 	add.w	r1, r1, #1
  4098c8:	dcfa      	bgt.n	4098c0 <__lshift+0x20>
  4098ca:	4638      	mov	r0, r7
  4098cc:	f7ff fe3c 	bl	409548 <_Balloc>
  4098d0:	2c00      	cmp	r4, #0
  4098d2:	f100 0314 	add.w	r3, r0, #20
  4098d6:	dd06      	ble.n	4098e6 <__lshift+0x46>
  4098d8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4098dc:	2100      	movs	r1, #0
  4098de:	f843 1b04 	str.w	r1, [r3], #4
  4098e2:	429a      	cmp	r2, r3
  4098e4:	d1fb      	bne.n	4098de <__lshift+0x3e>
  4098e6:	6934      	ldr	r4, [r6, #16]
  4098e8:	f106 0114 	add.w	r1, r6, #20
  4098ec:	f019 091f 	ands.w	r9, r9, #31
  4098f0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4098f4:	d01d      	beq.n	409932 <__lshift+0x92>
  4098f6:	f1c9 0c20 	rsb	ip, r9, #32
  4098fa:	2200      	movs	r2, #0
  4098fc:	680c      	ldr	r4, [r1, #0]
  4098fe:	fa04 f409 	lsl.w	r4, r4, r9
  409902:	4314      	orrs	r4, r2
  409904:	f843 4b04 	str.w	r4, [r3], #4
  409908:	f851 2b04 	ldr.w	r2, [r1], #4
  40990c:	458e      	cmp	lr, r1
  40990e:	fa22 f20c 	lsr.w	r2, r2, ip
  409912:	d8f3      	bhi.n	4098fc <__lshift+0x5c>
  409914:	601a      	str	r2, [r3, #0]
  409916:	b10a      	cbz	r2, 40991c <__lshift+0x7c>
  409918:	f108 0502 	add.w	r5, r8, #2
  40991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40991e:	6872      	ldr	r2, [r6, #4]
  409920:	3d01      	subs	r5, #1
  409922:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409926:	6105      	str	r5, [r0, #16]
  409928:	6031      	str	r1, [r6, #0]
  40992a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409932:	3b04      	subs	r3, #4
  409934:	f851 2b04 	ldr.w	r2, [r1], #4
  409938:	f843 2f04 	str.w	r2, [r3, #4]!
  40993c:	458e      	cmp	lr, r1
  40993e:	d8f9      	bhi.n	409934 <__lshift+0x94>
  409940:	e7ec      	b.n	40991c <__lshift+0x7c>
  409942:	bf00      	nop

00409944 <__mcmp>:
  409944:	b430      	push	{r4, r5}
  409946:	690b      	ldr	r3, [r1, #16]
  409948:	4605      	mov	r5, r0
  40994a:	6900      	ldr	r0, [r0, #16]
  40994c:	1ac0      	subs	r0, r0, r3
  40994e:	d10f      	bne.n	409970 <__mcmp+0x2c>
  409950:	009b      	lsls	r3, r3, #2
  409952:	3514      	adds	r5, #20
  409954:	3114      	adds	r1, #20
  409956:	4419      	add	r1, r3
  409958:	442b      	add	r3, r5
  40995a:	e001      	b.n	409960 <__mcmp+0x1c>
  40995c:	429d      	cmp	r5, r3
  40995e:	d207      	bcs.n	409970 <__mcmp+0x2c>
  409960:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409964:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409968:	4294      	cmp	r4, r2
  40996a:	d0f7      	beq.n	40995c <__mcmp+0x18>
  40996c:	d302      	bcc.n	409974 <__mcmp+0x30>
  40996e:	2001      	movs	r0, #1
  409970:	bc30      	pop	{r4, r5}
  409972:	4770      	bx	lr
  409974:	f04f 30ff 	mov.w	r0, #4294967295
  409978:	e7fa      	b.n	409970 <__mcmp+0x2c>
  40997a:	bf00      	nop

0040997c <__mdiff>:
  40997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409980:	690f      	ldr	r7, [r1, #16]
  409982:	460e      	mov	r6, r1
  409984:	6911      	ldr	r1, [r2, #16]
  409986:	1a7f      	subs	r7, r7, r1
  409988:	2f00      	cmp	r7, #0
  40998a:	4690      	mov	r8, r2
  40998c:	d117      	bne.n	4099be <__mdiff+0x42>
  40998e:	0089      	lsls	r1, r1, #2
  409990:	f106 0514 	add.w	r5, r6, #20
  409994:	f102 0e14 	add.w	lr, r2, #20
  409998:	186b      	adds	r3, r5, r1
  40999a:	4471      	add	r1, lr
  40999c:	e001      	b.n	4099a2 <__mdiff+0x26>
  40999e:	429d      	cmp	r5, r3
  4099a0:	d25c      	bcs.n	409a5c <__mdiff+0xe0>
  4099a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4099a6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4099aa:	42a2      	cmp	r2, r4
  4099ac:	d0f7      	beq.n	40999e <__mdiff+0x22>
  4099ae:	d25e      	bcs.n	409a6e <__mdiff+0xf2>
  4099b0:	4633      	mov	r3, r6
  4099b2:	462c      	mov	r4, r5
  4099b4:	4646      	mov	r6, r8
  4099b6:	4675      	mov	r5, lr
  4099b8:	4698      	mov	r8, r3
  4099ba:	2701      	movs	r7, #1
  4099bc:	e005      	b.n	4099ca <__mdiff+0x4e>
  4099be:	db58      	blt.n	409a72 <__mdiff+0xf6>
  4099c0:	f106 0514 	add.w	r5, r6, #20
  4099c4:	f108 0414 	add.w	r4, r8, #20
  4099c8:	2700      	movs	r7, #0
  4099ca:	6871      	ldr	r1, [r6, #4]
  4099cc:	f7ff fdbc 	bl	409548 <_Balloc>
  4099d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4099d4:	6936      	ldr	r6, [r6, #16]
  4099d6:	60c7      	str	r7, [r0, #12]
  4099d8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4099dc:	46a6      	mov	lr, r4
  4099de:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4099e2:	f100 0414 	add.w	r4, r0, #20
  4099e6:	2300      	movs	r3, #0
  4099e8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4099ec:	f855 8b04 	ldr.w	r8, [r5], #4
  4099f0:	b28a      	uxth	r2, r1
  4099f2:	fa13 f388 	uxtah	r3, r3, r8
  4099f6:	0c09      	lsrs	r1, r1, #16
  4099f8:	1a9a      	subs	r2, r3, r2
  4099fa:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4099fe:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409a02:	b292      	uxth	r2, r2
  409a04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409a08:	45f4      	cmp	ip, lr
  409a0a:	f844 2b04 	str.w	r2, [r4], #4
  409a0e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409a12:	d8e9      	bhi.n	4099e8 <__mdiff+0x6c>
  409a14:	42af      	cmp	r7, r5
  409a16:	d917      	bls.n	409a48 <__mdiff+0xcc>
  409a18:	46a4      	mov	ip, r4
  409a1a:	46ae      	mov	lr, r5
  409a1c:	f85e 2b04 	ldr.w	r2, [lr], #4
  409a20:	fa13 f382 	uxtah	r3, r3, r2
  409a24:	1419      	asrs	r1, r3, #16
  409a26:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409a2a:	b29b      	uxth	r3, r3
  409a2c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409a30:	4577      	cmp	r7, lr
  409a32:	f84c 2b04 	str.w	r2, [ip], #4
  409a36:	ea4f 4321 	mov.w	r3, r1, asr #16
  409a3a:	d8ef      	bhi.n	409a1c <__mdiff+0xa0>
  409a3c:	43ed      	mvns	r5, r5
  409a3e:	442f      	add	r7, r5
  409a40:	f027 0703 	bic.w	r7, r7, #3
  409a44:	3704      	adds	r7, #4
  409a46:	443c      	add	r4, r7
  409a48:	3c04      	subs	r4, #4
  409a4a:	b922      	cbnz	r2, 409a56 <__mdiff+0xda>
  409a4c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409a50:	3e01      	subs	r6, #1
  409a52:	2b00      	cmp	r3, #0
  409a54:	d0fa      	beq.n	409a4c <__mdiff+0xd0>
  409a56:	6106      	str	r6, [r0, #16]
  409a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a5c:	2100      	movs	r1, #0
  409a5e:	f7ff fd73 	bl	409548 <_Balloc>
  409a62:	2201      	movs	r2, #1
  409a64:	2300      	movs	r3, #0
  409a66:	6102      	str	r2, [r0, #16]
  409a68:	6143      	str	r3, [r0, #20]
  409a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a6e:	4674      	mov	r4, lr
  409a70:	e7ab      	b.n	4099ca <__mdiff+0x4e>
  409a72:	4633      	mov	r3, r6
  409a74:	f106 0414 	add.w	r4, r6, #20
  409a78:	f102 0514 	add.w	r5, r2, #20
  409a7c:	4616      	mov	r6, r2
  409a7e:	2701      	movs	r7, #1
  409a80:	4698      	mov	r8, r3
  409a82:	e7a2      	b.n	4099ca <__mdiff+0x4e>

00409a84 <__d2b>:
  409a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409a88:	b082      	sub	sp, #8
  409a8a:	2101      	movs	r1, #1
  409a8c:	461c      	mov	r4, r3
  409a8e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409a92:	4615      	mov	r5, r2
  409a94:	9e08      	ldr	r6, [sp, #32]
  409a96:	f7ff fd57 	bl	409548 <_Balloc>
  409a9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409a9e:	4680      	mov	r8, r0
  409aa0:	b10f      	cbz	r7, 409aa6 <__d2b+0x22>
  409aa2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409aa6:	9401      	str	r4, [sp, #4]
  409aa8:	b31d      	cbz	r5, 409af2 <__d2b+0x6e>
  409aaa:	a802      	add	r0, sp, #8
  409aac:	f840 5d08 	str.w	r5, [r0, #-8]!
  409ab0:	f7ff fdda 	bl	409668 <__lo0bits>
  409ab4:	2800      	cmp	r0, #0
  409ab6:	d134      	bne.n	409b22 <__d2b+0x9e>
  409ab8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409abc:	f8c8 2014 	str.w	r2, [r8, #20]
  409ac0:	2b00      	cmp	r3, #0
  409ac2:	bf0c      	ite	eq
  409ac4:	2101      	moveq	r1, #1
  409ac6:	2102      	movne	r1, #2
  409ac8:	f8c8 3018 	str.w	r3, [r8, #24]
  409acc:	f8c8 1010 	str.w	r1, [r8, #16]
  409ad0:	b9df      	cbnz	r7, 409b0a <__d2b+0x86>
  409ad2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409ad6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409ada:	6030      	str	r0, [r6, #0]
  409adc:	6918      	ldr	r0, [r3, #16]
  409ade:	f7ff fda3 	bl	409628 <__hi0bits>
  409ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ae4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409ae8:	6018      	str	r0, [r3, #0]
  409aea:	4640      	mov	r0, r8
  409aec:	b002      	add	sp, #8
  409aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409af2:	a801      	add	r0, sp, #4
  409af4:	f7ff fdb8 	bl	409668 <__lo0bits>
  409af8:	9b01      	ldr	r3, [sp, #4]
  409afa:	f8c8 3014 	str.w	r3, [r8, #20]
  409afe:	2101      	movs	r1, #1
  409b00:	3020      	adds	r0, #32
  409b02:	f8c8 1010 	str.w	r1, [r8, #16]
  409b06:	2f00      	cmp	r7, #0
  409b08:	d0e3      	beq.n	409ad2 <__d2b+0x4e>
  409b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b0c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409b10:	4407      	add	r7, r0
  409b12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409b16:	6037      	str	r7, [r6, #0]
  409b18:	6018      	str	r0, [r3, #0]
  409b1a:	4640      	mov	r0, r8
  409b1c:	b002      	add	sp, #8
  409b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b22:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409b26:	f1c0 0220 	rsb	r2, r0, #32
  409b2a:	fa03 f202 	lsl.w	r2, r3, r2
  409b2e:	430a      	orrs	r2, r1
  409b30:	40c3      	lsrs	r3, r0
  409b32:	9301      	str	r3, [sp, #4]
  409b34:	f8c8 2014 	str.w	r2, [r8, #20]
  409b38:	e7c2      	b.n	409ac0 <__d2b+0x3c>
  409b3a:	bf00      	nop

00409b3c <_realloc_r>:
  409b3c:	2900      	cmp	r1, #0
  409b3e:	f000 8095 	beq.w	409c6c <_realloc_r+0x130>
  409b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b46:	460d      	mov	r5, r1
  409b48:	4616      	mov	r6, r2
  409b4a:	b083      	sub	sp, #12
  409b4c:	4680      	mov	r8, r0
  409b4e:	f106 070b 	add.w	r7, r6, #11
  409b52:	f7fb f83b 	bl	404bcc <__malloc_lock>
  409b56:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409b5a:	2f16      	cmp	r7, #22
  409b5c:	f02e 0403 	bic.w	r4, lr, #3
  409b60:	f1a5 0908 	sub.w	r9, r5, #8
  409b64:	d83c      	bhi.n	409be0 <_realloc_r+0xa4>
  409b66:	2210      	movs	r2, #16
  409b68:	4617      	mov	r7, r2
  409b6a:	42be      	cmp	r6, r7
  409b6c:	d83d      	bhi.n	409bea <_realloc_r+0xae>
  409b6e:	4294      	cmp	r4, r2
  409b70:	da43      	bge.n	409bfa <_realloc_r+0xbe>
  409b72:	4bc4      	ldr	r3, [pc, #784]	; (409e84 <_realloc_r+0x348>)
  409b74:	6899      	ldr	r1, [r3, #8]
  409b76:	eb09 0004 	add.w	r0, r9, r4
  409b7a:	4288      	cmp	r0, r1
  409b7c:	f000 80b4 	beq.w	409ce8 <_realloc_r+0x1ac>
  409b80:	6843      	ldr	r3, [r0, #4]
  409b82:	f023 0101 	bic.w	r1, r3, #1
  409b86:	4401      	add	r1, r0
  409b88:	6849      	ldr	r1, [r1, #4]
  409b8a:	07c9      	lsls	r1, r1, #31
  409b8c:	d54c      	bpl.n	409c28 <_realloc_r+0xec>
  409b8e:	f01e 0f01 	tst.w	lr, #1
  409b92:	f000 809b 	beq.w	409ccc <_realloc_r+0x190>
  409b96:	4631      	mov	r1, r6
  409b98:	4640      	mov	r0, r8
  409b9a:	f7fa fc7f 	bl	40449c <_malloc_r>
  409b9e:	4606      	mov	r6, r0
  409ba0:	2800      	cmp	r0, #0
  409ba2:	d03a      	beq.n	409c1a <_realloc_r+0xde>
  409ba4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409ba8:	f023 0301 	bic.w	r3, r3, #1
  409bac:	444b      	add	r3, r9
  409bae:	f1a0 0208 	sub.w	r2, r0, #8
  409bb2:	429a      	cmp	r2, r3
  409bb4:	f000 8121 	beq.w	409dfa <_realloc_r+0x2be>
  409bb8:	1f22      	subs	r2, r4, #4
  409bba:	2a24      	cmp	r2, #36	; 0x24
  409bbc:	f200 8107 	bhi.w	409dce <_realloc_r+0x292>
  409bc0:	2a13      	cmp	r2, #19
  409bc2:	f200 80db 	bhi.w	409d7c <_realloc_r+0x240>
  409bc6:	4603      	mov	r3, r0
  409bc8:	462a      	mov	r2, r5
  409bca:	6811      	ldr	r1, [r2, #0]
  409bcc:	6019      	str	r1, [r3, #0]
  409bce:	6851      	ldr	r1, [r2, #4]
  409bd0:	6059      	str	r1, [r3, #4]
  409bd2:	6892      	ldr	r2, [r2, #8]
  409bd4:	609a      	str	r2, [r3, #8]
  409bd6:	4629      	mov	r1, r5
  409bd8:	4640      	mov	r0, r8
  409bda:	f7ff f8e9 	bl	408db0 <_free_r>
  409bde:	e01c      	b.n	409c1a <_realloc_r+0xde>
  409be0:	f027 0707 	bic.w	r7, r7, #7
  409be4:	2f00      	cmp	r7, #0
  409be6:	463a      	mov	r2, r7
  409be8:	dabf      	bge.n	409b6a <_realloc_r+0x2e>
  409bea:	2600      	movs	r6, #0
  409bec:	230c      	movs	r3, #12
  409bee:	4630      	mov	r0, r6
  409bf0:	f8c8 3000 	str.w	r3, [r8]
  409bf4:	b003      	add	sp, #12
  409bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bfa:	462e      	mov	r6, r5
  409bfc:	1be3      	subs	r3, r4, r7
  409bfe:	2b0f      	cmp	r3, #15
  409c00:	d81e      	bhi.n	409c40 <_realloc_r+0x104>
  409c02:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409c06:	f003 0301 	and.w	r3, r3, #1
  409c0a:	4323      	orrs	r3, r4
  409c0c:	444c      	add	r4, r9
  409c0e:	f8c9 3004 	str.w	r3, [r9, #4]
  409c12:	6863      	ldr	r3, [r4, #4]
  409c14:	f043 0301 	orr.w	r3, r3, #1
  409c18:	6063      	str	r3, [r4, #4]
  409c1a:	4640      	mov	r0, r8
  409c1c:	f7fa ffdc 	bl	404bd8 <__malloc_unlock>
  409c20:	4630      	mov	r0, r6
  409c22:	b003      	add	sp, #12
  409c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c28:	f023 0303 	bic.w	r3, r3, #3
  409c2c:	18e1      	adds	r1, r4, r3
  409c2e:	4291      	cmp	r1, r2
  409c30:	db1f      	blt.n	409c72 <_realloc_r+0x136>
  409c32:	68c3      	ldr	r3, [r0, #12]
  409c34:	6882      	ldr	r2, [r0, #8]
  409c36:	462e      	mov	r6, r5
  409c38:	60d3      	str	r3, [r2, #12]
  409c3a:	460c      	mov	r4, r1
  409c3c:	609a      	str	r2, [r3, #8]
  409c3e:	e7dd      	b.n	409bfc <_realloc_r+0xc0>
  409c40:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409c44:	eb09 0107 	add.w	r1, r9, r7
  409c48:	f002 0201 	and.w	r2, r2, #1
  409c4c:	444c      	add	r4, r9
  409c4e:	f043 0301 	orr.w	r3, r3, #1
  409c52:	4317      	orrs	r7, r2
  409c54:	f8c9 7004 	str.w	r7, [r9, #4]
  409c58:	604b      	str	r3, [r1, #4]
  409c5a:	6863      	ldr	r3, [r4, #4]
  409c5c:	f043 0301 	orr.w	r3, r3, #1
  409c60:	3108      	adds	r1, #8
  409c62:	6063      	str	r3, [r4, #4]
  409c64:	4640      	mov	r0, r8
  409c66:	f7ff f8a3 	bl	408db0 <_free_r>
  409c6a:	e7d6      	b.n	409c1a <_realloc_r+0xde>
  409c6c:	4611      	mov	r1, r2
  409c6e:	f7fa bc15 	b.w	40449c <_malloc_r>
  409c72:	f01e 0f01 	tst.w	lr, #1
  409c76:	d18e      	bne.n	409b96 <_realloc_r+0x5a>
  409c78:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409c7c:	eba9 0a01 	sub.w	sl, r9, r1
  409c80:	f8da 1004 	ldr.w	r1, [sl, #4]
  409c84:	f021 0103 	bic.w	r1, r1, #3
  409c88:	440b      	add	r3, r1
  409c8a:	4423      	add	r3, r4
  409c8c:	4293      	cmp	r3, r2
  409c8e:	db25      	blt.n	409cdc <_realloc_r+0x1a0>
  409c90:	68c2      	ldr	r2, [r0, #12]
  409c92:	6881      	ldr	r1, [r0, #8]
  409c94:	4656      	mov	r6, sl
  409c96:	60ca      	str	r2, [r1, #12]
  409c98:	6091      	str	r1, [r2, #8]
  409c9a:	f8da 100c 	ldr.w	r1, [sl, #12]
  409c9e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409ca2:	1f22      	subs	r2, r4, #4
  409ca4:	2a24      	cmp	r2, #36	; 0x24
  409ca6:	60c1      	str	r1, [r0, #12]
  409ca8:	6088      	str	r0, [r1, #8]
  409caa:	f200 8094 	bhi.w	409dd6 <_realloc_r+0x29a>
  409cae:	2a13      	cmp	r2, #19
  409cb0:	d96f      	bls.n	409d92 <_realloc_r+0x256>
  409cb2:	6829      	ldr	r1, [r5, #0]
  409cb4:	f8ca 1008 	str.w	r1, [sl, #8]
  409cb8:	6869      	ldr	r1, [r5, #4]
  409cba:	f8ca 100c 	str.w	r1, [sl, #12]
  409cbe:	2a1b      	cmp	r2, #27
  409cc0:	f200 80a2 	bhi.w	409e08 <_realloc_r+0x2cc>
  409cc4:	3508      	adds	r5, #8
  409cc6:	f10a 0210 	add.w	r2, sl, #16
  409cca:	e063      	b.n	409d94 <_realloc_r+0x258>
  409ccc:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409cd0:	eba9 0a03 	sub.w	sl, r9, r3
  409cd4:	f8da 1004 	ldr.w	r1, [sl, #4]
  409cd8:	f021 0103 	bic.w	r1, r1, #3
  409cdc:	1863      	adds	r3, r4, r1
  409cde:	4293      	cmp	r3, r2
  409ce0:	f6ff af59 	blt.w	409b96 <_realloc_r+0x5a>
  409ce4:	4656      	mov	r6, sl
  409ce6:	e7d8      	b.n	409c9a <_realloc_r+0x15e>
  409ce8:	6841      	ldr	r1, [r0, #4]
  409cea:	f021 0b03 	bic.w	fp, r1, #3
  409cee:	44a3      	add	fp, r4
  409cf0:	f107 0010 	add.w	r0, r7, #16
  409cf4:	4583      	cmp	fp, r0
  409cf6:	da56      	bge.n	409da6 <_realloc_r+0x26a>
  409cf8:	f01e 0f01 	tst.w	lr, #1
  409cfc:	f47f af4b 	bne.w	409b96 <_realloc_r+0x5a>
  409d00:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409d04:	eba9 0a01 	sub.w	sl, r9, r1
  409d08:	f8da 1004 	ldr.w	r1, [sl, #4]
  409d0c:	f021 0103 	bic.w	r1, r1, #3
  409d10:	448b      	add	fp, r1
  409d12:	4558      	cmp	r0, fp
  409d14:	dce2      	bgt.n	409cdc <_realloc_r+0x1a0>
  409d16:	4656      	mov	r6, sl
  409d18:	f8da 100c 	ldr.w	r1, [sl, #12]
  409d1c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409d20:	1f22      	subs	r2, r4, #4
  409d22:	2a24      	cmp	r2, #36	; 0x24
  409d24:	60c1      	str	r1, [r0, #12]
  409d26:	6088      	str	r0, [r1, #8]
  409d28:	f200 808f 	bhi.w	409e4a <_realloc_r+0x30e>
  409d2c:	2a13      	cmp	r2, #19
  409d2e:	f240 808a 	bls.w	409e46 <_realloc_r+0x30a>
  409d32:	6829      	ldr	r1, [r5, #0]
  409d34:	f8ca 1008 	str.w	r1, [sl, #8]
  409d38:	6869      	ldr	r1, [r5, #4]
  409d3a:	f8ca 100c 	str.w	r1, [sl, #12]
  409d3e:	2a1b      	cmp	r2, #27
  409d40:	f200 808a 	bhi.w	409e58 <_realloc_r+0x31c>
  409d44:	3508      	adds	r5, #8
  409d46:	f10a 0210 	add.w	r2, sl, #16
  409d4a:	6829      	ldr	r1, [r5, #0]
  409d4c:	6011      	str	r1, [r2, #0]
  409d4e:	6869      	ldr	r1, [r5, #4]
  409d50:	6051      	str	r1, [r2, #4]
  409d52:	68a9      	ldr	r1, [r5, #8]
  409d54:	6091      	str	r1, [r2, #8]
  409d56:	eb0a 0107 	add.w	r1, sl, r7
  409d5a:	ebab 0207 	sub.w	r2, fp, r7
  409d5e:	f042 0201 	orr.w	r2, r2, #1
  409d62:	6099      	str	r1, [r3, #8]
  409d64:	604a      	str	r2, [r1, #4]
  409d66:	f8da 3004 	ldr.w	r3, [sl, #4]
  409d6a:	f003 0301 	and.w	r3, r3, #1
  409d6e:	431f      	orrs	r7, r3
  409d70:	4640      	mov	r0, r8
  409d72:	f8ca 7004 	str.w	r7, [sl, #4]
  409d76:	f7fa ff2f 	bl	404bd8 <__malloc_unlock>
  409d7a:	e751      	b.n	409c20 <_realloc_r+0xe4>
  409d7c:	682b      	ldr	r3, [r5, #0]
  409d7e:	6003      	str	r3, [r0, #0]
  409d80:	686b      	ldr	r3, [r5, #4]
  409d82:	6043      	str	r3, [r0, #4]
  409d84:	2a1b      	cmp	r2, #27
  409d86:	d82d      	bhi.n	409de4 <_realloc_r+0x2a8>
  409d88:	f100 0308 	add.w	r3, r0, #8
  409d8c:	f105 0208 	add.w	r2, r5, #8
  409d90:	e71b      	b.n	409bca <_realloc_r+0x8e>
  409d92:	4632      	mov	r2, r6
  409d94:	6829      	ldr	r1, [r5, #0]
  409d96:	6011      	str	r1, [r2, #0]
  409d98:	6869      	ldr	r1, [r5, #4]
  409d9a:	6051      	str	r1, [r2, #4]
  409d9c:	68a9      	ldr	r1, [r5, #8]
  409d9e:	6091      	str	r1, [r2, #8]
  409da0:	461c      	mov	r4, r3
  409da2:	46d1      	mov	r9, sl
  409da4:	e72a      	b.n	409bfc <_realloc_r+0xc0>
  409da6:	eb09 0107 	add.w	r1, r9, r7
  409daa:	ebab 0b07 	sub.w	fp, fp, r7
  409dae:	f04b 0201 	orr.w	r2, fp, #1
  409db2:	6099      	str	r1, [r3, #8]
  409db4:	604a      	str	r2, [r1, #4]
  409db6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409dba:	f003 0301 	and.w	r3, r3, #1
  409dbe:	431f      	orrs	r7, r3
  409dc0:	4640      	mov	r0, r8
  409dc2:	f845 7c04 	str.w	r7, [r5, #-4]
  409dc6:	f7fa ff07 	bl	404bd8 <__malloc_unlock>
  409dca:	462e      	mov	r6, r5
  409dcc:	e728      	b.n	409c20 <_realloc_r+0xe4>
  409dce:	4629      	mov	r1, r5
  409dd0:	f7ff fb56 	bl	409480 <memmove>
  409dd4:	e6ff      	b.n	409bd6 <_realloc_r+0x9a>
  409dd6:	4629      	mov	r1, r5
  409dd8:	4630      	mov	r0, r6
  409dda:	461c      	mov	r4, r3
  409ddc:	46d1      	mov	r9, sl
  409dde:	f7ff fb4f 	bl	409480 <memmove>
  409de2:	e70b      	b.n	409bfc <_realloc_r+0xc0>
  409de4:	68ab      	ldr	r3, [r5, #8]
  409de6:	6083      	str	r3, [r0, #8]
  409de8:	68eb      	ldr	r3, [r5, #12]
  409dea:	60c3      	str	r3, [r0, #12]
  409dec:	2a24      	cmp	r2, #36	; 0x24
  409dee:	d017      	beq.n	409e20 <_realloc_r+0x2e4>
  409df0:	f100 0310 	add.w	r3, r0, #16
  409df4:	f105 0210 	add.w	r2, r5, #16
  409df8:	e6e7      	b.n	409bca <_realloc_r+0x8e>
  409dfa:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409dfe:	f023 0303 	bic.w	r3, r3, #3
  409e02:	441c      	add	r4, r3
  409e04:	462e      	mov	r6, r5
  409e06:	e6f9      	b.n	409bfc <_realloc_r+0xc0>
  409e08:	68a9      	ldr	r1, [r5, #8]
  409e0a:	f8ca 1010 	str.w	r1, [sl, #16]
  409e0e:	68e9      	ldr	r1, [r5, #12]
  409e10:	f8ca 1014 	str.w	r1, [sl, #20]
  409e14:	2a24      	cmp	r2, #36	; 0x24
  409e16:	d00c      	beq.n	409e32 <_realloc_r+0x2f6>
  409e18:	3510      	adds	r5, #16
  409e1a:	f10a 0218 	add.w	r2, sl, #24
  409e1e:	e7b9      	b.n	409d94 <_realloc_r+0x258>
  409e20:	692b      	ldr	r3, [r5, #16]
  409e22:	6103      	str	r3, [r0, #16]
  409e24:	696b      	ldr	r3, [r5, #20]
  409e26:	6143      	str	r3, [r0, #20]
  409e28:	f105 0218 	add.w	r2, r5, #24
  409e2c:	f100 0318 	add.w	r3, r0, #24
  409e30:	e6cb      	b.n	409bca <_realloc_r+0x8e>
  409e32:	692a      	ldr	r2, [r5, #16]
  409e34:	f8ca 2018 	str.w	r2, [sl, #24]
  409e38:	696a      	ldr	r2, [r5, #20]
  409e3a:	f8ca 201c 	str.w	r2, [sl, #28]
  409e3e:	3518      	adds	r5, #24
  409e40:	f10a 0220 	add.w	r2, sl, #32
  409e44:	e7a6      	b.n	409d94 <_realloc_r+0x258>
  409e46:	4632      	mov	r2, r6
  409e48:	e77f      	b.n	409d4a <_realloc_r+0x20e>
  409e4a:	4629      	mov	r1, r5
  409e4c:	4630      	mov	r0, r6
  409e4e:	9301      	str	r3, [sp, #4]
  409e50:	f7ff fb16 	bl	409480 <memmove>
  409e54:	9b01      	ldr	r3, [sp, #4]
  409e56:	e77e      	b.n	409d56 <_realloc_r+0x21a>
  409e58:	68a9      	ldr	r1, [r5, #8]
  409e5a:	f8ca 1010 	str.w	r1, [sl, #16]
  409e5e:	68e9      	ldr	r1, [r5, #12]
  409e60:	f8ca 1014 	str.w	r1, [sl, #20]
  409e64:	2a24      	cmp	r2, #36	; 0x24
  409e66:	d003      	beq.n	409e70 <_realloc_r+0x334>
  409e68:	3510      	adds	r5, #16
  409e6a:	f10a 0218 	add.w	r2, sl, #24
  409e6e:	e76c      	b.n	409d4a <_realloc_r+0x20e>
  409e70:	692a      	ldr	r2, [r5, #16]
  409e72:	f8ca 2018 	str.w	r2, [sl, #24]
  409e76:	696a      	ldr	r2, [r5, #20]
  409e78:	f8ca 201c 	str.w	r2, [sl, #28]
  409e7c:	3518      	adds	r5, #24
  409e7e:	f10a 0220 	add.w	r2, sl, #32
  409e82:	e762      	b.n	409d4a <_realloc_r+0x20e>
  409e84:	204004a8 	.word	0x204004a8

00409e88 <__sread>:
  409e88:	b510      	push	{r4, lr}
  409e8a:	460c      	mov	r4, r1
  409e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409e90:	f000 fb06 	bl	40a4a0 <_read_r>
  409e94:	2800      	cmp	r0, #0
  409e96:	db03      	blt.n	409ea0 <__sread+0x18>
  409e98:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409e9a:	4403      	add	r3, r0
  409e9c:	6523      	str	r3, [r4, #80]	; 0x50
  409e9e:	bd10      	pop	{r4, pc}
  409ea0:	89a3      	ldrh	r3, [r4, #12]
  409ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409ea6:	81a3      	strh	r3, [r4, #12]
  409ea8:	bd10      	pop	{r4, pc}
  409eaa:	bf00      	nop

00409eac <__swrite>:
  409eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409eb0:	4616      	mov	r6, r2
  409eb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409eb6:	461f      	mov	r7, r3
  409eb8:	05d3      	lsls	r3, r2, #23
  409eba:	460c      	mov	r4, r1
  409ebc:	4605      	mov	r5, r0
  409ebe:	d507      	bpl.n	409ed0 <__swrite+0x24>
  409ec0:	2200      	movs	r2, #0
  409ec2:	2302      	movs	r3, #2
  409ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409ec8:	f000 fabe 	bl	40a448 <_lseek_r>
  409ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409ed4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409ed8:	81a2      	strh	r2, [r4, #12]
  409eda:	463b      	mov	r3, r7
  409edc:	4632      	mov	r2, r6
  409ede:	4628      	mov	r0, r5
  409ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409ee4:	f000 b8dc 	b.w	40a0a0 <_write_r>

00409ee8 <__sseek>:
  409ee8:	b510      	push	{r4, lr}
  409eea:	460c      	mov	r4, r1
  409eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409ef0:	f000 faaa 	bl	40a448 <_lseek_r>
  409ef4:	89a3      	ldrh	r3, [r4, #12]
  409ef6:	1c42      	adds	r2, r0, #1
  409ef8:	bf0e      	itee	eq
  409efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409f02:	6520      	strne	r0, [r4, #80]	; 0x50
  409f04:	81a3      	strh	r3, [r4, #12]
  409f06:	bd10      	pop	{r4, pc}

00409f08 <__sclose>:
  409f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409f0c:	f000 b970 	b.w	40a1f0 <_close_r>

00409f10 <__ssprint_r>:
  409f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f14:	6893      	ldr	r3, [r2, #8]
  409f16:	b083      	sub	sp, #12
  409f18:	4690      	mov	r8, r2
  409f1a:	2b00      	cmp	r3, #0
  409f1c:	d070      	beq.n	40a000 <__ssprint_r+0xf0>
  409f1e:	4682      	mov	sl, r0
  409f20:	460c      	mov	r4, r1
  409f22:	6817      	ldr	r7, [r2, #0]
  409f24:	688d      	ldr	r5, [r1, #8]
  409f26:	6808      	ldr	r0, [r1, #0]
  409f28:	e042      	b.n	409fb0 <__ssprint_r+0xa0>
  409f2a:	89a3      	ldrh	r3, [r4, #12]
  409f2c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409f30:	d02e      	beq.n	409f90 <__ssprint_r+0x80>
  409f32:	6965      	ldr	r5, [r4, #20]
  409f34:	6921      	ldr	r1, [r4, #16]
  409f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409f3a:	eba0 0b01 	sub.w	fp, r0, r1
  409f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409f42:	f10b 0001 	add.w	r0, fp, #1
  409f46:	106d      	asrs	r5, r5, #1
  409f48:	4430      	add	r0, r6
  409f4a:	42a8      	cmp	r0, r5
  409f4c:	462a      	mov	r2, r5
  409f4e:	bf84      	itt	hi
  409f50:	4605      	movhi	r5, r0
  409f52:	462a      	movhi	r2, r5
  409f54:	055b      	lsls	r3, r3, #21
  409f56:	d538      	bpl.n	409fca <__ssprint_r+0xba>
  409f58:	4611      	mov	r1, r2
  409f5a:	4650      	mov	r0, sl
  409f5c:	f7fa fa9e 	bl	40449c <_malloc_r>
  409f60:	2800      	cmp	r0, #0
  409f62:	d03c      	beq.n	409fde <__ssprint_r+0xce>
  409f64:	465a      	mov	r2, fp
  409f66:	6921      	ldr	r1, [r4, #16]
  409f68:	9001      	str	r0, [sp, #4]
  409f6a:	f7fa fd47 	bl	4049fc <memcpy>
  409f6e:	89a2      	ldrh	r2, [r4, #12]
  409f70:	9b01      	ldr	r3, [sp, #4]
  409f72:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409f7a:	81a2      	strh	r2, [r4, #12]
  409f7c:	eba5 020b 	sub.w	r2, r5, fp
  409f80:	eb03 000b 	add.w	r0, r3, fp
  409f84:	6165      	str	r5, [r4, #20]
  409f86:	6123      	str	r3, [r4, #16]
  409f88:	6020      	str	r0, [r4, #0]
  409f8a:	60a2      	str	r2, [r4, #8]
  409f8c:	4635      	mov	r5, r6
  409f8e:	46b3      	mov	fp, r6
  409f90:	465a      	mov	r2, fp
  409f92:	4649      	mov	r1, r9
  409f94:	f7ff fa74 	bl	409480 <memmove>
  409f98:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409f9c:	68a2      	ldr	r2, [r4, #8]
  409f9e:	6820      	ldr	r0, [r4, #0]
  409fa0:	1b55      	subs	r5, r2, r5
  409fa2:	4458      	add	r0, fp
  409fa4:	1b9e      	subs	r6, r3, r6
  409fa6:	60a5      	str	r5, [r4, #8]
  409fa8:	6020      	str	r0, [r4, #0]
  409faa:	f8c8 6008 	str.w	r6, [r8, #8]
  409fae:	b33e      	cbz	r6, 40a000 <__ssprint_r+0xf0>
  409fb0:	687e      	ldr	r6, [r7, #4]
  409fb2:	463b      	mov	r3, r7
  409fb4:	3708      	adds	r7, #8
  409fb6:	2e00      	cmp	r6, #0
  409fb8:	d0fa      	beq.n	409fb0 <__ssprint_r+0xa0>
  409fba:	42ae      	cmp	r6, r5
  409fbc:	f8d3 9000 	ldr.w	r9, [r3]
  409fc0:	46ab      	mov	fp, r5
  409fc2:	d2b2      	bcs.n	409f2a <__ssprint_r+0x1a>
  409fc4:	4635      	mov	r5, r6
  409fc6:	46b3      	mov	fp, r6
  409fc8:	e7e2      	b.n	409f90 <__ssprint_r+0x80>
  409fca:	4650      	mov	r0, sl
  409fcc:	f7ff fdb6 	bl	409b3c <_realloc_r>
  409fd0:	4603      	mov	r3, r0
  409fd2:	2800      	cmp	r0, #0
  409fd4:	d1d2      	bne.n	409f7c <__ssprint_r+0x6c>
  409fd6:	6921      	ldr	r1, [r4, #16]
  409fd8:	4650      	mov	r0, sl
  409fda:	f7fe fee9 	bl	408db0 <_free_r>
  409fde:	230c      	movs	r3, #12
  409fe0:	f8ca 3000 	str.w	r3, [sl]
  409fe4:	89a3      	ldrh	r3, [r4, #12]
  409fe6:	2200      	movs	r2, #0
  409fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fec:	f04f 30ff 	mov.w	r0, #4294967295
  409ff0:	81a3      	strh	r3, [r4, #12]
  409ff2:	f8c8 2008 	str.w	r2, [r8, #8]
  409ff6:	f8c8 2004 	str.w	r2, [r8, #4]
  409ffa:	b003      	add	sp, #12
  409ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a000:	2000      	movs	r0, #0
  40a002:	f8c8 0004 	str.w	r0, [r8, #4]
  40a006:	b003      	add	sp, #12
  40a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a00c <__sprint_r.part.0>:
  40a00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a010:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40a012:	049c      	lsls	r4, r3, #18
  40a014:	4693      	mov	fp, r2
  40a016:	d52f      	bpl.n	40a078 <__sprint_r.part.0+0x6c>
  40a018:	6893      	ldr	r3, [r2, #8]
  40a01a:	6812      	ldr	r2, [r2, #0]
  40a01c:	b353      	cbz	r3, 40a074 <__sprint_r.part.0+0x68>
  40a01e:	460e      	mov	r6, r1
  40a020:	4607      	mov	r7, r0
  40a022:	f102 0908 	add.w	r9, r2, #8
  40a026:	e919 0420 	ldmdb	r9, {r5, sl}
  40a02a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40a02e:	d017      	beq.n	40a060 <__sprint_r.part.0+0x54>
  40a030:	3d04      	subs	r5, #4
  40a032:	2400      	movs	r4, #0
  40a034:	e001      	b.n	40a03a <__sprint_r.part.0+0x2e>
  40a036:	45a0      	cmp	r8, r4
  40a038:	d010      	beq.n	40a05c <__sprint_r.part.0+0x50>
  40a03a:	4632      	mov	r2, r6
  40a03c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40a040:	4638      	mov	r0, r7
  40a042:	f000 f999 	bl	40a378 <_fputwc_r>
  40a046:	1c43      	adds	r3, r0, #1
  40a048:	f104 0401 	add.w	r4, r4, #1
  40a04c:	d1f3      	bne.n	40a036 <__sprint_r.part.0+0x2a>
  40a04e:	2300      	movs	r3, #0
  40a050:	f8cb 3008 	str.w	r3, [fp, #8]
  40a054:	f8cb 3004 	str.w	r3, [fp, #4]
  40a058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a05c:	f8db 3008 	ldr.w	r3, [fp, #8]
  40a060:	f02a 0a03 	bic.w	sl, sl, #3
  40a064:	eba3 030a 	sub.w	r3, r3, sl
  40a068:	f8cb 3008 	str.w	r3, [fp, #8]
  40a06c:	f109 0908 	add.w	r9, r9, #8
  40a070:	2b00      	cmp	r3, #0
  40a072:	d1d8      	bne.n	40a026 <__sprint_r.part.0+0x1a>
  40a074:	2000      	movs	r0, #0
  40a076:	e7ea      	b.n	40a04e <__sprint_r.part.0+0x42>
  40a078:	f7fe ff80 	bl	408f7c <__sfvwrite_r>
  40a07c:	2300      	movs	r3, #0
  40a07e:	f8cb 3008 	str.w	r3, [fp, #8]
  40a082:	f8cb 3004 	str.w	r3, [fp, #4]
  40a086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a08a:	bf00      	nop

0040a08c <__sprint_r>:
  40a08c:	6893      	ldr	r3, [r2, #8]
  40a08e:	b10b      	cbz	r3, 40a094 <__sprint_r+0x8>
  40a090:	f7ff bfbc 	b.w	40a00c <__sprint_r.part.0>
  40a094:	b410      	push	{r4}
  40a096:	4618      	mov	r0, r3
  40a098:	6053      	str	r3, [r2, #4]
  40a09a:	bc10      	pop	{r4}
  40a09c:	4770      	bx	lr
  40a09e:	bf00      	nop

0040a0a0 <_write_r>:
  40a0a0:	b570      	push	{r4, r5, r6, lr}
  40a0a2:	460d      	mov	r5, r1
  40a0a4:	4c08      	ldr	r4, [pc, #32]	; (40a0c8 <_write_r+0x28>)
  40a0a6:	4611      	mov	r1, r2
  40a0a8:	4606      	mov	r6, r0
  40a0aa:	461a      	mov	r2, r3
  40a0ac:	4628      	mov	r0, r5
  40a0ae:	2300      	movs	r3, #0
  40a0b0:	6023      	str	r3, [r4, #0]
  40a0b2:	f7f6 fd13 	bl	400adc <_write>
  40a0b6:	1c43      	adds	r3, r0, #1
  40a0b8:	d000      	beq.n	40a0bc <_write_r+0x1c>
  40a0ba:	bd70      	pop	{r4, r5, r6, pc}
  40a0bc:	6823      	ldr	r3, [r4, #0]
  40a0be:	2b00      	cmp	r3, #0
  40a0c0:	d0fb      	beq.n	40a0ba <_write_r+0x1a>
  40a0c2:	6033      	str	r3, [r6, #0]
  40a0c4:	bd70      	pop	{r4, r5, r6, pc}
  40a0c6:	bf00      	nop
  40a0c8:	20400ee0 	.word	0x20400ee0

0040a0cc <__register_exitproc>:
  40a0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a0d0:	4d2c      	ldr	r5, [pc, #176]	; (40a184 <__register_exitproc+0xb8>)
  40a0d2:	4606      	mov	r6, r0
  40a0d4:	6828      	ldr	r0, [r5, #0]
  40a0d6:	4698      	mov	r8, r3
  40a0d8:	460f      	mov	r7, r1
  40a0da:	4691      	mov	r9, r2
  40a0dc:	f7ff f902 	bl	4092e4 <__retarget_lock_acquire_recursive>
  40a0e0:	4b29      	ldr	r3, [pc, #164]	; (40a188 <__register_exitproc+0xbc>)
  40a0e2:	681c      	ldr	r4, [r3, #0]
  40a0e4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a0e8:	2b00      	cmp	r3, #0
  40a0ea:	d03e      	beq.n	40a16a <__register_exitproc+0x9e>
  40a0ec:	685a      	ldr	r2, [r3, #4]
  40a0ee:	2a1f      	cmp	r2, #31
  40a0f0:	dc1c      	bgt.n	40a12c <__register_exitproc+0x60>
  40a0f2:	f102 0e01 	add.w	lr, r2, #1
  40a0f6:	b176      	cbz	r6, 40a116 <__register_exitproc+0x4a>
  40a0f8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a0fc:	2401      	movs	r4, #1
  40a0fe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a102:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a106:	4094      	lsls	r4, r2
  40a108:	4320      	orrs	r0, r4
  40a10a:	2e02      	cmp	r6, #2
  40a10c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a110:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a114:	d023      	beq.n	40a15e <__register_exitproc+0x92>
  40a116:	3202      	adds	r2, #2
  40a118:	f8c3 e004 	str.w	lr, [r3, #4]
  40a11c:	6828      	ldr	r0, [r5, #0]
  40a11e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a122:	f7ff f8e1 	bl	4092e8 <__retarget_lock_release_recursive>
  40a126:	2000      	movs	r0, #0
  40a128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a12c:	4b17      	ldr	r3, [pc, #92]	; (40a18c <__register_exitproc+0xc0>)
  40a12e:	b30b      	cbz	r3, 40a174 <__register_exitproc+0xa8>
  40a130:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a134:	f7fa f9a2 	bl	40447c <malloc>
  40a138:	4603      	mov	r3, r0
  40a13a:	b1d8      	cbz	r0, 40a174 <__register_exitproc+0xa8>
  40a13c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a140:	6002      	str	r2, [r0, #0]
  40a142:	2100      	movs	r1, #0
  40a144:	6041      	str	r1, [r0, #4]
  40a146:	460a      	mov	r2, r1
  40a148:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a14c:	f04f 0e01 	mov.w	lr, #1
  40a150:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a154:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a158:	2e00      	cmp	r6, #0
  40a15a:	d0dc      	beq.n	40a116 <__register_exitproc+0x4a>
  40a15c:	e7cc      	b.n	40a0f8 <__register_exitproc+0x2c>
  40a15e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a162:	430c      	orrs	r4, r1
  40a164:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a168:	e7d5      	b.n	40a116 <__register_exitproc+0x4a>
  40a16a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a16e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a172:	e7bb      	b.n	40a0ec <__register_exitproc+0x20>
  40a174:	6828      	ldr	r0, [r5, #0]
  40a176:	f7ff f8b7 	bl	4092e8 <__retarget_lock_release_recursive>
  40a17a:	f04f 30ff 	mov.w	r0, #4294967295
  40a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a182:	bf00      	nop
  40a184:	204008b8 	.word	0x204008b8
  40a188:	0040acf0 	.word	0x0040acf0
  40a18c:	0040447d 	.word	0x0040447d

0040a190 <_calloc_r>:
  40a190:	b510      	push	{r4, lr}
  40a192:	fb02 f101 	mul.w	r1, r2, r1
  40a196:	f7fa f981 	bl	40449c <_malloc_r>
  40a19a:	4604      	mov	r4, r0
  40a19c:	b1d8      	cbz	r0, 40a1d6 <_calloc_r+0x46>
  40a19e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a1a2:	f022 0203 	bic.w	r2, r2, #3
  40a1a6:	3a04      	subs	r2, #4
  40a1a8:	2a24      	cmp	r2, #36	; 0x24
  40a1aa:	d818      	bhi.n	40a1de <_calloc_r+0x4e>
  40a1ac:	2a13      	cmp	r2, #19
  40a1ae:	d914      	bls.n	40a1da <_calloc_r+0x4a>
  40a1b0:	2300      	movs	r3, #0
  40a1b2:	2a1b      	cmp	r2, #27
  40a1b4:	6003      	str	r3, [r0, #0]
  40a1b6:	6043      	str	r3, [r0, #4]
  40a1b8:	d916      	bls.n	40a1e8 <_calloc_r+0x58>
  40a1ba:	2a24      	cmp	r2, #36	; 0x24
  40a1bc:	6083      	str	r3, [r0, #8]
  40a1be:	60c3      	str	r3, [r0, #12]
  40a1c0:	bf11      	iteee	ne
  40a1c2:	f100 0210 	addne.w	r2, r0, #16
  40a1c6:	6103      	streq	r3, [r0, #16]
  40a1c8:	6143      	streq	r3, [r0, #20]
  40a1ca:	f100 0218 	addeq.w	r2, r0, #24
  40a1ce:	2300      	movs	r3, #0
  40a1d0:	6013      	str	r3, [r2, #0]
  40a1d2:	6053      	str	r3, [r2, #4]
  40a1d4:	6093      	str	r3, [r2, #8]
  40a1d6:	4620      	mov	r0, r4
  40a1d8:	bd10      	pop	{r4, pc}
  40a1da:	4602      	mov	r2, r0
  40a1dc:	e7f7      	b.n	40a1ce <_calloc_r+0x3e>
  40a1de:	2100      	movs	r1, #0
  40a1e0:	f7fa fca6 	bl	404b30 <memset>
  40a1e4:	4620      	mov	r0, r4
  40a1e6:	bd10      	pop	{r4, pc}
  40a1e8:	f100 0208 	add.w	r2, r0, #8
  40a1ec:	e7ef      	b.n	40a1ce <_calloc_r+0x3e>
  40a1ee:	bf00      	nop

0040a1f0 <_close_r>:
  40a1f0:	b538      	push	{r3, r4, r5, lr}
  40a1f2:	4c07      	ldr	r4, [pc, #28]	; (40a210 <_close_r+0x20>)
  40a1f4:	2300      	movs	r3, #0
  40a1f6:	4605      	mov	r5, r0
  40a1f8:	4608      	mov	r0, r1
  40a1fa:	6023      	str	r3, [r4, #0]
  40a1fc:	f7f7 f994 	bl	401528 <_close>
  40a200:	1c43      	adds	r3, r0, #1
  40a202:	d000      	beq.n	40a206 <_close_r+0x16>
  40a204:	bd38      	pop	{r3, r4, r5, pc}
  40a206:	6823      	ldr	r3, [r4, #0]
  40a208:	2b00      	cmp	r3, #0
  40a20a:	d0fb      	beq.n	40a204 <_close_r+0x14>
  40a20c:	602b      	str	r3, [r5, #0]
  40a20e:	bd38      	pop	{r3, r4, r5, pc}
  40a210:	20400ee0 	.word	0x20400ee0

0040a214 <_fclose_r>:
  40a214:	b570      	push	{r4, r5, r6, lr}
  40a216:	b159      	cbz	r1, 40a230 <_fclose_r+0x1c>
  40a218:	4605      	mov	r5, r0
  40a21a:	460c      	mov	r4, r1
  40a21c:	b110      	cbz	r0, 40a224 <_fclose_r+0x10>
  40a21e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a220:	2b00      	cmp	r3, #0
  40a222:	d03c      	beq.n	40a29e <_fclose_r+0x8a>
  40a224:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a226:	07d8      	lsls	r0, r3, #31
  40a228:	d505      	bpl.n	40a236 <_fclose_r+0x22>
  40a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a22e:	b92b      	cbnz	r3, 40a23c <_fclose_r+0x28>
  40a230:	2600      	movs	r6, #0
  40a232:	4630      	mov	r0, r6
  40a234:	bd70      	pop	{r4, r5, r6, pc}
  40a236:	89a3      	ldrh	r3, [r4, #12]
  40a238:	0599      	lsls	r1, r3, #22
  40a23a:	d53c      	bpl.n	40a2b6 <_fclose_r+0xa2>
  40a23c:	4621      	mov	r1, r4
  40a23e:	4628      	mov	r0, r5
  40a240:	f7fe fc1c 	bl	408a7c <__sflush_r>
  40a244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a246:	4606      	mov	r6, r0
  40a248:	b133      	cbz	r3, 40a258 <_fclose_r+0x44>
  40a24a:	69e1      	ldr	r1, [r4, #28]
  40a24c:	4628      	mov	r0, r5
  40a24e:	4798      	blx	r3
  40a250:	2800      	cmp	r0, #0
  40a252:	bfb8      	it	lt
  40a254:	f04f 36ff 	movlt.w	r6, #4294967295
  40a258:	89a3      	ldrh	r3, [r4, #12]
  40a25a:	061a      	lsls	r2, r3, #24
  40a25c:	d422      	bmi.n	40a2a4 <_fclose_r+0x90>
  40a25e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a260:	b141      	cbz	r1, 40a274 <_fclose_r+0x60>
  40a262:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a266:	4299      	cmp	r1, r3
  40a268:	d002      	beq.n	40a270 <_fclose_r+0x5c>
  40a26a:	4628      	mov	r0, r5
  40a26c:	f7fe fda0 	bl	408db0 <_free_r>
  40a270:	2300      	movs	r3, #0
  40a272:	6323      	str	r3, [r4, #48]	; 0x30
  40a274:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a276:	b121      	cbz	r1, 40a282 <_fclose_r+0x6e>
  40a278:	4628      	mov	r0, r5
  40a27a:	f7fe fd99 	bl	408db0 <_free_r>
  40a27e:	2300      	movs	r3, #0
  40a280:	6463      	str	r3, [r4, #68]	; 0x44
  40a282:	f7fe fd1f 	bl	408cc4 <__sfp_lock_acquire>
  40a286:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a288:	2200      	movs	r2, #0
  40a28a:	07db      	lsls	r3, r3, #31
  40a28c:	81a2      	strh	r2, [r4, #12]
  40a28e:	d50e      	bpl.n	40a2ae <_fclose_r+0x9a>
  40a290:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a292:	f7ff f825 	bl	4092e0 <__retarget_lock_close_recursive>
  40a296:	f7fe fd1b 	bl	408cd0 <__sfp_lock_release>
  40a29a:	4630      	mov	r0, r6
  40a29c:	bd70      	pop	{r4, r5, r6, pc}
  40a29e:	f7fe fce5 	bl	408c6c <__sinit>
  40a2a2:	e7bf      	b.n	40a224 <_fclose_r+0x10>
  40a2a4:	6921      	ldr	r1, [r4, #16]
  40a2a6:	4628      	mov	r0, r5
  40a2a8:	f7fe fd82 	bl	408db0 <_free_r>
  40a2ac:	e7d7      	b.n	40a25e <_fclose_r+0x4a>
  40a2ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a2b0:	f7ff f81a 	bl	4092e8 <__retarget_lock_release_recursive>
  40a2b4:	e7ec      	b.n	40a290 <_fclose_r+0x7c>
  40a2b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a2b8:	f7ff f814 	bl	4092e4 <__retarget_lock_acquire_recursive>
  40a2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a2c0:	2b00      	cmp	r3, #0
  40a2c2:	d1bb      	bne.n	40a23c <_fclose_r+0x28>
  40a2c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a2c6:	f016 0601 	ands.w	r6, r6, #1
  40a2ca:	d1b1      	bne.n	40a230 <_fclose_r+0x1c>
  40a2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a2ce:	f7ff f80b 	bl	4092e8 <__retarget_lock_release_recursive>
  40a2d2:	4630      	mov	r0, r6
  40a2d4:	bd70      	pop	{r4, r5, r6, pc}
  40a2d6:	bf00      	nop

0040a2d8 <__fputwc>:
  40a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a2dc:	b082      	sub	sp, #8
  40a2de:	4680      	mov	r8, r0
  40a2e0:	4689      	mov	r9, r1
  40a2e2:	4614      	mov	r4, r2
  40a2e4:	f000 f8a2 	bl	40a42c <__locale_mb_cur_max>
  40a2e8:	2801      	cmp	r0, #1
  40a2ea:	d036      	beq.n	40a35a <__fputwc+0x82>
  40a2ec:	464a      	mov	r2, r9
  40a2ee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a2f2:	a901      	add	r1, sp, #4
  40a2f4:	4640      	mov	r0, r8
  40a2f6:	f000 f941 	bl	40a57c <_wcrtomb_r>
  40a2fa:	1c42      	adds	r2, r0, #1
  40a2fc:	4606      	mov	r6, r0
  40a2fe:	d025      	beq.n	40a34c <__fputwc+0x74>
  40a300:	b3a8      	cbz	r0, 40a36e <__fputwc+0x96>
  40a302:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a306:	2500      	movs	r5, #0
  40a308:	f10d 0a04 	add.w	sl, sp, #4
  40a30c:	e009      	b.n	40a322 <__fputwc+0x4a>
  40a30e:	6823      	ldr	r3, [r4, #0]
  40a310:	1c5a      	adds	r2, r3, #1
  40a312:	6022      	str	r2, [r4, #0]
  40a314:	f883 e000 	strb.w	lr, [r3]
  40a318:	3501      	adds	r5, #1
  40a31a:	42b5      	cmp	r5, r6
  40a31c:	d227      	bcs.n	40a36e <__fputwc+0x96>
  40a31e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a322:	68a3      	ldr	r3, [r4, #8]
  40a324:	3b01      	subs	r3, #1
  40a326:	2b00      	cmp	r3, #0
  40a328:	60a3      	str	r3, [r4, #8]
  40a32a:	daf0      	bge.n	40a30e <__fputwc+0x36>
  40a32c:	69a7      	ldr	r7, [r4, #24]
  40a32e:	42bb      	cmp	r3, r7
  40a330:	4671      	mov	r1, lr
  40a332:	4622      	mov	r2, r4
  40a334:	4640      	mov	r0, r8
  40a336:	db02      	blt.n	40a33e <__fputwc+0x66>
  40a338:	f1be 0f0a 	cmp.w	lr, #10
  40a33c:	d1e7      	bne.n	40a30e <__fputwc+0x36>
  40a33e:	f000 f8c5 	bl	40a4cc <__swbuf_r>
  40a342:	1c43      	adds	r3, r0, #1
  40a344:	d1e8      	bne.n	40a318 <__fputwc+0x40>
  40a346:	b002      	add	sp, #8
  40a348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a34c:	89a3      	ldrh	r3, [r4, #12]
  40a34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a352:	81a3      	strh	r3, [r4, #12]
  40a354:	b002      	add	sp, #8
  40a356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a35a:	f109 33ff 	add.w	r3, r9, #4294967295
  40a35e:	2bfe      	cmp	r3, #254	; 0xfe
  40a360:	d8c4      	bhi.n	40a2ec <__fputwc+0x14>
  40a362:	fa5f fe89 	uxtb.w	lr, r9
  40a366:	4606      	mov	r6, r0
  40a368:	f88d e004 	strb.w	lr, [sp, #4]
  40a36c:	e7cb      	b.n	40a306 <__fputwc+0x2e>
  40a36e:	4648      	mov	r0, r9
  40a370:	b002      	add	sp, #8
  40a372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a376:	bf00      	nop

0040a378 <_fputwc_r>:
  40a378:	b530      	push	{r4, r5, lr}
  40a37a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a37c:	f013 0f01 	tst.w	r3, #1
  40a380:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a384:	4614      	mov	r4, r2
  40a386:	b083      	sub	sp, #12
  40a388:	4605      	mov	r5, r0
  40a38a:	b29a      	uxth	r2, r3
  40a38c:	d101      	bne.n	40a392 <_fputwc_r+0x1a>
  40a38e:	0590      	lsls	r0, r2, #22
  40a390:	d51c      	bpl.n	40a3cc <_fputwc_r+0x54>
  40a392:	0490      	lsls	r0, r2, #18
  40a394:	d406      	bmi.n	40a3a4 <_fputwc_r+0x2c>
  40a396:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a39c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a3a0:	81a3      	strh	r3, [r4, #12]
  40a3a2:	6662      	str	r2, [r4, #100]	; 0x64
  40a3a4:	4628      	mov	r0, r5
  40a3a6:	4622      	mov	r2, r4
  40a3a8:	f7ff ff96 	bl	40a2d8 <__fputwc>
  40a3ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a3ae:	07da      	lsls	r2, r3, #31
  40a3b0:	4605      	mov	r5, r0
  40a3b2:	d402      	bmi.n	40a3ba <_fputwc_r+0x42>
  40a3b4:	89a3      	ldrh	r3, [r4, #12]
  40a3b6:	059b      	lsls	r3, r3, #22
  40a3b8:	d502      	bpl.n	40a3c0 <_fputwc_r+0x48>
  40a3ba:	4628      	mov	r0, r5
  40a3bc:	b003      	add	sp, #12
  40a3be:	bd30      	pop	{r4, r5, pc}
  40a3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a3c2:	f7fe ff91 	bl	4092e8 <__retarget_lock_release_recursive>
  40a3c6:	4628      	mov	r0, r5
  40a3c8:	b003      	add	sp, #12
  40a3ca:	bd30      	pop	{r4, r5, pc}
  40a3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a3ce:	9101      	str	r1, [sp, #4]
  40a3d0:	f7fe ff88 	bl	4092e4 <__retarget_lock_acquire_recursive>
  40a3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a3d8:	9901      	ldr	r1, [sp, #4]
  40a3da:	b29a      	uxth	r2, r3
  40a3dc:	e7d9      	b.n	40a392 <_fputwc_r+0x1a>
  40a3de:	bf00      	nop

0040a3e0 <_fstat_r>:
  40a3e0:	b538      	push	{r3, r4, r5, lr}
  40a3e2:	460b      	mov	r3, r1
  40a3e4:	4c07      	ldr	r4, [pc, #28]	; (40a404 <_fstat_r+0x24>)
  40a3e6:	4605      	mov	r5, r0
  40a3e8:	4611      	mov	r1, r2
  40a3ea:	4618      	mov	r0, r3
  40a3ec:	2300      	movs	r3, #0
  40a3ee:	6023      	str	r3, [r4, #0]
  40a3f0:	f7f7 f89d 	bl	40152e <_fstat>
  40a3f4:	1c43      	adds	r3, r0, #1
  40a3f6:	d000      	beq.n	40a3fa <_fstat_r+0x1a>
  40a3f8:	bd38      	pop	{r3, r4, r5, pc}
  40a3fa:	6823      	ldr	r3, [r4, #0]
  40a3fc:	2b00      	cmp	r3, #0
  40a3fe:	d0fb      	beq.n	40a3f8 <_fstat_r+0x18>
  40a400:	602b      	str	r3, [r5, #0]
  40a402:	bd38      	pop	{r3, r4, r5, pc}
  40a404:	20400ee0 	.word	0x20400ee0

0040a408 <_isatty_r>:
  40a408:	b538      	push	{r3, r4, r5, lr}
  40a40a:	4c07      	ldr	r4, [pc, #28]	; (40a428 <_isatty_r+0x20>)
  40a40c:	2300      	movs	r3, #0
  40a40e:	4605      	mov	r5, r0
  40a410:	4608      	mov	r0, r1
  40a412:	6023      	str	r3, [r4, #0]
  40a414:	f7f7 f890 	bl	401538 <_isatty>
  40a418:	1c43      	adds	r3, r0, #1
  40a41a:	d000      	beq.n	40a41e <_isatty_r+0x16>
  40a41c:	bd38      	pop	{r3, r4, r5, pc}
  40a41e:	6823      	ldr	r3, [r4, #0]
  40a420:	2b00      	cmp	r3, #0
  40a422:	d0fb      	beq.n	40a41c <_isatty_r+0x14>
  40a424:	602b      	str	r3, [r5, #0]
  40a426:	bd38      	pop	{r3, r4, r5, pc}
  40a428:	20400ee0 	.word	0x20400ee0

0040a42c <__locale_mb_cur_max>:
  40a42c:	4b04      	ldr	r3, [pc, #16]	; (40a440 <__locale_mb_cur_max+0x14>)
  40a42e:	4a05      	ldr	r2, [pc, #20]	; (40a444 <__locale_mb_cur_max+0x18>)
  40a430:	681b      	ldr	r3, [r3, #0]
  40a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a434:	2b00      	cmp	r3, #0
  40a436:	bf08      	it	eq
  40a438:	4613      	moveq	r3, r2
  40a43a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a43e:	4770      	bx	lr
  40a440:	20400078 	.word	0x20400078
  40a444:	204008bc 	.word	0x204008bc

0040a448 <_lseek_r>:
  40a448:	b570      	push	{r4, r5, r6, lr}
  40a44a:	460d      	mov	r5, r1
  40a44c:	4c08      	ldr	r4, [pc, #32]	; (40a470 <_lseek_r+0x28>)
  40a44e:	4611      	mov	r1, r2
  40a450:	4606      	mov	r6, r0
  40a452:	461a      	mov	r2, r3
  40a454:	4628      	mov	r0, r5
  40a456:	2300      	movs	r3, #0
  40a458:	6023      	str	r3, [r4, #0]
  40a45a:	f7f7 f86f 	bl	40153c <_lseek>
  40a45e:	1c43      	adds	r3, r0, #1
  40a460:	d000      	beq.n	40a464 <_lseek_r+0x1c>
  40a462:	bd70      	pop	{r4, r5, r6, pc}
  40a464:	6823      	ldr	r3, [r4, #0]
  40a466:	2b00      	cmp	r3, #0
  40a468:	d0fb      	beq.n	40a462 <_lseek_r+0x1a>
  40a46a:	6033      	str	r3, [r6, #0]
  40a46c:	bd70      	pop	{r4, r5, r6, pc}
  40a46e:	bf00      	nop
  40a470:	20400ee0 	.word	0x20400ee0

0040a474 <__ascii_mbtowc>:
  40a474:	b082      	sub	sp, #8
  40a476:	b149      	cbz	r1, 40a48c <__ascii_mbtowc+0x18>
  40a478:	b15a      	cbz	r2, 40a492 <__ascii_mbtowc+0x1e>
  40a47a:	b16b      	cbz	r3, 40a498 <__ascii_mbtowc+0x24>
  40a47c:	7813      	ldrb	r3, [r2, #0]
  40a47e:	600b      	str	r3, [r1, #0]
  40a480:	7812      	ldrb	r2, [r2, #0]
  40a482:	1c10      	adds	r0, r2, #0
  40a484:	bf18      	it	ne
  40a486:	2001      	movne	r0, #1
  40a488:	b002      	add	sp, #8
  40a48a:	4770      	bx	lr
  40a48c:	a901      	add	r1, sp, #4
  40a48e:	2a00      	cmp	r2, #0
  40a490:	d1f3      	bne.n	40a47a <__ascii_mbtowc+0x6>
  40a492:	4610      	mov	r0, r2
  40a494:	b002      	add	sp, #8
  40a496:	4770      	bx	lr
  40a498:	f06f 0001 	mvn.w	r0, #1
  40a49c:	e7f4      	b.n	40a488 <__ascii_mbtowc+0x14>
  40a49e:	bf00      	nop

0040a4a0 <_read_r>:
  40a4a0:	b570      	push	{r4, r5, r6, lr}
  40a4a2:	460d      	mov	r5, r1
  40a4a4:	4c08      	ldr	r4, [pc, #32]	; (40a4c8 <_read_r+0x28>)
  40a4a6:	4611      	mov	r1, r2
  40a4a8:	4606      	mov	r6, r0
  40a4aa:	461a      	mov	r2, r3
  40a4ac:	4628      	mov	r0, r5
  40a4ae:	2300      	movs	r3, #0
  40a4b0:	6023      	str	r3, [r4, #0]
  40a4b2:	f7f6 faf5 	bl	400aa0 <_read>
  40a4b6:	1c43      	adds	r3, r0, #1
  40a4b8:	d000      	beq.n	40a4bc <_read_r+0x1c>
  40a4ba:	bd70      	pop	{r4, r5, r6, pc}
  40a4bc:	6823      	ldr	r3, [r4, #0]
  40a4be:	2b00      	cmp	r3, #0
  40a4c0:	d0fb      	beq.n	40a4ba <_read_r+0x1a>
  40a4c2:	6033      	str	r3, [r6, #0]
  40a4c4:	bd70      	pop	{r4, r5, r6, pc}
  40a4c6:	bf00      	nop
  40a4c8:	20400ee0 	.word	0x20400ee0

0040a4cc <__swbuf_r>:
  40a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a4ce:	460d      	mov	r5, r1
  40a4d0:	4614      	mov	r4, r2
  40a4d2:	4606      	mov	r6, r0
  40a4d4:	b110      	cbz	r0, 40a4dc <__swbuf_r+0x10>
  40a4d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a4d8:	2b00      	cmp	r3, #0
  40a4da:	d04b      	beq.n	40a574 <__swbuf_r+0xa8>
  40a4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a4e0:	69a3      	ldr	r3, [r4, #24]
  40a4e2:	60a3      	str	r3, [r4, #8]
  40a4e4:	b291      	uxth	r1, r2
  40a4e6:	0708      	lsls	r0, r1, #28
  40a4e8:	d539      	bpl.n	40a55e <__swbuf_r+0x92>
  40a4ea:	6923      	ldr	r3, [r4, #16]
  40a4ec:	2b00      	cmp	r3, #0
  40a4ee:	d036      	beq.n	40a55e <__swbuf_r+0x92>
  40a4f0:	b2ed      	uxtb	r5, r5
  40a4f2:	0489      	lsls	r1, r1, #18
  40a4f4:	462f      	mov	r7, r5
  40a4f6:	d515      	bpl.n	40a524 <__swbuf_r+0x58>
  40a4f8:	6822      	ldr	r2, [r4, #0]
  40a4fa:	6961      	ldr	r1, [r4, #20]
  40a4fc:	1ad3      	subs	r3, r2, r3
  40a4fe:	428b      	cmp	r3, r1
  40a500:	da1c      	bge.n	40a53c <__swbuf_r+0x70>
  40a502:	3301      	adds	r3, #1
  40a504:	68a1      	ldr	r1, [r4, #8]
  40a506:	1c50      	adds	r0, r2, #1
  40a508:	3901      	subs	r1, #1
  40a50a:	60a1      	str	r1, [r4, #8]
  40a50c:	6020      	str	r0, [r4, #0]
  40a50e:	7015      	strb	r5, [r2, #0]
  40a510:	6962      	ldr	r2, [r4, #20]
  40a512:	429a      	cmp	r2, r3
  40a514:	d01a      	beq.n	40a54c <__swbuf_r+0x80>
  40a516:	89a3      	ldrh	r3, [r4, #12]
  40a518:	07db      	lsls	r3, r3, #31
  40a51a:	d501      	bpl.n	40a520 <__swbuf_r+0x54>
  40a51c:	2d0a      	cmp	r5, #10
  40a51e:	d015      	beq.n	40a54c <__swbuf_r+0x80>
  40a520:	4638      	mov	r0, r7
  40a522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a524:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a52a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a52e:	81a2      	strh	r2, [r4, #12]
  40a530:	6822      	ldr	r2, [r4, #0]
  40a532:	6661      	str	r1, [r4, #100]	; 0x64
  40a534:	6961      	ldr	r1, [r4, #20]
  40a536:	1ad3      	subs	r3, r2, r3
  40a538:	428b      	cmp	r3, r1
  40a53a:	dbe2      	blt.n	40a502 <__swbuf_r+0x36>
  40a53c:	4621      	mov	r1, r4
  40a53e:	4630      	mov	r0, r6
  40a540:	f7fe fb3c 	bl	408bbc <_fflush_r>
  40a544:	b940      	cbnz	r0, 40a558 <__swbuf_r+0x8c>
  40a546:	6822      	ldr	r2, [r4, #0]
  40a548:	2301      	movs	r3, #1
  40a54a:	e7db      	b.n	40a504 <__swbuf_r+0x38>
  40a54c:	4621      	mov	r1, r4
  40a54e:	4630      	mov	r0, r6
  40a550:	f7fe fb34 	bl	408bbc <_fflush_r>
  40a554:	2800      	cmp	r0, #0
  40a556:	d0e3      	beq.n	40a520 <__swbuf_r+0x54>
  40a558:	f04f 37ff 	mov.w	r7, #4294967295
  40a55c:	e7e0      	b.n	40a520 <__swbuf_r+0x54>
  40a55e:	4621      	mov	r1, r4
  40a560:	4630      	mov	r0, r6
  40a562:	f7fd fa57 	bl	407a14 <__swsetup_r>
  40a566:	2800      	cmp	r0, #0
  40a568:	d1f6      	bne.n	40a558 <__swbuf_r+0x8c>
  40a56a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a56e:	6923      	ldr	r3, [r4, #16]
  40a570:	b291      	uxth	r1, r2
  40a572:	e7bd      	b.n	40a4f0 <__swbuf_r+0x24>
  40a574:	f7fe fb7a 	bl	408c6c <__sinit>
  40a578:	e7b0      	b.n	40a4dc <__swbuf_r+0x10>
  40a57a:	bf00      	nop

0040a57c <_wcrtomb_r>:
  40a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a57e:	4606      	mov	r6, r0
  40a580:	b085      	sub	sp, #20
  40a582:	461f      	mov	r7, r3
  40a584:	b189      	cbz	r1, 40a5aa <_wcrtomb_r+0x2e>
  40a586:	4c10      	ldr	r4, [pc, #64]	; (40a5c8 <_wcrtomb_r+0x4c>)
  40a588:	4d10      	ldr	r5, [pc, #64]	; (40a5cc <_wcrtomb_r+0x50>)
  40a58a:	6824      	ldr	r4, [r4, #0]
  40a58c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a58e:	2c00      	cmp	r4, #0
  40a590:	bf08      	it	eq
  40a592:	462c      	moveq	r4, r5
  40a594:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a598:	47a0      	blx	r4
  40a59a:	1c43      	adds	r3, r0, #1
  40a59c:	d103      	bne.n	40a5a6 <_wcrtomb_r+0x2a>
  40a59e:	2200      	movs	r2, #0
  40a5a0:	238a      	movs	r3, #138	; 0x8a
  40a5a2:	603a      	str	r2, [r7, #0]
  40a5a4:	6033      	str	r3, [r6, #0]
  40a5a6:	b005      	add	sp, #20
  40a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a5aa:	460c      	mov	r4, r1
  40a5ac:	4906      	ldr	r1, [pc, #24]	; (40a5c8 <_wcrtomb_r+0x4c>)
  40a5ae:	4a07      	ldr	r2, [pc, #28]	; (40a5cc <_wcrtomb_r+0x50>)
  40a5b0:	6809      	ldr	r1, [r1, #0]
  40a5b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a5b4:	2900      	cmp	r1, #0
  40a5b6:	bf08      	it	eq
  40a5b8:	4611      	moveq	r1, r2
  40a5ba:	4622      	mov	r2, r4
  40a5bc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a5c0:	a901      	add	r1, sp, #4
  40a5c2:	47a0      	blx	r4
  40a5c4:	e7e9      	b.n	40a59a <_wcrtomb_r+0x1e>
  40a5c6:	bf00      	nop
  40a5c8:	20400078 	.word	0x20400078
  40a5cc:	204008bc 	.word	0x204008bc

0040a5d0 <__ascii_wctomb>:
  40a5d0:	b121      	cbz	r1, 40a5dc <__ascii_wctomb+0xc>
  40a5d2:	2aff      	cmp	r2, #255	; 0xff
  40a5d4:	d804      	bhi.n	40a5e0 <__ascii_wctomb+0x10>
  40a5d6:	700a      	strb	r2, [r1, #0]
  40a5d8:	2001      	movs	r0, #1
  40a5da:	4770      	bx	lr
  40a5dc:	4608      	mov	r0, r1
  40a5de:	4770      	bx	lr
  40a5e0:	238a      	movs	r3, #138	; 0x8a
  40a5e2:	6003      	str	r3, [r0, #0]
  40a5e4:	f04f 30ff 	mov.w	r0, #4294967295
  40a5e8:	4770      	bx	lr
  40a5ea:	bf00      	nop

0040a5ec <__aeabi_dcmpun>:
  40a5ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a5f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a5f4:	d102      	bne.n	40a5fc <__aeabi_dcmpun+0x10>
  40a5f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a5fa:	d10a      	bne.n	40a612 <__aeabi_dcmpun+0x26>
  40a5fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a604:	d102      	bne.n	40a60c <__aeabi_dcmpun+0x20>
  40a606:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a60a:	d102      	bne.n	40a612 <__aeabi_dcmpun+0x26>
  40a60c:	f04f 0000 	mov.w	r0, #0
  40a610:	4770      	bx	lr
  40a612:	f04f 0001 	mov.w	r0, #1
  40a616:	4770      	bx	lr

0040a618 <__aeabi_d2iz>:
  40a618:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a61c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a620:	d215      	bcs.n	40a64e <__aeabi_d2iz+0x36>
  40a622:	d511      	bpl.n	40a648 <__aeabi_d2iz+0x30>
  40a624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a62c:	d912      	bls.n	40a654 <__aeabi_d2iz+0x3c>
  40a62e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a63a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a63e:	fa23 f002 	lsr.w	r0, r3, r2
  40a642:	bf18      	it	ne
  40a644:	4240      	negne	r0, r0
  40a646:	4770      	bx	lr
  40a648:	f04f 0000 	mov.w	r0, #0
  40a64c:	4770      	bx	lr
  40a64e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a652:	d105      	bne.n	40a660 <__aeabi_d2iz+0x48>
  40a654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a658:	bf08      	it	eq
  40a65a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a65e:	4770      	bx	lr
  40a660:	f04f 0000 	mov.w	r0, #0
  40a664:	4770      	bx	lr
  40a666:	bf00      	nop

0040a668 <__aeabi_uldivmod>:
  40a668:	b953      	cbnz	r3, 40a680 <__aeabi_uldivmod+0x18>
  40a66a:	b94a      	cbnz	r2, 40a680 <__aeabi_uldivmod+0x18>
  40a66c:	2900      	cmp	r1, #0
  40a66e:	bf08      	it	eq
  40a670:	2800      	cmpeq	r0, #0
  40a672:	bf1c      	itt	ne
  40a674:	f04f 31ff 	movne.w	r1, #4294967295
  40a678:	f04f 30ff 	movne.w	r0, #4294967295
  40a67c:	f000 b97a 	b.w	40a974 <__aeabi_idiv0>
  40a680:	f1ad 0c08 	sub.w	ip, sp, #8
  40a684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a688:	f000 f806 	bl	40a698 <__udivmoddi4>
  40a68c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a694:	b004      	add	sp, #16
  40a696:	4770      	bx	lr

0040a698 <__udivmoddi4>:
  40a698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a69c:	468c      	mov	ip, r1
  40a69e:	460d      	mov	r5, r1
  40a6a0:	4604      	mov	r4, r0
  40a6a2:	9e08      	ldr	r6, [sp, #32]
  40a6a4:	2b00      	cmp	r3, #0
  40a6a6:	d151      	bne.n	40a74c <__udivmoddi4+0xb4>
  40a6a8:	428a      	cmp	r2, r1
  40a6aa:	4617      	mov	r7, r2
  40a6ac:	d96d      	bls.n	40a78a <__udivmoddi4+0xf2>
  40a6ae:	fab2 fe82 	clz	lr, r2
  40a6b2:	f1be 0f00 	cmp.w	lr, #0
  40a6b6:	d00b      	beq.n	40a6d0 <__udivmoddi4+0x38>
  40a6b8:	f1ce 0c20 	rsb	ip, lr, #32
  40a6bc:	fa01 f50e 	lsl.w	r5, r1, lr
  40a6c0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a6c4:	fa02 f70e 	lsl.w	r7, r2, lr
  40a6c8:	ea4c 0c05 	orr.w	ip, ip, r5
  40a6cc:	fa00 f40e 	lsl.w	r4, r0, lr
  40a6d0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a6d4:	0c25      	lsrs	r5, r4, #16
  40a6d6:	fbbc f8fa 	udiv	r8, ip, sl
  40a6da:	fa1f f987 	uxth.w	r9, r7
  40a6de:	fb0a cc18 	mls	ip, sl, r8, ip
  40a6e2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a6e6:	fb08 f309 	mul.w	r3, r8, r9
  40a6ea:	42ab      	cmp	r3, r5
  40a6ec:	d90a      	bls.n	40a704 <__udivmoddi4+0x6c>
  40a6ee:	19ed      	adds	r5, r5, r7
  40a6f0:	f108 32ff 	add.w	r2, r8, #4294967295
  40a6f4:	f080 8123 	bcs.w	40a93e <__udivmoddi4+0x2a6>
  40a6f8:	42ab      	cmp	r3, r5
  40a6fa:	f240 8120 	bls.w	40a93e <__udivmoddi4+0x2a6>
  40a6fe:	f1a8 0802 	sub.w	r8, r8, #2
  40a702:	443d      	add	r5, r7
  40a704:	1aed      	subs	r5, r5, r3
  40a706:	b2a4      	uxth	r4, r4
  40a708:	fbb5 f0fa 	udiv	r0, r5, sl
  40a70c:	fb0a 5510 	mls	r5, sl, r0, r5
  40a710:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a714:	fb00 f909 	mul.w	r9, r0, r9
  40a718:	45a1      	cmp	r9, r4
  40a71a:	d909      	bls.n	40a730 <__udivmoddi4+0x98>
  40a71c:	19e4      	adds	r4, r4, r7
  40a71e:	f100 33ff 	add.w	r3, r0, #4294967295
  40a722:	f080 810a 	bcs.w	40a93a <__udivmoddi4+0x2a2>
  40a726:	45a1      	cmp	r9, r4
  40a728:	f240 8107 	bls.w	40a93a <__udivmoddi4+0x2a2>
  40a72c:	3802      	subs	r0, #2
  40a72e:	443c      	add	r4, r7
  40a730:	eba4 0409 	sub.w	r4, r4, r9
  40a734:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a738:	2100      	movs	r1, #0
  40a73a:	2e00      	cmp	r6, #0
  40a73c:	d061      	beq.n	40a802 <__udivmoddi4+0x16a>
  40a73e:	fa24 f40e 	lsr.w	r4, r4, lr
  40a742:	2300      	movs	r3, #0
  40a744:	6034      	str	r4, [r6, #0]
  40a746:	6073      	str	r3, [r6, #4]
  40a748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a74c:	428b      	cmp	r3, r1
  40a74e:	d907      	bls.n	40a760 <__udivmoddi4+0xc8>
  40a750:	2e00      	cmp	r6, #0
  40a752:	d054      	beq.n	40a7fe <__udivmoddi4+0x166>
  40a754:	2100      	movs	r1, #0
  40a756:	e886 0021 	stmia.w	r6, {r0, r5}
  40a75a:	4608      	mov	r0, r1
  40a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a760:	fab3 f183 	clz	r1, r3
  40a764:	2900      	cmp	r1, #0
  40a766:	f040 808e 	bne.w	40a886 <__udivmoddi4+0x1ee>
  40a76a:	42ab      	cmp	r3, r5
  40a76c:	d302      	bcc.n	40a774 <__udivmoddi4+0xdc>
  40a76e:	4282      	cmp	r2, r0
  40a770:	f200 80fa 	bhi.w	40a968 <__udivmoddi4+0x2d0>
  40a774:	1a84      	subs	r4, r0, r2
  40a776:	eb65 0503 	sbc.w	r5, r5, r3
  40a77a:	2001      	movs	r0, #1
  40a77c:	46ac      	mov	ip, r5
  40a77e:	2e00      	cmp	r6, #0
  40a780:	d03f      	beq.n	40a802 <__udivmoddi4+0x16a>
  40a782:	e886 1010 	stmia.w	r6, {r4, ip}
  40a786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a78a:	b912      	cbnz	r2, 40a792 <__udivmoddi4+0xfa>
  40a78c:	2701      	movs	r7, #1
  40a78e:	fbb7 f7f2 	udiv	r7, r7, r2
  40a792:	fab7 fe87 	clz	lr, r7
  40a796:	f1be 0f00 	cmp.w	lr, #0
  40a79a:	d134      	bne.n	40a806 <__udivmoddi4+0x16e>
  40a79c:	1beb      	subs	r3, r5, r7
  40a79e:	0c3a      	lsrs	r2, r7, #16
  40a7a0:	fa1f fc87 	uxth.w	ip, r7
  40a7a4:	2101      	movs	r1, #1
  40a7a6:	fbb3 f8f2 	udiv	r8, r3, r2
  40a7aa:	0c25      	lsrs	r5, r4, #16
  40a7ac:	fb02 3318 	mls	r3, r2, r8, r3
  40a7b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a7b4:	fb0c f308 	mul.w	r3, ip, r8
  40a7b8:	42ab      	cmp	r3, r5
  40a7ba:	d907      	bls.n	40a7cc <__udivmoddi4+0x134>
  40a7bc:	19ed      	adds	r5, r5, r7
  40a7be:	f108 30ff 	add.w	r0, r8, #4294967295
  40a7c2:	d202      	bcs.n	40a7ca <__udivmoddi4+0x132>
  40a7c4:	42ab      	cmp	r3, r5
  40a7c6:	f200 80d1 	bhi.w	40a96c <__udivmoddi4+0x2d4>
  40a7ca:	4680      	mov	r8, r0
  40a7cc:	1aed      	subs	r5, r5, r3
  40a7ce:	b2a3      	uxth	r3, r4
  40a7d0:	fbb5 f0f2 	udiv	r0, r5, r2
  40a7d4:	fb02 5510 	mls	r5, r2, r0, r5
  40a7d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a7dc:	fb0c fc00 	mul.w	ip, ip, r0
  40a7e0:	45a4      	cmp	ip, r4
  40a7e2:	d907      	bls.n	40a7f4 <__udivmoddi4+0x15c>
  40a7e4:	19e4      	adds	r4, r4, r7
  40a7e6:	f100 33ff 	add.w	r3, r0, #4294967295
  40a7ea:	d202      	bcs.n	40a7f2 <__udivmoddi4+0x15a>
  40a7ec:	45a4      	cmp	ip, r4
  40a7ee:	f200 80b8 	bhi.w	40a962 <__udivmoddi4+0x2ca>
  40a7f2:	4618      	mov	r0, r3
  40a7f4:	eba4 040c 	sub.w	r4, r4, ip
  40a7f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a7fc:	e79d      	b.n	40a73a <__udivmoddi4+0xa2>
  40a7fe:	4631      	mov	r1, r6
  40a800:	4630      	mov	r0, r6
  40a802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a806:	f1ce 0420 	rsb	r4, lr, #32
  40a80a:	fa05 f30e 	lsl.w	r3, r5, lr
  40a80e:	fa07 f70e 	lsl.w	r7, r7, lr
  40a812:	fa20 f804 	lsr.w	r8, r0, r4
  40a816:	0c3a      	lsrs	r2, r7, #16
  40a818:	fa25 f404 	lsr.w	r4, r5, r4
  40a81c:	ea48 0803 	orr.w	r8, r8, r3
  40a820:	fbb4 f1f2 	udiv	r1, r4, r2
  40a824:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a828:	fb02 4411 	mls	r4, r2, r1, r4
  40a82c:	fa1f fc87 	uxth.w	ip, r7
  40a830:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a834:	fb01 f30c 	mul.w	r3, r1, ip
  40a838:	42ab      	cmp	r3, r5
  40a83a:	fa00 f40e 	lsl.w	r4, r0, lr
  40a83e:	d909      	bls.n	40a854 <__udivmoddi4+0x1bc>
  40a840:	19ed      	adds	r5, r5, r7
  40a842:	f101 30ff 	add.w	r0, r1, #4294967295
  40a846:	f080 808a 	bcs.w	40a95e <__udivmoddi4+0x2c6>
  40a84a:	42ab      	cmp	r3, r5
  40a84c:	f240 8087 	bls.w	40a95e <__udivmoddi4+0x2c6>
  40a850:	3902      	subs	r1, #2
  40a852:	443d      	add	r5, r7
  40a854:	1aeb      	subs	r3, r5, r3
  40a856:	fa1f f588 	uxth.w	r5, r8
  40a85a:	fbb3 f0f2 	udiv	r0, r3, r2
  40a85e:	fb02 3310 	mls	r3, r2, r0, r3
  40a862:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a866:	fb00 f30c 	mul.w	r3, r0, ip
  40a86a:	42ab      	cmp	r3, r5
  40a86c:	d907      	bls.n	40a87e <__udivmoddi4+0x1e6>
  40a86e:	19ed      	adds	r5, r5, r7
  40a870:	f100 38ff 	add.w	r8, r0, #4294967295
  40a874:	d26f      	bcs.n	40a956 <__udivmoddi4+0x2be>
  40a876:	42ab      	cmp	r3, r5
  40a878:	d96d      	bls.n	40a956 <__udivmoddi4+0x2be>
  40a87a:	3802      	subs	r0, #2
  40a87c:	443d      	add	r5, r7
  40a87e:	1aeb      	subs	r3, r5, r3
  40a880:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a884:	e78f      	b.n	40a7a6 <__udivmoddi4+0x10e>
  40a886:	f1c1 0720 	rsb	r7, r1, #32
  40a88a:	fa22 f807 	lsr.w	r8, r2, r7
  40a88e:	408b      	lsls	r3, r1
  40a890:	fa05 f401 	lsl.w	r4, r5, r1
  40a894:	ea48 0303 	orr.w	r3, r8, r3
  40a898:	fa20 fe07 	lsr.w	lr, r0, r7
  40a89c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a8a0:	40fd      	lsrs	r5, r7
  40a8a2:	ea4e 0e04 	orr.w	lr, lr, r4
  40a8a6:	fbb5 f9fc 	udiv	r9, r5, ip
  40a8aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a8ae:	fb0c 5519 	mls	r5, ip, r9, r5
  40a8b2:	fa1f f883 	uxth.w	r8, r3
  40a8b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a8ba:	fb09 f408 	mul.w	r4, r9, r8
  40a8be:	42ac      	cmp	r4, r5
  40a8c0:	fa02 f201 	lsl.w	r2, r2, r1
  40a8c4:	fa00 fa01 	lsl.w	sl, r0, r1
  40a8c8:	d908      	bls.n	40a8dc <__udivmoddi4+0x244>
  40a8ca:	18ed      	adds	r5, r5, r3
  40a8cc:	f109 30ff 	add.w	r0, r9, #4294967295
  40a8d0:	d243      	bcs.n	40a95a <__udivmoddi4+0x2c2>
  40a8d2:	42ac      	cmp	r4, r5
  40a8d4:	d941      	bls.n	40a95a <__udivmoddi4+0x2c2>
  40a8d6:	f1a9 0902 	sub.w	r9, r9, #2
  40a8da:	441d      	add	r5, r3
  40a8dc:	1b2d      	subs	r5, r5, r4
  40a8de:	fa1f fe8e 	uxth.w	lr, lr
  40a8e2:	fbb5 f0fc 	udiv	r0, r5, ip
  40a8e6:	fb0c 5510 	mls	r5, ip, r0, r5
  40a8ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a8ee:	fb00 f808 	mul.w	r8, r0, r8
  40a8f2:	45a0      	cmp	r8, r4
  40a8f4:	d907      	bls.n	40a906 <__udivmoddi4+0x26e>
  40a8f6:	18e4      	adds	r4, r4, r3
  40a8f8:	f100 35ff 	add.w	r5, r0, #4294967295
  40a8fc:	d229      	bcs.n	40a952 <__udivmoddi4+0x2ba>
  40a8fe:	45a0      	cmp	r8, r4
  40a900:	d927      	bls.n	40a952 <__udivmoddi4+0x2ba>
  40a902:	3802      	subs	r0, #2
  40a904:	441c      	add	r4, r3
  40a906:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a90a:	eba4 0408 	sub.w	r4, r4, r8
  40a90e:	fba0 8902 	umull	r8, r9, r0, r2
  40a912:	454c      	cmp	r4, r9
  40a914:	46c6      	mov	lr, r8
  40a916:	464d      	mov	r5, r9
  40a918:	d315      	bcc.n	40a946 <__udivmoddi4+0x2ae>
  40a91a:	d012      	beq.n	40a942 <__udivmoddi4+0x2aa>
  40a91c:	b156      	cbz	r6, 40a934 <__udivmoddi4+0x29c>
  40a91e:	ebba 030e 	subs.w	r3, sl, lr
  40a922:	eb64 0405 	sbc.w	r4, r4, r5
  40a926:	fa04 f707 	lsl.w	r7, r4, r7
  40a92a:	40cb      	lsrs	r3, r1
  40a92c:	431f      	orrs	r7, r3
  40a92e:	40cc      	lsrs	r4, r1
  40a930:	6037      	str	r7, [r6, #0]
  40a932:	6074      	str	r4, [r6, #4]
  40a934:	2100      	movs	r1, #0
  40a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a93a:	4618      	mov	r0, r3
  40a93c:	e6f8      	b.n	40a730 <__udivmoddi4+0x98>
  40a93e:	4690      	mov	r8, r2
  40a940:	e6e0      	b.n	40a704 <__udivmoddi4+0x6c>
  40a942:	45c2      	cmp	sl, r8
  40a944:	d2ea      	bcs.n	40a91c <__udivmoddi4+0x284>
  40a946:	ebb8 0e02 	subs.w	lr, r8, r2
  40a94a:	eb69 0503 	sbc.w	r5, r9, r3
  40a94e:	3801      	subs	r0, #1
  40a950:	e7e4      	b.n	40a91c <__udivmoddi4+0x284>
  40a952:	4628      	mov	r0, r5
  40a954:	e7d7      	b.n	40a906 <__udivmoddi4+0x26e>
  40a956:	4640      	mov	r0, r8
  40a958:	e791      	b.n	40a87e <__udivmoddi4+0x1e6>
  40a95a:	4681      	mov	r9, r0
  40a95c:	e7be      	b.n	40a8dc <__udivmoddi4+0x244>
  40a95e:	4601      	mov	r1, r0
  40a960:	e778      	b.n	40a854 <__udivmoddi4+0x1bc>
  40a962:	3802      	subs	r0, #2
  40a964:	443c      	add	r4, r7
  40a966:	e745      	b.n	40a7f4 <__udivmoddi4+0x15c>
  40a968:	4608      	mov	r0, r1
  40a96a:	e708      	b.n	40a77e <__udivmoddi4+0xe6>
  40a96c:	f1a8 0802 	sub.w	r8, r8, #2
  40a970:	443d      	add	r5, r7
  40a972:	e72b      	b.n	40a7cc <__udivmoddi4+0x134>

0040a974 <__aeabi_idiv0>:
  40a974:	4770      	bx	lr
  40a976:	bf00      	nop

0040a978 <sysfont_glyphs>:
  40a978:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  40a988:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  40a998:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  40a9a8:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  40a9b8:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  40a9c8:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  40a9d8:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  40a9e8:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  40a9f8:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  40aa08:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  40aa18:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  40aa28:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  40aa38:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  40aa48:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  40aa58:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  40aa68:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  40aa78:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  40aa88:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  40aa98:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  40aaa8:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  40aab8:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  40aac8:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  40aad8:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  40aae8:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  40aaf8:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  40ab08:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  40ab18:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  40ab28:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  40ab38:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  40ab48:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  40ab58:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  40ab68:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  40ab78:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  40ab88:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  40ab98:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  40aba8:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  40abb8:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  40abc8:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  40abd8:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  40abe8:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  40abf8:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  40ac08:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  40ac18:	0000 0000 6d54 2072 7653 0063 6425 000a     ....Tmr Svc.%d..
  40ac28:	6625 000a 6f43 656d 6f63 0075 6c6f 6465     %f..Comecou.oled
  40ac38:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  40ac48:	6165 6574 6f20 656c 2064 6174 6b73 000d     eate oled task..
  40ac58:	6573 736e 726f 0000 6146 6c69 6465 7420     sensor..Failed t
  40ac68:	206f 7263 6165 6574 7320 6e65 6f73 2072     o create sensor 
  40ac78:	6174 6b73 000d 0000 6146 6c69 6465 7420     task....Failed t
  40ac88:	206f 7263 6165 6574 5020 6e69 2067 694c     o create Ping Li
  40ac98:	7473 0000 6146 6c69 6465 7420 206f 7263     st..Failed to cr
  40aca8:	6165 6574 4520 6863 206f 694c 7473 0000     eate Echo List..
  40acb8:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  40acc8:	4f20 656c 2064 694c 7473 0000 6625 0000      Oled List..%f..
  40acd8:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  40ace8:	2078 7325 0a0d 0000                         x %s....

0040acf0 <_global_impure_ptr>:
  40acf0:	0080 2040 000a 0000 4e49 0046 6e69 0066     ..@ ....INF.inf.
  40ad00:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
  40ad10:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  40ad20:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  40ad30:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0040ad3c <blanks.7223>:
  40ad3c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ad4c <zeroes.7224>:
  40ad4c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040ad5c <blanks.7238>:
  40ad5c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ad6c <zeroes.7239>:
  40ad6c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40ad7c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40ad8c:	0000 0000                                   ....

0040ad90 <__mprec_bigtens>:
  40ad90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40ada0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40adb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040adb8 <__mprec_tens>:
  40adb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40adc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40add8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40ade8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40adf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40ae08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40ae18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40ae28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40ae38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40ae48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40ae58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40ae68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40ae78:	9db4 79d9 7843 44ea                         ...yCx.D

0040ae80 <p05.6055>:
  40ae80:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  40ae90:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040ae9c <_ctype_>:
  40ae9c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40aeac:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40aebc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40aecc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40aedc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40aeec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40aefc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40af0c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40af1c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040afa0 <_init>:
  40afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40afa2:	bf00      	nop
  40afa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40afa6:	bc08      	pop	{r3}
  40afa8:	469e      	mov	lr, r3
  40afaa:	4770      	bx	lr

0040afac <__init_array_start>:
  40afac:	00407add 	.word	0x00407add

0040afb0 <__frame_dummy_init_array_entry>:
  40afb0:	00400165                                e.@.

0040afb4 <_fini>:
  40afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40afb6:	bf00      	nop
  40afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40afba:	bc08      	pop	{r3}
  40afbc:	469e      	mov	lr, r3
  40afbe:	4770      	bx	lr

0040afc0 <__fini_array_start>:
  40afc0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 a978 0040 0706 7d20               ....x.@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <lista_eixo_max>:
20400024:	000c 0000 0018 0000 0024 0000 0030 0000     ........$...0...
20400034:	003c 0000 0048 0000 0054 0000 0060 0000     <...H...T...`...
20400044:	006c 0000 0000 0000                         l.......

2040004c <lista_eixo_min>:
2040004c:	0000 0000 000c 0000 0018 0000 0024 0000     ............$...
2040005c:	0030 0000 003c 0000 0048 0000 0054 0000     0...<...H...T...
2040006c:	0060 0000 006c 0000                         `...l...

20400074 <xHigherPriorityTaskWoken>:
20400074:	0001 0000                                   ....

20400078 <_impure_ptr>:
20400078:	0080 2040 0000 0000                         ..@ ....

20400080 <impure_data>:
20400080:	0000 0000 036c 2040 03d4 2040 043c 2040     ....l.@ ..@ <.@ 
	...
20400128:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400138:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004a8 <__malloc_av_>:
	...
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 

204008b0 <__malloc_sbrk_base>:
204008b0:	ffff ffff                                   ....

204008b4 <__malloc_trim_threshold>:
204008b4:	0000 0002                                   ....

204008b8 <__atexit_recursive_mutex>:
204008b8:	0ebc 2040                                   ..@ 

204008bc <__global_locale>:
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040095c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040097c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040099c:	a5d1 0040 a475 0040 0000 0000 ae9c 0040     ..@.u.@.......@.
204009ac:	ae98 0040 ac10 0040 ac10 0040 ac10 0040     ..@...@...@...@.
204009bc:	ac10 0040 ac10 0040 ac10 0040 ac10 0040     ..@...@...@...@.
204009cc:	ac10 0040 ac10 0040 ffff ffff ffff ffff     ..@...@.........
204009dc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400a04:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
